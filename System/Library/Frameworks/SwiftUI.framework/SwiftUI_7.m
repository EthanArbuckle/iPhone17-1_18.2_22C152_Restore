uint64_t specialized DisplayListTransform.value.getter@<X0>(void *a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Value;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int16 v17;
  char v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  long long v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  void *v57;
  void *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  long long *v63;
  long long v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  uint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(long long *__return_ptr, uint64_t, uint64_t);
  id v81;
  id v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  long long v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  void **v113;
  uint64_t v114;
  void *v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t (*v125)(void, uint64_t);
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  long long *v139;
  long long v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  __int16 v146;
  char v147;
  char *v148;
  uint64_t v149;
  char *v150;
  void *v151;
  int v152;
  long long *v153;
  long long v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  int v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  void *v192;
  uint64_t v193;
  long long v194;
  __int16 v195;
  char v196;
  int v197;
  long long v198;
  long long v199;
  void *v200;
  uint64_t v201;
  long long v202;
  __int16 v203;
  char v204;
  int v205;
  long long v206;
  unsigned char v207[24];
  uint64_t v208;
  long long v209;
  uint64_t v210;
  long long v211;
  uint64_t v212;
  void *v213;
  long long v214;
  uint64_t v215;
  void *v216;
  void *v217;
  long long v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  char v223;

  v2 = v1;
  v4 = type metadata accessor for AccessibilityNodeAttachment();
  v181 = *(void *)(v4 - 8);
  v182 = v4;
  MEMORY[0x1F4188790](v4);
  v180 = (uint64_t *)((char *)&v164 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  v185 = (uint64_t)&v164 - v7;
  v8 = *((_DWORD *)v1 + 12);
  LODWORD(v188) = *MEMORY[0x1E4F4E7A0];
  if (v8 == v188)
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v10 = *(_WORD *)(Value + 8);
    v11 = *(unsigned char *)(Value + 10);
    v221 = *(void *)Value;
    v222 = v10;
    v223 = v11;
    swift_bridgeObjectRetain();
  }
  v12 = MEMORY[0x1E4FBC860];
  v13 = MEMORY[0x1E4FBC860];
  if (*((_DWORD *)v1 + 14) != v188)
  {
    v13 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v179 = *((_DWORD *)v1 + 11);
  v206 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v17 = v222;
    v18 = v223;
    *a1 = v221;
    *((_WORD *)a1 + 4) = v17;
    *((unsigned char *)a1 + 10) = v18;
    return result;
  }
  v220 = v12;
  v14 = (unint64_t)v13 >> 62;
  if ((unint64_t)v13 >> 62) {
    goto LABEL_124;
  }
LABEL_8:
  if (AGGraphGetCurrentAttribute() == v188)
  {
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v166 = a1;
  AccessibilityAttachmentToken.init<A>(_:)();
  v186 = v13;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15 < 0) {
      goto LABEL_126;
    }
  }
  else
  {
    v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v184 = v2;
  if (!v15)
  {
    swift_bridgeObjectRelease();
    v169 = 0;
    goto LABEL_46;
  }
  v169 = 0;
  LODWORD(v187) = *((_DWORD *)v2 + 7);
  do
  {
    if (!v15)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v19 = v2;
    *(void *)&v189 = v15;
    v20 = AGGraphGetValue();
    outlined init with copy of AccessibilityScrollableContextModifier(v20, (uint64_t)&v206);
    outlined init with copy of AccessibilityScrollableContext((uint64_t)&v206, (uint64_t)&v198);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v21 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4F41090]);
    v14 = v22;
    *((void *)&v191 + 1) = v22;
    a1 = (void *)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>();
    v192 = a1;
    v2 = (char *)&unk_1ED4854F8;
    *(void *)&v190 = swift_allocObject();
    _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0((uint64_t)&v198, v190 + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    outlined init with take of OptionalBinaryInteger(&v190, (uint64_t)&v218);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v217 = (void *)v21;
    v13 = v219;
    v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v218, v219);
    v25 = MEMORY[0x1F4188790](v24);
    v27 = (char *)&v164 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v28 + 16))(v27, v25);
    v215 = v14;
    v216 = a1;
    v29 = swift_allocObject();
    *(void *)&v214 = v29;
    v30 = *((_OWORD *)v27 + 3);
    *(_OWORD *)(v29 + 48) = *((_OWORD *)v27 + 2);
    *(_OWORD *)(v29 + 64) = v30;
    *(void *)(v29 + 79) = *(void *)(v27 + 63);
    v31 = *((_OWORD *)v27 + 1);
    *(_OWORD *)(v29 + 16) = *(_OWORD *)v27;
    *(_OWORD *)(v29 + 32) = v31;
    v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
    v34 = *(void *)(v21 + 16);
    v35 = (v32 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      goto LABEL_119;
    }
    v13 = v32;
    if (*(void *)(v21 + 24) >= v36)
    {
      v2 = v19;
      if (isUniquelyReferenced_nonNull_native)
      {
        v39 = v217;
        if (v32) {
          goto LABEL_25;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v39 = v217;
        if (v13) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
      if ((v13 & 1) != (v38 & 1)) {
        goto LABEL_128;
      }
      v33 = v37;
      v2 = v19;
      v39 = v217;
      if (v13)
      {
LABEL_25:
        v40 = v39[7] + 40 * v33;
        __swift_destroy_boxed_opaque_existential_1(v40);
        outlined init with take of OptionalBinaryInteger(&v214, v40);
        goto LABEL_29;
      }
    }
    v13 = v215;
    v41 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v214, v215);
    v42 = MEMORY[0x1F4188790](v41);
    v2 = (char *)&v164 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v44 + 16))(v2, v42);
    v212 = v14;
    v213 = a1;
    v45 = swift_allocObject();
    *(void *)&v211 = v45;
    *(void *)(v45 + 79) = *(void *)(v2 + 63);
    v46 = *((_OWORD *)v2 + 3);
    *(_OWORD *)(v45 + 48) = *((_OWORD *)v2 + 2);
    *(_OWORD *)(v45 + 64) = v46;
    v47 = *((_OWORD *)v2 + 1);
    *(_OWORD *)(v45 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v45 + 32) = v47;
    v39[(v33 >> 6) + 8] |= 1 << v33;
    *(void *)(v39[6] + 8 * v33) = &type metadata for AccessibilityProperties.ScrollableContextKey;
    outlined init with take of OptionalBinaryInteger(&v211, v39[7] + 40 * v33);
    v48 = v39[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49) {
      goto LABEL_120;
    }
    v39[2] = v50;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v214);
    v2 = v184;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v218);
    swift_bridgeObjectRelease();
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v198, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    *(void *)&v190 = v39;
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityScrollableContextModifier((uint64_t)&v206);
    if (*((_DWORD *)v2 + 13) == v188) {
      goto LABEL_38;
    }
    v51 = AGGraphGetValue();
    v52 = *(void *)v51;
    a1 = *(void **)(v51 + 8);
    if (*(unsigned char *)(v51 + 16))
    {
      if (*(unsigned char *)(v51 + 16) != 1) {
        goto LABEL_38;
      }
      v53 = swift_bridgeObjectRetain();
      v54 = v169;
      v55 = specialized Sequence.compactMap<A>(_:)(v53);
      v169 = v54;
      static AccessibilityAttachment.combine(_:)(v55, (uint64_t *)&v206);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v52, a1, 1);
      a1 = (void *)*((void *)&v206 + 1);
      v52 = v206;
    }
    else
    {
      v56 = a1;
      swift_bridgeObjectRetain();
    }
    *(void *)&v206 = v52;
    AccessibilityProperties.merge(with:)((uint64_t *)&v206);
    v206 = v198;
    v57 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v57)
    {
      *(void *)&v206 = v52;
      *((void *)&v206 + 1) = a1;
      if (AccessibilityAttachment.platformElement.getter()) {
        AccessibilityAttachment.platformElement.setter();
      }
    }
    swift_bridgeObjectRelease();

LABEL_38:
    v58 = (void *)*((void *)&v198 + 1);
    v14 = v198;
    v206 = v198;
    if (AccessibilityAttachment.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v59 = (char *)v220;
      a1 = v58;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, v59);
      }
      v61 = *((void *)v59 + 2);
      v60 = *((void *)v59 + 3);
      v13 = v61 + 1;
      if (v61 >= v60 >> 1) {
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, v59);
      }
      *((void *)v59 + 2) = v13;
      v62 = &v59[16 * v61];
      *((void *)v62 + 4) = v14;
      *((void *)v62 + 5) = v58;

      swift_bridgeObjectRelease();
      v220 = (uint64_t)v59;
    }
    v15 = v189 - 1;
  }
  while ((void)v189 != 1);
  swift_bridgeObjectRelease();
LABEL_46:
  v206 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  v206 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  v165 = *((_DWORD *)v2 + 8);
  v63 = (long long *)AGGraphGetValue();
  v64 = v63[1];
  v206 = *v63;
  *(_OWORD *)v207 = v64;
  v65 = MEMORY[0x18C114450]();
  v67 = v66;
  DisplayList.Version.init(forUpdate:)();
  v178 = v2[4];
  v167 = v206;
  if ((v178 & 1) != 0 && (v172 = *(void *)(v220 + 16)) != 0)
  {
    v171 = v220 + 32;
    v164 = v220;
    swift_bridgeObjectRetain_n();
    v68 = 0;
    v168 = 0;
    v177 = 1;
    v170 = MEMORY[0x1E4FBC840] + 8;
    do
    {
      v69 = (uint64_t *)(v171 + 16 * v68);
      v71 = *v69;
      v70 = (void *)v69[1];
      v72 = (uint64_t *)AGGraphGetValue();
      v73 = *v72;
      v186 = v72[1];
      KeyPath = swift_getKeyPath();
      v75 = *(void *)(v71 + 16);
      v183 = v71;
      if (v75
        && (v76 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
            (v77 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v71 + 56) + 40 * v76, (uint64_t)&v206);
        v78 = *(void *)&v207[8];
        v79 = *(void *)&v207[16];
        __swift_project_boxed_opaque_existential_1(&v206, *(uint64_t *)&v207[8]);
        v80 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v79 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        v81 = v70;
        swift_retain();
        v80(&v198, v78, v79);
        v2 = v184;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v206);
      }
      else
      {
        v198 = 0u;
        v199 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        v82 = v70;
        swift_retain();
      }
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v170, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
      v83 = swift_dynamicCast();
      v176 = KeyPath;
      if (v83)
      {
        v84 = v206;
      }
      else
      {
        *(void *)&v206 = 0;
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        v84 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v85 = *(void *)(v84 + 16);
      if (v85)
      {
        v174 = v70;
        v175 = v68;
        v86 = (void *)(v84 + 32);
        v173 = v84;
        swift_bridgeObjectRetain();
        a1 = (void *)MEMORY[0x1E4FBC860];
        do
        {
          v89 = v86[3];
          v88 = v86[4];
          __swift_project_boxed_opaque_existential_1(v86, v89);
          *(void *)&v198 = v73;
          *((void *)&v198 + 1) = v186;
          (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v88 + 96))(&v206, &v198, v89, v88);
          if ((void)v209)
          {
            v189 = v209;
            v90 = *(_WORD *)v207;
            v187 = v206;
            v188 = *(_OWORD *)&v207[8];
            v91 = v208;
            v92 = v210;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, (char *)a1);
            }
            v94 = a1[2];
            v93 = a1[3];
            v95 = v189;
            if (v94 >= v93 >> 1)
            {
              v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v93 > 1), v94 + 1, 1, (char *)a1);
              v95 = v189;
              a1 = v96;
            }
            a1[2] = v94 + 1;
            v87 = &a1[9 * v94];
            *((_OWORD *)v87 + 2) = v187;
            *((_WORD *)v87 + 24) = v90;
            *(_OWORD *)(v87 + 7) = v188;
            *((unsigned char *)v87 + 72) = v91 & 1;
            *((_OWORD *)v87 + 5) = v95;
            v87[12] = v92;
          }
          v86 += 6;
          --v85;
        }
        while (v85);
        swift_bridgeObjectRelease();
        v2 = v184;
        v70 = v174;
        v68 = v175;
      }
      else
      {
        a1 = (void *)MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v97 = a1[2];
      v98 = v176;
      swift_release();
      if (v97)
      {
        if (v177)
        {
          if (v177 == 1)
          {
            swift_bridgeObjectRelease();

            v168 = v98;
            v177 = (uint64_t)a1;
          }
          else
          {
            v99 = v70;
            v100 = a1[2];
            v14 = *(void *)(v177 + 16);
            v13 = v14 + v100;
            if (__OFADD__(v14, v100)) {
              goto LABEL_121;
            }
            swift_bridgeObjectRetain();
            v101 = (char *)swift_isUniquelyReferenced_nonNull_native();
            v102 = (char *)v177;
            if (!v101 || v13 > *(void *)(v177 + 24) >> 1)
            {
              if (v14 <= v13) {
                v103 = v14 + v100;
              }
              else {
                v103 = v14;
              }
              v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v101, v103, 1, (char *)v177);
            }
            v104 = a1[2];
            v177 = (uint64_t)v102;
            if (v104)
            {
              if ((*((void *)v102 + 3) >> 1) - *((void *)v102 + 2) < v100) {
                goto LABEL_123;
              }
              swift_arrayInitWithCopy();
              if (v100)
              {
                v105 = *(void *)(v177 + 16);
                v49 = __OFADD__(v105, v100);
                v106 = v105 + v100;
                if (v49) {
                  goto LABEL_127;
                }
                *(void *)(v177 + 16) = v106;
              }
            }
            else if (v100)
            {
              goto LABEL_122;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_release();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          v177 = 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
      ++v68;
    }
    while (v68 != v172);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v168 = 0;
    v177 = 1;
  }
  v107 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v221, &v220, v65, v67);
  v108 = v220;
  v109 = *(void *)(v220 + 16);
  v110 = MEMORY[0x1E4FBC860];
  if (!v109) {
    goto LABEL_111;
  }
  v111 = v107;
  *(void *)&v211 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109, 0);
  v218 = *(_OWORD *)(v2 + 8);
  v112 = v111 & 1;
  v186 = v108;
  v113 = (void **)(v108 + 40);
  *(void *)&v189 = MEMORY[0x1E4FBC840] + 8;
  LODWORD(v187) = v111 & 1;
  while (2)
  {
    v114 = (uint64_t)*(v113 - 1);
    v115 = *v113;
    if (*(void *)(v114 + 16)
      && (v116 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v117 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v114 + 56) + 40 * v116, (uint64_t)&v206);
      v119 = *(void *)&v207[8];
      v118 = *(void *)&v207[16];
      __swift_project_boxed_opaque_existential_1(&v206, *(uint64_t *)&v207[8]);
      *(void *)&v188 = *(void *)(v118 + 8);
      v120 = v115;
      swift_bridgeObjectRetain_n();
      v121 = v120;
      v122 = v118;
      v112 = v187;
      ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v188)(&v198, v119, v122);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v206);
    }
    else
    {
      v198 = 0u;
      v199 = 0u;
      v123 = v115;
      swift_bridgeObjectRetain_n();
      v124 = v123;
    }
    v125 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v189, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v125);
    if (swift_dynamicCast())
    {
      v207[1] = 0;
      v127 = *((void *)&v206 + 1);
      v126 = v206;
      v128 = v207[0];
      swift_bridgeObjectRelease();
      if ((v128 & 1) == 0)
      {
        v129 = 0;
        if (v178) {
          goto LABEL_101;
        }
LABEL_104:
        v133 = (uint64_t)v180;
        *v180 = v114;
        *(void *)(v133 + 8) = v115;
        goto LABEL_105;
      }
    }
    else
    {
      v206 = 0uLL;
      *(_WORD *)v207 = 256;
      swift_bridgeObjectRelease();
    }
    v126 = 0;
    v127 = 0;
    v129 = 1;
    if ((v178 & 1) == 0) {
      goto LABEL_104;
    }
LABEL_101:
    v130 = (uint64_t *)AGGraphGetValue();
    v132 = *v130;
    v131 = v130[1];
    *(void *)&v198 = v114;
    *((void *)&v198 + 1) = v115;
    v206 = 0u;
    *(_OWORD *)v207 = 0u;
    *(void *)&v207[16] = v126;
    v208 = v127;
    LOBYTE(v209) = v129;
    *(void *)&v190 = v132;
    *((void *)&v190 + 1) = v131;
    v214 = v218;
    swift_retain();
    swift_retain();
    v133 = (uint64_t)v180;
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_105:
    v2 = v184;
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v134 = v182;
    *(unsigned char *)(v133 + *(int *)(v182 + 20)) = v112;
    *(unsigned char *)(v133 + *(int *)(v134 + 24)) = 0;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v133, v185, MEMORY[0x1E4F40FA8]);
    swift_bridgeObjectRelease();

    v110 = v211;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v110 + 16) + 1, 1);
      v110 = v211;
    }
    v136 = *(void *)(v110 + 16);
    v135 = *(void *)(v110 + 24);
    if (v136 >= v135 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1);
      v110 = v211;
    }
    v113 += 2;
    *(void *)(v110 + 16) = v136 + 1;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v185, v110+ ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80))+ *(void *)(v181 + 72) * v136, MEMORY[0x1E4F40FA8]);
    if (--v109) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_111:
  swift_bridgeObjectRelease();
  v137 = swift_allocObject();
  *(void *)(v137 + 16) = v110;
  *(void *)&v198 = v137;
  *((void *)&v198 + 1) = 0x4000000D00000000;
  *(void *)&v199 = v221;
  BYTE10(v199) = v223;
  WORD4(v199) = v222;
  if (v177 == 1)
  {
    v138 = *(_DWORD *)v2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v139 = (long long *)AGGraphGetValue();
    v140 = v139[1];
    v206 = *v139;
    *(_OWORD *)v207 = v140;
    v141 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v141);
    v138 = 0;
  }
  LODWORD(v214) = v138;
  *(void *)&v190 = v167;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v189) = v2[24];
  LOBYTE(v198) = v189;
  DisplayList.Item.canonicalize(options:)();
  v142 = v208;
  v143 = v209;
  v144 = (unsigned __int16)v210 | (BYTE2(v210) << 16);
  v198 = v206;
  v199 = *(_OWORD *)v207;
  v200 = *(void **)&v207[16];
  v201 = v208;
  v202 = v209;
  v204 = BYTE2(v210);
  v203 = v210;
  v205 = HIDWORD(v210);
  outlined copy of DisplayList.Item.Value(v208, v209);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v145 = v190;
  v146 = WORD4(v190);
  v147 = BYTE10(v190);
  v148 = (char *)v177;
  if (v177 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v142, v143);
  }
  else
  {
    v149 = swift_allocObject();
    v150 = v2;
    v151 = (void *)v149;
    LODWORD(v188) = v144;
    v152 = *(_DWORD *)v150;
    v153 = (long long *)AGGraphGetValue();
    v154 = v153[1];
    v198 = *v153;
    v199 = v154;
    swift_bridgeObjectRetain();
    *(void *)&v187 = v143;
    v155 = v168;
    outlined copy of AccessibilityArchivableViewAttachment?(v168, 0, 0, (uint64_t)v148);
    outlined copy of Environment<AppIntentExecutor?>.Content(v155, 0, 0);
    v156 = swift_bridgeObjectRetain();
    v186 = v142;
    v157 = MEMORY[0x18C114450](v156);
    v159 = v158;
    v151[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v151[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v160 = swift_allocObject();
    v151[2] = v160;
    *(void *)(v160 + 16) = v155;
    *(void *)(v160 + 24) = 0;
    *(unsigned char *)(v160 + 32) = 0;
    *(void *)(v160 + 40) = v148;
    *(_DWORD *)(v160 + 48) = v152;
    *(double *)(v160 + 56) = v157;
    *(void *)(v160 + 64) = v159;
    *(void *)&v190 = v151;
    *((void *)&v190 + 1) = 0x4000000C00000000;
    *(void *)&v191 = v145;
    BYTE10(v191) = v147;
    WORD4(v191) = v146;
    LODWORD(v211) = v152;
    *(void *)&v214 = v167;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v190) = v189;
    DisplayList.Item.canonicalize(options:)();
    v161 = v201;
    v162 = v202;
    v190 = v198;
    v191 = v199;
    v192 = v200;
    v193 = v201;
    v194 = v202;
    v196 = v204;
    v195 = v203;
    v197 = v205;
    outlined copy of DisplayList.Item.Value(v201, v202);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v155, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v155, 0, 0, (uint64_t)v148);
    outlined consume of DisplayList.Item.Value(v161, v162);
    outlined consume of DisplayList.Item.Value(v186, v187);
    result = swift_bridgeObjectRelease();
    v145 = v214;
    v146 = WORD4(v214);
    v147 = BYTE10(v214);
  }
  v163 = v166;
  *v166 = v145;
  *((_WORD *)v163 + 4) = v146;
  *((unsigned char *)v163 + 10) = v147;
  return result;
}

{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t Value;
  __int16 v10;
  char v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  __int16 v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char *v29;
  id v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  void *v36;
  char *v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  char *v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  id v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int v72;
  void *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unsigned char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  char *v102;
  void *v103;
  uint64_t v104;
  id v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  void *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  void *v117;
  id v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  void *v143;
  id v144;
  id v145;
  void *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  int *v151;
  uint64_t *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  void **v157;
  void *v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  int *v162;
  long long *v163;
  long long v164;
  CGFloat v165;
  double v166;
  CGFloat v167;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t KeyPath;
  unint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  __int16 v189;
  char v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  long long v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  int64_t v200;
  uint64_t v201;
  char v202;
  void **v203;
  void *v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  id v210;
  id v211;
  uint64_t v212;
  id v213;
  id v214;
  uint64_t (*v215)(void, uint64_t);
  uint64_t v216;
  uint64_t v217;
  char v218;
  char v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int *v227;
  int v228;
  long long *v229;
  long long v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  __int16 v236;
  char v237;
  uint64_t v238;
  void *v239;
  int v240;
  long long *v241;
  long long v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  char *v264;
  uint64_t v265;
  char *v266;
  int *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  long long v283;
  long long v284;
  long long v285;
  long long v286;
  long long v287;
  uint64_t v288;
  uint64_t v289;
  long long v290;
  __int16 v291;
  char v292;
  int v293;
  long long v294;
  long long v295;
  uint64_t v296;
  uint64_t v297;
  long long v298;
  __int16 v299;
  char v300;
  int v301;
  long long v302;
  unsigned char v303[24];
  uint64_t v304;
  long long v305;
  uint64_t v306;
  long long v307;
  long long v308;
  uint64_t v309;
  uint64_t v310;
  __int16 v311;
  char v312;
  long long v313;

  v263 = a1;
  v3 = type metadata accessor for AccessibilityNodeAttachment();
  v277 = *(void *)(v3 - 8);
  v278 = v3;
  MEMORY[0x1F4188790](v3);
  v5 = (uint64_t *)((char *)&v252 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  v281 = (uint64_t)&v252 - v7;
  v267 = v1;
  LODWORD(v8) = *MEMORY[0x1E4F4E7A0];
  if (v1[12] == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v10 = *(_WORD *)(Value + 8);
    v11 = *(unsigned char *)(Value + 10);
    v310 = *(void *)Value;
    v311 = v10;
    v312 = v11;
    swift_bridgeObjectRetain();
  }
  v12 = v267;
  v13 = MEMORY[0x1E4FBC860];
  v14 = MEMORY[0x1E4FBC860];
  if (v267[14] != v8)
  {
    v14 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v12 = v267;
  }
  v276 = v12[11];
  v302 = *(_OWORD *)AGGraphGetValue();
  v15 = (uint64_t)&v302;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v18 = v311;
    v19 = v312;
    v20 = v263;
    *v263 = v310;
    *((_WORD *)v20 + 4) = v18;
    *((unsigned char *)v20 + 10) = v19;
    return result;
  }
  v309 = v13;
  v16 = (char *)(v14 >> 62);
  v279 = v5;
  if (v14 >> 62) {
    goto LABEL_205;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    if ((v311 & 2) != 0) {
      goto LABEL_127;
    }
  }
LABEL_10:
  if (AGGraphGetCurrentAttribute() == v8)
  {
    __break(1u);
LABEL_208:
    __break(1u);
    goto LABEL_209;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  if (v16)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15 < 0) {
      goto LABEL_208;
    }
  }
  else
  {
    v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    v275 = 0;
    v280 = 0;
    goto LABEL_144;
  }
  v21 = 0;
  v280 = 0;
  LODWORD(v282) = v267[7];
  v275 = v267[13];
  LODWORD(v269) = v8;
  v273 = v15;
  v274 = v14;
  while (1)
  {
    if (v21 == v15)
    {
      __break(1u);
LABEL_205:
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    *(void *)&v284 = v21;
    v22 = (uint64_t *)AGGraphGetValue();
    v2 = *v22;
    v23 = (void *)v22[1];
    *(void *)&v302 = *v22;
    *((void *)&v302 + 1) = v23;
    if (v275 != v8)
    {
      v24 = AGGraphGetValue();
      v26 = *(void *)v24;
      v25 = *(char **)(v24 + 8);
      if (!*(unsigned char *)(v24 + 16))
      {
        v144 = v23;
        swift_bridgeObjectRetain();
        v16 = v25;
        outlined copy of AccessibilityAttachment.Tree(v26, v25, 0);
LABEL_114:
        *(void *)&v294 = v26;
        AccessibilityProperties.merge(with:)((uint64_t *)&v294);
        v23 = (void *)*((void *)&v302 + 1);
        v2 = v302;
        v294 = v302;
        v146 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v146
          || (*(void *)&v294 = v26, *((void *)&v294 + 1) = v16, !AccessibilityAttachment.platformElement.getter()))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          AccessibilityAttachment.platformElement.setter();
          swift_bridgeObjectRelease();

          v23 = (void *)*((void *)&v302 + 1);
          v2 = v302;
        }
        goto LABEL_118;
      }
      if (*(unsigned char *)(v24 + 16) == 1) {
        break;
      }
    }
    v30 = v23;
    swift_bridgeObjectRetain();
LABEL_118:
    *(void *)&v294 = v2;
    *((void *)&v294 + 1) = v23;
    if (AccessibilityAttachment.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v147 = (char *)v309;
      v16 = v23;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v147 + 2) + 1, 1, v147);
      }
      v149 = *((void *)v147 + 2);
      v148 = *((void *)v147 + 3);
      if (v149 >= v148 >> 1) {
        v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v148 > 1), v149 + 1, 1, v147);
      }
      *((void *)v147 + 2) = v149 + 1;
      v150 = &v147[16 * v149];
      *((void *)v150 + 4) = v2;
      *((void *)v150 + 5) = v23;

      swift_bridgeObjectRelease();
      v309 = (uint64_t)v147;
      v5 = v279;
      LODWORD(v8) = v269;
    }
    v21 = v284 + 1;
    v15 = v273;
    v14 = v274;
    if ((void)v284 + 1 == v273)
    {
      swift_bridgeObjectRelease();
      v275 = 0;
      goto LABEL_144;
    }
  }
  v261 = *(void *)(v26 + 16);
  if (!v261)
  {
    v145 = v23;
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityAttachment.Tree(v26, v25, 1);
    v29 = (char *)MEMORY[0x1E4FBC860];
LABEL_113:
    static AccessibilityAttachment.combine(_:)(v29, (uint64_t *)&v294);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v26, v25, 1);
    v16 = (char *)*((void *)&v294 + 1);
    v26 = v294;
    goto LABEL_114;
  }
  v265 = v26 + 32;
  outlined copy of AccessibilityAttachment.Tree(v26, v25, 1);
  v27 = v23;
  swift_bridgeObjectRetain();
  v253 = v26;
  v254 = v25;
  outlined copy of AccessibilityAttachment.Tree(v26, v25, 1);
  v28 = 0;
  v29 = (char *)MEMORY[0x1E4FBC860];
  while (2)
  {
    v32 = v265 + 24 * v28;
    v34 = *(void *)v32;
    v33 = *(void **)(v32 + 8);
    v35 = *(unsigned __int8 *)(v32 + 16);
    if (!v35)
    {
      v260 = v28;
      v270 = v29;
      v38 = v33;
      v39 = v33;
      v40 = v34;
      swift_bridgeObjectRetain();
LABEL_33:
      if (swift_isUniquelyReferenced_nonNull_native()) {
        v29 = v270;
      }
      else {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v270 + 2) + 1, 1, v270);
      }
      v42 = *((void *)v29 + 2);
      v41 = *((void *)v29 + 3);
      v28 = v260;
      if (v42 >= v41 >> 1)
      {
        v43 = v29;
        v44 = v260;
        v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v43);
        v28 = v44;
        v29 = v45;
      }
      *((void *)v29 + 2) = v42 + 1;
      v31 = &v29[16 * v42];
      *((void *)v31 + 4) = v40;
      *((void *)v31 + 5) = v38;
LABEL_27:
      if (++v28 == v261)
      {
        v26 = v253;
        v25 = v254;
        outlined consume of AccessibilityAttachment.Tree(v253, v254, 1);
        goto LABEL_113;
      }
      continue;
    }
    break;
  }
  if (v35 != 1) {
    goto LABEL_27;
  }
  v260 = v28;
  v270 = v29;
  v264 = *(char **)(v34 + 16);
  v256 = v33;
  v257 = v34;
  if (!v264)
  {
    v46 = v33;
    outlined copy of AccessibilityAttachment.Tree(v34, v33, 1);
    outlined copy of AccessibilityAttachment.Tree(v34, v46, 1);
    swift_bridgeObjectRetain();
    v47 = (char *)MEMORY[0x1E4FBC860];
    v48 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v48)
    {
LABEL_38:
      v49 = (void **)(v48 - 1);
      if (v48 != 1)
      {
        v54 = v47;
        v55 = &v47[16 * (void)v49];
        v57 = *((void *)v55 + 4);
        v56 = (void *)*((void *)v55 + 5);
        *(void *)&v286 = v57;
        *((void *)&v286 + 1) = v56;
        v58 = v56;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v59 = (void **)&v54[16 * v48 + 8];
        v60 = v48 - 2;
        while (v60 < (uint64_t)v49)
        {
          v61 = (uint64_t)*(v59 - 1);
          v62 = *v59;
          *(void *)&v313 = v61;
          v63 = v62;
          swift_bridgeObjectRetain();
          AccessibilityProperties.merge(with:)((uint64_t *)&v313);
          v313 = v286;
          v64 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v64)
          {
            *(void *)&v313 = v61;
            *((void *)&v313 + 1) = v62;
            if (AccessibilityAttachment.platformElement.getter()) {
              AccessibilityAttachment.platformElement.setter();
            }
          }

          swift_bridgeObjectRelease();
          v59 -= 2;
          if (--v60 == -1)
          {
            swift_bridgeObjectRelease_n();
            v66 = v256;
            v65 = v257;
            outlined consume of AccessibilityAttachment.Tree(v257, v256, 1);
            outlined consume of AccessibilityAttachment.Tree(v65, v66, 1);
            outlined consume of AccessibilityAttachment.Tree(v65, v66, 1);
            v38 = (void *)*((void *)&v286 + 1);
            v40 = v286;
            v5 = v279;
            LODWORD(v8) = v269;
            goto LABEL_33;
          }
        }
        goto LABEL_134;
      }
      v51 = (void *)*((void *)v47 + 5);
      *(void *)&v294 = *((void *)v47 + 4);
      v50 = v294;
      v52 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = (void **)v256;
      v53 = v257;
      outlined consume of AccessibilityAttachment.Tree(v257, v256, 1);
      outlined consume of AccessibilityAttachment.Tree(v53, v8, 1);
      outlined consume of AccessibilityAttachment.Tree(v53, v8, 1);
      v40 = v50;
      v38 = v51;
      LODWORD(v8) = v269;
    }
    else
    {
LABEL_109:
      AccessibilityAttachment.init()();
      swift_bridgeObjectRelease();
      v143 = v256;
      v142 = v257;
      outlined consume of AccessibilityAttachment.Tree(v257, v256, 1);
      outlined consume of AccessibilityAttachment.Tree(v142, v143, 1);
      outlined consume of AccessibilityAttachment.Tree(v142, v143, 1);
      v38 = (void *)*((void *)&v294 + 1);
      v40 = v294;
    }
    goto LABEL_33;
  }
  v268 = v34 + 32;
  v36 = v33;
  outlined copy of AccessibilityAttachment.Tree(v34, v33, 1);
  outlined copy of AccessibilityAttachment.Tree(v34, v36, 1);
  outlined copy of AccessibilityAttachment.Tree(v34, v36, 1);
  swift_bridgeObjectRetain();
  v37 = 0;
  v271 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    v69 = v268 + 24 * (void)v37;
    v71 = *(void *)v69;
    v70 = *(void **)(v69 + 8);
    v72 = *(unsigned __int8 *)(v69 + 16);
    if (!v72)
    {
      v266 = v37;
      v117 = v70;
      v118 = v70;
      swift_bridgeObjectRetain();
LABEL_91:
      if (swift_isUniquelyReferenced_nonNull_native()) {
        v67 = v271;
      }
      else {
        v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v271 + 2) + 1, 1, v271);
      }
      v120 = *((void *)v67 + 2);
      v119 = *((void *)v67 + 3);
      if (v120 >= v119 >> 1) {
        v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v119 > 1), v120 + 1, 1, v67);
      }
      *((void *)v67 + 2) = v120 + 1;
      v271 = v67;
      v68 = &v67[16 * v120];
      *((void *)v68 + 4) = v71;
      *((void *)v68 + 5) = v117;
      v37 = v266;
      goto LABEL_49;
    }
    if (v72 == 1) {
      break;
    }
LABEL_49:
    if (++v37 == v264)
    {
      outlined consume of AccessibilityAttachment.Tree(v257, v256, 1);
      v47 = v271;
      v48 = *((void *)v271 + 2);
      if (v48) {
        goto LABEL_38;
      }
      goto LABEL_109;
    }
  }
  v266 = v37;
  v59 = *(void ***)(v71 + 16);
  v262 = v71;
  v258 = v70;
  if (!v59)
  {
    v121 = v70;
    outlined copy of AccessibilityAttachment.Tree(v71, v70, 1);
    outlined copy of AccessibilityAttachment.Tree(v71, v121, 1);
    swift_bridgeObjectRetain();
    v122 = MEMORY[0x1E4FBC860];
    v123 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v123)
    {
LABEL_96:
      v124 = v123 - 1;
      if (v123 != 1)
      {
        v131 = v122;
        v132 = v122 + 16 * v124;
        v134 = *(void *)(v132 + 32);
        v133 = *(void **)(v132 + 40);
        *(void *)&v313 = v134;
        *((void *)&v313 + 1) = v133;
        v135 = v133;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v49 = (void **)(v131 + 16 * v123 + 8);
        v136 = v123 - 2;
        while (v136 < v124)
        {
          v137 = (uint64_t)*(v49 - 1);
          v138 = *v49;
          *(void *)&v308 = v137;
          v59 = v138;
          swift_bridgeObjectRetain();
          AccessibilityProperties.merge(with:)((uint64_t *)&v308);
          v308 = v313;
          v139 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v139)
          {
            *(void *)&v308 = v137;
            *((void *)&v308 + 1) = v138;
            if (AccessibilityAttachment.platformElement.getter()) {
              AccessibilityAttachment.platformElement.setter();
            }
          }

          swift_bridgeObjectRelease();
          v49 -= 2;
          if (--v136 == -1)
          {
            swift_bridgeObjectRelease_n();
            v140 = v262;
            v141 = v258;
            outlined consume of AccessibilityAttachment.Tree(v262, v258, 1);
            outlined consume of AccessibilityAttachment.Tree(v140, v141, 1);
            outlined consume of AccessibilityAttachment.Tree(v140, v141, 1);
            v117 = (void *)*((void *)&v313 + 1);
            v71 = v313;
            v5 = v279;
            LODWORD(v8) = v269;
            goto LABEL_91;
          }
        }
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        v157 = v49;
        swift_bridgeObjectRetain();
        v280 = 0;
LABEL_136:
        *(void *)&v294 = v59;
        AccessibilityProperties.merge(with:)((uint64_t *)&v294);
        v5 = (void *)*((void *)&v302 + 1);
        v2 = v302;
        v294 = v302;
        v158 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v158
          || (*(void *)&v294 = v59, *((void *)&v294 + 1) = v49, !AccessibilityAttachment.platformElement.getter()))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          AccessibilityAttachment.platformElement.setter();
          swift_bridgeObjectRelease();

          v5 = (void *)*((void *)&v302 + 1);
          v2 = v302;
        }
        goto LABEL_140;
      }
      v126 = *(void **)(v122 + 40);
      *(void *)&v286 = *(void *)(v122 + 32);
      v125 = v286;
      v127 = v126;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v128 = v262;
      v129 = v258;
      outlined consume of AccessibilityAttachment.Tree(v262, v258, 1);
      outlined consume of AccessibilityAttachment.Tree(v128, v129, 1);
      outlined consume of AccessibilityAttachment.Tree(v128, v129, 1);
      v71 = v125;
      v117 = v126;
    }
    else
    {
LABEL_99:
      AccessibilityAttachment.init()();
      swift_bridgeObjectRelease();
      v130 = v258;
      outlined consume of AccessibilityAttachment.Tree(v71, v258, 1);
      outlined consume of AccessibilityAttachment.Tree(v71, v130, 1);
      outlined consume of AccessibilityAttachment.Tree(v71, v130, 1);
      v117 = (void *)*((void *)&v286 + 1);
      v71 = v286;
    }
    goto LABEL_91;
  }
  *(void *)&v283 = v71 + 32;
  v73 = v70;
  outlined copy of AccessibilityAttachment.Tree(v71, v70, 1);
  outlined copy of AccessibilityAttachment.Tree(v71, v73, 1);
  outlined copy of AccessibilityAttachment.Tree(v71, v73, 1);
  swift_bridgeObjectRetain();
  v8 = 0;
  *(void *)&v285 = MEMORY[0x1E4FBC860];
  v259 = (uint64_t)v59;
  while (1)
  {
    v75 = v283 + 24 * (void)v8;
    v77 = *(void *)v75;
    v76 = *(void **)(v75 + 8);
    v78 = *(unsigned __int8 *)(v75 + 16);
    if (!v78)
    {
      v93 = v76;
      v94 = v76;
      swift_bridgeObjectRetain();
      goto LABEL_85;
    }
    if (v78 == 1) {
      break;
    }
LABEL_55:
    v8 = (void **)((char *)v8 + 1);
    if (v8 == v59)
    {
      outlined consume of AccessibilityAttachment.Tree(v71, v258, 1);
      LODWORD(v8) = v269;
      v122 = v285;
      v123 = *(void *)(v285 + 16);
      if (v123) {
        goto LABEL_96;
      }
      goto LABEL_99;
    }
  }
  v79 = *(void *)(v77 + 16);
  v272 = (uint64_t)v76;
  v80 = v76;
  if (v79)
  {
    outlined copy of AccessibilityAttachment.Tree(v77, v76, 1);
    outlined copy of AccessibilityAttachment.Tree(v77, v80, 1);
    outlined copy of AccessibilityAttachment.Tree(v77, v80, 1);
    swift_bridgeObjectRetain();
    v81 = v77;
    v82 = (unsigned char *)(v77 + 48);
    v83 = (char *)MEMORY[0x1E4FBC860];
    while (1)
    {
      v85 = *((void *)v82 - 2);
      v86 = (void *)*((void *)v82 - 1);
      if (!*v82) {
        break;
      }
      if (*v82 == 1)
      {
        outlined copy of AccessibilityAttachment.Tree(*((void *)v82 - 2), *((void **)v82 - 1), 1);
        outlined copy of AccessibilityAttachment.Tree(v85, v86, 1);
        v87 = swift_bridgeObjectRetain();
        v88 = v280;
        v89 = specialized Sequence.compactMap<A>(_:)(v87);
        v280 = v88;
        static AccessibilityAttachment.combine(_:)(v89, (uint64_t *)&v308);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v85, v86, 1);
        outlined consume of AccessibilityAttachment.Tree(v85, v86, 1);
        swift_bridgeObjectRelease();
        v86 = (void *)*((void *)&v308 + 1);
        v85 = v308;
LABEL_66:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v83 + 2) + 1, 1, v83);
        }
        v92 = *((void *)v83 + 2);
        v91 = *((void *)v83 + 3);
        if (v92 >= v91 >> 1) {
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v91 > 1), v92 + 1, 1, v83);
        }
        *((void *)v83 + 2) = v92 + 1;
        v84 = &v83[16 * v92];
        *((void *)v84 + 4) = v85;
        *((void *)v84 + 5) = v86;
      }
      v82 += 24;
      if (!--v79)
      {
        v77 = v81;
        outlined consume of AccessibilityAttachment.Tree(v81, (void *)v272, 1);
        v5 = v279;
        goto LABEL_73;
      }
    }
    v90 = v86;
    swift_bridgeObjectRetain();
    goto LABEL_66;
  }
  outlined copy of AccessibilityAttachment.Tree(v77, v76, 1);
  outlined copy of AccessibilityAttachment.Tree(v77, v80, 1);
  swift_bridgeObjectRetain();
  v83 = (char *)MEMORY[0x1E4FBC860];
LABEL_73:
  v95 = *((void *)v83 + 2);
  v96 = v95 - 1;
  if (v95 == 1)
  {
    v98 = v77;
    v77 = *((void *)v83 + 4);
    v99 = (void *)*((void *)v83 + 5);
    *(void *)&v313 = v77;
    v100 = v99;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v101 = (void *)v272;
    outlined consume of AccessibilityAttachment.Tree(v98, (void *)v272, 1);
    outlined consume of AccessibilityAttachment.Tree(v98, v101, 1);
    outlined consume of AccessibilityAttachment.Tree(v98, v101, 1);
    v93 = v99;
LABEL_84:
    v71 = v262;
    v59 = (void **)v259;
LABEL_85:
    if (swift_isUniquelyReferenced_nonNull_native()) {
      v114 = (char *)v285;
    }
    else {
      v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v285 + 16) + 1, 1, (char *)v285);
    }
    v116 = *((void *)v114 + 2);
    v115 = *((void *)v114 + 3);
    if (v116 >= v115 >> 1) {
      v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v115 > 1), v116 + 1, 1, v114);
    }
    *((void *)v114 + 2) = v116 + 1;
    *(void *)&v285 = v114;
    v74 = &v114[16 * v116];
    *((void *)v74 + 4) = v77;
    *((void *)v74 + 5) = v93;
    goto LABEL_55;
  }
  if (!v95)
  {
    AccessibilityAttachment.init()();
    swift_bridgeObjectRelease();
    v97 = (void *)v272;
    outlined consume of AccessibilityAttachment.Tree(v77, (void *)v272, 1);
    outlined consume of AccessibilityAttachment.Tree(v77, v97, 1);
    outlined consume of AccessibilityAttachment.Tree(v77, v97, 1);
    v93 = (void *)*((void *)&v313 + 1);
    v77 = v313;
    goto LABEL_84;
  }
  v255 = v77;
  v102 = &v83[16 * v96];
  v104 = *((void *)v102 + 4);
  v103 = (void *)*((void *)v102 + 5);
  *(void *)&v308 = v104;
  *((void *)&v308 + 1) = v103;
  v105 = v103;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v106 = (void **)&v83[16 * v95 + 8];
  v107 = v95 - 2;
  while (v107 < v96)
  {
    v108 = (uint64_t)*(v106 - 1);
    v109 = *v106;
    *(void *)&v307 = v108;
    v110 = v109;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)((uint64_t *)&v307);
    v307 = v308;
    v111 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v111)
    {
      *(void *)&v307 = v108;
      *((void *)&v307 + 1) = v109;
      if (AccessibilityAttachment.platformElement.getter()) {
        AccessibilityAttachment.platformElement.setter();
      }
    }

    swift_bridgeObjectRelease();
    v106 -= 2;
    if (--v107 == -1)
    {
      swift_bridgeObjectRelease_n();
      v112 = v255;
      v113 = (void *)v272;
      outlined consume of AccessibilityAttachment.Tree(v255, (void *)v272, 1);
      outlined consume of AccessibilityAttachment.Tree(v112, v113, 1);
      outlined consume of AccessibilityAttachment.Tree(v112, v113, 1);
      v93 = (void *)*((void *)&v308 + 1);
      v77 = v308;
      v5 = v279;
      goto LABEL_84;
    }
  }
  __break(1u);
LABEL_127:
  v151 = v267;
  v152 = (uint64_t *)AGGraphGetValue();
  v2 = *v152;
  v5 = (void *)v152[1];
  v153 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v302 = v2;
  *((void *)&v302 + 1) = v5;
  if (v151[13] == v8) {
    goto LABEL_131;
  }
  v154 = AGGraphGetValue();
  v59 = *(void ***)v154;
  v49 = *(void ***)(v154 + 8);
  if (!*(unsigned char *)(v154 + 16)) {
    goto LABEL_135;
  }
  if (*(unsigned char *)(v154 + 16) == 1)
  {
    v155 = swift_bridgeObjectRetain();
    v156 = specialized Sequence.compactMap<A>(_:)(v155);
    v280 = 0;
    static AccessibilityAttachment.combine(_:)(v156, (uint64_t *)&v294);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree((uint64_t)v59, v49, 1);
    v49 = (void **)*((void *)&v294 + 1);
    v59 = (void **)v294;
    goto LABEL_136;
  }
LABEL_131:
  v280 = 0;
LABEL_140:
  v15 = v5;
  swift_bridgeObjectRetain();
  v16 = (char *)MEMORY[0x1E4FBC860];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_209:
  }
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
  v160 = *((void *)v16 + 2);
  v159 = *((void *)v16 + 3);
  if (v160 >= v159 >> 1) {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v159 > 1), v160 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v160 + 1;
  v161 = &v16[16 * v160];
  *((void *)v161 + 4) = v2;
  *((void *)v161 + 5) = v5;

  swift_bridgeObjectRelease();
  v309 = (uint64_t)v16;
  v275 = 1;
  v5 = v279;
LABEL_144:
  v162 = v267;
  v302 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  v302 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  LODWORD(v260) = v162[8];
  v163 = (long long *)AGGraphGetValue();
  v164 = v163[1];
  v302 = *v163;
  *(_OWORD *)v303 = v164;
  v165 = MEMORY[0x18C114450]();
  v167 = v166;
  DisplayList.Version.init(forUpdate:)();
  LODWORD(v274) = *((unsigned __int8 *)v162 + 4);
  v261 = v302;
  if ((v274 & 1) == 0 || (v266 = *(char **)(v309 + 16)) == 0)
  {
    v262 = 0;
    v272 = 1;
    goto LABEL_178;
  }
  v265 = v309 + 32;
  v259 = v309;
  swift_bridgeObjectRetain_n();
  v168 = 0;
  v262 = 0;
  v272 = 1;
  v264 = (char *)(MEMORY[0x1E4FBC840] + 8);
  while (2)
  {
    v169 = (uint64_t *)(v265 + 16 * (void)v168);
    v170 = *v169;
    v171 = (char *)v169[1];
    v172 = (uint64_t *)AGGraphGetValue();
    v173 = *v172;
    v282 = v172[1];
    KeyPath = swift_getKeyPath();
    if (*(void *)(v170 + 16)
      && (v175 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v176 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v170 + 56) + 40 * v175, (uint64_t)&v302);
      v177 = *(void *)&v303[8];
      v178 = *(void *)&v303[16];
      __swift_project_boxed_opaque_existential_1(&v302, *(uint64_t *)&v303[8]);
      *(void *)&v285 = *(void *)(v178 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v179 = v171;
      swift_retain();
      ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v285)(&v294, v177, v178);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v302);
    }
    else
    {
      v294 = 0u;
      v295 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v180 = v171;
      swift_retain();
    }
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, (uint64_t)v264, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
    v181 = swift_dynamicCast();
    v273 = v170;
    if (v181)
    {
      v182 = v302;
    }
    else
    {
      *(void *)&v302 = 0;
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      v182 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v183 = *(void *)(v182 + 16);
    if (v183)
    {
      v269 = KeyPath;
      v270 = v171;
      v271 = v168;
      v184 = (void *)(v182 + 32);
      v268 = v182;
      swift_bridgeObjectRetain();
      v185 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        v187 = v184[3];
        v188 = v184[4];
        __swift_project_boxed_opaque_existential_1(v184, v187);
        *(void *)&v294 = v173;
        *((void *)&v294 + 1) = v282;
        (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v188 + 96))(&v302, &v294, v187, v188);
        if ((void)v305)
        {
          v285 = v305;
          v189 = *(_WORD *)v303;
          v283 = v302;
          v284 = *(_OWORD *)&v303[8];
          v190 = v304;
          v191 = v306;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v185 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v185 + 2) + 1, 1, v185);
          }
          v193 = *((void *)v185 + 2);
          v192 = *((void *)v185 + 3);
          v194 = v285;
          if (v193 >= v192 >> 1)
          {
            v195 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v192 > 1), v193 + 1, 1, v185);
            v194 = v285;
            v185 = v195;
          }
          *((void *)v185 + 2) = v193 + 1;
          v186 = &v185[72 * v193];
          *((_OWORD *)v186 + 2) = v283;
          *((_WORD *)v186 + 24) = v189;
          *(_OWORD *)(v186 + 56) = v284;
          v186[72] = v190 & 1;
          *((_OWORD *)v186 + 5) = v194;
          *((void *)v186 + 12) = v191;
        }
        v184 += 6;
        --v183;
      }
      while (v183);
      swift_bridgeObjectRelease();
      v171 = v270;
      v168 = v271;
      KeyPath = v269;
    }
    else
    {
      v185 = (char *)MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v196 = *((void *)v185 + 2);
    swift_release();
    v5 = v279;
    if (!v196)
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_148:
      swift_bridgeObjectRelease();

      goto LABEL_149;
    }
    if (v272 != 1)
    {
      if (v272)
      {
        *(void *)&v302 = v272;
        v197 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v197);
        swift_bridgeObjectRelease();
        swift_release();
        v272 = v302;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        v272 = 0;
      }
      goto LABEL_148;
    }
    swift_bridgeObjectRelease();

    v262 = KeyPath;
    v272 = (uint64_t)v185;
LABEL_149:
    if (++v168 != v266) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
LABEL_178:
  v198 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v310, &v309, v165, v167);
  v199 = v309;
  v200 = *(void *)(v309 + 16);
  v201 = MEMORY[0x1E4FBC860];
  if (!v200) {
    goto LABEL_197;
  }
  v202 = v198;
  *(void *)&v307 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v200, 0);
  v313 = *(_OWORD *)(v267 + 2);
  LODWORD(v285) = v202 & 1;
  v282 = v199;
  v203 = (void **)(v199 + 40);
  *(void *)&v284 = MEMORY[0x1E4FBC840] + 8;
  while (2)
  {
    v205 = (uint64_t)*(v203 - 1);
    v204 = *v203;
    if (*(void *)(v205 + 16)
      && (v206 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v207 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v205 + 56) + 40 * v206, (uint64_t)&v302);
      v208 = *(void *)&v303[8];
      v209 = *(void *)&v303[16];
      __swift_project_boxed_opaque_existential_1(&v302, *(uint64_t *)&v303[8]);
      *(void *)&v283 = *(void *)(v209 + 8);
      v210 = v204;
      swift_bridgeObjectRetain_n();
      v211 = v210;
      v212 = v209;
      v5 = v279;
      ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v283)(&v294, v208, v212);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v302);
    }
    else
    {
      v294 = 0u;
      v295 = 0u;
      v213 = v204;
      swift_bridgeObjectRetain_n();
      v214 = v213;
    }
    v215 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v284, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v215);
    if (swift_dynamicCast())
    {
      v303[1] = 0;
      v217 = *((void *)&v302 + 1);
      v216 = v302;
      v218 = v303[0];
      swift_bridgeObjectRelease();
      if ((v218 & 1) == 0)
      {
        v219 = 0;
        if (v274) {
          goto LABEL_187;
        }
LABEL_190:
        *v5 = v205;
        v5[1] = v204;
        goto LABEL_191;
      }
    }
    else
    {
      v302 = 0uLL;
      *(_WORD *)v303 = 256;
      swift_bridgeObjectRelease();
    }
    v216 = 0;
    v217 = 0;
    v219 = 1;
    if ((v274 & 1) == 0) {
      goto LABEL_190;
    }
LABEL_187:
    v220 = (uint64_t *)AGGraphGetValue();
    v222 = *v220;
    v221 = v220[1];
    *(void *)&v294 = v205;
    *((void *)&v294 + 1) = v204;
    v302 = 0u;
    *(_OWORD *)v303 = 0u;
    *(void *)&v303[16] = v216;
    v304 = v217;
    LOBYTE(v305) = v219;
    *(void *)&v286 = v222;
    *((void *)&v286 + 1) = v221;
    v308 = v313;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_191:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v223 = v278;
    *((unsigned char *)v5 + *(int *)(v278 + 20)) = v285;
    *((unsigned char *)v5 + *(int *)(v223 + 24)) = v275;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, v281, MEMORY[0x1E4F40FA8]);
    swift_bridgeObjectRelease();

    v201 = v307;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v201 + 16) + 1, 1);
      v201 = v307;
    }
    v225 = *(void *)(v201 + 16);
    v224 = *(void *)(v201 + 24);
    if (v225 >= v224 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v224 > 1, v225 + 1, 1);
      v201 = v307;
    }
    v203 += 2;
    *(void *)(v201 + 16) = v225 + 1;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v281, v201+ ((*(unsigned __int8 *)(v277 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80))+ *(void *)(v277 + 72) * v225, MEMORY[0x1E4F40FA8]);
    if (--v200) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_197:
  swift_bridgeObjectRelease();
  v226 = swift_allocObject();
  *(void *)(v226 + 16) = v201;
  *(void *)&v294 = v226;
  *((void *)&v294 + 1) = 0x4000000D00000000;
  *(void *)&v295 = v310;
  BYTE10(v295) = v312;
  WORD4(v295) = v311;
  if (v272 == 1)
  {
    v227 = v267;
    v228 = *v267;
    swift_bridgeObjectRetain();
  }
  else
  {
    v229 = (long long *)AGGraphGetValue();
    v230 = v229[1];
    v302 = *v229;
    *(_OWORD *)v303 = v230;
    v231 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v231);
    v228 = 0;
    v227 = v267;
  }
  LODWORD(v308) = v228;
  *(void *)&v286 = v261;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v285) = *((unsigned __int8 *)v227 + 24);
  LOBYTE(v294) = v285;
  DisplayList.Item.canonicalize(options:)();
  v232 = v304;
  v233 = v305;
  v234 = (unsigned __int16)v306 | (BYTE2(v306) << 16);
  v294 = v302;
  v295 = *(_OWORD *)v303;
  v296 = *(void *)&v303[16];
  v297 = v304;
  v298 = v305;
  v300 = BYTE2(v306);
  v299 = v306;
  v301 = HIDWORD(v306);
  outlined copy of DisplayList.Item.Value(v304, v305);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v235 = v286;
  v236 = WORD4(v286);
  v237 = BYTE10(v286);
  if (v272 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v232, v233);
  }
  else
  {
    *(void *)&v284 = v233;
    v238 = v272;
    v239 = (void *)swift_allocObject();
    v240 = *v227;
    v241 = (long long *)AGGraphGetValue();
    v242 = v241[1];
    v294 = *v241;
    v295 = v242;
    swift_bridgeObjectRetain();
    LODWORD(v283) = v234;
    v243 = v262;
    outlined copy of AccessibilityArchivableViewAttachment?(v262, 0, 0, v238);
    outlined copy of Environment<AppIntentExecutor?>.Content(v243, 0, 0);
    v244 = swift_bridgeObjectRetain();
    v282 = v232;
    v245 = MEMORY[0x18C114450](v244);
    v247 = v246;
    v239[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v239[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v248 = swift_allocObject();
    v239[2] = v248;
    *(void *)(v248 + 16) = v243;
    *(void *)(v248 + 24) = 0;
    *(unsigned char *)(v248 + 32) = 0;
    *(void *)(v248 + 40) = v238;
    *(_DWORD *)(v248 + 48) = v240;
    *(double *)(v248 + 56) = v245;
    *(void *)(v248 + 64) = v247;
    *(void *)&v286 = v239;
    *((void *)&v286 + 1) = 0x4000000C00000000;
    *(void *)&v287 = v235;
    BYTE10(v287) = v237;
    WORD4(v287) = v236;
    LODWORD(v307) = v240;
    *(void *)&v308 = v261;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v286) = v285;
    DisplayList.Item.canonicalize(options:)();
    v249 = v297;
    v250 = v298;
    v286 = v294;
    v287 = v295;
    v288 = v296;
    v289 = v297;
    v290 = v298;
    v292 = v300;
    v291 = v299;
    v293 = v301;
    outlined copy of DisplayList.Item.Value(v297, v298);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v243, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v243, 0, 0, v238);
    outlined consume of DisplayList.Item.Value(v249, v250);
    outlined consume of DisplayList.Item.Value(v282, v284);
    result = swift_bridgeObjectRelease();
    v235 = v308;
    v236 = WORD4(v308);
    v237 = BYTE10(v308);
  }
  v251 = v263;
  *v263 = v235;
  *((_WORD *)v251 + 4) = v236;
  *((unsigned char *)v251 + 10) = v237;
  return result;
}

_DWORD *assignWithCopy for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v2 = *v3;
  v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v12 = *v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  unint64_t v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v54 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  uint64_t v55 = v16 + 4;
  v53 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  _DWORD *v54 = *v53;
  unint64_t v18 = ((unint64_t)v54 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = ((unint64_t)v53 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  unint64_t v20 = v16 + 5 + v18;
  uint64_t v21 = ~v16;
  unint64_t v57 = v16 + 5 + v19;
  v22 = (const void *)(v57 & ~v16);
  v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  int v24 = v23(v20 & ~v16, 1, AssociatedTypeWitness);
  int v25 = v23((unint64_t)v22, 1, AssociatedTypeWitness);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v15 + 16))(v20 & ~v16, v22, AssociatedTypeWitness);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v26 = *(_DWORD *)(v15 + 84);
    size_t v27 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v15 + 24))(v20 & ~v16, v22, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v20 & ~v16, AssociatedTypeWitness);
    int v26 = *(_DWORD *)(v15 + 84);
    size_t v27 = *(void *)(v15 + 64);
  }
  if (v26) {
    size_t v28 = v27;
  }
  else {
    size_t v28 = v27 + 1;
  }
  memcpy((void *)(v20 & ~v16), v22, v28);
LABEL_12:
  if (*(_DWORD *)(v15 + 84)) {
    size_t v29 = *(void *)(v15 + 64);
  }
  else {
    size_t v29 = *(void *)(v15 + 64) + 1;
  }
  v30 = (void *)(((v20 | v16) + v29) & v21);
  v31 = (const void *)(((v57 | v16) + v29) & v21);
  int v32 = v23((unint64_t)v30, 1, AssociatedTypeWitness);
  int v33 = v23((unint64_t)v31, 1, AssociatedTypeWitness);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v30, v31, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v30, 0, 1, AssociatedTypeWitness);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v30, AssociatedTypeWitness);
LABEL_20:
    memcpy(v30, v31, v29);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v30, v31, AssociatedTypeWitness);
LABEL_21:
  v34 = (void *)(((unint64_t)v30 + v29 + v16) & v21);
  v35 = (const void *)(((unint64_t)v31 + v29 + v16) & v21);
  int v36 = v23((unint64_t)v34, 1, AssociatedTypeWitness);
  int v37 = v23((unint64_t)v35, 1, AssociatedTypeWitness);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v34, v35, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v34, 0, 1, AssociatedTypeWitness);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v34, AssociatedTypeWitness);
LABEL_26:
    memcpy(v34, v35, v29);
    goto LABEL_27;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v34, v35, AssociatedTypeWitness);
LABEL_27:
  uint64_t v38 = v29 + ((v16 + 9) & v21) + ((v29 + v16 + ((v29 + v16) & v21)) & v21);
  v39 = (char *)v54 + v38;
  v40 = (char *)v53 + v38;
  v41 = (void *)((unint64_t)(v39 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v42 = (uint64_t *)((unint64_t)(v40 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v43 = *v42;
  *(void *)((char *)v41 + 5) = *(uint64_t *)((char *)v42 + 5);
  void *v41 = v43;
  v44 = (_DWORD *)((unint64_t)(v39 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  v45 = (_DWORD *)((unint64_t)(v40 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v44 = *v45;
  v46 = (_DWORD *)(((unint64_t)v44 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v47 = (_DWORD *)(((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v46 = *v47;
  v48 = (void *)(((unint64_t)v46 + v55) & v21);
  v49 = (const void *)(((unint64_t)v47 + v55) & v21);
  int v50 = v23((unint64_t)v48, 1, AssociatedTypeWitness);
  int v51 = v23((unint64_t)v49, 1, AssociatedTypeWitness);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v48, v49, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v48, AssociatedTypeWitness);
    goto LABEL_32;
  }
  if (v51)
  {
LABEL_32:
    memcpy(v48, v49, v29);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v48, v49, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, AssociatedTypeWitness);
  return a1;
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance LinkButtonModifierBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LinkDestination();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x1E4F3FB98]);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, MEMORY[0x1E4F3FB98]);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = partial apply for implicit closure #2 in implicit closure #1 in LinkButtonModifierBody.body(content:);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = partial apply for closure #1 in LinkButtonModifierBody.body(content:);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 2;
  *(unsigned char *)(a1 + 82) = 0;
  *(void *)(a1 + 88) = 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for ArchivableButtonAppIntentModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t initializeWithTake for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v10 = *(unsigned __int8 *)(v9 + 24);
  if (v10 >= 2) {
    unsigned int v10 = *(_DWORD *)v9 + 2;
  }
  unint64_t v11 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 1)
  {
    long long v12 = *(_OWORD *)v9;
    *(void *)(v11 + 16) = *(void *)(v9 + 16);
  }
  else
  {
    LOBYTE(v10) = 0;
    long long v12 = *(_OWORD *)v9;
  }
  *(_OWORD *)unint64_t v11 = v12;
  *(unsigned char *)(v11 + 24) = v10;
  unint64_t v13 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = v15;
  return a1;
}

unint64_t lazy protocol witness table accessor for type DraggableTabModifier and conformance DraggableTabModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DraggableTabModifier and conformance DraggableTabModifier;
  if (!lazy protocol witness table cache variable for type DraggableTabModifier and conformance DraggableTabModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraggableTabModifier and conformance DraggableTabModifier);
  }
  return result;
}

uint64_t destroy for FocusState(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v8(a1, v3);
  unint64_t v5 = (a1 + *(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  unint64_t v6 = (v5 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v8(v6, v3);
}

uint64_t type metadata completion function for UIHostingContentView()
{
  uint64_t result = type metadata accessor for UIHostingConfiguration();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata completion function for CommandGroup()
{
  uint64_t result = type metadata accessor for CommandOperation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for GridRow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithCopy for OnModifierKeysChangedModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t View.navigationTitle(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  View.navigationTitle(_:)(v6, v7, v9 & 1, v11, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t View.navigationBarTitle(_:displayMode:)@<X0>(uint64_t a1@<X3>, unsigned char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v17 = a5;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  LOBYTE(a2) = *a2;
  View.navigationTitle(_:)(a3, a4, (uint64_t)&v16 - v10);
  char v22 = (char)a2;
  uint64_t v20 = a4;
  uint64_t v21 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v13 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v18 = WitnessTable;
  unint64_t v19 = v13;
  uint64_t v14 = swift_getWitnessTable();
  View.navigationBarTitleDisplayMode(_:)(&v22, v8, v14, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t get_witness_table_7SwiftUI4ViewRzSyRd__r__lAA15ModifiedContentVyADyxAA40TransactionalPreferenceTransformModifierVyAA18NavigationTitleKeyVGGAA01_ghI0VyAA07ToolbarL0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t View.navigationTitle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  *(void *)&long long v18 = v10;
  *((void *)&v18 + 1) = v11;
  char v16 = v15 & 1;
  uint64_t v19 = v15 & 1;
  uint64_t v20 = v13;
  uint64_t v21 = 1;
  char v22 = 5;
  uint64_t v23 = 0;
  char v24 = 3;
  View.navigationTitlePreferenceTransform(adding:)(&v18, a2, a3, a4);
  outlined consume of Text?(v10, v12, v16, v14);
  return outlined consume of Transaction?(1);
}

uint64_t View.navigationBarTitleDisplayMode(_:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = 8 * *a1;
  memset(v6, 0, sizeof(v6));
  uint64_t v7 = 1;
  char v8 = 0x10300u >> v4;
  uint64_t v9 = 0;
  char v10 = 3;
  return View.navigationTitlePreferenceTransform(adding:)(v6, a2, a3, a4);
}

uint64_t View.navigationTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  uint64_t v15 = a3 & 1;
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a2;
  uint64_t v18 = v15;
  uint64_t v19 = a4;
  uint64_t v20 = 1;
  char v21 = 5;
  uint64_t v22 = 0;
  char v23 = 3;
  outlined copy of Text.Storage(a1, a2, v14);
  swift_bridgeObjectRetain();
  View.navigationTitlePreferenceTransform(adding:)(&v17, a5, a6, a7);
  outlined consume of Text?(a1, a2, v15, a4);

  return outlined consume of Transaction?(1);
}

uint64_t View.navigationTitlePreferenceTransform(adding:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v18[1] = a4;
  type metadata accessor for TextField<Text>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)v18 - v9;
  long long v11 = a1[1];
  v20[0] = *a1;
  v20[1] = v11;
  v21[0] = a1[2];
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v12 = (_OWORD *)swift_allocObject();
  long long v13 = a1[1];
  v12[1] = *a1;
  v12[2] = v13;
  uint64_t v12[3] = a1[2];
  *(_OWORD *)((char *)v12 + 57) = *(_OWORD *)((char *)a1 + 41);
  outlined retain of NavigationTitleStorage((uint64_t *)v20);
  View.transactionalPreferenceTransform<A>(key:transform:)((uint64_t)&type metadata for NavigationTitleKey, (uint64_t)partial apply for closure #1 in View.navigationTitlePreferenceTransform(adding:), (uint64_t)v12, a2, (uint64_t)&type metadata for NavigationTitleKey, a3);
  swift_release();
  v19[0] = closure #2 in View.navigationTitlePreferenceTransform(adding:);
  v19[1] = 0;
  type metadata accessor for TextField<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  uint64_t v15 = v14;
  v18[2] = a3;
  v18[3] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v19, v7, v15, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t View.transactionalPreferenceTransform<A>(key:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v8 = type metadata accessor for TransactionalPreferenceTransformModifier();
  swift_retain();
  MEMORY[0x18C113660](v10, a4, v8, a6);
  return swift_release();
}

uint64_t (*partial apply for closure #1 in closure #1 in closure #1 in Attribute.init(value:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

uint64_t type metadata completion function for CustomHoverEffectModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeDefaultView@<X0>(unsigned char *a1@<X8>)
{
  return SearchPrimitiveModifier.MakeDefaultView.value.getter(*v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32), *((void *)v1 + 1), a1);
}

double one-time initialization function for search()
{
  static ToolbarItemPlacement.search = 23;
  double result = 0.0;
  unk_1E90FC040 = 0u;
  unk_1E90FC050 = 0u;
  byte_1E90FC060 = 2;
  return result;
}

uint64_t type metadata completion function for Toggle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View.supportsSystemDrag(_:)()
{
  return swift_release();
}

uint64_t get_witness_table_7SwiftUI5SceneRzRld__C11Observation10ObservableRd__r__lAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyqd__SgGGAaBHpxAaBHD1__AjA01_cK0HpyHCHCTm()
{
  return swift_getWitnessTable();
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v44)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v45)(void, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  void *v66;
  void **v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  void *v93;
  _OWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned char *v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  unsigned int v104;
  unsigned __int16 v105;
  char v106;
  long long v107;
  long long v108;
  long long v109;
  long long v110;
  long long v111;
  long long v112;
  int v113;
  __int16 v114;
  unsigned __int8 v115;
  char *v116;

  if (a3 == a2) {
    return;
  }
  uint64_t v4 = a1;
  uint64_t v5 = *a4;
  unint64_t v6 = &lazy cache variable for type metadata for UIView;
  uint64_t v7 = MEMORY[0x1E4FBC840] + 8;
  v90 = *a4;
  v91 = MEMORY[0x1E4FBC840] + 8;
  while (2)
  {
    uint64_t v8 = (uint64_t *)(v5 + 16 * a3);
    uint64_t v9 = *v8;
    char v10 = (char *)v8[1];
    v88 = a3;
    do
    {
      v97 = a3;
      v98 = v9;
      v95 = a3 - 1;
      long long v11 = (void *)(v5 + 16 * (a3 - 1));
      v96 = *v11;
      v94 = v11;
      uint64_t v12 = (char *)v11[1];
      v93 = v11 + 1;
      long long v13 = (uint64_t *)&v10[v6[9]];
      uint64_t v14 = *v13;
      v99 = v10;
      v116 = v12;
      if (v14)
      {
        id v15 = (id)v13[1];
        char v16 = v10;
        long long v17 = v12;
        outlined copy of AccessibilityAttachment?(v14, v15);
      }
      else
      {
        v92 = v13;
        uint64_t v18 = &v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v19 = *(void *)v18;
        int64_t v20 = *(void *)(*(void *)v18 + 16);
        if (v20)
        {
          *(void *)&v100 = MEMORY[0x1E4FBC860];
          char v21 = v10;
          uint64_t v22 = v116;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
          char v23 = (void *)v100;
          char v24 = (void **)(v19 + 40);
          do
          {
            uint64_t v25 = (uint64_t)*(v24 - 1);
            int v26 = *v24;
            *(void *)&v100 = v23;
            unint64_t v28 = v23[2];
            unint64_t v27 = v23[3];
            swift_bridgeObjectRetain();
            id v29 = v26;
            if (v28 >= v27 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1);
              char v23 = (void *)v100;
            }
            v23[2] = v28 + 1;
            v30 = &v23[2 * v28];
            v30[4] = v25;
            v30[5] = v26;
            v24 += 5;
            --v20;
          }
          while (v20);
          swift_bridgeObjectRelease();
        }
        else
        {
          v31 = v10;
          int v32 = v116;
          char v23 = (void *)MEMORY[0x1E4FBC860];
        }
        uint64_t v33 = v23[2];
        uint64_t v34 = v33 - 1;
        if (v33 == 1)
        {
          v35 = (void *)v23[5];
          *(void *)&v100 = v23[4];
          *((void *)&v100 + 1) = v35;
          id v36 = v35;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v33)
          {
            v53 = &v23[2 * v34];
            uint64_t v55 = v53[4];
            v54 = (void *)v53[5];
            *(void *)&v107 = v55;
            *((void *)&v107 + 1) = v54;
            v56 = v54;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v57 = (void **)&v23[2 * v33 + 1];
            v58 = v33 - 2;
            while (v58 < v34)
            {
              v59 = (uint64_t)*(v57 - 1);
              v60 = *v57;
              *(void *)&v100 = v59;
              v61 = v60;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)((uint64_t *)&v100);
              v100 = v107;
              v62 = (void *)AccessibilityAttachment.platformElement.getter();

              if (!v62)
              {
                *(void *)&v100 = v59;
                *((void *)&v100 + 1) = v60;
                if (AccessibilityAttachment.platformElement.getter()) {
                  AccessibilityAttachment.platformElement.setter();
                }
              }

              swift_bridgeObjectRelease();
              v57 -= 2;
              if (--v58 == -1)
              {
                swift_bridgeObjectRelease_n();
                v100 = v107;
                goto LABEL_18;
              }
            }
            __break(1u);
LABEL_80:
            __break(1u);
            return;
          }
          AccessibilityAttachment.init()();
        }
        swift_bridgeObjectRelease();
LABEL_18:
        uint64_t v4 = a1;
        unint64_t v6 = &lazy cache variable for type metadata for UIView;
        int v37 = (void *)*((void *)&v100 + 1);
        uint64_t v14 = v100;
        uint64_t v38 = *v92;
        v39 = (void *)v92[1];
        *v92 = v100;
        v92[1] = (uint64_t)v37;
        id v15 = v37;
        swift_bridgeObjectRetain();
        outlined consume of AccessibilityAttachment?(v38, v39);
        v99[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
        uint64_t v5 = v90;
        uint64_t v7 = v91;
      }

      if (*(void *)(v14 + 16)
        && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v41 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v14 + 56) + 40 * v40, (uint64_t)&v100);
        uint64_t v42 = *((void *)&v101 + 1);
        uint64_t v43 = v102;
        __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
        v44 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v43 + 8);
        swift_bridgeObjectRetain();
        v44(&v107, v42, v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
        swift_bridgeObjectRetain();
      }
      v45 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v7, MEMORY[0x1E4FBB718]);
      _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v45);
      if (swift_dynamicCast())
      {
        outlined init with take of AccessibilityScrollableContext?((uint64_t)&v100, (uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
      }
      else
      {
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v105 = 0;
        v104 = 0;
        v106 = -2;
        v109 = 0u;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        v114 = 0;
        v113 = 0;
        v115 = -1;
        outlined destroy of AccessibilityScrollableContext??((uint64_t)&v100, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
      }
      swift_bridgeObjectRelease_n();
      if (v115 == 255)
      {
        _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
        goto LABEL_30;
      }
      outlined init with copy of AccessibilityScrollableContext((uint64_t)&v109, (uint64_t)&v100);
      if (v106)
      {
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v100);
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v109);
LABEL_30:
        v46 = v99;
LABEL_31:

        goto LABEL_32;
      }
      swift_release();
      v49 = v104 | ((unint64_t)v105 << 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v109);
      v46 = v99;
      if ((v49 & 0xFF00000000) == 0x200000000) {
        goto LABEL_31;
      }
      int v50 = (uint64_t *)&v116[v6[9]];
      int v51 = *v50;
      if (*v50)
      {
        v52 = (id)v50[1];
        outlined copy of AccessibilityAttachment?(*v50, v52);
      }
      else
      {
        v84 = (uint64_t *)&v116[v6[9]];
        v63 = &v116[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v64 = *(void *)v63;
        v65 = *(void *)(*(void *)v63 + 16);
        if (v65)
        {
          v85 = v49;
          *(void *)&v100 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65, 0);
          v66 = (void *)v100;
          v67 = (void **)(v64 + 40);
          do
          {
            v69 = (uint64_t)*(v67 - 1);
            v68 = *v67;
            *(void *)&v100 = v66;
            v71 = v66[2];
            v70 = v66[3];
            swift_bridgeObjectRetain();
            v72 = v68;
            if (v71 >= v70 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1);
              v66 = (void *)v100;
            }
            v66[2] = v71 + 1;
            v73 = &v66[2 * v71];
            v73[4] = v69;
            v73[5] = v68;
            v67 += 5;
            --v65;
          }
          while (v65);
          swift_bridgeObjectRelease();
          uint64_t v4 = a1;
          uint64_t v5 = v90;
          unint64_t v6 = &lazy cache variable for type metadata for UIView;
          v49 = v85;
        }
        else
        {
          v66 = (void *)MEMORY[0x1E4FBC860];
        }
        static AccessibilityAttachment.combine(_:)(v66, (uint64_t *)&v100);
        swift_bridgeObjectRelease();
        v74 = (void *)*((void *)&v100 + 1);
        int v51 = v100;
        v75 = *v84;
        v76 = (void *)v84[1];
        *v84 = v100;
        v84[1] = (uint64_t)v74;
        v52 = v74;
        swift_bridgeObjectRetain();
        outlined consume of AccessibilityAttachment?(v75, v76);
        v116[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
        uint64_t v7 = v91;
      }

      if (*(void *)(v51 + 16)
        && (v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v78 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v51 + 56) + 40 * v77, (uint64_t)&v100);
        v79 = *((void *)&v101 + 1);
        v80 = v102;
        __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
        v86 = v49;
        v81 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v80 + 8);
        swift_bridgeObjectRetain();
        v82 = v80;
        uint64_t v7 = v91;
        v81(&v107, v79, v82);
        v49 = v86;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
        swift_bridgeObjectRetain();
      }
      if (swift_dynamicCast())
      {
        outlined init with take of AccessibilityScrollableContext?((uint64_t)&v100, (uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
      }
      else
      {
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v105 = 0;
        v104 = 0;
        v106 = -2;
        v109 = 0u;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        v114 = 0;
        v113 = 0;
        v115 = -1;
        outlined destroy of AccessibilityScrollableContext??((uint64_t)&v100, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
      }
      swift_bridgeObjectRelease_n();
      if (v115 == 255)
      {
        _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);

LABEL_32:
LABEL_33:
        v47 = v97;
        if (v98 >= v96) {
          break;
        }
        goto LABEL_34;
      }
      outlined init with copy of AccessibilityScrollableContext((uint64_t)&v109, (uint64_t)&v100);
      if (v106)
      {
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v100);
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v109);

        goto LABEL_32;
      }
      swift_release();
      v83 = v104 | ((unint64_t)v105 << 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v109);

      if ((v83 & 0xFF00000000) == 0x200000000 || v49 != v83) {
        goto LABEL_33;
      }
      v47 = v97;
      if ((v49 & 0x100000000) != 0)
      {
        if ((v83 & 0x100000000) == 0) {
          goto LABEL_34;
        }
      }
      else if ((v83 & 0x100000000) != 0)
      {
        break;
      }
      if ((v49 & 0x10000000000) != 0)
      {
        if ((v83 & 0x10000000000) == 0) {
          break;
        }
      }
      else if ((v83 & 0x10000000000) != 0)
      {
        goto LABEL_34;
      }
      if (v98 >= v96) {
        break;
      }
LABEL_34:
      if (!v5) {
        goto LABEL_80;
      }
      v48 = (uint64_t *)(v5 + 16 * v47);
      uint64_t v9 = *v48;
      char v10 = (char *)v48[1];
      *(_OWORD *)v48 = *v94;
      *(void *)v94 = v9;
      *v93 = v10;
      a3 = v95;
    }
    while (v95 != v4);
    a3 = v88 + 1;
    if (v88 + 1 != a2) {
      continue;
    }
    break;
  }
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    unint64_t v6 = *a4;
    uint64_t v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v8 = *(void **)(v6 + 8 * v4);
    uint64_t v9 = a1;
    char v10 = v7;
    while (1)
    {
      long long v11 = *(void **)v10;
      swift_getObjectType();
      uint64_t v12 = v8;
      long long v13 = v11;
      uint64_t v14 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v13);

      if (v14 != (id)-1)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v6) {
        break;
      }
      id v15 = *(void **)v10;
      uint64_t v8 = *(void **)(v10 + 8);
      *(void *)char v10 = v8;
      *(void *)(v10 + 8) = v15;
      v10 -= 8;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t type metadata completion function for SystemListCell()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *closure #1 in View.fileExporter<A, B>(isPresented:items:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  v9.n128_f64[0] = MEMORY[0x1F4188790](v8 - 8);
  long long v11 = (char *)v17 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v17 - v10, a1, a2, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, a2);
  uint64_t result = AnyTransferable.init<A>(_:)((uint64_t)v11, a2, a3);
  *a4 = result;
  a4[1] = v14;
  a4[2] = v15;
  a4[3] = v16;
  return result;
}

__n128 __swift_memcpy21_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityCustomPropertyModifier.PropertyChild.value.getter()
{
  return closure #1 in AccessibilityCustomPropertyModifier.PropertyChild.value.getter(*(unsigned int *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

ValueMetadata *type metadata accessor for ShowsDisclosureIndicatorPredicate()
{
  return &type metadata for ShowsDisclosureIndicatorPredicate;
}

ValueMetadata *type metadata accessor for OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  return &type metadata for OutsetByRowInsetsIfNecessary.OutsetLayout;
}

_UNKNOWN **base witness table accessor for View in ToggleStyleConfiguration.Label()
{
  return &protocol witness table for ToggleStyleConfiguration.Label;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance AccessibilityFocusState<A>()
{
  return specialized static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

void AccessibilityFocusState.init<>()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0x10000;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void *type metadata accessor for ResolvedBorderedButton()
{
  return &unk_1ED43ABF8;
}

{
  return &unk_1ED43AC98;
}

uint64_t partial apply for implicit closure #1 in static AlertTransformModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static AlertTransformModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(_DWORD *)(v0 + 56));
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.SeedInputs()
{
  return static WeakAttribute.== infix(_:_:)();
}

ValueMetadata *type metadata accessor for DefaultDividerStyle()
{
  return &type metadata for DefaultDividerStyle;
}

ValueMetadata *type metadata accessor for DefaultLabelStyle()
{
  return &type metadata for DefaultLabelStyle;
}

ValueMetadata *type metadata accessor for ButtonToggleStyle()
{
  return &type metadata for ButtonToggleStyle;
}

unsigned char *protocol witness for Projection.get(base:) in conformance ToggleStateBool@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 0;
  return result;
}

void *type metadata accessor for ListLabelStyle.Implementation()
{
  return &unk_1ED417208;
}

void static KeyEquivalent.leftArrow.getter(void *a1@<X8>)
{
  *a1 = 8559855;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.downArrow.getter(void *a1@<X8>)
{
  *a1 = 8494319;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.upArrow.getter(void *a1@<X8>)
{
  *a1 = 8428783;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.rightArrow.getter(void *a1@<X8>)
{
  *a1 = 8625391;
  a1[1] = 0xA300000000000000;
}

double protocol witness for static View._makeView(view:inputs:) in conformance <> TimelineView<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  return static TimelineView<>._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusState<A>()
{
  return specialized static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t View.prefersFullSizeDragPreviews(_:)()
{
  return swift_release();
}

void type metadata completion function for ToolbarStorage.SearchItem()
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(319, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = a3;
  id v15 = a4;
  id v16 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(v15, v11, v13, v10);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v37 = a4;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v38 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v38 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v38);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v13 = static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v12 == a3;
  uint64_t v39 = a3;
  uint64_t v40 = a2;
  if (!v13)
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_13;
    }
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() != v40 || v15 != v39)
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        return result;
      }
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = swift_dynamicCastUnknownClass();
  if (result)
  {
    int64_t v20 = (void *)((char *)v4 + *(void *)((*v8 & *v4) + 0x98));
    uint64_t v21 = *v20;
    if (*v20)
    {
      uint64_t v35 = AssociatedTypeWitness;
      uint64_t v36 = result;
      uint64_t v34 = v20[1];
      uint64_t v22 = v34;
      uint64_t v23 = v38;
      (*(void (**)(char *, id, uint64_t))(v9 + 16))((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v38);
      unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      id v37 = a1;
      unint64_t v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v21;
      *(void *)(v26 + 24) = v22;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v26 + v24, v11, v23);
      unint64_t v27 = (void *)(v26 + v25);
      uint64_t v28 = v39;
      *unint64_t v27 = v40;
      v27[1] = v28;
      uint64_t v29 = v35;
      uint64_t v30 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
      v31 = *(void (**)(uint64_t, uint64_t (*)(double, double, double, double), uint64_t, uint64_t, uint64_t))(v30 + 120);
      outlined copy of AppIntentExecutor?(v21);
      outlined copy of AppIntentExecutor?(v21);
      id v32 = v37;
      swift_bridgeObjectRetain();
      v31(1, partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:), v26, v29, v30);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
      return swift_release();
    }
  }
  return result;
}

void *AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a1;
  uint64_t v64 = type metadata accessor for ResolvedTransferRepresentation();
  uint64_t v47 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  unint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UTType, String?)();
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _TransferRepresentationInputs();
  uint64_t v60 = *(void *)(v10 - 8);
  v61 = (void (*)(char *, uint64_t, uint64_t))v10;
  MEMORY[0x1F4188790](v10);
  int v50 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for _TransferRepresentationValue();
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  MEMORY[0x1F4188790](v13);
  v48 = (char *)&v46 - v14;
  uint64_t v51 = type metadata accessor for _TransferRepresentationOutputs();
  uint64_t v49 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  id v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  int64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v46 - v22;
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  v54 = v23;
  uint64_t v55 = v17;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v23, AssociatedTypeWitness);
  unint64_t v24 = v48;
  _TransferRepresentationValue.init(_:)();
  unint64_t v25 = v50;
  _TransferRepresentationInputs.init()();
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t v56 = AssociatedTypeWitness;
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v60 + 8))(v25, v61);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v53);
  uint64_t v26 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v51);
  int64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v65 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
    uint64_t v29 = *(unsigned __int8 *)(v47 + 80);
    uint64_t v53 = v26;
    uint64_t v30 = v26 + ((v29 + 32) & ~v29);
    uint64_t v60 = *(void *)(v47 + 72);
    v61 = v28;
    v31 = (void (**)(char *, uint64_t))(v47 + 8);
    do
    {
      uint64_t v32 = v64;
      v61(v6, v30, v64);
      uint64_t v33 = (uint64_t *)&v9[*(int *)(v63 + 48)];
      ResolvedTransferRepresentation.contentType.getter();
      *uint64_t v33 = ResolvedTransferRepresentation.suggestedFileName.getter();
      v33[1] = v34;
      (*v31)(v6, v32);
      uint64_t v35 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1);
        uint64_t v35 = v65;
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        uint64_t v35 = v65;
      }
      *(void *)(v35 + 16) = v37 + 1;
      outlined init with take of (UTType, String?)((uint64_t)v9, v35+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v37);
      v30 += v60;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    if (*(void *)(v35 + 16)) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v38 = MEMORY[0x1E4FBC868];
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_11;
  }
LABEL_9:
  type metadata accessor for _DictionaryStorage<UTType, String?>();
  uint64_t v38 = static _DictionaryStorage.allocate(capacity:)();
LABEL_12:
  uint64_t v65 = v38;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v35, 1, &v65);
  swift_bridgeObjectRelease();
  uint64_t v40 = v57;
  uint64_t v39 = v58;
  static Transferable.writableContentTypes.getter();
  uint64_t v41 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v41 - 8);
  unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v40;
  *(void *)(v44 + 24) = v39;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 32))(v44 + v43, v59, v41);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
  return &async function pointer to partial apply for closure #3 in AnyTransferable.init<A>(_:);
}

uint64_t _DictionaryKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v69 = a1;
  uint64_t v71 = a5;
  uint64_t v72 = a3;
  uint64_t v67 = a9;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v65 = *(void *)(v15 - 8);
  uint64_t v66 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v70 = (uint64_t)&v61 - v16;
  uint64_t v17 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v18);
  int64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v61 - v22;
  uint64_t v81 = a8;
  uint64_t v24 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v26 = *(void *)(a4 + 16);
  uint64_t v73 = a4;
  if (!v26 || (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v28 & 1) == 0))
  {
    long long v79 = 0u;
    long long v80 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(a4 + 56) + 32 * v27, (uint64_t)&v79);
  swift_bridgeObjectRelease();
  if (!*((void *)&v80 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v79);
    uint64_t v69 = type metadata accessor for DecodingError();
    uint64_t v70 = swift_allocError();
    uint64_t v40 = v39;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v68 = (char *)v40 + *(int *)(v41 + 48);
    uint64_t v42 = v81;
    v40[3] = a6;
    v40[4] = v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40);
    uint64_t v44 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16);
    v44(boxed_opaque_existential_1, a2, a6);
    uint64_t v45 = a6;
    uint64_t v46 = v72;
    swift_beginAccess();
    *(void *)&long long v74 = 0;
    *((void *)&v74 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    unint64_t v77 = 0xD00000000000001DLL;
    unint64_t v78 = 0x8000000188330C20;
    uint64_t v75 = v45;
    uint64_t v76 = v42;
    uint64_t v47 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v74);
    v44(v47, a2, v45);
    uint64_t v48 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v74, v46);
    int v50 = v49;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
    v51._countAndFlagsBits = v48;
    v51._object = v50;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 46;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v69 - 8) + 104))(v40, *MEMORY[0x1E4FBBA68]);
    return swift_willThrow();
  }
  uint64_t v63 = a10;
  outlined init with take of Any(&v79, &v74);
  v61 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v61(v23, a2, a6);
  uint64_t v29 = v72;
  uint64_t v62 = (uint64_t *)(v72 + 136);
  swift_beginAccess();
  uint64_t v30 = *(void **)(v29 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v29 + 136) = v30;
  uint64_t v64 = a7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *uint64_t v62 = (uint64_t)v30;
  }
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v30);
    *uint64_t v62 = (uint64_t)v60;
  }
  v61(v20, (uint64_t)v23, a6);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, (uint64_t)v20, v62, a6, v81);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v23, a6);
  swift_endAccess();
  uint64_t v35 = v69;
  uint64_t v34 = v70;
  uint64_t v36 = v64;
  unint64_t v37 = v68;
  __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)&v74, v69, v64, v63, v70);
  if (v37)
  {
    uint64_t v38 = v29;
  }
  else
  {
    uint64_t v54 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v34, 1, v36) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v34, v66);
      uint64_t v55 = type metadata accessor for DecodingError();
      uint64_t v70 = swift_allocError();
      uint64_t v57 = v56;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v57 = v35;
      *(void *)&long long v79 = 0;
      *((void *)&v79 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(void *)&long long v79 = 0x6465746365707845;
      *((void *)&v79 + 1) = 0xE900000000000020;
      v58._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      v59._countAndFlagsBits = 0xD00000000000001ELL;
      v59._object = (void *)0x8000000188330C40;
      String.append(_:)(v59);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v55 - 8) + 104))(v57, *MEMORY[0x1E4FBBA80], v55);
      swift_willThrow();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v67, v34, v36);
    }
    uint64_t v38 = v29;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v38);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
}

uint64_t _DictionaryKeyedDecodingContainer._errorDescription(of:)(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 112) != 1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v17._countAndFlagsBits = 2238496;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v5 = (void *)v4;
  uint64_t v6 = specialized static DictionaryEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v3, v4);
  uint64_t v8 = (void *)v7;
  unint64_t v9 = specialized static DictionaryDecoder.KeyDecodingStrategy._convertFromSnakeCase(_:)(v6, v7);
  uint64_t v11 = v10;
  BOOL v12 = v6 == v3 && v8 == v5;
  if (v12 || (uint64_t v13 = v9, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14._countAndFlagsBits = 2238496;
    v14._object = (void *)0xE300000000000000;
    String.append(_:)(v14);
    uint64_t v15 = v3;
    uint64_t v16 = v5;
LABEL_9:
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 10530;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    return 0;
  }
  BOOL v20 = v13 == v3 && v11 == v5;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(26);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v21._countAndFlagsBits = 2238496;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = v3;
    v22._object = v5;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0x8000000188330BE0;
    unint64_t v24 = 0xD000000000000011;
  }
  else
  {
    _StringGuts.grow(_:)(60);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v25._countAndFlagsBits = 2238496;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    v26._countAndFlagsBits = v3;
    v26._object = v5;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000022;
    v27._object = (void *)0x8000000188330BB0;
    String.append(_:)(v27);
    v28._countAndFlagsBits = v13;
    v28._object = v11;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0x7265766E6F63202CLL;
    unint64_t v23 = 0xEF206F7420646574;
  }
  String.append(_:)(*(Swift::String *)&v24);
  v29._countAndFlagsBits = v6;
  v29._object = v8;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return 0;
}

ValueMetadata *type metadata accessor for TableShowsFirstColumnOnlyModifier()
{
  return &type metadata for TableShowsFirstColumnOnlyModifier;
}

unint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance PortalTargetRendererEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (void *)swift_allocObject();
  v6[5] = a1;
  unint64_t result = lazy protocol witness table accessor for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect();
  v6[6] = result;
  _OWORD v6[2] = v5;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 3;
  return result;
}

void __DictionaryDecoder.unbox<A>(_:as:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __DictionaryDecoder.unbox_(_:as:)(a1, a2, a4, v9);
  if (!v5)
  {
    _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    int v8 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a5, v8 ^ 1u, 1, a3);
  }
}

unint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.SelectionBasedStorageKey<A>@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = static _GraphInputs.SelectionBasedStorageKey.defaultValue.getter();
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  return result;
}

unint64_t static _GraphInputs.SelectionBasedStorageKey.defaultValue.getter()
{
  return *MEMORY[0x1E4F4E7A0] | ((unint64_t)*MEMORY[0x1E4F4E7A0] << 32);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ShadowChild<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t partial apply for closure #1 in ActionDispatcherSubscriber.respond(to:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for ActionDispatcherSubscriber() - 8);
  uint64_t v3 = v0
     + ((((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + *(void *)(v2 + 64)
       + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  MEMORY[0x18C10C020](&v5);
  v5(v3);
  return swift_release();
}

uint64_t partial apply for closure #1 in SubscriptionView.Subscriber.updateValue()(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for SubscriptionView() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in SubscriptionView.Subscriber.updateValue()(a1, v8, v3, v4, v5, v6);
}

uint64_t closure #1 in SubscriptionView.Subscriber.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a4;
  uint64_t v30 = a6;
  uint64_t v27 = a2;
  uint64_t v31 = a1;
  uint64_t v28 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v14 = type metadata accessor for SubscriptionView();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  double v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v26 - v18, v27, v14, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v31, AssociatedTypeWitness);
  unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v21 = (v16 + v20 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  Swift::String v22 = (char *)swift_allocObject();
  uint64_t v23 = v29;
  *((void *)v22 + 2) = a3;
  *((void *)v22 + 3) = v23;
  uint64_t v24 = v30;
  *((void *)v22 + 4) = v28;
  *((void *)v22 + 5) = v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v22[v20], v19, v14);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v22[v21], v13, v26);
  static Update.enqueueAction(_:)();
  return swift_release();
}

long long *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(long long *), char *a5, uint64_t a6, uint64_t (*a7)(long long *))
{
  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *(void **)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t v7;

  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *(void **)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5, a6, a7);
}

long long *_DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(long long *), char *a8, uint64_t a9, uint64_t (*a10)(long long *))
{
  uint64_t v55 = a8;
  uint64_t v57 = a7;
  uint64_t v59 = a4;
  uint64_t v66 = a2;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v20 = v19;
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v58 = a3;
  if (!v23 || (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v25 & 1) == 0))
  {
    long long v64 = 0u;
    long long v65 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v24, (uint64_t)&v64);
  swift_bridgeObjectRelease();
  if (!*((void *)&v65 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v64);
    uint64_t v56 = type metadata accessor for DecodingError();
    uint64_t v57 = (uint64_t (*)(long long *))swift_allocError();
    uint64_t v38 = v37;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v55 = (char *)v38 + *(int *)(v39 + 48);
    v38[3] = a5;
    v38[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
    uint64_t v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16);
    v41(boxed_opaque_existential_1, v20, a5);
    uint64_t v42 = (uint64_t)v66;
    swift_beginAccess();
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v63[0] = 0xD00000000000001DLL;
    v63[1] = 0x8000000188330C20;
    uint64_t v61 = a5;
    uint64_t v62 = a6;
    unint64_t v43 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
    v41(v43, v20, a5);
    uint64_t v44 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v60, v42);
    uint64_t v46 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    uint64_t v34 = (long long *)v63;
    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v56 - 8) + 104))(v38, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v34;
  }
  outlined init with take of Any(&v64, &v60);
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v54 = v13;
  v53(v18, v20, a5);
  uint64_t v26 = v66;
  uint64_t v27 = v66 + 17;
  swift_beginAccess();
  uint64_t v28 = (void *)v26[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26[17] = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    *uint64_t v27 = (uint64_t)v28;
  }
  unint64_t v31 = v28[2];
  unint64_t v30 = v28[3];
  uint64_t v32 = v54;
  if (v31 >= v30 >> 1) {
    *uint64_t v27 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v28);
  }
  v53(v15, (uint64_t)v18, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, (uint64_t)v15, v27, a5, a6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, a5);
  swift_endAccess();
  uint64_t v33 = (uint64_t)v66;
  uint64_t v34 = (long long *)v66;
  uint64_t v35 = v56;
  uint64_t v36 = v57(&v60);
  if (!v35)
  {
    uint64_t v34 = (long long *)v36;
    if ((v36 & 0x100) != 0)
    {
      uint64_t v56 = a9;
      uint64_t v57 = a10;
      uint64_t v50 = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v52 = v51;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *Swift::String v52 = v55;
      *(void *)&long long v64 = 0;
      *((void *)&v64 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v34 = &v64;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v50 - 8) + 104))(v52, *MEMORY[0x1E4FBBA80], v50);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  return v34;
}

{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  long long *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *boxed_opaque_existential_1;
  void (*v41)(uint64_t *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v50;
  void *v51;
  void *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(long long *);
  uint64_t v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  void v63[2];
  long long v64;
  long long v65;
  void *v66;

  uint64_t v55 = a8;
  uint64_t v57 = a7;
  uint64_t v59 = a4;
  uint64_t v66 = a2;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v20 = v19;
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v58 = a3;
  if (!v23 || (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v25 & 1) == 0))
  {
    long long v64 = 0u;
    long long v65 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v24, (uint64_t)&v64);
  swift_bridgeObjectRelease();
  if (!*((void *)&v65 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v64);
    uint64_t v56 = type metadata accessor for DecodingError();
    uint64_t v57 = (uint64_t (*)(long long *))swift_allocError();
    uint64_t v38 = v37;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v55 = (char *)v38 + *(int *)(v39 + 48);
    v38[3] = a5;
    v38[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
    uint64_t v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16);
    v41(boxed_opaque_existential_1, v20, a5);
    uint64_t v42 = (uint64_t)v66;
    swift_beginAccess();
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v63[0] = 0xD00000000000001DLL;
    v63[1] = 0x8000000188330C20;
    uint64_t v61 = a5;
    uint64_t v62 = a6;
    unint64_t v43 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
    v41(v43, v20, a5);
    uint64_t v44 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v60, v42);
    uint64_t v46 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    uint64_t v34 = (long long *)v63;
    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v56 - 8) + 104))(v38, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v34;
  }
  outlined init with take of Any(&v64, &v60);
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v54 = v13;
  v53(v18, v20, a5);
  uint64_t v26 = v66;
  uint64_t v27 = v66 + 17;
  swift_beginAccess();
  uint64_t v28 = (void *)v26[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26[17] = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    *uint64_t v27 = (uint64_t)v28;
  }
  unint64_t v31 = v28[2];
  unint64_t v30 = v28[3];
  uint64_t v32 = v54;
  if (v31 >= v30 >> 1) {
    *uint64_t v27 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v28);
  }
  v53(v15, (uint64_t)v18, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, (uint64_t)v15, v27, a5, a6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, a5);
  swift_endAccess();
  uint64_t v33 = (uint64_t)v66;
  uint64_t v34 = (long long *)v66;
  uint64_t v35 = v56;
  uint64_t v36 = v57(&v60);
  if (!v35)
  {
    uint64_t v34 = (long long *)v36;
    if ((v36 & 0x10000) != 0)
    {
      uint64_t v56 = a9;
      uint64_t v57 = a10;
      uint64_t v50 = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v52 = v51;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *Swift::String v52 = v55;
      *(void *)&long long v64 = 0;
      *((void *)&v64 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v34 = &v64;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v50 - 8) + 104))(v52, *MEMORY[0x1E4FBBA80], v50);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  return v34;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for FeedbackGenerator();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80));
  swift_weakDestroy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[10], v1);
  if (*(void *)(v3 + v2[11])) {
    swift_release();
  }
  uint64_t v4 = v3 + v2[12];
  if (*(void *)(v4 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v4);
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_14Tm_0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_14Tm_1()
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    swift_release();
    unsigned int v4 = *(unsigned __int8 *)(v2 + 16);
    if (v4 <= 0xFD) {
      outlined consume of PlatformItemCollection.Storage(*(void *)(v2 + 8), v4 & 1);
    }
    uint64_t v5 = v2 + *(int *)(v3 + 24);
    uint64_t v6 = type metadata accessor for PlatformItemList.Item();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {

      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v7 = *(void *)(v5 + 184);
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
      {
        int v9 = *(unsigned __int8 *)(v5 + 72);
        if (v9 != 255)
        {
          outlined consume of GraphicsImage.Contents(*(void **)(v5 + 64), v9);
          uint64_t v7 = *(void *)(v5 + 184);
          unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        }
        if (v8 != 0x1FFFFFFFELL) {
          outlined consume of AccessibilityImageLabel(*(void *)(v5 + 168), *(void *)(v5 + 176), v7);
        }
        swift_unknownObjectRelease();
        swift_release();
      }
      if (*(void *)(v5 + 256))
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = *(void **)(v5 + 264);
        if ((unint64_t)v10 >= 2) {

        }
        swift_release();
        swift_release();
      }
      unint64_t v11 = *(void *)(v5 + 328);
      if (v11 >> 2 != 0xFFFFFFFF) {
        outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v5 + 296), *(void *)(v5 + 304), *(void *)(v5 + 312), *(void *)(v5 + 320), v11, *(void *)(v5 + 336), *(void *)(v5 + 344), *(void *)(v5 + 352), *(void *)(v5 + 360), *(void *)(v5 + 368), *(void *)(v5 + 376), *(void *)(v5 + 384), *(void *)(v5 + 392));
      }
      uint64_t v12 = *(void *)(v5 + 408);
      if (v12)
      {
        if (v12 == 1)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          if (*(void *)(v5 + 504)) {
            swift_release();
          }
          if (*(void *)(v5 + 528))
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
          }
          if (*(void *)(v5 + 552) != 1)
          {
            swift_release();
            if (*(void *)(v5 + 560)) {
              swift_release();
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v13 = v5 + *(int *)(v6 + 112);
          uint64_t v14 = type metadata accessor for CommandOperation();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
          {
            uint64_t v15 = v13 + *(int *)(v14 + 20);
            outlined consume of Text.Storage(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
            swift_bridgeObjectRelease();
            uint64_t v16 = v15 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v17 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
            if (*(void *)(v13 + *(int *)(v14 + 24))) {
              swift_release();
            }
          }
          swift_release();
          goto LABEL_35;
        }
        swift_release();
      }
      if (*(void *)(v5 + 424)) {
        swift_release();
      }
      if (*(void *)(v5 + 440)) {
        swift_release();
      }
      goto LABEL_24;
    }
  }
LABEL_35:

  return swift_deallocObject();
}

uint64_t __DictionaryDecoder.unbox(_:as:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for (key: String, value: Encodable)?(0, a2, a3);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v23 - v11;
  outlined init with copy of Any(a1, (uint64_t)v25);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    uint64_t v13 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a5, 1, 1, v13);
  }
  uint64_t v24 = a5;
  outlined init with copy of Any(a1, (uint64_t)v25);
  uint64_t v15 = a4(0);
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  if (v16)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    v17(v12, 0, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v15) != 1)
    {
      uint64_t v19 = v24;
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v24, v12, v15);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v17)(v19, 0, 1, v15);
    }
  }
  else
  {
    v17(v12, 1, 1, v15);
  }
  outlined destroy of (key: String, value: Any)((uint64_t)v12, (uint64_t)a2, (uint64_t)a3, (uint64_t (*)(void))type metadata accessor for (key: String, value: Encodable)?);
  uint64_t v20 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v22 = v21;
  type metadata accessor for (@thick Any.Type, DecodingError.Context)();
  uint64_t *v22 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x1E4FBBA70], v20);
  return swift_willThrow();
}

uint64_t specialized static SearchFieldState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  if (v4 == 2)
  {
    if (v5 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v7 = (v4 & 1) == 0;
    if (v5 == 2 || ((v7 ^ v5) & 1) == 0) {
      return result;
    }
  }
  if (a1[1] != a2[1]) {
    return 0;
  }
  int v8 = a1[2];
  int v9 = a2[2];
  if (v8 == 2)
  {
    if (v9 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v10 = (v8 & 1) == 0;
    if (v9 == 2 || ((v10 ^ v9) & 1) == 0) {
      return result;
    }
  }
  int v11 = a1[3];
  int v12 = a2[3];
  if (v11 == 2)
  {
    if (v12 != 2) {
      return 0;
    }
LABEL_17:
    char v14 = a2[8];
    if (a1[8])
    {
      if (!a2[8]) {
        return 0;
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
        char v14 = 1;
      }
      if (v14) {
        return 0;
      }
    }
    uint64_t v15 = type metadata accessor for SearchFieldState(0);
    if ((static AttributedString.== infix(_:_:)() & 1) != 0 && a1[*(int *)(v15 + 40)] == a2[*(int *)(v15 + 40)])
    {
      uint64_t v16 = *(int *)(v15 + 44);
      int v17 = *(_DWORD *)&a1[v16];
      if (v17 != -1)
      {
        int v18 = *(_DWORD *)&a2[v16];
        if (v18 != -1 && v17 == v18) {
          return 1;
        }
      }
    }
    return 0;
  }
  uint64_t result = 0;
  BOOL v13 = (v11 & 1) == 0;
  if (v12 != 2 && ((v13 ^ v12) & 1) != 0) {
    goto LABEL_17;
  }
  return result;
}

uint64_t specialized UIKitNavigationBridge.init()(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_WORD *)(a1 + 152) = 0;
  swift_retain();
  EnvironmentValues.init()();
  *(_OWORD *)(a1 + 176) = xmmword_18834FC50;
  swift_unknownObjectWeakInit();
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in _TaskValueModifier.InnerModifier.body(content:)()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  int v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  void *v4 = v3;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v6();
}

uint64_t FocusState.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  BOOL v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v19 - v15;
  FocusState.getValue(forReading:)(0, a1, (uint64_t)&v19 - v15);
  if (*(void *)(v2 + *(int *)(a1 + 36)))
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v5);
    swift_retain();
    Binding.init(value:location:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    int v17 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t FocusState.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(v3 + *(int *)(a2 + 36)))
  {
LABEL_6:
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 16);
    return v7(a3, v3);
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if (static GraphHost.isUpdating.getter())
  {
    if (a1) {
      dispatch thunk of AnyLocation.wasRead.setter();
    }
    swift_release();
    goto LABEL_6;
  }
  dispatch thunk of AnyLocation.get()();

  return swift_release();
}

uint64_t FocusStoreLocation.wasRead.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)(class metadata base offset for FocusStoreLocation + *v1 + 72)) = result;
  return result;
}

uint64_t FocusStoreLocation.get()@<X0>(uint64_t a1@<X8>)
{
  return FocusStoreLocation.getValue(forReading:)(0, a1);
}

uint64_t VisualEffect.opacity(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

void type metadata completion function for ToolbarStorage.GroupItem()
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(319, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1ED41DA40, (uint64_t)&protocol witness table for IntegerTransform, a4, a1, 0);
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 80) = 0;
  *(unsigned char *)(v7 + 88) = 1;
  *(void *)(v7 + 96) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v7 + 104) = 0;
  *(unsigned char *)(v7 + 112) = 0;
  *(void *)(v7 + 116) = 0;
  *(unsigned char *)(v7 + 124) = 1;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a7;
  return v7;
}

uint64_t AppStorage<A>.init<>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1ED41DA40, (uint64_t)&protocol witness table for IntegerTransform, a3, 0, 1, 0);
}

{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1ED41BD80, (uint64_t)&protocol witness table for StringTransform, a3, 0, 0, 0, 1);
}

{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1ED414480, (uint64_t)&protocol witness table for BoolTransform, a3, 2, 0, 3);
}

{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1ED419A20, (uint64_t)&protocol witness table for DoubleTransform, a3, 0, 1, 0);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v6 = MEMORY[0x1E4F277C0];
  type metadata accessor for UserDefaultLocation<Bool>(0, &lazy cache variable for type metadata for PropertyListTransform<Data>, MEMORY[0x1E4F277C0], (uint64_t (*)(void, uint64_t))type metadata accessor for PropertyListTransform);
  uint64_t v8 = v7;
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Data?>, (unint64_t *)&lazy cache variable for type metadata for Data?, v6);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, v8, (uint64_t)&protocol witness table for PropertyListTransform<A>, a3, 0, 0xF000000000000000, 0, 0xB000000000000000);
}

void type metadata accessor for UserDefaultLocation<Data?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for UserDefaultLocation<Bool>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for UserDefaultLocation();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t AppStorage.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.getValue(forReading:)(1, a1);

  return swift_release();
}

uint64_t UserDefaultLocation.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  void (*v22)(uint64_t *__return_ptr, id, void, void, uint64_t, uint64_t);
  uint64_t v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[4];

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  unint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  MEMORY[0x1F4188790](v7);
  int v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v30 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v30 - v14;
  type metadata accessor for GraphHost();
  if (static GraphHost.isUpdating.getter() & 1) != 0 && (a1)
  {
    uint64_t v16 = &v2[*(void *)(*(void *)v2 + 160)];
    swift_beginAccess();
    *uint64_t v16 = 1;
  }
  UserDefaultLocation.cachedValue.getter((uint64_t)v15);
  uint64_t v17 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v6) == 1)
  {
    unint64_t v30 = v9;
    uint64_t v18 = a2;
    uint64_t v19 = *((void *)v3 + 4);
    uint64_t v20 = *((void *)v3 + 5);
    id v21 = UserDefaultLocation.store.getter();
    uint64_t v22 = *(void (**)(uint64_t *__return_ptr, id, void, void, uint64_t, uint64_t))(v20 + 8);
    uint64_t v23 = v20;
    a2 = v18;
    v22(v33, v21, *((void *)v3 + 2), *((void *)v3 + 3), v19, v23);

    type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    uint64_t v24 = swift_dynamicCast();
    char v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v27 = v31;
    id v26 = v32;
    if (v24)
    {
      v25(v12, 0, 1, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v12, v6);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v26);
    }
    else
    {
      v25(v12, 1, 1, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a2, &v3[*(void *)(*(void *)v3 + 104)], v6);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v27 + 8);
      v29(v12, v26);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v15, v26);
    }
    int v9 = v30;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v15, v6);
  }
  if ((v3[*(void *)(*(void *)v3 + 168) + 8] & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v9, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v6);
    return UserDefaultLocation.cachedValue.setter((uint64_t)v9);
  }
  return result;
}

void type metadata accessor for UserDefaultLocation<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void specialized static ScalarUserDefaultsValueTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (void *)MEMORY[0x18C115780](a2, a3);
  id v9 = objc_msgSend(a1, sel_objectForKey_, v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v12);
    a4[3] = MEMORY[0x1E4FBB550];
    uint64_t v10 = (void *)MEMORY[0x18C115780](a2, a3);
    id v11 = objc_msgSend(a1, sel_integerForKey_, v10);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    id v11 = 0;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  *a4 = v11;
}

{
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v8 = (void *)MEMORY[0x18C115780](a2, a3);
  id v9 = objc_msgSend(a1, sel_objectForKey_, v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v13);
    a4[3] = MEMORY[0x1E4FBB3D0];
    uint64_t v10 = (void *)MEMORY[0x18C115780](a2, a3);
    objc_msgSend(a1, sel_doubleForKey_, v10);
    uint64_t v12 = v11;
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    outlined destroy of Any?((uint64_t)v13);
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v12 = 0;
    a4[3] = 0;
  }
  *a4 = v12;
}

id UserDefaultLocation.store.getter()
{
  uint64_t v1 = *(void **)(v0 + *(void *)(*(void *)v0 + 112));
  if (v1)
  {
    id v2 = *(id *)(v0 + *(void *)(*(void *)v0 + 112));
  }
  else
  {
    id v2 = *(id *)(v0 + *(void *)(*(void *)v0 + 144));
    uint64_t v1 = 0;
  }
  id v3 = v1;
  return v2;
}

uint64_t UserDefaultLocation.cachedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UserDefaultLocation.canonicalLocation.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  if (*(void *)(v0 + v1)) {
    uint64_t v0 = *(void *)(v0 + v1);
  }
  else {
    swift_retain();
  }
  swift_retain();
  return v0;
}

uint64_t type metadata accessor for UserDefaultLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 88) = 0;
  *(void *)(v9 + 96) = a9;
  *(void *)(v9 + 104) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v9 + 112) = 0;
  *(unsigned char *)(v9 + 120) = 0;
  *(void *)(v9 + 124) = 0;
  *(unsigned char *)(v9 + 132) = 1;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = a4;
  *(void *)(v9 + 48) = a6;
  *(void *)(v9 + 56) = a7;
  *(void *)(v9 + 64) = a5;
  *(void *)(v9 + 72) = a8;
  return v9;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(_WORD *)(v8 + 96) = 256;
  *(void *)(v8 + 104) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v8 + 112) = 0;
  *(unsigned char *)(v8 + 120) = 0;
  *(void *)(v8 + 124) = 0;
  *(unsigned char *)(v8 + 132) = 1;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a6;
  *(unsigned char *)(v8 + 56) = a7 & 1;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a8;
  return v8;
}

uint64_t type metadata completion function for HelpView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double ScrollViewResponderSize.value.getter@<D0>(_OWORD *a1@<X8>)
{
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)&v13);
  char v3 = v13;
  if ((v13 & 1) == 0)
  {
    if ((v13 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  static Edge.Set.horizontal.getter();
  if ((v3 & 2) != 0) {
LABEL_5:
  }
    static Edge.Set.vertical.getter();
LABEL_6:
  outlined destroy of ScrollViewConfiguration((uint64_t)&v13);
  EdgeInsets.in(_:)();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  uint64_t v4 = (void *)AGGraphGetValue();
  uint64_t v5 = v4[1];
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3];
  *(void *)&long long v13 = *v4;
  *((void *)&v13 + 1) = v5;
  *(void *)&long long v14 = v6;
  *((void *)&v14 + 1) = v7;
  MEMORY[0x18C114450](v4, v8, v9, v10);
  CGSize.outset(by:)();
  ViewSize.value.setter();
  double result = *(double *)&v13;
  long long v12 = v14;
  *a1 = v13;
  a1[1] = v12;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>();
    lazy protocol witness table accessor for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OpacityButtonHighlightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier, (uint64_t)&type metadata for OpacityButtonHighlightModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (int *)(type metadata accessor for FocusStore.Entry() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v2[12];
  type metadata accessor for FocusStore.Entry.Target();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    swift_release();
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v6 = *(int *)(v5 + 32);
    uint64_t v7 = v4 + v6 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v8 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_weakDestroy();
    swift_weakDestroy();
  }

  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm_0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm_1()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }

  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm_2()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm_3()
{
  swift_release();
  outlined consume of SharingPickerSource(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168));
  swift_release();

  return swift_deallocObject();
}

uint64_t LazyVStack.init(alignment:spacing:pinnedViews:content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LeafDisplayList<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t initializeWithTake for BarItemView(uint64_t a1, long long *a2)
{
  long long v3 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t MatchedTransitionSourceConfiguration.clipShape(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *((unsigned char *)a1 + 16);
  long long v5 = *a1;
  char v6 = v3;
  return MatchedTransitionSourceConfiguration.concat<A>(_:)((uint64_t)&v5, a2, (uint64_t)&unk_1ED42B4B8, a3);
}

uint64_t MatchedTransitionSourceConfiguration.concat<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return CombinedMatchedTransitionSourceConfiguration.init(a:b:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t CombinedMatchedTransitionSourceConfiguration.init(a:b:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for CombinedMatchedTransitionSourceConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for CombinedMatchedTransitionSourceConfiguration()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CubicGradientProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  if (!v2)
  {
    if (!v4) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!v4 || !specialized static Array<A>.== infix(_:_:)(v2, v4)) {
    return 0;
  }
LABEL_5:

  return interpolationsEqual(_:_:)(v3, v5);
}

void type metadata completion function for ToolbarStorage.Item()
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for ContentListItemNavigationLinkStyle()
{
  type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NavigationLinkButtonStyle.PayloadV1()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AllowsToolbarItemBridgingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void))
{
  v4[2] = *MEMORY[0x1E4F143B8];
  a3(v4, *(void *)a1, *(unsigned int *)(a1 + 8));
  return AGGraphSetOutputValue();
}

double ScrollViewResponderPosition.value.getter@<D0>(_OWORD *a1@<X8>)
{
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v8);
  char v3 = LOBYTE(v8[0]);
  if ((LOBYTE(v8[0]) & 1) == 0)
  {
    if ((LOBYTE(v8[0]) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  static Edge.Set.horizontal.getter();
  if ((v3 & 2) != 0) {
LABEL_5:
  }
    static Edge.Set.vertical.getter();
LABEL_6:
  outlined destroy of ScrollViewConfiguration((uint64_t)v8);
  EdgeInsets.in(_:)();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  uint64_t v4 = (double *)AGGraphGetValue();
  double v5 = v4[1];
  v8[0] = *v4;
  v8[1] = v5;
  MEMORY[0x18C10C240](v4, v6);
  EdgeInsets.negatedInsets.getter();
  CGPoint.offset(by:)();
  ViewOrigin.value.setter();
  double result = v8[0];
  *a1 = *(_OWORD *)v8;
  return result;
}

uint64_t type metadata completion function for List()
{
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Picker<>.init<A>(_:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v31 = a7;
  uint64_t v32 = a6;
  uint64_t v36 = a4;
  unint64_t v37 = a8;
  int v35 = a3;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v29 = a10;
  uint64_t v30 = a5;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v14;
  uint64_t v39 = a9;
  uint64_t v40 = v15;
  uint64_t v41 = a11;
  uint64_t v16 = type metadata accessor for PickerBuilder.Content();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v29 - v22;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v29 - v22, a5, v19, v21);
  v32(v24);
  PickerBuilder.Content.init(_:)((uint64_t)v13, a9, (uint64_t)v18);
  uint64_t v38 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v39 = v25;
  LOBYTE(v40) = v26 & 1;
  uint64_t v41 = v27;
  swift_getWitnessTable();
  Picker.init(selection:content:label:)((uint64_t)v23, (uint64_t)v18, (uint64_t)&v38, MEMORY[0x1E4F41420], v16, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v30, v19);
}

uint64_t type metadata accessor for PickerBuilder.Content()
{
  return swift_getGenericMetadata();
}

uint64_t NestedDynamicProperties.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Picker.init(selection:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12 = (int *)type metadata accessor for Picker();
  *(uint64_t *)((char *)a6 + v12[19]) = 0;
  uint64_t v13 = type metadata accessor for Binding();
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  swift_allocObject();
  uint64_t v15 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, a1, v13);
  _finalizeUninitializedArray<A>(_:)();
  *a6 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))((char *)a6 + v12[18], a2, a5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))((char *)a6 + v12[17], a3, a4);
}

uint64_t type metadata accessor for Picker()
{
  return swift_getGenericMetadata();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Array();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v0, v1, v2, v3);
}

uint64_t PickerBuilder.Content.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return NestedDynamicProperties.init(wrappedValue:)(a1, a2, a3);
}

uint64_t destroy for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  unint64_t v5 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));

    return swift_release();
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityProxyModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for TimelineView.Context()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<FocusableBounds>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t MergedDocumentIntroAccessory.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for MergedDocumentIntroAccessory();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI8StaticIfVyAA23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceF0VGAA28ButtonStyleContainerModifierVyAA07PlatterjK0VGAA05EmptyM0VGACyxq_q0_GAA04ViewM0A2aRR_AaRR0_rlWlTm_0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t BorderedProminentButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v34 = type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8;
  MEMORY[0x1F4188790](v34);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v33 - v9;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>();
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0);
  uint64_t v19 = v18 - 8;
  MEMORY[0x1F4188790](v18);
  double v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
  uint64_t v33 = v22 - 8;
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12(v35, (uint64_t)v3, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v25 = v3[1];
  char *v7 = *v3;
  v7[1] = v25;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12((uint64_t)&v3[*(int *)(v34 + 32)], (uint64_t)&v7[*(int *)(v5 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_4((uint64_t)v3, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v7, (uint64_t)v10);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10, (uint64_t)v14);
  v14[*(int *)(v12 + 44)] = 1;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>);
  char v26 = &v21[*(int *)(v19 + 44)];
  *(void *)char v26 = 0;
  v26[8] = 1;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = swift_getKeyPath();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12((uint64_t)v21, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  uint64_t v31 = &v24[*(int *)(v33 + 44)];
  *(void *)uint64_t v31 = 0;
  v31[8] = 1;
  *((void *)v31 + 2) = KeyPath;
  v31[24] = 0;
  *((void *)v31 + 4) = v28;
  *((_WORD *)v31 + 20) = 0;
  *((void *)v31 + 6) = v29;
  v31[56] = 0;
  *((void *)v31 + 8) = v30;
  v31[72] = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_4((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12((uint64_t)v24, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_4((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255);
    _s7SwiftUI28ButtonStyleContainerModifierVyAA07PlattercD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderedButtonStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone, (uint64_t)&type metadata for BorderedButtonStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_6(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<PlatterButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatterButtonStyle and conformance PlatterButtonStyle, (uint64_t)&type metadata for PlatterButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac, (uint64_t)&type metadata for BorderedButtonStyle_CarMac, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_8(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    _s7SwiftUI28ButtonStyleContainerModifierVyAA07PlattercD0VGMaTm_0(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return _s7SwiftUI8StaticIfVyAA23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceF0VGAA28ButtonStyleContainerModifierVyAA07PlatterjK0VGAA05EmptyM0VGACyxq_q0_GAA04ViewM0A2aRR_AaRR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for ButtonStyleContainerModifier<PlatterButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderedButtonStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone, (uint64_t)&type metadata for BorderedButtonStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for ButtonStyleContainerModifier<PlatterButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI28ButtonStyleContainerModifierVyAA07PlattercD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle;
  if (!lazy protocol witness table cache variable for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    _s7SwiftUI28ButtonStyleContainerModifierVyAA07PlattercD0VGMaTm_0(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone;
  if (!lazy protocol witness table cache variable for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
    _s7SwiftUI28ButtonStyleContainerModifierVyAA07PlattercD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput, (uint64_t)&type metadata for ButtonContainerIsBorderedInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t type metadata completion function for NavigationSplitView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SubscriptionView.Subscriber.updateValue()()
{
  uint64_t v1 = *(void *)(type metadata accessor for SubscriptionView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v0 + ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = type metadata accessor for SubscriptionView();
  return (*(uint64_t (**)(uint64_t))(v0 + *(int *)(v6 + 56) + v2))(v5);
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
    }
  }
}

uint64_t _DocumentIntroAccessoryItem.init(anchor:position:content:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v7 = *a1;
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(unsigned char *)(a3 + 16) = v7;
  type metadata accessor for _DocumentIntroAccessoryItem();
  return a2();
}

uint64_t type metadata accessor for _DocumentIntroAccessoryItem()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for NavigationSplitView.InternalBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for UIKitNavigationBridge()
{
  return swift_initClassMetadata2();
}

uint64_t outlined destroy of ScrollableCollection??(uint64_t a1)
{
  type metadata accessor for ScrollableCollection??(0, &lazy cache variable for type metadata for ScrollableCollection??, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ScrollableCollection??(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(255, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t CommandGroup.init(after:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CommandOperation();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = _s7SwiftUI21CommandGroupPlacementVWOcTm_1(a1, (uint64_t)v16, type metadata accessor for CommandGroupPlacement);
  a2(v20);
  CommandOperation.init<A>(mutation:placement:content:)(a5, (uint64_t)v16, (uint64_t)v13, a3, a4, v19);
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0(a1, type metadata accessor for CommandGroupPlacement);
  return _s7SwiftUI16CommandOperationVWObTm_0((uint64_t)v19, a6, (uint64_t (*)(void))type metadata accessor for CommandOperation);
}

uint64_t outlined destroy of CommandGroupPlacement(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI21CommandGroupPlacementVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for CommandGroupPlacement(uint64_t a1, uint64_t a2)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t outlined init with take of CommandOperation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16CommandOperationVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t CommandOperation.init<A>(mutation:placement:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v11 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CommandOperation();
  uint64_t v16 = (uint64_t *)&a6[*(int *)(v15 + 24)];
  *uint64_t v16 = 0;
  v16[1] = 0;
  *a6 = a1;
  outlined init with copy of CommandGroupPlacement(a2, (uint64_t)&a6[*(int *)(v15 + 20)], type metadata accessor for CommandGroupPlacement);
  outlined init with take of CommandGroupPlacement(a2, (uint64_t)v14, type metadata accessor for CommandGroupPlacement);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = *(void *)(a4 - 8);
  unint64_t v19 = (v17 + v13 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a4;
  *(void *)(v20 + 24) = a5;
  *(unsigned char *)(v20 + 32) = a1;
  outlined init with take of CommandGroupPlacement((uint64_t)v14, v20 + v17, type metadata accessor for CommandGroupPlacement);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v20 + v19, v23, a4);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v16);
  *uint64_t v16 = (uint64_t)partial apply for closure #1 in CommandOperation.init<A>(mutation:placement:content:);
  v16[1] = v20;
  return result;
}

uint64_t outlined init with take of CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t static CommandGroupPlacement.appInfo.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return _s7SwiftUI21CommandGroupPlacementVWOcTm_1(v6, a3, type metadata accessor for CommandGroupPlacement);
}

uint64_t outlined init with copy of CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI21CommandGroupPlacementVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI21CommandGroupPlacementVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t type metadata completion function for NavigationLinkButtonStyle()
{
  type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AlignmentModifiedLayoutComputer(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CoordinateSpaceNameTransform(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnyHoverEffectContainer(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer();

  return MEMORY[0x1F40FE388](a1, v2);
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  long long v5 = a4[1];
  long long v44 = *a4;
  long long v45 = v5;
  long long v46 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    char v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v43 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v32 = &v28;
      long long v11 = v45;
      int v12 = v46;
      uint64_t v28 = *((void *)&v44 + 1);
      uint64_t v29 = *((void *)&v46 + 1);
      uint64_t v35 = static RepresentableContextValues.current;
      uint64_t v36 = v44;
      uint64_t v13 = xmmword_1EB2E8DA0;
      uint64_t v34 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v14 = *((void *)&xmmword_1EB2E8DA0 + 1);
      int v33 = byte_1EB2E8DB0;
      static RepresentableContextValues.current = v44;
      xmmword_1EB2E8DA0 = v45;
      byte_1EB2E8DB0 = v46;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), v12);
      id v30 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), v12);
      uint64_t v16 = v34;
      uint64_t v15 = v35;
      char v17 = v33;
      outlined copy of RepresentableContextValues?(v35, v34, v13, v14, v33);
      uint64_t v18 = v13;
      *(void *)&long long v31 = v13;
      *((void *)&v31 + 1) = v14;
      uint64_t v19 = v14;
      uint64_t v20 = v28;
      uint64_t v21 = v29;
      outlined consume of RepresentableContextValues?(v15, v16, v18, v19, v17);
      uint64_t v22 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a5, (uint64_t)v42);
      if (v12 == 1)
      {
        MEMORY[0x1F4188790](v22);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), 1);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), 1);
        swift_retain_n();
        swift_retain();
        swift_retain();
        static Update.ensure<A>(_:)();
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), 1);
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), 1);
        swift_release();
        uint64_t v24 = v37;
        uint64_t v23 = v38;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), 0);
        uint64_t v23 = *((void *)&v11 + 1);
        uint64_t v24 = v11;
      }
      uint64_t v37 = v21;
      uint64_t v38 = v20;
      uint64_t v39 = v24;
      uint64_t v40 = v23;
      uint64_t v41 = v36;
      NavigationSplitRepresentable.updateUIViewController(_:context:)(v30, &v37);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v42);
      long long v25 = static RepresentableContextValues.current;
      long long v26 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v35;
      *((void *)&static RepresentableContextValues.current + 1) = v34;
      xmmword_1EB2E8DA0 = v31;
      char v27 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v33;
      outlined consume of RepresentableContextValues?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), v12);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  long long v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  long long v31;
  long long v32;
  char v33;
  void *v34;
  uint64_t v35;
  id v36;
  long long v37;
  int v38;
  void **v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned char v47[24];
  unsigned char v48[136];
  uint64_t v49;
  char v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  long long v5 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v5;
  uint64_t v54 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    char v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    Swift::String v51 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v39 = &v34;
      long long v11 = *((void *)&v52 + 1);
      int v12 = v53;
      uint64_t v13 = v54;
      uint64_t v34 = (void *)*((void *)&v54 + 1);
      uint64_t v42 = static RepresentableContextValues.current;
      id v43 = v52;
      uint64_t v14 = xmmword_1EB2E8DA0;
      uint64_t v41 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v15 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v40 = byte_1EB2E8DB0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      byte_1EB2E8DB0 = v54;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      uint64_t v36 = v8;
      swift_retain();
      swift_retain();
      long long v44 = *((void *)&v12 + 1);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      char v17 = v41;
      uint64_t v16 = v42;
      uint64_t v18 = v40;
      outlined copy of RepresentableContextValues?(v42, v41, v14, v15, v40);
      *(void *)&uint64_t v37 = v14;
      *((void *)&v37 + 1) = v15;
      uint64_t v19 = v14;
      uint64_t v20 = v34;
      outlined consume of RepresentableContextValues?(v16, v17, v19, v15, v18);
      uint64_t v21 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a5, (uint64_t)v47);
      uint64_t v38 = v13;
      if (v13 == 1)
      {
        MEMORY[0x1F4188790](v21);
        swift_retain();
        swift_retain();
        uint64_t v22 = v44;
        outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v44, 1);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v22, 1);
        uint64_t v23 = v20;
        swift_retain();
        swift_retain();
        static Update.ensure<A>(_:)();
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v22, 1);
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v22, 1);

        uint64_t v24 = v45;
        long long v25 = v46;
      }
      else
      {
        long long v26 = v20;
        swift_retain();
        swift_retain();
        long long v25 = v44;
        outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v44, 0);
        uint64_t v24 = v12;
      }
      uint64_t v35 = *(void *)&v48[84];
      char v27 = v49;
      uint64_t v28 = v50;
      swift_retain();
      swift_retain();
      outlined copy of Environment<Bool>.Content(v27, v28);
      uint64_t v29 = specialized Environment.wrappedValue.getter(v27, v28);
      outlined consume of Environment<Bool>.Content(v27, v28);
      type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
      id v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_18834BB80;
      outlined init with copy of _VariadicView_Children((uint64_t)v48, v30 + 32);
      swift_retain();
      swift_retain();
      specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((uint64_t)v36, v24, v25, v11, v35, v29 & 1, v24, v25, v30);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v47);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v42;
      *((void *)&static RepresentableContextValues.current + 1) = v41;
      xmmword_1EB2E8DA0 = v37;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v40;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v44, v38);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      UIKitSearchBarAdaptor.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      TextViewAdaptor.updateUIView(_:context:)((uint64_t)v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  long long v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  long long v21;
  long long v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void v34[2];
  long long v35;
  char v36;
  id v37;
  unsigned char v38[80];
  id v39;
  long long v40;
  long long v41;
  long long v42;

  long long v5 = a4[1];
  uint64_t v40 = *a4;
  uint64_t v41 = v5;
  uint64_t v42 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    char v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    uint64_t v39 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      id v30 = &v24;
      long long v11 = v40;
      int v12 = v41;
      uint64_t v13 = v42;
      uint64_t v28 = (id)*((void *)&v42 + 1);
      int v33 = static RepresentableContextValues.current;
      uint64_t v14 = xmmword_1EB2E8DA0;
      uint64_t v32 = *((void *)&static RepresentableContextValues.current + 1);
      long long v31 = *((void *)&xmmword_1EB2E8DA0 + 1);
      static RepresentableContextValues.current = v40;
      xmmword_1EB2E8DA0 = v41;
      uint64_t v15 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v42;
      long long v25 = *((void *)&v40 + 1);
      swift_retain();
      long long v26 = v11;
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      char v27 = v8;
      swift_retain();
      swift_retain();
      uint64_t v16 = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      char v17 = v33;
      uint64_t v18 = v32;
      uint64_t v19 = v31;
      uint64_t v29 = v15;
      outlined copy of RepresentableContextValues?(v33, v32, v14, v31, v15);
      outlined consume of RepresentableContextValues?(v17, v18, v14, v19, v15);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a5, (uint64_t)v38);
      v34[0] = v26;
      v34[1] = v25;
      uint64_t v35 = v12;
      uint64_t v36 = v16;
      uint64_t v37 = v28;
      uint64_t v20 = v28;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v16);
      UIKitPagingView.updateUIView(_:context:)(v27, (uint64_t)v34);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v16);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v38);
      uint64_t v21 = static RepresentableContextValues.current;
      uint64_t v22 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v33;
      *((void *)&static RepresentableContextValues.current + 1) = v32;
      *(void *)&xmmword_1EB2E8DA0 = v14;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v31;
      uint64_t v23 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v29;
      outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v16);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      UIKitTextViewAdaptor.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      KitRepresentable.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  long long v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  long long v36;
  long long v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  long long v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void v62[4];
  char v63;
  void *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  long long v74;
  uint64_t v75;
  id v76;
  long long v77;
  long long v78;
  long long v79;

  long long v5 = a4[1];
  unint64_t v77 = *a4;
  unint64_t v78 = v5;
  long long v79 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    char v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    uint64_t v76 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v57 = &v39;
      long long v11 = v77;
      int v12 = v78;
      uint64_t v13 = v79;
      Swift::String v52 = (void *)*((void *)&v79 + 1);
      uint64_t v14 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v61 = static RepresentableContextValues.current;
      uint64_t v15 = *((void *)&xmmword_1EB2E8DA0 + 1);
      long long v60 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v77;
      xmmword_1EB2E8DA0 = v78;
      uint64_t v16 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v79;
      uint64_t v42 = *((void *)&v77 + 1);
      swift_retain();
      swift_retain();
      uint64_t v59 = *((void *)&v12 + 1);
      uint64_t v58 = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      uint64_t v53 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      char v17 = v61;
      uint64_t v18 = v14;
      uint64_t v55 = v14;
      uint64_t v19 = v14;
      uint64_t v20 = v60;
      uint64_t v54 = v15;
      uint64_t v56 = v16;
      outlined copy of RepresentableContextValues?(v61, v19, v60, v15, v16);
      outlined consume of RepresentableContextValues?(v17, v18, v20, v15, v16);
      uint64_t v21 = *(void *)a5;
      uint64_t v22 = *(unsigned __int8 *)(a5 + 8);
      uint64_t v23 = *(void *)(a5 + 16);
      uint64_t v24 = *(unsigned __int8 *)(a5 + 25);
      long long v25 = *(void *)(a5 + 32);
      uint64_t v41 = *(unsigned __int8 *)(a5 + 40);
      long long v26 = *(void *)(a5 + 48);
      LODWORD(v17) = *(unsigned __int8 *)(a5 + 56);
      char v27 = *(void *)(a5 + 80);
      uint64_t v40 = *(unsigned __int8 *)(a5 + 24);
      long long v65 = v21;
      long long v44 = v21;
      Swift::String v48 = v22;
      uint64_t v66 = v22;
      uint64_t v67 = v23;
      long long v45 = v23;
      v68 = v40;
      uint64_t v69 = v24;
      long long v46 = v24;
      uint64_t v70 = v25;
      Swift::String v47 = v25;
      uint64_t v71 = v41;
      uint64_t v72 = v26;
      uint64_t v50 = v26;
      uint64_t v73 = v17;
      uint64_t v49 = v17;
      Swift::String v51 = *(_OWORD *)(a5 + 64);
      long long v74 = v51;
      uint64_t v75 = v27;
      id v43 = v27;
      v62[0] = v11;
      v62[1] = v42;
      v62[2] = v12;
      v62[3] = v59;
      uint64_t v63 = v58;
      uint64_t v28 = v52;
      long long v64 = v52;
      outlined copy of Environment<Bool>.Content(v21, v22);
      uint64_t v29 = v23;
      id v30 = v40;
      outlined copy of Environment<CGFloat?>.Content(v29, v40, v24);
      long long v31 = v25;
      uint64_t v32 = v41;
      outlined copy of Environment<HoverEffect?>.Content(v31, v41);
      outlined copy of Environment<Bool>.Content(v26, v17);
      swift_bridgeObjectRetain();
      swift_retain();
      int v33 = v28;
      swift_retain();
      swift_retain();
      uint64_t v34 = v59;
      uint64_t v35 = v58;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v59, v58);
      UIKitPasteControl.updateUIView(_:context:)(v53, (uint64_t)v62);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v34, v35);

      outlined consume of Environment<Bool>.Content(v44, v48);
      outlined consume of Environment<CGFloat?>.Content(v45, v30, v46);
      outlined consume of Environment<AnyShapeStyle?>.Content(v47, v32);
      outlined consume of Environment<Bool>.Content(v50, v49);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v36 = static RepresentableContextValues.current;
      uint64_t v37 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v61;
      *((void *)&static RepresentableContextValues.current + 1) = v55;
      *(void *)&xmmword_1EB2E8DA0 = v60;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v54;
      uint64_t v38 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v56;
      outlined consume of RepresentableContextValues?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v34, v35);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      UIKitRichTextEditor.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  long long v19;
  long long v20;
  int v21;
  uint64_t v22;
  long long v23;
  int v24;
  id v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  long long v34;
  long long v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  id v45;
  uint64_t v46[5];
  id v47;
  long long v48;
  long long v49;
  long long v50;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v48 = *a4;
  uint64_t v49 = v12;
  uint64_t v50 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v47 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v37 - 4) = (uint64_t)&v48;
    *(&v37 - 3) = a5;
    *(&v37 - 2) = (uint64_t)&v47;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v37 - 4) = a1;
      *(&v37 - 3) = a2;
      *(&v37 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v37 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v44 = &v37;
      uint64_t v19 = v48;
      uint64_t v20 = v49;
      uint64_t v21 = v50;
      long long v45 = (id)*((void *)&v50 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v37 = static RepresentableContextValues.current;
      uint64_t v23 = xmmword_1EB2E8DA0;
      uint64_t v39 = a5;
      uint64_t v40 = v16;
      uint64_t v24 = byte_1EB2E8DB0;
      static RepresentableContextValues.current = v48;
      xmmword_1EB2E8DA0 = v49;
      byte_1EB2E8DB0 = v50;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v25 = v14;
      long long v26 = v37;
      uint64_t v38 = v25;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      outlined copy of RepresentableContextValues?(v26, v22, v23, *((uint64_t *)&v23 + 1), v24);
      uint64_t v42 = v23;
      id v43 = v22;
      uint64_t v41 = v24;
      char v27 = v24;
      uint64_t v28 = v40;
      outlined consume of RepresentableContextValues?(v26, v22, v23, *((uint64_t *)&v23 + 1), v27);
      uint64_t v29 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v39, v28);
      LODWORD(v39) = v21;
      if (v21 == 1)
      {
        MEMORY[0x1F4188790](v29);
        *(&v37 - 2) = __ROR8__(v20, 32);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), 1);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), 1);
        id v30 = v45;
        swift_retain();
        swift_retain();
        static Update.ensure<A>(_:)();
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), 1);
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), 1);

        long long v31 = v46[0];
      }
      else
      {
        uint64_t v32 = v45;
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), 0);
        long long v31 = v20;
      }
      int v33 = v45;
      v46[0] = (uint64_t)v45;
      v46[1] = *((void *)&v19 + 1);
      v46[2] = v31;
      v46[3] = v23;
      v46[4] = v19;
      UIKitAdaptableTabView.updateUIViewController(_:context:)(v38, v46);
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v28);
      uint64_t v34 = static RepresentableContextValues.current;
      uint64_t v35 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v42;
      *((void *)&xmmword_1EB2E8DA0 + 1) = *((void *)&v23 + 1);
      uint64_t v36 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v41;
      outlined consume of RepresentableContextValues?(v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v39);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      PlatformTextFieldAdaptor.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      UIKitDatePickerRepresentable.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  long long v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  long long v31;
  long long v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  void v48[4];
  char v49;
  id v50;
  id v51;
  long long v52;
  long long v53;
  long long v54;

  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = a4[1];
  Swift::String v52 = *a4;
  uint64_t v53 = v12;
  uint64_t v54 = a4[2];
  uint64_t v13 = *(void **)(a3 + 80);
  if (v13)
  {
    uint64_t v14 = *(void **)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x78));
    Swift::String v51 = v14;
    MEMORY[0x1F4188790](v11);
    *(&v34 - 4) = (uint64_t)&v52;
    *(&v34 - 3) = a5;
    *(&v34 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1F4188790](v15);
      *(&v34 - 4) = a1;
      *(&v34 - 3) = a2;
      *(&v34 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v34 - 1) = v17;
      uint64_t v18 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v46 = &v34;
      uint64_t v19 = v52;
      uint64_t v41 = a5;
      uint64_t v39 = v16;
      uint64_t v20 = v53;
      uint64_t v21 = v54;
      long long v44 = (id)*((void *)&v54 + 1);
      uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v38 = static RepresentableContextValues.current;
      uint64_t v23 = *((void *)&xmmword_1EB2E8DA0 + 1);
      Swift::String v47 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v52;
      xmmword_1EB2E8DA0 = v53;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v54;
      uint64_t v36 = *((void *)&v52 + 1);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      uint64_t v35 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      uint64_t v40 = v14;
      swift_retain();
      swift_retain();
      long long v25 = v21;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v20 + 1), v21);
      long long v26 = v38;
      uint64_t v42 = v23;
      id v43 = v22;
      char v27 = v47;
      long long v45 = v24;
      outlined copy of RepresentableContextValues?(v38, v22, v47, v23, v24);
      outlined consume of RepresentableContextValues?(v26, v22, v27, v23, v24);
      uint64_t v28 = v39;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v41, v39);
      v48[0] = v37;
      v48[1] = v36;
      uint64_t v29 = v35;
      v48[2] = v35;
      v48[3] = *((void *)&v20 + 1);
      uint64_t v49 = v25;
      uint64_t v50 = v44;
      id v30 = v44;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
      UIKitCalendarViewRepresentable.updateUIView(_:context:)(v40, (uint64_t)v48);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v28);
      long long v31 = static RepresentableContextValues.current;
      uint64_t v32 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v26;
      *((void *)&static RepresentableContextValues.current + 1) = v43;
      *(void *)&xmmword_1EB2E8DA0 = v47;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      int v33 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v29, *((uint64_t *)&v20 + 1), v25);
    }
  }
}

uint64_t type metadata completion function for ScenePresentationBridge()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for RootEnvironmentModifier()
{
  return &type metadata for RootEnvironmentModifier;
}

uint64_t assignWithCopy for KeyboardShortcut(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

void type metadata completion function for FileImportOperation()
{
  _s10Foundation3URLVSgMaTm_8(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  if (v0 <= 0x3F)
  {
    _s10Foundation3URLVSgMaTm_8(319, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t key path getter for EnvironmentValues.alwaysOnInvalidationHandler : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>();
    lazy protocol witness table accessor for type PeriodicTimelineSchedule and conformance PeriodicTimelineSchedule(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>();
    lazy protocol witness table accessor for type PeriodicTimelineSchedule and conformance PeriodicTimelineSchedule(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type PeriodicTimelineSchedule and conformance PeriodicTimelineSchedule(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in AllowsToolbarItemBridgingModifier.body(content:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (__OFADD__(*(void *)result, v2 & 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)result += v2 & 1;
    *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 1 | ((v2 & 2) != 0);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __DesignTimeSelectionIdentifier(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityScrollableContextModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    outlined init with copy of Toolbar.UpdateContext?((uint64_t)(a1 + 1), (uint64_t)v10);
    if (v12[3])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v10, (uint64_t)v13);
      outlined init with copy of Toolbar.UpdateContext((uint64_t)v13, (uint64_t)v10);
      long long v6 = (void *)MEMORY[0x18C119DF0](v12);
      id v7 = v3;
      outlined destroy of Toolbar.UpdateContext((uint64_t)v10);
      memset(v10, 0, sizeof(v10));
      long long v11 = xmmword_18838A9E0;
      id v8 = v6;
      specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v10, (uint64_t)v7, v6, 2 * (v6 != 0), a2, a3);

      outlined destroy of Toolbar.BarLocation((uint64_t)v10);
      return outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Toolbar.UpdateContext?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Toolbar.UpdateContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  int v59 = a4;
  uint64_t v62 = a3;
  type metadata accessor for ToolbarStorage.Entry?(0);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v65 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  long long v64 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v70);
  int v12 = (uint64_t *)(a2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*(void *)(*v12 + 16) && (uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v15 & 1) != 0))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 24 * v14);
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    uint64_t v19 = (void *)v16[2];
    swift_bridgeObjectRetain();
    unint64_t v66 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    unint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v19 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v18);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v70);
  uint64_t v20 = *(void *)(v18 + 16);
  if (!v20)
  {
LABEL_37:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v70);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v51 = v66;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = *v12;
    uint64_t *v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v51, (uint64_t)v19, (uint64_t)&v70, isUniquelyReferenced_nonNull_native);
    uint64_t *v12 = v68;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)&v70);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v56 = v12;
  uint64_t v57 = a1;
  uint64_t v21 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56);
  uint64_t v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
  swift_bridgeObjectRetain();
  uint64_t v55 = v18;
  uint64_t v22 = (uint64_t *)(v18 + 40);
  unint64_t v23 = v66;
  uint64_t v24 = v63;
  uint64_t v25 = (uint64_t)v64;
  uint64_t v58 = v21;
  while (!*(void *)(v23 + 16))
  {
    (*v21)(v10, 1, 1, v24);
LABEL_8:
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.Entry?);
LABEL_9:
    v22 += 2;
    if (!--v20)
    {
      uint64_t v18 = v55;
      swift_bridgeObjectRelease();
      int v12 = v56;
      a1 = v57;
      goto LABEL_37;
    }
  }
  uint64_t v26 = *(v22 - 1);
  uint64_t v27 = *v22;
  swift_bridgeObjectRetain_n();
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
  if (v29)
  {
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(*(void *)(v23 + 56) + *(void *)(v65 + 72) * v28, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  (*v21)(v10, v30, 1, v24);
  swift_bridgeObjectRelease();
  if ((*v67)(v10, 1, v24) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v10, v25, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v69 = v19;
  swift_bridgeObjectRetain();
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
  uint64_t v34 = v19[2];
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (!__OFADD__(v34, v35))
  {
    char v37 = v32;
    if (v19[3] >= v36)
    {
      if (v31)
      {
        uint64_t v25 = (uint64_t)v64;
        if ((v32 & 1) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v25 = (uint64_t)v64;
        if ((v37 & 1) == 0) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, v31);
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_40;
      }
      unint64_t v33 = v38;
      uint64_t v25 = (uint64_t)v64;
      if ((v37 & 1) == 0)
      {
LABEL_25:
        uint64_t v41 = 0;
        char v42 = -1;
LABEL_26:
        uint64_t v70 = v41;
        unsigned __int8 v71 = v42;
        closure #1 in closure #1 in UIKitToolbarStrategy.makeBarItems()(v25, (uint64_t)&v70, v62, v59, v60, v61);
        unsigned __int8 v43 = v71;
        if (v71 == 255)
        {
          if (v37)
          {
            uint64_t v19 = v69;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v33, (uint64_t)v19);
LABEL_31:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v19 = v69;
          }
        }
        else
        {
          uint64_t v44 = v70;
          uint64_t v19 = v69;
          if (v37)
          {
            uint64_t v45 = v69[7] + 16 * v33;
            *(void *)uint64_t v45 = v70;
            *(unsigned char *)(v45 + 8) = v43;
            goto LABEL_31;
          }
          v69[(v33 >> 6) + 8] |= 1 << v33;
          long long v46 = (uint64_t *)(v19[6] + 16 * v33);
          uint64_t *v46 = v26;
          v46[1] = v27;
          uint64_t v47 = v19[7] + 16 * v33;
          *(void *)uint64_t v47 = v44;
          *(unsigned char *)(v47 + 8) = v43;
          uint64_t v48 = v19[2];
          BOOL v49 = __OFADD__(v48, 1);
          uint64_t v50 = v48 + 1;
          if (v49) {
            goto LABEL_39;
          }
          void v19[2] = v50;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v25, type metadata accessor for ToolbarStorage.Entry);
        unint64_t v23 = v66;
        uint64_t v24 = v63;
        uint64_t v21 = v58;
        goto LABEL_9;
      }
    }
    uint64_t v40 = v69[7] + 16 * v33;
    uint64_t v41 = *(void *)v40;
    char v42 = *(unsigned char *)(v40 + 8);
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ListPadding.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    unsigned __int8 v2 = a2[64];
    uint64_t v3 = *((void *)a2 + 7);
    unsigned __int8 v4 = a2[48];
    uint64_t v5 = *((void *)a2 + 5);
    unsigned __int8 v6 = a2[32];
    uint64_t v7 = *((void *)a2 + 3);
    unsigned __int8 v8 = a2[16];
    uint64_t v9 = *((void *)a2 + 1);
    unsigned __int8 v10 = a1[64];
    uint64_t v11 = *((void *)a1 + 7);
    unsigned __int8 v12 = a1[48];
    uint64_t v13 = *((void *)a1 + 5);
    unsigned __int8 v14 = a1[32];
    uint64_t v15 = *((void *)a1 + 3);
    unsigned __int8 v16 = a1[16];
    uint64_t v27 = *((void *)a1 + 1);
    unsigned __int8 v28 = v16;
    uint64_t v29 = v15;
    unsigned __int8 v30 = v14;
    uint64_t v31 = v13;
    unsigned __int8 v32 = v12;
    uint64_t v33 = v11;
    unsigned __int8 v34 = v10;
    uint64_t v19 = v9;
    unsigned __int8 v20 = v8;
    uint64_t v21 = v7;
    unsigned __int8 v22 = v6;
    uint64_t v23 = v5;
    unsigned __int8 v24 = v4;
    uint64_t v25 = v3;
    unsigned __int8 v26 = v2;
    char v17 = MEMORY[0x18C110940](&v27, &v19);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

double static TimelineView<>._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, double *a7@<X8>)
{
  unsigned __int8 v71 = a7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v67 = (uint64_t)&v56 - v14;
  uint64_t v94 = a3;
  uint64_t v95 = a4;
  uint64_t v96 = a5;
  unint64_t v97 = a6;
  unint64_t v73 = a6;
  uint64_t updated = type metadata accessor for TimelineView<>.UpdateFilter();
  uint64_t v68 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  unint64_t v66 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v77 = (uint64_t)&v56 - v17;
  int v18 = *a1;
  uint64_t v19 = *(void *)a2;
  int v20 = *(_DWORD *)(a2 + 8);
  uint64_t v21 = *(void *)(a2 + 16);
  unsigned int v86 = *(_DWORD *)(a2 + 24);
  unsigned int v76 = *(_DWORD *)(a2 + 28);
  int v80 = *(_DWORD *)(a2 + 32);
  int v22 = *(_DWORD *)(a2 + 36);
  uint64_t v85 = *(void *)(a2 + 40);
  uint64_t v87 = *(void *)(a2 + 48);
  int v23 = *(_DWORD *)(a2 + 56);
  int v90 = *(_DWORD *)(a2 + 60);
  int v91 = v22;
  int v24 = *(_DWORD *)(a2 + 64);
  int v25 = *(_DWORD *)(a2 + 68);
  int v83 = *(_DWORD *)(a2 + 72);
  int v84 = v24;
  int v88 = *(_DWORD *)(a2 + 76);
  int v89 = v25;
  int v82 = *(_DWORD *)(a2 + 80);
  id v60 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TimelineIdentifier()), sel_init);
  LODWORD(v94) = v18;
  uint64_t v72 = a5;
  type metadata accessor for TimelineView();
  type metadata accessor for _GraphValue();
  int v65 = _GraphValue.value.getter();
  int v70 = v18;
  LODWORD(v94) = v18;
  _GraphValue.value.getter();
  uint64_t v26 = *(void *)(*(void *)(a3 - 8) + 64);
  uint64_t v75 = a3;
  uint64_t v62 = a4;
  if (v26) {
    closure #1 in static TimelineView<>._makeView(view:inputs:)(1, a3);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v94 = v19;
  int v81 = v20;
  LODWORD(v95) = v20;
  uint64_t v78 = v21;
  uint64_t v96 = v21;
  unsigned int v27 = v86;
  unsigned int v28 = v76;
  unint64_t v97 = __PAIR64__(v76, v86);
  int v29 = v80;
  int v98 = v80;
  int v99 = v91;
  uint64_t v100 = v85;
  uint64_t v101 = v87;
  int v30 = v23;
  int v79 = v23;
  int v102 = v23;
  int v103 = v90;
  int v31 = v83;
  int v32 = v88;
  int v104 = v84;
  int v105 = v89;
  int v106 = v83;
  int v107 = v88;
  int v33 = v82;
  int v108 = v82;
  int v63 = _ViewInputs.viewPhase.getter();
  uint64_t v94 = v19;
  LODWORD(v95) = v81;
  uint64_t v34 = v78;
  uint64_t v96 = v78;
  unint64_t v97 = __PAIR64__(v28, v27);
  int v98 = v29;
  int v99 = v91;
  uint64_t v35 = v85;
  uint64_t v36 = v87;
  uint64_t v100 = v85;
  uint64_t v101 = v87;
  int v102 = v30;
  int v103 = v90;
  int v37 = v84;
  int v104 = v84;
  int v105 = v89;
  int v106 = v31;
  int v107 = v32;
  int v108 = v33;
  int v61 = _ViewInputs.time.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v38 = v36;
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v59 = v94;
  uint64_t v94 = v19;
  uint64_t v39 = v19;
  uint64_t v74 = v19;
  LODWORD(v95) = v81;
  uint64_t v96 = v34;
  LODWORD(v36) = v86;
  unint64_t v97 = __PAIR64__(v28, v86);
  int v40 = v80;
  int v98 = v80;
  int v99 = v91;
  uint64_t v100 = v35;
  uint64_t v101 = v38;
  LODWORD(v34) = v79;
  LODWORD(v38) = v90;
  int v102 = v79;
  int v103 = v90;
  int v104 = v37;
  int v105 = v89;
  int v41 = v83;
  int v106 = v83;
  int v107 = v88;
  int v108 = v82;
  swift_getKeyPath();
  id v60 = v60;
  int v58 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  uint64_t v94 = v39;
  int v42 = v81;
  LODWORD(v95) = v81;
  uint64_t v43 = v78;
  uint64_t v96 = v78;
  unint64_t v97 = __PAIR64__(v28, v36);
  LODWORD(v36) = v40;
  LODWORD(v39) = v91;
  int v98 = v40;
  int v99 = v91;
  uint64_t v100 = v85;
  uint64_t v101 = v87;
  int v102 = v34;
  int v103 = v38;
  LODWORD(v38) = v84;
  int v44 = v89;
  int v104 = v84;
  int v105 = v89;
  int v106 = v41;
  int v107 = v88;
  int v45 = v82;
  int v108 = v82;
  swift_getKeyPath();
  int v57 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  uint64_t v94 = v74;
  LODWORD(v95) = v42;
  uint64_t v96 = v43;
  unint64_t v97 = __PAIR64__(v28, v86);
  int v98 = v36;
  int v99 = v39;
  uint64_t v46 = v85;
  uint64_t v100 = v85;
  uint64_t v101 = v87;
  int v102 = v79;
  int v103 = v90;
  int v104 = v38;
  int v105 = v44;
  int v106 = v83;
  int v107 = v88;
  int v108 = v45;
  swift_getKeyPath();
  int v47 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  uint64_t v48 = v67;
  default argument 11 of TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)(v67);
  LOBYTE(v94) = 0;
  uint64_t v49 = v77;
  id v50 = v60;
  TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)(v65, OffsetAttribute2, v63, v61, v59, (uint64_t)v60, v58, v57, v77, -INFINITY, INFINITY, v47, 0, 0, v48, (char *)&v94);
  uint64_t v51 = v68;
  uint64_t v52 = updated;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v49, updated);
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v94 = v74;
  LODWORD(v95) = v81;
  uint64_t v96 = v78;
  unint64_t v97 = __PAIR64__(v76, v86);
  int v98 = v80;
  int v99 = v91;
  uint64_t v53 = v87;
  uint64_t v100 = v46;
  uint64_t v101 = v87;
  LODWORD(v49) = v79;
  int v102 = v79;
  int v103 = v90;
  int v104 = v84;
  int v105 = v89;
  int v106 = v83;
  int v107 = v88;
  int v108 = v82;
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v94 = v53;
  LODWORD(v95) = v49;
  MEMORY[0x1F4188790](v53);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v77, v52);
  uint64_t v54 = v71;
  *(void *)unsigned __int8 v71 = v92;
  double result = v93;
  v54[1] = v93;
  return result;
}

uint64_t type metadata accessor for TimelineIdentifier()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter()
{
  unint64_t result = lazy protocol witness table cache variable for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter;
  if (!lazy protocol witness table cache variable for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter);
  }
  return result;
}

uint64_t default argument 11 of TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, int a12, char a13, int a14, uint64_t a15, char *a16)
{
  char v19 = *a16;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = a6;
  *(_DWORD *)(a9 + 32) = a7;
  *(_DWORD *)(a9 + 36) = a8;
  *(_DWORD *)(a9 + 40) = a12;
  *(unsigned char *)(a9 + 44) = a13;
  *(_DWORD *)(a9 + 48) = a14;
  uint64_t updated = (int *)type metadata accessor for TimelineView<>.UpdateFilter();
  uint64_t v21 = a9 + updated[23];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a15, v22);
  *(double *)(a9 + updated[24]) = a10;
  *(double *)(a9 + updated[25]) = a11;
  *(unsigned char *)(a9 + updated[26]) = v19;
  return result;
}

uint64_t partial apply for closure #1 in TimelineView<>.UpdateFilter.updateValue()()
{
  return closure #1 in TimelineView<>.UpdateFilter.updateValue()();
}

uint64_t closure #1 in TimelineView<>.UpdateFilter.updateValue()()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t type metadata accessor for TimelineView<>.UpdateFilter()
{
  return swift_getGenericMetadata();
}

void protocol witness for Rule.value.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.PropertyChild()
{
}

ValueMetadata *type metadata accessor for WindowToolbarFullScreenVisibility()
{
  return &type metadata for WindowToolbarFullScreenVisibility;
}

uint64_t associated type witness table accessor for View.Body : View in InsettableGroupedListBody<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t partial apply for closure #1 in InsettableGroupedListBody.body.getter()
{
  return partial apply for closure #1 in InsettableGroupedListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in InsettableGroupedListBody.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in InsettableGroupedListBody.body.getter()
{
  return partial apply for closure #1 in InsettableGroupedListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in closure #2 in InsettableGroupedListBody.body.getter);
}

uint64_t partial apply for closure #2 in InsettableGroupedListBody.body.getter()
{
  return partial apply for closure #1 in InsettableGroupedListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in InsettableGroupedListBody.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in InsettableGroupedListBody<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t partial apply for closure #3 in _TaskValueModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #3 in _TaskValueModifier.InnerModifier.body(content:));
}

uint64_t type metadata accessor for UIItemHostingView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in SidebarListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in SidebarListBody.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in SidebarListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in closure #2 in SidebarListBody.body.getter);
}

uint64_t partial apply for closure #2 in SidebarListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in SidebarListBody.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in SidebarListBody<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t getEnumTagSinglePayload for StackPlacement(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(result - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= v10) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = v7;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v12 | 7;
  uint64_t v15 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(result - 8) + 64) + 7;
  if (v13 >= a2)
  {
LABEL_27:
    if (v7 == v13)
    {
      int v23 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
      return v23(a1, v7, v5);
    }
    else
    {
      uint64_t v24 = ((unint64_t)a1 + v11 + v14 + 1) & ~v14;
      if (v10 == v13)
      {
        int v25 = *(uint64_t (**)(unint64_t))(v9 + 48);
        return v25((v12 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12);
      }
      else
      {
        unint64_t v26 = *(void *)((((((((v15 + v24) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 27) & 0xFFFFFFFFFFFFFFF8)
                         + 47) & 0xFFFFFFFFFFFFFFF8);
        if (v26 >= 0xFFFFFFFF) {
          LODWORD(v26) = -1;
        }
        return (v26 + 1);
      }
    }
  }
  else
  {
    unint64_t v16 = ((((((((((((((((((((v15 + ((v11 + v14 + 1) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 43) & 0xFFFFFFFFFFFFFFF8)
                      + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 102) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v17 = v16 & 0xFFFFFFF8;
    if ((v16 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v13 + 1;
    }
    if (v18 >= 0x10000) {
      LODWORD(v19) = 4;
    }
    else {
      LODWORD(v19) = 2;
    }
    if (v18 < 0x100) {
      LODWORD(v19) = 1;
    }
    if (v18 >= 2) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v16);
        if (!v20) {
          goto LABEL_27;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v16);
        if (!v20) {
          goto LABEL_27;
        }
        goto LABEL_24;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v20 = *(int *)((char *)a1 + v16);
        if (!v20) {
          goto LABEL_27;
        }
LABEL_24:
        int v21 = v20 - 1;
        if (v17)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        uint64_t result = v13 + (v22 | v21) + 1;
        break;
      default:
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void), uint64_t a6, unint64_t *a7)
{
  return specialized static ViewAlias._viewListCount(inputs:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)(a1 + 24), a4, a5, a6, a7);
}

uint64_t specialized static ViewAlias._viewListCount(inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, void (*a6)(void), uint64_t a7, unint64_t *a8)
{
  *(void *)&long long v24 = a1;
  *((void *)&v24 + 1) = a2;
  int v25 = a3;
  uint64_t v26 = a4;
  type metadata accessor for SourceInput<ListStyleContent>(0, a5, a6);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(a8, a5, a6);
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (!(void)v20)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v20 + 48);
  uint64_t v12 = *(void *)(v20 + 16);
  uint64_t v13 = *(void *)(v20 + 24);
  uint64_t v14 = *(void *)(v20 + 32);
  uint64_t v15 = *(unsigned int *)(v20 + 40);
  unsigned __int8 v16 = *(unsigned char *)(v20 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v11;
  PropertyList.subscript.setter();
  if (!v12)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  _ViewListCountInputs.resetCurrentStyleableView()();
  long long v20 = v24;
  int v21 = v25;
  uint64_t v22 = v26;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, long long *, uint64_t, uint64_t))(v13 + 24);
  LOBYTE(v23) = v16;
  uint64_t v18 = v17(v12, v13, v14, v15 | ((unint64_t)v16 << 32), &v20, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  return v18;
}

uint64_t protocol witness for static AnySourceFormula.viewListCount(source:inputs:) in conformance SourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static SourceFormula.viewListCount(source:inputs:)(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32), a5, *(void *)(a6 + 16), *(void *)(a6 + 24));
}

uint64_t static SourceFormula.viewListCount(source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a5 + 8);
  int v8 = *(_DWORD *)(a5 + 16);
  uint64_t v9 = *(void *)(a5 + 24);
  v11[0] = *(void *)a5;
  v11[1] = v7;
  int v12 = v8;
  uint64_t v13 = v9;
  if ((a4 & 0x100000000) != 0) {
    return (*(uint64_t (**)(void *))(a7 + 40))(v11);
  }
  else {
    return static Optional<A>._viewListCount(inputs:)();
  }
}

uint64_t type metadata completion function for PopoverPresentationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *assignWithCopy for _ListStyleConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unsigned __int8 v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = ((v8 + 16) & ~v8) + v10;
  int v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v16 = ((unint64_t)v12 + v8 + 8) & v9;
    size_t v21 = ((v8 + 16) & ~v8) + v10;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    int v20 = v17(v16, v7, v5);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v3 = a2;
    int v15 = v17(((unint64_t)v13 + v8 + 8) & ~v8, v7, v5);
    uint64_t v9 = ~v8;
    size_t v11 = v21;
    unsigned __int8 v4 = a1;
    if (!v20)
    {
LABEL_5:
      if (!v15)
      {
        void *v4 = *v3;
        swift_retain();
        swift_release();
        void *v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v12 + v8 + 8) & v9, ((unint64_t)v13 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v12 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    void *v4 = *v3;
    void *v12 = *v13;
    uint64_t v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v18(((unint64_t)v12 + v8 + 8) & v9, ((unint64_t)v13 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v11);
  return v4;
}

uint64_t destroy for _NavigationStackStyleConfiguration.Item(uint64_t a1)
{
  swift_weakDestroy();
  swift_release();
  uint64_t result = swift_release();
  if (*(unsigned char *)(a1 + 96) == 1)
  {
    swift_release();
    uint64_t result = *(void *)(a1 + 72);
    if (result != 1)
    {
      return swift_release();
    }
  }
  else if (!*(unsigned char *)(a1 + 96))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnyNavigationSplitVisibility(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x1FFD) {
    goto LABEL_17;
  }
  if (a2 + 57347 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 57347 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 57347;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 57347;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 57347;
    }
  }
LABEL_17:
  unsigned int v6 = (*a1 & 0xFC | (*a1 >> 14) | (*a1 >> 1) & 0x1F00) ^ 0x1FFF;
  if (v6 >> 2 >= 0x7FF) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

uint64_t initializeWithCopy for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 80);
  swift_retain();
  swift_retain();
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v5;
    *(void *)(a1 + 88) = v6;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8))(a1 + 56, a2 + 56, v5);
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  return a1;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2, void (*a3)(void))
{
  return swift_bridgeObjectRelease();
}

uint64_t PlatformItemListImageRepresentable.PlatformRepresentation.value.getter()
{
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = (char *)AGGraphGetValue();
  long long v5 = *((_OWORD *)Value + 3);
  long long v7 = *(_OWORD *)Value;
  long long v6 = *((_OWORD *)Value + 1);
  v27[2] = *((_OWORD *)Value + 2);
  v27[3] = v5;
  v27[0] = v7;
  v27[1] = v6;
  long long v8 = *((_OWORD *)Value + 7);
  long long v10 = *((_OWORD *)Value + 4);
  long long v9 = *((_OWORD *)Value + 5);
  v27[6] = *((_OWORD *)Value + 6);
  v27[7] = v8;
  v27[4] = v10;
  v27[5] = v9;
  long long v12 = *((_OWORD *)Value + 9);
  long long v11 = *((_OWORD *)Value + 10);
  long long v13 = *((_OWORD *)Value + 8);
  *(_DWORD *)&v28[15] = *(_DWORD *)(Value + 175);
  v27[9] = v12;
  *(_OWORD *)unsigned int v28 = v11;
  v27[8] = v13;
  memmove(v29, Value, 0xB3uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v29, v14, v15, v16);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v29, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v24[0] = xmmword_18834BB90;
  memset(&v24[1], 0, 48);
  char v25 = 0;
  __n128 v22 = 0uLL;
  uint64_t v23 = 0;
  uint64_t v17 = AGGraphGetValue();
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v26, v24, &v22, *(void *)(v17 + 184), *(void *)(v17 + 192), (uint64_t)v3);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v18 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v3, v19 + v18);
  outlined retain of Image.Resolved((uint64_t)v27);
  swift_retain();
  swift_retain();
  return v19;
}

void storeEnumTagSinglePayload for ScrollView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 120;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF88) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_43:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
            if ((a2 & 0x80000000) != 0)
            {
              *(_OWORD *)(v18 + 104) = 0u;
              *(_OWORD *)(v18 + 88) = 0u;
              *(_OWORD *)(v18 + 72) = 0u;
              *(_OWORD *)(v18 + 56) = 0u;
              *(_OWORD *)(v18 + 40) = 0u;
              *(_OWORD *)(v18 + 24) = 0u;
              *(_OWORD *)(v18 + 8) = 0u;
              *(void *)unint64_t v18 = a2 ^ 0x80000000;
            }
            else
            {
              *(void *)(v18 + 64) = a2 - 1;
              *(void *)(v18 + 72) = 1;
            }
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF88) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF88)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 120);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

void closure #2 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    int v3 = (void *)v2;
    SwiftUISearchController.flushPendingIsActive()();
  }
}

void SwiftUISearchController.flushPendingIsActive()()
{
  uint64_t v1 = v0;
  unsigned int v2 = objc_msgSend(v0, sel_isActive);
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive;
  int v4 = v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive];
  BOOL v5 = v4 & 1;
  if (v4 != 2 && v2 != v5)
  {
    objc_msgSend(v0, sel_setActive_, v5);
    id v7 = *(id *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator];
    unsigned int v8 = (unsigned __int8 *)SwiftUISearchController._searchBar.getter();
    uint64_t v9 = v8;
    int v10 = v8[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive];
    v8[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = v5;
    if (v5 == v10) {
      goto LABEL_13;
    }
    unsigned int v11 = *(void **)&v8[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
    if (!v11) {
      goto LABEL_13;
    }
    if (v5)
    {
      double v12 = *MEMORY[0x1E4FB2848];
      double v13 = *(double *)(MEMORY[0x1E4FB2848] + 8);
      double v14 = *(double *)(MEMORY[0x1E4FB2848] + 24);
      if (v8[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] != 2)
      {
        objc_msgSend(v11, sel_intrinsicContentSize);
        double v16 = v15;
        unsigned int v22 = 0;
        double v17 = 1.0;
        uint64_t v18 = 4;
LABEL_12:
        objc_msgSend(v9, sel__setOverrideContentInsets_forRectEdges_, v18, v12, v13, v16, v14);
        objc_msgSend(v9, sel_sizeToFit);
        objc_msgSend(v9, sel_layoutIfNeeded);
        id v20 = objc_msgSend(v9, sel_superview);
        objc_msgSend(v20, sel_sizeToFit);

        id v21 = objc_msgSend(v9, sel_superview);
        objc_msgSend(v21, sel_layoutIfNeeded);

        objc_msgSend(v11, sel_setAlpha_, v17);
        objc_msgSend(v11, sel_setHidden_, v22);

LABEL_13:
        UIKitSearchBar.enqueueFirstResponderUpdate(_:)(v5);

        goto LABEL_14;
      }
    }
    else
    {
      double v12 = *MEMORY[0x1E4FB2848];
      double v13 = *(double *)(MEMORY[0x1E4FB2848] + 8);
      double v14 = *(double *)(MEMORY[0x1E4FB2848] + 24);
    }
    double v16 = *(double *)(MEMORY[0x1E4FB2848] + 16);
    id v19 = v11;
    uint64_t v18 = 0;
    double v17 = 0.0;
    unsigned int v22 = 1;
    goto LABEL_12;
  }
LABEL_14:
  v1[v3] = 2;
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  *(unsigned char *)(a4 + 49) = static _EventDirections.all;
  *(double *)a4 = a5;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v11, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return outlined init with take of CoordinateSpace((uint64_t)v11, a4 + 8);
}

uint64_t outlined init with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *type metadata accessor for ResolvedHelpStyle()
{
  return &unk_1ED4248F0;
}

uint64_t specialized static ResetTabViewEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata completion function for PlatformItemList.Item()
{
  type metadata accessor for CommandOperation?(319, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t partial apply for closure #1 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)@<X0>(char **a1@<X8>)
{
  return closure #1 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t closure #1 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char **a4@<X8>)
{
  outlined init with copy of SheetPreference(a2, (uint64_t)v10);
  if (a1) {
    id v7 = a1;
  }
  else {
    id v7 = makeHostingController #1 <A, B>() in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)((uint64_t)v10, a3);
  }
  unsigned int v8 = v7;
  uint64_t result = outlined destroy of SheetPreference((uint64_t)v10);
  *a4 = v8;
  return result;
}

uint64_t outlined init with copy of SheetPreference(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SheetPreference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  BOOL v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  swift_retain();
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *v5;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v7 = (_OWORD *)(a1 + 32);
  unsigned int v8 = (_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    _OWORD *v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
  }
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *makeHostingController #1 <A, B>() in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 73);
  type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  uint64_t v6 = objc_allocWithZone(v5);
  swift_retain();
  id v7 = a2;
  uint64_t v8 = type metadata accessor for SheetBridge();
  uint64_t v9 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(v3, (uint64_t)v7, v4, v6, v8, (uint64_t)&protocol witness table for SheetBridge<A, B>);
  swift_release();

  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  return v9;
}

char *specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1, uint64_t a2, char a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  swift_getObjectType();
  *(void *)&a4[direct field offset for PresentationHostingController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  a4[direct field offset for PresentationHostingController.bridgedPresentationWantsTransparentBackground] = 0;
  a4[direct field offset for PresentationHostingController.presentingBridgeKind] = 2;
  *(void *)&a4[direct field offset for PresentationHostingController.lastColumnCount] = 0;
  a4[direct field offset for PresentationHostingController.lastInteractiveDismissDisabled] = 2;
  a4[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
  a4[direct field offset for PresentationHostingController.wasPreempted] = 0;
  uint64_t v9 = &a4[direct field offset for PresentationHostingController.lastPresentationOptions];
  _OWORD *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  uint64_t v9[4] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[7] = 0u;
  *(_OWORD *)((char *)v9 + 121) = 0u;
  uint64_t v10 = &a4[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
  _OWORD *v10 = 0u;
  v10[1] = 0u;
  void v10[2] = 0u;
  void v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  *(_OWORD *)((char *)v10 + 121) = 0u;
  long long v11 = &a4[direct field offset for PresentationHostingController.observedSize];
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = 0;
  v11[16] = 1;
  a4[direct field offset for PresentationHostingController.presentationWantsTransparentBackground] = a3 ^ 1;
  uint64_t v12 = one-time initialization token for clientNeedsOscillationSuppression;
  double v13 = a4;
  if (v12 != -1) {
    swift_once();
  }
  if (clientNeedsOscillationSuppression)
  {
    type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, &lazy cache variable for type metadata for OscillationDetector<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(void, uint64_t))type metadata accessor for OscillationDetector);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 56) = MEMORY[0x1E4FBC860];
    *(void *)(v14 + 64) = 0x8000000000000000;
    *(unsigned char *)(v14 + 72) = 0;
    type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
    memset(v27, 0, 137);
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = 3;
    outlined init with copy of PresentationOptionsPreference?((uint64_t)v27, v15 + 32);
    outlined init with copy of PresentationOptionsPreference?((uint64_t)v27, v15 + 176);
    outlined init with take of PresentationOptionsPreference?((uint64_t)v27, v15 + 320);
    *(void *)(v14 + 16) = v15;
    *(void *)(v14 + 32) = closure #1 in PresentationHostingController.init(rootView:delegate:drawsBackground:);
    *(void *)(v14 + 40) = 0;
    *(void *)(v14 + 48) = 10;
    *(void *)&v13[direct field offset for PresentationHostingController.oscillationDetector] = v14;
  }
  else
  {
    *(void *)&v13[direct field offset for PresentationHostingController.oscillationDetector] = 0;
  }

  swift_retain();
  double v16 = (char *)specialized UIHostingController.init(rootView:)();
  swift_release();
  *(void *)&v16[direct field offset for PresentationHostingController.delegate + 8] = a6;
  swift_unknownObjectWeakAssign();
  double v17 = v16;
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(0);
  type metadata accessor for _ContiguousArrayStorage<UITraitDefinition.Type>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>, (uint64_t (*)(uint64_t))type metadata accessor for UITraitDefinition.Type, MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_188357320;
  uint64_t v19 = type metadata accessor for UITraitHorizontalSizeClass();
  uint64_t v20 = MEMORY[0x1E4FB0FA8];
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v20;
  uint64_t v21 = type metadata accessor for UITraitVerticalSizeClass();
  uint64_t v22 = MEMORY[0x1E4FB0F10];
  *(void *)(v18 + 48) = v21;
  *(void *)(v18 + 56) = v22;
  uint64_t v23 = type metadata accessor for UITraitPresentationSemanticContext();
  uint64_t v24 = MEMORY[0x1E4FB10B8];
  *(void *)(v18 + 64) = v23;
  *(void *)(v18 + 72) = v24;
  char v25 = v17;
  UIViewController.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  *(void *)&v27[0] = 0;
  lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();

  return v25;
}

uint64_t outlined init with copy of PresentationOptionsPreference?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for String?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PresentationOptionsPreference?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id specialized UIHostingController.init(rootView:)()
{
  *(void *)&v0[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v0[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v1 = (uint64_t)&v0[direct field offset for UIHostingController.overrides];
  long long v22 = xmmword_18834C6B0;
  uint64_t v23 = 0;
  char v24 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v25 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v22, v1);
  *(void *)&v0[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v0[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v0[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v0[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v2 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v0;
  uint64_t v5 = specialized UIKitDialogBridge.init()(v3);
  swift_release();
  *(void *)&v0[v2] = v5;
  *(void *)&v4[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v6 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = -1;
  *(void *)&v4[v6] = v7;
  *(void *)&v4[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v4[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v4[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *(void *)&v4[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v10 = &v4[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v10 = 512;
  void v10[2] = 3;
  *(void *)&v4[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v9;
  v4[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v4[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v11 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v4[v11] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v4[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.sizingOptions] = 0;
  uint64_t v12 = MEMORY[0x1E4F41618];
  uint64_t v13 = MEMORY[0x1E4F41610];
  type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  uint64_t v16 = swift_retain();
  uint64_t v17 = specialized _UIHostingView.init(rootView:)(v16);
  swift_release();
  *(void *)&v4[direct field offset for UIHostingController.host] = v17;

  type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, v12, v13, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v21.receiver = v4;
  v21.super_class = v18;
  id v19 = objc_msgSendSuper2(&v21, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(specialized _UIHostingView.updateBackgroundColor(), (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<AnyView>, v12, v13, &lazy cache variable for type metadata for SharingActivityPickerBridge<AnyView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<AnyView>);

  return v19;
}

{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  long long v20;
  uint64_t v21;
  char v22;
  char v23;

  *(void *)&v0[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v0[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v1 = (uint64_t)&v0[direct field offset for UIHostingController.overrides];
  uint64_t v20 = xmmword_18834C6B0;
  objc_super v21 = 0;
  long long v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v1);
  *(void *)&v0[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v0[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v0[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v0[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v2 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v0;
  uint64_t v5 = specialized UIKitDialogBridge.init()(v3);
  swift_release();
  *(void *)&v0[v2] = v5;
  *(void *)&v4[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v6 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = -1;
  *(void *)&v4[v6] = v7;
  *(void *)&v4[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v4[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v4[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *(void *)&v4[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v10 = &v4[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v10 = 512;
  void v10[2] = 3;
  *(void *)&v4[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v9;
  v4[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v4[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v11 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v4[v11] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v4[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.sizingOptions] = 0;
  uint64_t v12 = MEMORY[0x1E4F417F8];
  uint64_t v13 = MEMORY[0x1E4F417F0];
  type metadata accessor for UIHostingController<AnyView>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  *(void *)&v4[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)();

  type metadata accessor for UIHostingController<AnyView>(0, &lazy cache variable for type metadata for UIHostingController<EmptyView>, v12, v13, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v4;
  v19.super_class = v16;
  uint64_t v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(specialized _UIHostingView.updateBackgroundColor(), (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<EmptyView>, v12, v13, &lazy cache variable for type metadata for SharingActivityPickerBridge<EmptyView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<EmptyView>);

  return v17;
}

{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  long long v20;
  uint64_t v21;
  char v22;
  char v23;

  *(void *)&v0[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v0[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v1 = (uint64_t)&v0[direct field offset for UIHostingController.overrides];
  uint64_t v20 = xmmword_18834C6B0;
  objc_super v21 = 0;
  long long v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v1);
  *(void *)&v0[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v0[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v0[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v0[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v2 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v0;
  uint64_t v5 = specialized UIKitDialogBridge.init()(v3);
  swift_release();
  *(void *)&v0[v2] = v5;
  *(void *)&v4[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v6 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = -1;
  *(void *)&v4[v6] = v7;
  *(void *)&v4[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v4[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v4[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *(void *)&v4[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v10 = &v4[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v10 = 512;
  void v10[2] = 3;
  *(void *)&v4[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v9;
  v4[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v4[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v11 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v4[v11] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v4[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v4[direct field offset for UIHostingController.sizingOptions] = 0;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
  uint64_t v13 = objc_allocWithZone(v12);
  Class v14 = swift_retain();
  id v15 = specialized _UIHostingView.init(rootView:)(v14);
  swift_release();
  *(void *)&v4[direct field offset for UIHostingController.host] = v15;

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v4;
  v19.super_class = v16;
  uint64_t v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  return v17;
}

uint64_t partial apply for closure #1 in PresentationHostingController._remoteSheet.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PresentationHostingController._remoteSheet.getter(a1);
}

uint64_t closure #1 in PresentationHostingController._remoteSheet.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetValue();
  if (*(unsigned __int8 *)(result + 8) == 255)
  {
    uint64_t v3 = 0;
  }
  else
  {
    outlined init with copy of RemoteSheetContainerVCKey.Storage(result, (uint64_t)v4);
    uint64_t v3 = RemoteSheetContainerVCKey.Storage.remoteSheet.getter();
    uint64_t result = outlined destroy of RemoteSheetContainerVCKey.Storage((uint64_t)v4);
  }
  *a1 = v3;
  return result;
}

void type metadata accessor for RemoteSheetContainerVCKey.Storage?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for OscillationDetector()
{
  return __swift_instantiateGenericMetadata();
}

id @objc PresentationHostingController._remoteSheet.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)PresentationHostingController._remoteSheet.getter();

  return v2;
}

uint64_t PresentationHostingController._remoteSheet.getter()
{
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature();
  swift_retain();
  uint64_t v0 = ViewGraph.subscript.getter();
  swift_release();
  if (!v0) {
    return 0;
  }
  uint64_t Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    return 0;
  }
  MEMORY[0x1F4188790](Attribute);
  type metadata accessor for _ContiguousArrayStorage<UITraitDefinition.Type>(0, &lazy cache variable for type metadata for _UIRemoteSheet?, (uint64_t (*)(uint64_t))type metadata accessor for _UIRemoteSheet, MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  return v3;
}

void type metadata accessor for _ContiguousArrayStorage<UITraitDefinition.Type>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature;
  if (!lazy protocol witness table cache variable for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature);
  }
  return result;
}

unint64_t type metadata accessor for _UIRemoteSheet()
{
  unint64_t result = lazy cache variable for type metadata for _UIRemoteSheet;
  if (!lazy cache variable for type metadata for _UIRemoteSheet)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteSheet);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollIndicatorFlashOnAppearModifier@<X0>(uint64_t *a1@<X8>)
{
  char v3 = *v1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v3;
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:);
  a1[2] = result;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ToggleStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t type metadata completion function for BorderlessButtonLabelShapeStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ScrollActionDispatcher()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in _TaskValueModifier<A>.InnerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for Shape.path(in:) in conformance ResolvedBorderShape@<D0>(uint64_t a1@<X8>)
{
  ResolvedBorderShape.path(in:)((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

__n128 ResolvedBorderShape.path(in:)@<Q0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  int v5 = v1[16];
  CGRect.inset(by:)();
  if (v5 == 1)
  {
    switch(v4)
    {
      case 1:
        goto LABEL_5;
      case 2:
        goto LABEL_4;
      case 3:
        Circle.path(in:)();
        break;
      default:
        if ((v3 & 0xFE) == 2) {
          goto LABEL_4;
        }
LABEL_5:
        Capsule.path(in:)();
        break;
    }
  }
  else
  {
LABEL_4:
    RoundedRectangle.path(in:)();
  }
  __n128 result = v8;
  *(_OWORD *)a1 = v7;
  *(__n128 *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

uint64_t type metadata completion function for TaskGesturePhase.Handler()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream.Continuation();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t View.contentMargins(_:_:for:)(char a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  char v9 = *a4;
  OptionalEdgeInsets.init(_:edges:)();
  uint64_t v10 = v19;
  char v11 = v20;
  uint64_t v12 = v21;
  char v13 = v22;
  uint64_t v14 = v23;
  char v15 = v24;
  uint64_t v16 = v25;
  char v17 = v26;
  LOBYTE(v19) = a1;
  uint64_t v20 = v10;
  LOBYTE(v21) = v11;
  uint64_t v22 = v12;
  LOBYTE(v23) = v13;
  uint64_t v24 = v14;
  LOBYTE(v25) = v15;
  uint64_t v26 = v16;
  char v27 = v17;
  char v28 = v9;
  return MEMORY[0x18C113660](&v19, a5, &type metadata for ContentMarginModifier, a6);
}

uint64_t interpolationsEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return a2 == 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  char v3 = (float *)(a1 + 44);
  uint64_t v4 = v2 - 1;
  int v5 = (float *)(a2 + 44);
LABEL_7:
  if (*(v3 - 3) == *(v5 - 3) && *(v3 - 2) == *(v5 - 2) && *(v3 - 1) == *(v5 - 1))
  {
    BOOL v6 = *v3 == *v5;
    uint64_t result = v6;
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    while (1)
    {
      BOOL v6 = 0;
      uint64_t result = 0;
      if (!v4) {
        break;
      }
LABEL_6:
      --v4;
      v3 += 4;
      v5 += 4;
      if (v6) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for PopoverItemStateProvider()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for DragDropDefaultPreviewResponder()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition;
  if (!lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition;
  if (!lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition);
  }
  return result;
}

void type metadata completion function for FileExportOperation()
{
  type metadata accessor for FileExportOperation.Mode(319);
  if (v0 <= 0x3F)
  {
    _s10Foundation3URLVSgMaTm_3(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F)
    {
      _s10Foundation3URLVSgMaTm_3(319, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(255, &lazy cache variable for type metadata for Set<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], MEMORY[0x1E4FBB510]);
    uint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata completion function for CollectionViewListDragAndDropController()
{
  return swift_initClassMetadata2();
}

uint64_t assignWithCopy for PositionedNavigationDestinationProcessor(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) == 1)
  {
    if (v4 == 1)
    {
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_retain();
      swift_retain();
    }
  }
  else if (v4 == 1)
  {
    outlined destroy of NavigationAuthority(a1);
    uint64_t v6 = *((void *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(void *)(a1 + 16) = v6;
  }
  else
  {
    swift_weakCopyAssign();
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    swift_retain();
    swift_release();
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_retain();
    swift_release();
  }
  return a1;
}

uint64_t implicit closure #1 in _ViewOutputs.transformPlatformItemList(inputs:transform:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for implicit closure #1 in static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)();
}

uint64_t implicit closure #1 in static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform;
  if (!lazy protocol witness table cache variable for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static ButtonActionModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static ButtonActionModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t implicit closure #2 in static ButtonActionModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1;
  int v7 = a2;
  uint64_t v9 = type metadata accessor for ButtonActionModifier.PlatformSelectionBehavior();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v6, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5;
}

uint64_t type metadata accessor for ButtonActionModifier.PlatformSelectionBehavior()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in _ViewOutputs.writePlatformItemList(inputs:value:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  return implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule);
}

uint64_t implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule;
  if (!lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule;
  if (!lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListImageRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  return implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation);
}

uint64_t implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation);
  }
  return result;
}

uint64_t type metadata completion function for PopoverPresentationModifier.PopoverModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for StackPlacement()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for MinorProperties();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t type metadata completion function for ListUpdate()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    uint64_t v8 = v2;
    uint64_t v9 = v2;
    swift_getTupleTypeLayout2();
    uint64_t v10 = &v7;
    uint64_t result = swift_checkMetadataState();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v11 = &v6;
      swift_getTupleTypeLayout2();
      uint64_t v12 = &v5;
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      char v13 = &v4;
      uint64_t v14 = v2;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in View.contextMenu<A, B>(menuItems:preview:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.contextMenu<A, B>(menuItems:preview:)(*(void (**)(double))(v1 + 64), *(void *)(v1 + 24), *(void *)(v1 + 48), a1);
}

uint64_t closure #1 in View.contextMenu<A, B>(menuItems:preview:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  char v17 = (char *)v21 - v16;
  a1(v15);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  unint64_t v18 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  _OWORD v21[2] = a3;
  v21[3] = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t type metadata completion function for Observer2()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneID(uint64_t a1, uint64_t a2)
{
  return specialized static SceneID.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in LeadingTrailingLabeledContentStyle_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in LeadingTrailingLabeledContentStyle_Phone._Body()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance DisableCollectionViewGroupedListsFeature()
{
  return 0xD000000000000039;
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in AutomaticNavigationSplitViewStyle_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in UpdateViewDestinationRequestProcessor<A, B>.PreferenceDebouncer()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnPlatformContainerSelectionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityCustomPropertyModifier<A, B, C>.Attachment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityCustomPropertyModifier<A, B, C>.PropertyChild()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in AutomaticNavigationSplitViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for _AutomaticNavigationStackStyle()
{
  return &type metadata for _AutomaticNavigationStackStyle;
}

uint64_t associated type witness table accessor for _NavigationStackStyle.Body : View in _AutomaticNavigationStackStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultListNavigationLinkStyle.ListLink()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in InsettableGroupedListBodyRule<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OutsetByRowInsetsIfNecessary()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for MultiViewModifier in NavigationStackStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in NavigationStackStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in CollectionViewListDataSource<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderedProminentButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in AutomaticLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DisclosureIndicator_PhoneTV()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CollectionViewCellModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for PropertyKey in TabViewStyleOverrideInput<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackStyledCore<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackStyledCore<A>.NavigationStateStructureSeed()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in FocusStateBindingModifier<A>.ListItemFilter()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in FocusStateBindingModifier<A>.ListTransform()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in BorderedButtonStyle_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedToggleStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in ResolvedToggleStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for MultiViewModifier in LabelGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in LabelGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in AccessibilityLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in TitleAndIconLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedLabeledContent._Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in DefaultListToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in AlertTransformModifier<A>.Transform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.ExtractedRoot()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.AppliedBody()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in _DisclosureIndicator()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListCoreDataSource.SelectionValue : Hashable in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs : BidirectionalCollection in ShadowListDataSource<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LazyPageTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ShadowRowCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackCore<A>.NavigationStackRepresentableChild()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LazyPageTabModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DividerStyle.Body : View in DefaultDividerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>)
  {
    type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ResolvedShadowView<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in DefaultToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in SwitchToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedHelpStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DividerStyle.Body : View in PlainDividerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in DefaultLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for Equatable in AnyNavigationPath.ToHomogeneous<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in AnyNavigationPath.ToHomogeneous<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for HelpStyle.Body : View in TooltipHelpStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in SidebarListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in DefaultListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for HelpStyle.Body : View in DefaultHelpStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in ListLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ListLabelStyle.Implementation()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for BidirectionalCollection in FetchedResults<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in FetchedResults<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _TabViewValue<A, B>.Init2()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _ListValue<A, B>.Init1()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityLabeledContentContentModifier<A>.LabelChild()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityLabeledContentContentModifier<A>.Attachment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in UpdateViewDestinationViewModifier<A>.RequestWriter()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 40);
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  size_t v15 = ((v9 + 16) & ~v9) + *(void *)(v8 + 64);
  uint64_t v16 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 0x80000000) != 0)
  {
    int v31 = v12;
    uint64_t v30 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(v7 - 8) + 64);
    uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v29 = v23(((unint64_t)v16 + v9 + 8) & ~v9, v13, v7);
    char v17 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = ~v9;
    int v19 = v23(((unint64_t)v17 + v9 + 8) & ~v9, v13, v7);
    size_t v15 = v30;
    uint64_t v12 = v31;
    if (!v29)
    {
LABEL_5:
      if (!v19)
      {
        void *v11 = *v12;
        swift_retain();
        swift_release();
        *uint64_t v16 = *v17;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v16 + v9 + 8) & v14, ((unint64_t)v17 + v9 + 8) & v14, v7);
        return a1;
      }
      size_t v20 = v15;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v14, v7);
      uint64_t v21 = v11;
      uint64_t v22 = v12;
      size_t v15 = v20;
      goto LABEL_10;
    }
  }
  else
  {
    char v17 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    int v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v19)
  {
    void *v11 = *v12;
    *uint64_t v16 = *v17;
    uint64_t v24 = v14;
    uint64_t v25 = ((unint64_t)v16 + v9 + 8) & v14;
    uint64_t v26 = ((unint64_t)v17 + v9 + 8) & v24;
    char v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v27(v25, v26, v7);
    return a1;
  }
  uint64_t v21 = v11;
  uint64_t v22 = v12;
LABEL_10:
  memcpy(v21, v22, v15);
  return a1;
}

void @objc NavigationStackCoordinator.navigationController(_:didShow:animated:)(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  specialized NavigationStackCoordinator.navigationController(_:didShow:animated:)(v8, a5);
}

uint64_t specialized NavigationStackCoordinator.navigationController(_:didShow:animated:)(id a1, char a2)
{
  unint64_t v3 = v2;
  char v5 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x90)) = 0;
  if (a2 & 1) != 0 && (static SemanticFeature.isEnabled.getter()) {
    goto LABEL_13;
  }
  if (*((unsigned char *)v2 + *(void *)((*v5 & *v2) + 0x80))) {
    goto LABEL_13;
  }
  id v6 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v8)
  {
LABEL_13:
    return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v2, a1);
  }
  else
  {
    id v9 = objc_msgSend(a1, sel_viewControllers);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    NavigationStackCoordinator.previousContent.getter(__src);
    memcpy(__dst, __src, sizeof(__dst));
    NavigationState.StackContent.count.getter();
    uint64_t v13 = v12;
    outlined release of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    if (v11 >= v13) {
      return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v3, a1);
    }
    *((unsigned char *)v3 + *(void *)((*v5 & *v3) + 0x78)) = 0;
    uint64_t result = outlined init with copy of NavigationAuthority((uint64_t)v3 + *(void *)((*v5 & *v3) + 0x68), (uint64_t)v27);
    uint64_t v15 = v13 - v11;
    if (!__OFSUB__(v13, v11))
    {
      NavigationStackCoordinator.previousContent.getter(__dst);
      memcpy(v26, __dst, sizeof(v26));
      uint64_t v16 = NavigationState.StackContent.topKey.getter();
      unsigned __int8 v18 = v17;
      uint64_t v23 = v19;
      outlined release of NavigationState.StackContent((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      static Transaction.current.getter();
      static Transaction.current.getter();
      char v20 = Transaction.disablesAnimations.getter();
      swift_release();
      if (v20) {
        char v21 = 1;
      }
      else {
        char v21 = Transaction.disablesAnimations.getter();
      }
      static Transaction.current.getter();
      uint64_t v22 = Transaction.animation.getter();
      swift_release();
      if (!v22) {
        uint64_t v22 = Transaction.animation.getter();
      }
      swift_release();
      memset(&v26[8], 0, 56);
      *(void *)uint64_t v26 = v15;
      v26[64] = 9;
      *(void *)&v26[72] = v16;
      *(void *)&v26[80] = v18;
      *(void *)&v26[88] = v23;
      memset(&v26[96], 0, 24);
      v26[120] = v21 & 1;
      *(void *)&v26[128] = v22;
      v24[6] = 0uLL;
      v24[7] = *(_OWORD *)&v26[112];
      uint64_t v25 = v22;
      v24[2] = *(_OWORD *)&v26[32];
      v24[3] = 0uLL;
      long long v24[4] = *(_OWORD *)&v26[64];
      v24[5] = *(_OWORD *)&v26[80];
      v24[0] = *(_OWORD *)v26;
      v24[1] = *(_OWORD *)&v26[16];
      NavigationAuthority.enqueueRequest(_:)(v24);
      outlined release of NavigationRequest((uint64_t)v26);
      outlined destroy of NavigationAuthority((uint64_t)v27);
      return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v3, a1);
    }
    __break(1u);
  }
  return result;
}

uint64_t $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)(uint64_t a1, void *a2)
{
  NavigationStackCoordinator.environment.getter();
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, (uint64_t)&type metadata for PPTTestCaseEnvironmentKey, (uint64_t)&protocol witness table for PPTTestCaseEnvironmentKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v7[7])
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v7[0] || v7[1] != 1)
  {
    outlined init with take of PPTTestCase((uint64_t)v7, (uint64_t)v8);
    swift_release();
    swift_release();
    id v4 = objc_msgSend(a2, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      Swift::Int v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::Int v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    PPTTestCase.navigationComplete(depth:)(v6);
    return outlined destroy of PPTTestCase((uint64_t)v8);
  }
  else
  {
    outlined destroy of PPTTestCase?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?, (uint64_t)&type metadata for PPTTestCase);
    swift_release();
    return swift_release();
  }
}

uint64_t key path getter for EnvironmentValues.testCase : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, (uint64_t)&type metadata for PPTTestCaseEnvironmentKey, (uint64_t)&protocol witness table for PPTTestCaseEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, (uint64_t)&type metadata for PPTTestCaseEnvironmentKey, (uint64_t)&protocol witness table for PPTTestCaseEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of PPTTestCase?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for PPTTestCase?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI11PPTTestCaseVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI11PPTTestCaseVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>);
    }
  }
}

uint64_t NavigationStackCoordinator.previousContent.getter@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB0), (uint64_t)v12, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v12, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src) == 1)
  {
    uint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x60);
    uint64_t v5 = *(void *)v4;
    int v6 = v4[8];
    uint64_t v7 = *((void *)v4 + 2);
    if (v6 == 4) {
      LOBYTE(v6) = 0;
    }
    uint64_t v9 = v5;
    char v10 = v6;
    uint64_t v11 = v7;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(&v9);
    outlined init with take of NavigationState.Base(&v9, a1);
  }
  else
  {
    memcpy(a1, __src, 0x188uLL);
  }
  return _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
}

uint64_t NavigationStackCoordinator.environment.getter()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v2 = v1;
  unint64_t v3 = (char *)v0 + *(void *)(v1 + 0x70);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)(v2 + 88) + 24))(v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SpringLoadedResponderFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for NavigationStrategy.environment.getter in conformance NavigationStrategy_Phone@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t NavigationState.StackContent.change(from:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  outlined init with take of NavigationState.StackContent.Key?(v3, (uint64_t)v68, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  memcpy(v69, v1, sizeof(v69));
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)v70, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v70) == 1)
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v64);
    uint64_t v4 = v64;
  }
  else
  {
    outlined init with take of NavigationState.Base(v70, v64);
    if (_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v64))
    {
      memcpy(__dst, v69, sizeof(__dst));
      outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)v63, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      NavigationState.StackContent.pathSeed.getter(__src);
      int v5 = __src[0];
      memcpy(__dst, v70, sizeof(__dst));
      NavigationState.StackContent.pathSeed.getter(v60);
      outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
      if (v5 == -1 || LODWORD(v60[0]) == -1 || v5 != LODWORD(v60[0])) {
        return 2;
      }
    }
    else
    {
      outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)v63, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    }
    outlined init with take of NavigationState.Base(v63, v66);
    outlined init with take of NavigationState.Base(v66, v63);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v63, v6, v7, v8);
    uint64_t v4 = v63;
  }
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v4, (uint64_t)v67, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
  uint64_t v9 = (uint64_t (*)(uint64_t))v64;
  outlined init with take of NavigationState.Base(v69, v64);
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v67, (uint64_t)&v65, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
  outlined init with take of NavigationState.Base(v69, v66);
  int v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v66);
  if (v10)
  {
    if (v10 != 1)
    {
      uint64_t v71 = v2;
      uint64_t v22 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v66);
      uint64_t v23 = *(void *)(v22 + 8);
      uint64_t v25 = *(void *)(v22 + 16);
      uint64_t v24 = *(void *)(v22 + 24);
      uint64_t v27 = *(void *)(v22 + 32);
      uint64_t v26 = *(void *)(v22 + 40);
      uint64_t v29 = *(void *)(v22 + 48);
      uint64_t v28 = *(void *)(v22 + 56);
      uint64_t v57 = *(void *)(v22 + 64);
      unsigned __int16 v30 = *(_WORD *)(v22 + 72);
      outlined init with take of NavigationState.StackContent.Key?((uint64_t)v67, (uint64_t)v63, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
      if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v63) == 1)
      {
        outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
      }
      else
      {
        outlined init with take of NavigationState.Base(v63, __dst);
        int v31 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)__dst);
        if (v31)
        {
          if (v31 != 1)
          {
            uint64_t v35 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
            uint64_t v51 = *(void *)v35;
            uint64_t v55 = *(void *)(v35 + 24);
            uint64_t v56 = *(void *)(v35 + 16);
            uint64_t v53 = *(void *)(v35 + 32);
            uint64_t v54 = *(void *)(v35 + 40);
            uint64_t v50 = *(void *)(v35 + 48);
            uint64_t v36 = *(void *)(v35 + 56);
            uint64_t v48 = v24;
            uint64_t v49 = *(void *)(v35 + 64);
            uint64_t v37 = v24;
            unsigned __int16 v38 = *(_WORD *)(v35 + 72);
            __src[0] = *(void *)(v35 + 8);
            uint64_t v52 = __src[0];
            __src[1] = v56;
            void __src[2] = v55;
            __src[3] = v53;
            __src[4] = v54;
            __src[5] = v50;
            __src[6] = v36;
            __src[7] = v49;
            LOWORD(__src[8]) = v38;
            v60[0] = v23;
            v60[1] = v25;
            v60[2] = v37;
            v60[3] = v27;
            v60[4] = v26;
            v60[5] = v29;
            v60[6] = v28;
            v60[7] = v57;
            LOWORD(v60[8]) = v30;
            outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
            outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
            uint64_t v47 = v28;
            outlined copy of NavigationSplitViewState?(v23, v25, v48, v27, v26, v29, v28, v57, v30, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
            outlined copy of NavigationSplitViewState?(v52, v56, v55, v53, v54, v50, v36, v49, v38, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
            uint64_t v39 = v71;
            uint64_t v40 = specialized static NavigationColumnState.change(from:to:previousSplitViewState:splitViewState:)(v51);
            uint64_t v71 = v39;
            if (v39)
            {
              outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
              uint64_t v9 = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?;
            }
            else
            {
              uint64_t v9 = (uint64_t (*)(uint64_t))v40;
              outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
            }
            outlined copy of NavigationSplitViewState?(v23, v25, v48, v27, v26, v29, v47, v57, v30, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            outlined copy of NavigationSplitViewState?(v52, v56, v55, v53, v54, v50, v36, v49, v38, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            return (uint64_t)v9;
          }
          _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
          outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
          outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
          return 2;
        }
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
        outlined init with take of NavigationState.Base(v69, __src);
        outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        NavigationState.Base.count.getter();
        outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
        outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      }
      return 2;
    }
    uint64_t v11 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v66);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v67, (uint64_t)v63, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v63) == 1) {
      goto LABEL_37;
    }
    outlined init with take of NavigationState.Base(v63, __dst);
    int v12 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)__dst);
    if (v12)
    {
      if (v12 == 1)
      {
        uint64_t v13 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
        memcpy(v60, (const void *)v11, 0x12BuLL);
        memcpy(__src, v13, 0x12BuLL);
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src, v14, v15, v16);
        outlined init with take of NavigationState.StackContent.Key?((uint64_t)__src, (uint64_t)v59, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
        outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        outlined retain of NavigationColumnState((uint64_t *)v11);
        outlined retain of NavigationColumnState((uint64_t *)v13);
        NavigationColumnState.change(from:)((uint64_t)v59);
        if (!v2) {
          uint64_t v9 = v17;
        }
        outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
        outlined release of NavigationColumnState((uint64_t *)v13);
        outlined release of NavigationColumnState((uint64_t *)v11);
        return (uint64_t)v9;
      }
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
LABEL_37:
      outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
      outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
LABEL_38:
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
      return 2;
    }
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
    outlined init with take of NavigationState.Base(v69, __src);
    outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
    outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined retain of NavigationColumnState((uint64_t *)v11);
    NavigationState.Base.count.getter();
    if (v32 != 1)
    {
      outlined release of NavigationColumnState((uint64_t *)v11);
      goto LABEL_38;
    }
    unint64_t v33 = ~*(void *)(v11 + 112) & 0xF000000000000007;
    int v34 = *(unsigned __int8 *)(v11 + 296);
    outlined retain of NavigationColumnState((uint64_t *)v11);
    if (v33)
    {
      if (v34 == 1) {
        goto LABEL_59;
      }
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
    }
    else if (v34 == 1)
    {
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
LABEL_59:
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
      outlined release of NavigationColumnState((uint64_t *)v11);
      outlined release of NavigationColumnState((uint64_t *)v11);
      return 3;
    }
    outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
    outlined release of NavigationColumnState((uint64_t *)v11);
    outlined release of NavigationColumnState((uint64_t *)v11);
    return 2;
  }
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v66);
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v67, (uint64_t)v63, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v63) == 1) {
    goto LABEL_30;
  }
  outlined init with take of NavigationState.Base(v63, __dst);
  if (!_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)__dst))
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
LABEL_30:
    outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
    outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
    return 1;
  }
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src);
  if (result == 1) {
    goto LABEL_68;
  }
  memcpy(v60, __src, sizeof(v60));
  outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
  outlined retain of NavigationState.Base((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  if ((NavigationState.StackContent.canPop.getter() & 1) == 0)
  {
    outlined init with take of NavigationState.Base(v63, v60);
    int v41 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v60);
    if (!v41)
    {
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v60);
      goto LABEL_38;
    }
    if (v41 != 1)
    {
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v60);
      outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)v59, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      memcpy(v58, v59, sizeof(v58));
      outlined retain of NavigationState.Base((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      NavigationState.StackContent.count.getter();
      uint64_t v9 = v46;
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
      outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
      if (v9 == (uint64_t (*)(uint64_t))1) {
        return (uint64_t)v9;
      }
      return 2;
    }
    uint64_t v42 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v60);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)v59, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    memcpy(v58, v59, sizeof(v58));
    outlined retain of NavigationColumnState((uint64_t *)v42);
    NavigationState.StackContent.count.getter();
    if (v43 != 1)
    {
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
LABEL_65:
      outlined release of NavigationColumnState((uint64_t *)v42);
      return 2;
    }
    unint64_t v44 = ~*(void *)(v42 + 112) & 0xF000000000000007;
    int v45 = *(unsigned __int8 *)(v42 + 296);
    outlined retain of NavigationColumnState((uint64_t *)v42);
    if (v44)
    {
      if (v45 == 1) {
        goto LABEL_64;
      }
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
    }
    else if (v45 == 1)
    {
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
LABEL_64:
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
      outlined release of NavigationColumnState((uint64_t *)v42);
      goto LABEL_65;
    }
    outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
    outlined release of NavigationColumnState((uint64_t *)v42);
    outlined release of NavigationColumnState((uint64_t *)v42);
    return 1;
  }
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v68, (uint64_t)v60, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  memcpy(v59, v60, sizeof(v59));
  outlined retain of NavigationState.Base((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  NavigationState.StackContent.count.getter();
  uint64_t v20 = v19;
  outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v64);
  uint64_t result = outlined release of NavigationState.StackContent?((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v9 = (uint64_t (*)(uint64_t))(v20 - 1);
  if (!v21) {
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

void NavigationState.StackContent.count.getter()
{
  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v88);
  int v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v88);
  if (!v1) {
    goto LABEL_8;
  }
  if (v1 == 1)
  {
    uint64_t v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v88);
    uint64_t v3 = v2[21];
    if (v3 < 0) {
      return;
    }
    uint64_t v4 = v2;
    uint64_t v5 = v2[14];
    uint64_t v73 = v2[15];
    uint64_t v6 = v2[16];
    uint64_t v7 = v2[17];
    uint64_t v9 = v2[18];
    uint64_t v8 = v2[19];
    uint64_t v10 = v2[20];
    uint64_t v11 = v2[22];
    uint64_t v75 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
    outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined retain of NavigationColumnState(v4);
    uint64_t v70 = v8;
    uint64_t v68 = v10;
    outlined copy of NavigationColumnState.ColumnContent(v5, v73, v6, v7, v9, v8, v10, v3);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = v75(v12);
    swift_release();
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (!v14)
    {
      uint64_t v16 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NavigationColumnState.ColumnContent(v5, v73, v6, v7, v9, v70, v68, v3);
      outlined release of NavigationColumnState(v4);
      outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      if (!__OFADD__(v15, v16)) {
        return;
      }
      __break(1u);
LABEL_8:
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v88);
      return;
    }
    goto LABEL_79;
  }
  uint64_t v17 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v88);
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = *(void *)(v17 + 16);
  uint64_t v21 = *(void *)(v17 + 24);
  uint64_t v22 = *(void *)(v17 + 32);
  uint64_t v23 = *(void *)(v17 + 40);
  uint64_t v24 = *(void *)(v17 + 48);
  uint64_t v25 = *(void *)(v17 + 56);
  uint64_t v26 = *(void *)(v17 + 64);
  unsigned __int16 v27 = *(_WORD *)(v17 + 72);
  v79[0] = v19;
  v79[1] = v20;
  v79[2] = v21;
  v79[3] = v22;
  v79[4] = v23;
  v79[5] = v24;
  v79[6] = v25;
  v79[7] = v26;
  unsigned __int16 v80 = v27;
  uint64_t v28 = *(void *)(v18 + 16);
  if (!v28) {
    return;
  }
  uint64_t v67 = v18;
  unsigned __int16 v29 = v27;
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  unsigned __int16 v57 = v29;
  unsigned __int16 v56 = v29;
  uint64_t v30 = v67;
  uint64_t v64 = v20;
  uint64_t v65 = v19;
  uint64_t v62 = v22;
  uint64_t v63 = v21;
  uint64_t v60 = v24;
  uint64_t v61 = v23;
  uint64_t v58 = v26;
  uint64_t v59 = v25;
  outlined copy of NavigationSplitViewState?(v19, v20, v21, v22, v23, v24, v25, v26, v56, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  uint64_t v31 = 0;
  uint64_t v32 = -v28;
  unint64_t v33 = 6;
  uint64_t v34 = v67;
  uint64_t v66 = -v28;
  while (2)
  {
    if (v33 - 6 >= *(void *)(v30 + 16))
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      return;
    }
    uint64_t v35 = (const void *)(v34 + 32);
    memcpy(__dst, (const void *)(v34 + 32), 0x12BuLL);
    switch(LOBYTE(__dst[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(__dst);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)__dst, v33 - 6, v30))goto LABEL_27; {
        if (v33 - 5 >= *(void *)(v30 + 16))
        }
          goto LABEL_50;
        memcpy(v82, (const void *)(v34 + 336), 0x12BuLL);
        switch(LOBYTE(v82[3]))
        {
          case 1:
            outlined retain of NavigationColumnState(v82);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v82, v33 - 5, v30))goto LABEL_33; {
            if (v33 - 4 >= *(void *)(v30 + 16))
            }
              goto LABEL_49;
            memcpy(v83, (const void *)(v34 + 640), 0x12BuLL);
            switch(LOBYTE(v83[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v83);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v83, v33 - 4, v30))goto LABEL_37; {
                if (v33 - 3 >= *(void *)(v30 + 16))
                }
                  goto LABEL_48;
                break;
              case 2:
                outlined retain of NavigationColumnState(v83);
                char v48 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v83, v33 - 4, v30);
LABEL_39:
                outlined release of NavigationColumnState(v83);
                goto LABEL_35;
              case 5:
                goto LABEL_49;
              default:
                goto LABEL_33;
            }
            break;
          case 2:
            outlined retain of NavigationColumnState(v82);
            char v48 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v82, v33 - 5, v30);
LABEL_35:
            outlined release of NavigationColumnState(v82);
            goto LABEL_24;
          case 5:
            goto LABEL_50;
          default:
            goto LABEL_27;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(__dst);
        char v48 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)__dst, v33 - 6, v30);
LABEL_24:
        outlined release of NavigationColumnState(__dst);
        if ((v48 & 1) == 0) {
          goto LABEL_51;
        }
        goto LABEL_13;
      case 5:
        goto LABEL_51;
      default:
        goto LABEL_13;
    }
    memcpy(v84, (const void *)(v34 + 944), 0x12BuLL);
    switch(LOBYTE(v84[3]))
    {
      case 1:
        uint64_t v49 = v34;
        outlined retain of NavigationColumnState(v84);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v84, v33 - 3, v30))goto LABEL_45; {
        uint64_t v50 = v33 - 2;
        }
        unint64_t v51 = *(void *)(v30 + 16);
        if (v33 - 2 >= v51)
        {
          outlined release of NavigationColumnState(v84);
          uint64_t v32 = v66;
          uint64_t v30 = v67;
          uint64_t v34 = v49;
LABEL_48:
          outlined release of NavigationColumnState(v83);
LABEL_49:
          outlined release of NavigationColumnState(v82);
LABEL_50:
          outlined release of NavigationColumnState(__dst);
        }
        else
        {
          memcpy(v85, (const void *)(v49 + 1248), 0x12BuLL);
          uint64_t v32 = v66;
          uint64_t v30 = v67;
          switch(LOBYTE(v85[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v85);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v85, v50, v67))
              {
                outlined release of NavigationColumnState(v85);
                uint64_t v32 = v66;
                uint64_t v30 = v67;
LABEL_45:
                outlined release of NavigationColumnState(v84);
                uint64_t v34 = v49;
LABEL_37:
                outlined release of NavigationColumnState(v83);
LABEL_33:
                outlined release of NavigationColumnState(v82);
LABEL_27:
                outlined release of NavigationColumnState(__dst);
LABEL_13:
                if (v33 - 6 >= *(void *)(v30 + 16)) {
                  goto LABEL_76;
                }
                memcpy(v78, v35, 0x12BuLL);
                uint64_t v36 = v78[21];
                if (v78[21] < 0)
                {
                  BOOL v14 = __OFADD__(v31++, 1);
                  if (v14) {
                    goto LABEL_75;
                  }
                }
                else
                {
                  unint64_t v69 = v33;
                  uint64_t v71 = v31;
                  uint64_t v37 = v78[14];
                  uint64_t v38 = v78[15];
                  uint64_t v39 = v78[16];
                  uint64_t v40 = v78[17];
                  uint64_t v41 = v78[18];
                  uint64_t v74 = v78[19];
                  uint64_t v42 = v78[20];
                  uint64_t v43 = v78[22];
                  unsigned int v76 = *(uint64_t (**)(uint64_t))(*(void *)v78[21] + 88);
                  outlined retain of NavigationColumnState(v78);
                  uint64_t v72 = v42;
                  outlined copy of NavigationColumnState.ColumnContent(v37, v38, v39, v40, v41, v74, v42, v36);
                  swift_retain();
                  swift_bridgeObjectRetain();
                  uint64_t v44 = swift_bridgeObjectRetain();
                  uint64_t v45 = v76(v44);
                  uint64_t v46 = v45 + 1;
                  if (__OFADD__(v45, 1)) {
                    goto LABEL_77;
                  }
                  uint64_t v77 = *(void *)(v43 + 16);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined consume of NavigationColumnState.ColumnContent(v37, v38, v39, v40, v41, v74, v72, v36);
                  outlined release of NavigationColumnState(v78);
                  uint64_t v47 = v46 + v77;
                  if (__OFADD__(v46, v77)) {
                    goto LABEL_78;
                  }
                  uint64_t v32 = v66;
                  uint64_t v30 = v67;
                  unint64_t v33 = v69;
                  v31 += v47;
                  if (__OFADD__(v71, v47)) {
                    goto LABEL_75;
                  }
                }
                break;
              }
              if (v33 - 1 >= v51)
              {
                outlined release of NavigationColumnState(v85);
                uint64_t v32 = v66;
                uint64_t v30 = v67;
LABEL_63:
                outlined release of NavigationColumnState(v84);
                outlined release of NavigationColumnState(v83);
                outlined release of NavigationColumnState(v82);
                outlined release of NavigationColumnState(__dst);
                uint64_t v34 = v49;
                break;
              }
              unint64_t v54 = *(void *)(v67 + 16);
              if (v33 - 1 >= v54) {
                goto LABEL_80;
              }
              memcpy(v86, (const void *)(v49 + 1552), 0x12BuLL);
              switch(LOBYTE(v86[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v86);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v86, v33 - 1, v67))
                  {
                    outlined release of NavigationColumnState(v86);
                    goto LABEL_61;
                  }
                  if (v33 >= v54)
                  {
                    outlined release of NavigationColumnState(v86);
                    goto LABEL_70;
                  }
                  char v53 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v33, v67, (uint64_t)v79);
                  outlined release of NavigationColumnState(v86);
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v86);
                  char v55 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v86, v33 - 1, v67);
                  outlined release of NavigationColumnState(v86);
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                  char v53 = v55 ^ 1;
                  break;
                case 5:
LABEL_70:
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                  char v53 = 1;
                  break;
                default:
LABEL_61:
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                  char v53 = 0;
                  break;
              }
              outlined release of NavigationColumnState(v83);
LABEL_56:
              outlined release of NavigationColumnState(v82);
              outlined release of NavigationColumnState(__dst);
              uint64_t v32 = v66;
              uint64_t v30 = v67;
              uint64_t v34 = v49;
              if ((v53 & 1) == 0) {
                goto LABEL_13;
              }
              break;
            case 2:
              outlined retain of NavigationColumnState(v85);
              char v52 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v85, v50, v67);
              outlined release of NavigationColumnState(v85);
              outlined release of NavigationColumnState(v84);
              outlined release of NavigationColumnState(v83);
              char v53 = v52 ^ 1;
              goto LABEL_56;
            case 5:
              goto LABEL_63;
            default:
              goto LABEL_45;
          }
        }
LABEL_51:
        ++v33;
        v34 += 304;
        if (v32 + v33 != 6) {
          continue;
        }
        outlined copy of NavigationSplitViewState?(v65, v64, v63, v62, v61, v60, v59, v58, v57, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
        break;
      case 2:
        outlined retain of NavigationColumnState(v84);
        char v48 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v84, v33 - 3, v30);
        outlined release of NavigationColumnState(v84);
        goto LABEL_39;
      case 5:
        goto LABEL_48;
      default:
        goto LABEL_37;
    }
    break;
  }
}

uint64_t outlined retain of NavigationState.Base(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    *(void *)(a1 + 384));
  return a1;
}

uint64_t outlined release of (NavigationState.Base, NavigationState.Base?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 392);
  uint64_t v3 = *(void *)(a1 + 400);
  uint64_t v4 = *(void *)(a1 + 408);
  uint64_t v5 = *(void *)(a1 + 416);
  uint64_t v6 = *(void *)(a1 + 424);
  uint64_t v7 = *(void *)(a1 + 432);
  uint64_t v8 = *(void *)(a1 + 440);
  uint64_t v9 = *(void *)(a1 + 448);
  long long v35 = *(_OWORD *)(a1 + 472);
  long long v36 = *(_OWORD *)(a1 + 456);
  long long v33 = *(_OWORD *)(a1 + 504);
  long long v34 = *(_OWORD *)(a1 + 488);
  long long v31 = *(_OWORD *)(a1 + 536);
  long long v32 = *(_OWORD *)(a1 + 520);
  long long v29 = *(_OWORD *)(a1 + 568);
  long long v30 = *(_OWORD *)(a1 + 552);
  long long v27 = *(_OWORD *)(a1 + 600);
  long long v28 = *(_OWORD *)(a1 + 584);
  long long v25 = *(_OWORD *)(a1 + 632);
  long long v26 = *(_OWORD *)(a1 + 616);
  long long v23 = *(_OWORD *)(a1 + 664);
  long long v24 = *(_OWORD *)(a1 + 648);
  long long v21 = *(_OWORD *)(a1 + 696);
  long long v22 = *(_OWORD *)(a1 + 680);
  long long v19 = *(_OWORD *)(a1 + 728);
  long long v20 = *(_OWORD *)(a1 + 712);
  long long v17 = *(_OWORD *)(a1 + 760);
  long long v18 = *(_OWORD *)(a1 + 744);
  uint64_t v10 = *(void *)(a1 + 776);
  long long v16 = *(_OWORD *)(a1 + 288);
  long long v14 = *(_OWORD *)(a1 + 256);
  long long v15 = *(_OWORD *)(a1 + 272);
  long long v12 = *(_OWORD *)(a1 + 224);
  long long v13 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((unint64_t *)&v16 + 1),
    *(void *)(a1 + 304));
  outlined copy of NavigationState.StackContent?(v2, v3, v4, v5, v6, v7, v8, v9, v36, *((uint64_t *)&v36 + 1), v35, *((uint64_t *)&v35 + 1), v34, *((uint64_t *)&v34 + 1), v33, *((uint64_t *)&v33 + 1), v32, *((uint64_t *)&v32 + 1), v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v10,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  return a1;
}

void NavigationState.Base.count.getter()
{
  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v81);
  int v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v81);
  if (!v1) {
    goto LABEL_8;
  }
  if (v1 != 1)
  {
    uint64_t v17 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v81);
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(void *)(v17 + 32);
    uint64_t v23 = *(void *)(v17 + 40);
    uint64_t v24 = *(void *)(v17 + 48);
    uint64_t v25 = *(void *)(v17 + 56);
    uint64_t v26 = *(void *)(v17 + 64);
    unsigned __int16 v27 = *(_WORD *)(v17 + 72);
    v72[0] = v18;
    v72[1] = v20;
    v72[2] = v21;
    v72[3] = v22;
    v72[4] = v23;
    v72[5] = v24;
    v72[6] = v25;
    v72[7] = v26;
    unsigned __int16 v73 = v27;
    uint64_t v28 = *(void *)(v19 + 16);
    if (!v28) {
      return;
    }
    unsigned __int16 v49 = v27;
    uint64_t v56 = v20;
    uint64_t v57 = v18;
    uint64_t v54 = v22;
    uint64_t v55 = v21;
    uint64_t v52 = v24;
    uint64_t v53 = v23;
    uint64_t v50 = v26;
    uint64_t v51 = v25;
    outlined copy of NavigationSplitViewState?(v18, v20, v21, v22, v23, v24, v25, v26, v27, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    uint64_t v29 = 0;
    uint64_t v30 = -v28;
    unint64_t v31 = 6;
    uint64_t v32 = v19;
    uint64_t v58 = -v28;
    uint64_t v59 = v19;
    while (1)
    {
      if (v31 - 6 >= *(void *)(v19 + 16))
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      memcpy(__dst, (const void *)(v32 + 32), 0x12BuLL);
      switch(LOBYTE(__dst[3]))
      {
        case 1:
          outlined retain of NavigationColumnState(__dst);
          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)__dst, v31 - 6, v19))goto LABEL_26; {
          if (v31 - 5 >= *(void *)(v19 + 16))
          }
            goto LABEL_57;
          memcpy(v75, (const void *)(v32 + 336), 0x12BuLL);
          switch(LOBYTE(v75[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v75);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v75, v31 - 5, v19))goto LABEL_33; {
              if (v31 - 4 >= *(void *)(v19 + 16))
              }
                goto LABEL_56;
              memcpy(v76, (const void *)(v32 + 640), 0x12BuLL);
              switch(LOBYTE(v76[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v76);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v76, v31 - 4, v19))goto LABEL_39; {
                  if (v31 - 3 >= *(void *)(v19 + 16))
                  }
                    goto LABEL_55;
                  memcpy(v77, (const void *)(v32 + 944), 0x12BuLL);
                  switch(LOBYTE(v77[3]))
                  {
                    case 1:
                      outlined retain of NavigationColumnState(v77);
                      if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v77, v31 - 3, v19))goto LABEL_45; {
                      if (v31 - 2 >= *(void *)(v19 + 16))
                      }
                        goto LABEL_54;
                      break;
                    case 2:
                      outlined retain of NavigationColumnState(v77);
                      char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v77, v31 - 3, v19);
LABEL_47:
                      outlined release of NavigationColumnState(v77);
                      goto LABEL_41;
                    case 5:
                      goto LABEL_55;
                    default:
                      goto LABEL_39;
                  }
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v76);
                  char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v76, v31 - 4, v19);
LABEL_41:
                  outlined release of NavigationColumnState(v76);
                  goto LABEL_35;
                case 5:
                  goto LABEL_56;
                default:
                  goto LABEL_33;
              }
              break;
            case 2:
              outlined retain of NavigationColumnState(v75);
              char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v75, v31 - 5, v19);
LABEL_35:
              outlined release of NavigationColumnState(v75);
              goto LABEL_28;
            case 5:
              goto LABEL_57;
            default:
              goto LABEL_26;
          }
          break;
        case 2:
          outlined retain of NavigationColumnState(__dst);
          char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)__dst, v31 - 6, v19);
LABEL_28:
          outlined release of NavigationColumnState(__dst);
          if ((v45 & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_13;
        case 5:
          goto LABEL_58;
        default:
          goto LABEL_13;
      }
      memcpy(v78, (const void *)(v32 + 1248), 0x12BuLL);
      uint64_t v30 = v58;
      uint64_t v19 = v59;
      switch(LOBYTE(v78[3]))
      {
        case 1:
          outlined retain of NavigationColumnState(v78);
          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v78, v31 - 2, v59))goto LABEL_51; {
          unint64_t v46 = *(void *)(v59 + 16);
          }
          if (v31 - 1 >= v46)
          {
            outlined release of NavigationColumnState(v78);
            uint64_t v30 = v58;
            uint64_t v19 = v59;
LABEL_54:
            outlined release of NavigationColumnState(v77);
LABEL_55:
            outlined release of NavigationColumnState(v76);
LABEL_56:
            outlined release of NavigationColumnState(v75);
LABEL_57:
            outlined release of NavigationColumnState(__dst);
            goto LABEL_58;
          }
          break;
        case 2:
          outlined retain of NavigationColumnState(v78);
          char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v78, v31 - 2, v59);
          outlined release of NavigationColumnState(v78);
          goto LABEL_47;
        case 5:
          goto LABEL_54;
        default:
          goto LABEL_45;
      }
      memcpy(v79, (const void *)(v32 + 1552), 0x12BuLL);
      switch(LOBYTE(v79[3]))
      {
        case 1:
          outlined retain of NavigationColumnState(v79);
          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v79, v31 - 1, v59))
          {
            outlined release of NavigationColumnState(v79);
LABEL_51:
            outlined release of NavigationColumnState(v78);
            uint64_t v30 = v58;
            uint64_t v19 = v59;
LABEL_45:
            outlined release of NavigationColumnState(v77);
LABEL_39:
            outlined release of NavigationColumnState(v76);
LABEL_33:
            outlined release of NavigationColumnState(v75);
LABEL_26:
            outlined release of NavigationColumnState(__dst);
LABEL_13:
            if (v31 - 6 >= *(void *)(v19 + 16)) {
              goto LABEL_74;
            }
            memcpy(v71, (const void *)(v32 + 32), 0x12BuLL);
            uint64_t v33 = v71[21];
            if (v71[21] < 0)
            {
              BOOL v14 = __OFADD__(v29++, 1);
              if (v14)
              {
LABEL_69:
                __break(1u);
LABEL_70:
                outlined copy of NavigationSplitViewState?(v57, v56, v55, v54, v53, v52, v51, v50, v49, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
                return;
              }
            }
            else
            {
              uint64_t v60 = v32;
              unint64_t v62 = v31;
              uint64_t v64 = v29;
              uint64_t v34 = v71[14];
              uint64_t v35 = v71[15];
              uint64_t v36 = v71[16];
              uint64_t v37 = v71[17];
              uint64_t v38 = v71[18];
              uint64_t v67 = v71[19];
              uint64_t v39 = v71[20];
              uint64_t v40 = v71[22];
              unint64_t v69 = *(uint64_t (**)(uint64_t))(*(void *)v71[21] + 88);
              outlined retain of NavigationColumnState(v71);
              uint64_t v65 = v39;
              outlined copy of NavigationColumnState.ColumnContent(v34, v35, v36, v37, v38, v67, v39, v33);
              swift_retain();
              swift_bridgeObjectRetain();
              uint64_t v41 = swift_bridgeObjectRetain();
              uint64_t v42 = v69(v41);
              uint64_t v43 = v42 + 1;
              if (__OFADD__(v42, 1)) {
                goto LABEL_75;
              }
              uint64_t v70 = *(void *)(v40 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              outlined consume of NavigationColumnState.ColumnContent(v34, v35, v36, v37, v38, v67, v65, v33);
              outlined release of NavigationColumnState(v71);
              uint64_t v44 = v43 + v70;
              if (__OFADD__(v43, v70)) {
                goto LABEL_76;
              }
              uint64_t v30 = v58;
              uint64_t v19 = v59;
              unint64_t v31 = v62;
              uint64_t v32 = v60;
              v29 += v44;
              if (__OFADD__(v64, v44)) {
                goto LABEL_69;
              }
            }
            goto LABEL_58;
          }
          if (v31 >= v46)
          {
            outlined release of NavigationColumnState(v79);
LABEL_68:
            outlined release of NavigationColumnState(v78);
            outlined release of NavigationColumnState(v77);
            outlined release of NavigationColumnState(v76);
            outlined release of NavigationColumnState(v75);
            outlined release of NavigationColumnState(__dst);
            uint64_t v30 = v58;
            uint64_t v19 = v59;
            goto LABEL_58;
          }
          char v48 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v31, v59, (uint64_t)v72);
          outlined release of NavigationColumnState(v79);
          outlined release of NavigationColumnState(v78);
          outlined release of NavigationColumnState(v77);
LABEL_65:
          outlined release of NavigationColumnState(v76);
          outlined release of NavigationColumnState(v75);
          outlined release of NavigationColumnState(__dst);
          uint64_t v30 = v58;
          uint64_t v19 = v59;
          if ((v48 & 1) == 0) {
            goto LABEL_13;
          }
LABEL_58:
          ++v31;
          v32 += 304;
          if (v30 + v31 == 6) {
            goto LABEL_70;
          }
          break;
        case 2:
          outlined retain of NavigationColumnState(v79);
          char v47 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v72, (uint64_t)v79, v31 - 1, v59);
          outlined release of NavigationColumnState(v79);
          outlined release of NavigationColumnState(v78);
          outlined release of NavigationColumnState(v77);
          char v48 = v47 ^ 1;
          goto LABEL_65;
        case 5:
          goto LABEL_68;
        default:
          goto LABEL_51;
      }
    }
  }
  uint64_t v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v81);
  uint64_t v3 = v2[21];
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v2[14];
    uint64_t v66 = v2[15];
    uint64_t v6 = v2[16];
    uint64_t v7 = v2[17];
    uint64_t v9 = v2[18];
    uint64_t v8 = v2[19];
    uint64_t v10 = v2[20];
    uint64_t v11 = v2[22];
    uint64_t v68 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
    outlined retain of NavigationColumnState(v2);
    uint64_t v63 = v8;
    uint64_t v61 = v10;
    outlined copy of NavigationColumnState.ColumnContent(v5, v66, v6, v7, v9, v8, v10, v3);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = v68(v12);
    swift_release();
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (!v14)
    {
      uint64_t v16 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NavigationColumnState.ColumnContent(v5, v66, v6, v7, v9, v63, v61, v3);
      outlined release of NavigationColumnState(v4);
      if (!__OFADD__(v15, v16)) {
        return;
      }
      __break(1u);
LABEL_8:
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v81);
      return;
    }
LABEL_77:
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>);
    type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>();
    lazy protocol witness table accessor for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, &lazy cache variable for type metadata for _OverlayModifier<SearchOverlayView>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView, (uint64_t)&type metadata for SearchOverlayView, MEMORY[0x1E4F3FE70]);
    lazy protocol witness table accessor for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>;
  if (!lazy protocol witness table cache variable for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, &lazy cache variable for type metadata for _OverlayModifier<SearchOverlayView>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView, (uint64_t)&type metadata for SearchOverlayView, MEMORY[0x1E4F3FE70]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>();
    type metadata accessor for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<NavigationCommonModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier, (uint64_t)&type metadata for NavigationCommonModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<NavigationColumnModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier, (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<NavigationCommonModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier, (uint64_t)&type metadata for NavigationCommonModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<NavigationColumnModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier, (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for SearchFieldStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate;
  if (!lazy protocol witness table cache variable for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle;
  if (!lazy protocol witness table cache variable for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle);
  }
  return result;
}

uint64_t SearchPrimitiveModifier.DefaultSearchView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v45 = (uint64_t)&v41 - v5;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v47 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v48 = (char *)&v41 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v41 - v19;
  if (*v2 == 1)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v43 = v20;
    uint64_t v44 = v14;
    uint64_t v22 = v7;
    uint64_t v23 = v4;
    uint64_t v24 = KeyPath;
    uint64_t v25 = swift_getKeyPath();
    uint64_t v42 = v9;
    uint64_t v26 = v25;
    uint64_t v27 = swift_getKeyPath();
    __int16 v52 = 0;
    uint64_t v53 = v24;
    unsigned __int8 v54 = 0;
    uint64_t v55 = v26;
    unsigned __int8 v56 = 0;
    uint64_t v57 = v27;
    unsigned __int8 v58 = 0;
    uint64_t v28 = v45;
    SearchPrimitiveModifier.DefaultSearchView.modifier.getter(v46, v45);
    unint64_t v29 = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
    uint64_t v30 = v47;
    MEMORY[0x18C113660](v28, &type metadata for SearchOverlayView, v22, v29);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v28, v22);
    outlined consume of Environment<Bool?>.Content(v53, v54);
    outlined consume of Environment<Bool?>.Content(v55, v56);
    outlined consume of Environment<Bool?>.Content(v57, v58);
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v50 = v29;
    uint64_t v51 = WitnessTable;
    swift_getWitnessTable();
    uint64_t v32 = v48;
    static ViewBuilder.buildExpression<A>(_:)(v30);
    uint64_t v33 = v42;
    uint64_t v34 = *(void (**)(char *, uint64_t))(v42 + 8);
    v34(v30, v8);
    static ViewBuilder.buildExpression<A>(_:)(v32);
    v34(v32, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v16, 0, 1, v8);
    uint64_t v20 = v43;
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v16, (uint64_t)v43);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v44 + 8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v9 + 56))(v16, 1, 1, v8, v18);
    unint64_t v36 = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
    uint64_t v37 = swift_getWitnessTable();
    unint64_t v62 = v36;
    uint64_t v63 = v37;
    swift_getWitnessTable();
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v16, (uint64_t)v20);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v14 + 8);
  }
  v35(v16, v13);
  unint64_t v38 = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
  uint64_t v39 = swift_getWitnessTable();
  unint64_t v60 = v38;
  uint64_t v61 = v39;
  uint64_t v59 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v35)(v20, v13);
}

uint64_t destroy for SearchPrimitiveModifier.SearchConfigModifier(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((v6 + 9) & ~v6) + *(void *)(v5 + 64);
  unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v8 + ((v6 + 16) & ~(v6 | 3)) <= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v8 + ((v6 + 16) & ~(v6 | 3));
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        if (v10 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        if (v10 >= 4) {
          goto LABEL_16;
        }
        goto LABEL_14;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v10 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 4:
        int v14 = *(_DWORD *)a1;
        if (v10 < 4) {
LABEL_14:
        }
          unsigned int v11 = (v14 | (v12 << (8 * v10))) + 2;
        else {
LABEL_16:
        }
          unsigned int v11 = v14 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v15 = ~v6;
  if (v11 == 1)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6+ ((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + (v6 | 3) + 8) & ~(v6 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 5) & v15, v4);
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 5) & v15, v4);
    swift_release();
  }
  unint64_t v16 = (unint64_t)&a1[v10 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v17 = *(unsigned __int8 *)(v16 + 17);
  if (v17 >= 2) {
    unsigned int v17 = *(_DWORD *)v16 + 2;
  }
  if (v17 == 1) {
    swift_release();
  }
  swift_release();
  uint64_t v18 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v19 = v18 + 8;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v18 + 8))((v16 + v20 + 18) & ~v20);
  if (*(void *)(((unint64_t)&a1[*(void *)(v19 + 56) + 1 + (((v10 & 0xFFFFFFFFFFFFFFF8) + v20 + 26) & ~v20)] & 0xFFFFFFFFFFFFFFF8)
                 + 16))
  {
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchOverlayView and conformance SearchOverlayView;
  if (!lazy protocol witness table cache variable for type SearchOverlayView and conformance SearchOverlayView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchOverlayView and conformance SearchOverlayView);
  }
  return result;
}

uint64_t SearchPrimitiveModifier.DefaultSearchView.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SearchField();
  double v6 = MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v13 - v7, v2 + *(int *)(a1 + 36), v6);
  uint64_t v10 = v2 + *(int *)(a1 + 40);
  uint64_t v11 = *(void *)(v10 + 8);
  SearchPrimitiveModifier.SearchConfigModifier.init(searchField:placement:forwardEnv:)((uint64_t)v8, 2, *(unsigned char *)v10, v11, *(void *)(v10 + 16), a2);
  return outlined copy of AppIntentExecutor?(v11);
}

uint64_t SearchPrimitiveModifier.SearchConfigModifier.init(searchField:placement:forwardEnv:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for SearchField();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t result = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier();
  *(unsigned char *)(a6 + *(int *)(result + 36)) = a2;
  uint64_t v14 = a6 + *(int *)(result + 40);
  *(unsigned char *)uint64_t v14 = a3;
  *(void *)(v14 + 8) = a4;
  *(void *)(v14 + 16) = a5;
  return result;
}

double key path getter for EnvironmentValues.navigationRequiredCompactColumn : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t specialized FocusSectionResponder.__allocating_init(inputs:viewSubgraph:)()
{
  type metadata accessor for FocusSectionResponder(0);
  uint64_t v0 = swift_allocObject();
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 256) = 0;
  *(void *)(v0 + 264) = 0;
  *(_WORD *)(v0 + 272) = 512;
  *(unsigned char *)(v0 + 274) = 0;
  *(void *)(v0 + 280) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void type metadata accessor for UIKitContainerFocusResponderItem<FocusSectionResponder>()
{
  if (!lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusSectionResponder>)
  {
    type metadata accessor for FocusSectionResponder(255);
    unint64_t v0 = type metadata accessor for UIKitContainerFocusResponderItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusSectionResponder>);
    }
  }
}

uint64_t type metadata accessor for FocusSectionResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FocusSectionResponder);
}

uint64_t View.defaultScrollAnchor(_:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_getKeyPath();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 32) = a3 & 1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t type metadata completion function for CollectionChanges.Element()
{
  uint64_t result = type metadata accessor for Range();
  if (v1 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for Range();
    if (v2 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in SearchField.suggestionsList(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v5 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v5 - 8);
  __int16 v52 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v53 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SearchField();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v45 - v11;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (uint64_t *)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>(0);
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>(0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28.n128_f64[0] = MEMORY[0x1F4188790](v24);
  if (*(unsigned char *)(a1 + *(int *)(v9 + 44)) == 1)
  {
    uint64_t v47 = v18;
    uint64_t v48 = v25;
    uint64_t v49 = (uint64_t)&v45 - v27;
    uint64_t v50 = v26;
    SearchField.$state.getter((uint64_t)v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
    _s7SwiftUI16SearchFieldStateVWOcTm_0(v51, v53, type metadata accessor for SearchFieldConfiguration);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v51 = a3;
    uint64_t v54 = KeyPath;
    uint64_t v30 = (char *)v16 + *(int *)(v14 + 32);
    uint64_t v46 = v12;
    char v31 = v30[1];
    type metadata accessor for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>(0);
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role> and conformance WritableKeyPath<A, B>, type metadata accessor for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>);
    uint64_t v32 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    uint64_t v45 = a1;
    uint64_t v33 = *v16;
    swift_retain();
    swift_release();
    uint64_t v54 = v33;
    uint64_t v55 = v32;
    char v56 = v31;
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>(0, &lazy cache variable for type metadata for Binding<SearchSuggestionsPlacement.Role>, (uint64_t)&type metadata for SearchSuggestionsPlacement.Role, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v57);
    swift_release();
    swift_release();
    *uint64_t v20 = v57;
    uint64_t v34 = v46;
    uint64_t v35 = v53;
    SearchField.multiSuggestions(_:)(v53, v9, (uint64_t)&v20[*(int *)(v47 + 36)]);
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v34, v9);
    _s7SwiftUI16SearchFieldStateVWOhTm_4(v35, type metadata accessor for SearchFieldConfiguration);
    unint64_t v36 = v52;
    SearchField.state.getter();
    char v37 = *v36;
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v36, type metadata accessor for SearchFieldState);
    _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>);
    uint64_t v38 = v48;
    uint64_t v39 = &v23[*(int *)(v48 + 36)];
    char *v39 = (v37 & 1) == 0;
    *((void *)v39 + 1) = 0;
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>);
    uint64_t v40 = v49;
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1((uint64_t)v23, v49, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>);
    uint64_t v41 = v40;
    uint64_t v42 = v51;
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1(v41, v51, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v42, 0, 1, v38);
  }
  else
  {
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 56);
    return v44(a3, 1, 1, v28);
  }
}

uint64_t type metadata accessor for TextInputSuggestions()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>, (uint64_t)&type metadata for SearchSuggestionsPlacement, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t instantiation function for generic protocol witness table for CollectionViewListDataSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for HeaderFooterConfiguration()
{
  swift_release();

  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for SelectionManagerBox<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, AccessibilityFrameModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, AccessibilityFrameModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, AccessibilityFrameModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>();
    type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>)
  {
    type metadata accessor for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>(255, &lazy cache variable for type metadata for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for LabeledContent);
    type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>)
  {
    type metadata accessor for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>(255, &lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>, (uint64_t)&type metadata for AccessibilityLabeledContentLabelModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>(255, &lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>, (uint64_t)&type metadata for AccessibilityLabeledContentLabelModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, &type metadata for LabeledContentStyleConfiguration.Label);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  void (*v20)(uint64_t *__return_ptr);
  _OWORD v21[5];
  int v22;
  void v23[2];
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  int v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  int v35;

  int v8 = *a1;
  long long v9 = a2[3];
  uint64_t v32 = a2[2];
  uint64_t v33 = v9;
  uint64_t v34 = a2[4];
  uint64_t v35 = *((_DWORD *)a2 + 20);
  long long v10 = a2[1];
  uint64_t v30 = *a2;
  char v31 = v10;
  *(void *)&uint64_t v24 = v9;
  DWORD2(v24) = DWORD2(v9);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v19 = a5;
    uint64_t v20 = (void (*)(uint64_t *__return_ptr))a3;
    uint64_t v26 = v32;
    uint64_t v27 = v33;
    __n128 v28 = v34;
    unint64_t v29 = v35;
    uint64_t v24 = v30;
    uint64_t v25 = v31;
    outlined retain of _ViewInputs((uint64_t)&v30);
    PreferencesInputs.remove<A>(_:)();
    PreferenceKeys.add(_:)();
    LODWORD(v21[0]) = v8;
    uint64_t v11 = type metadata accessor for AccessibilityLabeledContentContentModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(a4 - 8) + 64)) {
      closure #1 in static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)(1, a4);
    }
    type metadata accessor for ModifiedContent();
    type metadata accessor for ModifiedContent();
    AGGraphCreateOffsetAttribute2();
    type metadata accessor for AccessibilityLabeledContentContentModifier.LabelChild();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    swift_getWitnessTable();
    lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
    swift_getWitnessTable();
    static View.makeDebuggableView(view:inputs:)();
    uint64_t v13 = v23[0];
    uint64_t v14 = v23[1];
    LODWORD(v23[0]) = v8;
    _OWORD v21[2] = v32;
    v21[3] = v33;
    void v21[4] = v34;
    uint64_t v22 = v35;
    v21[0] = v30;
    v21[1] = v31;
    uint64_t WitnessTable = swift_getWitnessTable();
    unsigned int v16 = static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)((uint64_t)v23, (uint64_t)v21, v11, WitnessTable);
    *(void *)&v21[0] = v13;
    *((void *)&v21[0] + 1) = v14;
    uint64_t v17 = _ViewOutputs.subscript.getter();
    swift_bridgeObjectRelease();
    unsigned int v18 = *MEMORY[0x1E4F4E7A0];
    if ((v17 & 0x100000000) == 0) {
      unsigned int v18 = v17;
    }
    *(void *)&v21[0] = __PAIR64__(v16, v18);
    type metadata accessor for AccessibilityLabeledContentContentModifier.Attachment();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v23[0], (uint64_t)&v30, v20, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v26 = v32;
    uint64_t v27 = v33;
    __n128 v28 = v34;
    unint64_t v29 = v35;
    uint64_t v24 = v30;
    uint64_t v25 = v31;
    return a3();
  }
}

uint64_t type metadata accessor for AccessibilityLabeledContentContentModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v7 == 1) {
    return _ViewInputs.intern<A>(_:id:)();
  }
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(1, a3, a4);
  AGGraphCreateOffsetAttribute2();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedPresentation and conformance ResolvedPresentation();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t type metadata accessor for AccessibilityLabeledContentContentModifier.LabelChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityLabeledContentContentModifier.Attachment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(a3 + 40))(v14);
  uint64_t v6 = v5;
  v13[2] = a2;
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, MEMORY[0x1E4FBB718]);
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_11, (uint64_t)v13, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  uint64_t v11 = v13[5];
  v4(v14, 0);
  return v11;
}

uint64_t (*protocol witness for AccessibilityLabeledContentModifier.presentation.modify in conformance AccessibilityLabeledContentContentModifier<A>())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>)
  {
    type metadata accessor for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>(255, &lazy cache variable for type metadata for AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Label, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for AccessibilityLabeledContentContentModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, (void (*)(void))lazy protocol witness table accessor for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>(255, &lazy cache variable for type metadata for LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for LabeledContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

uint64_t type metadata completion function for ConditionallyBorderedButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NavigationLinkButtonStyle.PayloadV4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for NavigationSplitViewStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for NavigationSplitViewStyleConfiguration.Detail(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ProgressViewStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.Header(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.Footer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.RawContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SearchFieldConfiguration.Control(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SearchFieldConfiguration.Scopes(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SearchFieldConfiguration.Suggestions(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LabelStyleConfiguration.Title(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LabelStyleConfiguration.Icon(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _TextFieldStyleLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchCustomAccessory(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchCustomScopeBar(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchSuggestions(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchField(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ListStyleContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t initializeWithCopy for WindowSceneList.MakeList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  else
  {
    char v4 = v3 & 1;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    outlined copy of SceneID(v5, v6, v3 & 1);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = v4;
  }
  return a1;
}

ValueMetadata *type metadata accessor for NavigationBarItem.TitleDisplayMode()
{
  return &type metadata for NavigationBarItem.TitleDisplayMode;
}

uint64_t type metadata completion function for FocusState()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    long long v15 = *(_OWORD *)v8;
    long long v16 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v16;
    *(_OWORD *)unint64_t v7 = v15;
  }
  else
  {
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v10, v11);
    *(void *)unint64_t v7 = v9;
    *(void *)(v7 + 8) = v10;
    *(unsigned char *)(v7 + 16) = v11;
    uint64_t v12 = *(void **)(v8 + 24);
    *(void *)(v7 + 24) = v12;
    uint64_t v13 = *(void *)(v8 + 40);
    *(void *)(v7 + 32) = *(void *)(v8 + 32);
    *(void *)(v7 + 40) = v13;
    id v14 = v12;
    swift_retain();
  }
  return a1;
}

uint64_t type metadata completion function for NavigationLink()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Array<A>.synthesizedPlacement(of:in:avoiding:distance:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, double (*a3)(uint64_t, double, double, double, double, double, double, double, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  Array<A>.motionVectors(closestTo:in:avoiding:distance:)(a1, a4, a3, a2, (uint64_t)v41, a6, a7, a8, a9);
  uint64_t result = _sSo6CGRectVSgWObTm_0((uint64_t)v41, (uint64_t)&v42, &lazy cache variable for type metadata for (translation: CGSize, scale: CGSize)?, (void (*)(uint64_t))type metadata accessor for (translation: CGSize, scale: CGSize));
  if (v43)
  {
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(unsigned char *)(a5 + 64) = 1;
    return result;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > a1)
  {
    float64x2_t v28 = v42;
    unint64_t v13 = a2 + 72 * a1;
    unsigned __int8 v14 = *(unsigned char *)(v13 + 48);
    uint64_t v15 = *(void *)(v13 + 56);
    unsigned __int8 v16 = *(unsigned char *)(v13 + 64);
    uint64_t v35 = *(void *)(v13 + 40);
    unsigned __int8 v36 = v14;
    uint64_t v37 = v15;
    unsigned __int8 v38 = v16;
    long long v17 = *(_OWORD *)(v13 + 88);
    long long v39 = *(_OWORD *)(v13 + 72);
    long long v40 = v17;
    unsigned int v18 = (void (*)(void *, void))_Placement.anchorPosition.modify();
    *uint64_t v19 = vaddq_f64(v28, *v19);
    v18(v29, 0);
    uint64_t v20 = *(void *)(v13 + 40);
    char v21 = *(unsigned char *)(v13 + 48);
    uint64_t v22 = *(void *)(v13 + 56);
    char v23 = *(unsigned char *)(v13 + 64);
    v29[0] = *(void *)(v13 + 32);
    v29[1] = v20;
    char v30 = v21;
    uint64_t v31 = v22;
    char v32 = v23;
    long long v33 = *(_OWORD *)(v13 + 72);
    long long v34 = *(_OWORD *)(v13 + 88);
    _LazyLayout_PlacedSubview.size.getter();
    uint64_t result = _Placement.proposedSize.setter();
    uint64_t v24 = v36;
    uint64_t v25 = v37;
    uint64_t v26 = v38;
    *(void *)a5 = v35;
    *(void *)(a5 + 8) = v24;
    *(void *)(a5 + 16) = v25;
    *(void *)(a5 + 24) = v26;
    long long v27 = v40;
    *(_OWORD *)(a5 + 32) = v39;
    *(_OWORD *)(a5 + 48) = v27;
    *(unsigned char *)(a5 + 64) = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t LazySubviewPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v84 = a5;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v13 = *(void *)(a6 + 16);
  CGFloat v90 = *(double *)(v13 - 8);
  MEMORY[0x1F4188790](a1);
  int v89 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = *(void *)(v15 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v92 = (char *)&v71 - v16;
  long long v17 = a1[9];
  long long v141 = a1[8];
  long long v142 = v17;
  uint64_t v143 = *((void *)a1 + 20);
  long long v18 = a1[5];
  long long v137 = a1[4];
  long long v138 = v18;
  long long v19 = a1[7];
  long long v139 = a1[6];
  long long v140 = v19;
  long long v20 = a1[1];
  long long v133 = *a1;
  long long v134 = v20;
  long long v21 = a1[3];
  long long v135 = a1[2];
  long long v136 = v21;
  uint64_t v22 = *((void *)a1 + 21);
  uint64_t v23 = *((void *)a1 + 22);
  uint64_t v24 = *((void *)a1 + 23);
  uint64_t v88 = *((void *)a1 + 24);
  uint64_t v25 = *((void *)a1 + 26);
  uint64_t v93 = *((void *)a1 + 25);
  uint64_t v26 = *((void *)a1 + 27);
  uint64_t v27 = *((void *)a1 + 28);
  uint64_t v29 = *((void *)a1 + 29);
  double v28 = *((double *)a1 + 30);
  CGFloat v98 = *((double *)a1 + 31);
  CGFloat v99 = v28;
  double v30 = *((double *)a1 + 32);
  uint64_t v96 = *((void *)a1 + 33);
  CGFloat v97 = v30;
  uint64_t v95 = *((void *)a1 + 34);
  long long v131 = *(long long *)((char *)a1 + 280);
  char v132 = *((unsigned char *)a1 + 296);
  LODWORD(v87) = *(_DWORD *)v8;
  uint64_t v31 = *(void *)(v8 + 136);
  uint64_t v85 = *(void *)(v8 + 128);
  double v32 = *(double *)(v8 + 160);
  *(void *)&long long v21 = *(void *)(v8 + 256);
  uint64_t v81 = *(void *)(v8 + 168);
  double v82 = *(double *)&v21;
  double v83 = *(double *)(v8 + 264);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int v34 = result;
  uint64_t v80 = v31;
  AGGraphGetValue();
  swift_retain();
  LazyLayoutViewCache.subviews(context:)(v34, (uint64_t)v127);
  swift_release();
  *(void *)&long long v100 = 2;
  uint64_t v35 = _LazyLayout_Subviews.firstIndex<A>(id:style:)();
  if (v36)
  {
LABEL_5:
    outlined destroy of _LazyLayout_Subviews((uint64_t)v127);
    return 0;
  }
  double v74 = v32;
  uint64_t v75 = a7;
  uint64_t v76 = a2;
  uint64_t v77 = a8;
  uint64_t v37 = v35;
  unsigned __int8 v38 = *(void (**)(uint64_t, uint64_t))(**(void **)AGGraphGetValue() + 280);
  swift_retain();
  long long v39 = v92;
  uint64_t v40 = AssociatedTypeWitness;
  v38(AssociatedTypeWitness, AssociatedTypeWitness);
  swift_release();
  uint64_t Value = AGGraphGetValue();
  float64x2_t v42 = v89;
  CGFloat v43 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)&v90 + 16))(v89, Value, v13);
  long long v108 = v141;
  long long v109 = v142;
  uint64_t v110 = v143;
  long long v104 = v137;
  long long v105 = v138;
  long long v106 = v139;
  long long v107 = v140;
  long long v100 = v133;
  long long v101 = v134;
  long long v102 = v135;
  long long v103 = v136;
  uint64_t v111 = v22;
  uint64_t v112 = v23;
  uint64_t v44 = v88;
  uint64_t v113 = v24;
  uint64_t v114 = v88;
  uint64_t v45 = v25;
  uint64_t v46 = v93;
  uint64_t v115 = v93;
  uint64_t v116 = v45;
  uint64_t v87 = v45;
  uint64_t v117 = v26;
  uint64_t v118 = v27;
  uint64_t v119 = v29;
  CGFloat v120 = v99;
  CGFloat v121 = v98;
  CGFloat v122 = v97;
  uint64_t v123 = v96;
  uint64_t v124 = v95;
  uint64_t v47 = v39;
  long long v125 = v131;
  char v126 = v132;
  uint64_t v48 = v91;
  (*(void (**)(void *__return_ptr, uint64_t, unsigned char *, long long *, char *, uint64_t, uint64_t))(v91 + 112))(v128, v37, v127, &v100, v47, v13, v91);
  (*(void (**)(char *, uint64_t))(*(void *)&v43 + 8))(v42, v13);
  _sSo6CGRectVSgWObTm_0((uint64_t)v128, (uint64_t)v129, (unint64_t *)&lazy cache variable for type metadata for CGRect?, type metadata accessor for CGRect);
  if (v130)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v40);
    goto LABEL_5;
  }
  int v89 = (char *)v129[0];
  CGFloat v90 = *(double *)&v129[1];
  CGFloat v72 = *(double *)&v129[3];
  CGFloat v73 = *(double *)&v129[2];
  *(void *)&long long v100 = v22;
  *((void *)&v100 + 1) = v23;
  *(void *)&long long v101 = v24;
  *((void *)&v101 + 1) = v44;
  *(void *)&long long v102 = v46;
  *((void *)&v102 + 1) = v87;
  *(void *)&long long v103 = v26;
  *((void *)&v103 + 1) = v27;
  *(void *)&long long v104 = v29;
  *((CGFloat *)&v104 + 1) = v99;
  *(CGFloat *)&long long v105 = v98;
  *((CGFloat *)&v105 + 1) = v97;
  *(void *)&long long v106 = v96;
  *((void *)&v106 + 1) = v95;
  uint64_t v49 = ScrollGeometry.visibleRect.getter();
  double v51 = v50;
  CGFloat v53 = v52;
  double v55 = v54;
  double v57 = v56;
  MEMORY[0x1F4188790](v49);
  uint64_t v58 = v75;
  *(&v71 - 6) = v13;
  *(&v71 - 5) = v58;
  uint64_t v59 = v77;
  *(&v71 - 4) = v48;
  *(&v71 - 3) = v59;
  *(&v71 - 2) = v76;
  uint64_t v60 = v85;
  swift_bridgeObjectRetain();
  unint64_t v61 = specialized Collection.firstIndex(where:)((uint64_t (*)(void *))partial apply for closure #1 in LazySubviewPlacements.makeViewIDTranslation<A>(_:viewID:anchor:), (uint64_t)(&v71 - 8), v60);
  char v63 = v62;
  uint64_t result = swift_bridgeObjectRelease();
  if (v63)
  {
    CGFloat v97 = v57;
    CGFloat v98 = v55;
    CGFloat v99 = v51;
    uint64_t v64 = v86;
    if (v84) {
      static UnitPoint.topLeading.getter();
    }
    uint64_t v68 = AssociatedTypeWitness;
    *(void *)&v144.origin.x = v89;
    v144.origin.y = v90;
    v144.size.height = v72;
    v144.size.width = v73;
    UnitPoint.in(_:)(v144);
    EdgeInsets.negatedInsets.getter();
    CGPoint.offset(by:)();
    double v70 = v69;
    v145.size.width = v98;
    v145.origin.x = v99;
    v145.origin.y = v53;
    v145.size.height = v97;
    double v67 = v70 - UnitPoint.in(_:)(v145).x;
    goto LABEL_19;
  }
  uint64_t v64 = v86;
  if ((v61 & 0x8000000000000000) != 0) {
    goto LABEL_21;
  }
  if (v61 >= *(void *)(v80 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v82 < 0.0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v83 >= 0.0)
  {
    uint64_t v65 = v80 + 32 * v61;
    double v66 = *(double *)(v65 + 32);
    if (v66 < 0.0) {
      double v66 = 0.0;
    }
    if (v82 < v66) {
      double v66 = v82;
    }
    double v67 = *(double *)&v89 - v51 - (v66 - v74);
    uint64_t v68 = AssociatedTypeWitness;
LABEL_19:
    (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v68);
    outlined destroy of _LazyLayout_Subviews((uint64_t)v127);
    return *(void *)&v67;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _sSo6CGRectVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (translation: CGSize, scale: CGSize)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for (translation: CGSize, scale: CGSize)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  for (i = (char *)(a3 + 48); ; i += 72)
  {
    uint64_t v8 = *((void *)i - 1);
    char v9 = *i;
    uint64_t v10 = *((void *)i + 1);
    char v11 = i[16];
    v15[0] = *((void *)i - 2);
    v15[1] = v8;
    char v16 = v9;
    uint64_t v17 = v10;
    char v18 = v11;
    long long v12 = *(_OWORD *)(i + 40);
    long long v19 = *(_OWORD *)(i + 24);
    long long v20 = v12;
    swift_retain();
    char v13 = a1(v15);
    swift_release();
    if (v3 || (v13 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0;
    }
  }
  return v6;
}

{
  uint64_t v3;
  char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v15;
  void v16[4];
  char v17;
  uint64_t v18;

  char v13 = *(void *)(a3 + 16);
  if (!v13) {
    return 0;
  }
  uint64_t v3 = 0;
  for (i = (char *)(a3 + 64); ; i += 40)
  {
    uint64_t v5 = *((void *)i - 4);
    uint64_t v6 = *((void *)i - 3);
    uint64_t v7 = *((void *)i - 2);
    uint64_t v8 = *((void *)i - 1);
    char v9 = *i;
    uint64_t v15 = v3;
    v16[0] = v5;
    v16[1] = v6;
    v16[2] = v7;
    v16[3] = v8;
    uint64_t v17 = v9;
    outlined copy of TableColumnCustomizationID.Base(v5, v6, v7, v8, v9);
    uint64_t v10 = v18;
    char v11 = a1(v16);
    uint64_t result = outlined consume of TableColumnCustomizationID.Base(v5, v6, v7, v8, v9);
    char v18 = v10;
    if (v10) {
      break;
    }
    if (v11) {
      return v15;
    }
    uint64_t v3 = v15 + 1;
    if (v13 == v15 + 1) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in LazySubviewPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)()
{
  return _ViewList_ID.containsID<A>(_:)() & 1;
}

uint64_t _LazyLayout_Subviews.firstIndex<A>(id:style:)()
{
  return _ViewList_Node.firstOffset<A>(forID:style:)();
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyVStackLayout@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _OWORD *a4@<X3>, void (*a5)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, _OWORD *, void, void, unint64_t)@<X6>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v12 = a4[5];
  v20[4] = a4[4];
  v20[5] = v12;
  long long v13 = a4[7];
  v20[6] = a4[6];
  v20[7] = v13;
  long long v14 = a4[1];
  v20[0] = *a4;
  v20[1] = v14;
  long long v15 = a4[3];
  _OWORD v20[2] = a4[2];
  v20[3] = v15;
  uint64_t v16 = *(unsigned int *)(v6 + 20);
  LOBYTE(v18[0]) = *(unsigned char *)(v6 + 16);
  a5(v18, a2, a3, __dst, v20, *(void *)v6, *(void *)(v6 + 8), LOBYTE(v18[0]) | (unint64_t)(v16 << 32));
  return outlined init with take of CGRect?((uint64_t)v18, a6);
}

uint64_t specialized LazyStack<>.boundingRect(at:subviews:context:cache:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  double v9 = *(double *)(a3 + 40);
  if (v9 <= 0.0)
  {
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
LABEL_72:
    *(double *)a8 = v11;
    *(void *)(a8 + 8) = 0;
    *(double *)(a8 + 16) = v12;
    *(double *)(a8 + 24) = v10;
    *(unsigned char *)(a8 + 32) = v9 <= 0.0;
    return result;
  }
  uint64_t v18 = result;
  int v19 = *(_DWORD *)(a3 + 12);
  long long v20 = *(_OWORD *)(a3 + 104);
  long long v21 = *(_OWORD *)(a3 + 136);
  *(_OWORD *)&v82[16] = *(_OWORD *)(a3 + 120);
  long long v83 = v21;
  long long v84 = *(_OWORD *)(a3 + 152);
  long long v22 = *(_OWORD *)(a3 + 72);
  long long v79 = *(_OWORD *)(a3 + 56);
  long long v80 = v22;
  long long v81 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)double v82 = v20;
  long long v23 = *(_OWORD *)(a4 + 80);
  long long v105 = *(_OWORD *)(a4 + 64);
  long long v106 = v23;
  long long v24 = *(_OWORD *)(a4 + 112);
  long long v107 = *(_OWORD *)(a4 + 96);
  long long v108 = v24;
  long long v25 = *(_OWORD *)(a4 + 16);
  long long v101 = *(_OWORD *)a4;
  long long v102 = v25;
  long long v26 = *(_OWORD *)(a4 + 48);
  long long v103 = *(_OWORD *)(a4 + 32);
  long long v104 = v26;
  outlined retain of _LazyStack_Cache<LazyVStackLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  double v28 = v27;
  double v30 = v29;
  double v31 = 0.0;
  if (v19 != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v33 = Value[1];
    long long v79 = *Value;
    long long v80 = v33;
    MEMORY[0x18C114450]();
  }
  uint64_t v35 = *(void *)(a4 + 112);
  uint64_t v34 = *(void *)(a4 + 120);
  v110[0] = v35;
  double v37 = *(double *)(a4 + 96);
  double v36 = *(double *)(a4 + 104);
  if (v37 > 0.0 && v30 - v28 > 0.0)
  {
    double v38 = vabdd_f64(v37, v30 - v28);
    if (v36 <= 0.0 || v31 <= 0.0)
    {
      if (v38 >= 0.01) {
        goto LABEL_43;
      }
      goto LABEL_14;
    }
    if (v38 >= 0.01)
    {
LABEL_43:
      uint64_t v109 = v34;
      uint64_t v59 = MEMORY[0x1E4FBC860];
      unint64_t v60 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      outlined release of _LazyLayout_Placements((uint64_t)v110);
      *(void *)&long long v108 = v60;
      unint64_t v61 = specialized Dictionary.init(dictionaryLiteral:)(v59);
      outlined release of _LazyLayout_Placements((uint64_t)&v109);
      *((void *)&v108 + 1) = v61;
      int v39 = 1;
      if (!*(void *)(v60 + 16)) {
        goto LABEL_44;
      }
      goto LABEL_16;
    }
LABEL_13:
    if (vabdd_f64(v36, v31) >= 0.01) {
      goto LABEL_43;
    }
LABEL_14:
    int v39 = 0;
    goto LABEL_15;
  }
  int v39 = 0;
  if (v36 > 0.0 && v31 > 0.0) {
    goto LABEL_13;
  }
LABEL_15:
  if (!*(void *)(v35 + 16))
  {
LABEL_44:
    uint64_t v78 = 0;
    *(void *)&long long v79 = 0;
    specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v79, &v78, 1, a2, (uint64_t)&v101, a5, a6, a7 & 0xFFFFFFFF00000001, v9, v9);
  }
LABEL_16:
  uint64_t v77 = a2;
  long long v40 = v108;
  *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v108, *((uint64_t *)&v108 + 1)));
  double v43 = v42;
  double v44 = *(double *)&result;
  if (v41) {
    double v45 = 0.0;
  }
  else {
    double v45 = *(double *)&result;
  }
  uint64_t v46 = *(void *)(a4 + 48);
  double v11 = (v43 + v45) * (double)v18;
  if (v46 == *(void *)(a4 + 56) || (*(unsigned char *)(a4 + 24) & 1) != 0) {
    goto LABEL_68;
  }
  BOOL v48 = v9 != *(double *)(a4 + 8) || *(void *)a4 != 1;
  if (v9 != *(double *)(a4 + 16)) {
    BOOL v48 = 1;
  }
  if ((v39 | v48)) {
    goto LABEL_68;
  }
  if ((v18 < 1) | v41 & 1) {
    double v44 = 0.0;
  }
  uint64_t v49 = v18 - v46;
  if (__OFSUB__(v18, v46))
  {
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v50 = v18 - v46;
  if (v49 < 0)
  {
    uint64_t v50 = v46 - v18;
    if (__OFSUB__(0, v49)) {
      goto LABEL_75;
    }
  }
  double v11 = v11 - v44;
  if (*(void *)(v40 + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v40, *((uint64_t *)&v40 + 1)));
    double v52 = *(double *)&result;
    if (v53) {
      double v52 = 0.0;
    }
    double v54 = (v51 + v52) * (double)v50;
    if (*(void *)(v40 + 16))
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v40, *((uint64_t *)&v40 + 1)));
      double v56 = *(double *)&result;
      if (v57) {
        double v56 = 0.0;
      }
      double v58 = v55 + v56;
    }
    else
    {
      double v58 = 32.0;
    }
    uint64_t v49 = v18 - v46;
  }
  else
  {
    double v58 = 32.0;
    double v54 = (double)v50 * 32.0;
  }
  double v62 = *(double *)(a4 + 64);
  double v63 = v62 + v58 * (double)v49;
  if (v63 >= 0.0) {
    double v11 = v63;
  }
  double v12 = -1.0;
  if (v54 >= (*(double *)(a4 + 88) - *(double *)(a4 + 80)) * 3.0)
  {
    uint64_t v71 = v77;
  }
  else
  {
    memset(v93, 0, sizeof(v93));
    long long v92 = 0u;
    long long v91 = 0u;
    long long v90 = 0u;
    long long v89 = 0u;
    uint64_t v64 = MEMORY[0x1E4FBC860];
    uint64_t v65 = v49;
    unint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v67 = specialized Dictionary.init(dictionaryLiteral:)(v64);
    *(void *)&long long v79 = a5;
    *((void *)&v79 + 1) = a6;
    LOBYTE(v80) = a7 & 1;
    DWORD1(v80) = HIDWORD(a7);
    *(void *)&long long v81 = 1;
    *((double *)&v81 + 1) = v9;
    *(double *)double v82 = v9;
    BYTE8(v80) = 0;
    *(int64x2_t *)&v82[8] = vdupq_n_s64(0x7FF0000000000000uLL);
    *(_DWORD *)&v82[24] = 0;
    *(void *)&long long v83 = v18;
    BYTE8(v83) = 0;
    *(void *)&long long v84 = 0;
    BYTE8(v84) = 0;
    long long v85 = 0uLL;
    char v86 = 1;
    uint64_t v87 = v64;
    uint64_t v88 = 0;
    uint64_t v94 = v64;
    long long v95 = xmmword_188357300;
    long long v96 = xmmword_188357310;
    long long v97 = xmmword_188357310;
    char v98 = 0;
    unint64_t v99 = v66;
    unint64_t v100 = v67;
    if (v65 < 0)
    {
      LOBYTE(v78) = 0;
      uint64_t v72 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v18, v46, v77, 2uLL, &v78);
      specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v72, v46, v18 == 0, v78, 0, v62);
      swift_bridgeObjectRelease();
      uint64_t v69 = v84;
      double v70 = *(double *)&v85;
      uint64_t v68 = v77;
    }
    else
    {
      uint64_t v68 = v77;
      uint64_t v69 = v46;
      double v70 = v62;
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(v68, v69, v18, 0, v70));
    if (*(double *)&v97 >= *((double *)&v97 + 1))
    {
      uint64_t v71 = v77;
    }
    else
    {
      uint64_t v71 = v77;
      if (*(double *)&v97 > *((double *)&v97 + 1))
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (*(double *)&v97 >= 0.0)
      {
        double v12 = *((double *)&v97 + 1) - *(double *)&v97;
        double v11 = *(double *)&v97;
      }
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout));
  }
  if ((uint64_t)v104 <= v18) {
    goto LABEL_67;
  }
  double v73 = *((double *)&v106 + 1) - *(double *)&v106;
  if (*((double *)&v106 + 1) - *(double *)&v106 < 0.0)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  memset(v93, 0, sizeof(v93));
  long long v92 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  uint64_t v74 = MEMORY[0x1E4FBC860];
  unint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
  *(void *)&long long v79 = a5;
  *((void *)&v79 + 1) = a6;
  LOBYTE(v80) = a7 & 1;
  DWORD1(v80) = HIDWORD(a7);
  *(void *)&long long v81 = 1;
  *((double *)&v81 + 1) = v9;
  *(_OWORD *)double v82 = *(unint64_t *)&v9;
  BYTE8(v80) = 0;
  *(double *)&v82[16] = v73;
  *(_DWORD *)&v82[24] = 0;
  *(void *)&long long v83 = v18;
  BYTE8(v83) = 0;
  *(void *)&long long v84 = 0;
  BYTE8(v84) = 0;
  long long v85 = 0uLL;
  char v86 = 1;
  uint64_t v87 = v74;
  uint64_t v88 = 0;
  uint64_t v94 = v74;
  long long v95 = xmmword_188357300;
  long long v96 = xmmword_188357310;
  long long v97 = xmmword_188357310;
  char v98 = 0;
  unint64_t v99 = v75;
  unint64_t v100 = v76;
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(v71, 0, 0, 1, 0.0));
  if (*(double *)&v97 >= *((double *)&v97 + 1))
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
LABEL_67:
    if (v12 >= 0.0)
    {
LABEL_71:
      specialized LazyStack<>.log(_:)(v18, 0xD000000000000010, 0x8000000188328C80, v11, 0.0, v12, v9);
      *(_OWORD *)&v82[16] = v105;
      long long v83 = v106;
      long long v84 = v107;
      long long v85 = v108;
      long long v79 = v101;
      long long v80 = v102;
      long long v81 = v103;
      *(_OWORD *)double v82 = v104;
      *(double *)&uint64_t result = COERCE_DOUBLE(outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v79));
      double v10 = v9;
      goto LABEL_72;
    }
LABEL_68:
    if (*(void *)(v40 + 16)) {
      double v12 = v43;
    }
    else {
      double v12 = 0.0;
    }
    goto LABEL_71;
  }
  if (*(double *)&v97 <= *((double *)&v97 + 1))
  {
    double v12 = *((double *)&v97 + 1) - *(double *)&v97;
    double v11 = *(double *)&v97;
    goto LABEL_66;
  }
LABEL_77:
  __break(1u);
  return result;
}

{
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  long long *Value;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  int v39;
  long long v40;
  char v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  char v53;
  double v54;
  double v55;
  double v56;
  char v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  long long v79;
  long long v80;
  long long v81;
  unsigned char v82[32];
  long long v83;
  long long v84;
  long long v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  unsigned char v93[31];
  uint64_t v94;
  long long v95;
  long long v96;
  long long v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  uint64_t v109;
  void v110[3];

  double v9 = *(double *)(a3 + 32);
  if (v9 <= 0.0)
  {
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
LABEL_72:
    *(void *)a8 = 0;
    *(double *)(a8 + 8) = v11;
    *(double *)(a8 + 16) = v10;
    *(double *)(a8 + 24) = v12;
    *(unsigned char *)(a8 + 32) = v9 <= 0.0;
    return result;
  }
  uint64_t v18 = result;
  int v19 = *(_DWORD *)(a3 + 12);
  long long v20 = *(_OWORD *)(a3 + 104);
  long long v21 = *(_OWORD *)(a3 + 136);
  *(_OWORD *)&v82[16] = *(_OWORD *)(a3 + 120);
  long long v83 = v21;
  long long v84 = *(_OWORD *)(a3 + 152);
  long long v22 = *(_OWORD *)(a3 + 72);
  long long v79 = *(_OWORD *)(a3 + 56);
  long long v80 = v22;
  long long v81 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)double v82 = v20;
  long long v23 = *(_OWORD *)(a4 + 80);
  long long v105 = *(_OWORD *)(a4 + 64);
  long long v106 = v23;
  long long v24 = *(_OWORD *)(a4 + 112);
  long long v107 = *(_OWORD *)(a4 + 96);
  long long v108 = v24;
  long long v25 = *(_OWORD *)(a4 + 16);
  long long v101 = *(_OWORD *)a4;
  long long v102 = v25;
  long long v26 = *(_OWORD *)(a4 + 48);
  long long v103 = *(_OWORD *)(a4 + 32);
  long long v104 = v26;
  outlined retain of _LazyStack_Cache<LazyVStackLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  double v28 = v27;
  double v30 = v29;
  double v31 = 0.0;
  if (v19 != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v33 = Value[1];
    long long v79 = *Value;
    long long v80 = v33;
    MEMORY[0x18C114450]();
  }
  uint64_t v35 = *(void *)(a4 + 112);
  uint64_t v34 = *(void *)(a4 + 120);
  v110[0] = v35;
  double v37 = *(double *)(a4 + 96);
  double v36 = *(double *)(a4 + 104);
  if (v37 > 0.0 && v30 - v28 > 0.0)
  {
    double v38 = vabdd_f64(v37, v30 - v28);
    if (v36 <= 0.0 || v31 <= 0.0)
    {
      if (v38 >= 0.01) {
        goto LABEL_43;
      }
      goto LABEL_14;
    }
    if (v38 >= 0.01)
    {
LABEL_43:
      uint64_t v109 = v34;
      uint64_t v59 = MEMORY[0x1E4FBC860];
      unint64_t v60 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      outlined release of _LazyLayout_Placements((uint64_t)v110);
      *(void *)&long long v108 = v60;
      unint64_t v61 = specialized Dictionary.init(dictionaryLiteral:)(v59);
      outlined release of _LazyLayout_Placements((uint64_t)&v109);
      *((void *)&v108 + 1) = v61;
      int v39 = 1;
      if (!*(void *)(v60 + 16)) {
        goto LABEL_44;
      }
      goto LABEL_16;
    }
LABEL_13:
    if (vabdd_f64(v36, v31) >= 0.01) {
      goto LABEL_43;
    }
LABEL_14:
    int v39 = 0;
    goto LABEL_15;
  }
  int v39 = 0;
  if (v36 > 0.0 && v31 > 0.0) {
    goto LABEL_13;
  }
LABEL_15:
  if (!*(void *)(v35 + 16))
  {
LABEL_44:
    uint64_t v78 = 0;
    *(void *)&long long v79 = 0;
    specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v79, &v78, 1, a2, (uint64_t)&v101, a5, a6, a7 & 0xFFFFFFFF00000001, v9, v9);
  }
LABEL_16:
  uint64_t v77 = a2;
  long long v40 = v108;
  *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v108, *((uint64_t *)&v108 + 1)));
  double v43 = v42;
  double v44 = *(double *)&result;
  if (v41) {
    double v45 = 0.0;
  }
  else {
    double v45 = *(double *)&result;
  }
  uint64_t v46 = *(void *)(a4 + 48);
  double v11 = (v43 + v45) * (double)v18;
  if (v46 == *(void *)(a4 + 56) || (*(unsigned char *)(a4 + 24) & 1) != 0) {
    goto LABEL_68;
  }
  BOOL v48 = v9 != *(double *)(a4 + 8) || *(void *)a4 != 1;
  if (v9 != *(double *)(a4 + 16)) {
    BOOL v48 = 1;
  }
  if ((v39 | v48)) {
    goto LABEL_68;
  }
  if ((v18 < 1) | v41 & 1) {
    double v44 = 0.0;
  }
  uint64_t v49 = v18 - v46;
  if (__OFSUB__(v18, v46))
  {
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v50 = v18 - v46;
  if (v49 < 0)
  {
    uint64_t v50 = v46 - v18;
    if (__OFSUB__(0, v49)) {
      goto LABEL_75;
    }
  }
  double v11 = v11 - v44;
  if (*(void *)(v40 + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v40, *((uint64_t *)&v40 + 1)));
    double v52 = *(double *)&result;
    if (v53) {
      double v52 = 0.0;
    }
    double v54 = (v51 + v52) * (double)v50;
    if (*(void *)(v40 + 16))
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v40, *((uint64_t *)&v40 + 1)));
      double v56 = *(double *)&result;
      if (v57) {
        double v56 = 0.0;
      }
      double v58 = v55 + v56;
    }
    else
    {
      double v58 = 32.0;
    }
    uint64_t v49 = v18 - v46;
  }
  else
  {
    double v58 = 32.0;
    double v54 = (double)v50 * 32.0;
  }
  double v62 = *(double *)(a4 + 64);
  double v63 = v62 + v58 * (double)v49;
  if (v63 >= 0.0) {
    double v11 = v63;
  }
  double v12 = -1.0;
  if (v54 >= (*(double *)(a4 + 88) - *(double *)(a4 + 80)) * 3.0)
  {
    uint64_t v71 = v77;
  }
  else
  {
    memset(v93, 0, sizeof(v93));
    long long v92 = 0u;
    long long v91 = 0u;
    long long v90 = 0u;
    long long v89 = 0u;
    uint64_t v64 = MEMORY[0x1E4FBC860];
    uint64_t v65 = v49;
    unint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v67 = specialized Dictionary.init(dictionaryLiteral:)(v64);
    *(void *)&long long v79 = a5;
    *((void *)&v79 + 1) = a6;
    LOBYTE(v80) = a7 & 1;
    DWORD1(v80) = HIDWORD(a7);
    *(void *)&long long v81 = 1;
    *((double *)&v81 + 1) = v9;
    *(double *)double v82 = v9;
    BYTE8(v80) = 1;
    *(int64x2_t *)&v82[8] = vdupq_n_s64(0x7FF0000000000000uLL);
    *(_DWORD *)&v82[24] = 0;
    *(void *)&long long v83 = v18;
    BYTE8(v83) = 0;
    *(void *)&long long v84 = 0;
    BYTE8(v84) = 0;
    long long v85 = 0uLL;
    char v86 = 1;
    uint64_t v87 = v64;
    uint64_t v88 = 0;
    uint64_t v94 = v64;
    long long v95 = xmmword_188357300;
    long long v96 = xmmword_188357310;
    long long v97 = xmmword_188357310;
    char v98 = 0;
    unint64_t v99 = v66;
    unint64_t v100 = v67;
    if (v65 < 0)
    {
      LOBYTE(v78) = 0;
      uint64_t v72 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v18, v46, v77, 2uLL, &v78);
      specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v72, v46, v18 == 0, v78, 0, v62);
      swift_bridgeObjectRelease();
      uint64_t v69 = v84;
      double v70 = *(double *)&v85;
      uint64_t v68 = v77;
    }
    else
    {
      uint64_t v68 = v77;
      uint64_t v69 = v46;
      double v70 = v62;
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(v68, v69, v18, 0, v70));
    if (*(double *)&v97 >= *((double *)&v97 + 1))
    {
      uint64_t v71 = v77;
    }
    else
    {
      uint64_t v71 = v77;
      if (*(double *)&v97 > *((double *)&v97 + 1))
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (*(double *)&v97 >= 0.0)
      {
        double v12 = *((double *)&v97 + 1) - *(double *)&v97;
        double v11 = *(double *)&v97;
      }
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout));
  }
  if ((uint64_t)v104 <= v18) {
    goto LABEL_67;
  }
  double v73 = *((double *)&v106 + 1) - *(double *)&v106;
  if (*((double *)&v106 + 1) - *(double *)&v106 < 0.0)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  memset(v93, 0, sizeof(v93));
  long long v92 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  uint64_t v74 = MEMORY[0x1E4FBC860];
  unint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
  *(void *)&long long v79 = a5;
  *((void *)&v79 + 1) = a6;
  LOBYTE(v80) = a7 & 1;
  DWORD1(v80) = HIDWORD(a7);
  *(void *)&long long v81 = 1;
  *((double *)&v81 + 1) = v9;
  *(_OWORD *)double v82 = *(unint64_t *)&v9;
  BYTE8(v80) = 1;
  *(double *)&v82[16] = v73;
  *(_DWORD *)&v82[24] = 0;
  *(void *)&long long v83 = v18;
  BYTE8(v83) = 0;
  *(void *)&long long v84 = 0;
  BYTE8(v84) = 0;
  long long v85 = 0uLL;
  char v86 = 1;
  uint64_t v87 = v74;
  uint64_t v88 = 0;
  uint64_t v94 = v74;
  long long v95 = xmmword_188357300;
  long long v96 = xmmword_188357310;
  long long v97 = xmmword_188357310;
  char v98 = 0;
  unint64_t v99 = v75;
  unint64_t v100 = v76;
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(v71, 0, 0, 1, 0.0));
  if (*(double *)&v97 >= *((double *)&v97 + 1))
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
LABEL_67:
    if (v12 >= 0.0)
    {
LABEL_71:
      specialized LazyStack<>.log(_:)(v18, 0xD000000000000010, 0x8000000188328BB0, 0.0, v11, v9, v12);
      *(_OWORD *)&v82[16] = v105;
      long long v83 = v106;
      long long v84 = v107;
      long long v85 = v108;
      long long v79 = v101;
      long long v80 = v102;
      long long v81 = v103;
      *(_OWORD *)double v82 = v104;
      *(double *)&uint64_t result = COERCE_DOUBLE(outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v79));
      double v10 = v9;
      goto LABEL_72;
    }
LABEL_68:
    if (*(void *)(v40 + 16)) {
      double v12 = v43;
    }
    else {
      double v12 = 0.0;
    }
    goto LABEL_71;
  }
  if (*(double *)&v97 <= *((double *)&v97 + 1))
  {
    double v12 = *((double *)&v97 + 1) - *(double *)&v97;
    double v11 = *(double *)&v97;
    goto LABEL_66;
  }
LABEL_77:
  __break(1u);
  return result;
}

uint64_t specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, const void *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v7 = a7;
  unint64_t v12 = a7 & 0xFFFFFFFF00000000;
  memcpy(__dst, a2, 0x129uLL);
  long long v13 = a3[5];
  long long v96 = a3[4];
  long long v97 = v13;
  long long v14 = a3[7];
  long long v98 = a3[6];
  long long v99 = v14;
  long long v15 = a3[1];
  long long v92 = *a3;
  long long v93 = v15;
  long long v16 = a3[3];
  long long v94 = a3[2];
  long long v95 = v16;
  outlined retain of _LazyStack_Cache<LazyVStackLayout>((uint64_t)a3);
  specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(a1, (uint64_t)__dst, (uint64_t)&v92, a5, a6, v12 | v7 & 1, (uint64_t)__src);
  if (!*(void *)&__src[136])
  {
    *(_OWORD *)&v87[64] = v96;
    *(_OWORD *)&v87[80] = v97;
    *(_OWORD *)&v87[96] = v98;
    *(_OWORD *)&v87[112] = v99;
    *(_OWORD *)uint64_t v87 = v92;
    *(_OWORD *)&v87[16] = v93;
    *(_OWORD *)&v87[32] = v94;
    *(_OWORD *)&v87[48] = v95;
    outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v87);
    return outlined destroy of ScrollableCollection?((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?);
  }
  memcpy(v87, __src, sizeof(v87));
  long long v17 = v83;
  long long v18 = v84;
  uint64_t v19 = v85;
  __int16 v20 = WORD4(v85);
  long long v21 = v86;
  long long v88 = v83;
  long long v89 = v84;
  *(void *)&long long v90 = v85;
  WORD4(v90) = WORD4(v85);
  long long v91 = v86;
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)v87, (uint64_t)__src);
  long long v83 = v17;
  long long v84 = v18;
  *(void *)&long long v85 = v19;
  WORD4(v85) = v20;
  long long v86 = v21;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)v87, (uint64_t)__src);
  long long v101 = v88;
  long long v102 = v89;
  long long v103 = v90;
  long long v104 = v91;
  memcpy(v81, __src, 0x148uLL);
  uint64_t v22 = specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(a1, (uint64_t)__dst, (uint64_t)&v92, (uint64_t)v81, (uint64_t)&v101);
  if (v24)
  {
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v81);
    outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>));
    *(_OWORD *)&__src[64] = v96;
    *(_OWORD *)&__src[80] = v97;
    *(_OWORD *)&__src[96] = v98;
    *(_OWORD *)&__src[112] = v99;
    *(_OWORD *)__src = v92;
    *(_OWORD *)&__src[16] = v93;
    *(_OWORD *)&__src[32] = v94;
    *(_OWORD *)&__src[48] = v95;
    double v54 = (long long *)__src;
    return outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v54);
  }
  uint64_t v25 = v22;
  double v26 = v23;
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)v87, (uint64_t)__src);
  double v27 = *((double *)&v102 + 1);
  long long v83 = v101;
  long long v84 = v102;
  long long v85 = v103;
  long long v86 = v104;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  if (v27 == *(double *)&v97) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = 0;
  }
  specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, v25, v28, v27 != *(double *)&v97, v26);
  *(_OWORD *)&__src[192] = *(_OWORD *)&__dst[31];
  *(_OWORD *)&__src[208] = *(_OWORD *)&__dst[33];
  *(_OWORD *)&__src[224] = *(_OWORD *)&__dst[35];
  __src[240] = __dst[37];
  *(_OWORD *)&__src[128] = *(_OWORD *)&__dst[23];
  *(_OWORD *)&__src[144] = *(_OWORD *)&__dst[25];
  *(_OWORD *)&__src[160] = *(_OWORD *)&__dst[27];
  *(_OWORD *)&__src[176] = *(_OWORD *)&__dst[29];
  *(_OWORD *)&__src[64] = *(_OWORD *)&__dst[15];
  *(_OWORD *)&__src[80] = *(_OWORD *)&__dst[17];
  *(_OWORD *)&__src[96] = *(_OWORD *)&__dst[19];
  *(_OWORD *)&__src[112] = *(_OWORD *)&__dst[21];
  *(_OWORD *)__src = *(_OWORD *)&__dst[7];
  *(_OWORD *)&__src[16] = *(_OWORD *)&__dst[9];
  *(_OWORD *)&__src[32] = *(_OWORD *)&__dst[11];
  *(_OWORD *)&__src[48] = *(_OWORD *)&__dst[13];
  long long v71 = *(_OWORD *)&__dst[29];
  long long v72 = *(_OWORD *)&__dst[31];
  long long v73 = *(_OWORD *)&__dst[33];
  long long v67 = *(_OWORD *)&__dst[21];
  long long v68 = *(_OWORD *)&__dst[23];
  long long v69 = *(_OWORD *)&__dst[25];
  long long v70 = *(_OWORD *)&__dst[27];
  ScrollGeometry.visibleRect.getter();
  uint64_t v29 = *(void *)(v81[31] + 16);
  if (!v29)
  {
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v81);
    outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>));
    long long v71 = v96;
    long long v72 = v97;
    long long v73 = v98;
    long long v74 = v99;
    long long v67 = v92;
    long long v68 = v93;
    long long v69 = v94;
    long long v70 = v95;
    double v54 = &v67;
    return outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v54);
  }
  char v57 = 0;
  uint64_t v58 = 0;
  uint64_t v66 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  char v56 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v30 = swift_bridgeObjectRetain() + 48;
  char v65 = 1;
  double v31 = INFINITY;
  do
  {
    uint64_t v32 = *(void *)(v30 - 16);
    uint64_t v33 = *(void *)(v30 - 8);
    char v34 = *(unsigned char *)v30;
    uint64_t v35 = *(void *)(v30 + 8);
    char v36 = *(unsigned char *)(v30 + 16);
    uint64_t v37 = *(void *)(v30 + 24);
    uint64_t v38 = *(void *)(v30 + 32);
    uint64_t v40 = *(void *)(v30 + 40);
    uint64_t v39 = *(void *)(v30 + 48);
    *(void *)&long long v67 = v33;
    BYTE8(v67) = v34;
    *(void *)&long long v68 = v35;
    BYTE8(v68) = v36;
    *(void *)&long long v69 = v37;
    *((void *)&v69 + 1) = v38;
    *(void *)&long long v70 = v40;
    *((void *)&v70 + 1) = v39;
    uint64_t v75 = *(void *)(v32 + 32);
    uint64_t v76 = *(void *)(v32 + 40);
    swift_retain_n();
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
      uint64_t v43 = v75;
      uint64_t v42 = v76;
    }
    else
    {
      uint64_t Value = (uint64_t *)AGGraphGetValue();
      uint64_t v43 = *Value;
      uint64_t v42 = Value[1];
      uint64_t v75 = *Value;
      uint64_t v76 = v42;
      swift_retain();
    }
    uint64_t v79 = v43;
    uint64_t v80 = v42;
    uint64_t v75 = v33;
    LOBYTE(v76) = v34;
    uint64_t v77 = v35;
    char v78 = v36;
    LayoutComputer.sizeThatFits(_:)();
    unint64_t v45 = v44;
    unint64_t v47 = v46;
    swift_release();
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v47, v45));
    long long v67 = *(_OWORD *)(v32 + 32);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
      uint64_t v49 = *((void *)&v67 + 1);
      uint64_t v50 = v67;
    }
    else
    {
      BOOL v48 = (uint64_t *)AGGraphGetValue();
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *(void *)&long long v67 = *v48;
      *((void *)&v67 + 1) = v49;
      swift_retain();
    }
    uint64_t v75 = v50;
    uint64_t v76 = v49;
    *(void *)&long long v67 = v33;
    BYTE8(v67) = v34;
    *(void *)&long long v68 = v35;
    BYTE8(v68) = v36;
    LayoutComputer.sizeThatFits(_:)();
    swift_release();
    swift_release();
    distance(_:_:)();
    if (v51 >= v31)
    {
      swift_release();
    }
    else
    {
      double v52 = v51;
      swift_release();
      char v65 = 0;
      uint64_t v63 = v38;
      uint64_t v64 = v37;
      uint64_t v61 = v39;
      uint64_t v62 = v40;
      char v57 = v34;
      uint64_t v58 = v25;
      uint64_t v66 = v32;
      uint64_t v59 = v35;
      uint64_t v60 = v33;
      char v56 = v36;
      double v31 = v52;
    }
    ++v25;
    v30 += 72;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease();
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v81);
  outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>));
  long long v71 = v96;
  long long v72 = v97;
  long long v73 = v98;
  long long v74 = v99;
  long long v67 = v92;
  long long v68 = v93;
  long long v69 = v94;
  long long v70 = v95;
  uint64_t result = outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v67);
  if (v66)
  {
    if (v65)
    {
      return swift_release();
    }
    else
    {
      *(void *)a4 = v58;
      *(unsigned char *)(a4 + 8) = 0;
      uint64_t result = swift_release();
      *(void *)(a4 + 16) = v66;
      *(void *)(a4 + 24) = v60;
      *(void *)(a4 + 32) = v57 & 1;
      *(void *)(a4 + 40) = v59;
      *(void *)(a4 + 48) = v56 & 1;
      *(void *)(a4 + 56) = v64;
      *(void *)(a4 + 64) = v63;
      *(void *)(a4 + 72) = v62;
      *(void *)(a4 + 80) = v61;
    }
  }
  return result;
}

{
  char v7;
  unint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  __int16 v20;
  long long v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *Value;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t result;
  long long *v54;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  void v81[42];
  unsigned char __src[328];
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  unsigned char v87[328];
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  void __dst[38];
  long long v101;
  long long v102;
  long long v103;
  long long v104;

  char v7 = a7;
  unint64_t v12 = a7 & 0xFFFFFFFF00000000;
  memcpy(__dst, a2, 0x129uLL);
  long long v13 = a3[5];
  long long v96 = a3[4];
  long long v97 = v13;
  long long v14 = a3[7];
  long long v98 = a3[6];
  long long v99 = v14;
  long long v15 = a3[1];
  long long v92 = *a3;
  long long v93 = v15;
  long long v16 = a3[3];
  long long v94 = a3[2];
  long long v95 = v16;
  outlined retain of _LazyStack_Cache<LazyVStackLayout>((uint64_t)a3);
  specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(a1, (uint64_t)__dst, (uint64_t)&v92, a5, a6, v12 | v7 & 1, (uint64_t)__src);
  if (!*(void *)&__src[136])
  {
    *(_OWORD *)&v87[64] = v96;
    *(_OWORD *)&v87[80] = v97;
    *(_OWORD *)&v87[96] = v98;
    *(_OWORD *)&v87[112] = v99;
    *(_OWORD *)uint64_t v87 = v92;
    *(_OWORD *)&v87[16] = v93;
    *(_OWORD *)&v87[32] = v94;
    *(_OWORD *)&v87[48] = v95;
    outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v87);
    return outlined destroy of ScrollableCollection?((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?);
  }
  memcpy(v87, __src, sizeof(v87));
  long long v17 = v83;
  long long v18 = v84;
  uint64_t v19 = v85;
  __int16 v20 = WORD4(v85);
  long long v21 = v86;
  long long v88 = v83;
  long long v89 = v84;
  *(void *)&long long v90 = v85;
  WORD4(v90) = WORD4(v85);
  long long v91 = v86;
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)v87, (uint64_t)__src);
  long long v83 = v17;
  long long v84 = v18;
  *(void *)&long long v85 = v19;
  WORD4(v85) = v20;
  long long v86 = v21;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)v87, (uint64_t)__src);
  long long v101 = v88;
  long long v102 = v89;
  long long v103 = v90;
  long long v104 = v91;
  memcpy(v81, __src, 0x148uLL);
  uint64_t v22 = specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(a1, (uint64_t)__dst, (uint64_t)&v92, (uint64_t)v81, (uint64_t)&v101);
  if (v24)
  {
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v81);
    outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>));
    *(_OWORD *)&__src[64] = v96;
    *(_OWORD *)&__src[80] = v97;
    *(_OWORD *)&__src[96] = v98;
    *(_OWORD *)&__src[112] = v99;
    *(_OWORD *)__src = v92;
    *(_OWORD *)&__src[16] = v93;
    *(_OWORD *)&__src[32] = v94;
    *(_OWORD *)&__src[48] = v95;
    double v54 = (long long *)__src;
    return outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v54);
  }
  uint64_t v25 = v22;
  double v26 = v23;
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)v87, (uint64_t)__src);
  double v27 = *((double *)&v102 + 1);
  long long v83 = v101;
  long long v84 = v102;
  long long v85 = v103;
  long long v86 = v104;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  if (v27 == *(double *)&v97) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = 0;
  }
  specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, v25, v28, v27 != *(double *)&v97, v26);
  *(_OWORD *)&__src[192] = *(_OWORD *)&__dst[31];
  *(_OWORD *)&__src[208] = *(_OWORD *)&__dst[33];
  *(_OWORD *)&__src[224] = *(_OWORD *)&__dst[35];
  __src[240] = __dst[37];
  *(_OWORD *)&__src[128] = *(_OWORD *)&__dst[23];
  *(_OWORD *)&__src[144] = *(_OWORD *)&__dst[25];
  *(_OWORD *)&__src[160] = *(_OWORD *)&__dst[27];
  *(_OWORD *)&__src[176] = *(_OWORD *)&__dst[29];
  *(_OWORD *)&__src[64] = *(_OWORD *)&__dst[15];
  *(_OWORD *)&__src[80] = *(_OWORD *)&__dst[17];
  *(_OWORD *)&__src[96] = *(_OWORD *)&__dst[19];
  *(_OWORD *)&__src[112] = *(_OWORD *)&__dst[21];
  *(_OWORD *)__src = *(_OWORD *)&__dst[7];
  *(_OWORD *)&__src[16] = *(_OWORD *)&__dst[9];
  *(_OWORD *)&__src[32] = *(_OWORD *)&__dst[11];
  *(_OWORD *)&__src[48] = *(_OWORD *)&__dst[13];
  long long v71 = *(_OWORD *)&__dst[29];
  long long v72 = *(_OWORD *)&__dst[31];
  long long v73 = *(_OWORD *)&__dst[33];
  long long v67 = *(_OWORD *)&__dst[21];
  long long v68 = *(_OWORD *)&__dst[23];
  long long v69 = *(_OWORD *)&__dst[25];
  long long v70 = *(_OWORD *)&__dst[27];
  ScrollGeometry.visibleRect.getter();
  uint64_t v29 = *(void *)(v81[31] + 16);
  if (!v29)
  {
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v81);
    outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>));
    long long v71 = v96;
    long long v72 = v97;
    long long v73 = v98;
    long long v74 = v99;
    long long v67 = v92;
    long long v68 = v93;
    long long v69 = v94;
    long long v70 = v95;
    double v54 = &v67;
    return outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v54);
  }
  char v57 = 0;
  uint64_t v58 = 0;
  uint64_t v66 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  char v56 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v30 = swift_bridgeObjectRetain() + 48;
  char v65 = 1;
  double v31 = INFINITY;
  do
  {
    uint64_t v32 = *(void *)(v30 - 16);
    uint64_t v33 = *(void *)(v30 - 8);
    char v34 = *(unsigned char *)v30;
    uint64_t v35 = *(void *)(v30 + 8);
    char v36 = *(unsigned char *)(v30 + 16);
    uint64_t v37 = *(void *)(v30 + 24);
    uint64_t v38 = *(void *)(v30 + 32);
    uint64_t v40 = *(void *)(v30 + 40);
    uint64_t v39 = *(void *)(v30 + 48);
    *(void *)&long long v67 = v33;
    BYTE8(v67) = v34;
    *(void *)&long long v68 = v35;
    BYTE8(v68) = v36;
    *(void *)&long long v69 = v37;
    *((void *)&v69 + 1) = v38;
    *(void *)&long long v70 = v40;
    *((void *)&v70 + 1) = v39;
    uint64_t v75 = *(void *)(v32 + 32);
    uint64_t v76 = *(void *)(v32 + 40);
    swift_retain_n();
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
      uint64_t v43 = v75;
      uint64_t v42 = v76;
    }
    else
    {
      uint64_t Value = (uint64_t *)AGGraphGetValue();
      uint64_t v43 = *Value;
      uint64_t v42 = Value[1];
      uint64_t v75 = *Value;
      uint64_t v76 = v42;
      swift_retain();
    }
    uint64_t v79 = v43;
    uint64_t v80 = v42;
    uint64_t v75 = v33;
    LOBYTE(v76) = v34;
    uint64_t v77 = v35;
    char v78 = v36;
    LayoutComputer.sizeThatFits(_:)();
    unint64_t v45 = v44;
    unint64_t v47 = v46;
    swift_release();
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v47, v45));
    long long v67 = *(_OWORD *)(v32 + 32);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
      uint64_t v49 = *((void *)&v67 + 1);
      uint64_t v50 = v67;
    }
    else
    {
      BOOL v48 = (uint64_t *)AGGraphGetValue();
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *(void *)&long long v67 = *v48;
      *((void *)&v67 + 1) = v49;
      swift_retain();
    }
    uint64_t v75 = v50;
    uint64_t v76 = v49;
    *(void *)&long long v67 = v33;
    BYTE8(v67) = v34;
    *(void *)&long long v68 = v35;
    BYTE8(v68) = v36;
    LayoutComputer.sizeThatFits(_:)();
    swift_release();
    swift_release();
    distance(_:_:)();
    if (v51 >= v31)
    {
      swift_release();
    }
    else
    {
      double v52 = v51;
      swift_release();
      char v65 = 0;
      uint64_t v63 = v38;
      uint64_t v64 = v37;
      uint64_t v61 = v39;
      uint64_t v62 = v40;
      char v57 = v34;
      uint64_t v58 = v25;
      uint64_t v66 = v32;
      uint64_t v59 = v35;
      uint64_t v60 = v33;
      char v56 = v36;
      double v31 = v52;
    }
    ++v25;
    v30 += 72;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease();
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v81);
  outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>));
  long long v71 = v96;
  long long v72 = v97;
  long long v73 = v98;
  long long v74 = v99;
  long long v67 = v92;
  long long v68 = v93;
  long long v69 = v94;
  long long v70 = v95;
  uint64_t result = outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v67);
  if (v66)
  {
    if (v65)
    {
      return swift_release();
    }
    else
    {
      *(void *)a4 = v58;
      *(unsigned char *)(a4 + 8) = 0;
      uint64_t result = swift_release();
      *(void *)(a4 + 16) = v66;
      *(void *)(a4 + 24) = v60;
      *(void *)(a4 + 32) = v57 & 1;
      *(void *)(a4 + 40) = v59;
      *(void *)(a4 + 48) = v56 & 1;
      *(void *)(a4 + 56) = v64;
      *(void *)(a4 + 64) = v63;
      *(void *)(a4 + 72) = v62;
      *(void *)(a4 + 80) = v61;
    }
  }
  return result;
}

uint64_t specialized StackPlacement.log(_:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v16._countAndFlagsBits = 0x20676E6963616C70;
    v16._object = (void *)0xEE0023206D6F7266;
    String.append(_:)(v16);
    v32._countAndFlagsBits = a5;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 8236;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 544106784;
    v20._object = (void *)0xE400000000000000;
    String.append(_:)(v20);
    double v33 = a3;
    double v34 = a2;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 3026478;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    uint64_t v24 = v35;
    unint64_t v23 = v36;
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = v24;
      uint64_t v28 = v27;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v35 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      v32._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000047, a6, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v25, v26, "%s: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v29, -1, -1);
      MEMORY[0x18C119C60](v28, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  double v33;
  double v34;
  uint64_t v35;
  unint64_t v36;

  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v16._countAndFlagsBits = 0x20676E6963616C70;
    v16._object = (void *)0xEE0023206D6F7266;
    String.append(_:)(v16);
    v32._countAndFlagsBits = a5;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 8236;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 544106784;
    v20._object = (void *)0xE400000000000000;
    String.append(_:)(v20);
    double v33 = a3;
    double v34 = a2;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 3026478;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    uint64_t v24 = v35;
    unint64_t v23 = v36;
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = v24;
      uint64_t v28 = v27;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v35 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      v32._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000046, a6, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v25, v26, "%s: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v29, -1, -1);
      MEMORY[0x18C119C60](v28, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

void specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = a6;
  unint64_t v14 = a6 & 0xFFFFFFFF00000000;
  specialized LazyStack<>.placer(subviews:context:cache:)(a2, a3, a4, a5, a6 & 0xFFFFFFFF00000001, (uint64_t)&v57);
  if (!(void)v63)
  {
    outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)&v57, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
    *(void *)(a7 + 384) = 0;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    return;
  }
  long long v91 = v57;
  long long v92 = v58;
  long long v15 = v59;
  long long v17 = v60;
  uint64_t v16 = *(void *)v61;
  long long v83 = v67;
  long long v84 = v68;
  long long v85 = v69;
  long long v86 = v70;
  long long v79 = v63;
  long long v80 = v64;
  long long v81 = v65;
  long long v82 = v66;
  long long v75 = *(_OWORD *)&v61[8];
  long long v76 = *(_OWORD *)&v61[24];
  long long v77 = *(_OWORD *)&v61[40];
  long long v78 = v62;
  long long v87 = v71;
  long long v88 = v72;
  long long v89 = v73;
  long long v90 = v74;
  long long v18 = *(_OWORD *)(a2 + 104);
  long long v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v61[16] = v19;
  *(_OWORD *)&v61[32] = *(_OWORD *)(a2 + 152);
  long long v20 = *(_OWORD *)(a2 + 72);
  long long v57 = *(_OWORD *)(a2 + 56);
  long long v58 = v20;
  long long v59 = *(_OWORD *)(a2 + 88);
  long long v60 = v18;
  ScrollGeometry.visibleRect.getter();
  double v22 = v21;
  double v23 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v25 = Value[1];
    long long v57 = *Value;
    long long v58 = v25;
    double v23 = MEMORY[0x18C114450]();
  }
  double v27 = *(double *)(a3 + 96);
  double v26 = *(double *)(a3 + 104);
  if (v27 <= 0.0 || v22 <= 0.0)
  {
    BOOL v29 = 0;
    if (v26 > 0.0 && v23 > 0.0) {
LABEL_13:
    }
      BOOL v29 = vabdd_f64(v26, v23) >= 0.01;
  }
  else
  {
    double v28 = vabdd_f64(v27, v22);
    if (v26 > 0.0 && v23 > 0.0)
    {
      if (v28 >= 0.01) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    if (v28 >= 0.01)
    {
LABEL_19:
      uint64_t v30 = *(void *)(a3 + 112);
      LOBYTE(v29) = 1;
LABEL_20:
      BOOL v51 = v29;
      char v53 = v7;
      uint64_t v34 = *(void *)(a3 + 120);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v54 = specialized Set.init<A>(_:)(v30);
      uint64_t v52 = a5;
      uint64_t v35 = MEMORY[0x1E4FBC860];
      uint64_t v36 = a4;
      unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 112) = v37;
      unint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(v35);
      uint64_t v55 = v34;
      swift_bridgeObjectRelease();
      *(void *)(a3 + 120) = v38;
      *(void *)&long long v57 = 0;
      uint64_t v56 = 0;
      uint64_t v33 = v15;
      specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v57, &v56, v15, a1, a3, v36, v52, v14 | v53 & 1, *((double *)&v15 + 1), *(double *)&v17);
      specialized LazyStack<>.log(_:)((_OWORD *)a3);
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = specialized Set.init<A>(_:)(v39);
      unsigned __int8 v41 = specialized Set.isSubset(of:)(v54, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v31 = v41 ^ 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 ^ 1))
      {
        BOOL v32 = v51;
      }
      else
      {
        BOOL v32 = 0;
        *(void *)(a3 + 112) = v30;
        *(void *)(a3 + 120) = v55;
      }
      goto LABEL_23;
    }
    BOOL v29 = 0;
  }
  uint64_t v30 = *(void *)(a3 + 112);
  if (!*(void *)(v30 + 16) || v29) {
    goto LABEL_20;
  }
  char v31 = 0;
  BOOL v32 = 0;
  uint64_t v33 = v15;
LABEL_23:
  *(void *)(a7 + 328) = v33;
  *(void *)(a7 + 336) = *((void *)&v15 + 1);
  *(_OWORD *)(a7 + 344) = v17;
  *(void *)(a7 + 360) = v16;
  *(unsigned char *)(a7 + 368) = v32;
  *(unsigned char *)(a7 + 369) = v31 & 1;
  *(double *)(a7 + 376) = v22;
  *(double *)(a7 + 384) = v23;
  long long v42 = v92;
  *(_OWORD *)a7 = v91;
  *(_OWORD *)(a7 + 16) = v42;
  *(void *)(a7 + 32) = v33;
  *(void *)(a7 + 40) = *((void *)&v15 + 1);
  *(_OWORD *)(a7 + 48) = v17;
  *(void *)(a7 + 64) = v16;
  long long v43 = v88;
  *(_OWORD *)(a7 + 264) = v87;
  *(_OWORD *)(a7 + 280) = v43;
  long long v44 = v90;
  *(_OWORD *)(a7 + 296) = v89;
  *(_OWORD *)(a7 + 312) = v44;
  long long v45 = v84;
  *(_OWORD *)(a7 + 200) = v83;
  *(_OWORD *)(a7 + 216) = v45;
  long long v46 = v86;
  *(_OWORD *)(a7 + 232) = v85;
  *(_OWORD *)(a7 + 248) = v46;
  long long v47 = v80;
  *(_OWORD *)(a7 + 136) = v79;
  *(_OWORD *)(a7 + 152) = v47;
  long long v48 = v82;
  *(_OWORD *)(a7 + 168) = v81;
  *(_OWORD *)(a7 + 184) = v48;
  long long v49 = v76;
  *(_OWORD *)(a7 + 72) = v75;
  *(_OWORD *)(a7 + 88) = v49;
  long long v50 = v78;
  *(_OWORD *)(a7 + 104) = v77;
  *(_OWORD *)(a7 + 120) = v50;
}

uint64_t outlined release of _LazyStack_Cache<LazyVStackLayout>(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyHStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyVStackLayout(a3, a1, a2, a4, (void (*)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, _OWORD *, void, void, unint64_t))specialized LazyStack<>.boundingRect(at:subviews:context:cache:), a5);
}

void type metadata accessor for (translation: CGSize, scale: CGSize)()
{
  if (!lazy cache variable for type metadata for (translation: CGSize, scale: CGSize))
  {
    type metadata accessor for CGSize(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (translation: CGSize, scale: CGSize));
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>(255);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<ToolbarButtonLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier, (uint64_t)&type metadata for ToolbarButtonLabelModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<ToolbarButtonLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier, (uint64_t)&type metadata for ToolbarButtonLabelModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t initializeWithCopy for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v5 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = swift_weakCopyInit();
  *(void *)(v6 + 8) = *(void *)(v5 + 8);
  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24 + v6) & ~v11;
  uint64_t v13 = (v11 + 24 + v5) & ~v11;
  swift_retain();
  swift_retain();
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(v10 + 48) + 3;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  char v17 = *(unsigned char *)(v16 + 4);
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v17;
  return a1;
}

void *assignWithCopy for _TaskValueModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((*(void *)(v9 + 40) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v9 + 40) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t destroy for AccessibilityFocusState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v9 = v3 + 8;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + v4 + 3) & ~v4;
  v8(v5, v2);
  unint64_t v6 = (*(void *)(v9 + 56) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  return ((uint64_t (*)(unint64_t, uint64_t))v8)((v4 + v6 + 8) & ~v4, v2);
}

uint64_t type metadata completion function for FocusableViewResponder()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for PresentedSceneValueInputModifier()
{
  return &type metadata for PresentedSceneValueInputModifier;
}

uint64_t instantiation function for generic protocol witness table for ResolvedShadowView<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance TabViewStyleOverrideInput<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static TabViewStyleOverrideInput.defaultValue.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t static TabViewStyleOverrideInput.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for Location.wasRead.getter in conformance SearchZipLocation()
{
  if (dispatch thunk of AnyLocation.wasRead.getter()) {
    return 1;
  }
  else {
    return dispatch thunk of AnyLocation.wasRead.getter() & 1;
  }
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in NavigationLinkButtonStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in BalancedNavigationSplitViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void specialized NavigationStackCoordinator.navigationControllerViewDidAppear(_:animated:)()
{
  *((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98)) = 1;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in InlineActionsSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void one-time initialization function for _modifierKeySource()
{
  qword_1E8FFA428 = (uint64_t)&type metadata for DefaultModifierKeySource;
  unk_1E8FFA430 = &protocol witness table for DefaultModifierKeySource;
}

uint64_t type metadata accessor for DragGesture.Value(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DragGesture.Value);
}

uint64_t ToolbarStorage.Entry.groupItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v4);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarStorage.Entry(v2, (uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
    uint64_t v14 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v14, 1, v7);
  }
  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v6, (uint64_t)v10, type metadata accessor for ToolbarStorage.GroupItem);
  uint64_t v11 = (void *)*((void *)v10 + 9);
  if (v11[2] != 1)
  {
LABEL_6:
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v10, a1, type metadata accessor for ToolbarStorage.GroupItem);
    uint64_t v14 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v14, 1, v7);
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if (v11[2])
    {
LABEL_5:
      uint64_t v13 = type metadata accessor for ToolbarStorage.Item(0);
      *((unsigned char *)v11
      + ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80))
      + *(int *)(v13 + 60)) = 1;
      *((void *)v10 + 9) = v11;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
    uint64_t v11 = (void *)result;
    if (*(void *)(result + 16)) {
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

void closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  long long v65 = a7;
  uint64_t v66 = a1;
  uint64_t v68 = a2;
  long long v69 = a4;
  uint64_t v67 = a3;
  uint64_t v9 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v63 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v62 = (uint64_t)&v57 - v13;
  uint64_t v14 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8);
  long long v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v64 = (uint64_t)&v57 - v22;
  uint64_t v23 = type metadata accessor for ToolbarStorage.Entry(0);
  MEMORY[0x1F4188790](v23 - 8);
  long long v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v17);
  MEMORY[0x1F4188790](v26 - 8);
  double v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  char v31 = (char *)&v57 - v30;
  memset(v70, 0, sizeof(v70));
  long long v71 = xmmword_18838AA10;
  LOBYTE(a5) = specialized static Toolbar.BarLocation.== infix(_:_:)(a5, (uint64_t)v70);
  outlined destroy of Toolbar.BarLocation((uint64_t)v70);
  if ((a5 & 1) != 0 && *v69 == a6) {
    *(unsigned char *)(v67 + 8) = 1;
  }
  v70[0] = 0;
  if (*(unsigned char *)(v68 + 8) == 2)
  {
    id v32 = *(id *)v68;
    id v33 = *(id *)v68;
    uint64_t v34 = v65;
    MEMORY[0x18C115B40]();
    if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    outlined consume of Toolbar.VendedItem?(v32, 2);
    uint64_t v35 = v67;
  }
  else
  {
    uint64_t v36 = v66;
    ToolbarStorage.Entry.groupItem.getter((uint64_t)v28);
    outlined init with copy of ToolbarStorage.Entry.Kind(v36, (uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v37 = type metadata accessor for ToolbarStorage.GroupItem(0);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v28, 1, v37) == 1)
    {
      uint64_t v61 = v37;
      outlined init with copy of ToolbarStorage.Entry.Kind((uint64_t)v25, (uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v40 = v63;
      uint64_t v60 = v63 + 56;
      if (EnumCaseMultiPayload)
      {
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
        uint64_t v41 = 1;
        uint64_t v42 = v64;
      }
      else
      {
        uint64_t v44 = (uint64_t)v16;
        uint64_t v42 = v64;
        outlined init with take of ToolbarStorage.NavigationProperties(v44, v64, type metadata accessor for ToolbarStorage.Item);
        uint64_t v41 = 0;
      }
      uint64_t v45 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v42, v41, 1, v9);
      outlined init with copy of ToolbarStorage.NavigationProperties?(v42, (uint64_t)v20, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v20, 1, v9) != 1)
      {
        uint64_t v46 = v62;
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v20, v62, type metadata accessor for ToolbarStorage.Item);
        outlined init with copy of ToolbarStorage.Entry.Kind(v46, (uint64_t)v11, type metadata accessor for ToolbarStorage.Item);
        uint64_t v47 = *((void *)v11 + 5);
        uint64_t v60 = *((void *)v11 + 4);
        outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v11 + 48), (uint64_t)(v31 + 16));
        int v48 = *((unsigned __int16 *)v11 + 45);
        int v58 = v11[92];
        int v59 = v48;
        uint64_t v57 = *((void *)v11 + 12);
        type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Item>, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBBE00]);
        unint64_t v49 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        uint64_t v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = xmmword_18834BB80;
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v11, v50 + v49, type metadata accessor for ToolbarStorage.Item);
        BOOL v51 = &v31[*(int *)(v61 + 44)];
        uint64_t v52 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
        *(void *)char v31 = v60;
        *((void *)v31 + 1) = v47;
        *(_WORD *)(v31 + 57) = v59;
        v31[59] = v58;
        *((void *)v31 + 8) = v57;
        *((void *)v31 + 9) = v50;
        swift_bridgeObjectRetain();
        uint64_t v53 = v46;
        uint64_t v42 = v64;
        outlined destroy of ToolbarStorage.NavigationProperties(v53, type metadata accessor for ToolbarStorage.Item);
        uint64_t v45 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v31, v45, 1, v61);
      uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      outlined destroy of ToolbarStorage.NavigationProperties?(v42, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
      outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v43 = outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v28, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v54);
    }
    else
    {
      outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
      outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v28, (uint64_t)v31, type metadata accessor for ToolbarStorage.GroupItem);
      uint64_t v43 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v31, 0, 1, v37);
    }
    MEMORY[0x1F4188790](v43);
    uint64_t v35 = v67;
    *(&v57 - 4) = v68;
    *(&v57 - 3) = (uint64_t)v70;
    *(&v57 - 2) = v66;
    *(&v57 - 1) = v35;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV9GroupItemV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, unsigned char *))partial apply for closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:));
    outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v31, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
    if (v70[0])
    {
      id v55 = v70[0];
      uint64_t v56 = v65;
      MEMORY[0x18C115B40]();
      if (*(void *)((*v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  *(unsigned char *)(v35 + 8) = 2;
  ++*v69;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance UIKitBarButtonItem()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for ToolbarStorage.Item(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2)) {
    swift_weakLoadStrong();
  }
  return EnvironmentValues.preferenceBridge.setter();
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.Item(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DCC728);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV9GroupItemV_s5NeverOytTg5(void (*a1)(uint64_t *__return_ptr, unsigned char *))
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ToolbarStorage.GroupItem?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ScrollableCollection?(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.GroupItem?);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (v11 == 1) {
    return v11 == 1;
  }
  outlined init with take of WeakBox<UITextField>((uint64_t)v10, (uint64_t)v7, type metadata accessor for ToolbarStorage.GroupItem);
  a1(&v14, v7);
  uint64_t result = outlined destroy of ScrollableCollection?((uint64_t)v7, type metadata accessor for ToolbarStorage.GroupItem);
  if (!v2) {
    return v11 == 1;
  }
  return result;
}

uint64_t outlined init with take of WeakBox<UITextField>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1)
{
  closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(a1, *(void *)(v1 + 16), *(void ***)(v1 + 24), *(void *)(v1 + 32), *(void ***)(v1 + 40));
}

void closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  uint64_t v10 = type metadata accessor for ToolbarStorage.Entry(0);
  int v11 = *a5;
  LOBYTE(a5) = *(unsigned char *)(a4 + *(int *)(v10 + 20));
  id v12 = v11;
  specialized static UIKitBarButtonItemGroup.makeVended(groupItem:edge:context:)(a1, (char)a5);
  uint64_t v14 = v13;
  LOBYTE(a1) = v15;
  char v17 = v16;

  uint64_t v18 = *(void **)a2;
  *(void *)a2 = v14;
  char v19 = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a2 + 8) = a1;
  outlined consume of Toolbar.VendedItem?(v18, v19);
  long long v20 = *a3;
  *a3 = v17;
}

void outlined consume of Toolbar.VendedItem?(id a1, char a2)
{
  if (a2 != -1) {
}
  }

void specialized static UIKitBarButtonItemGroup.makeVended(groupItem:edge:context:)(uint64_t a1, char a2)
{
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v18[-v8];
  if (*(void *)(a1 + 8))
  {
    if (!*(unsigned char *)(a1 + 57))
    {
      type metadata accessor for UIKitBarButtonItemGroup(0);
      uint64_t v10 = (void *)static UIBarButtonItemGroup.optionalGroup(customizationIdentifier:isInDefaultCustomization:representativeItem:items:)();
      uint64_t v13 = (unsigned char *)swift_dynamicCastClass();
      if (v13)
      {
        id v12 = v13;
        objc_msgSend(v13, sel__dci_setAvailableWithoutCustomization_, *(_DWORD *)(a1 + 64) & 1);
        goto LABEL_10;
      }
      goto LABEL_12;
    }
    if (*(unsigned char *)(a1 + 57) == 1)
    {
      type metadata accessor for UIKitBarButtonItemGroup(0);
      uint64_t v10 = (void *)static UIBarButtonItemGroup.movableGroup(customizationIdentifier:representativeItem:items:)();
      uint64_t v11 = swift_dynamicCastClass();
      if (v11)
      {
LABEL_7:
        id v12 = (unsigned char *)v11;
LABEL_10:
        id v14 = v10;
        v12[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge] = a2;
        swift_unknownObjectWeakAssign();
        _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(a1, (uint64_t)v9, type metadata accessor for ToolbarStorage.GroupItem);
        uint64_t v15 = type metadata accessor for ToolbarStorage.GroupItem(0);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 0, 1, v15);
        uint64_t v16 = (uint64_t)&v12[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_groupItem];
        swift_beginAccess();
        _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(v16, (uint64_t)v6, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
        swift_beginAccess();
        outlined assign with copy of _ViewList_View?((uint64_t)v9, v16, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.GroupItem?, (uint64_t)type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.Item?);
        swift_endAccess();
        UIKitBarButtonItemGroup.didChangeGroupItem(from:)((uint64_t)v6);
        _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
        _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v6, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);

        char v17 = v12;
        return;
      }

      __break(1u);
    }
  }
  type metadata accessor for UIKitBarButtonItemGroup(0);
  uint64_t v10 = (void *)static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)();
  uint64_t v11 = swift_dynamicCastClass();
  if (v11) {
    goto LABEL_7;
  }

  __break(1u);
LABEL_12:

  __break(1u);
}

uint64_t outlined destroy of PlatformItemList.Item?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for ToolbarStorage.Item?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DC6D14);
}

uint64_t type metadata accessor for UIKitBarButtonItemGroup(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitBarButtonItemGroup);
}

uint64_t outlined assign with copy of _ViewList_View?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(a2, a1, v8);
  return a2;
}

void *assignWithCopy for ToolbarStorage.SearchItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  char *v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  v8[2] = *((unsigned char *)a2 + v7 + 2);
  v8[3] = *((unsigned char *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  id v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  char v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[6];
  uint64_t v19 = (uint64_t)a1 + v18;
  long long v20 = (char *)a2 + v18;
  int v21 = *((unsigned __int8 *)a1 + v18 + 8);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v21 == 255)
  {
    if (v22 == 255)
    {
      uint64_t v24 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v20[8];
      *(void *)uint64_t v19 = v24;
    }
    else
    {
      char v29 = v22 & 1;
      uint64_t v30 = *(void *)v20;
      outlined copy of PlatformItemCollection.Storage(v30, v22 & 1);
      *(void *)uint64_t v19 = v30;
      *(unsigned char *)(v19 + 8) = v29;
    }
  }
  else if (v22 == 255)
  {
    outlined destroy of PlatformItemCollection(v19);
    char v23 = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = v23;
  }
  else
  {
    char v25 = v22 & 1;
    uint64_t v26 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(v26, v22 & 1);
    uint64_t v27 = *(void *)v19;
    char v28 = *(unsigned char *)(v19 + 8);
    *(void *)uint64_t v19 = v26;
    *(unsigned char *)(v19 + 8) = v25;
    outlined consume of PlatformItemCollection.Storage(v27, v28);
  }
  uint64_t v31 = a3[7];
  uint64_t v32 = (uint64_t)a1 + v31;
  id v33 = (char *)a2 + v31;
  int v34 = *((unsigned __int8 *)a1 + v31 + 8);
  int v35 = *((unsigned __int8 *)a2 + v31 + 8);
  if (v34 == 255)
  {
    if (v35 == 255)
    {
      uint64_t v37 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = v33[8];
      *(void *)uint64_t v32 = v37;
    }
    else
    {
      char v42 = v35 & 1;
      uint64_t v43 = *(void *)v33;
      outlined copy of PlatformItemCollection.Storage(v43, v35 & 1);
      *(void *)uint64_t v32 = v43;
      *(unsigned char *)(v32 + 8) = v42;
    }
  }
  else if (v35 == 255)
  {
    outlined destroy of PlatformItemCollection(v32);
    char v36 = v33[8];
    *(void *)uint64_t v32 = *(void *)v33;
    *(unsigned char *)(v32 + 8) = v36;
  }
  else
  {
    char v38 = v35 & 1;
    uint64_t v39 = *(void *)v33;
    outlined copy of PlatformItemCollection.Storage(v39, v35 & 1);
    uint64_t v40 = *(void *)v32;
    char v41 = *(unsigned char *)(v32 + 8);
    *(void *)uint64_t v32 = v39;
    *(unsigned char *)(v32 + 8) = v38;
    outlined consume of PlatformItemCollection.Storage(v40, v41);
  }
  uint64_t v44 = a3[8];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = *(void *)((char *)a2 + v44);
  uint64_t v48 = *(void *)((char *)a2 + v44 + 8);
  char v49 = *((unsigned char *)a2 + v44 + 16);
  outlined copy of Text.Storage(v47, v48, v49);
  uint64_t v50 = *(void *)v45;
  uint64_t v51 = *((void *)v45 + 1);
  char v52 = v45[16];
  *(void *)uint64_t v45 = v47;
  *((void *)v45 + 1) = v48;
  v45[16] = v49;
  outlined consume of Text.Storage(v50, v51, v52);
  *((void *)v45 + 3) = *((void *)v46 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[9];
  uint64_t v54 = (char *)a1 + v53;
  id v55 = (char *)a2 + v53;
  *(void *)((char *)a1 + v53) = *(void *)((char *)a2 + v53);
  swift_retain();
  swift_release();
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_retain();
  swift_release();
  uint64_t v56 = a3[10];
  uint64_t v57 = (uint64_t)a1 + v56;
  int v58 = (char *)a2 + v56;
  uint64_t v59 = *(void *)((char *)a1 + v56);
  uint64_t v60 = *(void *)((char *)a2 + v56);
  if (v59)
  {
    if (v60)
    {
      uint64_t v61 = *((void *)v58 + 1);
      *(void *)uint64_t v57 = v60;
      *(void *)(v57 + 8) = v61;
      *(_DWORD *)(v57 + 16) = *((_DWORD *)v58 + 4);
      *(void *)(v57 + 24) = *((void *)v58 + 3);
      uint64_t v62 = (void *)*((void *)v58 + 4);
      uint64_t v63 = *(void **)(v57 + 32);
      *(void *)(v57 + 32) = v62;
      id v64 = v62;

      *(void *)(v57 + 40) = *((void *)v58 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v57 + 48) = *((_DWORD *)v58 + 12);
      *(void *)(v57 + 56) = *((void *)v58 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v57 + 64) = *((_DWORD *)v58 + 16);
      *(_DWORD *)(v57 + 68) = *((_DWORD *)v58 + 17);
      *(_DWORD *)(v57 + 72) = *((_DWORD *)v58 + 18);
      *(_DWORD *)(v57 + 76) = *((_DWORD *)v58 + 19);
      *(void *)(v57 + 80) = *((void *)v58 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v57);
      long long v68 = *((_OWORD *)v58 + 1);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *(_OWORD *)(v57 + 16) = v68;
      long long v70 = *((_OWORD *)v58 + 3);
      long long v69 = *((_OWORD *)v58 + 4);
      long long v71 = *((_OWORD *)v58 + 2);
      *(void *)(v57 + 80) = *((void *)v58 + 10);
      *(_OWORD *)(v57 + 48) = v70;
      *(_OWORD *)(v57 + 64) = v69;
      *(_OWORD *)(v57 + 32) = v71;
    }
  }
  else if (v60)
  {
    uint64_t v65 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = v60;
    *(void *)(v57 + 8) = v65;
    *(_DWORD *)(v57 + 16) = *((_DWORD *)v58 + 4);
    *(void *)(v57 + 24) = *((void *)v58 + 3);
    uint64_t v66 = (void *)*((void *)v58 + 4);
    *(void *)(v57 + 32) = v66;
    *(void *)(v57 + 40) = *((void *)v58 + 5);
    *(_DWORD *)(v57 + 48) = *((_DWORD *)v58 + 12);
    *(void *)(v57 + 56) = *((void *)v58 + 7);
    *(_DWORD *)(v57 + 64) = *((_DWORD *)v58 + 16);
    *(_DWORD *)(v57 + 68) = *((_DWORD *)v58 + 17);
    *(_DWORD *)(v57 + 72) = *((_DWORD *)v58 + 18);
    *(_DWORD *)(v57 + 76) = *((_DWORD *)v58 + 19);
    *(void *)(v57 + 80) = *((void *)v58 + 10);
    id v67 = v66;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v72 = *((_OWORD *)v58 + 1);
    *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
    *(_OWORD *)(v57 + 16) = v72;
    long long v73 = *((_OWORD *)v58 + 2);
    long long v74 = *((_OWORD *)v58 + 3);
    long long v75 = *((_OWORD *)v58 + 4);
    *(void *)(v57 + 80) = *((void *)v58 + 10);
    *(_OWORD *)(v57 + 48) = v74;
    *(_OWORD *)(v57 + 64) = v75;
    *(_OWORD *)(v57 + 32) = v73;
  }
  uint64_t v76 = a3[11];
  uint64_t v77 = (uint64_t)a1 + v76;
  long long v78 = (char *)a2 + v76;
  uint64_t v79 = *(void *)((char *)a1 + v76);
  uint64_t v80 = *(void *)((char *)a2 + v76);
  if (v79)
  {
    if (v80)
    {
      uint64_t v81 = *((void *)v78 + 1);
      *(void *)uint64_t v77 = v80;
      *(void *)(v77 + 8) = v81;
      *(_DWORD *)(v77 + 16) = *((_DWORD *)v78 + 4);
      *(void *)(v77 + 24) = *((void *)v78 + 3);
      long long v82 = (void *)*((void *)v78 + 4);
      long long v83 = *(void **)(v77 + 32);
      *(void *)(v77 + 32) = v82;
      id v84 = v82;

      *(void *)(v77 + 40) = *((void *)v78 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v77 + 48) = *((_DWORD *)v78 + 12);
      *(void *)(v77 + 56) = *((void *)v78 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v77 + 64) = *((_DWORD *)v78 + 16);
      *(_DWORD *)(v77 + 68) = *((_DWORD *)v78 + 17);
      *(_DWORD *)(v77 + 72) = *((_DWORD *)v78 + 18);
      *(_DWORD *)(v77 + 76) = *((_DWORD *)v78 + 19);
      *(void *)(v77 + 80) = *((void *)v78 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v77);
      long long v88 = *((_OWORD *)v78 + 1);
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
      *(_OWORD *)(v77 + 16) = v88;
      long long v90 = *((_OWORD *)v78 + 3);
      long long v89 = *((_OWORD *)v78 + 4);
      long long v91 = *((_OWORD *)v78 + 2);
      *(void *)(v77 + 80) = *((void *)v78 + 10);
      *(_OWORD *)(v77 + 48) = v90;
      *(_OWORD *)(v77 + 64) = v89;
      *(_OWORD *)(v77 + 32) = v91;
    }
  }
  else if (v80)
  {
    uint64_t v85 = *((void *)v78 + 1);
    *(void *)uint64_t v77 = v80;
    *(void *)(v77 + 8) = v85;
    *(_DWORD *)(v77 + 16) = *((_DWORD *)v78 + 4);
    *(void *)(v77 + 24) = *((void *)v78 + 3);
    long long v86 = (void *)*((void *)v78 + 4);
    *(void *)(v77 + 32) = v86;
    *(void *)(v77 + 40) = *((void *)v78 + 5);
    *(_DWORD *)(v77 + 48) = *((_DWORD *)v78 + 12);
    *(void *)(v77 + 56) = *((void *)v78 + 7);
    *(_DWORD *)(v77 + 64) = *((_DWORD *)v78 + 16);
    *(_DWORD *)(v77 + 68) = *((_DWORD *)v78 + 17);
    *(_DWORD *)(v77 + 72) = *((_DWORD *)v78 + 18);
    *(_DWORD *)(v77 + 76) = *((_DWORD *)v78 + 19);
    *(void *)(v77 + 80) = *((void *)v78 + 10);
    id v87 = v86;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v92 = *((_OWORD *)v78 + 1);
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 16) = v92;
    long long v93 = *((_OWORD *)v78 + 2);
    long long v94 = *((_OWORD *)v78 + 3);
    long long v95 = *((_OWORD *)v78 + 4);
    *(void *)(v77 + 80) = *((void *)v78 + 10);
    *(_OWORD *)(v77 + 48) = v94;
    *(_OWORD *)(v77 + 64) = v95;
    *(_OWORD *)(v77 + 32) = v93;
  }
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  uint64_t v96 = a3[13];
  uint64_t v97 = (uint64_t)a1 + v96;
  long long v98 = (char *)a2 + v96;
  uint64_t v99 = *(void *)((char *)a1 + v96);
  uint64_t v100 = *(void *)((char *)a2 + v96);
  if (v99)
  {
    if (v100)
    {
      uint64_t v101 = *((void *)v98 + 1);
      *(void *)uint64_t v97 = v100;
      *(void *)(v97 + 8) = v101;
      *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
      *(void *)(v97 + 24) = *((void *)v98 + 3);
      long long v102 = (void *)*((void *)v98 + 4);
      long long v103 = *(void **)(v97 + 32);
      *(void *)(v97 + 32) = v102;
      id v104 = v102;

      *(void *)(v97 + 40) = *((void *)v98 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v97 + 48) = *((_DWORD *)v98 + 12);
      *(void *)(v97 + 56) = *((void *)v98 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v97 + 64) = *((_DWORD *)v98 + 16);
      *(_DWORD *)(v97 + 68) = *((_DWORD *)v98 + 17);
      *(_DWORD *)(v97 + 72) = *((_DWORD *)v98 + 18);
      *(_DWORD *)(v97 + 76) = *((_DWORD *)v98 + 19);
      *(void *)(v97 + 80) = *((void *)v98 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v97);
      long long v108 = *((_OWORD *)v98 + 1);
      *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
      *(_OWORD *)(v97 + 16) = v108;
      long long v110 = *((_OWORD *)v98 + 3);
      long long v109 = *((_OWORD *)v98 + 4);
      long long v111 = *((_OWORD *)v98 + 2);
      *(void *)(v97 + 80) = *((void *)v98 + 10);
      *(_OWORD *)(v97 + 48) = v110;
      *(_OWORD *)(v97 + 64) = v109;
      *(_OWORD *)(v97 + 32) = v111;
    }
  }
  else if (v100)
  {
    uint64_t v105 = *((void *)v98 + 1);
    *(void *)uint64_t v97 = v100;
    *(void *)(v97 + 8) = v105;
    *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
    *(void *)(v97 + 24) = *((void *)v98 + 3);
    long long v106 = (void *)*((void *)v98 + 4);
    *(void *)(v97 + 32) = v106;
    *(void *)(v97 + 40) = *((void *)v98 + 5);
    *(_DWORD *)(v97 + 48) = *((_DWORD *)v98 + 12);
    *(void *)(v97 + 56) = *((void *)v98 + 7);
    *(_DWORD *)(v97 + 64) = *((_DWORD *)v98 + 16);
    *(_DWORD *)(v97 + 68) = *((_DWORD *)v98 + 17);
    *(_DWORD *)(v97 + 72) = *((_DWORD *)v98 + 18);
    *(_DWORD *)(v97 + 76) = *((_DWORD *)v98 + 19);
    *(void *)(v97 + 80) = *((void *)v98 + 10);
    id v107 = v106;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v112 = *((_OWORD *)v98 + 1);
    *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
    *(_OWORD *)(v97 + 16) = v112;
    long long v113 = *((_OWORD *)v98 + 2);
    long long v114 = *((_OWORD *)v98 + 3);
    long long v115 = *((_OWORD *)v98 + 4);
    *(void *)(v97 + 80) = *((void *)v98 + 10);
    *(_OWORD *)(v97 + 48) = v114;
    *(_OWORD *)(v97 + 64) = v115;
    *(_OWORD *)(v97 + 32) = v113;
  }
  return a1;
}

uint64_t type metadata completion function for UIViewSnapshotResponder()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TaskValueModifier<A>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollTargetModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

BOOL specialized static KeyboardShortcut.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 != v4) {
      return 0;
    }
    return v3 == v5;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if ((v7 & 1) != 0 && v2 == v4) {
    return v3 == v5;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in TextField<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InternalNavigationLinkModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationSelectionModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in SearchFieldStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchPrimitiveModifier<A>.SearchConfigModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchPrimitiveModifier<A>.DefaultSearchView()
{
  return swift_getOpaqueTypeConformance2();
}

void closure #2 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(char a1, void (*a2)(void), uint64_t a3)
{
  if (a1)
  {
    int v5 = self;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = a3;
    v8[4] = partial apply for closure #1 in update #1 <A>() in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:);
    _OWORD v8[5] = v6;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1107296256;
    v8[2] = thunk for @escaping @callee_guaranteed () -> ();
    v8[3] = &block_descriptor_20;
    char v7 = _Block_copy(v8);
    swift_retain();
    swift_release();
    objc_msgSend(v5, sel_animateWithDuration_animations_, v7, 0.3);
    _Block_release(v7);
  }
  else
  {
    a2();
  }
}

BOOL partial apply for closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  return closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(*(void *)(v0 + 32));
}

BOOL partial apply for specialized closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  return closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(v0);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BaseModifier<A>.Transform()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchField<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for CollectionViewCellModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = (unsigned char *)(a2 + 264);
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 41);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<ListItemTint?>.Content(v12, v14, v13);
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 41);
  *(void *)(a1 + 32) = v12;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 41) = v13;
  outlined consume of Environment<ListItemTint?>.Content(v15, v17, v16);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 64);
  uint64_t v21 = *(void *)(a2 + 72);
  char v22 = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<HoverEffectContext?>.Content(v18, v19, v20, v21, v22);
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = *(void *)(a1 + 72);
  char v27 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 80) = v22;
  outlined consume of Environment<HoverEffectContext?>.Content(v23, v24, v25, v26, v27);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  uint64_t v32 = *(void *)(a2 + 120);
  uint64_t v33 = *(void *)(a2 + 128);
  uint64_t v34 = *(void *)(a2 + 136);
  uint64_t v35 = *(void *)(a2 + 144);
  uint64_t v67 = *(void *)(a2 + 152);
  uint64_t v68 = *(void *)(a2 + 160);
  char v69 = *(unsigned char *)(a2 + 168);
  char v70 = *(unsigned char *)(a2 + 169);
  outlined copy of Environment<ListContentStyling>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v67, v68, v69, v70);
  uint64_t v36 = *(void *)(a1 + 88);
  uint64_t v37 = *(void *)(a1 + 96);
  uint64_t v38 = *(void *)(a1 + 104);
  uint64_t v39 = *(void *)(a1 + 112);
  uint64_t v40 = *(void *)(a1 + 120);
  uint64_t v41 = *(void *)(a1 + 128);
  uint64_t v42 = *(void *)(a1 + 136);
  uint64_t v43 = *(void *)(a1 + 144);
  uint64_t v44 = *(void *)(a1 + 152);
  uint64_t v45 = *(void *)(a1 + 160);
  char v46 = *(unsigned char *)(a1 + 168);
  char v47 = *(unsigned char *)(a1 + 169);
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(void *)(a1 + 120) = v32;
  *(void *)(a1 + 128) = v33;
  *(void *)(a1 + 136) = v34;
  *(void *)(a1 + 144) = v35;
  *(void *)(a1 + 152) = v67;
  *(void *)(a1 + 160) = v68;
  *(unsigned char *)(a1 + 168) = v69;
  *(unsigned char *)(a1 + 169) = v70;
  outlined consume of Environment<ListContentStyling>.Content(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47);
  uint64_t v48 = *(void *)(a2 + 176);
  uint64_t v49 = *(void *)(a2 + 184);
  LOBYTE(v30) = *(unsigned char *)(a2 + 192);
  outlined copy of Environment<CGFloat?>.Content(v48, v49, v30);
  uint64_t v50 = *(void *)(a1 + 176);
  uint64_t v51 = *(void *)(a1 + 184);
  char v52 = *(unsigned char *)(a1 + 192);
  *(void *)(a1 + 176) = v48;
  *(void *)(a1 + 184) = v49;
  *(unsigned char *)(a1 + 192) = v30;
  outlined consume of Environment<CGFloat?>.Content(v50, v51, v52);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  long long v53 = *(_OWORD *)(a2 + 200);
  long long v54 = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v54;
  *(_OWORD *)(a1 + 200) = v53;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  id v55 = (uint64_t *)(a1 + 256);
  uint64_t v56 = (uint64_t *)(a2 + 256);
  uint64_t v57 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256) == 1)
  {
    if (v57 == 1)
    {
      uint64_t v58 = *v56;
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      *id v55 = v58;
    }
    else
    {
      *(void *)(a1 + 256) = v57;
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      swift_retain();
    }
    goto LABEL_7;
  }
  if (v57 == 1)
  {
    outlined destroy of ListItemTint(a1 + 256);
    char v59 = *(unsigned char *)(a2 + 264);
    *id v55 = *v56;
    *(unsigned char *)(a1 + 264) = v59;
LABEL_7:
    uint64_t v60 = v66;
    goto LABEL_9;
  }
  *(void *)(a1 + 256) = v57;
  swift_retain();
  swift_release();
  uint64_t v60 = v66;
  *(unsigned char *)(a1 + 264) = *v66;
LABEL_9:
  *(unsigned char *)(a1 + 265) = v60[1];
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 280);
    int v61 = *(unsigned __int8 *)(a2 + 350);
    if (v61 == 2)
    {
      uint64_t v62 = *(void *)(a2 + 304);
      *(void *)(a1 + 304) = v62;
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      (**(void (***)(uint64_t, uint64_t))(v62 - 8))(a1 + 280, a2 + 280);
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
      *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
    }
    else if (v61 == 1)
    {
      *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
      *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
    }
    else
    {
      uint64_t v63 = *(void *)(a2 + 304);
      *(void *)(a1 + 304) = v63;
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      (**(void (***)(uint64_t, uint64_t))(v63 - 8))(a1 + 280, a2 + 280);
      *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
      *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
      *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      int v64 = *(_DWORD *)(a2 + 344);
      *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
      *(_DWORD *)(a1 + 344) = v64;
    }
    *(unsigned char *)(a1 + 350) = v61;
    swift_retain();
  }
  *(unsigned char *)(a1 + 351) = *(unsigned char *)(a2 + 351);
  return a1;
}

unint64_t instantiation function for generic protocol witness table for LazyHStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyHStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static LazyLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LazyContainerModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

unint64_t makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)()
{
  if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0 || (_ViewOutputs.subscript.getter() & 0x100000000) != 0)
  {
    unint64_t v0 = _ViewOutputs.subscript.getter();
    uint64_t v1 = HIDWORD(v0) & 1;
  }
  else
  {
    swift_getKeyPath();
    _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type LayoutScrollableTransform and conformance LayoutScrollableTransform();
    LODWORD(v0) = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v1) = 0;
  }
  return v0 | ((unint64_t)v1 << 32);
}

unint64_t lazy protocol witness table accessor for type LayoutScrollableTransform and conformance LayoutScrollableTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutScrollableTransform and conformance LayoutScrollableTransform;
  if (!lazy protocol witness table cache variable for type LayoutScrollableTransform and conformance LayoutScrollableTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutScrollableTransform and conformance LayoutScrollableTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>)
  {
    type metadata accessor for Attribute<UInt32>(255, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>);
  }
  return result;
}

uint64_t specialized static LazyLayout.accessibilityRole.getter@<X0>(unsigned char *a1@<X8>)
{
  static Axis.allCases.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0;
  return result;
}

{
  uint64_t result;

  static Axis.allCases.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyHStackLayout> and conformance LazySubviewPrefetcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyHStackLayout> and conformance LazySubviewPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyHStackLayout> and conformance LazySubviewPrefetcher<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyHStackLayout> and conformance LazySubviewPrefetcher<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPlacements<LazyHStackLayout> and conformance LazySubviewPlacements<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPlacements<LazyHStackLayout> and conformance LazySubviewPlacements<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPlacements<LazyHStackLayout> and conformance LazySubviewPlacements<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPlacements<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPlacements<LazyHStackLayout> and conformance LazySubviewPlacements<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

void type metadata accessor for Attribute<UInt32>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for InspectorSeparatorShadow()
{
  return &type metadata for InspectorSeparatorShadow;
}

uint64_t HostingViewTransparentBackgroundReason.description.getter(char a1)
{
  if (a1)
  {
    v6._object = (void *)0x8000000188344630;
    v6._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v6);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7._countAndFlagsBits = 0xD000000000000016;
  v7._object = (void *)0x8000000188344610;
  String.append(_:)(v7);
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    v9._countAndFlagsBits = 0xD000000000000015;
    v9._object = (void *)0x80000001883445D0;
    String.append(_:)(v9);
    if ((a1 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_10:
  v8._countAndFlagsBits = 0xD000000000000017;
  v8._object = (void *)0x80000001883445F0;
  String.append(_:)(v8);
  if ((a1 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((a1 & 0x10) != 0)
  {
LABEL_6:
    v2._countAndFlagsBits = 0xD000000000000014;
    v2._object = (void *)0x80000001883445B0;
    String.append(_:)(v2);
  }
LABEL_7:
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 91;
}

unint64_t lazy protocol witness table accessor for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason()
{
  unint64_t result = lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason;
  if (!lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason;
  if (!lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason;
  if (!lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason;
  if (!lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingViewTransparentBackgroundReason and conformance HostingViewTransparentBackgroundReason);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InspectorSeparatorShadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t static PrimitiveSelectionContainerModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  int v11 = *((_DWORD *)a2 + 20);
  LODWORD(v39) = *a1;
  type metadata accessor for _GraphValue<PrimitiveSelectionContainerModifier>();
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  long long v19 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext();
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t v39 = v6;
  int v40 = v7;
  uint64_t v41 = v8;
  *(void *)&long long v42 = v12;
  *((void *)&v42 + 1) = v13;
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  long long v45 = v19;
  uint64_t v46 = v14;
  int v47 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey();
  PropertyList.subscript.setter();
  uint64_t v30 = v6;
  int v31 = v7;
  uint64_t v32 = v8;
  long long v33 = v42;
  uint64_t v34 = v10;
  uint64_t v35 = v9;
  long long v36 = v19;
  uint64_t v37 = v14;
  int v38 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(&v21, v15, &v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v16 = v21;
  int v17 = v22;
  LODWORD(v6) = v23;
  uint64_t v27 = v21;
  int v28 = v22;
  int v29 = v23;
  uint64_t v24 = partial apply for closure #2 in static PrimitiveSelectionContainerModifier._makeView(modifier:inputs:body:);
  uint64_t v25 = &v26;
  AGGraphMutateAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v17;
  *(_DWORD *)(a4 + 12) = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext;
  if (!lazy protocol witness table cache variable for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey);
  }
  return result;
}

void type metadata accessor for _GraphValue<PrimitiveSelectionContainerModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PrimitiveSelectionContainerModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PrimitiveSelectionContainerModifier>);
    }
  }
}

uint64_t storeEnumTagSinglePayload for SceneList.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 280) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 264) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t static NestedDynamicProperties._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  static DynamicPropertyCache.fields(of:)();
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t NavigationStackStyleModifier.styleBody(configuration:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v18 - v10;
  char v12 = *((unsigned char *)a1 + 8);
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[5];
  LODWORD(v10) = *((_DWORD *)a1 + 12);
  char v15 = *((unsigned char *)a1 + 52);
  uint64_t v19 = *a1;
  char v20 = v12;
  uint64_t v21 = v13;
  long long v22 = *(_OWORD *)(a1 + 3);
  uint64_t v23 = v14;
  int v24 = v10;
  char v25 = v15;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 24))(&v19, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v16)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for _NavigationStackStyle.makeBody(configuration:) in conformance _AutomaticNavigationStackStyle@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  return result;
}

void specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(void *a1, void *a2, uint64_t a3)
{
  swift_beginAccess();
  if (*(void *)a3)
  {
    if (*(void *)(*(void *)a3 + 16))
    {
      id v7 = a2;
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
      char v9 = v8;

      if (v9)
      {
        swift_beginAccess();
        if (!*(void *)a3)
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        id v10 = a1;
        id v11 = v7;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v30 = *(void *)a3;
        uint64_t v13 = v30;
        *(void *)a3 = 0x8000000000000000;
        id v14 = v11;
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
        uint64_t v17 = *(void *)(v13 + 16);
        BOOL v18 = (v15 & 1) == 0;
        uint64_t v19 = v17 + v18;
        if (__OFADD__(v17, v18))
        {
          __break(1u);
        }
        else
        {
          char v3 = v15;
          if (*(void *)(v13 + 24) < v19)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
            unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
            if ((v3 & 1) != (v21 & 1))
            {
LABEL_23:
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            unint64_t v16 = v20;
            if ((v3 & 1) == 0) {
              goto LABEL_20;
            }
LABEL_17:
            uint64_t v29 = *(void *)(*(void *)(v30 + 56) + 8 * v16);
            specialized Set._Variant.insert(_:)(&v32, v10);
            specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v29, 1, &v30, v16, v14);

            swift_bridgeObjectRelease();
            *(void *)a3 = v30;
            swift_endAccess();

            return;
          }
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v15) {
              goto LABEL_17;
            }
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        specialized _NativeDictionary.copy()();
        if (v3) {
          goto LABEL_17;
        }
        goto LABEL_20;
      }
    }
    id v32 = (id)MEMORY[0x1E4FBC870];
    specialized Set._Variant.insert(_:)(v31, a1);

    uint64_t v22 = (uint64_t)v32;
    swift_beginAccess();
    if (!*(void *)a3)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    id v23 = a2;
    swift_bridgeObjectRetain();
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *(void *)a3;
    *(void *)a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v23, v24);
    *(void *)a3 = v30;

    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    id v32 = (id)MEMORY[0x1E4FBC870];
    specialized Set._Variant.insert(_:)(v31, a1);

    _s2os6LoggerVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UINavigationController, Set<NavigationStackHostingController<AnyView>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (UINavigationController, Set<NavigationStackHostingController<AnyView>>), MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    id v26 = v32;
    *(void *)(inited + 32) = a2;
    *(void *)(inited + 40) = v26;
    id v27 = a2;
    unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_beginAccess();
    *(void *)a3 = v28;
  }
  swift_bridgeObjectRelease();
}

uint64_t requiresNew #1 (_:) in NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  _s2os6LoggerVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  double v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t result = MEMORY[0x18C119DF0](a2 + 16, v11);
  if (result)
  {
    if ((a3 & 1) == 0)
    {

      return 0;
    }
    id v15 = (id)result;
    id v16 = objc_msgSend(a1, sel_navigationController);

    if (!v16 || (v16, v15 != v16))
    {

      return 0;
    }
    static Log.navigation.getter();
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17) == 1)
    {

      outlined destroy of Logger?((uint64_t)v13);
    }
    else
    {
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        os_log_t v27 = v19;
        char v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v29 = a5;
        uint64_t v30 = v26;
        *(_DWORD *)char v21 = 136315138;
        char v25 = v21 + 4;
        LOBYTE(v28) = a4;
        uint64_t v22 = NavigationContentAbstractPosition.description.getter();
        uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v19 = v27;
        _os_log_impl(&dword_1872C6000, v27, v20, "<NavigationHostingControllerCache>: HIT at %s, ignoring to avoid UINavigationController exception", v21, 0xCu);
        uint64_t v24 = v26;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v24, -1, -1);
        MEMORY[0x18C119C60](v21, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v17);
    }
    return 1;
  }
  return result;
}

uint64_t specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(uint64_t a1)
{
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  id v7 = (uint64_t *)(v1 + 16);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  long long v33 = (uint64_t *)(v1 + 16);
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_19:
    uint64_t v15 = *(unsigned __int8 *)(*(void *)(a1 + 48) + v11);
    if (v15 < 3)
    {
      swift_beginAccess();
      uint64_t v16 = *v7;
      if (*(void *)(*v7 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, 0), (v18 & 1) != 0))
      {
        id v7 = *(uint64_t **)(*(void *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        if (!*(void *)(a1 + 16)) {
          goto LABEL_31;
        }
        uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
        if ((v20 & 1) == 0) {
          goto LABEL_31;
        }
        outlined init with copy of NavigationState.StackContent.PositionedView(*(void *)(a1 + 56) + 72 * v19, (uint64_t)v34);
        uint64_t v21 = v34[0];
        uint64_t v22 = v7;
        swift_retain();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v34);
        id v23 = objc_msgSend(v22, sel_viewIfLoaded);
        id v24 = objc_msgSend(v23, sel_window);

        if (v24)
        {
          char v25 = (uint64_t *)((char *)v22 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v22) + 0x3D8));
          swift_beginAccess();
          *char v25 = v21;

          swift_release();
        }
        else
        {
          uint64_t v32 = direct field offset for UIHostingController.host;
          uint64_t v26 = *(void **)((char *)v22 + direct field offset for UIHostingController.host);
          os_log_t v27 = (void *)((char *)v26 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v26) + 0x60));
          swift_beginAccess();
          *os_log_t v27 = v21;
          swift_retain_n();
          uint64_t v28 = v26;
          swift_release();
          _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_release_n();
          id v29 = *(id *)((char *)v22 + v32);
          ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
          swift_release();
        }
        id v7 = v33;
      }
      else
      {
        swift_endAccess();
      }
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v8) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v3 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_18;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v8) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_18:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_19;
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v8) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  int v31 = v7;
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

id specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(unint64_t a1, void (*a2)(uint64_t *), uint64_t a3, void (*a4)(uint64_t *__return_ptr, unint64_t), uint64_t a5)
{
  void (*v108)(uint64_t *__return_ptr, unint64_t);
  uint64_t v109;
  long long v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119[7];
  unint64_t v120;
  long long v121;
  long long v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;

  uint64_t v107 = a5;
  long long v108 = a4;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (uint64_t)v104 - v12;
  MEMORY[0x1F4188790](v14);
  long long v114 = (char *)v104 - v15;
  char v126 = 0;
  uint64_t v124 = v5;
  long long v125 = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  swift_retain();
  a2(&v124);
  unint64_t v16 = v125;
  if (v125 >> 62) {
    goto LABEL_107;
  }
  uint64_t v17 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    long long v111 = v16;
    if (!v17) {
      break;
    }
    uint64_t v118 = v16 & 0xC000000000000001;
    uint64_t v19 = 4;
    *(void *)&long long v18 = 138412290;
    long long v110 = v18;
    *(void *)&long long v18 = 138412546;
    long long v105 = v18;
    v104[1] = MEMORY[0x1E4FBC840] + 8;
    long long v112 = v10;
    long long v113 = v13;
    uint64_t v117 = v17;
    uint64_t v116 = a1;
    while (1)
    {
      id v26 = v118 ? (id)MEMORY[0x18C117680](v19 - 4, v16) : *(id *)(v16 + 8 * v19);
      os_log_t v27 = v26;
      uint64_t v24 = v19 - 3;
      if (__OFADD__(v19 - 4, 1)) {
        break;
      }
      id v28 = objc_msgSend(v26, sel_navigationController);
      id v29 = v28;
      if (v28)
      {
        if (a1)
        {
          if (v28 == (id)a1)
          {
            int v40 = v114;
            static Log.navigation.getter();
            uint64_t v41 = type metadata accessor for Logger();
            uint64_t v42 = *(void *)(v41 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) != 1)
            {
              long long v109 = v42;
              long long v115 = v19 - 3;
              id v45 = (id)a1;
              id v46 = v27;
              id v47 = v45;
              id v48 = v46;
              uint64_t v49 = Logger.logObject.getter();
              os_log_type_t v50 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v49, v50))
              {
                uint64_t v51 = swift_slowAlloc();
                char v52 = (void *)swift_slowAlloc();
                uint64_t v106 = swift_slowAlloc();
                v119[0] = v106;
                *(_DWORD *)uint64_t v51 = v105;
                *(void *)(v51 + 4) = v48;
                *char v52 = v48;

                *(_WORD *)(v51 + 12) = 2080;
                v127 = (unint64_t)v29;
                _sSo16UIViewControllerCSgMaTm_0(0, &lazy cache variable for type metadata for UINavigationController?, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
                id v47 = v47;
                uint64_t v53 = String.init<A>(describing:)();
                *(void *)(v51 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v119);

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1872C6000, v49, v50, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController and destination were equal %s", (uint8_t *)v51, 0x16u);
                _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
                swift_arrayDestroy();
                MEMORY[0x18C119C60](v52, -1, -1);
                uint64_t v55 = v106;
                swift_arrayDestroy();
                MEMORY[0x18C119C60](v55, -1, -1);
                uint64_t v56 = v51;
                unint64_t v10 = v112;
                MEMORY[0x18C119C60](v56, -1, -1);
              }
              else
              {
              }
              unint64_t v16 = v111;
              uint64_t v13 = v113;
              uint64_t v25 = v117;
              (*(void (**)(char *, uint64_t))(v109 + 8))(v114, v41);
LABEL_36:
              uint64_t v24 = v115;
              goto LABEL_8;
            }

            uint64_t v36 = (uint64_t)v40;
            goto LABEL_27;
          }
          id v30 = v28;
          id v31 = (id)a1;
          objc_msgSend(v27, sel_willMoveToParentViewController_, 0);
          id result = objc_msgSend(v27, sel_view);
          if (!result)
          {
            __break(1u);
            return result;
          }
          long long v33 = result;
          objc_msgSend(result, sel_removeFromSuperview);

          specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v27, v30, (uint64_t)&v126);
          unint64_t v16 = v111;
          uint64_t v25 = v117;
          uint64_t v24 = v19 - 3;
          goto LABEL_7;
        }
      }
      else if (!a1)
      {
        static Log.navigation.getter();
        uint64_t v43 = type metadata accessor for Logger();
        uint64_t v44 = *(void *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v10, 1, v43) != 1)
        {
          long long v115 = v19 - 3;
          uint64_t v57 = v27;
          uint64_t v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v58, v59))
          {
            uint64_t v60 = swift_slowAlloc();
            int v61 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v60 = v110;
            *(void *)(v60 + 4) = v57;
            *int v61 = v57;
            _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            uint64_t v62 = v61;
            uint64_t v13 = v113;
            MEMORY[0x18C119C60](v62, -1, -1);
            MEMORY[0x18C119C60](v60, -1, -1);
            uint64_t v63 = v58;
            uint64_t v58 = v57;
          }
          else
          {

            uint64_t v63 = v57;
          }
          unint64_t v16 = v111;

          (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v43);
          uint64_t v25 = v117;
          goto LABEL_36;
        }

        uint64_t v36 = (uint64_t)v10;
        goto LABEL_27;
      }
      static Log.navigation.getter();
      uint64_t v34 = type metadata accessor for Logger();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v13, 1, v34) == 1)
      {

        uint64_t v36 = v13;
LABEL_27:
        outlined destroy of UINavigationPresentationAdaptor?(v36, (uint64_t (*)(void))type metadata accessor for Logger?);
        unint64_t v16 = v111;
        uint64_t v25 = v117;
        goto LABEL_8;
      }
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = v110;
        *(void *)(v20 + 4) = v37;
        *uint64_t v21 = v37;

        _os_log_impl(&dword_1872C6000, v38, v39, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController or destination were nil", (uint8_t *)v20, 0xCu);
        _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_arrayDestroy();
        uint64_t v22 = v21;
        unint64_t v10 = v112;
        MEMORY[0x18C119C60](v22, -1, -1);
        uint64_t v23 = v20;
        uint64_t v13 = v113;
        MEMORY[0x18C119C60](v23, -1, -1);
      }
      else
      {
      }
      uint64_t v24 = v19 - 3;

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v13, v34);
      unint64_t v16 = v111;
      uint64_t v25 = v117;
LABEL_7:
      a1 = v116;
LABEL_8:
      ++v19;
      if (v24 == v25) {
        goto LABEL_37;
      }
    }
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    swift_bridgeObjectRetain_n();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!v126) {
    goto LABEL_94;
  }
  unint64_t v64 = a1;
  uint64_t v65 = *(void *)(v126 + 64);
  long long v109 = v126 + 64;
  uint64_t v66 = 1 << *(unsigned char *)(v126 + 32);
  if (v66 < 64) {
    uint64_t v67 = ~(-1 << v66);
  }
  else {
    uint64_t v67 = -1;
  }
  a1 = v67 & v65;
  *(void *)&long long v110 = (unint64_t)(v66 + 63) >> 6;
  uint64_t v68 = swift_bridgeObjectRetain();
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v118 = MEMORY[0x1E4FBC838] + 8;
  long long v112 = (char *)v68;
  while (2)
  {
    if (a1)
    {
      long long v115 = (a1 - 1) & a1;
      uint64_t v116 = v69;
      unint64_t v71 = __clz(__rbit64(a1)) | (v69 << 6);
      goto LABEL_58;
    }
    BOOL v72 = __OFADD__(v69, 1);
    uint64_t v73 = v69 + 1;
    if (v72) {
      goto LABEL_105;
    }
    a1 = v64;
    if (v73 >= (uint64_t)v110) {
      goto LABEL_93;
    }
    unint64_t v74 = *(void *)(v109 + 8 * v73);
    if (v74)
    {
LABEL_57:
      long long v115 = (v74 - 1) & v74;
      uint64_t v116 = v73;
      unint64_t v71 = __clz(__rbit64(v74)) + (v73 << 6);
LABEL_58:
      uint64_t v76 = 8 * v71;
      unint64_t v77 = *(void *)(*(void *)(v68 + 56) + v76);
      uint64_t v13 = (uint64_t)*(id *)(*(void *)(v68 + 48) + v76);
      swift_bridgeObjectRetain();
      id v78 = objc_msgSend((id)v13, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      specialized _ArrayProtocol.filter(_:)(v16, v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend((id)v13, sel_setViewControllers_, isa);

      uint64_t v117 = v70;
      long long v114 = (char *)v13;
      if ((v77 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
        Set.Iterator.init(_cocoa:)();
        unint64_t v77 = v127;
        unint64_t v80 = v128;
        uint64_t v81 = v129;
        uint64_t v82 = v130;
        a1 = v131;
      }
      else
      {
        uint64_t v82 = 0;
        uint64_t v83 = -1 << *(unsigned char *)(v77 + 32);
        unint64_t v80 = v77 + 56;
        uint64_t v81 = ~v83;
        uint64_t v84 = -v83;
        if (v84 < 64) {
          uint64_t v85 = ~(-1 << v84);
        }
        else {
          uint64_t v85 = -1;
        }
        a1 = v85 & *(void *)(v77 + 56);
      }
      long long v113 = v81;
      int64_t v86 = (unint64_t)(v81 + 64) >> 6;
      if ((v77 & 0x8000000000000000) == 0) {
        goto LABEL_68;
      }
LABEL_65:
      uint64_t v87 = __CocoaSet.Iterator.next()();
      if (!v87) {
        goto LABEL_42;
      }
      uint64_t v123 = v87;
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v16 = v119[0];
      swift_unknownObjectRelease();
      uint64_t v13 = v82;
      unint64_t v10 = (char *)a1;
      if (!v16)
      {
LABEL_42:
        outlined consume of Set<UIPress>.Iterator._Variant();

        uint64_t v68 = (uint64_t)v112;
        uint64_t v70 = v117;
        unint64_t v69 = v116;
        a1 = v115;
        continue;
      }
      while (1)
      {
        objc_msgSend((id)v16, sel_removeFromParentViewController);
        objc_msgSend((id)v16, sel_willMoveToParentViewController_, v64);

        uint64_t v82 = v13;
        a1 = (unint64_t)v10;
        if ((v77 & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
LABEL_68:
        if (a1)
        {
          unint64_t v10 = (char *)((a1 - 1) & a1);
          unint64_t v88 = __clz(__rbit64(a1)) | (v82 << 6);
          uint64_t v13 = v82;
        }
        else
        {
          int64_t v89 = v82 + 1;
          if (__OFADD__(v82, 1))
          {
            __break(1u);
            goto LABEL_104;
          }
          if (v89 >= v86) {
            goto LABEL_42;
          }
          unint64_t v90 = *(void *)(v80 + 8 * v89);
          uint64_t v13 = v82 + 1;
          if (!v90)
          {
            uint64_t v13 = v82 + 2;
            if (v82 + 2 >= v86) {
              goto LABEL_42;
            }
            unint64_t v90 = *(void *)(v80 + 8 * v13);
            if (!v90)
            {
              uint64_t v13 = v82 + 3;
              if (v82 + 3 >= v86) {
                goto LABEL_42;
              }
              unint64_t v90 = *(void *)(v80 + 8 * v13);
              if (!v90)
              {
                uint64_t v13 = v82 + 4;
                if (v82 + 4 >= v86) {
                  goto LABEL_42;
                }
                unint64_t v90 = *(void *)(v80 + 8 * v13);
                if (!v90)
                {
                  uint64_t v13 = v82 + 5;
                  if (v82 + 5 >= v86) {
                    goto LABEL_42;
                  }
                  unint64_t v90 = *(void *)(v80 + 8 * v13);
                  if (!v90)
                  {
                    uint64_t v91 = v82 + 6;
                    while (v86 != v91)
                    {
                      unint64_t v90 = *(void *)(v80 + 8 * v91++);
                      if (v90)
                      {
                        uint64_t v13 = v91 - 1;
                        goto LABEL_85;
                      }
                    }
                    goto LABEL_42;
                  }
                }
              }
            }
          }
LABEL_85:
          unint64_t v10 = (char *)((v90 - 1) & v90);
          unint64_t v88 = __clz(__rbit64(v90)) + (v13 << 6);
        }
        unint64_t v16 = (unint64_t)*(id *)(*(void *)(v77 + 48) + 8 * v88);
        if (!v16) {
          goto LABEL_42;
        }
      }
    }
    break;
  }
  uint64_t v75 = v73 + 1;
  if (v73 + 1 >= (uint64_t)v110) {
    goto LABEL_93;
  }
  unint64_t v74 = *(void *)(v109 + 8 * v75);
  if (v74) {
    goto LABEL_56;
  }
  uint64_t v75 = v73 + 2;
  if (v73 + 2 >= (uint64_t)v110) {
    goto LABEL_93;
  }
  unint64_t v74 = *(void *)(v109 + 8 * v75);
  if (v74) {
    goto LABEL_56;
  }
  uint64_t v75 = v73 + 3;
  if (v73 + 3 >= (uint64_t)v110) {
    goto LABEL_93;
  }
  unint64_t v74 = *(void *)(v109 + 8 * v75);
  if (v74) {
    goto LABEL_56;
  }
  uint64_t v75 = v73 + 4;
  if (v73 + 4 >= (uint64_t)v110) {
    goto LABEL_93;
  }
  unint64_t v74 = *(void *)(v109 + 8 * v75);
  if (v74)
  {
LABEL_56:
    uint64_t v73 = v75;
    goto LABEL_57;
  }
  while (1)
  {
    uint64_t v73 = v75 + 1;
    if (__OFADD__(v75, 1)) {
      goto LABEL_106;
    }
    if (v73 >= (uint64_t)v110) {
      break;
    }
    unint64_t v74 = *(void *)(v109 + 8 * v73);
    ++v75;
    if (v74) {
      goto LABEL_57;
    }
  }
LABEL_93:
  swift_release();
  unint64_t v16 = v111;
LABEL_94:
  v108(&v123, v16);
  swift_bridgeObjectRelease();
  if (v126)
  {
    uint64_t v92 = -1 << *(unsigned char *)(v126 + 32);
    uint64_t v93 = ~v92;
    uint64_t v94 = *(void *)(v126 + 64);
    uint64_t v95 = -v92;
    v119[0] = v126;
    v119[1] = v126 + 64;
    if (v95 < 64) {
      uint64_t v96 = ~(-1 << v95);
    }
    else {
      uint64_t v96 = -1;
    }
    v119[2] = v93;
    v119[3] = 0;
    v119[4] = v96 & v94;
    v119[5] = (uint64_t)closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:);
    v119[6] = 0;
    CGFloat v120 = 0xF000000000000007;
    CGFloat v121 = 0u;
    CGFloat v122 = 0u;
    specialized FlattenSequence.Iterator.next()();
    if (v97)
    {
      long long v98 = v97;
      uint64_t v99 = MEMORY[0x1E4F41618];
      uint64_t v100 = MEMORY[0x1E4F41610];
      do
      {
        objc_msgSend(v98, sel_didMoveToParentViewController_, a1);
        id v101 = *(id *)&v98[direct field offset for UIHostingController.host];
        static ViewRendererHostProperties.all.getter();
        type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v99, v100, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        specialized FlattenSequence.Iterator.next()();
        long long v98 = v102;
      }
      while (v102);
    }
    uint64_t v103 = v120;
    outlined consume of Set<UIPress>.Iterator._Variant();
    swift_release();
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v103);
  }
  outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v124);
  return (id)v123;
}

uint64_t outlined destroy of NavigationHostingControllerCache_UIKit.Source(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NavigationHostingControllerCache_UIKit.Source()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_unknownObjectWeakDestroy();
}

void partial apply for closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)(uint64_t a1)
{
  closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48), *(void (**)(void))(v1 + 56));
}

void closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  v7[0] = a2;
  uint64_t v8 = a3;
  NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v7, 0, a4, a5, a6, a7);
}

void NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(unsigned __int8 *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t), void (*a6)(void))
{
  id v7 = v6;
  uint64_t v59 = a4;
  _s2os6LoggerVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v54 - v17;
  int v19 = *a1;
  Swift::UInt v20 = *((void *)a1 + 1);
  uint64_t v21 = *v7;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 16);
  if (!*(void *)(v22 + 16) || (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v24 & 1) == 0))
  {
    LODWORD(v59) = v19;
    swift_endAccess();
    goto LABEL_6;
  }
  uint64_t v58 = a3;
  uint64_t v25 = *(void **)(*(void *)(v22 + 56) + 8 * v23);
  swift_endAccess();
  id v26 = v25;
  if (requiresNew #1 (_:) in NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v26, (uint64_t)v7, a2 & 1, v19, v20))
  {
    LODWORD(v59) = v19;

LABEL_6:
    static Log.navigation.getter();
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v15, 1, v27) == 1)
    {
      uint64_t v29 = outlined destroy of Logger?((uint64_t)v15);
    }
    else
    {
      uint64_t v58 = a6;
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v56 = (uint64_t)a5;
        long long v33 = (uint8_t *)v32;
        uint64_t v34 = swift_slowAlloc();
        Swift::UInt v57 = v20;
        uint64_t v35 = v34;
        uint64_t v60 = v34;
        *(_DWORD *)long long v33 = 136315138;
        uint64_t v55 = v33 + 4;
        LOBYTE(v61) = v59;
        Swift::UInt v62 = v57;
        uint64_t v36 = NavigationContentAbstractPosition.description.getter();
        uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v30, v31, "<NavigationHostingControllerCache>: MISS at %s", v33, 0xCu);
        swift_arrayDestroy();
        uint64_t v38 = v35;
        Swift::UInt v20 = v57;
        MEMORY[0x18C119C60](v38, -1, -1);
        os_log_type_t v39 = v33;
        a5 = (uint64_t (*)(uint64_t))v56;
        MEMORY[0x18C119C60](v39, -1, -1);
      }

      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v27);
    }
    int v40 = (void *)a5(v29);
    uint64_t v41 = *v7;
    swift_beginAccess();
    id v42 = v40;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v60 = *(void *)(v41 + 16);
    *(void *)(v41 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v42, v59, v20, isUniquelyReferenced_nonNull_native);
    *(void *)(v41 + 16) = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_12;
  }
  static Log.navigation.getter();
  uint64_t v45 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v18, 1, v45) == 1)
  {
    outlined destroy of Logger?((uint64_t)v18);
  }
  else
  {
    Swift::UInt v57 = v20;
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v60 = v56;
      uint64_t v55 = v49;
      *(_DWORD *)uint64_t v49 = 136315138;
      unint64_t v54 = v49 + 4;
      LOBYTE(v61) = v19;
      Swift::UInt v62 = v57;
      uint64_t v50 = NavigationContentAbstractPosition.description.getter();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v52 = v55;
      _os_log_impl(&dword_1872C6000, v47, v48, "<NavigationHostingControllerCache>: HIT at %s", v55, 0xCu);
      uint64_t v53 = v56;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v53, -1, -1);
      MEMORY[0x18C119C60](v52, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v45);
  }
  id v42 = v26;
  v58();

LABEL_12:
  id v44 = v42;
  MEMORY[0x18C115B40]();
  if (*(void *)((v7[1] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7[1] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

void type metadata accessor for Logger?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s2os6LoggerVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s2os6LoggerVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s2os6LoggerVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1, Swift::UInt a2)
{
  int v4 = a1;
  Hasher.init(_seed:)();
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  Hasher._combine(_:)(a2);
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      unint64_t v8 = (unsigned __int8 *)(*(void *)(v3 + 48) + 16 * result);
      int v9 = *v8;
      uint64_t v10 = *((void *)v8 + 1);
      if (v9 == 3)
      {
        if (a1 == 3 && v10 == a2) {
          return result;
        }
      }
      else if (a1 != 3 && v9 == a1 && v10 == a2)
      {
        return result;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 16 * result;
  *(unsigned char *)uint64_t v5 = a2;
  *(void *)(v5 + 8) = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    lazy protocol witness table accessor for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>);
    }
  }
}

uint64_t closure #2 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_9:
    id v6 = (id)MEMORY[0x18C117680](0, a1);
    goto LABEL_6;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(a1 + 32);
LABEL_6:
    id v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v7;
    return result;
  }
  __break(1u);
  return result;
}

char *partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)()
{
  return specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(**(void **)(v0 + 24), 0, **(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 8));
}

{
  return partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)();
}

{
  return partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)()
{
  return closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)();
}

uint64_t closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)()
{
  uint64_t v0 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v0);

  return swift_release();
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      unint64_t v23 = v28;
    }
    else
    {
      unint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    uint64_t *v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        unint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  void *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BSAction);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E4F4F668, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
    id v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      uint64_t v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E4F4F668, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
      id v24 = v30;
    }
    else
    {
      id v24 = (void *)v22;
      uint64_t v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    uint64_t *v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BSAction);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        unint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v31 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E4F4F668, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E4F4F668, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BSAction);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>()
{
  if (!lazy cache variable for type metadata for _SetStorage<NavigationStackHostingController<AnyView>>)
  {
    type metadata accessor for _SetStorage<String>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<NavigationStackHostingController<AnyView>>);
    }
  }
}

uint64_t outlined init with copy of NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 64);
  swift_retain();
  if (v4 == 1)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v8 = (_OWORD *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 40);
    swift_retain();
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 32) = *v8;
    }
    else
    {
      *(void *)(a1 + 32) = *(void *)v8;
      *(void *)(a1 + 40) = v9;
      swift_retain();
    }
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = 1;
  }
  else
  {
    uint64_t v5 = (_OWORD *)(a1 + 24);
    unint64_t v6 = (_OWORD *)(a2 + 24);
    if (v4)
    {
      long long v10 = *(_OWORD *)(a2 + 40);
      _OWORD *v5 = *v6;
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 48) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      *(unsigned char *)(a1 + 64) = 0;
    }
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject);
  }
  return result;
}

void type metadata accessor for (UINavigationController, Set<NavigationStackHostingController<AnyView>>)()
{
  if (!lazy cache variable for type metadata for (UINavigationController, Set<NavigationStackHostingController<AnyView>>))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    type metadata accessor for Set<NavigationStackHostingController<AnyView>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UINavigationController, Set<NavigationStackHostingController<AnyView>>));
    }
  }
}

void type metadata accessor for Set<NavigationStackHostingController<AnyView>>()
{
  if (!lazy cache variable for type metadata for Set<NavigationStackHostingController<AnyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
    unint64_t v0 = type metadata accessor for Set();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<NavigationStackHostingController<AnyView>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    type metadata accessor for Set<NavigationStackHostingController<AnyView>>();
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UINavigationController and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>);
    }
  }
}

double static PrimitiveTargetVisibilityModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v30 = a4;
  long long v33 = a6;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v29 = *a1;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  int v11 = *(_DWORD *)(a2 + 80);
  unint64_t v45 = *(void *)a2;
  int v46 = v7;
  long long v48 = *(_OWORD *)(a2 + 24);
  uint64_t v47 = v8;
  uint64_t v49 = v10;
  uint64_t v50 = v9;
  long long v51 = *(_OWORD *)(a2 + 56);
  uint64_t v52 = *(void *)(a2 + 72);
  int v53 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  unint64_t v36 = v45;
  int v37 = v46;
  *(void *)&v38[4] = v8;
  long long v39 = v48;
  uint64_t v40 = v10;
  uint64_t v41 = v9;
  long long v42 = v51;
  uint64_t v43 = v52;
  int v44 = v53;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  a3(&v34, v12, &v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v13 = v34;
  *(void *)&long long v14 = v35;
  unint64_t v36 = v34;
  long long v32 = v14;
  int v37 = v35;
  uint64_t v15 = PreferencesOutputs.subscript.getter();
  if ((v15 & 0x100000000) == 0)
  {
    unsigned int v16 = v15;
    LODWORD(v36) = v29;
    type metadata accessor for PrimitiveTargetVisibilityModifier();
    type metadata accessor for _GraphValue();
    unsigned int v17 = _GraphValue.value.getter();
    UpdateCycleDetector.init()();
    int v18 = v37;
    char v19 = v38[0];
    uint64_t v20 = static Array._allocateUninitialized(_:)();
    unint64_t v21 = v36;
    unint64_t v36 = __PAIR64__(v16, v17);
    LOBYTE(v37) = 0;
    *(void *)uint64_t v38 = v21;
    *(_DWORD *)&v38[8] = v18;
    LOBYTE(v39) = v19;
    DWORD1(v39) = -1;
    *((void *)&v39 + 1) = v20;
    MEMORY[0x1F4188790](v20);
    uint64_t v27 = type metadata accessor for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s7SwiftUI5StateVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v26, v27, MEMORY[0x1E4FBC248], v22, MEMORY[0x1E4FBC278], v23);
    swift_bridgeObjectRelease();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  id v24 = v33;
  *long long v33 = v13;
  double result = *(double *)&v32;
  v24[1] = v32;
  return result;
}

uint64_t type metadata accessor for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AlertModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ToolbarButtonHoverShape(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape();
  unint64_t result = lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape();
  *(void *)(a1 + 16) = result;
  return result;
}

void *initializeWithTake for NavigationStackReader(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)v5;
  *(void *)(v4 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)unint64_t v4 = v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24 + v4) & ~v9;
  uint64_t v11 = (v9 + 24 + v5) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = v12 + v10;
  uint64_t v14 = v12 + v11;
  *(unsigned char *)uint64_t v13 = *(unsigned char *)v14;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(_OWORD *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Child(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Child and conformance Child();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListImageRepresentable.PlatformRepresentation(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ContainerRelativeFrameModifier.MakeLayout(uint64_t a1)
{
  unint64_t Layout = lazy protocol witness table accessor for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout();

  return MEMORY[0x1F40FE388](a1, Layout);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLContainerPosition(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLTransform(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlipForRTLTransform and conformance FlipForRTLTransform();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLFrame(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlipForRTLFrame and conformance FlipForRTLFrame();

  return MEMORY[0x1F40FE388](a1, v2);
}

void specialized ClarityUIListLayoutSettingsDiffAction._performActions(for:withUpdatedFBSScene:settingsDiff:from:transitionContext:lifecycleActionType:)(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  char v4 = 0;
  if (a1)
  {
    id v1 = a1;
    id v2 = ClarityUIListLayoutSettingsDiffAction.diffInspector.getter();
    objc_msgSend(v2, sel_inspectDiff_withContext_, v1, &v4);

    if (v4 == 1)
    {
      id v3 = objc_msgSend(self, sel_defaultCenter);
      if (one-time initialization token for didUpdateListLayout != -1) {
        swift_once();
      }
      objc_msgSend(v3, sel_postNotificationName_object_, static ClarityUI.didUpdateListLayout, 0);
    }
  }
}

void *assignWithCopy for UIKitSearchFieldAdaptor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = *(int *)(v4 + 32);
  long long v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  char *v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  _OWORD v6[2] = *((unsigned char *)a2 + v5 + 2);
  v6[3] = *((unsigned char *)a2 + v5 + 3);
  LODWORD(v5) = *(_DWORD *)((char *)a2 + v5 + 4);
  v6[8] = v7[8];
  *((_DWORD *)v6 + 1) = v5;
  uint64_t v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v13 = v8[11];
  uint64_t v14 = &v6[v13];
  uint64_t v15 = &v7[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  unsigned int v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = (uint64_t)a1 + v17;
  char v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  int v21 = *((unsigned __int8 *)a2 + v17 + 8);
  if (v20 == 255)
  {
    if (v21 == 255)
    {
      uint64_t v23 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v19[8];
      *(void *)uint64_t v18 = v23;
    }
    else
    {
      char v28 = v21 & 1;
      uint64_t v29 = *(void *)v19;
      outlined copy of PlatformItemCollection.Storage(v29, v21 & 1);
      *(void *)uint64_t v18 = v29;
      *(unsigned char *)(v18 + 8) = v28;
    }
  }
  else if (v21 == 255)
  {
    outlined destroy of PlatformItemCollection(v18);
    char v22 = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    *(unsigned char *)(v18 + 8) = v22;
  }
  else
  {
    char v24 = v21 & 1;
    uint64_t v25 = *(void *)v19;
    outlined copy of PlatformItemCollection.Storage(v25, v21 & 1);
    uint64_t v26 = *(void *)v18;
    char v27 = *(unsigned char *)(v18 + 8);
    *(void *)uint64_t v18 = v25;
    *(unsigned char *)(v18 + 8) = v24;
    outlined consume of PlatformItemCollection.Storage(v26, v27);
  }
  *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
  uint64_t v30 = v16[8];
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)((char *)a2 + v30);
  uint64_t v34 = *((void *)v32 + 1);
  char v35 = v32[16];
  outlined copy of Text.Storage(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)uint64_t v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Text.Storage(v36, v37, v38);
  *((void *)v31 + 3) = *((void *)v32 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for UISecureWindow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>)
  {
    type metadata accessor for AccessibilityFocusBindingModifier<Bool>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityFocusBindingModifier<Bool>()
{
  if (!lazy cache variable for type metadata for AccessibilityFocusBindingModifier<Bool>)
  {
    unint64_t v0 = type metadata accessor for AccessibilityFocusBindingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityFocusBindingModifier<Bool>);
    }
  }
}

uint64_t type metadata accessor for AccessibilityFocusBindingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for UICollectionViewListCoordinator()
{
  return swift_initClassMetadata2();
}

uint64_t base witness table accessor for View in ResolvedProgressViewStyle()
{
  return _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, (void (*)(uint64_t))type metadata accessor for ResolvedProgressViewStyle);
}

uint64_t base witness table accessor for View in ResolvedSearchFieldStyle()
{
  return lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedSearchFieldStyle);
}

uint64_t getEnumTagSinglePayload for ConfirmationDialog(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 177)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t type metadata completion function for UIKitBarItemHost()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>, &lazy cache variable for type metadata for Text.LineStyle?, MEMORY[0x1E4F41410]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListLabeledContentPrefersHorizontalLayout()
{
  return &protocol witness table for ListLabeledContentPrefersHorizontalLayout;
}

uint64_t static CommandGroupPlacement.toolbar.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for toolbar, (uint64_t)static CommandGroupPlacement.toolbar, a1);
}

uint64_t static CommandGroupPlacement.sidebar.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for sidebar, (uint64_t)static CommandGroupPlacement.sidebar, a1);
}

uint64_t static CommandGroupPlacement.newItem.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for newItem, (uint64_t)static CommandGroupPlacement.newItem, a1);
}

uint64_t static ToolbarItemPlacement.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for automatic, (uint64_t)&static ToolbarItemPlacement.automatic, a1);
}

uint64_t static ToolbarItemPlacement.confirmationAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for confirmationAction, (uint64_t)&static ToolbarItemPlacement.confirmationAction, a1);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ButtonStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t type metadata accessor for AnyNavigationPath.BoxBase()
{
  return self;
}

_WORD *assignWithCopy for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_2((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = *(void *)v9;
      uint64_t v26 = *((void *)v9 + 1);
      char v27 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v26, v27);
      *(void *)uint64_t v8 = v25;
      *((void *)v8 + 1) = v26;
      unsigned char v8[16] = v27;
      char v28 = (void *)*((void *)v9 + 3);
      *((void *)v8 + 3) = v28;
      uint64_t v29 = *((void *)v9 + 5);
      *((void *)v8 + 4) = *((void *)v9 + 4);
      *((void *)v8 + 5) = v29;
      id v30 = v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v59 = v9[34];
        __int16 v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v15, v59);
        *(void *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v59;
        uint64_t v16 = *((void *)v9 + 5);
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v18 = *((void *)v9 + 7);
        uint64_t v19 = *((void *)v9 + 8);
        char v60 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v60);
        *((void *)v8 + 5) = v16;
        *((void *)v8 + 6) = v17;
        *((void *)v8 + 7) = v18;
        *((void *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v60;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        int v21 = &v8[v20];
        char v22 = &v9[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      uint64_t v31 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v31;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v32 = a3[5];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *((void *)v34 + 1);
  uint64_t v37 = *((void *)v34 + 2);
  uint64_t v38 = *((void *)v34 + 3);
  char v39 = v34[32];
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)v34, v36, v37, v38, v39);
  uint64_t v40 = *(void *)v33;
  uint64_t v41 = *((void *)v33 + 1);
  uint64_t v42 = *((void *)v33 + 2);
  uint64_t v43 = *((void *)v33 + 3);
  char v44 = v33[32];
  *(void *)uint64_t v33 = v35;
  *((void *)v33 + 1) = v36;
  *((void *)v33 + 2) = v37;
  *((void *)v33 + 3) = v38;
  v33[32] = v39;
  outlined consume of Environment<HoverEffectContext?>.Content(v40, v41, v42, v43, v44);
  uint64_t v45 = a3[6];
  int v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = *(void *)v47;
  LOBYTE(v36) = v47[8];
  outlined copy of Environment<Bool>.Content(*(void *)v47, v36);
  uint64_t v49 = *(void *)v46;
  char v50 = v46[8];
  *(void *)int v46 = v48;
  v46[8] = v36;
  outlined consume of Environment<Bool>.Content(v49, v50);
  uint64_t v51 = a3[7];
  uint64_t v52 = (char *)a1 + v51;
  int v53 = (char *)a2 + v51;
  uint64_t v54 = *(void *)v53;
  char v55 = v53[8];
  outlined copy of Environment<Bool>.Content(*(void *)v53, v55);
  uint64_t v56 = *(void *)v52;
  char v57 = v52[8];
  *(void *)uint64_t v52 = v54;
  v52[8] = v55;
  outlined consume of Environment<Bool>.Content(v56, v57);
  return a1;
}

void *initializeWithCopy for SearchToolbarItem(void *a1, void *a2, int *a3)
{
  uint64_t v60 = a2[1];
  *a1 = *a2;
  a1[1] = v60;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  char *v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  unsigned __int8 v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  int v22 = v21[8];
  if (v22 == 255)
  {
    *(void *)uint64_t v20 = *(void *)v21;
    _OWORD v20[8] = v21[8];
  }
  else
  {
    char v23 = v22 & 1;
    uint64_t v24 = *(void *)v21;
    outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
    *(void *)uint64_t v20 = v24;
    _OWORD v20[8] = v23;
  }
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v25 = v18[8];
  uint64_t v26 = (char *)a1 + v25;
  char v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)((char *)a2 + v25);
  uint64_t v29 = *(void *)((char *)a2 + v25 + 8);
  char v30 = *((unsigned char *)a2 + v25 + 16);
  outlined copy of Text.Storage(v28, v29, v30);
  *(void *)uint64_t v26 = v28;
  *((void *)v26 + 1) = v29;
  v26[16] = v30;
  uint64_t v31 = a3[5];
  uint64_t v32 = a3[6];
  char v33 = *((unsigned char *)a2 + v31);
  *((void *)v26 + 3) = *((void *)v27 + 3);
  *((unsigned char *)a1 + v31) = v33;
  uint64_t v34 = (char *)a1 + v32;
  uint64_t v35 = (char *)a2 + v32;
  uint64_t v36 = *(void *)((char *)a2 + v32);
  swift_bridgeObjectRetain();
  if (v36)
  {
    uint64_t v37 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = v36;
    *((void *)v34 + 1) = v37;
    *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
    uint64_t v38 = (void *)*((void *)v35 + 4);
    *((void *)v34 + 3) = *((void *)v35 + 3);
    *((void *)v34 + 4) = v38;
    *((void *)v34 + 5) = *((void *)v35 + 5);
    *((_DWORD *)v34 + 12) = *((_DWORD *)v35 + 12);
    *((void *)v34 + 7) = *((void *)v35 + 7);
    *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
    *((void *)v34 + 10) = *((void *)v35 + 10);
    id v39 = v38;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v40 = *((_OWORD *)v35 + 3);
    *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
    *((_OWORD *)v34 + 3) = v40;
    *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
    *((void *)v34 + 10) = *((void *)v35 + 10);
    long long v41 = *((_OWORD *)v35 + 1);
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    *((_OWORD *)v34 + 1) = v41;
  }
  uint64_t v42 = a3[7];
  uint64_t v43 = (char *)a1 + v42;
  char v44 = (char *)a2 + v42;
  if (*(void *)v44)
  {
    uint64_t v45 = *((void *)v44 + 1);
    *(void *)uint64_t v43 = *(void *)v44;
    *((void *)v43 + 1) = v45;
    *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
    int v46 = (void *)*((void *)v44 + 4);
    *((void *)v43 + 3) = *((void *)v44 + 3);
    *((void *)v43 + 4) = v46;
    *((void *)v43 + 5) = *((void *)v44 + 5);
    *((_DWORD *)v43 + 12) = *((_DWORD *)v44 + 12);
    *((void *)v43 + 7) = *((void *)v44 + 7);
    *((_OWORD *)v43 + 4) = *((_OWORD *)v44 + 4);
    *((void *)v43 + 10) = *((void *)v44 + 10);
    id v47 = v46;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v48 = *((_OWORD *)v44 + 3);
    *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
    *((_OWORD *)v43 + 3) = v48;
    *((_OWORD *)v43 + 4) = *((_OWORD *)v44 + 4);
    *((void *)v43 + 10) = *((void *)v44 + 10);
    long long v49 = *((_OWORD *)v44 + 1);
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    *((_OWORD *)v43 + 1) = v49;
  }
  uint64_t v50 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  if (*(void *)v52)
  {
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
    uint64_t v54 = (void *)*((void *)v52 + 4);
    *((void *)v51 + 3) = *((void *)v52 + 3);
    *((void *)v51 + 4) = v54;
    *((void *)v51 + 5) = *((void *)v52 + 5);
    *((_DWORD *)v51 + 12) = *((_DWORD *)v52 + 12);
    *((void *)v51 + 7) = *((void *)v52 + 7);
    *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
    *((void *)v51 + 10) = *((void *)v52 + 10);
    id v55 = v54;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v56 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v56;
    *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
    *((void *)v51 + 10) = *((void *)v52 + 10);
    long long v57 = *((_OWORD *)v52 + 1);
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v57;
  }
  return a1;
}

uint64_t type metadata completion function for AppGraph()
{
  return swift_initClassMetadata2();
}

uint64_t partial apply for closure #1 in MappedViews.ElementView.value.getter()
{
  return closure #1 in MappedViews.ElementView.value.getter();
}

uint64_t closure #1 in MappedViews.ElementView.value.getter()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t type metadata accessor for MappedViews.ElementView()
{
  return swift_getGenericMetadata();
}

uint64_t View.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  View.accessibilityLabel(_:)(v8, v9, v11 & 1, v13, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ToolbarItemGroup.MakeView.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v5(a2, Value, a1);
}

uint64_t type metadata completion function for ItemSheetPresentationModifier()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for WindowGroupRootContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t TouchBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  char v22 = static _EventDirections.all;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v17 = 0x3FF0000000000000;
  uint64_t v20 = 0;
  char v21 = 2;
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v10);
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v11);
  outlined init with copy of DragGesture((uint64_t)v10, (uint64_t)v13);
  outlined init with copy of DragGesture((uint64_t)v11, (uint64_t)&v14);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>();
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  MapGesture.init(_:)();
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  long long v16 = v12;
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  uint64_t v8 = swift_allocObject();
  *(double *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a1;
  *(_DWORD *)(v8 + 32) = a2;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  v11[9] = partial apply for closure #2 in TouchBasedMagnifyGesture.body.getter;
  v11[10] = v8;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v10, a3, (uint64_t (*)(void))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
  *(void *)(a3 + 144) = 1;
  *(unsigned char *)(a3 + 152) = 1;
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  return outlined destroy of DragGesture((uint64_t)&v17);
}

uint64_t outlined init with copy of DragGesture(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Button<>.init<A>(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  *a5 = 256;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>);
  uint64_t v11 = v10;
  long long v12 = (void *)((char *)a5 + *(int *)(v10 + 36));
  void *v12 = a2;
  v12[1] = a3;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in Button<>.init<A>(_:action:)(a1, (uint64_t)a5 + *(int *)(v11 + 40));
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);

  return v13(a1, a4);
}

uint64_t closure #1 in Button<>.init<A>(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

ValueMetadata *type metadata accessor for TextInputAutocapitalization()
{
  return &type metadata for TextInputAutocapitalization;
}

uint64_t associated type witness table accessor for View.Body : View in PlatformItemLabelView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationStack<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for StackItemsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 552) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 552) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

id CollectionViewListScrollable.coordinator.getter()
{
  type metadata accessor for UICollectionViewListCoordinator();
  Weakuint64_t Value = (id *)AGGraphGetWeakValue();
  if (!WeakValue) {
    return 0;
  }
  id v1 = *WeakValue;
  id v2 = *WeakValue;
  return v1;
}

uint64_t lazy protocol witness table accessor for type _EndedGesture<PhysicalButtonPressGesture> and conformance _EndedGesture<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI13_EndedGestureVyAA019PhysicalButtonPressD0VGACyxGAA0D0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>> and conformance AddGestureModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>)
  {
    type metadata accessor for ModifiedContent<Switch, _FixedSizeLayout>();
    type metadata accessor for _ContentShapeModifier<Capsule>(255, &lazy cache variable for type metadata for _ContentShapeModifier<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E4F41670], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>();
    type metadata accessor for _ContentShapeModifier<Capsule>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
    }
  }
}

void type metadata accessor for _ContentShapeModifier<Capsule>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>)
  {
    type metadata accessor for LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>();
    type metadata accessor for _ContentShapeModifier<Capsule>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout, (uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>);
    }
  }
}

void type metadata accessor for LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>()
{
  if (!lazy cache variable for type metadata for LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>(255);
    unint64_t v0 = type metadata accessor for LabeledContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type Capsule and conformance Capsule()
{
  unint64_t result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>> and conformance AddGestureModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>> and conformance AddGestureModifier<A>;
  if (!lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>> and conformance AddGestureModifier<A>)
  {
    type metadata accessor for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>> and conformance AddGestureModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>(255);
    type metadata accessor for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>, AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>>);
    }
  }
}

void type metadata accessor for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>)
  {
    type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>();
    lazy protocol witness table accessor for type _EndedGesture<PhysicalButtonPressGesture> and conformance _EndedGesture<A>(&lazy protocol witness table cache variable for type _EndedGesture<PhysicalButtonPressGesture> and conformance _EndedGesture<A>, (void (*)(uint64_t))type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>);
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier>(uint64_t a1)
{
}

void type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>()
{
  if (!lazy cache variable for type metadata for _EndedGesture<PhysicalButtonPressGesture>)
  {
    lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
    unint64_t v0 = type metadata accessor for _EndedGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<PhysicalButtonPressGesture>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Switch, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Switch, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Switch, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Switch, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Switch, _FixedSizeLayout>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Switch, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Switch, _FixedSizeLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Switch, _FixedSizeLayout>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Switch, _FixedSizeLayout>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, FocusEventProxyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, (void (*)(void))lazy protocol witness table accessor for type LabeledContent<ToggleStyleConfiguration.Label, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>, AccessibilityAttachmentModifier>, IgnoreViewRespondersModifier>> and conformance <> LabeledContent<A, B>);
}

char *AppDelegate.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController] = 0;
  v11.receiver = v0;
  v11.super_class = ObjectType;
  id v2 = (char *)objc_msgSendSuper2(&v11, sel_init);
  double v3 = v2;
  if (!static AppGraph.delegateBox)
  {
    uint64_t v9 = v2;
    goto LABEL_6;
  }
  unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)static AppGraph.delegateBox + 80);
  uint64_t v5 = v2;
  uint64_t v6 = swift_retain();
  uint64_t v7 = (void *)v4(v6);
  swift_release();
  if (!v7)
  {
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = swift_dynamicCastObjCProtocolConditional();
  if (!v8)
  {

    goto LABEL_6;
  }
LABEL_7:
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate] = v8;

  swift_unknownObjectRelease();
  static SceneNavigationStrategy_Phone.shared = 1;
  return v3;
}

void *ObservableFallbackDelegateBox.delegate.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t initializeWithCopy for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 3 + a1) & ~v8;
  uint64_t v10 = (v8 + 3 + a2) & ~v8;
  v6(v9, v10, v4);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  long long v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  uint64_t v14 = ((unint64_t)v12 + v8 + 8) & ~v8;
  uint64_t v15 = ((unint64_t)v13 + v8 + 8) & ~v8;
  swift_retain();
  v6(v14, v15, v4);
  return a1;
}

uint64_t initializeWithCopy for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v5;
  swift_bridgeObjectRetain();
  v9(a1 + 56, a2 + 56, v8);
  uint64_t v11 = *(void **)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = v12;
  long long v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v13;
  uint64_t v14 = v13;
  uint64_t v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  id v16 = v11;
  swift_bridgeObjectRetain();
  v15(a1 + 112, a2 + 112, v14);
  uint64_t v17 = *(void **)(a2 + 152);
  uint64_t v18 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  uint64_t v19 = *(void *)(a2 + 200);
  uint64_t v20 = *(void *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(void *)(a1 + 200) = v19;
  *(void *)(a1 + 208) = v20;
  id v21 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  uint64_t v22 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v22;
  uint64_t v23 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v23;
  uint64_t v24 = *(void *)(a2 + 288);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v24)
  {
    uint64_t v25 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = v24;
    *(void *)(a1 + 296) = v25;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))(a1 + 264, a2 + 264, v24);
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v26;
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for AnyNavigationSplitVisibility(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 57347 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 57347 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x1FFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x1FFC)
  {
    unsigned int v6 = ((a2 - 8189) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 8189;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2)
        {
LABEL_18:
          unsigned int v7 = ((-a2 >> 2) & 0x7FF) - (a2 << 11);
          *(_WORD *)unint64_t result = (8 * v7) & 0xFE00 | (4 * (v7 & 0x3F));
        }
        break;
    }
  }
  return result;
}

void type metadata completion function for ProgressViewValue()
{
  v1[4] = "\n";
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for ClosedRange<Date>()
{
  if (!lazy cache variable for type metadata for ClosedRange<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<SelectionContainerModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SelectionContainerModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<SelectionContainerModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SelectionContainerModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<SelectionContainerModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SelectionContainerModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<SelectionContainerModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<SelectionContainerModifier>)
  {
    lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SelectionContainerModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>)
  {
    type metadata accessor for _ViewModifier_Content<SelectionContainerModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>);
    }
  }
}

void type metadata completion function for ContentConfigurationBasedRootEnvironment()
{
  type metadata accessor for UICellConfigurationState?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLDisplayList(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AllowsToolbarItemBridgingModifier@<X0>(uint64_t (**a1)(uint64_t result)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a1 = partial apply for closure #1 in AllowsToolbarItemBridgingModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void *assignWithCopy for NavigationLinkTraitValueModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

char *specialized static ContentMarginModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)AGGraphGetValue();
  char v31 = *result;
  if (!*result) {
    return result;
  }
  switch(result[65])
  {
    case 1:
      uint64_t v26 = *(void *)(a2 + 8);
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
      swift_retain_n();
      if (v26)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      uint64_t v28 = static Edge.allCases.getter();
      uint64_t v11 = *(void *)(v28 + 16);
      if (!v11)
      {
LABEL_38:
        swift_bridgeObjectRelease();
        uint64_t v9 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>;
        type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
        id v10 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>;
        goto LABEL_67;
      }
      uint64_t v12 = (unsigned __int8 *)(v28 + 32);
      while (1)
      {
        unsigned int v14 = *v12++;
        unsigned int v13 = v14;
        if ((v14 - 9) > 0xEEu)
        {
          if ((v13 & 0x80) != 0)
          {
            if (v13 > 0xF8)
            {
              LOBYTE(v15) = 0;
LABEL_34:
              if ((v15 & ~v31) != 0) {
                goto LABEL_29;
              }
            }
          }
          else if (v13 < 8)
          {
            int v15 = 1 << v13;
            goto LABEL_34;
          }
        }
        OptionalEdgeInsets.subscript.getter();
        OptionalEdgeInsets.subscript.setter();
LABEL_29:
        if (!--v11) {
          goto LABEL_38;
        }
      }
    case 2:
      uint64_t v26 = *(void *)(a2 + 8);
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
      swift_retain_n();
      if (v26)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      uint64_t v29 = static Edge.allCases.getter();
      uint64_t v16 = *(void *)(v29 + 16);
      if (!v16) {
        goto LABEL_52;
      }
      uint64_t v17 = (unsigned __int8 *)(v29 + 32);
      while (1)
      {
        unsigned int v19 = *v17++;
        unsigned int v18 = v19;
        if ((v19 - 9) > 0xEEu)
        {
          if ((v18 & 0x80) != 0)
          {
            if (v18 > 0xF8)
            {
              LOBYTE(v20) = 0;
LABEL_48:
              if ((v20 & ~v31) != 0) {
                goto LABEL_43;
              }
            }
          }
          else if (v18 < 8)
          {
            int v20 = 1 << v18;
            goto LABEL_48;
          }
        }
        OptionalEdgeInsets.subscript.getter();
        OptionalEdgeInsets.subscript.setter();
LABEL_43:
        if (!--v16)
        {
LABEL_52:
          swift_bridgeObjectRelease();
          uint64_t v9 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>;
          type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
          id v10 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey> and conformance EnvironmentPropertyKey<A>;
          goto LABEL_67;
        }
      }
    case 3:
      uint64_t v26 = *(void *)(a2 + 8);
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
      swift_retain_n();
      if (v26)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      uint64_t v30 = static Edge.allCases.getter();
      uint64_t v21 = *(void *)(v30 + 16);
      if (!v21) {
        goto LABEL_66;
      }
      uint64_t v22 = (unsigned __int8 *)(v30 + 32);
      do
      {
        unsigned int v24 = *v22++;
        unsigned int v23 = v24;
        if ((v24 - 9) <= 0xEEu)
        {
LABEL_56:
          OptionalEdgeInsets.subscript.getter();
          OptionalEdgeInsets.subscript.setter();
          goto LABEL_57;
        }
        if ((v23 & 0x80) != 0)
        {
          if (v23 <= 0xF8) {
            goto LABEL_56;
          }
          LOBYTE(v25) = 0;
        }
        else
        {
          if (v23 >= 8) {
            goto LABEL_56;
          }
          int v25 = 1 << v23;
        }
        if ((v25 & ~v31) == 0) {
          goto LABEL_56;
        }
LABEL_57:
        --v21;
      }
      while (v21);
LABEL_66:
      swift_bridgeObjectRelease();
      uint64_t v9 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
      id v10 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey> and conformance EnvironmentPropertyKey<A>;
LABEL_67:
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(v10, v9);
      swift_retain();
      PropertyList.subscript.setter();
      if (v26)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      return (char *)swift_release();
    default:
      uint64_t v26 = *(void *)(a2 + 8);
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
      swift_retain_n();
      if (v26)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      uint64_t v27 = static Edge.allCases.getter();
      uint64_t v4 = *(void *)(v27 + 16);
      if (!v4) {
        goto LABEL_24;
      }
      uint64_t v5 = (unsigned __int8 *)(v27 + 32);
      break;
  }
  while (1)
  {
    unsigned int v7 = *v5++;
    unsigned int v6 = v7;
    if ((v7 - 9) > 0xEEu)
    {
      if ((v6 & 0x80) != 0)
      {
        if (v6 > 0xF8)
        {
          LOBYTE(v8) = 0;
LABEL_20:
          if ((v8 & ~v31) != 0) {
            goto LABEL_15;
          }
        }
      }
      else if (v6 < 8)
      {
        int v8 = 1 << v6;
        goto LABEL_20;
      }
    }
    OptionalEdgeInsets.subscript.getter();
    OptionalEdgeInsets.subscript.setter();
LABEL_15:
    if (!--v4)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      uint64_t v9 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
      id v10 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey> and conformance EnvironmentPropertyKey<A>;
      goto LABEL_67;
    }
  }
}

double one-time initialization function for confirmationAction()
{
  static ToolbarItemPlacement.confirmationAction = 5;
  double result = 0.0;
  unk_1E8FF7478 = 0u;
  unk_1E8FF7488 = 0u;
  byte_1E8FF7498 = 2;
  return result;
}

void one-time initialization function for vertical()
{
  char v0 = byte_1ED420061;
  if ((byte_1ED420061 & ~byte_1ED420060) == 0) {
    char v0 = 0;
  }
  static _EventDirections.vertical = v0 | byte_1ED420060;
}

void one-time initialization function for horizontal()
{
  char v0 = byte_1ED420039;
  if ((byte_1ED420039 & ~byte_1ED420038) == 0) {
    char v0 = 0;
  }
  static _EventDirections.horizontal = v0 | byte_1ED420038;
}

uint64_t LabelGroup.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

void *NavigationListState.setSelection(_:locationID:metatypeID:request:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v8 = v7;
  long long v13 = *(_OWORD *)(a6 + 88);
  v28[0] = *(_OWORD *)(a6 + 72);
  v28[1] = v13;
  v28[2] = *(_OWORD *)(a6 + 104);
  specialized Dictionary.subscript.getter((uint64_t)v28, *(void *)(v7 + 8), (uint64_t)&v24);
  outlined init with take of NavigationListState.Selection?((uint64_t)&v24, (uint64_t)__src, &lazy cache variable for type metadata for NavigationListState.Selection?, (uint64_t)&type metadata for NavigationListState.Selection);
  outlined init with take of NavigationListState.Selection?((uint64_t)&v24, (uint64_t)v25, &lazy cache variable for type metadata for NavigationListState.Selection?, (uint64_t)&type metadata for NavigationListState.Selection);
  if (!v25[1])
  {
    uint64_t v16 = a7;
    goto LABEL_5;
  }
  uint64_t v14 = v25[2];
  uint64_t v27 = v25[0];
  swift_retain();
  swift_retain();
  swift_retain();
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v27);
  swift_release();
  uint64_t v26 = v14;
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  uint64_t v15 = *((void *)&__src[1] + 1);
  outlined consume of Binding<AnyNavigationPath>?(*(uint64_t *)&__src[0], *((uint64_t *)&__src[0] + 1));
  uint64_t v16 = a7;
  if (v15 != a4)
  {
LABEL_5:
    v29[0] = a1;
    v29[1] = a2;
    void v29[2] = a3;
    v29[3] = a4;
    v29[4] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&__src[0] = *(void *)(v8 + 8);
    *(void *)(v8 + 8) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v29, v28, isUniquelyReferenced_nonNull_native);
    *(void *)(v8 + 8) = *(void *)&__src[0];
    swift_bridgeObjectRelease();
    *(void *)&__src[0] = a1;
    *((void *)&__src[0] + 1) = a2;
    *(void *)&__src[1] = a3;
    type metadata accessor for Binding<AnyListSelection>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](v22);
    char v18 = NavigationListState.updateSelection(_:for:)(*(uint64_t *)&v22[0], v28);
    swift_release();
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v22);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v22, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = v18 & 1;
    return memcpy(v16, __src, 0x11CuLL);
  }
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v22);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v22, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  return memcpy(v16, __src, 0x11CuLL);
}

uint64_t outlined init with take of NavigationListState.Selection?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<AnyListSelection>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Binding<Int>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, _OWORD *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7] + 40 * v10;
      swift_release();
      swift_release();
      unint64_t result = swift_release();
      long long v19 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)a1;
      *(_OWORD *)(v17 + 16) = v19;
      *(void *)(v17 + 32) = *(void *)(a1 + 32);
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 48 * result);
  long long v5 = a2[1];
  _OWORD *v4 = *a2;
  v4[1] = v5;
  _OWORD v4[2] = a2[2];
  uint64_t v6 = a4[7] + 40 * result;
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v7;
  *(void *)(v6 + 32) = *(void *)(a3 + 32);
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

{
  _OWORD *v4;
  long long v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 48 * result);
  long long v5 = a2[1];
  _OWORD *v4 = *a2;
  v4[1] = v5;
  _OWORD v4[2] = a2[2];
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v6 = a4[2];
  long long v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  _OWORD *v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + (result << 7));
  long long v5 = a2[5];
  v4[4] = a2[4];
  v4[5] = v5;
  v4[6] = a2[6];
  *(_OWORD *)((char *)v4 + 105) = *(_OWORD *)((char *)a2 + 105);
  uint64_t v6 = a2[1];
  _OWORD *v4 = *a2;
  v4[1] = v6;
  long long v7 = a2[3];
  _OWORD v4[2] = a2[2];
  void v4[3] = v7;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, NavigationListState.Selection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  char v31 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v27 = v2;
    uint64_t v28 = (void *)(v5 + 64);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(v5 + 64);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v9) {
          goto LABEL_22;
        }
        unint64_t v14 = v28[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v9) {
            goto LABEL_22;
          }
          unint64_t v14 = v28[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 2;
            if (v15 >= v9)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v27;
              if (a2)
              {
                uint64_t v26 = 1 << *(unsigned char *)(v5 + 32);
                if (v26 > 63) {
                  bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v28 = -1 << v26;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v14 = v28[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_29;
                }
                if (v10 >= v9) {
                  goto LABEL_22;
                }
                unint64_t v14 = v28[v10];
                ++v15;
                if (v14) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
LABEL_19:
        unint64_t v8 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      uint64_t v16 = *(void *)(v5 + 48) + 48 * v12;
      long long v18 = *(_OWORD *)v16;
      long long v17 = *(_OWORD *)(v16 + 16);
      char v19 = *(unsigned char *)(v16 + 32);
      uint64_t v20 = *(void *)(v16 + 40);
      uint64_t v21 = *(void *)(v5 + 56) + 40 * v12;
      uint64_t v23 = *(void *)v21;
      uint64_t v22 = *(void *)(v21 + 8);
      long long v24 = *(_OWORD *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 32);
      if ((a2 & 1) == 0)
      {
        long long v29 = *(_OWORD *)v16;
        long long v30 = *(_OWORD *)(v16 + 16);
        long long v32 = *(_OWORD *)(v21 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        long long v24 = v32;
        long long v18 = v29;
        long long v17 = v30;
      }
      v36[0] = v23;
      v36[1] = v22;
      long long v37 = v24;
      uint64_t v38 = v25;
      v33[0] = v18;
      v33[1] = v17;
      char v34 = v19;
      uint64_t v35 = v20;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v33, (uint64_t)v36, v31);
    }
  }
  swift_release();
  void *v3 = v31;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  long long v26;
  long long v27;
  _OWORD v28[2];
  char v29;
  uint64_t v30;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, AnyListSelection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v25 = v3;
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v8 = (void *)(v5 + 64);
    int64_t v9 = -1;
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    int64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        int64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v15 >= v11) {
          goto LABEL_22;
        }
        uint64_t v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          unint64_t v12 = v15 + 1;
          if (v15 + 1 >= v11) {
            goto LABEL_22;
          }
          uint64_t v16 = v8[v12];
          if (!v16)
          {
            long long v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (a2)
              {
                long long v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                unint64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_29;
                }
                if (v12 >= v11) {
                  goto LABEL_22;
                }
                uint64_t v16 = v8[v12];
                ++v17;
                if (v16) {
                  goto LABEL_19;
                }
              }
            }
            unint64_t v12 = v17;
          }
        }
LABEL_19:
        int64_t v10 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      long long v18 = *(void *)(v5 + 48) + 48 * v14;
      uint64_t v20 = *(_OWORD *)v18;
      char v19 = *(_OWORD *)(v18 + 16);
      uint64_t v21 = *(unsigned char *)(v18 + 32);
      uint64_t v22 = *(void *)(v18 + 40);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0)
      {
        uint64_t v26 = *(_OWORD *)v18;
        uint64_t v27 = *(_OWORD *)(v18 + 16);
        swift_retain();
        uint64_t v20 = v26;
        char v19 = v27;
      }
      v28[0] = v20;
      v28[1] = v19;
      long long v29 = v21;
      long long v30 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, v23, v6);
    }
  }
  swift_release();
  void *v3 = v6;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  char v25;
  uint64_t v26;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, Bool>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v8 = (void *)(v5 + 64);
    int64_t v9 = -1;
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    int64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        int64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        uint64_t v20 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        if (v20 >= v11) {
          goto LABEL_20;
        }
        uint64_t v21 = v8[v20];
        ++v12;
        if (!v21)
        {
          unint64_t v12 = v20 + 1;
          if (v20 + 1 >= v11) {
            goto LABEL_20;
          }
          uint64_t v21 = v8[v12];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v11)
            {
LABEL_20:
              swift_release();
              if (a2)
              {
                uint64_t v23 = 1 << *(unsigned char *)(v5 + 32);
                if (v23 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v23;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v21 = v8[v22];
            if (!v21)
            {
              while (1)
              {
                unint64_t v12 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_27;
                }
                if (v12 >= v11) {
                  goto LABEL_20;
                }
                uint64_t v21 = v8[v12];
                ++v22;
                if (v21) {
                  goto LABEL_19;
                }
              }
            }
            unint64_t v12 = v22;
          }
        }
LABEL_19:
        int64_t v10 = (v21 - 1) & v21;
        unint64_t v14 = __clz(__rbit64(v21)) + (v12 << 6);
      }
      int64_t v15 = *(void *)(v5 + 48) + 48 * v14;
      uint64_t v16 = *(void *)(v15 + 40);
      long long v17 = *(unsigned char *)(v15 + 32);
      long long v18 = *(unsigned char *)(*(void *)(v5 + 56) + v14);
      char v19 = *(_OWORD *)(v15 + 16);
      v24[0] = *(_OWORD *)v15;
      v24[1] = v19;
      uint64_t v25 = v17;
      uint64_t v26 = v16;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v24, v18, v6);
    }
  }
  swift_release();
  void *v3 = v6;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  long long v26;
  long long v27;
  _OWORD v28[2];
  char v29;
  uint64_t v30;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>, (void (*)(uint64_t))type metadata accessor for [Binding<Bool>], (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v25 = v3;
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v8 = (void *)(v5 + 64);
    int64_t v9 = -1;
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    int64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        int64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v15 >= v11) {
          goto LABEL_22;
        }
        uint64_t v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          unint64_t v12 = v15 + 1;
          if (v15 + 1 >= v11) {
            goto LABEL_22;
          }
          uint64_t v16 = v8[v12];
          if (!v16)
          {
            long long v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (a2)
              {
                long long v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                unint64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_29;
                }
                if (v12 >= v11) {
                  goto LABEL_22;
                }
                uint64_t v16 = v8[v12];
                ++v17;
                if (v16) {
                  goto LABEL_19;
                }
              }
            }
            unint64_t v12 = v17;
          }
        }
LABEL_19:
        int64_t v10 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      long long v18 = *(void *)(v5 + 48) + 48 * v14;
      uint64_t v20 = *(_OWORD *)v18;
      char v19 = *(_OWORD *)(v18 + 16);
      uint64_t v21 = *(unsigned char *)(v18 + 32);
      uint64_t v22 = *(void *)(v18 + 40);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0)
      {
        uint64_t v26 = *(_OWORD *)v18;
        uint64_t v27 = *(_OWORD *)(v18 + 16);
        swift_bridgeObjectRetain();
        uint64_t v20 = v26;
        char v19 = v27;
      }
      v28[0] = v20;
      v28[1] = v19;
      long long v29 = v21;
      long long v30 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, v23, v6);
    }
  }
  swift_release();
  void *v3 = v6;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  void *v27;
  int64_t v28;
  void *v29;
  char v30;
  void *v31;
  int64_t v32;
  void v33[4];
  char v34;

  uint64_t v4 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<TableColumnCustomizationID, TableColumnCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  long long v30 = a2;
  char v31 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v4 + 32);
    long long v29 = (void *)(v4 + 64);
    uint64_t v6 = -1;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    uint64_t v7 = v6 & *(void *)(v4 + 64);
    uint64_t v28 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    for (i = 0; ; i = v32)
    {
      if (v7)
      {
        int64_t v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        long long v32 = i;
        int64_t v10 = v9 | (i << 6);
      }
      else
      {
        unint64_t v11 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v11 >= v28) {
          goto LABEL_22;
        }
        unint64_t v12 = v29[v11];
        int64_t v13 = i + 1;
        if (!v12)
        {
          int64_t v13 = i + 2;
          if (i + 2 >= v28) {
            goto LABEL_22;
          }
          unint64_t v12 = v29[v13];
          if (!v12)
          {
            unint64_t v14 = i + 3;
            if (i + 3 >= v28)
            {
LABEL_22:
              swift_release();
              if (v30)
              {
                uint64_t v26 = 1 << *(unsigned char *)(v4 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v29 = -1 << v26;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v12 = v29[v14];
            if (!v12)
            {
              while (1)
              {
                int64_t v13 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_29;
                }
                if (v13 >= v28) {
                  goto LABEL_22;
                }
                unint64_t v12 = v29[v13];
                ++v14;
                if (v12) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v13 = i + 3;
          }
        }
LABEL_19:
        uint64_t v7 = (v12 - 1) & v12;
        long long v32 = v13;
        int64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      }
      int64_t v15 = v4;
      uint64_t v16 = *(void *)(v4 + 48) + 40 * v10;
      long long v17 = *(void *)v16;
      long long v18 = *(void *)(v16 + 8);
      uint64_t v20 = *(void *)(v16 + 16);
      char v19 = *(void *)(v16 + 24);
      uint64_t v21 = *(unsigned char *)(v16 + 32);
      uint64_t v22 = *(void *)(v4 + 56) + 16 * v10;
      uint64_t v23 = *(void *)v22;
      long long v24 = *(unsigned __int8 *)(v22 + 8);
      uint64_t v25 = *(unsigned __int8 *)(v22 + 9);
      if ((v30 & 1) == 0) {
        outlined copy of TableColumnCustomizationID.Base(*(void *)v16, *(void *)(v16 + 8), *(void *)(v16 + 16), *(void *)(v16 + 24), *(unsigned char *)(v16 + 32));
      }
      v33[0] = v17;
      v33[1] = v18;
      _OWORD v33[2] = v20;
      v33[3] = v19;
      char v34 = v21;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v33, v23, v24 | (v25 << 8), v31);
      uint64_t v4 = v15;
    }
  }
  swift_release();
  *uint64_t v27 = v31;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt32 *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _OWORD *v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _OWORD v35[12];

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v8 = (Swift::UInt32 *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v9 = *v2;
  type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>();
  int64_t v10 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v9 + 16))
  {
    char v34 = v3;
    unint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
    unint64_t v12 = (void *)(v9 + 64);
    int64_t v13 = -1;
    if (v11 < 64) {
      int64_t v13 = ~(-1 << v11);
    }
    unint64_t v14 = v13 & *(void *)(v9 + 64);
    int64_t v15 = (unint64_t)(v11 + 63) >> 6;
    swift_retain();
    uint64_t v16 = 0;
    while (1)
    {
      if (v14)
      {
        long long v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        long long v18 = v17 | (v16 << 6);
      }
      else
      {
        char v19 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v19 >= v15) {
          goto LABEL_23;
        }
        uint64_t v20 = v12[v19];
        ++v16;
        if (!v20)
        {
          uint64_t v16 = v19 + 1;
          if (v19 + 1 >= v15) {
            goto LABEL_23;
          }
          uint64_t v20 = v12[v16];
          if (!v20)
          {
            uint64_t v21 = v19 + 2;
            if (v21 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                swift_release();
                uint64_t v3 = v34;
                goto LABEL_30;
              }
              long long v32 = 1 << *(unsigned char *)(v9 + 32);
              if (v32 >= 64) {
                bzero((void *)(v9 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                unsigned __int8 *v12 = -1 << v32;
              }
              uint64_t v3 = v34;
              *(void *)(v9 + 16) = 0;
              break;
            }
            uint64_t v20 = v12[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v16 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_32;
                }
                if (v16 >= v15) {
                  goto LABEL_23;
                }
                uint64_t v20 = v12[v16];
                ++v21;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v16 = v21;
          }
        }
LABEL_20:
        unint64_t v14 = (v20 - 1) & v20;
        long long v18 = __clz(__rbit64(v20)) + (v16 << 6);
      }
      uint64_t v22 = *(void *)(v9 + 48) + *(void *)(v6 + 72) * v18;
      if (a2)
      {
        outlined init with take of (key: String, value: Any)?(v22, (uint64_t)v8, type metadata accessor for DisplayList.HostedViewState.Key);
        uint64_t v23 = (_OWORD *)(*(void *)(v9 + 56) + 176 * v18);
        long long v24 = v23[7];
        uint64_t v25 = v23[8];
        uint64_t v26 = v23[10];
        v35[9] = v23[9];
        v35[10] = v26;
        v35[7] = v24;
        v35[8] = v25;
        uint64_t v27 = v23[3];
        uint64_t v28 = v23[4];
        long long v29 = v23[6];
        v35[5] = v23[5];
        v35[6] = v29;
        v35[3] = v27;
        v35[4] = v28;
        char v31 = v23[1];
        long long v30 = v23[2];
        v35[0] = *v23;
        v35[1] = v31;
        v35[2] = v30;
      }
      else
      {
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(v22, (uint64_t)v8, type metadata accessor for DisplayList.HostedViewState.Key);
        outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v9 + 56) + 176 * v18, (uint64_t)v35);
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)(v8, (uint64_t)v35, v10);
    }
  }
  swift_release();
LABEL_30:
  void *v3 = v10;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  long long v27;
  void v28[2];
  long long v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v25 = v3;
    uint64_t v26 = (void *)(v5 + 64);
    unint64_t v8 = -1;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    int64_t v9 = v8 & *(void *)(v5 + 64);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v13 = v12 | (v11 << 6);
      }
      else
      {
        unint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v14 >= v10) {
          goto LABEL_22;
        }
        int64_t v15 = v26[v14];
        ++v11;
        if (!v15)
        {
          unint64_t v11 = v14 + 1;
          if (v14 + 1 >= v10) {
            goto LABEL_22;
          }
          int64_t v15 = v26[v11];
          if (!v15)
          {
            uint64_t v16 = v14 + 2;
            if (v16 >= v10)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (a2)
              {
                long long v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v26 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v15 = v26[v16];
            if (!v15)
            {
              while (1)
              {
                unint64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_29;
                }
                if (v11 >= v10) {
                  goto LABEL_22;
                }
                int64_t v15 = v26[v11];
                ++v16;
                if (v15) {
                  goto LABEL_19;
                }
              }
            }
            unint64_t v11 = v16;
          }
        }
LABEL_19:
        int64_t v9 = (v15 - 1) & v15;
        int64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      long long v17 = *(void *)(v5 + 48) + 48 * v13;
      long long v18 = *(void *)v17;
      char v19 = *(void *)(v17 + 8);
      uint64_t v20 = *(_OWORD *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 32);
      uint64_t v22 = *(void *)(v17 + 40);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
      if ((a2 & 1) == 0)
      {
        uint64_t v27 = *(_OWORD *)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v20 = v27;
      }
      v28[0] = v18;
      v28[1] = v19;
      long long v29 = v20;
      long long v30 = v21;
      char v31 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, v23, v6);
    }
  }
  swift_release();
  void *v3 = v6;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  uint64_t v23;
  _OWORD v24[5];
  char v25;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.Entry.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v8 = (void *)(v5 + 64);
    int64_t v9 = -1;
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    int64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        int64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return;
        }
        if (v15 >= v11) {
          goto LABEL_23;
        }
        uint64_t v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          unint64_t v12 = v15 + 1;
          if (v15 + 1 >= v11) {
            goto LABEL_23;
          }
          uint64_t v16 = v8[v12];
          if (!v16)
          {
            long long v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_23:
              swift_release();
              if (a2)
              {
                uint64_t v23 = 1 << *(unsigned char *)(v5 + 32);
                if (v23 >= 64) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v23;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                unint64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_30;
                }
                if (v12 >= v11) {
                  goto LABEL_23;
                }
                uint64_t v16 = v8[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v12 = v17;
          }
        }
LABEL_20:
        int64_t v10 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      long long v18 = *(void *)(v5 + 48) + 88 * v14;
      if (a2)
      {
        char v19 = *(_OWORD *)(v18 + 16);
        v24[0] = *(_OWORD *)v18;
        v24[1] = v19;
        uint64_t v20 = *(_OWORD *)(v18 + 32);
        uint64_t v21 = *(_OWORD *)(v18 + 48);
        uint64_t v22 = *(_OWORD *)(v18 + 64);
        uint64_t v25 = *(unsigned char *)(v18 + 80);
        v24[3] = v21;
        long long v24[4] = v22;
        v24[2] = v20;
      }
      else
      {
        outlined init with copy of ToolbarStorage.Entry.ID(v18, (uint64_t)v24);
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v24, *(void *)(*(void *)(v5 + 56) + 8 * v14), v6);
    }
  }
  swift_release();
  void *v3 = v6;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  uint64_t v26;
  _OWORD v27[6];
  unsigned char v28[25];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>, type metadata accessor for [WeakBox<DocumentViewController>], (void (*)(void))lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v8 = (void *)(v5 + 64);
    int64_t v9 = -1;
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    int64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        uint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return;
        }
        if (v16 >= v11) {
          goto LABEL_23;
        }
        long long v17 = v8[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_23;
          }
          long long v17 = v8[v12];
          if (!v17)
          {
            long long v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if (a2)
              {
                uint64_t v26 = 1 << *(unsigned char *)(v5 + 32);
                if (v26 >= 64) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v26;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            long long v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                unint64_t v12 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_30;
                }
                if (v12 >= v11) {
                  goto LABEL_23;
                }
                long long v17 = v8[v12];
                ++v18;
                if (v17) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v12 = v18;
          }
        }
LABEL_20:
        int64_t v10 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      char v19 = (long long *)(*(void *)(v5 + 48) + (v15 << 7));
      if (a2)
      {
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        uint64_t v22 = v19[2];
        v27[3] = v19[3];
        uint64_t v23 = v19[4];
        long long v24 = v19[5];
        uint64_t v25 = v19[6];
        *(_OWORD *)&v28[9] = *(long long *)((char *)v19 + 105);
        v27[5] = v24;
        *(_OWORD *)uint64_t v28 = v25;
        v27[4] = v23;
        v27[1] = v21;
        v27[2] = v22;
        v27[0] = v20;
        int64_t v13 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
      }
      else
      {
        outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v19, (uint64_t)v27);
        int64_t v13 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
        swift_bridgeObjectRetain();
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v27, v13, v6);
    }
  }
  swift_release();
  void *v3 = v6;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = 0uLL;
  if (*(void *)(a2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 56) + 40 * result;
      uint64_t v8 = *(void *)v7;
      uint64_t v9 = *(void *)(v7 + 8);
      long long v11 = *(_OWORD *)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 32);
      swift_retain();
      swift_retain();
      unint64_t result = swift_retain();
      long long v4 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v4 = 0uLL;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(_OWORD *)(a3 + 16) = v4;
  *(void *)(a3 + 32) = v10;
  return result;
}

void *NavigationSplitViewState.updatePreferredCompactColumn(_:newValue:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  char v7 = *((unsigned char *)a1 + 16);
  int v8 = *a2;
  uint64_t v9 = *(void *)(v3 + 16);
  if (!v9)
  {
    *(void *)(v3 + 8) = v5;
    *(void *)(v3 + 16) = v6;
    *(unsigned char *)(v3 + 24) = v7;
    *(unsigned char *)(v3 + 25) = v8;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = v8 != 0;
    memcpy(a3, __src, 0x11CuLL);
    swift_retain();
    return (void *)swift_retain();
  }
  int v10 = *(unsigned __int8 *)(v3 + 25);
  if (v10 == 3)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v13);
  }
  else
  {
    if (v6 != v9)
    {
      uint64_t v12 = *(void *)(v3 + 8);
      swift_retain();
      swift_retain();
      outlined consume of Binding<NavigationSplitViewColumn>?(v12, v9);
      *(void *)(v3 + 8) = v5;
      *(void *)(v3 + 16) = v6;
      *(unsigned char *)(v3 + 24) = v7;
    }
    if (v8 != v10)
    {
      *(unsigned char *)(v3 + 25) = v8;
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
      __src[0] = xmmword_18834FC50;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 1;
      return memcpy(a3, __src, 0x11CuLL);
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
  }
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  return memcpy(a3, __src, 0x11CuLL);
}

void *NavigationColumnState.setPath(_:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v59 = a4[1];
  uint64_t v60 = *a4;
  uint64_t v7 = *((void *)v5 + 14);
  uint64_t v8 = *((void *)v5 + 17);
  uint64_t v72 = *((void *)v5 + 16);
  uint64_t v9 = *((void *)v5 + 18);
  uint64_t v73 = *((void *)v5 + 19);
  uint64_t v74 = *((void *)v5 + 15);
  uint64_t v10 = *((void *)v5 + 21);
  uint64_t v75 = *((void *)v5 + 20);
  if (v10 < 0)
  {
    uint64_t v18 = *((void *)v5 + 11);
    uint64_t v19 = *((void *)v6 + 12);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of Binding<AnyNavigationPath>?(v18, v19);
    *((void *)v6 + 11) = a1;
    *((void *)v6 + 12) = a2;
    *((void *)v6 + 13) = a3;
    ++v6[21];
    *(void *)__src = a1;
    *(void *)&__src[8] = a2;
    *(void *)&__src[16] = a3;
    type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
    uint64_t v21 = v20;
    MEMORY[0x18C113DA0](&v77);
    uint64_t v22 = v77;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *((void *)v6 + 14) = v7;
    *((void *)v6 + 15) = v74;
    *((void *)v6 + 16) = v72;
    *((void *)v6 + 17) = v8;
    *((void *)v6 + 18) = v9;
    *((void *)v6 + 19) = v73;
    *((void *)v6 + 20) = v75;
    *((void *)v6 + 21) = v22;
    *((void *)v6 + 22) = v23;
    *((void *)v6 + 23) = v24;
    *((unsigned char *)v6 + 296) = 0;
    *(void *)__src = a1;
    *(void *)&__src[8] = a2;
    *(void *)&__src[16] = a3;
    uint64_t v25 = MEMORY[0x18C113DA0](&v77, v21);
    char v26 = (*(uint64_t (**)(void *))(*(void *)v77 + 80))(v25);
    swift_release();
    if (v26) {
      goto LABEL_5;
    }
LABEL_7:
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    *((void *)v6 + 29) = v60;
    *((void *)v6 + 30) = v59;
    int v27 = 1;
    uint64_t v28 = 2;
    goto LABEL_8;
  }
  uint64_t v70 = *((void *)v5 + 23);
  uint64_t v71 = *((void *)v5 + 22);
  unsigned int v36 = v5[1];
  unsigned int v37 = *v5;
  unsigned int v38 = v5[2];
  uint64_t v39 = *((void *)v5 + 2);
  char v11 = *((unsigned char *)v5 + 24);
  uint64_t v40 = *((void *)v5 + 4);
  uint64_t v41 = *((void *)v5 + 5);
  uint64_t v12 = *((void *)v5 + 6);
  uint64_t v42 = *((void *)v5 + 7);
  uint64_t v61 = *((void *)v5 + 18);
  uint64_t v43 = *((void *)v5 + 8);
  uint64_t v44 = *((void *)v5 + 9);
  unsigned int v45 = v5[20];
  unsigned int v34 = v5[21];
  uint64_t v32 = *((void *)v5 + 12);
  uint64_t v33 = *((void *)v5 + 11);
  uint64_t v35 = *((void *)v5 + 13);
  uint64_t v62 = *((void *)v5 + 24);
  uint64_t v63 = *((void *)v5 + 25);
  uint64_t v64 = *((void *)v5 + 26);
  uint64_t v46 = *((void *)v5 + 27);
  uint64_t v47 = *((void *)v5 + 28);
  uint64_t v48 = *((void *)v5 + 29);
  uint64_t v49 = *((void *)v5 + 30);
  uint64_t v50 = *((void *)v5 + 31);
  uint64_t v51 = *((void *)v5 + 32);
  char v13 = *((unsigned char *)v5 + 264);
  char v52 = v13;
  uint64_t v53 = *((void *)v5 + 34);
  __int16 v116 = *(_WORD *)((char *)v5 + 297);
  __int16 v58 = v116;
  unsigned int v57 = v5[70];
  *(void *)&long long v77 = __PAIR64__(v36, v37);
  DWORD2(v77) = v38;
  uint64_t v78 = v39;
  char v79 = v11;
  uint64_t v80 = v40;
  uint64_t v81 = v41;
  uint64_t v82 = v12;
  uint64_t v83 = v42;
  uint64_t v84 = v43;
  uint64_t v85 = v44;
  unsigned int v86 = v45;
  unsigned int v87 = v34;
  uint64_t v88 = v33;
  uint64_t v89 = v32;
  uint64_t v90 = v35;
  uint64_t v91 = v7;
  uint64_t v92 = v74;
  uint64_t v93 = v72;
  uint64_t v94 = v8;
  uint64_t v95 = v9;
  uint64_t v96 = v73;
  uint64_t v97 = v75;
  uint64_t v98 = v10;
  uint64_t v99 = v71;
  uint64_t v100 = v70;
  uint64_t v101 = v62;
  uint64_t v102 = v63;
  uint64_t v103 = v64;
  uint64_t v104 = v46;
  uint64_t v105 = v47;
  uint64_t v106 = v48;
  uint64_t v107 = v49;
  uint64_t v108 = v50;
  uint64_t v109 = v51;
  char v110 = v13;
  uint64_t v111 = v53;
  unsigned int v112 = v57;
  unsigned int v113 = v5[71];
  unsigned int v56 = v113;
  uint64_t v114 = *((void *)v5 + 36);
  uint64_t v55 = v114;
  char v115 = *((unsigned char *)v5 + 296);
  char v54 = v115;
  uint64_t v65 = v7;
  outlined copy of NavigationColumnState.ColumnContent(v7, v74, v72, v8, v9, v73, v75, v10);
  outlined retain of NavigationColumnState((uint64_t *)&v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
  outlined release of NavigationColumnState((uint64_t *)&v77);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined consume of Binding<AnyNavigationPath>?(v33, v32);
  *((void *)v5 + 11) = a1;
  *((void *)v5 + 12) = a2;
  *((void *)v5 + 13) = a3;
  v5[21] = v34 + 1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v76);
  swift_release();
  swift_release();
  swift_release();
  *(_DWORD *)__src = v37;
  *(_DWORD *)&__src[4] = v36;
  uint64_t v14 = v76;
  *((void *)v6 + 14) = v7;
  *((void *)v6 + 15) = v74;
  *((void *)v6 + 16) = v72;
  *((void *)v6 + 17) = v8;
  *((void *)v6 + 18) = v9;
  *((void *)v6 + 19) = v73;
  *((void *)v6 + 20) = v75;
  *((void *)v6 + 21) = v14;
  *((void *)v6 + 22) = v71;
  *((void *)v6 + 23) = v70;
  *(_DWORD *)&__src[8] = v38;
  *(void *)&__src[16] = v39;
  __src[24] = v11;
  *(void *)&__src[32] = v40;
  *(void *)&__src[40] = v41;
  *(void *)&__src[48] = v12;
  *(void *)&__src[56] = v42;
  *(void *)&__src[64] = v43;
  *(void *)&__src[72] = v44;
  *(_DWORD *)&__src[80] = v45;
  *(_DWORD *)&__src[84] = v34 + 1;
  *(void *)&__src[88] = a1;
  *(void *)&__src[96] = a2;
  *(void *)&__src[104] = a3;
  *(void *)&__src[112] = v7;
  *(void *)&__src[120] = v74;
  *(void *)&__src[128] = v72;
  *(void *)&__src[136] = v8;
  *(void *)&__src[144] = v9;
  *(void *)&__src[152] = v73;
  *(void *)&__src[160] = v75;
  *(void *)&__src[168] = v14;
  *(void *)&__src[176] = v71;
  *(void *)&__src[184] = v70;
  *(void *)&__src[192] = v62;
  *(void *)&__src[200] = v63;
  *(void *)&__src[208] = v64;
  *(void *)&__src[216] = v46;
  *(void *)&__src[224] = v47;
  *(void *)&__src[232] = v48;
  *(void *)&__src[240] = v49;
  *(void *)&__src[248] = v50;
  *(void *)&__src[256] = v51;
  __src[264] = v52;
  *(void *)&__src[272] = v53;
  *(_DWORD *)&__src[280] = v57;
  unsigned int v118 = v56;
  uint64_t v119 = v55;
  char v120 = v54;
  __int16 v121 = v58;
  outlined retain of NavigationColumnState((uint64_t *)__src);
  outlined copy of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
  swift_retain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
  outlined release of NavigationColumnState((uint64_t *)__src);
  int64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 96);
  swift_retain();
  uint64_t v16 = swift_retain();
  LOBYTE(v15) = v15(v16, v17);
  swift_release_n();
  swift_release();
  if ((v15 & 1) == 0)
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Collection<>.dismiss(from:)(0, v71, v70);
    outlined consume of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    uint64_t v29 = MEMORY[0x1E4FBC860];
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_release();
    *((void *)v6 + 14) = v65;
    *((void *)v6 + 15) = v74;
    *((void *)v6 + 16) = v72;
    *((void *)v6 + 17) = v8;
    *((void *)v6 + 18) = v61;
    *((void *)v6 + 19) = v73;
    *((void *)v6 + 20) = v75;
    *((void *)v6 + 21) = v14;
    *((void *)v6 + 22) = v29;
    *((void *)v6 + 23) = v30;
    *((unsigned char *)v6 + 296) = 0;
    goto LABEL_7;
  }
  swift_release();
LABEL_5:
  int v27 = 0;
  uint64_t v28 = 1;
LABEL_8:
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v77);
  *(void *)__src = v28;
  *(void *)&__src[8] = 0;
  __src[16] = 2;
  outlined init with take of NavigationState.UpdateResult(&v77, &__src[24]);
  *(_DWORD *)&__src[276] = v27;
  *(_DWORD *)&__src[280] = 0;
  return memcpy(a5, __src, 0x11CuLL);
}

double _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  return result;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.isEmpty.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = (uint64_t)v1 + *(void *)(v2 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  LOBYTE(v2) = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v2 & 1;
}

void type metadata accessor for Binding<AnyNavigationPath>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata completion function for BoundNavigationPathDetector.PathObservation()
{
  type metadata accessor for ObservationTracking?(319, &lazy cache variable for type metadata for ObservationTracking?, MEMORY[0x1E4FBCD58]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t outlined init with copy of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ObservationTracking?(0, &lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x1E4FBCD50]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ObservationTracking?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ObservationTracking?(0, &lazy cache variable for type metadata for ObservationTracking?, MEMORY[0x1E4FBCD58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ObservationTracking?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for ObservationTracking?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

Swift::Void __swiftcall BoundNavigationPathDetector.updateValue()()
{
  uint64_t v1 = v0;
  type metadata accessor for ObservationTracking?(0, &lazy cache variable for type metadata for ObservationTracking?, MEMORY[0x1E4FBCD58]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v58 - v3;
  uint64_t v5 = type metadata accessor for ObservationTracking();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ObservationTracking?(0, &lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x1E4FBCD50]);
  MEMORY[0x1F4188790](v9 - 8);
  char v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v58 - v13;
  if ((*(unsigned char *)AGGraphGetValue() & 1) == 0)
  {
    type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (WeakValue)
    {
      uint64_t v16 = *(unsigned __int8 *)(WeakValue + 8);
      if (v16 != 6 && (v16 != 1 || *(void *)(WeakValue + 16) != 2))
      {
        uint64_t v71 = *(void *)(WeakValue + 16);
        uint64_t v70 = *(void *)WeakValue;
        int v18 = *(_DWORD *)AGGraphGetValue() >> 1;
        if (v18 != *(_DWORD *)(v1 + 64))
        {
          *(_DWORD *)(v1 + 64) = v18;
          swift_release();
          *(void *)(v1 + 80) = 0;
          swift_release();
          *(void *)(v1 + 88) = 0;
          swift_release();
          *(void *)(v1 + 72) = 0;
          *(void *)(v1 + 52) = 0xFFFFFFFFLL;
          *(unsigned char *)(v1 + 60) = 0;
        }
        type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
        uint64_t v19 = AGGraphGetWeakValue();
        if (v19)
        {
          outlined init with copy of NavigationAuthority?(v19, (uint64_t)&v81);
          if (*((void *)&v81 + 1) == 1)
          {
            outlined destroy of NavigationAuthority?((uint64_t)&v81);
            return;
          }
          uint64_t v63 = v16;
          uint64_t v69 = v6;
          outlined init with take of NavigationAuthority((uint64_t)&v81, (uint64_t)v88);
          uint64_t v20 = *(void *)(v1 + 80);
          int v21 = *(_DWORD *)(v1 + 8);
          type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
          int v64 = v21;
          uint64_t v68 = v22;
          uint64_t Value = (uint64_t *)AGGraphGetValue();
          uint64_t v24 = Value[1];
          uint64_t v66 = *Value;
          uint64_t v67 = v24;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v65 = Transaction.animation.getter();
          swift_release();
          swift_release();
          swift_release();
          if (v20)
          {
            if (v65)
            {
              swift_retain();
              char v25 = static Animation.== infix(_:_:)();
              swift_release_n();
              uint64_t v26 = swift_release();
              if ((v25 & 1) == 0) {
                goto LABEL_20;
              }
LABEL_18:
              LODWORD(v66) = 0;
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v26 = v65;
            if (!v65) {
              goto LABEL_18;
            }
          }
          swift_release();
LABEL_20:
          AGGraphGetValue();
          uint64_t v67 = v20;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v66 = Transaction.animation.getter();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v26 = swift_release();
          *(void *)(v1 + 80) = v66;
          LODWORD(v66) = 1;
LABEL_21:
          char v27 = *(unsigned char *)(*(void *)(v1 + 40)
                         + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved);
          MEMORY[0x1F4188790](v26);
          *(&v58 - 2) = v1;
          type metadata accessor for (AnyNavigationPath, Bool)();
          _withObservation<A>(do:)();
          uint64_t v28 = v81;
          char v29 = BYTE8(v81);
          outlined init with copy of ObservationTracking._AccessList?((uint64_t)v14, (uint64_t)v11);
          uint64_t v67 = v28;
          swift_retain();
          ObservationTracking.init(_:)();
          uint64_t v30 = v69;
          (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v4, v8, v5);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v4, 0, 1, v5);
          swift_retain();
          BoundNavigationPathDetector.PathObservation.tracking.setter((uint64_t)v4);
          swift_release();
          swift_retain_n();
          static ObservationTracking._installTracking(_:willSet:didSet:)();
          swift_release_n();
          char v31 = v29 | v27;
          int v32 = *(_DWORD *)(v1 + 8);
          uint64_t v33 = *(void *)(AGGraphGetValue() + 8);
          uint64_t v34 = *(void *)(v1 + 88);
          int v64 = v32;
          swift_retain();
          if (v34)
          {
            swift_retain();
            int v35 = dispatch thunk of AnyLocation.isEqual(to:)();
            swift_release();
            int v36 = v35 ^ 1;
          }
          else
          {
            int v36 = 1;
          }
          swift_retain();
          swift_release();
          *(void *)(v1 + 88) = v33;
          if (v31)
          {
            uint64_t v65 = v33;
            if (*(void *)(v1 + 72))
            {
              unsigned int v37 = *(uint64_t (**)(uint64_t))(*(void *)v67 + 96);
              swift_retain();
              uint64_t v38 = swift_retain();
              int v39 = v37(v38);
              swift_release();
              swift_release();
              char v40 = v39 ^ 1;
              int v41 = v66;
              if (((v66 | v36 | v39 ^ 1) & 1) == 0) {
                goto LABEL_30;
              }
            }
            else
            {
              char v40 = 1;
              int v41 = v66;
            }
          }
          else
          {
            int v41 = v66;
            if (((v66 | v36) & 1) == 0)
            {
LABEL_30:
              swift_release();
              uint64_t v42 = v69;
              swift_release();
              (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v5);
LABEL_47:
              outlined destroy of ObservationTracking?((uint64_t)v14, &lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x1E4FBCD50]);
              swift_release();
              outlined destroy of NavigationAuthority((uint64_t)v88);
              return;
            }
            uint64_t v65 = v33;
            char v40 = 0;
          }
          char v43 = UpdateCycleDetector.dispatch(label:isDebug:)();
          uint64_t v44 = v69;
          if (v43)
          {
            if (((v41 | v36) & 1) == 0)
            {
              uint64_t v53 = v67;
              if ((v40 & 1) == 0)
              {
LABEL_45:
                swift_release();
LABEL_46:
                swift_release();
                (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v5);
                goto LABEL_47;
              }
              char v54 = (uint64_t *)AGGraphGetValue();
              uint64_t v56 = *v54;
              uint64_t v55 = v54[1];
              AGGraphGetValue();
              swift_retain();
              swift_retain_n();
              swift_retain_n();
              swift_retain();
              char v57 = Transaction.disablesAnimations.getter();
              uint64_t v68 = Transaction.animation.getter();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              *(void *)&long long v81 = v53;
              *((void *)&v81 + 1) = v56;
              *(_OWORD *)((char *)v82 + 8) = 0u;
              *(_OWORD *)((char *)&v82[1] + 8) = 0u;
              *(void *)&v82[0] = v55;
              *((void *)&v82[2] + 1) = 0;
              LOBYTE(v83) = 6;
              *((void *)&v83 + 1) = v70;
              *(void *)&long long v84 = v63;
              *((void *)&v84 + 1) = v71;
              long long v85 = 0uLL;
              *(void *)&long long v86 = 0;
              BYTE8(v86) = v57 & 1;
              uint64_t v87 = v68;
              if ((*(unsigned char *)(v1 + 28) & 1) == 0)
              {
                long long v78 = v85;
                long long v79 = v86;
                uint64_t v80 = v87;
                long long v74 = v82[1];
                long long v75 = v82[2];
                long long v76 = v83;
                long long v77 = v84;
                long long v72 = v81;
                long long v73 = v82[0];
                NavigationAuthority.enqueueRequest(_:)(&v72);
              }
              outlined release of NavigationRequest((uint64_t)&v81);
              uint64_t v44 = v69;
LABEL_44:
              *(void *)(v1 + 72) = v53;
              swift_retain();
              goto LABEL_45;
            }
            swift_release();
            unsigned int v45 = (uint64_t *)AGGraphGetValue();
            uint64_t v46 = v45[1];
            uint64_t v66 = *v45;
            uint64_t v60 = v45[2];
            uint64_t v61 = v46;
            uint64_t v47 = (uint64_t *)AGGraphGetValue();
            uint64_t v48 = *v47;
            uint64_t v68 = v47[1];
            AGGraphGetValue();
            swift_retain();
            swift_retain_n();
            swift_retain_n();
            uint64_t v49 = v60;
            swift_retain_n();
            uint64_t v59 = v48;
            swift_retain_n();
            swift_retain_n();
            int v64 = Transaction.disablesAnimations.getter();
            uint64_t v62 = Transaction.animation.getter();
            swift_release();
            swift_release();
            uint64_t v50 = v49;
            swift_release();
            uint64_t v51 = v61;
            swift_release();
            uint64_t v52 = v66;
            swift_release();
            swift_release();
            *(void *)&long long v81 = v52;
            *((void *)&v81 + 1) = v51;
            *(void *)&v82[0] = v50;
            *((void *)&v82[0] + 1) = v59;
            v82[1] = (unint64_t)v68;
            v82[2] = 0uLL;
            LOBYTE(v83) = 1;
            *((void *)&v83 + 1) = v70;
            *(void *)&long long v84 = v63;
            *((void *)&v84 + 1) = v71;
            long long v85 = 0uLL;
            *(void *)&long long v86 = 0;
            BYTE8(v86) = v64 & 1;
            uint64_t v87 = v62;
            if (*(unsigned char *)(v1 + 28) != 1)
            {
              long long v78 = v85;
              long long v79 = v86;
              uint64_t v80 = v87;
              long long v74 = v82[1];
              long long v75 = v82[2];
              long long v76 = v83;
              long long v77 = v84;
              long long v72 = v81;
              long long v73 = v82[0];
              NavigationAuthority.enqueueRequest(_:)(&v72);
            }
            outlined release of NavigationRequest((uint64_t)&v81);
            uint64_t v44 = v69;
            uint64_t v53 = v67;
          }
          else
          {
            uint64_t v53 = v67;
            swift_release();
          }
          if ((v40 & 1) == 0) {
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
    }
  }
}

void type metadata accessor for ObservationTracking?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t BoundNavigationPathDetector.PathObservation.tracking.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ObservationTracking();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = v2 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
    ObservationTracking.cancel()();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *(unsigned char *)(v2 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved) = 0;
  swift_beginAccess();
  outlined assign with take of ObservationTracking?(a1, v8);
  return swift_endAccess();
}

void type metadata accessor for (AnyNavigationPath, Bool)()
{
  if (!lazy cache variable for type metadata for (AnyNavigationPath, Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyNavigationPath, Bool));
    }
  }
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.equals(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*(void *)(v4 + 200) + 8);
  uint64_t v6 = *(void *)(v4 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v99 = (char *)v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v106 = (char *)v92 - v10;
  uint64_t v114 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v102 = (char *)v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v107 = (char *)v92 - v14;
  uint64_t v115 = v6;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v112 = v15;
  uint64_t v113 = v16;
  MEMORY[0x1F4188790](v15);
  int v18 = (char *)v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  int v21 = (char *)v92 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v92 - v23;
  MEMORY[0x1F4188790](v25);
  uint64_t v111 = (char *)v92 - v26;
  uint64_t v101 = v4;
  uint64_t v27 = swift_dynamicCastClass();
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v98 = v21;
    uint64_t v29 = swift_retain();
    uint64_t v30 = AnyNavigationPath.HomogeneousBoxBase.count.getter(v29);
    if (v30 == AnyNavigationPath.HomogeneousBoxBase.count.getter(v30))
    {
      v92[1] = a1;
      uint64_t v109 = (char *)v2 + *(void *)(*v2 + 232);
      char v31 = v109;
      swift_beginAccess();
      uint64_t v32 = v114;
      uint64_t v33 = v28;
      uint64_t v34 = v114 + 16;
      int v35 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
      int v36 = v107;
      uint64_t v108 = v7;
      uint64_t v37 = v115;
      v35(v107, v31, v115);
      char v110 = v24;
      uint64_t v38 = v111;
      dispatch thunk of Collection.startIndex.getter();
      int v39 = *(void (**)(char *, uint64_t))(v32 + 8);
      v39(v36, v37);
      uint64_t v40 = v33 + *(void *)(*(void *)v33 + 232);
      swift_beginAccess();
      int v41 = v102;
      uint64_t v104 = (char *)v40;
      uint64_t v42 = (char *)v40;
      uint64_t v43 = v32 + 8;
      uint64_t v119 = v34;
      uint64_t v117 = v35;
      v35(v102, v42, v37);
      uint64_t v118 = v5;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v44 = v41;
      unsigned int v45 = v109;
      __int16 v116 = v39;
      v39(v44, v37);
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
      uint64_t v47 = (void (**)(char *, uint64_t))(v113 + 8);
      uint64_t v96 = (void (**)(char *))(v108 + 16);
      uint64_t v95 = (void (**)(char *, uint64_t))(v108 + 8);
      uint64_t v94 = (void (**)(char *, char *, uint64_t))(v113 + 32);
      uint64_t v48 = v18;
      uint64_t v49 = v98;
      uint64_t v97 = (void (**)(char *, uint64_t))(v113 + 8);
      v113 += 16;
      uint64_t v105 = v46;
      uint64_t v114 = v43;
      uint64_t v93 = v18;
      while (1)
      {
        uint64_t v50 = v112;
        v46(v49, v38, v112);
        uint64_t v51 = v107;
        uint64_t v52 = v115;
        v117(v107, v45, v115);
        dispatch thunk of Collection.endIndex.getter();
        v116(v51, v52);
        swift_getAssociatedConformanceWitness();
        char v53 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v54 = *v47;
        (*v47)(v48, v50);
        v54(v49, v50);
        uint64_t v55 = v104;
        if ((v53 & 1) == 0) {
          break;
        }
        uint64_t v56 = v112;
        v105(v49, v110, v112);
        uint64_t v108 = (char *)v54;
        uint64_t v57 = v115;
        v117(v51, v55, v115);
        dispatch thunk of Collection.endIndex.getter();
        uint64_t v58 = v57;
        char v54 = (void (*)(char *, uint64_t))v108;
        v116(v51, v58);
        char v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v54(v48, v56);
        v54(v49, v56);
        if ((v59 & 1) == 0) {
          break;
        }
        uint64_t v60 = v115;
        uint64_t v61 = (void (*)(char *, uint64_t, uint64_t))v117;
        v117(v51, v109, v115);
        uint64_t v62 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v63 = *v96;
        uint64_t v64 = AssociatedTypeWitness;
        (*v96)(v106);
        v62(v120, 0);
        uint64_t v65 = v116;
        v116(v51, v60);
        uint64_t v66 = v102;
        v61(v102, (uint64_t)v55, v60);
        uint64_t v67 = v60;
        uint64_t v68 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v69 = v99;
        v63(v99);
        v68(v120, 0);
        v65(v66, v67);
        uint64_t v70 = v106;
        LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v71 = *v95;
        (*v95)(v69, v64);
        v71(v70, v64);
        if ((v66 & 1) == 0)
        {
          swift_release();
          uint64_t v88 = v112;
          uint64_t v89 = (void (*)(char *, uint64_t))v108;
          ((void (*)(char *, uint64_t))v108)(v110, v112);
          v89(v111, v88);
          goto LABEL_13;
        }
        long long v72 = v107;
        uint64_t v73 = v115;
        v117(v107, v109, v115);
        uint64_t v48 = v93;
        long long v74 = v111;
        uint64_t v75 = v112;
        uint64_t v46 = v105;
        v105(v93, v111, v112);
        uint64_t v49 = v98;
        dispatch thunk of Collection.index(after:)();
        uint64_t v47 = v97;
        long long v76 = (void (*)(char *, uint64_t))v108;
        ((void (*)(char *, uint64_t))v108)(v48, v75);
        v116(v72, v73);
        v76(v74, v75);
        uint64_t v103 = *v94;
        v103(v74, v49, v75);
        v117(v72, v104, v73);
        long long v77 = v110;
        v46(v48, v110, v75);
        dispatch thunk of Collection.index(after:)();
        v76(v48, v75);
        v116(v72, v73);
        v76(v77, v75);
        v103(v77, v49, v75);
        uint64_t v38 = v111;
        unsigned int v45 = v109;
      }
      uint64_t v78 = v112;
      v105(v49, v111, v112);
      long long v79 = v54;
      uint64_t v80 = v115;
      v117(v51, v109, v115);
      dispatch thunk of Collection.endIndex.getter();
      v116(v51, v80);
      char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
      v79(v48, v78);
      v79(v49, v78);
      if (v81)
      {
        uint64_t v82 = v51;
        long long v83 = v79;
        long long v84 = v110;
        uint64_t v85 = v112;
        v105(v49, v110, v112);
        uint64_t v86 = v115;
        v117(v82, v55, v115);
        dispatch thunk of Collection.endIndex.getter();
        v116(v82, v86);
        char v87 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v83(v48, v85);
        v83(v49, v85);
        v83(v84, v85);
        v83(v111, v85);
        return v87 & 1;
      }
      swift_release();
      uint64_t v90 = v112;
      v79(v110, v112);
      v79(v111, v90);
    }
    else
    {
      swift_release();
    }
  }
LABEL_13:
  char v87 = 0;
  return v87 & 1;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.count.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = (uint64_t)v1 + *(void *)(v2 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v8 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8;
}

uint64_t NavigationListState.updateSelection(_:for:)(uint64_t a1, _OWORD *a2)
{
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0x8000000000000000;
  uint64_t v6 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 24) = v12;
  uint64_t v7 = swift_bridgeObjectRelease();
  if (v6)
  {
    char v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(v6);
    char v9 = (*(uint64_t (**)(void))(*(void *)v6 + 80))();
    swift_release();
    if (v9) {
      int v10 = 256;
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    char v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(v7);
    int v10 = 256;
  }
  return v10 | ((v8 & 1) == 0);
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, _OWORD *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t result = *(void *)(v17 + 8 * v10);
        *(void *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return 0;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AnyListSelection.Storage.equals(_:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168);
  uint64_t v3 = *(void *)(*v0 + 176);
  uint64_t v4 = type metadata accessor for SelectionManagerBox();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = &v19[-v9];
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = (uint64_t)v0 + *(void *)(v1 + 184);
    swift_beginAccess();
    char v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    uint64_t v15 = v12 + *(void *)(*(void *)v12 + 184);
    swift_beginAccess();
    v14(v7, v15, v4);
    char v16 = static SelectionManagerBox.== infix(_:_:)((uint64_t)v10, v7, v2, v3);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.equals(_:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = v1;
    swift_beginAccess();
    uint64_t v3 = *(void *)(v0 + 32);
    char v4 = *(unsigned char *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 56);
    long long v17 = *(_OWORD *)(v0 + 16);
    uint64_t v18 = v3;
    char v19 = v4;
    uint64_t v20 = v5;
    uint64_t v21 = v6;
    swift_beginAccess();
    uint64_t v7 = *(void *)(v2 + 32);
    char v8 = *(unsigned char *)(v2 + 40);
    uint64_t v9 = *(void *)(v2 + 48);
    uint64_t v10 = *(void *)(v2 + 56);
    long long v12 = *(_OWORD *)(v2 + 16);
    uint64_t v13 = v7;
    char v14 = v8;
    uint64_t v15 = v9;
    uint64_t v16 = v10;
    LOBYTE(v1) = static NavigationPath.== infix(_:_:)(&v17, &v12);
  }
  return v1 & 1;
}

uint64_t closure #1 in AppDelegate.application(_:configurationForConnecting:options:)@<X0>(uint64_t *a1@<X8>)
{
  if (static AppGraph.shared)
  {
    if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E4F4E7A0])
    {
      uint64_t result = MEMORY[0x1E4FBC860];
    }
    else
    {
      AGGraphGetValue();
      uint64_t result = swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

void type metadata completion function for SearchCompletionButtonStyle()
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t static InlinePickerStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for UserDefaultLocation()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return v0;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitReader and conformance NavigationSplitReader()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitReader and conformance NavigationSplitReader;
  if (!lazy protocol witness table cache variable for type NavigationSplitReader and conformance NavigationSplitReader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitReader and conformance NavigationSplitReader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackdropGroupEffect and conformance _BackdropGroupEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  }
  return result;
}

double static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  a1(&v4);
  type metadata accessor for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>(0, &lazy cache variable for type metadata for _GraphValue<NavigationItemAdaptorModifier>, (uint64_t)&type metadata for NavigationItemAdaptorModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  double result = v5;
  a2[1] = v5;
  return result;
}

uint64_t View.navigationItemAdaptor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15[3] = a3;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of UINavigationItemAdaptor?((uint64_t)v15, (uint64_t)&v13);
  if (v14)
  {
    outlined init with take of OptionalBinaryInteger(&v13, (uint64_t)v12);
    type metadata accessor for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>, (uint64_t)&type metadata for UINavigationItemAdaptorStorage.Adaptor, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
    outlined init with copy of TableColumnList((uint64_t)v12, v10 + 32);
    *(_DWORD *)(v10 + 72) = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  outlined destroy of UINavigationItemAdaptor?((uint64_t)v15);
  v15[0] = v10;
  MEMORY[0x18C113660](v15, a2, &type metadata for NavigationItemAdaptorModifier, a4);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of UINavigationItemAdaptor?(uint64_t a1)
{
  type metadata accessor for UINavigationItemAdaptor?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UINavigationItemAdaptor?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UINavigationItemAdaptor?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UINavigationItemAdaptor?()
{
  if (!lazy cache variable for type metadata for UINavigationItemAdaptor?)
  {
    type metadata accessor for UINavigationItemAdaptor();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UINavigationItemAdaptor?);
    }
  }
}

unint64_t type metadata accessor for UINavigationItemAdaptor()
{
  unint64_t result = lazy cache variable for type metadata for UINavigationItemAdaptor;
  if (!lazy cache variable for type metadata for UINavigationItemAdaptor)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UINavigationItemAdaptor);
  }
  return result;
}

uint64_t ScrollViewResponder.updateValue()()
{
  uint64_t v0 = specialized ScrollViewResponder.responder()();
  type metadata accessor for HostingScrollView();
  uint64_t v1 = *(void **)AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v2 = v1;
  id v3 = objc_msgSend(v2, sel_superview);
  swift_unknownObjectWeakAssign();

  swift_weakAssign();
  AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  swift_release();
  type metadata accessor for External<CGSize>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  if (v4)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  if (AGGraphGetOutputValue()) {
    return swift_release();
  }
  type metadata accessor for External<SystemScrollLayoutState>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_188351940;
  *(void *)(v6 + 32) = v0;
  specialized Array._endMutation()();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ScrollViewResponder.responder()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!v1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    type metadata accessor for HostingScrollViewResponder();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 224) = v2;
    swift_retain_n();
    uint64_t v1 = specialized UIViewResponder.init()(v3);
    swift_release();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_retain_n();
    swift_retain();
    swift_release();
    swift_weakAssign();
    swift_release_n();
    swift_release_n();
    swift_release();
    *(void *)(v0 + 24) = v1;
  }
  return v1;
}

uint64_t type metadata accessor for HostingScrollViewResponder()
{
  uint64_t result = type metadata singleton initialization cache for HostingScrollViewResponder;
  if (!type metadata singleton initialization cache for HostingScrollViewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *assignWithCopy for AccessibilityFocusStoreListModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24);
  uint64_t v11 = v9 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  v10(((unint64_t)v7 + v12 + 8) & ~v12, (v12 + 8 + v6) & ~v12, v8);
  uint64_t v13 = ((v12 + 16) & ~v12) + *(void *)(v11 + 40) + v12;
  v10(((unint64_t)a1 + v13) & ~v12, ((unint64_t)a2 + v13) & ~v12, v8);
  return a1;
}

void type metadata accessor for SheetBridge<BarItemView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<BarItemView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<BarItemView, SheetPreference.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BarItemView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<BarItemView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BarItemView and conformance BarItemView()
{
  unint64_t result = lazy protocol witness table cache variable for type BarItemView and conformance BarItemView;
  if (!lazy protocol witness table cache variable for type BarItemView and conformance BarItemView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarItemView and conformance BarItemView);
  }
  return result;
}

uint64_t static UIItemHostingView.defaultViewGraphOutputs.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static ViewGraph.Outputs.defaults.getter();
  *a1 = v3 | 2;
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<BarItemView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, Alert.Presentation>);
    }
  }
}

uint64_t specialized UIHostingViewBase.init<A>(rootViewType:options:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 48) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for UIViewPlatformViewDefinition();
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(void *)(v3 + 72) = DisplayList.ViewRenderer.init(platform:)();
  type metadata accessor for EventBindingManager();
  *(void *)(v3 + 80) = EventBindingManager.__allocating_init()();
  *(void *)(v3 + 88) = 0;
  static ViewRendererHostProperties.all.getter();
  *(unsigned char *)(v3 + 98) = 0;
  *(void *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 116) = 1;
  *(_OWORD *)(v3 + 120) = xmmword_18834FC50;
  *(_OWORD *)(v3 + 136) = xmmword_18834FC50;
  *(void *)(v3 + 152) = 1;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(void *)(v3 + 192) = 0;
  *(unsigned char *)(v3 + 200) = 1;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 1;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 217) = 0;
  *(unsigned char *)(v3 + 225) = 0;
  *(_WORD *)(v3 + 240) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  a2(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  a3();
  uint64_t v7 = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v7;
  return v3;
}

Swift::Void __swiftcall UIKitBarItemHost.appendViewGraphFeatures()()
{
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type BarItemViewGraph and conformance BarItemViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();

  swift_release();
}

unint64_t lazy protocol witness table accessor for type BarItemViewGraph and conformance BarItemViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type BarItemViewGraph and conformance BarItemViewGraph;
  if (!lazy protocol witness table cache variable for type BarItemViewGraph and conformance BarItemViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarItemViewGraph and conformance BarItemViewGraph);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BarItemView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<BarItemView, EditModeScopeModifier>, (uint64_t)&type metadata for BarItemView, (void (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BarItemView, EditModeScopeModifier>, (uint64_t)&type metadata for BarItemView, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, a2, a3, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    a4();
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BarItemView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RootEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *))
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  long long v20 = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v21;
  *(_OWORD *)long long v17 = v5;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 80);
  long long v15 = v19;
  *(_OWORD *)uint64_t v16 = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, &lazy cache variable for type metadata for _GraphValue<RootEnvironmentModifier>, (uint64_t)&type metadata for RootEnvironmentModifier, MEMORY[0x1E4F3F590]);
  int v9 = 0;
  *(_OWORD *)unint64_t v10 = 0uLL;
  *(_OWORD *)&v10[16] = 3uLL;
  uint64_t v11 = 0;
  LOBYTE(v12) = 0;
  *(_DWORD *)int v8 = _GraphValue.value.getter();
  *(void *)&v8[4] = _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of RootEnvironmentModifier.Child((uint64_t)v8);
  _GraphInputs.environment.setter();
  *(void *)int v8 = v15;
  *(_DWORD *)&v8[8] = DWORD2(v15);
  *(void *)unint64_t v10 = *(void *)v16;
  *(_OWORD *)&v10[8] = *(_OWORD *)&v16[8];
  *(void *)&unsigned char v10[24] = *(void *)&v16[24];
  uint64_t v11 = *(void *)v17;
  long long v12 = *(_OWORD *)&v17[8];
  uint64_t v13 = *(void *)&v17[24];
  int v14 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  a3(v6, v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t outlined destroy of RootEnvironmentModifier.Child(uint64_t a1)
{
  return a1;
}

uint64_t destroy for RootEnvironmentModifier.Child(uint64_t result)
{
  if (*(unsigned char *)(result + 32) != 3)
  {
    uint64_t v1 = result;
    swift_weakDestroy();
    swift_weakDestroy();
    unint64_t result = swift_weakDestroy();
    int v2 = *(unsigned __int8 *)(v1 + 56);
    if (v2 != 255)
    {
      uint64_t v3 = *(void *)(v1 + 40);
      uint64_t v4 = *(void *)(v1 + 48);
      return outlined consume of SceneID(v3, v4, v2 & 1);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child;
  if (!lazy protocol witness table cache variable for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child);
  }
  return result;
}

uint64_t AnyHoverEffectChild.updateValue()(uint64_t a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  type metadata accessor for _AnyHoverEffectBox();
  swift_retain();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6 + *(void *)(*(void *)v6 + 128), v2);
    MEMORY[0x1F4188790](v7);
    v10[-2] = a1;
    v10[-1] = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v10[-4], v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v8);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    return swift_release();
  }
}

uint64_t type metadata accessor for _AnyHoverEffectBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchHasSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t associated type witness table accessor for View.Body : View in Label<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>;
  if (!lazy protocol witness table cache variable for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<ToolbarToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarToggleStyle and conformance ToolbarToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultListToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type DefaultListToggleStyle and conformance DefaultListToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<AccessibilityToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultListToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type DefaultListToggleStyle and conformance DefaultListToggleStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>)
  {
    _s7SwiftUI6ToggleVyAA0C18StyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>)
  {
    _s7SwiftUI6ToggleVyAA0C18StyleConfigurationV5LabelVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<ButtonToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type ButtonToggleStyle and conformance ButtonToggleStyle);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>)
  {
    _s7SwiftUI6ToggleVyAA0C18StyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<SwitchToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type SwitchToggleStyle and conformance SwitchToggleStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>);
    }
  }
}

void type metadata accessor for Toggle<ToggleStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ToggleVyAA0C18StyleConfigurationV5LabelVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _LabeledContentStyleModifier<AutomaticLabeledContentStyle> and conformance _LabeledContentStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LabeledContentStyleModifier<AutomaticLabeledContentStyle> and conformance _LabeledContentStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _LabeledContentStyleModifier<AutomaticLabeledContentStyle> and conformance _LabeledContentStyleModifier<A>)
  {
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LabeledContentStyleModifier<AutomaticLabeledContentStyle> and conformance _LabeledContentStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>()
{
  if (!lazy cache variable for type metadata for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>)
  {
    lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle();
    unint64_t v0 = type metadata accessor for _LabeledContentStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFo()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Col;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Col)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _L();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>,();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Col);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _L()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormSt)
  {
    type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _La, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormSt);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>,()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleCon;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleCon)
  {
    type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _La, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContent();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleCon);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContent()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledC;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledC)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledC);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ColumnsFormStyleContext>, (uint64_t)&type metadata for ColumnsFormStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle, (uint64_t)&type metadata for ColumnarLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ColumnsFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ColumnsFormStyleContext>, (uint64_t)&type metadata for ColumnsFormStyleContext);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout, (uint64_t)&type metadata for LabeledContentUsesLegacyLayout, MEMORY[0x1E4F40F30]);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>();
    lazy protocol witness table accessor for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>)
  {
    uint64_t v0 = MEMORY[0x1E4F41310];
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle, (uint64_t)&type metadata for AccessibilityLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, v0);
    unint64_t v1 = type metadata accessor for StaticIf();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for _LabeledContentStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, a2, a3, MEMORY[0x1E4F410E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for LabeledContentStyleConfiguration.Label?, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout;
  if (!lazy protocol witness table cache variable for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone()
{
  unint64_t result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label? and conformance <A> A?)
  {
    type metadata accessor for LabeledContentStyleConfiguration.Label?(255, &lazy cache variable for type metadata for LabeledContentStyleConfiguration.Label?, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for LabeledContentStyleConfiguration.Label?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout, (uint64_t)&type metadata for LabeledContentUsesLegacyLayout, MEMORY[0x1E4F40F30]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(255);
    lazy protocol witness table accessor for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

void type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>();
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label? and conformance <A> A?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>)
  {
    type metadata accessor for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>(255, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle, (uint64_t)&type metadata for AutomaticLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>);
    }
  }
}

unsigned __int8 *assignWithTake for TaskPhase(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    if (v9 >= 3)
    {
      if (v8 <= 3) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a2;
          goto LABEL_11;
        case 2:
          int v11 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v11 = *(_DWORD *)a2;
LABEL_11:
          int v12 = (v11 | ((v9 - 3) << (8 * v8))) + 3;
          char v13 = v11 + 3;
          if (v8 >= 4) {
            LOBYTE(v9) = v13;
          }
          else {
            LOBYTE(v9) = v12;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v8] = v9;
  }
  return a1;
}

uint64_t initializeWithCopy for MakeAlertStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  uint64_t v6 = (_OWORD *)(a1 + 104);
  uint64_t v7 = a2 + 104;
  uint64_t v8 = *(void *)(a2 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 128);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 104);
      uint64_t v11 = *(void *)(a2 + 112);
      char v12 = *(unsigned char *)(a2 + 120);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 104) = v10;
      *(void *)(a1 + 112) = v11;
      *(unsigned char *)(a1 + 120) = v12;
      *(void *)(a1 + 128) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *(_OWORD *)(v7 + 16);
      _OWORD *v6 = *(_OWORD *)v7;
      *(_OWORD *)(a1 + 120) = v14;
    }
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v13 = *(_OWORD *)(v7 + 16);
    _OWORD *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 120) = v13;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v7 + 32);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(v7 + 48);
  }
  return a1;
}

uint64_t type metadata completion function for ProgressViewStyleConfiguration()
{
  uint64_t result = type metadata accessor for ProgressViewValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>>();
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGACyxGAA09ViewInputF0AAWlTm_0(&lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemTintModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<PlatformItemTintModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGACyxGAA09ViewInputF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<PlatformItemTintModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemTintModifier>)
  {
    lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemTintModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemTintModifier and conformance PlatformItemTintModifier;
  if (!lazy protocol witness table cache variable for type PlatformItemTintModifier and conformance PlatformItemTintModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemTintModifier>();
    type metadata accessor for PlatformItemListTransformModifier<LabelPlatformItemListFlags>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemTintModifier>, PlatformItemListTransformModifier<LabelPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for PlatformItemListTransformModifier<LabelPlatformItemListFlags>()
{
  if (!lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>)
  {
    unint64_t v0 = type metadata accessor for PlatformItemListTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>);
    }
  }
}

uint64_t protocol witness for Location.update() in conformance SearchZipLocation(uint64_t a1)
{
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v3 = (char *)(a1 + *(int *)(v2 + 48));

  return SearchZipLocation.update()(a1, v3);
}

void *type metadata accessor for BarItemModifier()
{
  return &unk_1ED472C88;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PlatformItemNavigationSelectionStyleModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AccessibilityScrollableContextModifier(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
}

uint64_t UIApplicationDelegateAdaptor<>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIApplicationDelegateAdaptor<>.init(_:)(a1, a2, a3, (void (*)(void))type metadata accessor for ObservableFallbackDelegateBox, ObservableObjectFallbackDelegateBox.__allocating_init());
}

{
  return UIApplicationDelegateAdaptor<>.init(_:)(a1, a2, a3, (void (*)(void))type metadata accessor for ObservableObjectFallbackDelegateBox, ObservableObjectFallbackDelegateBox.__allocating_init());
}

uint64_t static _CoordinateSpaceModifier.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedBorderedButton()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for ResolvedBorderShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape);
}

uint64_t assignWithCopy for PresentedSceneValueInputModifier(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      outlined destroy of AnyHashable(a1);
      uint64_t v5 = *((void *)a2 + 4);
      long long v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  return a1;
}

uint64_t type metadata completion function for TextSelection()
{
  uint64_t result = type metadata accessor for TextSelection.Indices(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for TextSelection.Indices(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextSelection.Indices);
}

uint64_t assignWithCopy for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v5 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyAssign();
  *(void *)(v5 + 8) = *(void *)(v6 + 8);
  swift_retain();
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24 + v5) & ~v9;
  uint64_t v11 = (v9 + 24 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 40) + 3;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFFCLL;
  char v15 = *(unsigned char *)(v14 + 4);
  *(_DWORD *)unint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = v15;
  return a1;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContextMenuPreviewModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for LazyVStack()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View.scrollClipDisabled(_:behavior:)(char a1, char *a2)
{
  char v3 = *a2;
  swift_getKeyPath();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 17) = v3;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

ValueMetadata *type metadata accessor for UIKitButtonConfiguration()
{
  return &type metadata for UIKitButtonConfiguration;
}

uint64_t destroy for _NavigationSplitReader()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t storeEnumTagSinglePayload for TextFieldState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 88) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 92) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 92) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.NavigationPresentationAdaptorKey@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _GraphInputs.NavigationPresentationAdaptorKey.defaultValue;
  return result;
}

uint64_t assignWithCopy for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakCopyAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  uint64_t v4 = *(void *)(a2 + 80);
  if (!*(void *)(a1 + 80))
  {
    if (v4)
    {
      *(void *)(a1 + 80) = v4;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 56, a2 + 56);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 56);
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 72) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  return a1;
}

uint64_t specialized static TransformScrollBounceBehavior.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)AGGraphGetValue();
  if (Axis.Set.contains(_:)())
  {
    uint64_t v4 = *(void *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v4)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v8[113] = v3;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v8, (uint64_t)v7);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v4)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v8);
  }
  uint64_t result = Axis.Set.contains(_:)();
  if (result)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v8[137] = v3;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v8, (uint64_t)v7);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v6)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)v8);
  }
  return result;
}

void type metadata completion function for UIHostingConfigurationStorage()
{
  type metadata accessor for UICellConfigurationState?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for WindowSceneConfiguration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance UISplitViewControllerProxyKey@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static UISplitViewControllerProxyKey.defaultValue;
  *a1 = static UISplitViewControllerProxyKey.defaultValue;
  return result;
}

uint64_t type metadata completion function for LazyLayoutCacheItem()
{
  return swift_initClassMetadata2();
}

uint64_t one-time initialization function for defaultStyleModifier()
{
  uint64_t result = swift_getKeyPath();
  static ResolvedLabeledContent.defaultStyleModifier = result;
  byte_1E90FBCB0 = 0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  unint64_t v0 = type metadata accessor for UIButton.Configuration();
  unint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  char v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  __swift_allocate_value_buffer(v4, static ResolvedUIKitButtonBody.defaultStyleModifier);
  long long v5 = __swift_project_value_buffer(v4, (uint64_t)static ResolvedUIKitButtonBody.defaultStyleModifier);
  static UIButton.Configuration.bordered()();
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v3, v0);
  uint64_t v6 = v5 + *(int *)(v4 + 20);
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v6 = result;
  *(unsigned char *)(v6 + 8) = 0;
  return result;
}

uint64_t one-time initialization function for listLabelIconAlignment()
{
  uint64_t result = VerticalAlignment.init(_:)();
  static VerticalAlignment.listLabelIconAlignment = result;
  return result;
}

uint64_t type metadata completion function for OpenURLContext()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, void (*a6)(char *, uint64_t *, double)@<X5>, uint64_t a7@<X8>)
{
  void v8[6] = a5;
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  char v12 = a4;
  return _LazyLayoutViewCache.withPlacementData<A>(_:)(a6, (uint64_t)v8, a7);
}

uint64_t _LazyLayoutViewCache.withPlacementData<A>(_:)@<X0>(void (*a1)(char *, uint64_t *, double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v36)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  double v40;
  _DWORD v42[4];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t *, double);
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  long long v84;
  long long v85;
  long long v86[3];
  uint64_t v87;
  int v88;
  int v89;

  uint64_t v4 = v3;
  uint64_t v48 = a2;
  uint64_t v49 = a1;
  uint64_t v47 = a3;
  uint64_t v44 = *v3;
  unsigned int v45 = *(void *)(v44 + 320);
  uint64_t v46 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v42 - v5;
  uint64_t v43 = (char *)v42 - v5;
  AGGraphClearUpdate();
  _LazyLayoutViewCache.layout.getter((uint64_t)v6);
  AGGraphSetUpdate();
  v42[3] = *((_DWORD *)v4 + 36);
  uint64_t v60 = v4[4];
  uint64_t v65 = *((_DWORD *)v4 + 10);
  uint64_t v7 = v4[6];
  int v8 = *((_DWORD *)v4 + 14);
  int v9 = *((_DWORD *)v4 + 15);
  int v10 = *((_DWORD *)v4 + 17);
  char v59 = *((_DWORD *)v4 + 16);
  uint64_t v11 = v4[9];
  uint64_t v50 = v4[10];
  int v12 = *((_DWORD *)v4 + 22);
  int v13 = *((_DWORD *)v4 + 23);
  uint64_t v61 = v8;
  uint64_t v62 = v12;
  int v14 = *((_DWORD *)v4 + 24);
  int v15 = *((_DWORD *)v4 + 25);
  int v16 = *((_DWORD *)v4 + 27);
  char v53 = *((_DWORD *)v4 + 26);
  char v54 = v14;
  int v17 = *((_DWORD *)v4 + 28);
  uint64_t v51 = v10;
  uint64_t v52 = v17;
  uint64_t v66 = v60;
  uint64_t v67 = v65;
  uint64_t v68 = v7;
  uint64_t v18 = v7;
  uint64_t v69 = v8;
  uint64_t v70 = v9;
  uint64_t v63 = v9;
  uint64_t v71 = v59;
  long long v72 = v10;
  int v19 = v10;
  uint64_t v73 = v11;
  long long v74 = v50;
  uint64_t v64 = v11;
  uint64_t v75 = v12;
  long long v76 = v13;
  int v20 = v13;
  uint64_t v57 = v15;
  uint64_t v58 = v13;
  long long v77 = v14;
  uint64_t v78 = v15;
  int v21 = v15;
  long long v79 = v53;
  uint64_t v80 = v16;
  int v22 = v16;
  uint64_t v56 = v16;
  char v81 = v17;
  v42[2] = _ViewInputs.environment.getter();
  uint64_t v66 = v60;
  uint64_t v67 = v65;
  uint64_t v68 = v18;
  uint64_t v55 = v18;
  uint64_t v69 = v61;
  uint64_t v70 = v9;
  int v23 = v59;
  uint64_t v71 = v59;
  long long v72 = v19;
  uint64_t v24 = v50;
  uint64_t v73 = v11;
  long long v74 = v50;
  uint64_t v75 = v62;
  long long v76 = v20;
  long long v77 = v54;
  uint64_t v78 = v21;
  long long v79 = v53;
  uint64_t v80 = v22;
  char v81 = v52;
  LODWORD(v6) = _ViewInputs.containerSize.getter();
  LOBYTE(v66) = 1;
  SizeAndSpacingContext.init(context:owner:environment:)();
  char v87 = v66;
  uint64_t v88 = v67;
  uint64_t v89 = (int)v6;
  uint64_t v25 = v60;
  uint64_t v66 = v60;
  uint64_t v67 = v65;
  uint64_t v68 = v18;
  LODWORD(v18) = v61;
  int v26 = v62;
  uint64_t v69 = v61;
  uint64_t v70 = v63;
  uint64_t v71 = v23;
  int v27 = v51;
  long long v72 = v51;
  uint64_t v73 = v64;
  long long v74 = v24;
  uint64_t v75 = v62;
  long long v76 = v58;
  int v29 = v53;
  int v28 = v54;
  long long v77 = v54;
  uint64_t v78 = v57;
  long long v79 = v53;
  uint64_t v80 = v56;
  LODWORD(v24) = v52;
  char v81 = v52;
  _ViewInputs.position.getter();
  v86[2] = *(_OWORD *)AGGraphGetValue();
  uint64_t v66 = v25;
  uint64_t v67 = v65;
  uint64_t v68 = v55;
  uint64_t v69 = v18;
  uint64_t v70 = v63;
  LODWORD(v25) = v58;
  uint64_t v71 = v59;
  long long v72 = v27;
  uint64_t v30 = v50;
  uint64_t v73 = v64;
  long long v74 = v50;
  uint64_t v75 = v26;
  long long v76 = v58;
  int v31 = v56;
  LODWORD(v18) = v57;
  long long v77 = v28;
  uint64_t v78 = v57;
  long long v79 = v29;
  uint64_t v80 = v56;
  char v81 = v24;
  _ViewInputs.size.getter();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v33 = Value[1];
  v86[0] = *Value;
  v86[1] = v33;
  uint64_t v66 = v60;
  uint64_t v67 = v65;
  uint64_t v68 = v55;
  uint64_t v69 = v61;
  uint64_t v70 = v63;
  uint64_t v71 = v59;
  long long v72 = v51;
  uint64_t v73 = v64;
  long long v74 = v30;
  uint64_t v75 = v62;
  long long v76 = v25;
  long long v77 = v28;
  uint64_t v78 = v18;
  long long v79 = v29;
  uint64_t v80 = v31;
  char v81 = v24;
  _ViewInputs.transform.getter();
  uint64_t v34 = AGGraphGetValue();
  long long v83 = *(void *)v34;
  long long v84 = *(_OWORD *)(v34 + 8);
  uint64_t v85 = *(_OWORD *)(v34 + 24);
  HIBYTE(v82) = *(unsigned char *)AGGraphGetValue();
  uint64_t v35 = *(void *)(v44 + 328);
  int v36 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v35 + 120);
  swift_retain();
  uint64_t v37 = v43;
  uint64_t v38 = v45;
  v36(&v82, v45, v35);
  int v39 = (char *)AGGraphGetValue();
  uint64_t v40 = _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v87, v86, (uint64_t)&v83, (char *)&v82 + 7, (int *)&v82, *v39, (uint64_t)&v66);
  v49(v37, &v66, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v37, v38);
}

uint64_t _LazyLayoutViewCache.layout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 320);
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(a1, Value, v3);
}

uint64_t partial apply for closure #1 in _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))closure #1 in _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:));
}

uint64_t closure #1 in _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  unsigned int v22 = a8;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  v18[1] = a1;
  uint64_t v19 = a5;
  uint64_t v10 = *(void *)(*(void *)a3 + 328);
  uint64_t v11 = *(void *)(*(void *)a3 + 320);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v15 = (char *)v18 - v14;
  int v16 = memcpy(v25, a2, sizeof(v25));
  _LazyLayoutViewCache.copyCacheState<A>(type:)((uint64_t)v16, AssociatedTypeWitness);
  LazyLayoutViewCache.subviews(context:)(a4, (uint64_t)v24);
  memcpy(v23, v25, 0x129uLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, unsigned char *, char *, uint64_t, uint64_t))(v10 + 88))(v19, v20, v21, v22, v23, v24, v15, v11, v10);
  outlined destroy of _LazyLayout_Subviews((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, *(void *)(v3 + 16), *(unsigned int *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56));
}

void protocol witness for LazyLayout.pinnedViews.getter in conformance LazyVStackLayout(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 20);
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DB60;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 1);
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9, long long a10, void (*a11)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a12)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v19 = a7[5];
  v26[4] = a7[4];
  v26[5] = v19;
  long long v20 = a7[7];
  v26[6] = a7[6];
  v26[7] = v20;
  long long v21 = a7[1];
  v26[0] = *a7;
  v26[1] = v21;
  long long v22 = a7[3];
  v26[2] = a7[2];
  v26[3] = v22;
  return specialized LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a2, a3, a4, a5, (uint64_t)__dst, a6, (uint64_t)v26, *(void *)v12, a8, *(void *)(v12 + 8), *(unsigned __int8 *)(v12 + 16) | ((unint64_t)*(unsigned int *)(v12 + 20) << 32), a10, *((double (**)(uint64_t, double, double, double, double, double, double, double, double))&a10 + 1), a11, a12);
}

unint64_t specialized LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, double (*a13)(uint64_t, double, double, double, double, double, double, double, double), void (*a14)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a15)
{
  unint64_t v16 = result;
  if (a4)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a2 + 16) > result)
    {
      unint64_t v18 = a2 + 72 * result;
      char v19 = *(unsigned char *)(v18 + 48);
      uint64_t v20 = *(void *)(v18 + 56);
      char v21 = *(unsigned char *)(v18 + 64);
      *(void *)a9 = *(void *)(v18 + 40);
      *(unsigned char *)(a9 + 8) = v19;
      *(void *)(a9 + 16) = v20;
      *(unsigned char *)(a9 + 24) = v21;
      long long v22 = *(_OWORD *)(v18 + 72);
      long long v23 = *(_OWORD *)(v18 + 88);
LABEL_13:
      *(_OWORD *)(a9 + 32) = v22;
      *(_OWORD *)(a9 + 48) = v23;
      return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v26 = *(void *)(a5 + 280);
  unint64_t v27 = *(void *)(a5 + 288);
  char v28 = *(unsigned char *)(a5 + 296);
  long long v29 = *(_OWORD *)(a5 + 104);
  long long v30 = *(_OWORD *)(a5 + 136);
  long long v69 = *(_OWORD *)(a5 + 120);
  long long v70 = v30;
  long long v71 = *(_OWORD *)(a5 + 152);
  long long v31 = *(_OWORD *)(a5 + 72);
  long long v65 = *(_OWORD *)(a5 + 56);
  long long v66 = v31;
  long long v67 = *(_OWORD *)(a5 + 88);
  long long v68 = v29;
  if (v28) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v27, v26));
  }
  ScrollGeometry.visibleRect.getter();
  double v33 = v32;
  double v35 = v34;
  double v37 = v36;
  double v39 = v38;
  LOBYTE(v57) = a11 & 1;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a8;
  *(void *)(v40 + 24) = a10;
  *(unsigned char *)(v40 + 32) = v57;
  *(_DWORD *)(v40 + 36) = HIDWORD(a11);
  Array<A>.synthesizedPlacement(of:in:avoiding:distance:)(v16, a2, a13, a3, (uint64_t)&v65, v33, v35, v37, v39);
  uint64_t result = swift_release();
  if ((v69 & 1) == 0)
  {
    char v44 = BYTE8(v66);
    uint64_t v45 = v66;
    char v46 = BYTE8(v65);
    long long v22 = v67;
    long long v23 = v68;
    *(void *)a9 = v65;
    *(unsigned char *)(a9 + 8) = v46 & 1;
    *(void *)(a9 + 16) = v45;
    *(unsigned char *)(a9 + 24) = v44 & 1;
    goto LABEL_13;
  }
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
  if (*(void *)(a2 + 16) <= v16)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  unint64_t v41 = a2 + 72 * v16;
  long long v42 = *(_OWORD *)(v41 + 80);
  long long v67 = *(_OWORD *)(v41 + 64);
  long long v68 = v42;
  *(void *)&long long v69 = *(void *)(v41 + 96);
  long long v43 = *(_OWORD *)(v41 + 48);
  long long v65 = *(_OWORD *)(v41 + 32);
  long long v66 = v43;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v65);
  a14(&v57, &v65, a6, a5, a7, a8, a10, a11 & 0xFFFFFFFF00000001);
  if (v64)
  {
    Array<A>.externalPlacement(of:avoiding:in:)(v16, a15, a2, a9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v65);
  }
  else
  {
    uint64_t v48 = v62;
    uint64_t v47 = v63;
    long long v56 = v61;
    char v49 = v60;
    uint64_t v50 = v59;
    char v51 = v58;
    uint64_t v52 = v57;
    uint64_t result = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v65);
    *(void *)a9 = v52;
    *(unsigned char *)(a9 + 8) = v51 & 1;
    *(void *)(a9 + 16) = v50;
    *(unsigned char *)(a9 + 24) = v49 & 1;
    *(_OWORD *)(a9 + 32) = v56;
    *(void *)(a9 + 48) = v48;
    *(void *)(a9 + 56) = v47;
  }
  return result;
}

unint64_t Array<A>.externalPlacement(of:avoiding:in:)@<X0>(unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)(a3 + 16) <= result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v6 = a3 + 72 * result;
  char v7 = *(unsigned char *)(v6 + 48);
  uint64_t v8 = *(void *)(v6 + 56);
  char v9 = *(unsigned char *)(v6 + 64);
  uint64_t v10 = *(void *)(v6 + 72);
  uint64_t v11 = *(void *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 88);
  uint64_t v13 = *(void *)(v6 + 96);
  uint64_t v48 = *(void *)(v6 + 40);
  char v49 = v7;
  uint64_t v50 = v8;
  char v51 = v9;
  *(void *)&long long v52 = v10;
  *((void *)&v52 + 1) = v11;
  *(void *)&long long v53 = v12;
  *((void *)&v53 + 1) = v13;
  CGRect.subscript.getter();
  double v39 = v14;
  CGRect.subscript.getter();
  double v37 = v16;
  double v38 = v15;
  _Placement.proposedSize.getter();
  CGPoint v19 = UnitPoint.in(_:)((CGSize)__PAIR128__(v18, v17));
  _Placement.anchorPosition.getter();
  double v21 = v20;
  double v23 = v22;
  uint64_t v40 = v48;
  char v41 = v7;
  uint64_t v42 = v8;
  char v43 = v9;
  uint64_t v44 = v10;
  uint64_t v45 = v11;
  uint64_t v46 = v12;
  uint64_t v47 = v13;
  _Placement.proposedSize.getter();
  if (a2) {
    double y = v19.y;
  }
  else {
    double y = v19.x;
  }
  double v27 = v39 + v37 - v38 + y;
  if (a2) {
    double v28 = v23;
  }
  else {
    double v28 = v21;
  }
  if (a2) {
    double v24 = v25;
  }
  double v29 = v28 + v24;
  if (v27 > v29) {
    double v30 = v27;
  }
  else {
    double v30 = v29;
  }
  long long v31 = (uint64_t (*)(uint64_t *, void))_Placement.anchorPosition.modify();
  *(double *)(v32 + 8 * (a2 & 1)) = v30;
  uint64_t result = v31(&v40, 0);
  char v33 = v49;
  uint64_t v34 = v50;
  char v35 = v51;
  *(void *)a4 = v48;
  *(unsigned char *)(a4 + 8) = v33;
  *(void *)(a4 + 16) = v34;
  *(unsigned char *)(a4 + 24) = v35;
  long long v36 = v53;
  *(_OWORD *)(a4 + 32) = v52;
  *(_OWORD *)(a4 + 48) = v36;
  return result;
}

uint64_t specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v29 = a3;
  uint64_t v32 = a1;
  uint64_t v12 = *(void *)(a4 + 112);
  if (*(void *)(v12 + 16))
  {
    double v14 = COERCE_DOUBLE(EstimationCache.average.getter(*(void *)(a4 + 112), *(void *)(a4 + 120)));
    if (v15) {
      double v14 = 0.0;
    }
    double v16 = v13 + v14;
  }
  else
  {
    double v16 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v47, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
  uint64_t result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v47, (uint64_t)v48, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
  if ((v48[24] & 1) != 0 || !*(void *)(v12 + 16)) {
    goto LABEL_26;
  }
  double v18 = *(double *)(a4 + 96);
  BOOL v19 = (*(void *)&v18 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v18 & 0x7FF0000000000000) != 0;
  if (v18 == INFINITY || v18 <= 0.0 || !v19) {
    goto LABEL_26;
  }
  BOOL v20 = (*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v16 & 0x7FF0000000000000) == 0;
  if (v20 || v16 <= 0.0 || v16 == INFINITY) {
    goto LABEL_26;
  }
  double v21 = v18 / v16;
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v22 = *(void *)(a4 + 56);
  if (__OFADD__(v22, (uint64_t)v21))
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v28[1] = v28;
  uint64_t v42 = v22;
  uint64_t v43 = v22;
  uint64_t v40 = 0;
  char v41 = 1;
  MEMORY[0x1F4188790](result);
  v45.origin.x = *(CGFloat *)(a2 + 104);
  uint64_t v23 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v34);
  v44[0] = 2;
  MEMORY[0x1F4188790](v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v34);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v41 & 1) != 0
    || (specialized LazyStack<>.boundingRect(at:subviews:context:cache:)(v40, a2, v29, a4, v30, v31, a7 & 0xFFFFFFFF00000001, (uint64_t)v44), uint64_t result = outlined init with take of CGRect?((uint64_t)v44, (uint64_t)&v45), (v46 & 1) != 0))
  {
LABEL_26:
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(unsigned char *)(a8 + 64) = 1;
    return result;
  }
  v33[0] = *(_OWORD *)(v32 + 8);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v32 + 17);
  UnitPoint.in(_:)(v45);
  uint64_t result = _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v24 = v35;
  uint64_t v25 = v36;
  uint64_t v26 = v37;
  *(void *)a8 = v34;
  *(void *)(a8 + 8) = v24;
  *(void *)(a8 + 16) = v25;
  *(void *)(a8 + 24) = v26;
  long long v27 = v39;
  *(_OWORD *)(a8 + 32) = v38;
  *(_OWORD *)(a8 + 48) = v27;
  *(unsigned char *)(a8 + 64) = 0;
  return result;
}

{
  uint64_t v12;
  double v13;
  double v14;
  char v15;
  double v16;
  uint64_t result;
  double v18;
  BOOL v19;
  BOOL v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  void v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  long long v38;
  long long v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void v44[5];
  __C::CGRect v45;
  char v46;
  unsigned char v47[32];
  unsigned char v48[40];

  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v29 = a3;
  uint64_t v32 = a1;
  uint64_t v12 = *(void *)(a4 + 112);
  if (*(void *)(v12 + 16))
  {
    double v14 = COERCE_DOUBLE(EstimationCache.average.getter(*(void *)(a4 + 112), *(void *)(a4 + 120)));
    if (v15) {
      double v14 = 0.0;
    }
    double v16 = v13 + v14;
  }
  else
  {
    double v16 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
  uint64_t result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v47, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
  if ((v48[24] & 1) != 0 || !*(void *)(v12 + 16)) {
    goto LABEL_26;
  }
  double v18 = *(double *)(a4 + 96);
  BOOL v19 = (*(void *)&v18 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v18 & 0x7FF0000000000000) != 0;
  if (v18 == INFINITY || v18 <= 0.0 || !v19) {
    goto LABEL_26;
  }
  BOOL v20 = (*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v16 & 0x7FF0000000000000) == 0;
  if (v20 || v16 <= 0.0 || v16 == INFINITY) {
    goto LABEL_26;
  }
  double v21 = v18 / v16;
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v22 = *(void *)(a4 + 56);
  if (__OFADD__(v22, (uint64_t)v21))
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v28[1] = v28;
  uint64_t v42 = v22;
  uint64_t v43 = v22;
  uint64_t v40 = 0;
  char v41 = 1;
  MEMORY[0x1F4188790](result);
  v45.origin.x = *(CGFloat *)(a2 + 104);
  uint64_t v23 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v34);
  v44[0] = 2;
  MEMORY[0x1F4188790](v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v34);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v41 & 1) != 0
    || (specialized LazyStack<>.boundingRect(at:subviews:context:cache:)(v40, a2, v29, a4, v30, v31, a7 & 0xFFFFFFFF00000001, (uint64_t)v44), uint64_t result = outlined init with take of CGRect?((uint64_t)v44, (uint64_t)&v45), (v46 & 1) != 0))
  {
LABEL_26:
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(unsigned char *)(a8 + 64) = 1;
    return result;
  }
  v33[0] = *(_OWORD *)(v32 + 8);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v32 + 17);
  UnitPoint.in(_:)(v45);
  uint64_t result = _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v24 = v35;
  uint64_t v25 = v36;
  uint64_t v26 = v37;
  *(void *)a8 = v34;
  *(void *)(a8 + 8) = v24;
  *(void *)(a8 + 16) = v25;
  *(void *)(a8 + 24) = v26;
  long long v27 = v39;
  *(_OWORD *)(a8 + 32) = v38;
  *(_OWORD *)(a8 + 48) = v27;
  *(unsigned char *)(a8 + 64) = 0;
  return result;
}

void type metadata accessor for MinorProperties<LazyHStackLayout>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for StackPlacement<LazyHGridLayout>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MinorProperties);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of StackPlacement<LazyHStackLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  type metadata accessor for StackPlacement<LazyHGridLayout>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DBB0;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 0);
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t (*a1)(_OWORD *, uint64_t, void))
{
  uint64_t v3 = (_OWORD *)v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = (void *)v1[4];
  long long v5 = v3[1];
  v7[0] = *v3;
  v7[1] = v5;
  v7[2] = v3[2];
  return a1(v7, v2, *v4);
}

{
  void *v1;
  uint64_t v2;
  _OWORD *v3;
  void *v4;
  long long v5;
  _OWORD v7[3];

  uint64_t v3 = (_OWORD *)v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = (void *)v1[4];
  long long v5 = v3[1];
  v7[0] = *v3;
  v7[1] = v5;
  v7[2] = v3[2];
  return a1(v7, v2, *v4);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v10 = static RepresentableContextValues.current;
  long long v11 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v5;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  uint64_t v23 = v5;
  *(void *)&xmmword_1EB2E8DA0 = v7;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v6;
  char v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  uint64_t v13 = v4;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  swift_retain();
  uint64_t v14 = v13;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  uint64_t v25 = v10;
  outlined copy of RepresentableContextValues?(v10, v9, v11, *((uint64_t *)&v11 + 1), v12);
  outlined consume of RepresentableContextValues?(v10, v9, v11, *((uint64_t *)&v11 + 1), v12);
  long long v15 = a2[1];
  long long v30 = *a2;
  long long v31 = v15;
  long long v32 = a2[2];
  uint64_t v33 = v30;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v31 + 8, (uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v32, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700]);
  v36[0] = *((void *)&v32 + 1);
  double v16 = *(void **)(a1 + 40);
  v27[0] = v23;
  v27[1] = v14;
  v27[2] = v7;
  v27[3] = v6;
  char v28 = v8;
  uint64_t v29 = v16;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v34);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v35);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v36);
  id v17 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  Switch.updateUIView(_:context:)(a3, v27);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);

  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
  swift_release();
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v34);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v35);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v36);
  long long v18 = static RepresentableContextValues.current;
  long long v19 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = __PAIR128__(v9, v25);
  xmmword_1EB2E8DA0 = v11;
  char v20 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  id v12;
  long long v13;
  long long v14;
  char v15;
  char v17;
  uint64_t v19;
  long long v22;
  long long v23;
  long long v24;
  unsigned char v25[16];
  void v26[2];

  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t v10 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v9 = static RepresentableContextValues.current;
  long long v11 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v5;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v7;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v6;
  id v17 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  long long v19 = v10;
  outlined copy of RepresentableContextValues?(v9, v10, v11, *((uint64_t *)&v11 + 1), v17);
  outlined consume of RepresentableContextValues?(v9, v10, v11, *((uint64_t *)&v11 + 1), v17);
  uint64_t v22 = *a2;
  uint64_t v23 = a2[1];
  uint64_t v24 = a2[2];
  v26[0] = v22;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v24, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v26);
  swift_retain();
  char v12 = (id)v23;
  outlined retain of String?((uint64_t)v25);
  specialized PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(a3, a1);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v26);

  swift_release();
  outlined release of String?((uint64_t)v25);
  uint64_t v13 = static RepresentableContextValues.current;
  uint64_t v14 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = __PAIR128__(v19, v9);
  xmmword_1EB2E8DA0 = v11;
  long long v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v17;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
}

uint64_t outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?(uint64_t a1)
{
  return a1;
}

void Switch.updateUIView(_:context:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  int v8 = *((unsigned __int8 *)a2 + 32);
  uint64_t v9 = (char *)a2[5];
  uint64_t v11 = *(void *)v2;
  uint64_t v10 = *(void *)(v2 + 8);
  int v12 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v54 = *(void *)v2;
  uint64_t v55 = v10;
  uint64_t v45 = v5;
  uint64_t v46 = v10;
  int v47 = v12;
  char v56 = v12;
  type metadata accessor for Binding<AnyListSelection>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v51);
  uint64_t v13 = v51;
  swift_retain();
  char v14 = Transaction.disablesAnimations.getter();
  swift_release();
  objc_msgSend(a1, sel_setOn_animated_, v13, (v14 & 1) == 0, v45);
  id v50 = a1;
  objc_msgSend(a1, sel_setPreferredStyle_, 2);
  uint64_t v15 = MEMORY[0x1E4F414E0];
  outlined init with take of NavigationListState.Selection?(v3 + 24, (uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  uint64_t v16 = outlined init with take of NavigationListState.Selection?((uint64_t)v58, (uint64_t)&v59, (unint64_t *)&lazy cache variable for type metadata for Color?, v15);
  id v17 = v59;
  long long v18 = v9;
  LODWORD(v48) = v8;
  if (v59)
  {
    if (v8)
    {
      char v49 = &v45;
      MEMORY[0x1F4188790](v16);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      long long v19 = v9;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);

      uint64_t v20 = v54;
      uint64_t v21 = v55;
    }
    else
    {
      uint64_t v54 = v6;
      uint64_t v55 = v7;
      swift_retain();
      swift_retain();
      uint64_t v21 = v7;
      uint64_t v20 = v6;
    }
    uint64_t v51 = v20;
    uint64_t v52 = v21;
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    self;
    id v17 = (uint64_t *)swift_dynamicCastObjCClassUnconditional();
  }
  id v22 = objc_msgSend(v50, sel_onTintColor);
  uint64_t v23 = v22;
  char v49 = v17;
  if (!v17)
  {
    uint64_t v24 = v18;
    if (!v22) {
      goto LABEL_14;
    }

    goto LABEL_13;
  }
  uint64_t v24 = v18;
  if (!v22) {
    goto LABEL_13;
  }
  type metadata accessor for UIColor();
  uint64_t v25 = v11;
  uint64_t v26 = v49;
  char v27 = static NSObject.== infix(_:_:)();

  uint64_t v11 = v25;
  uint64_t v24 = v18;

  if ((v27 & 1) == 0) {
LABEL_13:
  }
    objc_msgSend(v50, sel_setOnTintColor_, v49);
LABEL_14:
  uint64_t v28 = MEMORY[0x1E4F3F700];
  outlined init with take of NavigationListState.Selection?(v3 + 32, (uint64_t)v57, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700]);
  uint64_t v29 = outlined init with take of NavigationListState.Selection?((uint64_t)v57, (uint64_t)&v60, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, v28);
  if (v60)
  {
    uint64_t v53 = v60;
    if (v48)
    {
      MEMORY[0x1F4188790](v29);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      long long v30 = v24;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v57);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);

      uint64_t v32 = v54;
      uint64_t v31 = v55;
    }
    else
    {
      uint64_t v54 = v6;
      uint64_t v55 = v7;
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v57);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 0);
      uint64_t v31 = v7;
      uint64_t v32 = v6;
    }
    uint64_t v51 = v32;
    uint64_t v52 = v31;
    uint64_t v33 = ShapeStyle.fallbackColor(in:level:)();
    swift_release();
    uint64_t v34 = swift_release();
    if (!v33) {
      goto LABEL_28;
    }
    if (v48)
    {
      uint64_t v48 = v11;
      MEMORY[0x1F4188790](v34);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      unsigned __int8 v35 = v24;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, 1);

      uint64_t v11 = v48;
      uint64_t v6 = v54;
      uint64_t v7 = v55;
    }
    else
    {
      uint64_t v54 = v6;
      uint64_t v55 = v7;
      swift_retain();
      swift_retain();
    }
    uint64_t v51 = v6;
    uint64_t v52 = v7;
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v36 = (void *)Color.Resolved.kitColor.getter();
    self;
    uint64_t v37 = swift_dynamicCastObjCClassUnconditional();
    id v38 = v36;
    id v39 = objc_msgSend(v50, sel_thumbTintColor);
    if (v39)
    {
      uint64_t v40 = v39;
      type metadata accessor for UIColor();
      id v41 = v38;
      char v42 = static NSObject.== infix(_:_:)();

      if (v42) {
        goto LABEL_27;
      }
    }
    else
    {
    }
    objc_msgSend(v50, sel_setThumbTintColor_, v37);
LABEL_27:

LABEL_28:
    outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v57);
  }
  uint64_t v54 = v11;
  uint64_t v43 = &v24[OBJC_IVAR____TtC7SwiftUIP33_1246D37251EA3A918B392E2B95F8B7EF25PlatformSwitchCoordinator__isOn];
  uint64_t v44 = v46;
  *(void *)uint64_t v43 = v11;
  *((void *)v43 + 1) = v44;
  v43[16] = v47;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v54);
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v54);
  swift_retain();
  swift_release();
  swift_release();
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v54);
  swift_release();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyVStack<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SubmitScopeModifier@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v3;
  char v9 = *(unsigned char *)(v1 + 32);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(unsigned char *)(v5 + 48) = *(unsigned char *)(v1 + 32);
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in SubmitScopeModifier.body(content:);
  a1[2] = v5;
  return outlined retain of SubmitScopeModifier((uint64_t)v8);
}

uint64_t outlined retain of SubmitScopeModifier(uint64_t a1)
{
  return a1;
}

Swift::Void __swiftcall UpdateNavigationEventHandlers.updateValue()()
{
  type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of NavigationAuthority?(Value, (uint64_t)&v9);
  if (*((void *)&v9 + 1) == 1)
  {
    outlined destroy of NavigationAuthority?((uint64_t)&v9);
  }
  else
  {
    outlined init with take of NavigationAuthority((uint64_t)&v9, (uint64_t)v15);
    int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v2 != *(_DWORD *)(v0 + 28))
    {
      *(_DWORD *)(v0 + 28) = v2;
      *(void *)(v0 + 16) = 0xFFFFFFFFLL;
      *(unsigned char *)(v0 + 24) = 0;
    }
    if (UpdateCycleDetector.dispatch(label:isDebug:)())
    {
      long long v3 = (void *)AGGraphGetValue();
      uint64_t v4 = v3[1];
      uint64_t v5 = v3[2];
      uint64_t v6 = v3[3];
      *(void *)&long long v9 = *v3;
      *((void *)&v9 + 1) = v4;
      *(void *)&long long v10 = v5;
      *((void *)&v10 + 1) = v6;
      long long v11 = 0u;
      long long v12 = 0u;
      v13[0] = 21;
      memset(&v13[8], 0, 32);
      *(_OWORD *)&v13[40] = xmmword_18834C6D0;
      unsigned char v13[56] = 0;
      uint64_t v14 = 0;
      v7[6] = *(_OWORD *)&v13[32];
      v7[7] = *(_OWORD *)&v13[48];
      uint64_t v8 = 0;
      v7[4] = *(_OWORD *)v13;
      _OWORD v7[5] = *(_OWORD *)&v13[16];
      v7[0] = v9;
      v7[1] = v10;
      memset(&v7[2], 0, 32);
      outlined copy of AppIntentExecutor?(v9);
      outlined copy of AppIntentExecutor?(v5);
      NavigationAuthority.enqueueRequest(_:)(v7);
      outlined release of NavigationRequest((uint64_t)&v9);
    }
    outlined destroy of NavigationAuthority((uint64_t)v15);
  }
}

uint64_t initializeWithCopy for ContextMenuPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t View.navigationPresentationAdaptor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of TableColumnList(a1, (uint64_t)v6);
  MEMORY[0x18C113660](v6, a2, &type metadata for NavigationPresentationAdaptorModifier, a3);
  return outlined destroy of _PresentationTransitionOutputs((uint64_t)v6);
}

uint64_t outlined destroy of _PresentationTransitionOutputs(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t partial apply for closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  return closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)();
}

uint64_t closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  return swift_release();
}

uint64_t closure #1 in ViewRendererHost.platformItemList.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  GraphHost.instantiateIfNeeded()();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  if (ViewGraph.subscript.getter()) {
    uint64_t result = PlatformItemListViewGraph.readAndUpdate(graph:)(a1);
  }
  else {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  *a2 = result;
  return result;
}

uint64_t assignWithCopy for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  uint64_t v12 = *(void *)(v9 + 8);
  char v13 = *(unsigned char *)(v9 + 16);
  *(void *)(v9 + 8) = v11;
  *(unsigned char *)(v9 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24);
  LOBYTE(v5) = *(unsigned char *)(v10 + 33);
  unsigned __int8 v15 = *(unsigned char *)(v10 + 32);
  outlined copy of Environment<CGFloat?>.Content(v14, v15, v5);
  uint64_t v16 = *(void *)(v9 + 24);
  char v17 = *(unsigned char *)(v9 + 33);
  *(void *)(v9 + 24) = v14;
  uint64_t v18 = *(unsigned __int8 *)(v9 + 32);
  *(unsigned char *)(v9 + 32) = v15;
  *(unsigned char *)(v9 + 33) = v5;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  unint64_t v19 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v5) = *(unsigned char *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v20, v5);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v22, v23);
  uint64_t v24 = *(void *)(v20 + 16);
  uint64_t v25 = *(void *)(v20 + 24);
  uint64_t v26 = *(void *)(v20 + 32);
  LOBYTE(v9) = *(unsigned char *)(v20 + 41);
  LOBYTE(v10) = *(unsigned char *)(v20 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v24, v25, v26, v10, v9);
  uint64_t v27 = *(void *)(v19 + 16);
  uint64_t v28 = *(void *)(v19 + 24);
  uint64_t v29 = *(void *)(v19 + 32);
  char v30 = *(unsigned char *)(v19 + 41);
  *(void *)(v19 + 16) = v24;
  *(void *)(v19 + 24) = v25;
  *(void *)(v19 + 32) = v26;
  uint64_t v31 = *(unsigned __int8 *)(v19 + 40);
  *(unsigned char *)(v19 + 40) = v10;
  *(unsigned char *)(v19 + 41) = v9;
  outlined consume of Environment<KeyboardShortcut?>.Content(v27, v28, v29, v31, v30);
  uint64_t v32 = *(void *)(v20 + 48);
  LOBYTE(v25) = *(unsigned char *)(v20 + 56);
  outlined copy of Environment<Bool>.Content(v32, v25);
  uint64_t v33 = *(void *)(v19 + 48);
  char v34 = *(unsigned char *)(v19 + 56);
  *(void *)(v19 + 48) = v32;
  *(unsigned char *)(v19 + 56) = v25;
  outlined consume of Environment<Bool>.Content(v33, v34);
  return a1;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ListStyleContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified()
{
  unint64_t result = lazy protocol witness table cache variable for type TabPlatformIdentified and conformance TabPlatformIdentified;
  if (!lazy protocol witness table cache variable for type TabPlatformIdentified and conformance TabPlatformIdentified)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlatformIdentified and conformance TabPlatformIdentified);
  }
  return result;
}

uint64_t View.tabItem<A>(_:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v35 = a2;
  char v34 = a1;
  uint64_t v38 = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v37 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v9;
  v30[2] = v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  uint64_t v33 = v11;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  v50[12] = a5;
  v50[13] = &protocol witness table for UpdateDefaultTabFill;
  v30[1] = a5;
  uint64_t WitnessTable = swift_getWitnessTable();
  v50[10] = WitnessTable;
  v50[11] = &protocol witness table for ViewInputFlagModifier<A>;
  v50[8] = swift_getWitnessTable();
  v50[9] = &protocol witness table for AccessibilityAttachmentModifier;
  v50[6] = swift_getWitnessTable();
  v50[7] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  uint64_t v14 = swift_getWitnessTable();
  v50[0] = &type metadata for LabelPlatformItemsStrategy;
  v50[1] = v12;
  v50[2] = &type metadata for TabItem.TraitKey;
  v50[3] = &protocol witness table for LabelPlatformItemsStrategy;
  v50[4] = v14;
  v50[5] = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v30 - v17;
  uint64_t v31 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  unint64_t v20 = (char *)v30 - v19;
  uint64_t v40 = a3;
  uint64_t v41 = v10;
  uint64_t v42 = v36;
  uint64_t v43 = a5;
  uint64_t v21 = v34;
  uint64_t v44 = v34;
  uint64_t v45 = v35;
  uint64_t v29 = WitnessTable;
  uint64_t v22 = v36;
  View.platformItemLabelTrait<A, B>(for:_:)((uint64_t)partial apply for closure #1 in View.tabItem<A>(_:), (uint64_t)v39, a3, (uint64_t)&type metadata for TabItem.TraitKey, v33, v36, (uint64_t)&protocol witness table for TabItem.TraitKey, (uint64_t)v18, v29);
  uint64_t v48 = v22;
  char v49 = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  uint64_t v23 = swift_getWitnessTable();
  v50[0] = 0;
  MEMORY[0x18C113660](v50, v15, &type metadata for TabPlatformIdentified, v23);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  v21();
  v50[0] = AnyView.init<A>(_:)();
  unint64_t v25 = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  uint64_t v46 = v23;
  unint64_t v47 = v25;
  uint64_t v26 = v31;
  uint64_t v27 = swift_getWitnessTable();
  View.containerValue<A>(_:_:)(KeyPath, (uint64_t)v50, v26, v27);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v20, v26);
}

void type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in CollectionViewListDataSource<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type [SectionAccumulator.Item] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SectionAccumulator.Item] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SectionAccumulator.Item] and conformance [A])
  {
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_0(255, &lazy cache variable for type metadata for [SectionAccumulator.Item], MEMORY[0x1E4F402E0], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SectionAccumulator.Item] and conformance [A]);
  }
  return result;
}

uint64_t initializeWithCopy for RootEnvironmentModifier.Child(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  long long v4 = a2 + 1;
  *(void *)a1 = v5;
  uint64_t v6 = a1 + 8;
  if (*((unsigned char *)a2 + 32) == 3)
  {
    long long v7 = *((_OWORD *)v4 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v7;
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(unsigned char *)(v6 + 48) = *((unsigned char *)v4 + 48);
  }
  else
  {
    swift_weakCopyInit();
    swift_weakCopyInit();
    swift_weakCopyInit();
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    int v8 = *((unsigned __int8 *)a2 + 56);
    if (v8 == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    }
    else
    {
      char v9 = v8 & 1;
      uint64_t v11 = a2[5];
      uint64_t v10 = a2[6];
      outlined copy of SceneID(v11, v10, v8 & 1);
      *(void *)(a1 + 40) = v11;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v9;
    }
  }
  return a1;
}

double static AccessibilityViewModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v20)(long long *__return_ptr, long long *, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  double result;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t WitnessTable;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  void *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  long long v71;
  int v72;
  long long v73;
  uint64_t v74;
  int v75;
  unsigned char v76[28];
  unsigned char v77[48];
  unsigned char v78[32];
  int v79;
  long long v80;
  unsigned char v81[32];
  unsigned char v82[32];
  int v83;
  unsigned char v84[48];
  long long v85;
  long long v86;
  int v87;
  uint64_t v88;

  long long v69 = a3;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  long long v12 = a2[3];
  *(_OWORD *)&v84[32] = a2[2];
  uint64_t v85 = v12;
  uint64_t v86 = a2[4];
  char v87 = *((_DWORD *)a2 + 20);
  long long v13 = *a2;
  long long v14 = a2[1];
  uint64_t v75 = DWORD2(v85);
  long long v74 = v85;
  int v15 = *a1;
  *(_OWORD *)long long v84 = v13;
  *(_OWORD *)&v84[16] = v14;
  *(void *)&uint64_t v80 = v85;
  DWORD2(v80) = DWORD2(v85);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
    *(_OWORD *)&v81[16] = *(_OWORD *)&v84[32];
    *(_OWORD *)uint64_t v82 = v85;
    *(_OWORD *)&v82[16] = v86;
    long long v83 = v87;
    uint64_t v80 = *(_OWORD *)v84;
    *(_OWORD *)char v81 = *(_OWORD *)&v84[16];
    outlined retain of _ViewInputs((uint64_t)v84);
    long long v68 = v7;
    static AccessibilityViewModifier.configureInputsForGeometry(_:)((uint64_t)&v80, a5, a6);
    long long v61 = *(void *)v84;
    *(_OWORD *)long long v76 = *(_OWORD *)&v84[8];
    *(_OWORD *)&v76[12] = *(_OWORD *)&v84[20];
    *(void *)&uint64_t v60 = *(void *)&v84[40];
    uint64_t v62 = *(_DWORD *)&v84[36];
    if ((v84[36] & 0x10) != 0)
    {
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    long long v67 = a5;
    long long v65 = a7;
    char v64 = v16;
    if ((v16 & 2) != 0
      && (*(_OWORD *)&v77[32] = *(_OWORD *)&v84[32],
          *(_OWORD *)uint64_t v78 = v85,
          *(_OWORD *)&v78[16] = v86,
          long long v79 = v87,
          *(_OWORD *)long long v77 = *(_OWORD *)v84,
          *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16],
          (_ViewInputs.isScrapeable.getter() & 1) != 0))
    {
      uint64_t v17 = a4;
      ScrapeableID.init()();
      uint64_t v63 = *(_DWORD *)v77;
      _ViewInputs.scrapeableParentID.setter();
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v63 = 0;
    }
    LODWORD(v71) = v15;
    long long v66 = v15;
    *(void *)long long v77 = v80;
    *(_DWORD *)&v77[8] = DWORD2(v80);
    *(_OWORD *)&v77[24] = *(_OWORD *)&v81[8];
    *(void *)&v77[16] = *(void *)v81;
    *(void *)&v77[40] = *(void *)&v81[24];
    *(void *)uint64_t v78 = *(void *)v82;
    *(_OWORD *)&v78[8] = *(_OWORD *)&v82[8];
    *(void *)&v78[24] = *(void *)&v82[24];
    long long v79 = v83;
    uint64_t v19 = a6;
    unint64_t v20 = *(void (**)(long long *__return_ptr, long long *, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = v17;
    uint64_t v22 = v67;
    v20(&v73, &v71, v77, v69, v21, v67, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v62 & 0x10) != 0)
    {
      uint64_t v59 = a6;
      *(void *)long long v77 = v74;
      *(_DWORD *)&v77[8] = v75;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        *(_OWORD *)long long v77 = v73;
        uint64_t v23 = _ViewOutputs.subscript.getter();
        uint64_t v24 = *MEMORY[0x1E4F4E7A0];
        if ((v23 & 0x100000000) != 0) {
          unint64_t v25 = *MEMORY[0x1E4F4E7A0];
        }
        else {
          unint64_t v25 = v23;
        }
        LODWORD(v69) = v25;
      }
      else
      {
        uint64_t v24 = *MEMORY[0x1E4F4E7A0];
        LODWORD(v69) = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      int v58 = *(_DWORD *)v77;
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      LODWORD(v71) = v58;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs((uint64_t)v84);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs((uint64_t)v84);
      uint64_t v37 = v72;
      *(void *)long long v77 = v61;
      *(_OWORD *)&v77[8] = *(_OWORD *)v76;
      *(_OWORD *)&v77[20] = *(_OWORD *)&v76[12];
      *(_DWORD *)&v77[36] = v62;
      *(void *)&v77[40] = v60;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs((uint64_t)v84);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs((uint64_t)v84);
      uint64_t v62 = v70;
      *(_DWORD *)long long v77 = v66;
      type metadata accessor for _GraphValue();
      LODWORD(v61) = v37 & 1;
      uint64_t v60 = v71;
      uint64_t v57 = _GraphValue.value.getter();
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      char v56 = _ViewInputs.animatedSize()();
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      uint64_t v38 = _ViewInputs.animatedPosition()();
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      id v39 = _ViewInputs.containerPosition.getter();
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      uint64_t v40 = _ViewInputs.environment.getter();
      uint64_t v41 = v73;
      uint64_t v43 = DWORD2(v73);
      uint64_t v42 = HIDWORD(v73);
      *(_OWORD *)long long v77 = v73;
      uint64_t v44 = _ViewOutputs.subscript.getter();
      *(void *)long long v77 = v41;
      if ((v44 & 0x100000000) != 0) {
        uint64_t v45 = v24;
      }
      else {
        uint64_t v45 = v44;
      }
      *(_DWORD *)&v77[8] = v43;
      *(_DWORD *)&v77[12] = v42;
      uint64_t v46 = _ViewOutputs.subscript.getter();
      *(_DWORD *)long long v77 = v58;
      v77[4] = v61;
      if ((v46 & 0x100000000) != 0) {
        unint64_t v47 = v24;
      }
      else {
        unint64_t v47 = v46;
      }
      *(_OWORD *)&v77[8] = v60;
      v77[24] = v62;
      *(_DWORD *)&v77[28] = v57;
      *(_DWORD *)&v77[32] = v56;
      *(_DWORD *)&v77[36] = v38;
      *(_DWORD *)&v77[40] = v39;
      uint64_t v22 = v67;
      *(_DWORD *)&v77[44] = v40;
      *(_DWORD *)uint64_t v78 = v45;
      *(_DWORD *)&v78[4] = v69;
      *(_DWORD *)&v78[8] = v47;
      MEMORY[0x1F4188790](v46);
      uint64_t v19 = v59;
      uint64_t v54 = type metadata accessor for DisplayListTransform();
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E4F3F4D0], MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v77, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)&v53, v54, MEMORY[0x1E4FBC248], v48, MEMORY[0x1E4FBC278], v49);
      v77[0] = 0;
      _ViewOutputs.subscript.setter();
    }
    long long v72 = v66;
    *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
    *(_OWORD *)uint64_t v78 = v85;
    *(_OWORD *)&v78[16] = v86;
    long long v79 = v87;
    *(_OWORD *)long long v77 = *(_OWORD *)v84;
    *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
    long long v71 = v73;
    long long v70 = v63;
    id v50 = static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)((uint64_t)&v72, (uint64_t *)v77, (uint64_t)&v71, &v70, v22, v19);
    v77[0] = 0;
    uint64_t v51 = v50;
    _ViewOutputs.subscript.setter();
    uint64_t v52 = v65;
    if (v64)
    {
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      long long v71 = v73;
      LOBYTE(v72) = 1;
      static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v51, 0x100000000, (uint64_t)v77);
      v77[0] = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *uint64_t v52 = v73;
    unint64_t result = *((double *)&v73 + 1);
    v52[1] = *((void *)&v73 + 1);
    return result;
  }
  *(void *)&uint64_t v80 = v74;
  DWORD2(v80) = v75;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(void *)&uint64_t v80 = v74, DWORD2(v80) = v75, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    long long v68 = a4;
    outlined retain of _ViewInputs((uint64_t)v84);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v84);
    char v18 = v80;
    *(_OWORD *)&v81[16] = *(_OWORD *)&v84[32];
    *(_OWORD *)uint64_t v82 = v85;
    *(_OWORD *)&v82[16] = v86;
    long long v83 = v87;
    uint64_t v80 = *(_OWORD *)v84;
    *(_OWORD *)char v81 = *(_OWORD *)&v84[16];
    if ((v18 & 0x10) != 0)
    {
      outlined retain of _ViewInputs((uint64_t)v84);
      PropertyList.subscript.getter();
      *(_DWORD *)v77 &= ~0x10u;
      PropertyList.subscript.setter();
      uint64_t v26 = 1;
      a4 = v68;
      goto LABEL_20;
    }
    a4 = v68;
  }
  else
  {
    *(_OWORD *)&v81[16] = *(_OWORD *)&v84[32];
    *(_OWORD *)uint64_t v82 = v85;
    *(_OWORD *)&v82[16] = v86;
    long long v83 = v87;
    uint64_t v80 = *(_OWORD *)v84;
    *(_OWORD *)char v81 = *(_OWORD *)&v84[16];
  }
  outlined retain of _ViewInputs((uint64_t)v84);
  uint64_t v26 = 0;
LABEL_20:
  LODWORD(v73) = v15;
  *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
  *(_OWORD *)uint64_t v78 = v85;
  *(_OWORD *)&v78[16] = v86;
  long long v79 = v87;
  *(_OWORD *)long long v77 = *(_OWORD *)v84;
  *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
  (*(void (**)(unsigned char *__return_ptr, long long *, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))(v76, &v73, v77, v69, a4, a5, a6);
  if (v26)
  {
    *(_OWORD *)long long v77 = *(_OWORD *)v76;
    uint64_t v27 = _ViewOutputs.subscript.getter();
    if ((v27 & 0x100000000) != 0) {
      uint64_t v28 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      uint64_t v28 = v27;
    }
    *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
    *(_OWORD *)uint64_t v78 = v85;
    *(_OWORD *)&v78[16] = v86;
    long long v79 = v87;
    *(_OWORD *)long long v77 = *(_OWORD *)v84;
    *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
    uint64_t v29 = _ViewInputs.environment.getter();
    MEMORY[0x1F4188790](v29);
    uint64_t v54 = __PAIR64__(v30, v28);
    *(void *)long long v77 = v74;
    *(_DWORD *)&v77[8] = v75;
    MEMORY[0x1F4188790](v30);
    outlined retain of [Text.Modifier]((uint64_t)&v74);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(void *)long long v77 = v74;
  *(_DWORD *)&v77[8] = v75;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs((uint64_t)v84);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v84);
    if ((v77[0] & 0x80) != 0)
    {
      *(_OWORD *)long long v77 = *(_OWORD *)v76;
      uint64_t v31 = _ViewOutputs.subscript.getter();
      if ((v31 & 0x100000000) != 0) {
        uint64_t v32 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        uint64_t v32 = v31;
      }
      *(_OWORD *)&v77[32] = *(_OWORD *)&v84[32];
      *(_OWORD *)uint64_t v78 = v85;
      *(_OWORD *)&v78[16] = v86;
      long long v79 = v87;
      *(_OWORD *)long long v77 = *(_OWORD *)v84;
      *(_OWORD *)&v77[16] = *(_OWORD *)&v84[16];
      uint64_t v33 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      char v34 = PropertyList.Tracker.__allocating_init()();
      *(_DWORD *)long long v77 = v33;
      *(void *)&v77[8] = v34;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      uint64_t v35 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_DWORD *)long long v77 = v32;
      *(_DWORD *)&v77[4] = v35;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      *(_DWORD *)long long v77 = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v76, (uint64_t)v84);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a7 = *(void *)v76;
  unint64_t result = *(double *)&v76[8];
  a7[1] = *(void *)&v76[8];
  return result;
}

uint64_t static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a6;
  uint64_t v41 = a5;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  int v55 = *((_DWORD *)a2 + 2);
  unint64_t v7 = a2[2];
  uint64_t v56 = v6;
  unint64_t v57 = v7;
  int v48 = *((_DWORD *)a2 + 6);
  int v47 = *((_DWORD *)a2 + 7);
  int v8 = *((_DWORD *)a2 + 9);
  int v53 = *((_DWORD *)a2 + 8);
  uint64_t v49 = a2[5];
  unint64_t v9 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  int v46 = *((_DWORD *)a2 + 15);
  unsigned int v11 = *((_DWORD *)a2 + 16);
  unsigned int v45 = *((_DWORD *)a2 + 17);
  int v12 = *((_DWORD *)a2 + 18);
  int v13 = *((_DWORD *)a2 + 19);
  int v14 = *((_DWORD *)a2 + 20);
  unint64_t v40 = *(void *)a3;
  int v39 = *(_DWORD *)(a3 + 8);
  int v38 = *(_DWORD *)(a3 + 12);
  int v37 = *a4;
  unint64_t v15 = v9;
  unint64_t v60 = v9;
  int v16 = v10;
  int v61 = v10;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    unint64_t v60 = v40;
    int v61 = v39;
    int v62 = v38;
    uint64_t v17 = _ViewOutputs.subscript.getter();
    int v18 = *MEMORY[0x1E4F4E7A0];
    if ((v17 & 0x100000000) == 0) {
      int v18 = v17;
    }
  }
  else
  {
    int v18 = *MEMORY[0x1E4F4E7A0];
  }
  int v35 = v18;
  type metadata accessor for _GraphValue();
  unsigned int v34 = _GraphValue.value.getter();
  int v54 = v8;
  unint64_t v42 = v15;
  int v44 = v16;
  unsigned int v43 = v11;
  int v51 = v13;
  int v52 = v12;
  int v50 = v14;
  unsigned int v33 = _ViewInputs.position.getter();
  int v32 = _ViewInputs.size.getter();
  int v31 = _ViewInputs.transform.getter();
  unsigned int v30 = _ViewInputs.environment.getter();
  unsigned int v29 = _ViewInputs.viewPhase.getter();
  unint64_t v63 = v57;
  int v64 = v48;
  int v65 = v47;
  int v66 = v53;
  int v67 = v8;
  *(void *)&long long v68 = v49;
  *((void *)&v68 + 1) = v15;
  int v69 = v16;
  int v70 = v46;
  unint64_t v71 = __PAIR64__(v45, v11);
  int v72 = v12;
  int v73 = v13;
  int v74 = v14;
  _ViewInputs.scrapeableParentID.getter();
  unint64_t v60 = v40;
  int v61 = v39;
  int v62 = v38;
  uint64_t v19 = _ViewOutputs.subscript.getter();
  if ((v19 & 0x100000000) != 0) {
    int v20 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    int v20 = v19;
  }
  _GraphInputs.interfaceIdiom.getter();
  unint64_t v60 = __PAIR64__(v33, v34);
  int v61 = v32;
  int v62 = v31;
  unint64_t v63 = __PAIR64__(v29, v30);
  int v21 = v37;
  int v64 = v37;
  int v65 = v59;
  int v66 = v35;
  int v67 = v20;
  long long v68 = v58;
  LOBYTE(v69) = (v54 & 0x20) == 0;
  unint64_t v71 = 0;
  uint64_t v22 = swift_unknownObjectWeakInit();
  int v74 = 0;
  MEMORY[0x1F4188790](v22);
  uint64_t v23 = type metadata accessor for PropertiesTransform();
  void v28[2] = v23;
  _OWORD v28[3] = swift_getWitnessTable();
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for Attribute<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v60, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v28, v23, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
  (*(void (**)(unint64_t *, uint64_t))(*(void *)(v23 - 8) + 8))(&v60, v23);
  uint64_t v26 = v58;
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (v21)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v26;
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCyyXlGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCyyXlGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for static AccessibilityViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:) in conformance AccessibilityTraitsModifier<A>.ChildModifier(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(a1, &v8);
}

uint64_t static AccessibilityViewModifier.configureInputsForGeometry(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 36);
  if ((v3 & 0x20) != 0)
  {
    uint64_t v4 = result;
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    if (result)
    {
      unint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if (result)
      {
        if ((v3 & 0x40) != 0)
        {
          v3 &= ~0x40u;
          *(_DWORD *)(v4 + 36) = v3;
        }
        if ((v3 & 0x80) != 0) {
          return PreferenceKeys.add(_:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in ViewThatFits.init(in:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void (*)(void))MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v13 - v9;
  v8();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  long long v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a3);
}

uint64_t type metadata completion function for AccessibilityProxyModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for _NavigationSplitReader.DerivedAttributes(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  uint64_t v6 = a1 + 16;
  if (*((void *)a2 + 3) == 1)
  {
    *(_OWORD *)uint64_t v6 = *v4;
    *(void *)(v6 + 16) = *((void *)v4 + 2);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v7 = *((void *)a2 + 3);
    uint64_t v8 = *((void *)a2 + 4);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance RemoteSheetContainerViewGraphFeature()
{
  return PreferenceKeys.add(_:)();
}

uint64_t specialized LazySubviewPlacements.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        uint64_t result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    long long v3 = *(_OWORD *)(v0 + 248);
    long long v4 = *(_OWORD *)(v0 + 200);
    v151[2] = *(_OWORD *)(v0 + 184);
    v151[3] = v4;
    long long v5 = *(_OWORD *)(v0 + 232);
    v151[4] = *(_OWORD *)(v0 + 216);
    v151[5] = v5;
    long long v6 = *(_OWORD *)(v0 + 168);
    v151[0] = *(_OWORD *)(v0 + 152);
    v151[1] = v6;
    long long v7 = *(_OWORD *)(v0 + 264);
    long long v8 = *(_OWORD *)(v0 + 280);
    v151[6] = v3;
    v151[7] = v7;
    uint64_t v9 = *(void *)(v0 + 128);
    int v10 = *(_DWORD *)(v0 + 144);
    v152[0] = v8;
    *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)Value;
    int v13 = *(_DWORD *)(*(void *)Value + 40);
    uint64_t v14 = *(void *)(*(void *)Value + 48);
    int v15 = *(_DWORD *)(*(void *)Value + 112);
    *(void *)&__dst[0] = *(void *)(*(void *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(void *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((void *)&__dst[4] + 1) = *(void *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    int v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    int v117 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v151);
      uint64_t v9 = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 128) = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(unsigned char *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(unsigned char *)(v0 + 304) = 1;
    }
    unsigned int v19 = *(_DWORD *)(v0 + 8);
    unsigned int v18 = *(_DWORD *)(v0 + 12);
    uint64_t v20 = AGGraphGetValue();
    char v116 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
    }
    else
    {
      int v107 = *MEMORY[0x1E4F4E7A0];
      unsigned int v108 = v18;
      int v114 = v10;
      uint64_t v109 = v9;
      uint64_t v23 = *(void *)(v20 + 24);
      uint64_t v22 = *(void *)(v20 + 32);
      long long recta = *(_OWORD *)(v20 + 8);
      uint64_t v24 = *(void *)v20;
      unsigned int v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(void *)&v125[0] = *(void *)&__dst[0];
      *((void *)&v125[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v142[0] = *(_OWORD *)AGGraphGetValue();
      uint64_t v26 = (long long *)AGGraphGetValue();
      long long v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(void *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = recta;
      *((void *)&__dst[1] + 1) = v23;
      *(void *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v133) = *(unsigned char *)AGGraphGetValue();
      LODWORD(v126) = *(_DWORD *)(AGGraphGetValue() + 20);
      CGFloat v115 = *(double *)(v0 + 96);
      CGFloat rect = *(double *)(v0 + 112);
      CGFloat v119 = *(double *)(v0 + 104);
      CGFloat v120 = *(double *)(v0 + 120);
      AGGraphGetValue();
      char v28 = *(unsigned char *)AGGraphGetValue();
      swift_retain();
      _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v125, __src, (uint64_t)__dst, (char *)&v133, (int *)&v126, v28, (uint64_t)v140);
      v125[10] = *(long long *)((char *)&v140[13] + 8);
      v125[11] = *(long long *)((char *)&v140[14] + 8);
      v125[12] = *(long long *)((char *)&v140[15] + 8);
      v125[13] = *(long long *)((char *)&v140[16] + 8);
      v125[6] = *(long long *)((char *)&v140[9] + 8);
      v125[7] = *(long long *)((char *)&v140[10] + 8);
      v125[8] = *(long long *)((char *)&v140[11] + 8);
      v125[9] = *(long long *)((char *)&v140[12] + 8);
      v125[2] = *(long long *)((char *)&v140[5] + 8);
      v125[3] = *(long long *)((char *)&v140[6] + 8);
      v125[4] = *(long long *)((char *)&v140[7] + 8);
      v125[5] = *(long long *)((char *)&v140[8] + 8);
      v125[0] = *(long long *)((char *)&v140[3] + 8);
      v125[1] = *(long long *)((char *)&v140[4] + 8);
      unint64_t v29 = *((void *)&v140[17] + 1);
      unint64_t v30 = *(void *)&v140[18];
      char v31 = BYTE8(v140[18]);
      __dst[4] = *(long long *)((char *)&v140[14] + 8);
      __dst[5] = *(long long *)((char *)&v140[15] + 8);
      __dst[6] = *(long long *)((char *)&v140[16] + 8);
      __dst[0] = *(long long *)((char *)&v140[10] + 8);
      __dst[1] = *(long long *)((char *)&v140[11] + 8);
      __dst[3] = *(long long *)((char *)&v140[13] + 8);
      __dst[2] = *(long long *)((char *)&v140[12] + 8);
      ScrollGeometry.visibleRect.getter();
      CGFloat v33 = v32;
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      v124.origin.CGFloat x = v32;
      v124.origin.CGFloat y = v34;
      v124.size.double width = v36;
      v124.size.double height = v38;
      long long v130 = *(long long *)((char *)&v140[7] + 8);
      long long v131 = *(long long *)((char *)&v140[8] + 8);
      long long v132 = *(long long *)((char *)&v140[9] + 8);
      long long v126 = *(long long *)((char *)&v140[3] + 8);
      long long v127 = *(long long *)((char *)&v140[4] + 8);
      long long v128 = *(long long *)((char *)&v140[5] + 8);
      long long v129 = *(long long *)((char *)&v140[6] + 8);
      __dst[4] = *(long long *)((char *)&v140[7] + 8);
      __dst[5] = *(long long *)((char *)&v140[8] + 8);
      __dst[6] = *(long long *)((char *)&v140[9] + 8);
      __dst[0] = *(long long *)((char *)&v140[3] + 8);
      __dst[1] = *(long long *)((char *)&v140[4] + 8);
      __dst[3] = *(long long *)((char *)&v140[6] + 8);
      __dst[2] = *(long long *)((char *)&v140[5] + 8);
      if (v31) {
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      }
      unint64_t v105 = v30;
      unint64_t v106 = v29;
      ScrollGeometry.visibleRect.getter();
      CGFloat v112 = v41;
      CGFloat v113 = v40;
      CGFloat v110 = v43;
      CGFloat v111 = v42;
      __dst[4] = *(long long *)((char *)&v140[7] + 8);
      __dst[5] = *(long long *)((char *)&v140[8] + 8);
      __dst[6] = *(long long *)((char *)&v140[9] + 8);
      __dst[0] = *(long long *)((char *)&v140[3] + 8);
      __dst[1] = *(long long *)((char *)&v140[4] + 8);
      __dst[3] = *(long long *)((char *)&v140[6] + 8);
      __dst[2] = *(long long *)((char *)&v140[5] + 8);
      ScrollGeometry.visibleRect.getter();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      Outputuint64_t Value = AGGraphGetOutputValue();
      if (v114 != v117 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(void *)(v1 + 192) = v45;
        *(void *)(v1 + 200) = v47;
        *(void *)(v1 + 208) = v49;
        *(void *)(v1 + 216) = v51;
      }
      *(unsigned char *)(*(void *)AGGraphGetValue() + 216) = 0;
      if (v116)
      {
        *(void *)(v1 + 312) = 0;
        *(void *)(v1 + 320) = 0;
        *(unsigned char *)(v1 + 328) = 1;
      }
      v168.origin.CGFloat x = 0.0;
      v168.origin.CGFloat y = 0.0;
      v168.size.double width = 0.0;
      v168.size.double height = 0.0;
      v155.origin.CGFloat y = v112;
      v155.origin.CGFloat x = v113;
      v155.size.double height = v110;
      v155.size.double width = v111;
      BOOL v53 = CGRectEqualToRect(v155, v168);
      v156.origin.CGFloat x = v115;
      v156.size.double height = v120;
      v156.origin.CGFloat y = v119;
      v156.size.double width = rect;
      if (CGRectIsNull(v156) || (*(void *)&__src[0] = __PAIR64__(v108, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        int v54 = 0;
        int v55 = (_OWORD *)(v1 + 152);
        if (v53) {
          goto LABEL_16;
        }
      }
      else
      {
        __dst[4] = *(long long *)((char *)&v140[7] + 8);
        __dst[5] = *(long long *)((char *)&v140[8] + 8);
        __dst[6] = *(long long *)((char *)&v140[9] + 8);
        __dst[0] = *(long long *)((char *)&v140[3] + 8);
        __dst[1] = *(long long *)((char *)&v140[4] + 8);
        __dst[3] = *(long long *)((char *)&v140[6] + 8);
        __dst[2] = *(long long *)((char *)&v140[5] + 8);
        if (v31) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v105, v106));
        }
        CGSize v57 = (CGSize)v140[2];
        ScrollGeometry.visibleRect.getter();
        v169.origin.CGFloat x = 0.0;
        v169.origin.CGFloat y = 0.0;
        v169.CGSize size = v57;
        CGRect v158 = CGRectIntersection(v157, v169);
        CGFloat x = v158.origin.x;
        CGFloat y = v158.origin.y;
        double width = v158.size.width;
        double height = v158.size.height;
        uint64_t v56 = v109;
        int v55 = (_OWORD *)(v1 + 152);
        if (CGRectIsEmpty(v158))
        {
          if (v53)
          {
            int v54 = 0;
            goto LABEL_43;
          }
          int v54 = 1;
        }
        else
        {
          v159.origin.CGFloat x = v115;
          v159.origin.CGFloat y = v119;
          v159.size.double height = v120;
          v159.size.double width = rect;
          v170.origin.CGFloat x = x;
          v170.origin.CGFloat y = y;
          v170.size.double width = width;
          v170.size.double height = height;
          if (CGRectContainsRect(v159, v170))
          {
            v160.origin.CGFloat x = x;
            v160.origin.CGFloat y = y;
            v160.size.double width = width;
            v160.size.double height = height;
            double MinX = CGRectGetMinX(v160);
            v161.origin.CGFloat x = v115;
            v161.origin.CGFloat y = v119;
            v161.size.double width = rect;
            v161.size.double height = v120;
            if (MinX - CGRectGetMinX(v161) < width / 3.0)
            {
              uint64_t v63 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v63 + 216) & 2) == 0) {
                *(unsigned char *)(*(void *)v63 + 216) |= 2u;
              }
            }
            double v118 = height / 3.0;
            v162.origin.CGFloat x = v115;
            v162.origin.CGFloat y = v119;
            v162.size.double width = rect;
            v162.size.double height = v120;
            double MaxX = CGRectGetMaxX(v162);
            v163.origin.CGFloat x = x;
            v163.origin.CGFloat y = y;
            v163.size.double width = width;
            v163.size.double height = height;
            if (MaxX - CGRectGetMaxX(v163) < width / 3.0)
            {
              uint64_t v65 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v65 + 216) & 8) == 0) {
                *(unsigned char *)(*(void *)v65 + 216) |= 8u;
              }
            }
            v164.origin.CGFloat x = x;
            v164.origin.CGFloat y = y;
            v164.size.double width = width;
            v164.size.double height = height;
            double MinY = CGRectGetMinY(v164);
            v165.origin.CGFloat x = v115;
            v165.size.double height = v120;
            v165.origin.CGFloat y = v119;
            v165.size.double width = rect;
            if (MinY - CGRectGetMinY(v165) < v118)
            {
              uint64_t v67 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v67 + 216) & 1) == 0) {
                *(unsigned char *)(*(void *)v67 + 216) |= 1u;
              }
            }
            v166.origin.CGFloat x = v115;
            v166.origin.CGFloat y = v119;
            v166.size.double width = rect;
            v166.size.double height = v120;
            double MaxY = CGRectGetMaxY(v166);
            v167.origin.CGFloat x = x;
            v167.origin.CGFloat y = y;
            v167.size.double width = width;
            v167.size.double height = height;
            if (MaxY - CGRectGetMaxY(v167) < v118)
            {
              uint64_t v69 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v69 + 216) & 4) == 0) {
                *(unsigned char *)(*(void *)v69 + 216) |= 4u;
              }
            }
            int v54 = 0;
LABEL_43:
            *(void *)&v142[0] = v56;
            if (*(unsigned char *)(*(void *)AGGraphGetValue() + 225) == 1
              && (int v99 = specialized Axis.Set.init(_:)(0), (v100 = *(_DWORD *)(AGGraphGetValue() + 20)) != 0))
            {
              int v101 = v99 | 2;
              if ((v99 & 0xFD) == 0) {
                int v101 = 2;
              }
              unint64_t v102 = (v100 << 31 >> 31) & v101;
              __src[4] = v130;
              __src[5] = v131;
              int v103 = v101 & (v100 << 30 >> 31);
              __src[6] = v132;
              __src[0] = v126;
              __src[1] = v127;
              __src[3] = v129;
              void __src[2] = v128;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v102, v103);
              uint64_t v56 = *(void *)&v142[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue()) {
                goto LABEL_52;
              }
              swift_bridgeObjectRetain();
            }
            *(void *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_52:
            CGSize size = v124.size;
            *(CGPoint *)(v1 + 160) = v124.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v140, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          int v54 = 0;
          if (v53)
          {
LABEL_16:
            uint64_t v56 = v109;
            goto LABEL_43;
          }
        }
      }
      uint64_t v70 = AGGraphGetValue();
      long long v71 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      long long v134 = *MEMORY[0x1E4F1DB20];
      ++*(_DWORD *)(*(void *)v70 + 212);
      long long v133 = (char *)MEMORY[0x1E4FBC860];
      long long v135 = v71;
      char v136 = 0;
      uint64_t v138 = 0;
      uint64_t v137 = 0;
      char v139 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(v140, (uint64_t)&v133, &v124, (void (*)(_OWORD *__return_ptr))specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:), &lazy cache variable for type metadata for _LazyStack_Cache<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t)partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (uint64_t)&unk_1ED4787E8, (uint64_t)closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)partial apply, (void (*)(uint64_t, double, double))specialized LazySubviewPlacements.logTranslation(_:reason:), (double (*)(unsigned char *, long long *, uint64_t))specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:));
      }
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v107)
      {
        unsigned int v73 = CurrentAttribute;
        char v74 = v139;
        uint64_t v75 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(v75, &v133, v74, v73);
        swift_release();
        long long v76 = v133;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v1 + 128) = v76;
        uint64_t v77 = swift_bridgeObjectRetain();
        uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(v77);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        long long v79 = v55[7];
        long long v80 = v55[5];
        long long v147 = v55[6];
        long long v148 = v79;
        long long v81 = v55[7];
        v149[0] = v55[8];
        *(_OWORD *)((char *)v149 + 9) = *(_OWORD *)((char *)v55 + 137);
        long long v82 = v55[3];
        long long v83 = v55[1];
        long long v143 = v55[2];
        long long v144 = v82;
        long long v84 = v55[3];
        long long v85 = v55[5];
        long long v145 = v55[4];
        long long v146 = v85;
        long long v86 = v55[1];
        v142[0] = *v55;
        long long v87 = v142[0];
        v142[1] = v86;
        *(void *)&void __src[2] = *(void *)(v1 + 32);
        *(long long *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        long long v88 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v88;
        long long v89 = v55[8];
        *(long long *)((char *)&__src[16] + 8) = v81;
        *(long long *)((char *)&__src[17] + 8) = v89;
        *(long long *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(long long *)((char *)&__src[15] + 8) = v147;
        *(long long *)((char *)&__src[11] + 8) = v143;
        *(long long *)((char *)&__src[12] + 8) = v84;
        *(long long *)((char *)&__src[13] + 8) = v145;
        *(void *)(v1 + 136) = v78;
        int v90 = *(_DWORD *)(v1 + 40);
        uint64_t v91 = *(void *)(v1 + 48);
        int v92 = *(_DWORD *)(v1 + 56);
        uint64_t v93 = *(void *)(v1 + 64);
        uint64_t v94 = *(void *)(v1 + 88);
        uint64_t v56 = *(void *)(v1 + 128);
        int v95 = *(_DWORD *)(v1 + 144);
        uint64_t v96 = *(void *)(v1 + 312);
        uint64_t v97 = *(void *)(v1 + 320);
        char v98 = *(unsigned char *)(v1 + 328);
        *(long long *)((char *)&__src[14] + 8) = v80;
        *(long long *)((char *)&__src[9] + 8) = v87;
        long long rectb = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = rectb;
        DWORD2(__src[2]) = v90;
        *(void *)&__src[3] = v91;
        DWORD2(__src[3]) = v92;
        *(void *)&__src[4] = v93;
        *((void *)&__src[5] + 1) = v94;
        *(void *)&__src[8] = v56;
        *((void *)&__src[8] + 1) = v78;
        LODWORD(__src[9]) = v95;
        *(long long *)((char *)&__src[10] + 8) = v83;
        *((void *)&__src[19] + 1) = v96;
        *(void *)&__src[20] = v97;
        BYTE8(__src[20]) = v98;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        specialized LazySubviewPlacements.mainID(subviews:)(v56, dword_1ED476AE8, &dword_1ED476AE8[1], dword_1ED476B10, &dword_1ED476B10[1], &v141);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v142);
        *(_OWORD *)(v1 + 272) = v141;
        int v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  long long v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  long long *v26;
  long long v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OutputValue;
  BOOL v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  CGSize v57;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  double MinX;
  uint64_t v63;
  double MaxX;
  uint64_t v65;
  double MinY;
  uint64_t v67;
  double MaxY;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  unsigned int CurrentAttribute;
  unsigned int v73;
  char v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  CGSize size;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  int v114;
  CGFloat v115;
  char v116;
  int v117;
  double v118;
  CGFloat v119;
  CGFloat v120;
  long long recta;
  CGFloat rect;
  long long rectb;
  CGRect v124;
  _OWORD v125[14];
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  long long v131;
  long long v132;
  char *v133;
  long long v134;
  long long v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  long long v140[19];
  long long v141;
  _OWORD v142[2];
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  long long v147;
  long long v148;
  _OWORD v149[2];
  long long __src[21];
  _OWORD v151[8];
  _OWORD v152[2];
  _OWORD __dst[21];
  uint64_t v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;

  uint64_t v1 = v0;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        uint64_t result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    long long v3 = *(_OWORD *)(v0 + 248);
    long long v4 = *(_OWORD *)(v0 + 200);
    v151[2] = *(_OWORD *)(v0 + 184);
    v151[3] = v4;
    long long v5 = *(_OWORD *)(v0 + 232);
    v151[4] = *(_OWORD *)(v0 + 216);
    v151[5] = v5;
    long long v6 = *(_OWORD *)(v0 + 168);
    v151[0] = *(_OWORD *)(v0 + 152);
    v151[1] = v6;
    long long v7 = *(_OWORD *)(v0 + 264);
    long long v8 = *(_OWORD *)(v0 + 280);
    v151[6] = v3;
    v151[7] = v7;
    uint64_t v9 = *(void *)(v0 + 128);
    int v10 = *(_DWORD *)(v0 + 144);
    v152[0] = v8;
    *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)Value;
    int v13 = *(_DWORD *)(*(void *)Value + 40);
    uint64_t v14 = *(void *)(*(void *)Value + 48);
    int v15 = *(_DWORD *)(*(void *)Value + 112);
    *(void *)&__dst[0] = *(void *)(*(void *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(void *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((void *)&__dst[4] + 1) = *(void *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    int v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    int v117 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v151);
      uint64_t v9 = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 128) = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(unsigned char *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(unsigned char *)(v0 + 304) = 1;
    }
    unsigned int v19 = *(_DWORD *)(v0 + 8);
    unsigned int v18 = *(_DWORD *)(v0 + 12);
    uint64_t v20 = AGGraphGetValue();
    char v116 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
    }
    else
    {
      int v107 = *MEMORY[0x1E4F4E7A0];
      unsigned int v108 = v18;
      int v114 = v10;
      uint64_t v109 = v9;
      uint64_t v23 = *(void *)(v20 + 24);
      uint64_t v22 = *(void *)(v20 + 32);
      long long recta = *(_OWORD *)(v20 + 8);
      uint64_t v24 = *(void *)v20;
      unsigned int v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(void *)&v125[0] = *(void *)&__dst[0];
      *((void *)&v125[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v142[0] = *(_OWORD *)AGGraphGetValue();
      uint64_t v26 = (long long *)AGGraphGetValue();
      long long v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(void *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = recta;
      *((void *)&__dst[1] + 1) = v23;
      *(void *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v133) = *(unsigned char *)AGGraphGetValue();
      LODWORD(v126) = *(_DWORD *)(AGGraphGetValue() + 20);
      CGFloat v115 = *(double *)(v0 + 96);
      CGFloat rect = *(double *)(v0 + 112);
      CGFloat v119 = *(double *)(v0 + 104);
      CGFloat v120 = *(double *)(v0 + 120);
      AGGraphGetValue();
      char v28 = *(unsigned char *)AGGraphGetValue();
      swift_retain();
      _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v125, __src, (uint64_t)__dst, (char *)&v133, (int *)&v126, v28, (uint64_t)v140);
      v125[10] = *(long long *)((char *)&v140[13] + 8);
      v125[11] = *(long long *)((char *)&v140[14] + 8);
      v125[12] = *(long long *)((char *)&v140[15] + 8);
      v125[13] = *(long long *)((char *)&v140[16] + 8);
      v125[6] = *(long long *)((char *)&v140[9] + 8);
      v125[7] = *(long long *)((char *)&v140[10] + 8);
      v125[8] = *(long long *)((char *)&v140[11] + 8);
      v125[9] = *(long long *)((char *)&v140[12] + 8);
      v125[2] = *(long long *)((char *)&v140[5] + 8);
      v125[3] = *(long long *)((char *)&v140[6] + 8);
      v125[4] = *(long long *)((char *)&v140[7] + 8);
      v125[5] = *(long long *)((char *)&v140[8] + 8);
      v125[0] = *(long long *)((char *)&v140[3] + 8);
      v125[1] = *(long long *)((char *)&v140[4] + 8);
      unint64_t v29 = *((void *)&v140[17] + 1);
      unint64_t v30 = *(void *)&v140[18];
      char v31 = BYTE8(v140[18]);
      __dst[4] = *(long long *)((char *)&v140[14] + 8);
      __dst[5] = *(long long *)((char *)&v140[15] + 8);
      __dst[6] = *(long long *)((char *)&v140[16] + 8);
      __dst[0] = *(long long *)((char *)&v140[10] + 8);
      __dst[1] = *(long long *)((char *)&v140[11] + 8);
      __dst[3] = *(long long *)((char *)&v140[13] + 8);
      __dst[2] = *(long long *)((char *)&v140[12] + 8);
      ScrollGeometry.visibleRect.getter();
      CGFloat v33 = v32;
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      v124.origin.CGFloat x = v32;
      v124.origin.CGFloat y = v34;
      v124.size.double width = v36;
      v124.size.double height = v38;
      long long v130 = *(long long *)((char *)&v140[7] + 8);
      long long v131 = *(long long *)((char *)&v140[8] + 8);
      long long v132 = *(long long *)((char *)&v140[9] + 8);
      long long v126 = *(long long *)((char *)&v140[3] + 8);
      long long v127 = *(long long *)((char *)&v140[4] + 8);
      long long v128 = *(long long *)((char *)&v140[5] + 8);
      long long v129 = *(long long *)((char *)&v140[6] + 8);
      __dst[4] = *(long long *)((char *)&v140[7] + 8);
      __dst[5] = *(long long *)((char *)&v140[8] + 8);
      __dst[6] = *(long long *)((char *)&v140[9] + 8);
      __dst[0] = *(long long *)((char *)&v140[3] + 8);
      __dst[1] = *(long long *)((char *)&v140[4] + 8);
      __dst[3] = *(long long *)((char *)&v140[6] + 8);
      __dst[2] = *(long long *)((char *)&v140[5] + 8);
      if (v31) {
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      }
      unint64_t v105 = v30;
      unint64_t v106 = v29;
      ScrollGeometry.visibleRect.getter();
      CGFloat v112 = v41;
      CGFloat v113 = v40;
      CGFloat v110 = v43;
      CGFloat v111 = v42;
      __dst[4] = *(long long *)((char *)&v140[7] + 8);
      __dst[5] = *(long long *)((char *)&v140[8] + 8);
      __dst[6] = *(long long *)((char *)&v140[9] + 8);
      __dst[0] = *(long long *)((char *)&v140[3] + 8);
      __dst[1] = *(long long *)((char *)&v140[4] + 8);
      __dst[3] = *(long long *)((char *)&v140[6] + 8);
      __dst[2] = *(long long *)((char *)&v140[5] + 8);
      ScrollGeometry.visibleRect.getter();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      Outputuint64_t Value = AGGraphGetOutputValue();
      if (v114 != v117 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(void *)(v1 + 192) = v45;
        *(void *)(v1 + 200) = v47;
        *(void *)(v1 + 208) = v49;
        *(void *)(v1 + 216) = v51;
      }
      *(unsigned char *)(*(void *)AGGraphGetValue() + 216) = 0;
      if (v116)
      {
        *(void *)(v1 + 312) = 0;
        *(void *)(v1 + 320) = 0;
        *(unsigned char *)(v1 + 328) = 1;
      }
      v168.origin.CGFloat x = 0.0;
      v168.origin.CGFloat y = 0.0;
      v168.size.double width = 0.0;
      v168.size.double height = 0.0;
      v155.origin.CGFloat y = v112;
      v155.origin.CGFloat x = v113;
      v155.size.double height = v110;
      v155.size.double width = v111;
      BOOL v53 = CGRectEqualToRect(v155, v168);
      v156.origin.CGFloat x = v115;
      v156.size.double height = v120;
      v156.origin.CGFloat y = v119;
      v156.size.double width = rect;
      if (CGRectIsNull(v156) || (*(void *)&__src[0] = __PAIR64__(v108, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        int v54 = 0;
        int v55 = (_OWORD *)(v1 + 152);
        if (v53) {
          goto LABEL_16;
        }
      }
      else
      {
        __dst[4] = *(long long *)((char *)&v140[7] + 8);
        __dst[5] = *(long long *)((char *)&v140[8] + 8);
        __dst[6] = *(long long *)((char *)&v140[9] + 8);
        __dst[0] = *(long long *)((char *)&v140[3] + 8);
        __dst[1] = *(long long *)((char *)&v140[4] + 8);
        __dst[3] = *(long long *)((char *)&v140[6] + 8);
        __dst[2] = *(long long *)((char *)&v140[5] + 8);
        if (v31) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v105, v106));
        }
        CGSize v57 = (CGSize)v140[2];
        ScrollGeometry.visibleRect.getter();
        v169.origin.CGFloat x = 0.0;
        v169.origin.CGFloat y = 0.0;
        v169.CGSize size = v57;
        CGRect v158 = CGRectIntersection(v157, v169);
        CGFloat x = v158.origin.x;
        CGFloat y = v158.origin.y;
        double width = v158.size.width;
        double height = v158.size.height;
        uint64_t v56 = v109;
        int v55 = (_OWORD *)(v1 + 152);
        if (CGRectIsEmpty(v158))
        {
          if (v53)
          {
            int v54 = 0;
            goto LABEL_43;
          }
          int v54 = 1;
        }
        else
        {
          v159.origin.CGFloat x = v115;
          v159.origin.CGFloat y = v119;
          v159.size.double height = v120;
          v159.size.double width = rect;
          v170.origin.CGFloat x = x;
          v170.origin.CGFloat y = y;
          v170.size.double width = width;
          v170.size.double height = height;
          if (CGRectContainsRect(v159, v170))
          {
            v160.origin.CGFloat x = x;
            v160.origin.CGFloat y = y;
            v160.size.double width = width;
            v160.size.double height = height;
            double MinX = CGRectGetMinX(v160);
            v161.origin.CGFloat x = v115;
            v161.origin.CGFloat y = v119;
            v161.size.double width = rect;
            v161.size.double height = v120;
            if (MinX - CGRectGetMinX(v161) < width / 3.0)
            {
              uint64_t v63 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v63 + 216) & 2) == 0) {
                *(unsigned char *)(*(void *)v63 + 216) |= 2u;
              }
            }
            double v118 = height / 3.0;
            v162.origin.CGFloat x = v115;
            v162.origin.CGFloat y = v119;
            v162.size.double width = rect;
            v162.size.double height = v120;
            double MaxX = CGRectGetMaxX(v162);
            v163.origin.CGFloat x = x;
            v163.origin.CGFloat y = y;
            v163.size.double width = width;
            v163.size.double height = height;
            if (MaxX - CGRectGetMaxX(v163) < width / 3.0)
            {
              uint64_t v65 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v65 + 216) & 8) == 0) {
                *(unsigned char *)(*(void *)v65 + 216) |= 8u;
              }
            }
            v164.origin.CGFloat x = x;
            v164.origin.CGFloat y = y;
            v164.size.double width = width;
            v164.size.double height = height;
            double MinY = CGRectGetMinY(v164);
            v165.origin.CGFloat x = v115;
            v165.size.double height = v120;
            v165.origin.CGFloat y = v119;
            v165.size.double width = rect;
            if (MinY - CGRectGetMinY(v165) < v118)
            {
              uint64_t v67 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v67 + 216) & 1) == 0) {
                *(unsigned char *)(*(void *)v67 + 216) |= 1u;
              }
            }
            v166.origin.CGFloat x = v115;
            v166.origin.CGFloat y = v119;
            v166.size.double width = rect;
            v166.size.double height = v120;
            double MaxY = CGRectGetMaxY(v166);
            v167.origin.CGFloat x = x;
            v167.origin.CGFloat y = y;
            v167.size.double width = width;
            v167.size.double height = height;
            if (MaxY - CGRectGetMaxY(v167) < v118)
            {
              uint64_t v69 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v69 + 216) & 4) == 0) {
                *(unsigned char *)(*(void *)v69 + 216) |= 4u;
              }
            }
            int v54 = 0;
LABEL_43:
            *(void *)&v142[0] = v56;
            if (*(unsigned char *)(*(void *)AGGraphGetValue() + 225) == 1
              && (int v99 = specialized Axis.Set.init(_:)(1), (v100 = *(_DWORD *)(AGGraphGetValue() + 20)) != 0))
            {
              int v101 = v99 | 2;
              if ((v99 & 0xFD) == 0) {
                int v101 = 2;
              }
              unint64_t v102 = (v100 << 31 >> 31) & v101;
              __src[4] = v130;
              __src[5] = v131;
              int v103 = v101 & (v100 << 30 >> 31);
              __src[6] = v132;
              __src[0] = v126;
              __src[1] = v127;
              __src[3] = v129;
              void __src[2] = v128;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v102, v103);
              uint64_t v56 = *(void *)&v142[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue()) {
                goto LABEL_52;
              }
              swift_bridgeObjectRetain();
            }
            *(void *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_52:
            CGSize size = v124.size;
            *(CGPoint *)(v1 + 160) = v124.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v140, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          int v54 = 0;
          if (v53)
          {
LABEL_16:
            uint64_t v56 = v109;
            goto LABEL_43;
          }
        }
      }
      uint64_t v70 = AGGraphGetValue();
      long long v71 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      long long v134 = *MEMORY[0x1E4F1DB20];
      ++*(_DWORD *)(*(void *)v70 + 212);
      long long v133 = (char *)MEMORY[0x1E4FBC860];
      long long v135 = v71;
      char v136 = 0;
      uint64_t v138 = 0;
      uint64_t v137 = 0;
      char v139 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(v140, (uint64_t)&v133, &v124, (void (*)(_OWORD *__return_ptr))specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:), &lazy cache variable for type metadata for _LazyStack_Cache<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t)partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (uint64_t)&unk_1ED478748, (uint64_t)closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)partial apply, (void (*)(uint64_t, double, double))specialized LazySubviewPlacements.logTranslation(_:reason:), (double (*)(unsigned char *, long long *, uint64_t))specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:));
      }
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v107)
      {
        unsigned int v73 = CurrentAttribute;
        char v74 = v139;
        uint64_t v75 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(v75, &v133, v74, v73);
        swift_release();
        long long v76 = v133;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v1 + 128) = v76;
        uint64_t v77 = swift_bridgeObjectRetain();
        uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(v77);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        long long v79 = v55[7];
        long long v80 = v55[5];
        long long v147 = v55[6];
        long long v148 = v79;
        long long v81 = v55[7];
        v149[0] = v55[8];
        *(_OWORD *)((char *)v149 + 9) = *(_OWORD *)((char *)v55 + 137);
        long long v82 = v55[3];
        long long v83 = v55[1];
        long long v143 = v55[2];
        long long v144 = v82;
        long long v84 = v55[3];
        long long v85 = v55[5];
        long long v145 = v55[4];
        long long v146 = v85;
        long long v86 = v55[1];
        v142[0] = *v55;
        long long v87 = v142[0];
        v142[1] = v86;
        *(void *)&void __src[2] = *(void *)(v1 + 32);
        *(long long *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        long long v88 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v88;
        long long v89 = v55[8];
        *(long long *)((char *)&__src[16] + 8) = v81;
        *(long long *)((char *)&__src[17] + 8) = v89;
        *(long long *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(long long *)((char *)&__src[15] + 8) = v147;
        *(long long *)((char *)&__src[11] + 8) = v143;
        *(long long *)((char *)&__src[12] + 8) = v84;
        *(long long *)((char *)&__src[13] + 8) = v145;
        *(void *)(v1 + 136) = v78;
        int v90 = *(_DWORD *)(v1 + 40);
        uint64_t v91 = *(void *)(v1 + 48);
        int v92 = *(_DWORD *)(v1 + 56);
        uint64_t v93 = *(void *)(v1 + 64);
        uint64_t v94 = *(void *)(v1 + 88);
        uint64_t v56 = *(void *)(v1 + 128);
        int v95 = *(_DWORD *)(v1 + 144);
        uint64_t v96 = *(void *)(v1 + 312);
        uint64_t v97 = *(void *)(v1 + 320);
        char v98 = *(unsigned char *)(v1 + 328);
        *(long long *)((char *)&__src[14] + 8) = v80;
        *(long long *)((char *)&__src[9] + 8) = v87;
        long long rectb = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = rectb;
        DWORD2(__src[2]) = v90;
        *(void *)&__src[3] = v91;
        DWORD2(__src[3]) = v92;
        *(void *)&__src[4] = v93;
        *((void *)&__src[5] + 1) = v94;
        *(void *)&__src[8] = v56;
        *((void *)&__src[8] + 1) = v78;
        LODWORD(__src[9]) = v95;
        *(long long *)((char *)&__src[10] + 8) = v83;
        *((void *)&__src[19] + 1) = v96;
        *(void *)&__src[20] = v97;
        BYTE8(__src[20]) = v98;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        specialized LazySubviewPlacements.mainID(subviews:)(v56, dword_1ED476A70, &dword_1ED476A70[1], dword_1ED476A98, &dword_1ED476A98[1], &v141);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v142);
        *(_OWORD *)(v1 + 272) = v141;
        int v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  long long v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  long long *v26;
  long long v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OutputValue;
  BOOL v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  CGSize v57;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  double MinX;
  uint64_t v63;
  double MaxX;
  uint64_t v65;
  double MinY;
  uint64_t v67;
  double MaxY;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  unsigned int CurrentAttribute;
  unsigned int v73;
  char v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  int v101;
  CGSize size;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  CGFloat v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  _OWORD *v113;
  char v114;
  int v115;
  double v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat rect;
  long long recta;
  long long v121;
  CGRect v122;
  _OWORD v123[14];
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  char *v131;
  long long v132;
  long long v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  long long v138[19];
  long long v139;
  _OWORD v140[2];
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  _OWORD v147[2];
  long long __src[21];
  _OWORD v149[8];
  _OWORD v150[2];
  _OWORD __dst[21];
  uint64_t v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;

  uint64_t v1 = v0;
  v152 = *MEMORY[0x1E4F143B8];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        uint64_t result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    long long v3 = *(_OWORD *)(v0 + 248);
    long long v4 = *(_OWORD *)(v0 + 200);
    _OWORD v149[2] = *(_OWORD *)(v0 + 184);
    v149[3] = v4;
    long long v5 = *(_OWORD *)(v0 + 232);
    v149[4] = *(_OWORD *)(v0 + 216);
    v149[5] = v5;
    long long v6 = *(_OWORD *)(v0 + 168);
    v149[0] = *(_OWORD *)(v0 + 152);
    v149[1] = v6;
    long long v7 = *(_OWORD *)(v0 + 264);
    long long v8 = *(_OWORD *)(v0 + 280);
    v149[6] = v3;
    v149[7] = v7;
    uint64_t v9 = *(void *)(v0 + 128);
    int v10 = *(_DWORD *)(v0 + 144);
    v150[0] = v8;
    CGFloat v113 = (_OWORD *)(v0 + 152);
    *(_OWORD *)((char *)v150 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)Value;
    int v13 = *(_DWORD *)(*(void *)Value + 40);
    uint64_t v14 = *(void *)(*(void *)Value + 48);
    int v15 = *(_DWORD *)(*(void *)Value + 112);
    *(void *)&__dst[0] = *(void *)(*(void *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(void *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((void *)&__dst[4] + 1) = *(void *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    int v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    CGFloat v115 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v149);
      uint64_t v9 = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 128) = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(unsigned char *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(unsigned char *)(v0 + 304) = 1;
    }
    unsigned int v19 = *(_DWORD *)(v0 + 8);
    unsigned int v18 = *(_DWORD *)(v0 + 12);
    uint64_t v20 = AGGraphGetValue();
    int v114 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
    }
    else
    {
      unint64_t v105 = *MEMORY[0x1E4F4E7A0];
      unint64_t v106 = v18;
      int v107 = v9;
      uint64_t v23 = *(void *)(v20 + 24);
      uint64_t v22 = *(void *)(v20 + 32);
      __int16 v121 = *(_OWORD *)(v20 + 8);
      uint64_t v24 = *(void *)v20;
      unsigned int v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(void *)&v123[0] = *(void *)&__dst[0];
      *((void *)&v123[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v140[0] = *(_OWORD *)AGGraphGetValue();
      uint64_t v26 = (long long *)AGGraphGetValue();
      long long v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(void *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = v121;
      *((void *)&__dst[1] + 1) = v23;
      *(void *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v131) = *(unsigned char *)AGGraphGetValue();
      LODWORD(v124) = *(_DWORD *)(AGGraphGetValue() + 28);
      CGFloat v112 = *(double *)(v0 + 96);
      CGFloat rect = *(double *)(v0 + 112);
      int v117 = *(double *)(v0 + 104);
      double v118 = *(double *)(v0 + 120);
      AGGraphGetValue();
      char v28 = *(unsigned char *)AGGraphGetValue();
      swift_retain();
      _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v123, __src, (uint64_t)__dst, (char *)&v131, (int *)&v124, v28, (uint64_t)v138);
      v123[10] = *(long long *)((char *)&v138[13] + 8);
      v123[11] = *(long long *)((char *)&v138[14] + 8);
      v123[12] = *(long long *)((char *)&v138[15] + 8);
      v123[13] = *(long long *)((char *)&v138[16] + 8);
      v123[6] = *(long long *)((char *)&v138[9] + 8);
      v123[7] = *(long long *)((char *)&v138[10] + 8);
      v123[8] = *(long long *)((char *)&v138[11] + 8);
      v123[9] = *(long long *)((char *)&v138[12] + 8);
      v123[2] = *(long long *)((char *)&v138[5] + 8);
      v123[3] = *(long long *)((char *)&v138[6] + 8);
      v123[4] = *(long long *)((char *)&v138[7] + 8);
      v123[5] = *(long long *)((char *)&v138[8] + 8);
      v123[0] = *(long long *)((char *)&v138[3] + 8);
      v123[1] = *(long long *)((char *)&v138[4] + 8);
      unint64_t v29 = *((void *)&v138[17] + 1);
      unint64_t v30 = *(void *)&v138[18];
      char v31 = BYTE8(v138[18]);
      __dst[4] = *(long long *)((char *)&v138[14] + 8);
      __dst[5] = *(long long *)((char *)&v138[15] + 8);
      __dst[6] = *(long long *)((char *)&v138[16] + 8);
      __dst[0] = *(long long *)((char *)&v138[10] + 8);
      __dst[1] = *(long long *)((char *)&v138[11] + 8);
      __dst[3] = *(long long *)((char *)&v138[13] + 8);
      __dst[2] = *(long long *)((char *)&v138[12] + 8);
      ScrollGeometry.visibleRect.getter();
      CGFloat v33 = v32;
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      v122.origin.CGFloat x = v32;
      v122.origin.CGFloat y = v34;
      v122.size.double width = v36;
      v122.size.double height = v38;
      long long v128 = *(long long *)((char *)&v138[7] + 8);
      long long v129 = *(long long *)((char *)&v138[8] + 8);
      long long v130 = *(long long *)((char *)&v138[9] + 8);
      CGRect v124 = *(long long *)((char *)&v138[3] + 8);
      long long v125 = *(long long *)((char *)&v138[4] + 8);
      long long v126 = *(long long *)((char *)&v138[5] + 8);
      long long v127 = *(long long *)((char *)&v138[6] + 8);
      __dst[4] = *(long long *)((char *)&v138[7] + 8);
      __dst[5] = *(long long *)((char *)&v138[8] + 8);
      __dst[6] = *(long long *)((char *)&v138[9] + 8);
      __dst[0] = *(long long *)((char *)&v138[3] + 8);
      __dst[1] = *(long long *)((char *)&v138[4] + 8);
      __dst[3] = *(long long *)((char *)&v138[6] + 8);
      __dst[2] = *(long long *)((char *)&v138[5] + 8);
      if (v31) {
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      }
      int v103 = v30;
      uint64_t v104 = v29;
      ScrollGeometry.visibleRect.getter();
      CGFloat v110 = v41;
      CGFloat v111 = v40;
      unsigned int v108 = v43;
      uint64_t v109 = v42;
      __dst[4] = *(long long *)((char *)&v138[7] + 8);
      __dst[5] = *(long long *)((char *)&v138[8] + 8);
      __dst[6] = *(long long *)((char *)&v138[9] + 8);
      __dst[0] = *(long long *)((char *)&v138[3] + 8);
      __dst[1] = *(long long *)((char *)&v138[4] + 8);
      __dst[3] = *(long long *)((char *)&v138[6] + 8);
      __dst[2] = *(long long *)((char *)&v138[5] + 8);
      ScrollGeometry.visibleRect.getter();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      Outputuint64_t Value = AGGraphGetOutputValue();
      if (v10 != v115 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(void *)(v1 + 192) = v45;
        *(void *)(v1 + 200) = v47;
        *(void *)(v1 + 208) = v49;
        *(void *)(v1 + 216) = v51;
      }
      *(unsigned char *)(*(void *)AGGraphGetValue() + 216) = 0;
      if (v114)
      {
        *(void *)(v1 + 312) = 0;
        *(void *)(v1 + 320) = 0;
        *(unsigned char *)(v1 + 328) = 1;
      }
      v166.origin.CGFloat x = 0.0;
      v166.origin.CGFloat y = 0.0;
      v166.size.double width = 0.0;
      v166.size.double height = 0.0;
      v153.origin.CGFloat y = v110;
      v153.origin.CGFloat x = v111;
      v153.size.double height = v108;
      v153.size.double width = v109;
      BOOL v53 = CGRectEqualToRect(v153, v166);
      v154.origin.CGFloat x = v112;
      v154.size.double height = v118;
      v154.origin.CGFloat y = v117;
      v154.size.double width = rect;
      if (CGRectIsNull(v154) || (*(void *)&__src[0] = __PAIR64__(v106, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        int v54 = 0;
        int v55 = v113;
        if (v53) {
          goto LABEL_16;
        }
      }
      else
      {
        __dst[4] = *(long long *)((char *)&v138[7] + 8);
        __dst[5] = *(long long *)((char *)&v138[8] + 8);
        __dst[6] = *(long long *)((char *)&v138[9] + 8);
        __dst[0] = *(long long *)((char *)&v138[3] + 8);
        __dst[1] = *(long long *)((char *)&v138[4] + 8);
        __dst[3] = *(long long *)((char *)&v138[6] + 8);
        __dst[2] = *(long long *)((char *)&v138[5] + 8);
        if (v31) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v103, v104));
        }
        CGSize v57 = (CGSize)v138[2];
        ScrollGeometry.visibleRect.getter();
        v167.origin.CGFloat x = 0.0;
        v167.origin.CGFloat y = 0.0;
        v167.CGSize size = v57;
        CGRect v156 = CGRectIntersection(v155, v167);
        CGFloat x = v156.origin.x;
        CGFloat y = v156.origin.y;
        double width = v156.size.width;
        double height = v156.size.height;
        uint64_t v56 = v107;
        int v55 = v113;
        if (CGRectIsEmpty(v156))
        {
          if (v53)
          {
            int v54 = 0;
            goto LABEL_43;
          }
          int v54 = 1;
        }
        else
        {
          v157.origin.CGFloat x = v112;
          v157.origin.CGFloat y = v117;
          v157.size.double height = v118;
          v157.size.double width = rect;
          v168.origin.CGFloat x = x;
          v168.origin.CGFloat y = y;
          v168.size.double width = width;
          v168.size.double height = height;
          if (CGRectContainsRect(v157, v168))
          {
            v158.origin.CGFloat x = x;
            v158.origin.CGFloat y = y;
            v158.size.double width = width;
            v158.size.double height = height;
            double MinX = CGRectGetMinX(v158);
            v159.origin.CGFloat x = v112;
            v159.origin.CGFloat y = v117;
            v159.size.double width = rect;
            v159.size.double height = v118;
            if (MinX - CGRectGetMinX(v159) < width / 3.0)
            {
              uint64_t v63 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v63 + 216) & 2) == 0) {
                *(unsigned char *)(*(void *)v63 + 216) |= 2u;
              }
            }
            char v116 = height / 3.0;
            v160.origin.CGFloat x = v112;
            v160.origin.CGFloat y = v117;
            v160.size.double width = rect;
            v160.size.double height = v118;
            double MaxX = CGRectGetMaxX(v160);
            v161.origin.CGFloat x = x;
            v161.origin.CGFloat y = y;
            v161.size.double width = width;
            v161.size.double height = height;
            if (MaxX - CGRectGetMaxX(v161) < width / 3.0)
            {
              uint64_t v65 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v65 + 216) & 8) == 0) {
                *(unsigned char *)(*(void *)v65 + 216) |= 8u;
              }
            }
            v162.origin.CGFloat x = x;
            v162.origin.CGFloat y = y;
            v162.size.double width = width;
            v162.size.double height = height;
            double MinY = CGRectGetMinY(v162);
            v163.origin.CGFloat x = v112;
            v163.size.double height = v118;
            v163.origin.CGFloat y = v117;
            v163.size.double width = rect;
            if (MinY - CGRectGetMinY(v163) < v116)
            {
              uint64_t v67 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v67 + 216) & 1) == 0) {
                *(unsigned char *)(*(void *)v67 + 216) |= 1u;
              }
            }
            v164.origin.CGFloat x = v112;
            v164.origin.CGFloat y = v117;
            v164.size.double width = rect;
            v164.size.double height = v118;
            double MaxY = CGRectGetMaxY(v164);
            v165.origin.CGFloat x = x;
            v165.origin.CGFloat y = y;
            v165.size.double width = width;
            v165.size.double height = height;
            if (MaxY - CGRectGetMaxY(v165) < v116)
            {
              uint64_t v69 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v69 + 216) & 4) == 0) {
                *(unsigned char *)(*(void *)v69 + 216) |= 4u;
              }
            }
            int v54 = 0;
LABEL_43:
            *(void *)&v140[0] = v56;
            if (*(unsigned char *)(*(void *)AGGraphGetValue() + 225) == 1
              && (int v99 = *(_DWORD *)(AGGraphGetValue() + 28)) != 0)
            {
              int v100 = v99 & 1;
              int v101 = (v99 >> 1) & 1;
              __src[4] = v128;
              __src[5] = v129;
              __src[6] = v130;
              __src[0] = v124;
              __src[1] = v125;
              __src[3] = v127;
              void __src[2] = v126;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v100, v101);
              uint64_t v56 = *(void *)&v140[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue()) {
                goto LABEL_50;
              }
              swift_bridgeObjectRetain();
            }
            *(void *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_50:
            CGSize size = v122.size;
            *(CGPoint *)(v1 + 160) = v122.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v138, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          int v54 = 0;
          if (v53)
          {
LABEL_16:
            uint64_t v56 = v107;
            goto LABEL_43;
          }
        }
      }
      uint64_t v70 = AGGraphGetValue();
      long long v71 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      long long v132 = *MEMORY[0x1E4F1DB20];
      ++*(_DWORD *)(*(void *)v70 + 212);
      long long v131 = (char *)MEMORY[0x1E4FBC860];
      long long v133 = v71;
      long long v134 = 0;
      char v136 = 0;
      long long v135 = 0;
      uint64_t v137 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(v138, (uint64_t)&v131, &v122, (void (*)(_OWORD *__return_ptr))specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:), &lazy cache variable for type metadata for _LazyStack_Cache<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t)partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (uint64_t)&unk_1ED478838, (uint64_t)closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)partial apply, (void (*)(uint64_t, double, double))specialized LazySubviewPlacements.logTranslation(_:reason:), (double (*)(unsigned char *, long long *, uint64_t))specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:));
      }
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v105)
      {
        unsigned int v73 = CurrentAttribute;
        char v74 = v137;
        uint64_t v75 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(v75, &v131, v74, v73);
        swift_release();
        long long v76 = v131;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v1 + 128) = v76;
        uint64_t v77 = swift_bridgeObjectRetain();
        uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(v77);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        long long v79 = v55[7];
        long long v80 = v55[5];
        long long v145 = v55[6];
        long long v146 = v79;
        long long v81 = v55[7];
        v147[0] = v55[8];
        *(_OWORD *)((char *)v147 + 9) = *(_OWORD *)((char *)v55 + 137);
        long long v82 = v55[3];
        long long v83 = v55[1];
        long long v141 = v55[2];
        long long v142 = v82;
        long long v84 = v55[3];
        long long v85 = v55[5];
        long long v143 = v55[4];
        long long v144 = v85;
        long long v86 = v55[1];
        v140[0] = *v55;
        long long v87 = v140[0];
        v140[1] = v86;
        *(void *)&void __src[2] = *(void *)(v1 + 32);
        *(long long *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        long long v88 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v88;
        long long v89 = v55[8];
        *(long long *)((char *)&__src[16] + 8) = v81;
        *(long long *)((char *)&__src[17] + 8) = v89;
        *(long long *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(long long *)((char *)&__src[15] + 8) = v145;
        *(long long *)((char *)&__src[11] + 8) = v141;
        *(long long *)((char *)&__src[12] + 8) = v84;
        *(long long *)((char *)&__src[13] + 8) = v143;
        *(void *)(v1 + 136) = v78;
        int v90 = *(_DWORD *)(v1 + 40);
        uint64_t v91 = *(void *)(v1 + 48);
        int v92 = *(_DWORD *)(v1 + 56);
        uint64_t v93 = *(void *)(v1 + 64);
        uint64_t v94 = *(void *)(v1 + 88);
        uint64_t v56 = *(void *)(v1 + 128);
        int v95 = *(_DWORD *)(v1 + 144);
        uint64_t v96 = *(void *)(v1 + 312);
        uint64_t v97 = *(void *)(v1 + 320);
        char v98 = *(unsigned char *)(v1 + 328);
        *(long long *)((char *)&__src[14] + 8) = v80;
        *(long long *)((char *)&__src[9] + 8) = v87;
        long long recta = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = recta;
        DWORD2(__src[2]) = v90;
        *(void *)&__src[3] = v91;
        DWORD2(__src[3]) = v92;
        *(void *)&__src[4] = v93;
        *((void *)&__src[5] + 1) = v94;
        *(void *)&__src[8] = v56;
        *((void *)&__src[8] + 1) = v78;
        LODWORD(__src[9]) = v95;
        *(long long *)((char *)&__src[10] + 8) = v83;
        *((void *)&__src[19] + 1) = v96;
        *(void *)&__src[20] = v97;
        BYTE8(__src[20]) = v98;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        specialized LazySubviewPlacements.mainID(subviews:)(v56, dword_1ED476B60, &dword_1ED476B60[1], dword_1ED476B88, &dword_1ED476B88[1], &v139);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v140);
        *(_OWORD *)(v1 + 272) = v139;
        int v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  long long v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  long long *v26;
  long long v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OutputValue;
  BOOL v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  CGSize v57;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  double MinX;
  uint64_t v63;
  double MaxX;
  uint64_t v65;
  double MinY;
  uint64_t v67;
  double MaxY;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  unsigned int CurrentAttribute;
  unsigned int v73;
  char v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  int v99;
  unint64_t v100;
  int v101;
  CGSize size;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  CGFloat v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  _OWORD *v113;
  char v114;
  int v115;
  double v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat rect;
  long long recta;
  long long v121;
  CGRect v122;
  _OWORD v123[14];
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  char *v131;
  long long v132;
  long long v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  long long v138[19];
  long long v139;
  _OWORD v140[2];
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  _OWORD v147[2];
  long long __src[21];
  _OWORD v149[8];
  _OWORD v150[2];
  _OWORD __dst[21];
  uint64_t v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;

  uint64_t v1 = v0;
  v152 = *MEMORY[0x1E4F143B8];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        uint64_t result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    long long v3 = *(_OWORD *)(v0 + 248);
    long long v4 = *(_OWORD *)(v0 + 200);
    _OWORD v149[2] = *(_OWORD *)(v0 + 184);
    v149[3] = v4;
    long long v5 = *(_OWORD *)(v0 + 232);
    v149[4] = *(_OWORD *)(v0 + 216);
    v149[5] = v5;
    long long v6 = *(_OWORD *)(v0 + 168);
    v149[0] = *(_OWORD *)(v0 + 152);
    v149[1] = v6;
    long long v7 = *(_OWORD *)(v0 + 264);
    long long v8 = *(_OWORD *)(v0 + 280);
    v149[6] = v3;
    v149[7] = v7;
    uint64_t v9 = *(void *)(v0 + 128);
    int v10 = *(_DWORD *)(v0 + 144);
    v150[0] = v8;
    CGFloat v113 = (_OWORD *)(v0 + 152);
    *(_OWORD *)((char *)v150 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)Value;
    int v13 = *(_DWORD *)(*(void *)Value + 40);
    uint64_t v14 = *(void *)(*(void *)Value + 48);
    int v15 = *(_DWORD *)(*(void *)Value + 112);
    *(void *)&__dst[0] = *(void *)(*(void *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(void *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((void *)&__dst[4] + 1) = *(void *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    int v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    CGFloat v115 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v149);
      uint64_t v9 = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 128) = MEMORY[0x1E4FBC860];
      *(void *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(unsigned char *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(unsigned char *)(v0 + 304) = 1;
    }
    unsigned int v19 = *(_DWORD *)(v0 + 8);
    unsigned int v18 = *(_DWORD *)(v0 + 12);
    uint64_t v20 = AGGraphGetValue();
    int v114 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
    }
    else
    {
      unint64_t v105 = *MEMORY[0x1E4F4E7A0];
      unint64_t v106 = v18;
      int v107 = v9;
      uint64_t v23 = *(void *)(v20 + 24);
      uint64_t v22 = *(void *)(v20 + 32);
      __int16 v121 = *(_OWORD *)(v20 + 8);
      uint64_t v24 = *(void *)v20;
      unsigned int v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(void *)&v123[0] = *(void *)&__dst[0];
      *((void *)&v123[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v140[0] = *(_OWORD *)AGGraphGetValue();
      uint64_t v26 = (long long *)AGGraphGetValue();
      long long v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(void *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = v121;
      *((void *)&__dst[1] + 1) = v23;
      *(void *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v131) = *(unsigned char *)AGGraphGetValue();
      LODWORD(v124) = *(_DWORD *)(AGGraphGetValue() + 28);
      CGFloat v112 = *(double *)(v0 + 96);
      CGFloat rect = *(double *)(v0 + 112);
      int v117 = *(double *)(v0 + 104);
      double v118 = *(double *)(v0 + 120);
      AGGraphGetValue();
      char v28 = *(unsigned char *)AGGraphGetValue();
      swift_retain();
      _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v123, __src, (uint64_t)__dst, (char *)&v131, (int *)&v124, v28, (uint64_t)v138);
      v123[10] = *(long long *)((char *)&v138[13] + 8);
      v123[11] = *(long long *)((char *)&v138[14] + 8);
      v123[12] = *(long long *)((char *)&v138[15] + 8);
      v123[13] = *(long long *)((char *)&v138[16] + 8);
      v123[6] = *(long long *)((char *)&v138[9] + 8);
      v123[7] = *(long long *)((char *)&v138[10] + 8);
      v123[8] = *(long long *)((char *)&v138[11] + 8);
      v123[9] = *(long long *)((char *)&v138[12] + 8);
      v123[2] = *(long long *)((char *)&v138[5] + 8);
      v123[3] = *(long long *)((char *)&v138[6] + 8);
      v123[4] = *(long long *)((char *)&v138[7] + 8);
      v123[5] = *(long long *)((char *)&v138[8] + 8);
      v123[0] = *(long long *)((char *)&v138[3] + 8);
      v123[1] = *(long long *)((char *)&v138[4] + 8);
      unint64_t v29 = *((void *)&v138[17] + 1);
      unint64_t v30 = *(void *)&v138[18];
      char v31 = BYTE8(v138[18]);
      __dst[4] = *(long long *)((char *)&v138[14] + 8);
      __dst[5] = *(long long *)((char *)&v138[15] + 8);
      __dst[6] = *(long long *)((char *)&v138[16] + 8);
      __dst[0] = *(long long *)((char *)&v138[10] + 8);
      __dst[1] = *(long long *)((char *)&v138[11] + 8);
      __dst[3] = *(long long *)((char *)&v138[13] + 8);
      __dst[2] = *(long long *)((char *)&v138[12] + 8);
      ScrollGeometry.visibleRect.getter();
      CGFloat v33 = v32;
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      v122.origin.CGFloat x = v32;
      v122.origin.CGFloat y = v34;
      v122.size.double width = v36;
      v122.size.double height = v38;
      long long v128 = *(long long *)((char *)&v138[7] + 8);
      long long v129 = *(long long *)((char *)&v138[8] + 8);
      long long v130 = *(long long *)((char *)&v138[9] + 8);
      CGRect v124 = *(long long *)((char *)&v138[3] + 8);
      long long v125 = *(long long *)((char *)&v138[4] + 8);
      long long v126 = *(long long *)((char *)&v138[5] + 8);
      long long v127 = *(long long *)((char *)&v138[6] + 8);
      __dst[4] = *(long long *)((char *)&v138[7] + 8);
      __dst[5] = *(long long *)((char *)&v138[8] + 8);
      __dst[6] = *(long long *)((char *)&v138[9] + 8);
      __dst[0] = *(long long *)((char *)&v138[3] + 8);
      __dst[1] = *(long long *)((char *)&v138[4] + 8);
      __dst[3] = *(long long *)((char *)&v138[6] + 8);
      __dst[2] = *(long long *)((char *)&v138[5] + 8);
      if (v31) {
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      }
      int v103 = v30;
      uint64_t v104 = v29;
      ScrollGeometry.visibleRect.getter();
      CGFloat v110 = v41;
      CGFloat v111 = v40;
      unsigned int v108 = v43;
      uint64_t v109 = v42;
      __dst[4] = *(long long *)((char *)&v138[7] + 8);
      __dst[5] = *(long long *)((char *)&v138[8] + 8);
      __dst[6] = *(long long *)((char *)&v138[9] + 8);
      __dst[0] = *(long long *)((char *)&v138[3] + 8);
      __dst[1] = *(long long *)((char *)&v138[4] + 8);
      __dst[3] = *(long long *)((char *)&v138[6] + 8);
      __dst[2] = *(long long *)((char *)&v138[5] + 8);
      ScrollGeometry.visibleRect.getter();
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      Outputuint64_t Value = AGGraphGetOutputValue();
      if (v10 != v115 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(void *)(v1 + 192) = v45;
        *(void *)(v1 + 200) = v47;
        *(void *)(v1 + 208) = v49;
        *(void *)(v1 + 216) = v51;
      }
      *(unsigned char *)(*(void *)AGGraphGetValue() + 216) = 0;
      if (v114)
      {
        *(void *)(v1 + 312) = 0;
        *(void *)(v1 + 320) = 0;
        *(unsigned char *)(v1 + 328) = 1;
      }
      v166.origin.CGFloat x = 0.0;
      v166.origin.CGFloat y = 0.0;
      v166.size.double width = 0.0;
      v166.size.double height = 0.0;
      v153.origin.CGFloat y = v110;
      v153.origin.CGFloat x = v111;
      v153.size.double height = v108;
      v153.size.double width = v109;
      BOOL v53 = CGRectEqualToRect(v153, v166);
      v154.origin.CGFloat x = v112;
      v154.size.double height = v118;
      v154.origin.CGFloat y = v117;
      v154.size.double width = rect;
      if (CGRectIsNull(v154) || (*(void *)&__src[0] = __PAIR64__(v106, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        int v54 = 0;
        int v55 = v113;
        if (v53) {
          goto LABEL_16;
        }
      }
      else
      {
        __dst[4] = *(long long *)((char *)&v138[7] + 8);
        __dst[5] = *(long long *)((char *)&v138[8] + 8);
        __dst[6] = *(long long *)((char *)&v138[9] + 8);
        __dst[0] = *(long long *)((char *)&v138[3] + 8);
        __dst[1] = *(long long *)((char *)&v138[4] + 8);
        __dst[3] = *(long long *)((char *)&v138[6] + 8);
        __dst[2] = *(long long *)((char *)&v138[5] + 8);
        if (v31) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v103, v104));
        }
        CGSize v57 = (CGSize)v138[2];
        ScrollGeometry.visibleRect.getter();
        v167.origin.CGFloat x = 0.0;
        v167.origin.CGFloat y = 0.0;
        v167.CGSize size = v57;
        CGRect v156 = CGRectIntersection(v155, v167);
        CGFloat x = v156.origin.x;
        CGFloat y = v156.origin.y;
        double width = v156.size.width;
        double height = v156.size.height;
        uint64_t v56 = v107;
        int v55 = v113;
        if (CGRectIsEmpty(v156))
        {
          if (v53)
          {
            int v54 = 0;
            goto LABEL_43;
          }
          int v54 = 1;
        }
        else
        {
          v157.origin.CGFloat x = v112;
          v157.origin.CGFloat y = v117;
          v157.size.double height = v118;
          v157.size.double width = rect;
          v168.origin.CGFloat x = x;
          v168.origin.CGFloat y = y;
          v168.size.double width = width;
          v168.size.double height = height;
          if (CGRectContainsRect(v157, v168))
          {
            v158.origin.CGFloat x = x;
            v158.origin.CGFloat y = y;
            v158.size.double width = width;
            v158.size.double height = height;
            double MinX = CGRectGetMinX(v158);
            v159.origin.CGFloat x = v112;
            v159.origin.CGFloat y = v117;
            v159.size.double width = rect;
            v159.size.double height = v118;
            if (MinX - CGRectGetMinX(v159) < width / 3.0)
            {
              uint64_t v63 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v63 + 216) & 2) == 0) {
                *(unsigned char *)(*(void *)v63 + 216) |= 2u;
              }
            }
            char v116 = height / 3.0;
            v160.origin.CGFloat x = v112;
            v160.origin.CGFloat y = v117;
            v160.size.double width = rect;
            v160.size.double height = v118;
            double MaxX = CGRectGetMaxX(v160);
            v161.origin.CGFloat x = x;
            v161.origin.CGFloat y = y;
            v161.size.double width = width;
            v161.size.double height = height;
            if (MaxX - CGRectGetMaxX(v161) < width / 3.0)
            {
              uint64_t v65 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v65 + 216) & 8) == 0) {
                *(unsigned char *)(*(void *)v65 + 216) |= 8u;
              }
            }
            v162.origin.CGFloat x = x;
            v162.origin.CGFloat y = y;
            v162.size.double width = width;
            v162.size.double height = height;
            double MinY = CGRectGetMinY(v162);
            v163.origin.CGFloat x = v112;
            v163.size.double height = v118;
            v163.origin.CGFloat y = v117;
            v163.size.double width = rect;
            if (MinY - CGRectGetMinY(v163) < v116)
            {
              uint64_t v67 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v67 + 216) & 1) == 0) {
                *(unsigned char *)(*(void *)v67 + 216) |= 1u;
              }
            }
            v164.origin.CGFloat x = v112;
            v164.origin.CGFloat y = v117;
            v164.size.double width = rect;
            v164.size.double height = v118;
            double MaxY = CGRectGetMaxY(v164);
            v165.origin.CGFloat x = x;
            v165.origin.CGFloat y = y;
            v165.size.double width = width;
            v165.size.double height = height;
            if (MaxY - CGRectGetMaxY(v165) < v116)
            {
              uint64_t v69 = AGGraphGetValue();
              if ((*(unsigned char *)(*(void *)v69 + 216) & 4) == 0) {
                *(unsigned char *)(*(void *)v69 + 216) |= 4u;
              }
            }
            int v54 = 0;
LABEL_43:
            *(void *)&v140[0] = v56;
            if (*(unsigned char *)(*(void *)AGGraphGetValue() + 225) == 1
              && (int v99 = *(_DWORD *)(AGGraphGetValue() + 28)) != 0)
            {
              int v100 = 2 * (v99 & 1u);
              int v101 = v99 & 2;
              __src[4] = v128;
              __src[5] = v129;
              __src[6] = v130;
              __src[0] = v124;
              __src[1] = v125;
              __src[3] = v127;
              void __src[2] = v126;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v100, v101);
              uint64_t v56 = *(void *)&v140[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue()) {
                goto LABEL_50;
              }
              swift_bridgeObjectRetain();
            }
            *(void *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_50:
            CGSize size = v122.size;
            *(CGPoint *)(v1 + 160) = v122.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v138, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          int v54 = 0;
          if (v53)
          {
LABEL_16:
            uint64_t v56 = v107;
            goto LABEL_43;
          }
        }
      }
      uint64_t v70 = AGGraphGetValue();
      long long v71 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      long long v132 = *MEMORY[0x1E4F1DB20];
      ++*(_DWORD *)(*(void *)v70 + 212);
      long long v131 = (char *)MEMORY[0x1E4FBC860];
      long long v133 = v71;
      long long v134 = 0;
      char v136 = 0;
      long long v135 = 0;
      uint64_t v137 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(v138, (uint64_t)&v131, &v122, (void (*)(_OWORD *__return_ptr))specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:), &lazy cache variable for type metadata for _LazyStack_Cache<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t)partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (uint64_t)&unk_1ED478860, (uint64_t)closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)partial apply, (void (*)(uint64_t, double, double))specialized LazySubviewPlacements.logTranslation(_:reason:), (double (*)(unsigned char *, long long *, uint64_t))specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:));
      }
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v105)
      {
        unsigned int v73 = CurrentAttribute;
        char v74 = v137;
        uint64_t v75 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(v75, &v131, v74, v73);
        swift_release();
        long long v76 = v131;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v1 + 128) = v76;
        uint64_t v77 = swift_bridgeObjectRetain();
        uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(v77);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        long long v79 = v55[7];
        long long v80 = v55[5];
        long long v145 = v55[6];
        long long v146 = v79;
        long long v81 = v55[7];
        v147[0] = v55[8];
        *(_OWORD *)((char *)v147 + 9) = *(_OWORD *)((char *)v55 + 137);
        long long v82 = v55[3];
        long long v83 = v55[1];
        long long v141 = v55[2];
        long long v142 = v82;
        long long v84 = v55[3];
        long long v85 = v55[5];
        long long v143 = v55[4];
        long long v144 = v85;
        long long v86 = v55[1];
        v140[0] = *v55;
        long long v87 = v140[0];
        v140[1] = v86;
        *(void *)&void __src[2] = *(void *)(v1 + 32);
        *(long long *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        long long v88 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v88;
        long long v89 = v55[8];
        *(long long *)((char *)&__src[16] + 8) = v81;
        *(long long *)((char *)&__src[17] + 8) = v89;
        *(long long *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(long long *)((char *)&__src[15] + 8) = v145;
        *(long long *)((char *)&__src[11] + 8) = v141;
        *(long long *)((char *)&__src[12] + 8) = v84;
        *(long long *)((char *)&__src[13] + 8) = v143;
        *(void *)(v1 + 136) = v78;
        int v90 = *(_DWORD *)(v1 + 40);
        uint64_t v91 = *(void *)(v1 + 48);
        int v92 = *(_DWORD *)(v1 + 56);
        uint64_t v93 = *(void *)(v1 + 64);
        uint64_t v94 = *(void *)(v1 + 88);
        uint64_t v56 = *(void *)(v1 + 128);
        int v95 = *(_DWORD *)(v1 + 144);
        uint64_t v96 = *(void *)(v1 + 312);
        uint64_t v97 = *(void *)(v1 + 320);
        char v98 = *(unsigned char *)(v1 + 328);
        *(long long *)((char *)&__src[14] + 8) = v80;
        *(long long *)((char *)&__src[9] + 8) = v87;
        long long recta = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = recta;
        DWORD2(__src[2]) = v90;
        *(void *)&__src[3] = v91;
        DWORD2(__src[3]) = v92;
        *(void *)&__src[4] = v93;
        *((void *)&__src[5] + 1) = v94;
        *(void *)&__src[8] = v56;
        *((void *)&__src[8] + 1) = v78;
        LODWORD(__src[9]) = v95;
        *(long long *)((char *)&__src[10] + 8) = v83;
        *((void *)&__src[19] + 1) = v96;
        *(void *)&__src[20] = v97;
        BYTE8(__src[20]) = v98;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        specialized LazySubviewPlacements.mainID(subviews:)(v56, dword_1ED476BD8, &dword_1ED476BD8[1], dword_1ED476C00, &dword_1ED476C00[1], &v139);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v140);
        *(_OWORD *)(v1 + 272) = v139;
        int v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for DefinesSearchCompletionModifier()
{
  return &type metadata for DefinesSearchCompletionModifier;
}

uint64_t type metadata completion function for NavigationStackHostingController()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  char v6 = (a3 & a6) == 255;
  if (a3 == 255 || a6 == 0xFF) {
    return v6 & 1;
  }
  if (a3)
  {
    if (a6)
    {
      char v6 = a1 == a4 && a2 == a5;
      return v6 & 1;
    }
    outlined copy of SceneID?(a1, a2, a3);
    outlined copy of SceneID?(a4, a5, a6);
    uint64_t v22 = _typeName(_:qualified:)();
    uint64_t v24 = v13;
    v14._countAndFlagsBits = 45;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = v24;
    swift_bridgeObjectRetain();
    uint64_t v17 = a5;
    if (v22 != a4) {
      goto LABEL_17;
    }
LABEL_12:
    if (v16 == v17)
    {
      char v6 = 1;
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(a4, a5, a6);
      outlined consume of SceneID?(a1, a2, a3);
      return v6 & 1;
    }
LABEL_17:
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_18;
  }
  if (a6)
  {
    outlined copy of SceneID?(a1, a2, a3);
    outlined copy of SceneID?(a1, a2, a3);
    outlined copy of SceneID?(a4, a5, a6);
    uint64_t v23 = _typeName(_:qualified:)();
    uint64_t v25 = v18;
    v19._countAndFlagsBits = 45;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v17 = v25;
    uint64_t v16 = a2;
    if (a1 != v23) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (a1 == a4 && a2 == a5)
  {
    char v6 = 1;
    return v6 & 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata completion function for DefaultPreviewDragPayloadResponder()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for CoreSheetPresentationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t NavigableListModifier.ListKey.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v34 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  long long v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  Swift::String v14 = (char *)v28 - v13;
  v28[0] = a1;
  v28[1] = a3;
  uint64_t v15 = NavigableListModifier.ListKey.inheritedStackKey.getter();
  if (v16 == 7) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v15;
  }
  uint64_t v19 = 6;
  if (v16 != 7) {
    uint64_t v19 = v16;
  }
  uint64_t v32 = v19;
  uint64_t v33 = v18;
  if (v16 == 7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v17;
  }
  uint64_t v31 = v20;
  uint64_t v30 = *(void *)AGGraphGetValue();
  NavigableListModifier.ListKey.selection.getter((uint64_t)v14);
  char v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
  BOOL v29 = v21(v14, 1, v8) != 1;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v23 = v14;
  uint64_t v24 = v34;
  v22(v23, v34);
  NavigableListModifier.ListKey.selection.getter((uint64_t)v11);
  if (v21(v11, 1, v8) == 1) {
    a2 = 0;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v11, v24);
  uint64_t v26 = v33;
  *a4 = v30;
  a4[1] = v26;
  uint64_t v27 = v31;
  a4[2] = v32;
  a4[3] = v27;
  a4[4] = v29;
  a4[5] = a2;
  return result;
}

uint64_t NavigableListModifier.ListKey.selection.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t NavigableListModifier.ListKey.inheritedStackKey.getter()
{
  type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t LazyState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized State.wrappedValue.setter(a1, a2);
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t specialized State.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + *(int *)(a2 + 28))) {
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return result;
}

uint64_t ToolbarItem.MakeView.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v5(a2, Value, a1);
}

uint64_t NavigableListModifier.BoundListSelectionDetector.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v77 = *(void *)(a1 + 16);
  uint64_t v80 = v3;
  uint64_t v4 = type metadata accessor for SelectionManagerBox();
  uint64_t v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v75 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v83 = (char *)&v67 - v6;
  uint64_t v82 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v7);
  long long v76 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v78 = (char *)&v67 - v10;
  MEMORY[0x1F4188790](v11);
  long long v81 = (char *)&v67 - v12;
  uint64_t v84 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v13);
  char v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v85 = (uint64_t)&v67 - v16;
  uint64_t v86 = v4;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  char v21 = (char *)&v67 - v20;
  uint64_t v22 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v67 - v24;
  NavigableListModifier.BoundListSelectionDetector.selection.getter((uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v17) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v25, v21, v17);
  NavigableListModifier.BoundListSelectionDetector.listKey.getter(v106);
  outlined init with take of NavigationState.ListKey??((uint64_t)v106, (uint64_t)v107);
  if (v107[5] == 2) {
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v17);
  }
  uint64_t v27 = v1;
  _s7SwiftUI19NavigationAuthorityVSgWObTm_0((uint64_t)v107, (uint64_t)v108, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_0((uint64_t)v108, (uint64_t)v109, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  if (v110.n128_u64[1] == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v17);
  }
  v111[0] = (__n128)v109[0];
  v111[1] = (__n128)v109[1];
  v111[2] = v110;
  int v28 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v28 != *(_DWORD *)(v1 + 56))
  {
    *(_DWORD *)(v1 + 56) = v28;
    *(void *)(v1 + 44) = 0xFFFFFFFFLL;
    *(unsigned char *)(v1 + 52) = 0;
  }
  double v29 = NavigableListModifier.BoundListSelectionDetector.navigationAuthority.getter((uint64_t)&v96);
  if (*((void *)&v96 + 1) == 1)
  {
    (*(void (**)(char *, uint64_t, double))(v22 + 8))(v25, v17, v29);
    return outlined destroy of NavigationAuthority?((uint64_t)&v96);
  }
  if (*((void *)&v96 + 1) == 2)
  {
    (*(void (**)(char *, uint64_t, double))(v22 + 8))(v25, v17, v29);
    return outlined destroy of NavigationAuthority??((uint64_t)&v96);
  }
  outlined init with take of NavigationAuthority((uint64_t)&v96, (uint64_t)v105);
  int v30 = *(_DWORD *)(v1 + 12);
  int v31 = *MEMORY[0x1E4F4E7A0];
  unsigned int v73 = v25;
  if (v30 == v31) {
    int v32 = 0;
  }
  else {
    int v32 = *(unsigned __int8 *)AGGraphGetValue();
  }
  int v33 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 76));
  int v71 = v32;
  int v69 = v32 ^ v33;
  MEMORY[0x18C113DA0](v17);
  uint64_t v34 = *(int *)(a1 + 72);
  uint64_t v72 = v1;
  CGFloat v35 = v81;
  CGFloat v36 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
  v36(v81, v27 + v34, v5);
  uint64_t v37 = v84;
  CGFloat v38 = v78;
  uint64_t v39 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v78, v85, v86);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v39);
  double v40 = v83;
  double v41 = &v83[*(int *)(TupleTypeMetadata2 + 48)];
  v36(v83, (uint64_t)v35, v5);
  uint64_t v70 = v41;
  long long v68 = (void (*)(char *, char *, uint64_t))v36;
  v36(v41, (uint64_t)v38, v5);
  uint64_t v42 = v84;
  double v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  if (v43(v40, 1, v86) != 1)
  {
    uint64_t v51 = v76;
    v68(v76, v83, v5);
    int v52 = v70;
    BOOL v53 = v43;
    uint64_t v54 = v86;
    int v55 = (void (**)(char *, uint64_t))(v42 + 8);
    if (v53(v70, 1, v86) != 1)
    {
      uint64_t v59 = v42 + 32;
      long long v58 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      uint64_t v60 = (uint64_t)v51;
      int v61 = v74;
      v58(v74, v52, v54);
      uint64_t v62 = v54;
      int v50 = static SelectionManagerBox.== infix(_:_:)(v60, v61, v77, v80);
      uint64_t v63 = *(void (**)(char *, uint64_t))(v59 - 24);
      v63(v61, v62);
      int v64 = *(void (**)(char *, uint64_t))(v82 + 8);
      v64(v78, v5);
      v64(v81, v5);
      v63(v76, v62);
      uint64_t v65 = v5;
      uint64_t v48 = v77;
      v64(v83, v65);
      uint64_t v46 = v72;
      uint64_t v47 = v73;
      int v49 = v71;
      if (!(v69 & 1 | ((v50 & 1) == 0))) {
        goto LABEL_30;
      }
LABEL_22:
      if (UpdateCycleDetector.dispatch(label:isDebug:)())
      {
        if (((v50 | v49) & 1) == 0)
        {
          AGGraphClearUpdate();
          closure #1 in NavigableListModifier.BoundListSelectionDetector.updateValue()(&v96);
          AGGraphSetUpdate();
          uint64_t Value = (char *)AGGraphGetValue();
          static NavigationRequest.boundSelectionChange<A>(list:newValue:selectionPopsSubsequentColumn:transaction:)(v111, *Value, v48, (uint64_t)&v96);
          if (*(unsigned char *)(v46 + 36) != 1)
          {
            long long v93 = v102;
            long long v94 = v103;
            uint64_t v95 = v104;
            long long v89 = v98;
            long long v90 = v99;
            long long v91 = v100;
            long long v92 = v101;
            long long v87 = v96;
            long long v88 = v97;
            NavigationAuthority.enqueueRequest(_:)(&v87);
          }
          swift_release();
          outlined release of NavigationRequest((uint64_t)&v96);
        }
        if (v69)
        {
          static NavigationRequest.editingChanged<A>(forSelectionType:list:newValue:)((uint64_t)v111, v49, v48, (uint64_t)&v96);
          long long v93 = v102;
          long long v94 = v103;
          uint64_t v95 = v104;
          long long v89 = v98;
          long long v90 = v99;
          long long v91 = v100;
          long long v92 = v101;
          long long v87 = v96;
          long long v88 = v97;
          NavigationAuthority.enqueueRequest(_:)(&v87);
          outlined release of NavigationRequest((uint64_t)&v96);
        }
      }
      goto LABEL_30;
    }
    uint64_t v56 = *(void (**)(char *, uint64_t))(v82 + 8);
    v56(v78, v5);
    v56(v81, v5);
    (*v55)(v51, v54);
    uint64_t v46 = v72;
    uint64_t v47 = v73;
LABEL_21:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v83, TupleTypeMetadata2);
    int v50 = 0;
    uint64_t v48 = v77;
    int v49 = v71;
    goto LABEL_22;
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v82 + 8);
  v44(v38, v5);
  v44(v81, v5);
  unsigned int v45 = v43(v70, 1, v86);
  uint64_t v46 = v72;
  uint64_t v47 = v73;
  if (v45 != 1) {
    goto LABEL_21;
  }
  v44(v83, v5);
  uint64_t v48 = v77;
  int v49 = v71;
  if (v69)
  {
    int v50 = 1;
    goto LABEL_22;
  }
LABEL_30:
  uint64_t v66 = v85;
  $defer #2 <A>() in NavigableListModifier.BoundListSelectionDetector.updateValue()(v46, v85);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v66, v86);
  outlined destroy of NavigationAuthority((uint64_t)v105);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v47, v17);
  uint64_t result = type metadata accessor for NavigableListModifier.BoundListSelectionDetector();
  *(unsigned char *)(v46 + *(int *)(result + 76)) = v49;
  return result;
}

uint64_t NavigableListModifier.BoundListSelectionDetector.selection.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

long long *NavigableListModifier.BoundListSelectionDetector.listKey.getter@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  uint64_t result = (long long *)AGGraphGetWeakValue();
  if (result)
  {
    long long v3 = *result;
    long long v4 = result[1];
    long long v5 = result[2];
  }
  else
  {
    long long v5 = xmmword_18834C6B0;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double NavigableListModifier.BoundListSelectionDetector.navigationAuthority.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t closure #1 in NavigableListModifier.BoundListSelectionDetector.updateValue()@<X0>(void *a1@<X8>)
{
  type metadata accessor for NavigableListModifier.BoundListSelectionDetector();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t $defer #2 <A>() in NavigableListModifier.BoundListSelectionDetector.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for NavigableListModifier.BoundListSelectionDetector() + 72);
  uint64_t v4 = type metadata accessor for SelectionManagerBox();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  uint64_t v8 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, a2, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(v3, 0, 1, v4);
}

uint64_t static NavigableListModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  type metadata accessor for SelectionManagerBox();
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v72 = (char *)&v58 - v9;
  uint64_t v75 = a3;
  uint64_t v10 = type metadata accessor for NavigableListModifier.BoundListSelectionDetector();
  uint64_t v74 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v58 - v11;
  int v13 = *a1;
  unint64_t v14 = lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v73 = v14;
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
    uint64_t result = PropertyList.subscript.getter();
    if (v78 == 1)
    {
      uint64_t v69 = v10;
      MEMORY[0x1F4188790](result);
      LODWORD(v78) = v13;
      type metadata accessor for NavigableListModifier();
      type metadata accessor for _GraphValue();
      long long v68 = v12;
      uint64_t v16 = MEMORY[0x1E4F41808];
      _GraphValue.subscript.getter();
      type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v16, MEMORY[0x1E4F3F590]);
      uint64_t v17 = _GraphValue.value.getter();
      LODWORD(v67) = v17;
      MEMORY[0x1F4188790](v17);
      LODWORD(v78) = v13;
      type metadata accessor for Binding();
      type metadata accessor for Optional();
      _GraphValue.subscript.getter();
      type metadata accessor for _GraphValue();
      uint64_t v18 = _GraphValue.value.getter();
      int v71 = v18;
      MEMORY[0x1F4188790](v18);
      uint64_t v70 = a4;
      LODWORD(v78) = v13;
      type metadata accessor for NavigationStateHost();
      _GraphValue.subscript.getter();
      type metadata accessor for _GraphValue<NavigationStateHost>();
      LODWORD(v65) = _GraphValue.value.getter();
      lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
      PropertyList.subscript.getter();
      char v19 = v78;
      int v66 = v78;
      lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.getter();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v20 = swift_release();
      int v21 = v71;
      int v79 = v67;
      int v80 = v71;
      MEMORY[0x1F4188790](v20);
      uint64_t v22 = type metadata accessor for NavigableListModifier.ListKey();
      swift_getWitnessTable();
      int v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F4E740];
      type metadata accessor for NavigationState.ListKey??(0, &lazy cache variable for type metadata for Attribute<NavigationState.ListKey?>, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)&v55, v22, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
      int v25 = v76;
      LODWORD(v63) = v76;
      unint64_t v67 = lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.getter();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = xmmword_18834BB90;
      uint64_t v77 = 0;
      int v79 = v65;
      int v80 = v25;
      LODWORD(v81) = v21;
      BYTE4(v81) = v19;
      uint64_t v26 = _s7SwiftUI19NavigationAuthorityVSgWObTm_0((uint64_t)&v76, (uint64_t)&v82, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      char v84 = 0;
      MEMORY[0x1F4188790](v26);
      uint64_t v27 = type metadata accessor for NavigableListModifier.EnsureNavigationAuthority();
      uint64_t v56 = v27;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for NavigationState.ListKey??(0, &lazy cache variable for type metadata for Attribute<NavigationAuthority?>, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v64);
      uint64_t v28 = MEMORY[0x1E4FBC248];
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)&v55, v27, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v27 - 8) + 8))(&v78, v27);
      LODWORD(v64) = v76;
      uint64_t v65 = AGCreateWeakAttribute();
      int v31 = *(_DWORD *)(a2 + 8);
      uint64_t v32 = *(void *)(a2 + 16);
      uint64_t v33 = *(void *)(a2 + 40);
      uint64_t v78 = *(void *)a2;
      int v79 = v31;
      uint64_t v81 = v32;
      long long v82 = *(_OWORD *)(a2 + 24);
      uint64_t v83 = v33;
      swift_getKeyPath();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      int v34 = _GraphInputs.mapEnvironment<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v35 = swift_release();
      LODWORD(v78) = v34;
      MEMORY[0x1F4188790](v35);
      uint64_t IsEditing = type metadata accessor for NavigableListModifier.IsEditing();
      uint64_t v56 = IsEditing;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v63 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E740];
      type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v55, IsEditing, v28, v37, MEMORY[0x1E4FBC278], v38);
      uint64_t v62 = 0;
      int v61 = v76;
      uint64_t v60 = AGCreateWeakAttribute();
      LODWORD(v28) = *(_DWORD *)(a2 + 8);
      uint64_t v40 = *(void *)(a2 + 16);
      LODWORD(v22) = *(_DWORD *)(a2 + 24);
      LODWORD(v33) = *(_DWORD *)(a2 + 28);
      unsigned int v41 = *(_DWORD *)(a2 + 32);
      unsigned int v42 = *(_DWORD *)(a2 + 36);
      uint64_t v43 = *(void *)(a2 + 40);
      uint64_t v78 = *(void *)a2;
      uint64_t v39 = v78;
      int v79 = v28;
      uint64_t v81 = v40;
      *(void *)&long long v82 = __PAIR64__(v33, v22);
      *((void *)&v82 + 1) = __PAIR64__(v42, v41);
      uint64_t v83 = v43;
      int v59 = _GraphInputs.phase.getter();
      uint64_t v78 = v39;
      int v79 = v28;
      uint64_t v81 = v40;
      *(void *)&long long v82 = __PAIR64__(v33, v22);
      *((void *)&v82 + 1) = __PAIR64__(v42, v41);
      uint64_t v83 = v43;
      int v58 = _GraphInputs.transaction.getter();
      uint64_t v78 = v39;
      int v79 = v28;
      uint64_t v81 = v40;
      *(void *)&long long v82 = __PAIR64__(v33, v22);
      *((void *)&v82 + 1) = __PAIR64__(v42, v41);
      uint64_t v83 = v43;
      swift_getKeyPath();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      int v44 = _GraphInputs.mapEnvironment<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      UpdateCycleDetector.init()();
      *(void *)&long long v76 = v78;
      DWORD2(v76) = v79;
      BYTE12(v76) = v80;
      uint64_t v45 = v75;
      uint64_t v46 = v70;
      uint64_t v47 = type metadata accessor for SelectionManagerBox();
      uint64_t v48 = (uint64_t)v72;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v72, 1, 1, v47);
      uint64_t v56 = v45;
      uint64_t WitnessTable = v46;
      uint64_t v49 = (uint64_t)v68;
      uint64_t v50 = v65;
      uint64_t v51 = NavigableListModifier.BoundListSelectionDetector.init(listKey:selection:isEditing:navigationAuthority:phase:transaction:selectionPopsSubsequentColumn:isExtractionPass:cycleDetector:lastResetSeed:lastSelection:wasEditing:)(v65, v71, v61, v60, v59, v58, v44, v66, (uint64_t)v68, (uint64_t)&v76, 0, v48, 0);
      MEMORY[0x1F4188790](v51);
      uint64_t v52 = v69;
      uint64_t v56 = v69;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for _GraphValue<Namespace.ID>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, v63);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v49, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v55, v52, MEMORY[0x1E4FBC248], v53, MEMORY[0x1E4FBC278], v54);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v49, v52);
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      uint64_t v78 = v50;
      PropertyList.subscript.setter();
      uint64_t v78 = AGCreateWeakAttribute();
      return PropertyList.subscript.setter();
    }
  }
  return result;
}

uint64_t type metadata accessor for NavigableListModifier.BoundListSelectionDetector()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NavigableListModifier.IsEditing()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for NavigableListModifier.EnsureNavigationAuthority(uint64_t result)
{
  if (*(void *)(result + 32) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for NavigableListModifier.EnsureNavigationAuthority()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NavigableListModifier.ListKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for NavigableListModifier.BoundListSelectionDetector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  unint64_t v5 = (((((((((((((result + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
          + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 31) & 0xFFFFFFFFFFFFFFFCLL)
      + v4
      + 4) & ~v4;
  unint64_t v6 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v7 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  unsigned int v8 = *(unsigned __int8 *)(v5 + v6);
  if (v8 <= 2)
  {
    if (v8 == 2)
    {
LABEL_13:
      uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
      return v9(v5, v2);
    }
    if (v8 == 1)
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))((((((((((((((result + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 31) & 0xFFFFFFFFFFFFFFFCLL)+ v4+ 4) & ~v4, 1, v2);
      uint64_t v3 = v10;
      if (result) {
        return result;
      }
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for _GraphValue<NavigationStateHost>()
{
  if (!lazy cache variable for type metadata for _GraphValue<NavigationStateHost>)
  {
    type metadata accessor for NavigationStateHost();
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationStateHost>);
    }
  }
}

uint64_t closure #3 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigableListModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  _OWORD v8[2] = v2;
  uint64_t v4 = type metadata accessor for NavigationStateHost();
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

uint64_t closure #1 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  _OWORD v6[2] = type metadata accessor for NavigableListModifier();
  uint64_t v2 = MEMORY[0x1E4F41808];
  uint64_t v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6[5];
}

uint64_t closure #2 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigableListModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v7[2] = v2;
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v9;
}

uint64_t NavigableListModifier.init(id:selection:stateHost:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = type metadata accessor for NavigableListModifier();
  uint64_t v8 = (char *)a4 + *(int *)(v7 + 36);
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  *(void *)((char *)a4 + *(int *)(v7 + 40)) = a3;
  return result;
}

uint64_t type metadata accessor for NavigableListModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for _TaskValueModifier()
{
  uint64_t result = type metadata accessor for TaskPriority();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void StackScrollViewContent.horizontalPadding.getter()
{
  if (one-time initialization token for isPad != -1) {
    swift_once();
  }
  if (static ClarityUIMetrics.isPad == 1)
  {
    id v0 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v0, sel_bounds);

    GeometryProxy.size.getter();
  }
  else if (one-time initialization token for componentHorizontalPadding != -1)
  {
    swift_once();
  }
}

uint64_t Scene.environment<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v9 = a1;
  Scene.environment<A>(_:_:)(KeyPath, (uint64_t)&v9, a2, a4);
  return swift_release();
}

uint64_t Scene.allowsSecureDrawing(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (void *)swift_getKeyPath();
  char v8 = a1;
  Scene.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t static CommandsModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = a1[2];
  unsigned int v9 = *((_DWORD *)a1 + 6);
  unsigned int v8 = *((_DWORD *)a1 + 7);
  unsigned int v10 = *((_DWORD *)a1 + 8);
  unsigned int v30 = *((_DWORD *)a1 + 9);
  uint64_t v11 = a1[5];
  int v12 = *((_DWORD *)a1 + 14);
  uint64_t v13 = a1[6];
  uint64_t v41 = v13;
  int v14 = v12;
  int v42 = v12;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    int v25 = v14;
    swift_retain();
    uint64_t v24 = v7;
    swift_retain();
    swift_bridgeObjectRetain();
    PreferencesInputs.hostKeys.getter();
    PreferencesInputs.init(hostKeys:)();
    uint64_t v41 = v5;
    int v42 = v6;
    uint64_t v43 = v7;
    *(void *)&long long v44 = __PAIR64__(v8, v9);
    unsigned int v23 = v10;
    *((void *)&v44 + 1) = __PAIR64__(v30, v10);
    uint64_t v45 = v11;
    uint64_t v46 = v13;
    int v47 = v14;
    PreferenceKeys.add(_:)();
    type metadata accessor for CommandsModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    uint64_t v31 = v5;
    int v32 = v6;
    uint64_t v33 = v7;
    long long v34 = v44;
    uint64_t v35 = v11;
    uint64_t v36 = v13;
    int v15 = v14;
    int v37 = v14;
    uint64_t v16 = (*(void *(**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v39, v38, &v31, a3, a4);
    uint64_t v17 = v39;
    int v18 = v40;
    uint64_t v31 = v5;
    int v32 = v6;
    uint64_t v33 = v24;
    *(void *)&long long v34 = __PAIR64__(v8, v9);
    *((void *)&v34 + 1) = __PAIR64__(v30, v23);
    uint64_t v35 = v11;
    uint64_t v36 = v13;
    int v37 = v25;
    ((void (*)(uint64_t *__return_ptr, void *, uint64_t *))a2)(&v39, v16, &v31);
    uint64_t v31 = v17;
    int v32 = v18;
    uint64_t v19 = PreferencesOutputs.subscript.getter();
    uint64_t v20 = swift_bridgeObjectRelease();
    if ((v19 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      uint64_t v31 = v13;
      int v32 = v15;
      MEMORY[0x1F4188790](v20);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t result = swift_release();
    int v22 = v40;
    *(void *)a5 = v39;
    *(_DWORD *)(a5 + 8) = v22;
  }
  else
  {
    uint64_t v41 = v5;
    int v42 = v6;
    uint64_t v43 = v7;
    *(void *)&long long v44 = __PAIR64__(v8, v9);
    *((void *)&v44 + 1) = __PAIR64__(v30, v10);
    uint64_t v45 = v11;
    uint64_t v46 = v13;
    int v47 = v14;
    return a2();
  }
  return result;
}

uint64_t Scene.extendedLaunchTestName(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  type metadata accessor for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>();
  return Scene.modifier<A>(_:)(v8, a3, v6, a4);
}

void type metadata accessor for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>);
    }
  }
}

uint64_t Scene.commands<A>(content:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CommandsModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  Scene.modifier<A>(_:)(v15, a3, v11, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for CommandsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Scene.environment<A>(_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBBC10] + *a1 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a2, v6, v12);
  swift_retain();
  _EnvironmentKeyWritingModifier.init(keyPath:value:)();
  Scene.modifier<A>(_:)(v14, a3, v10, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t Scene.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t initializeWithCopy for WindowGroup(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  uint64_t v13 = v12 + 39;
  uint64_t v14 = v12 + 39 + a1;
  unint64_t v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = (void *)(v14 & v15);
  uint64_t v17 = (unsigned __int8 *)(((unint64_t)a2 + v13) & v15);
  if (*(void *)(v11 + 64) <= 0x10uLL) {
    uint64_t v18 = 16;
  }
  else {
    uint64_t v18 = *(void *)(v11 + 64);
  }
  unsigned int v19 = v17[v18];
  unsigned int v20 = v19 - 2;
  if (v19 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v17;
        goto LABEL_16;
      case 2:
        int v22 = *(unsigned __int16 *)v17;
        goto LABEL_16;
      case 3:
        int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
        goto LABEL_16;
      case 4:
        int v22 = *(_DWORD *)v17;
LABEL_16:
        int v23 = (v22 | (v20 << (8 * v18))) + 2;
        unsigned int v19 = v22 + 2;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  if (v19 == 1)
  {
    uint64_t v24 = *((void *)v17 + 1);
    *uint64_t v16 = *(void *)v17;
    *(void *)((v14 & v15) + 8) = v24;
    swift_retain();
    char v25 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *))(v11 + 16))(v16, v17);
    char v25 = 0;
  }
  *((unsigned char *)v16 + v18) = v25;
  uint64_t v26 = (void *)(((unint64_t)v16 + v18 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((unint64_t)&v17[v18 + 8] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  uint64_t v28 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v28;
  unint64_t v30 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (unint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = *v31;
  swift_bridgeObjectRetain();
  if (v32 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    unint64_t v33 = v31[1];
    *(void *)unint64_t v30 = v32;
    *(void *)(v30 + 8) = v33;
    swift_retain();
  }
  return a1;
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance TupleCommandContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static TupleCommandContent._makeCommands(content:inputs:)(a1, a2, a3);
}

uint64_t UIApplicationDelegateAdaptor<>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(void))
{
  a4(0);
  static AppGraph.delegateBoCGFloat x = a5();

  return swift_release();
}

uint64_t ObservableObjectFallbackDelegateBox.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = specialized ObservableObjectFallbackDelegateBox.init()(v0);
  swift_release();
  return v1;
}

uint64_t specialized ObservableObjectFallbackDelegateBox.init()(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  *(void *)(a1 + 16) = objc_msgSend(v2, sel_init);
  return a1;
}

uint64_t type metadata accessor for ObservableFallbackDelegateBox()
{
  return __swift_instantiateGenericMetadata();
}

id one-time initialization function for defaultValue()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C110]), sel_initWithConcurrencyType_, 2);
  static NSManagedObjectContextEnvironmentKey.defaultuint64_t Value = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for clientNeedsOscillationSuppression()
{
  static Semantics.v6.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  clientNeedsOscillationSuppression = result & 1;
  return result;
}

uint64_t one-time initialization function for willPresent()
{
  uint64_t result = MEMORY[0x18C115780](0xD00000000000001ALL, 0x800000018833DA10);
  static SheetInspectorBridgeNotifications.willPresent = result;
  return result;
}

uint64_t TupleCommandContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t type metadata completion function for CellHostingView()
{
  return swift_initClassMetadata2();
}

uint64_t partial apply for closure #1 in AppSceneDelegate.scene(_:willConnectTo:options:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 40), *(uint64_t **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), a1);
}

uint64_t closure #1 in AppSceneDelegate.scene(_:willConnectTo:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X5>, void *a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v13 = *(void *)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  unsigned __int8 v15 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID?(*(void *)a2, v14, v15);
  id v16 = objc_msgSend(a5, sel_role);
  uint64_t v17 = specialized AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v13, v14, v15, a3, a4, v16, a6, a1, a1);

  uint64_t result = outlined consume of SceneID?(v13, v14, v15);
  *a7 = v17;
  return result;
}

uint64_t specialized AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, uint64_t *a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v326 = a8;
  v329 = a7;
  id v338 = a6;
  v332 = a5;
  uint64_t v331 = type metadata accessor for Logger();
  uint64_t v328 = *(void *)(v331 - 8);
  MEMORY[0x1F4188790](v331);
  uint64_t v14 = (char *)&v318 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PPTTestHost?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8);
  v322 = (char *)&v318 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v321 = (uint64_t)&v318 - v19;
  MEMORY[0x1F4188790](v20);
  v324 = (char *)&v318 - v21;
  MEMORY[0x1F4188790](v22);
  v325 = (char *)&v318 - v23;
  type metadata accessor for PPTTestHost?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v15);
  double v25 = MEMORY[0x1F4188790](v24 - 8);
  v330 = (uint8_t *)&v318 - v26;
  id v27 = objc_msgSend(a4, sel_userActivities, v25);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
  lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type NSUserActivity and conformance NSObject, &lazy cache variable for type metadata for NSUserActivity);
  uint64_t v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v335 = (void *)specialized Collection.first.getter(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = static AppGraph.shared;
  if (!static AppGraph.shared)
  {
LABEL_265:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
LABEL_266:
    __break(1u);
    return result;
  }
  v323 = v14;
  unsigned __int8 v30 = a3;
  int v31 = *(_DWORD *)(static AppGraph.shared + 204);
  LODWORD(v327) = *MEMORY[0x1E4F4E7A0];
  if (v31 == v327)
  {
    unint64_t v32 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    unint64_t v32 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t v387 = 0;
  memset(v386, 0, sizeof(v386));
  uint64_t v333 = v29;
  v339 = v32;
  if (a3 != 255)
  {
    uint64_t v55 = v32[2];
    if (!v55)
    {
      swift_retain();
LABEL_58:
      memset(v340, 0, sizeof(v340));
      goto LABEL_103;
    }
    uint64_t v56 = (uint64_t)(v32 + 4);
    LODWORD(v337) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SceneList.Item(v56, (uint64_t)v385);
      uint64_t v58 = *((void *)&v385[8] + 1);
      uint64_t v59 = *(void *)&v385[9];
      if ((BYTE8(v385[9]) & 1) == 0) {
        break;
      }
      char v60 = v385[9];
      if (v30)
      {
        if (*((void *)&v385[8] + 1) == a1 && LOBYTE(v385[9]) == v337) {
          goto LABEL_78;
        }
        goto LABEL_35;
      }
      *(void *)v340 = _typeName(_:qualified:)();
      *(void *)&v340[8] = v61;
      v62._countAndFlagsBits = 45;
      v62._object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      v375[0] = v60;
      v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      uint64_t v64 = *(void *)v340;
      uint64_t v59 = *(void *)&v340[8];
      swift_bridgeObjectRetain();
      uint64_t v65 = a2;
      if (v64 == a1) {
        goto LABEL_48;
      }
LABEL_49:
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v70) {
        goto LABEL_78;
      }
LABEL_35:
      outlined destroy of SceneList.Item((uint64_t)v385);
      v56 += 280;
      if (!--v55)
      {
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
    }
    if ((v30 & 1) == 0)
    {
      BOOL v66 = *((void *)&v385[8] + 1) == a1 && *(void *)&v385[9] == a2;
      if (v66 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_78;
      }
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    *(void *)v340 = _typeName(_:qualified:)();
    *(void *)&v340[8] = v67;
    v68._countAndFlagsBits = 45;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    v375[0] = (_BYTE)v337;
    v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v69);
    unint64_t v32 = v339;
    swift_bridgeObjectRelease();
    uint64_t v65 = *(void *)&v340[8];
    if (v58 != *(void *)v340) {
      goto LABEL_49;
    }
LABEL_48:
    if (v59 == v65)
    {
      swift_bridgeObjectRelease_n();
LABEL_78:
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    goto LABEL_49;
  }
  swift_retain();
  uint64_t v33 = specialized AppSceneDelegate.openWindowByIDSceneID(from:)(v335);
  if (v35 == 0xFF)
  {
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;
    if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v73 == v74)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v75 & 1) == 0)
      {
        uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v98 = v97;
        if (v96 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v98 == v99)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v100 & 1) == 0) {
            goto LABEL_105;
          }
        }
        long long v76 = v32;
        uint64_t v101 = v32[2];
        if (v101)
        {
          uint64_t v102 = (uint64_t)(v76 + 4);
          swift_bridgeObjectRetain();
          while (1)
          {
            outlined init with copy of SceneList.Item(v102, (uint64_t)v385);
            outlined init with copy of SceneList.Item.Value((uint64_t)v385, (uint64_t)v340);
            switch(v340[128])
            {
              case 2:
                outlined destroy of SceneList.Item.Value((uint64_t)v340);
                goto LABEL_90;
              case 3:
                goto LABEL_100;
              case 4:
                goto LABEL_264;
              case 5:
                uint64_t v91 = *(void *)v340;
                uint64_t v92 = *(void *)&v340[8];
                char v93 = v340[16];
                unint64_t v115 = *(void *)&v340[32];
                if (*(void *)&v340[32] < 2uLL)
                {
                  outlined consume of SceneID(*(uint64_t *)v340, *(uint64_t *)&v340[8], v340[16]);
                }
                else
                {
                  if (*(void *)&v340[32] == 2)
                  {
LABEL_261:
                    outlined consume of SceneID(v91, v92, v93);
                    unint64_t v32 = v339;
                    swift_bridgeObjectRelease();
                    swift_release();
LABEL_79:
                    memcpy(v340, v385, sizeof(v340));
LABEL_103:
                    outlined destroy of RootEnvironmentModifier?((uint64_t)v386, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
                    goto LABEL_104;
                  }
                  uint64_t v116 = *(void *)&v340[24];
                  outlined consume of SceneID(*(uint64_t *)v340, *(uint64_t *)&v340[8], v340[16]);
                  outlined consume of UISceneAdaptorConfiguration.Kind(v116, v115);
                }
LABEL_100:
                swift_release();
LABEL_90:
                outlined destroy of SceneList.Item((uint64_t)v385);
                v102 += 280;
                if (!--v101)
                {
LABEL_101:
                  long long v76 = v339;
                  swift_bridgeObjectRelease();
                  goto LABEL_102;
                }
                break;
              case 6:
                uint64_t v111 = *(void *)&v340[24];
                uint64_t v112 = *(void *)&v340[32];
                char v113 = v340[40];
                uint64_t v114 = *(void *)&v340[48];
                swift_release();
                swift_bridgeObjectRelease();
                outlined consume of Text?(v111, v112, v113, v114);
                goto LABEL_90;
              case 7:
                *(_OWORD *)&v375[64] = *(_OWORD *)&v340[64];
                *(_OWORD *)&v375[80] = *(_OWORD *)&v340[80];
                *(_OWORD *)&v375[96] = *(_OWORD *)&v340[96];
                *(_OWORD *)&v375[112] = *(_OWORD *)&v340[112];
                *(_OWORD *)v375 = *(_OWORD *)v340;
                *(_OWORD *)&v375[16] = *(_OWORD *)&v340[16];
                *(_OWORD *)&v375[32] = *(_OWORD *)&v340[32];
                *(_OWORD *)&v375[48] = *(_OWORD *)&v340[48];
                outlined release of DocumentIntroductionConfiguration(v375);
                goto LABEL_90;
              case 8:
                uint64_t v103 = *(void *)&v340[24];
                uint64_t v104 = *(void *)&v340[32];
                char v105 = v340[40];
                swift_release();
                swift_release();
                outlined consume of Text.Storage(v103, v104, v105);
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_90;
              default:
                uint64_t v106 = *(void *)&v340[8];
                uint64_t v107 = *(void *)&v340[16];
                char v108 = v340[24];
                uint64_t v109 = *(void *)&v340[32];
                uint64_t v110 = *(void *)&v340[48];
                swift_release();
                outlined consume of Text?(v106, v107, v108, v109);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v110);
                goto LABEL_90;
            }
          }
        }
LABEL_102:
        memset(v340, 0, sizeof(v340));
        unint64_t v32 = v76;
        goto LABEL_103;
      }
    }
    long long v76 = v32;
    uint64_t v77 = v32[2];
    if (v77)
    {
      uint64_t v78 = (uint64_t)(v76 + 4);
      swift_bridgeObjectRetain();
      while (2)
      {
        outlined init with copy of SceneList.Item(v78, (uint64_t)v385);
        outlined init with copy of SceneList.Item.Value((uint64_t)v385, (uint64_t)v340);
        switch(v340[128])
        {
          case 2:
            outlined destroy of SceneList.Item.Value((uint64_t)v340);
            goto LABEL_63;
          case 3:
            goto LABEL_74;
          case 4:
            goto LABEL_264;
          case 5:
            uint64_t v91 = *(void *)v340;
            uint64_t v92 = *(void *)&v340[8];
            char v93 = v340[16];
            unint64_t v94 = *(void *)&v340[32];
            if (!*(void *)&v340[32] || *(void *)&v340[32] == 2)
            {
              outlined consume of SceneID(*(uint64_t *)v340, *(uint64_t *)&v340[8], v340[16]);
            }
            else
            {
              if (*(void *)&v340[32] == 1) {
                goto LABEL_261;
              }
              uint64_t v95 = *(void *)&v340[24];
              outlined consume of SceneID(*(uint64_t *)v340, *(uint64_t *)&v340[8], v340[16]);
              outlined consume of UISceneAdaptorConfiguration.Kind(v95, v94);
            }
LABEL_74:
            swift_release();
LABEL_63:
            outlined destroy of SceneList.Item((uint64_t)v385);
            v78 += 280;
            if (--v77) {
              continue;
            }
            goto LABEL_101;
          case 6:
            uint64_t v87 = *(void *)&v340[24];
            uint64_t v88 = *(void *)&v340[32];
            char v89 = v340[40];
            uint64_t v90 = *(void *)&v340[48];
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of Text?(v87, v88, v89, v90);
            goto LABEL_63;
          case 7:
            *(_OWORD *)&v375[64] = *(_OWORD *)&v340[64];
            *(_OWORD *)&v375[80] = *(_OWORD *)&v340[80];
            *(_OWORD *)&v375[96] = *(_OWORD *)&v340[96];
            *(_OWORD *)&v375[112] = *(_OWORD *)&v340[112];
            *(_OWORD *)v375 = *(_OWORD *)v340;
            *(_OWORD *)&v375[16] = *(_OWORD *)&v340[16];
            *(_OWORD *)&v375[32] = *(_OWORD *)&v340[32];
            *(_OWORD *)&v375[48] = *(_OWORD *)&v340[48];
            outlined release of DocumentIntroductionConfiguration(v375);
            goto LABEL_63;
          case 8:
            uint64_t v79 = *(void *)&v340[24];
            uint64_t v80 = *(void *)&v340[32];
            char v81 = v340[40];
            swift_release();
            swift_release();
            outlined consume of Text.Storage(v79, v80, v81);
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_63;
          default:
            uint64_t v82 = *(void *)&v340[8];
            uint64_t v83 = *(void *)&v340[16];
            char v84 = v340[24];
            uint64_t v85 = *(void *)&v340[32];
            uint64_t v86 = *(void *)&v340[48];
            swift_release();
            outlined consume of Text?(v82, v83, v84, v85);
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v86);
            goto LABEL_63;
        }
      }
    }
    goto LABEL_102;
  }
  uint64_t v36 = v33;
  uint64_t v37 = v34;
  unsigned __int8 v38 = v35;
  uint64_t v39 = v32[2];
  if (!v39)
  {
LABEL_76:
    memset(v340, 0, sizeof(v340));
    goto LABEL_85;
  }
  uint64_t v40 = (uint64_t)(v32 + 4);
  LODWORD(v337) = v34;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v40, (uint64_t)v385);
    uint64_t v42 = *((void *)&v385[8] + 1);
    uint64_t v43 = *(void *)&v385[9];
    if ((BYTE8(v385[9]) & 1) == 0) {
      break;
    }
    char v44 = v385[9];
    if ((v38 & 1) == 0)
    {
      *(void *)v340 = _typeName(_:qualified:)();
      *(void *)&v340[8] = v45;
      v46._countAndFlagsBits = 45;
      v46._object = (void *)0xE100000000000000;
      String.append(_:)(v46);
      v375[0] = v44;
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      uint64_t v48 = *(void *)v340;
      uint64_t v43 = *(void *)&v340[8];
      swift_bridgeObjectRetain();
      uint64_t v49 = v37;
      if (v48 == v36) {
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    if (*((void *)&v385[8] + 1) == v36 && LOBYTE(v385[9]) == v337) {
      goto LABEL_84;
    }
LABEL_13:
    outlined destroy of SceneList.Item((uint64_t)v385);
    v40 += 280;
    if (!--v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_76;
    }
  }
  if ((v38 & 1) == 0)
  {
    BOOL v50 = *((void *)&v385[8] + 1) == v36 && *(void *)&v385[9] == v37;
    if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_84;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  *(void *)v340 = _typeName(_:qualified:)();
  *(void *)&v340[8] = v51;
  v52._countAndFlagsBits = 45;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  v375[0] = (_BYTE)v337;
  v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v53);
  unint64_t v32 = v339;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)&v340[8];
  if (v42 != *(void *)v340) {
    goto LABEL_27;
  }
LABEL_26:
  if (v43 != v49)
  {
LABEL_27:
    char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_84;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease_n();
LABEL_84:
  swift_bridgeObjectRelease();
  memcpy(v340, v385, sizeof(v340));
LABEL_85:
  outlined destroy of RootEnvironmentModifier?((uint64_t)v386, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
  outlined consume of SceneID?(v36, v37, v38);
LABEL_104:
  outlined init with take of AnyHashable?((uint64_t)v340, (uint64_t)v386, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
LABEL_105:
  if (one-time initialization token for carPlay != -1) {
    swift_once();
  }
  uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v119 = v118;
  if (v117 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v119 == v120) {
    char v121 = 1;
  }
  else {
    char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v334 = swift_allocObject();
  v337 = (void *)(v334 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v121)
  {
    CGFloat v122 = v32;
    uint64_t v123 = v32[2];
    if (v123)
    {
      uint64_t v124 = (uint64_t)(v122 + 4);
      swift_bridgeObjectRetain();
      while (2)
      {
        outlined init with copy of SceneList.Item(v124, (uint64_t)v385);
        outlined init with copy of SceneList.Item.Value((uint64_t)v385, (uint64_t)v375);
        switch(v375[128])
        {
          case 2:
            outlined destroy of SceneList.Item.Value((uint64_t)v375);
            goto LABEL_115;
          case 3:
            goto LABEL_126;
          case 4:
            goto LABEL_264;
          case 5:
            unint64_t v137 = *(void *)&v375[32];
            if (*(void *)&v375[32] == 1 || *(void *)&v375[32] == 2)
            {
              outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
            }
            else
            {
              if (!*(void *)&v375[32])
              {
                outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
                unint64_t v32 = v339;
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_130;
              }
              uint64_t v138 = *(void *)&v375[24];
              outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
              outlined consume of UISceneAdaptorConfiguration.Kind(v138, v137);
            }
LABEL_126:
            swift_release();
LABEL_115:
            outlined destroy of SceneList.Item((uint64_t)v385);
            v124 += 280;
            if (--v123) {
              continue;
            }
            CGFloat v122 = v339;
            swift_bridgeObjectRelease();
            break;
          case 6:
            uint64_t v133 = *(void *)&v375[24];
            uint64_t v134 = *(void *)&v375[32];
            char v135 = v375[40];
            uint64_t v136 = *(void *)&v375[48];
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of Text?(v133, v134, v135, v136);
            goto LABEL_115;
          case 7:
            long long v353 = *(_OWORD *)&v375[64];
            long long v354 = *(_OWORD *)&v375[80];
            long long v355 = *(_OWORD *)&v375[96];
            long long v356 = *(_OWORD *)&v375[112];
            long long v349 = *(_OWORD *)v375;
            long long v350 = *(_OWORD *)&v375[16];
            long long v351 = *(_OWORD *)&v375[32];
            long long v352 = *(_OWORD *)&v375[48];
            outlined release of DocumentIntroductionConfiguration(&v349);
            goto LABEL_115;
          case 8:
            uint64_t v125 = *(void *)&v375[24];
            uint64_t v126 = *(void *)&v375[32];
            char v127 = v375[40];
            swift_release();
            swift_release();
            outlined consume of Text.Storage(v125, v126, v127);
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_115;
          default:
            uint64_t v128 = *(void *)&v375[8];
            uint64_t v129 = *(void *)&v375[16];
            char v130 = v375[24];
            uint64_t v131 = *(void *)&v375[32];
            uint64_t v132 = *(void *)&v375[48];
            swift_release();
            outlined consume of Text?(v128, v129, v130, v131);
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v132);
            goto LABEL_115;
        }
        break;
      }
    }
    unint64_t v32 = v122;
  }
  outlined init with copy of RootEnvironmentModifier?((uint64_t)v386, (uint64_t)v385, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
  if (*((void *)&v385[16] + 1))
  {
LABEL_130:
    memcpy(v340, v385, sizeof(v340));
    memcpy(v337, v340, 0x118uLL);
    uint64_t v139 = (uint64_t)v330;
    goto LABEL_168;
  }
  outlined destroy of RootEnvironmentModifier?((uint64_t)v385, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
  uint64_t v140 = v32[2];
  if (!v140) {
    goto LABEL_262;
  }
  uint64_t v141 = (uint64_t)(v32 + 4);
  swift_bridgeObjectRetain();
  v320 = v32 + 4;
  do
  {
    outlined init with copy of SceneList.Item(v141, (uint64_t)v385);
    outlined init with copy of SceneList.Item.Value((uint64_t)v385, (uint64_t)v375);
    if (v375[128] == 5)
    {
      uint64_t v142 = *(void *)v375;
      uint64_t v143 = *(void *)&v375[8];
      char v144 = v375[16];
      uint64_t v145 = *(void *)&v375[24];
      unint64_t v146 = *(void *)&v375[32];
      if (*(void *)&v375[32] >= 3uLL)
      {
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v145 && v146 == v147)
        {
          swift_bridgeObjectRelease();
          outlined consume of SceneID(v142, v143, v144);
          outlined consume of UISceneAdaptorConfiguration.Kind(v145, v146);
          swift_release();
          unint64_t v32 = v339;
LABEL_155:
          swift_bridgeObjectRelease();
          goto LABEL_130;
        }
        LODWORD(v336) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        outlined consume of SceneID(v142, v143, v144);
        outlined consume of UISceneAdaptorConfiguration.Kind(v145, v146);
        swift_release();
        unint64_t v32 = v339;
        if (v336) {
          goto LABEL_155;
        }
      }
      else
      {
        outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
        outlined consume of UISceneAdaptorConfiguration.Kind(v145, v146);
        swift_release();
      }
    }
    else
    {
      outlined destroy of SceneList.Item.Value((uint64_t)v375);
    }
    outlined destroy of SceneList.Item((uint64_t)v385);
    v141 += 280;
    --v140;
  }
  while (v140);
  swift_bridgeObjectRelease();
  uint64_t v148 = v32[2];
  if (!v148)
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    goto LABEL_265;
  }
  swift_bridgeObjectRetain();
  uint64_t v149 = (uint64_t)v320;
  do
  {
    outlined init with copy of SceneList.Item(v149, (uint64_t)v385);
    uint64_t result = outlined init with copy of SceneList.Item.Value((uint64_t)v385, (uint64_t)v375);
    if (v375[128] != 5)
    {
      switch(v375[128])
      {
        case 2:
          outlined destroy of SceneList.Item.Value((uint64_t)v375);
          break;
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_163;
        case 4:
          goto LABEL_264;
        case 5:
          goto LABEL_266;
        case 6:
          uint64_t v157 = *(void *)&v375[24];
          uint64_t v158 = *(void *)&v375[32];
          char v159 = v375[40];
          uint64_t v160 = *(void *)&v375[48];
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of Text?(v157, v158, v159, v160);
          break;
        case 7:
          long long v353 = *(_OWORD *)&v375[64];
          long long v354 = *(_OWORD *)&v375[80];
          long long v355 = *(_OWORD *)&v375[96];
          long long v356 = *(_OWORD *)&v375[112];
          long long v349 = *(_OWORD *)v375;
          long long v350 = *(_OWORD *)&v375[16];
          long long v351 = *(_OWORD *)&v375[32];
          long long v352 = *(_OWORD *)&v375[48];
          outlined release of DocumentIntroductionConfiguration(&v349);
          break;
        case 8:
          uint64_t v161 = *(void *)&v375[24];
          uint64_t v162 = *(void *)&v375[32];
          char v163 = v375[40];
          swift_release();
          swift_release();
          outlined consume of Text.Storage(v161, v162, v163);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        default:
          uint64_t v152 = *(void *)&v375[8];
          uint64_t v153 = *(void *)&v375[16];
          char v154 = v375[24];
          uint64_t v155 = *(void *)&v375[32];
          uint64_t v156 = *(void *)&v375[48];
          swift_release();
          outlined consume of Text?(v152, v153, v154, v155);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v156);
          break;
      }
      swift_bridgeObjectRelease();
      uint64_t v139 = (uint64_t)v330;
      goto LABEL_166;
    }
    unint64_t v151 = *(void *)&v375[32];
    if (*(void *)&v375[32] != 1)
    {
      if (*(void *)&v375[32])
      {
        uint64_t v139 = (uint64_t)v330;
        if (*(void *)&v375[32] == 2)
        {
          outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
        }
        else
        {
          uint64_t v164 = *(void *)&v375[24];
          outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
          outlined consume of UISceneAdaptorConfiguration.Kind(v164, v151);
        }
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
        swift_bridgeObjectRelease();
LABEL_163:
        swift_release();
        uint64_t v139 = (uint64_t)v330;
      }
LABEL_166:
      memcpy(v340, v385, sizeof(v340));
      goto LABEL_167;
    }
    outlined consume of SceneID(*(uint64_t *)v375, *(uint64_t *)&v375[8], v375[16]);
    swift_release();
    outlined destroy of SceneList.Item((uint64_t)v385);
    v149 += 280;
    --v148;
  }
  while (v148);
  swift_bridgeObjectRelease();
  if (!v32[2]) {
    goto LABEL_262;
  }
  outlined init with copy of SceneList.Item((uint64_t)v320, (uint64_t)v340);
  uint64_t v139 = (uint64_t)v330;
LABEL_167:
  memcpy(v337, v340, 0x118uLL);
LABEL_168:
  uint64_t v165 = swift_bridgeObjectRetain();
  CGRect v166 = (void *)specialized Collection.first.getter(v165);
  swift_bridgeObjectRelease();
  if (v166)
  {
    id v167 = objc_msgSend(v166, sel_URL);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v168 = type metadata accessor for URL();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v168 - 8) + 56))(v139, 0, 1, v168);
  }
  else
  {
    uint64_t v169 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 56))(v139, 1, 1, v169);
  }
  uint64_t v170 = specialized static SceneBridge.targetContentIdentifierForExternalEvent(userActivity:url:)(v335, v139);
  uint64_t v172 = v171;
  outlined destroy of TaskPriority?(v139, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  outlined init with copy of SceneList.Item.Value((uint64_t)v337, (uint64_t)&v376);
  uint64_t v173 = a9;
  switch(v384)
  {
    case 0:
      v330 = (uint8_t *)v170;
      uint64_t v336 = a9;
      uint64_t v175 = *((void *)&v376 + 1);
      uint64_t v174 = v376;
      v177 = (char *)*((void *)&v377 + 1);
      uint64_t v176 = v377;
      id v338 = (id)*((void *)&v378 + 1);
      uint64_t v178 = v378;
      long long v179 = v379;
      outlined init with copy of RootEnvironmentModifier?((uint64_t)v386, (uint64_t)v340, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
      uint64_t v180 = *(void *)&v340[264];
      uint64_t v331 = v174;
      swift_retain();
      outlined copy of Text?(v175, v176, (char)v177, v178);
      v332 = (uint64_t *)v179;
      outlined copy of AppIntentExecutor?(v179);
      uint64_t v327 = v178;
      uint64_t v328 = *((void *)&v179 + 1);
      v324 = v177;
      uint64_t v319 = v176;
      if (v180)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of RootEnvironmentModifier?((uint64_t)v340, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
        v182 = (void *)v331;
        v181 = v332;
        uint64_t v183 = v175;
        uint64_t v184 = v176;
        v185 = v177;
        uint64_t v186 = *((void *)&v179 + 1);
        uint64_t v187 = v336;
        uint64_t v188 = v178;
      }
      else
      {
        uint64_t v236 = v175;
        v237 = (void *)v331;
        uint64_t v184 = v176;
        outlined destroy of RootEnvironmentModifier?((uint64_t)v340, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
        static SceneList.windowGroupConfigMatchingActivationConditions(items:targetContentIdentifier:)(v339, v172, v340);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)&v340[264])
        {
          swift_release();
          uint64_t v175 = v236;
          outlined consume of Text?(v236, v176, (char)v177, v327);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v332);
          uint64_t v183 = v342;
          uint64_t v184 = v343;
          v185 = v344;
          uint64_t v188 = v345;
          id v338 = v346;
          v339 = v341;
          uint64_t v238 = v348;
          v330 = (uint8_t *)v347;
          memcpy(v385, v340, 0x118uLL);
          outlined assign with take of SceneList.Item((uint64_t)v385, (uint64_t)v337);
          v182 = v339;
          uint64_t v186 = v238;
          v181 = v330;
        }
        else
        {
          outlined destroy of TaskPriority?((uint64_t)v340, (unint64_t *)&lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?, (uint64_t (*)(uint64_t))type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>));
          v182 = v237;
          uint64_t v175 = v236;
          uint64_t v183 = v236;
          v185 = v177;
          uint64_t v188 = v327;
          uint64_t v186 = v328;
          v181 = v332;
        }
        uint64_t v187 = v336;
      }
      v325 = (char *)v175;
      *(void *)&long long v366 = v182;
      *((void *)&v366 + 1) = v183;
      *(void *)&long long v367 = v184;
      *((void *)&v367 + 1) = v185;
      *(void *)&long long v368 = v188;
      *((void *)&v368 + 1) = v338;
      *(void *)&long long v369 = v181;
      *((void *)&v369 + 1) = v186;
      *(void *)(v187 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType) = v338;
      uint64_t v274 = (uint64_t)v181;
      uint64_t v275 = v186;
      swift_retain();
      outlined copy of Text?(v183, v184, (char)v185, v188);
      outlined copy of AppIntentExecutor?(v274);
      specialized AppSceneDelegate.openWindowPresentedValue<A>(from:config:)(v335, (uint64_t)&v366, (uint64_t)v385);
      swift_release();
      v323 = (char *)v183;
      outlined consume of Text?(v183, v184, (char)v185, v188);
      v330 = (uint8_t *)v274;
      v320 = (void *)v275;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v274);
      uint64_t v321 = v188;
      if (*((void *)&v385[1] + 1))
      {
        *(_OWORD *)v340 = v385[0];
        *(_OWORD *)&v340[16] = v385[1];
        uint64_t v276 = *((void *)&v385[2] + 1);
        unint64_t v277 = *(void *)&v385[3];
        *(_OWORD *)&v340[32] = v385[2];
        *(void *)&v340[48] = *(void *)&v385[3];
        outlined init with copy of AnyHashable((uint64_t)v340, (uint64_t)v385);
        *((void *)&v385[2] + 1) = v276;
        *(void *)&v385[3] = v277;
        *(_OWORD *)v375 = v385[0];
        *(_OWORD *)&v375[16] = v385[1];
        *(void *)&v375[32] = *(void *)&v385[2];
        uint64_t v278 = v187 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataValue;
        swift_beginAccess();
        outlined copy of Data._Representation(v276, v277);
        outlined assign with take of AnyHashable?((uint64_t)v375, v278);
        swift_endAccess();
        outlined init with copy of AnyHashable((uint64_t)v340, (uint64_t)v385);
        *((void *)&v385[2] + 1) = v276;
        *(void *)&v385[3] = v277;
        v279 = (uint64_t *)(v187 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
        uint64_t v280 = *(void *)(v187 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
        unint64_t v281 = *(void *)(v187 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8);
        uint64_t *v279 = v276;
        v279[1] = v277;
        outlined consume of Data?(v280, v281);
        outlined destroy of WeakBox<UISceneSession>?((uint64_t)v340, (uint64_t (*)(void))type metadata accessor for (AnyHashable, Data));
        outlined destroy of AnyHashable((uint64_t)v385);
      }
      else
      {
        outlined destroy of TaskPriority?((uint64_t)v385, &lazy cache variable for type metadata for (AnyHashable, Data)?, (uint64_t (*)(uint64_t))type metadata accessor for (AnyHashable, Data));
      }
      v322 = v185;
      uint64_t v282 = v184;
      if (*(void *)(v334 + 192))
      {
        type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey);
        swift_retain_n();
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey);
        swift_retain_n();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      int v283 = v340[0];
      uint64_t v284 = swift_retain();
      uint64_t v173 = v336;
      AppSceneDelegate.makeRootView(_:)(v284, v340);
      swift_release();
      outlined init with copy of ModifiedContent<AnyView, RootModifier>((uint64_t)v340, (uint64_t)v385);
      uint64_t v285 = (uint64_t)v325;
      outlined init with copy of ModifiedContent<AnyView, RootModifier>((uint64_t)v385, (uint64_t)v375);
      if (v283 == 1)
      {
        type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, &lazy cache variable for type metadata for _UISecureHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UISecureHostingController);
        id v287 = objc_allocWithZone(v286);
        outlined init with copy of ModifiedContent<AnyView, RootModifier>((uint64_t)v375, (uint64_t)&v349);
        v288 = specialized UIHostingController.init(rootView:)((uint64_t)&v349);
        lazy protocol witness table accessor for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature();
        swift_retain();
        ViewGraph.append<A>(feature:)();
        swift_release();
        outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v375);
        outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v385);
        v339 = v288;
        uint64_t v226 = v334;
        v289 = v329;
        specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v288, v173, v326, v334, v329);
        v290 = (objc_class *)type metadata accessor for UISecureWindow();
      }
      else
      {
        type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for UIHostingController);
        id v292 = objc_allocWithZone(v291);
        v293 = specialized UIHostingController.init(rootView:)((uint64_t)v375);
        outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v385);
        v339 = v293;
        v294 = v293;
        uint64_t v226 = v334;
        v289 = v329;
        specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v294, v173, v326, v334, v329);
        v290 = (objc_class *)MEMORY[0x1E4FB1F48];
      }
      id v338 = objc_msgSend(objc_allocWithZone(v290), sel_initWithWindowScene_, v289);
      swift_release();
      outlined consume of Text?((uint64_t)v323, v282, (char)v322, v321);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v330);
      swift_release();
      outlined consume of Text?(v285, v319, (char)v324, v327);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v332);
      outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v340);
      goto LABEL_246;
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v192 = (uint64_t)v325;
      static Log.documents.getter();
      id v193 = *(id *)(v328 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v193)(v192, 1, v331) == 1)
      {
        outlined destroy of TaskPriority?(v192, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
        uint64_t v194 = v333;
        int v195 = v327;
      }
      else
      {
        v200 = Logger.logObject.getter();
        os_log_type_t v201 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v200, v201))
        {
          uint64_t v336 = a9;
          v202 = (uint8_t *)swift_slowAlloc();
          uint64_t v203 = swift_slowAlloc();
          id v338 = v193;
          uint64_t v204 = v203;
          *(void *)v340 = v203;
          *(_DWORD *)v202 = 136315138;
          v330 = v202 + 4;
          id v205 = objc_msgSend(self, sel__printHierarchy);
          uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v208 = v207;

          uint64_t v173 = v336;
          uint64_t v209 = v206;
          unint64_t v32 = v339;
          *(void *)&v385[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v209, v208, (uint64_t *)v340);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v200, v201, "DocumentGroup: make scene called. VC hierarchy:\n%s", v202, 0xCu);
          swift_arrayDestroy();
          uint64_t v210 = v204;
          id v193 = v338;
          MEMORY[0x18C119C60](v210, -1, -1);
          MEMORY[0x18C119C60](v202, -1, -1);
        }

        uint64_t v194 = v333;
        int v195 = v327;
        (*(void (**)(char *, uint64_t))(v328 + 8))(v325, v331);
      }
      if (*(_DWORD *)(v194 + 204) == v195)
      {
        uint64_t v211 = MEMORY[0x1E4FBC860];
      }
      else
      {
        uint64_t v211 = *(void *)AGGraphGetValue();
        swift_bridgeObjectRetain();
      }
      v212 = SceneList.allDocumentGroups()(v211);
      swift_bridgeObjectRelease();
      uint64_t v213 = v32[2];
      if (!v213) {
        goto LABEL_194;
      }
      uint64_t v214 = (uint64_t)(v32 + 4);
      swift_bridgeObjectRetain();
      break;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v196 = v376;
      char v197 = v377;
      v332 = (uint64_t *)*((void *)&v377 + 1);
      long long v198 = v378;
      if ((void)v378 == 1)
      {
        *(void *)v340 = *((void *)&v378 + 1);
        type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
        lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
        swift_retain();
        uint64_t v199 = AnyView.init<A>(_:)();
      }
      else
      {
        swift_retain();
        uint64_t v199 = *((void *)&v198 + 1);
      }
      AppSceneDelegate.makeRootView(_:)(v199, v340);
      swift_release();
      type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for UIHostingController);
      id v221 = objc_allocWithZone(v220);
      v222 = specialized UIHostingController.init(rootView:)((uint64_t)v340);
      if ((void)v198 != 1) {
        goto LABEL_204;
      }
      v223 = v222;
      id v224 = objc_msgSend(v222, sel_view);
      if (!v224) {
        goto LABEL_263;
      }
      v225 = v224;
      if (one-time initialization token for clarityUIContentBackground != -1) {
        swift_once();
      }
      objc_msgSend(v225, sel_setBackgroundColor_, static UIColor.clarityUIContentBackground);

      v222 = v223;
LABEL_204:
      v339 = v222;
      uint64_t v226 = v334;
      v227 = v329;
      specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v222, a9, v326, v334, v329);
      id v338 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F48]), sel_initWithWindowScene_, v227);
      outlined consume of SceneID(v196, *((uint64_t *)&v196 + 1), v197);
      outlined consume of UISceneAdaptorConfiguration.Kind((uint64_t)v332, v198);
      swift_release();
      goto LABEL_246;
    case 7:
      swift_bridgeObjectRelease();
      long long v351 = v378;
      long long v352 = v379;
      long long v355 = v382;
      long long v356 = v383;
      long long v353 = v380;
      long long v354 = v381;
      long long v349 = v376;
      long long v350 = v377;
      uint64_t v189 = v32[2];
      if (v189)
      {
        uint64_t v190 = (uint64_t)(v32 + 4);
        swift_bridgeObjectRetain();
        do
        {
          outlined init with copy of SceneList.Item(v190, (uint64_t)v340);
          outlined init with copy of SceneList.Item.Value((uint64_t)v340, (uint64_t)v385);
          int v191 = LOBYTE(v385[8]);
          outlined destroy of SceneList.Item.Value((uint64_t)v385);
          outlined destroy of SceneList.Item((uint64_t)v340);
          if (v191 == 2)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_213;
          }
          v190 += 280;
          --v189;
        }
        while (v189);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      static Log.runtimeIssuesLog.getter();
      uint64_t v232 = (uint64_t)v323;
      Logger.init(_:)();
      v233 = Logger.logObject.getter();
      os_log_type_t v234 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v233, v234))
      {
        v235 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v235 = 0;
        _os_log_impl(&dword_1872C6000, v233, v234, "DocumentGroupLaunchScene should be used only with\nDocumentGroup scenes in the App declaration.\nAdd a DocumentGroup scene\nor use DocumentLaunchView instead.", v235, 2u);
        MEMORY[0x18C119C60](v235, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v328 + 8))(v232, v331);
LABEL_213:
      uint64_t v226 = v334;
      if (*(_DWORD *)(v333 + 204) == v327)
      {
        uint64_t v239 = MEMORY[0x1E4FBC860];
      }
      else
      {
        uint64_t v239 = *(void *)AGGraphGetValue();
        swift_bridgeObjectRetain();
      }
      v240 = SceneList.allDocumentGroups()(v239);
      swift_bridgeObjectRelease();
      outlined retain of DocumentIntroductionConfiguration(&v349);
      swift_bridgeObjectRetain();
      AppSceneDelegate.rootModifier.getter((uint64_t)&v340[136]);
      swift_bridgeObjectRelease();
      *(_OWORD *)&v340[64] = v353;
      *(_OWORD *)&v340[80] = v354;
      *(_OWORD *)&v340[96] = v355;
      *(_OWORD *)&v340[112] = v356;
      *(_OWORD *)v340 = v349;
      *(_OWORD *)&v340[16] = v350;
      *(_OWORD *)&v340[32] = v351;
      *(_OWORD *)&v340[48] = v352;
      *(void *)&v340[128] = v240;
      outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v340, (uint64_t)v385);
      id v241 = objc_allocWithZone((Class)type metadata accessor for DocumentGroupsIntroRootViewHostingController(0));
      outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v385, (uint64_t)v375);
      v242 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v375);
      *(void *)(*(void *)&v242[direct field offset for UIHostingController.host]
                + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v242[direct field offset for UIHostingController.host])
                            + 0x198)
                + 8) = &protocol witness table for DocumentGroupsIntroRootViewHostingController;
      swift_unknownObjectWeakAssign();
      outlined destroy of DocumentGroupsIntroRootView((uint64_t)v385);
      v243 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v242);

      v339 = v243;
      objc_msgSend(v243, sel_loadViewIfNeeded);
      uint64_t v244 = (uint64_t)v324;
      static Log.documents.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v328 + 48))(v244, 1, v331) == 1)
      {
        uint64_t v245 = a9;
        outlined destroy of TaskPriority?(v244, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
        v246 = v329;
      }
      else
      {
        v247 = Logger.logObject.getter();
        os_log_type_t v248 = static os_log_type_t.debug.getter();
        uint64_t v245 = a9;
        if (os_log_type_enabled(v247, v248))
        {
          v249 = (uint8_t *)swift_slowAlloc();
          uint64_t v250 = swift_slowAlloc();
          *(void *)&v385[0] = v250;
          *(_DWORD *)v249 = 136315138;
          id v338 = v249 + 4;
          id v251 = objc_msgSend(self, sel__printHierarchy);
          uint64_t v252 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v254 = v253;

          *(void *)v375 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v252, v254, (uint64_t *)v385);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v247, v248, "DocumentGroupIntro: make scene called VC hierarchy:\n%s", v249, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v250, -1, -1);
          v255 = v249;
          uint64_t v244 = (uint64_t)v324;
          MEMORY[0x18C119C60](v255, -1, -1);
        }

        v246 = v329;
        uint64_t v226 = v334;
        (*(void (**)(uint64_t, uint64_t))(v328 + 8))(v244, v331);
      }
      id v338 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F48]), sel_initWithWindowScene_, v246);
      outlined release of DocumentIntroductionConfiguration(&v349);
      outlined destroy of DocumentGroupsIntroRootView((uint64_t)v340);
      uint64_t v173 = v245;
      goto LABEL_246;
    default:
      goto LABEL_264;
  }
  while (1)
  {
    outlined init with copy of SceneList.Item(v214, (uint64_t)v375);
    outlined init with copy of SceneList.Item.Value((uint64_t)v375, (uint64_t)&v349);
    if (v357 == 7) {
      break;
    }
    outlined destroy of SceneList.Item.Value((uint64_t)&v349);
    outlined destroy of SceneList.Item((uint64_t)v375);
    v214 += 280;
    if (!--v213)
    {
      swift_bridgeObjectRelease();
LABEL_194:
      memset(v385, 0, 280);
      swift_bridgeObjectRelease();
      goto LABEL_195;
    }
  }
  long long v370 = v353;
  long long v371 = v354;
  long long v372 = v355;
  long long v373 = v356;
  long long v366 = v349;
  long long v367 = v350;
  long long v368 = v351;
  long long v369 = v352;
  outlined release of DocumentIntroductionConfiguration(&v366);
  swift_bridgeObjectRelease();
  memcpy(v385, v375, 0x118uLL);
  swift_bridgeObjectRelease();
  if (!*((void *)&v385[16] + 1))
  {
LABEL_195:
    outlined destroy of RootEnvironmentModifier?((uint64_t)v385, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
    if (AppSceneDelegate.isDocumentViewControllerRootEnabled.getter())
    {
      id v215 = objc_allocWithZone((Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation());
      id v216 = IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)((uint64_t)v212, MEMORY[0x1E4FBC860]);
      id v217 = objc_allocWithZone((Class)type metadata accessor for DocumentViewController());
      v218 = specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(v216, 0, 0);
      AppSceneDelegate.rootModifier.getter((uint64_t)v340);
      DocumentViewController.rootModifier.setter((uint64_t)v340);
      v339 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v218);
      uint64_t v219 = (uint64_t)v322;
      static Log.documents.getter();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v193)(v219, 1, v331) == 1)
      {
        outlined destroy of TaskPriority?(v219, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        v260 = Logger.logObject.getter();
        os_log_type_t v261 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v260, v261))
        {
          v262 = (uint8_t *)swift_slowAlloc();
          uint64_t v263 = swift_slowAlloc();
          *(void *)v340 = v263;
          uint64_t v336 = v173;
          *(_DWORD *)v262 = 136315138;
          id v338 = v262 + 4;
          id v264 = objc_msgSend(self, sel__printHierarchy);
          uint64_t v265 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v267 = v266;

          *(void *)&v385[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v265, v267, (uint64_t *)v340);
          uint64_t v173 = v336;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v260, v261, "DocumentGroup: make scene called. Not redirected to Intro.\nVC hierarchy:\n%s", v262, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v263, -1, -1);
          v268 = v262;
          uint64_t v219 = (uint64_t)v322;
          MEMORY[0x18C119C60](v268, -1, -1);
        }

        (*(void (**)(uint64_t, uint64_t))(v328 + 8))(v219, v331);
      }
      uint64_t v269 = swift_bridgeObjectRetain();
      uint64_t v270 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo16UIOpenURLContextCG_10Foundation3URLVs5NeverOTg50245_s7SwiftUI16AppSceneDelegateC04makeD10HostWindow33_4475FD12FD59DEBA453321BD91F6EA04011restorationD6ItemID0O4Data17connectionOptions11urlContexts4role06windowD08delegateSo8UIWindowCAA0dQ0OSg_SDys11AnyHashableVypGSo017UISceneConnectionT0CShySo16dE131CGzSo18UISceneSessionRoleaSo0zD0CAA013UIHostingViewE0_ptF10Foundation3URLVAXcfu8_33_7b38412a791237ac1c9a4b50e4b05c7bAXA5_Tf3nnnpk_nTf1cn_nTm(v269);
      swift_bridgeObjectRelease();
      uint64_t v231 = (unint64_t)DocumentViewController.presentDocuments(at:)((Swift::OpaquePointer)v270);
    }
    else
    {
      AppSceneDelegate.rootModifier.getter((uint64_t)v340);
      id v228 = objc_allocWithZone((Class)type metadata accessor for DocumentBrowserViewController());
      v218 = (id)DocumentBrowserViewController.init(configurations:rootModifier:)((uint64_t)v212, (uint64_t)v340);
      uint64_t v229 = swift_bridgeObjectRetain();
      uint64_t v230 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo16UIOpenURLContextCG_10Foundation3URLVs5NeverOTg50245_s7SwiftUI16AppSceneDelegateC04makeD10HostWindow33_4475FD12FD59DEBA453321BD91F6EA04011restorationD6ItemID0O4Data17connectionOptions11urlContexts4role06windowD08delegateSo8UIWindowCAA0dQ0OSg_SDys11AnyHashableVypGSo017UISceneConnectionT0CShySo16dE131CGzSo18UISceneSessionRoleaSo0zD0CAA013UIHostingViewE0_ptF10Foundation3URLVAXcfu8_33_7b38412a791237ac1c9a4b50e4b05c7bAXA5_Tf3nnnpk_nTf1cn_nTm(v229);
      swift_bridgeObjectRelease();
      uint64_t v231 = (unint64_t)DocumentBrowserViewController.presentDocuments(at:animated:)((Swift::OpaquePointer)v230, 0);
      v339 = v218;
    }
    swift_bridgeObjectRelease();

    if (v231)
    {
      uint64_t v271 = specialized Set.init<A>(_:)(v231);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v272 = swift_bridgeObjectRetain();
      uint64_t v273 = specialized Set._Variant.filter(_:)(v272, v271);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t *v332 = v273;
    }
    v259 = v329;
    uint64_t v226 = v334;
    goto LABEL_233;
  }
  memcpy(v340, v385, sizeof(v340));
  outlined init with copy of SceneList.Item.Value((uint64_t)v340, (uint64_t)&v366);
  uint64_t v226 = v334;
  if (v374 == 7)
  {
    long long v362 = v370;
    long long v363 = v371;
    long long v364 = v372;
    long long v365 = v373;
    long long v358 = v366;
    long long v359 = v367;
    long long v360 = v368;
    long long v361 = v369;
    outlined retain of DocumentIntroductionConfiguration(&v358);
    swift_bridgeObjectRetain();
    AppSceneDelegate.rootModifier.getter((uint64_t)&v385[8] + 8);
    swift_bridgeObjectRelease();
    v385[4] = v362;
    v385[5] = v363;
    v385[6] = v364;
    v385[7] = v365;
    v385[0] = v358;
    v385[1] = v359;
    v385[2] = v360;
    v385[3] = v361;
    *(void *)&v385[8] = v212;
    outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v385, (uint64_t)v375);
    id v256 = objc_allocWithZone((Class)type metadata accessor for DocumentGroupsIntroRootViewHostingController(0));
    outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v375, (uint64_t)&v349);
    v257 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)&v349);
    *(void *)(*(void *)&v257[direct field offset for UIHostingController.host]
              + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v257[direct field offset for UIHostingController.host])
                          + 0x198)
              + 8) = &protocol witness table for DocumentGroupsIntroRootViewHostingController;
    swift_unknownObjectWeakAssign();
    outlined destroy of DocumentGroupsIntroRootView((uint64_t)v375);
    v339 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v257);

    uint64_t v258 = v321;
    static Log.documents.getter();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v193)(v258, 1, v331) == 1)
    {
      outlined destroy of DocumentGroupsIntroRootView((uint64_t)v385);
      outlined release of DocumentIntroductionConfiguration(&v358);
      outlined destroy of SceneList.Item((uint64_t)v340);
      outlined destroy of TaskPriority?(v258, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      v259 = v329;
    }
    else
    {
      v308 = Logger.logObject.getter();
      os_log_type_t v309 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v308, v309))
      {
        uint64_t v310 = v173;
        v311 = (uint8_t *)swift_slowAlloc();
        uint64_t v312 = swift_slowAlloc();
        *(void *)v375 = v312;
        *(_DWORD *)v311 = 136315138;
        id v338 = v311 + 4;
        id v313 = objc_msgSend(self, sel__printHierarchy);
        uint64_t v314 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v316 = v315;

        *(void *)&long long v349 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v314, v316, (uint64_t *)v375);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v173 = v310;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v308, v309, "DocumentGroup -> Intro: make scene called. VC hierarchy:\n%s", v311, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v312, -1, -1);
        v317 = v311;
        uint64_t v258 = v321;
        MEMORY[0x18C119C60](v317, -1, -1);
      }
      outlined release of DocumentIntroductionConfiguration(&v358);

      outlined destroy of DocumentGroupsIntroRootView((uint64_t)v385);
      v259 = v329;
      uint64_t v226 = v334;
      outlined destroy of SceneList.Item((uint64_t)v340);
      (*(void (**)(uint64_t, uint64_t))(v328 + 8))(v258, v331);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item.Value((uint64_t)&v366);
    v339 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_init);
    outlined destroy of SceneList.Item((uint64_t)v340);
    v259 = v329;
  }
LABEL_233:
  id v338 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F48]), sel_initWithWindowScene_, v259);
  outlined destroy of SceneList.Item.Value((uint64_t)&v376);
LABEL_246:
  swift_beginAccess();
  uint64_t v295 = v226;
  Swift::UInt v296 = *(void *)(v226 + 152);
  uint64_t v297 = *(void *)(v226 + 160);
  char v298 = *(unsigned char *)(v295 + 168);
  uint64_t v299 = v173 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID;
  uint64_t v300 = *(void *)(v173 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  uint64_t v301 = *(void *)(v173 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 8);
  *(void *)uint64_t v299 = v296;
  *(void *)(v299 + 8) = v297;
  unsigned __int8 v302 = *(unsigned char *)(v299 + 16);
  *(unsigned char *)(v299 + 16) = v298;
  uint64_t v303 = *(void *)(v295 + 176);
  outlined copy of SceneID(v296, v297, v298);
  outlined consume of SceneID?(v300, v301, v302);
  *(void *)(v173 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion) = v303;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  outlined copy of SceneID(v296, v297, v298);
  swift_retain();
  v304 = v339;
  PlatformSceneCache.addHost(_:id:)((uint64_t)v339, v296, v297, v298);
  outlined consume of SceneID(v296, v297, v298);
  swift_release();
  if (*(void *)(v295 + 208))
  {
    uint64_t v305 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v305, (uint64_t)v385);
    if (*((void *)&v385[0] + 1))
    {
      if (LOBYTE(v385[1]) < 2u)
      {
        v306 = (void *)MEMORY[0x18C115780](*(void *)&v385[0], *((void *)&v385[0] + 1));
        swift_bridgeObjectRelease();
        goto LABEL_255;
      }
      swift_bridgeObjectRelease();
    }
    v306 = 0;
  }
  else
  {
    v306 = 0;
  }
LABEL_255:
  id v307 = v338;
  objc_msgSend(v338, sel_setAccessibilityIdentifier_, v306);
  swift_bridgeObjectRelease();

  objc_msgSend(v307, sel_setRootViewController_, v304);
  swift_release();

  outlined destroy of RootEnvironmentModifier?((uint64_t)v386, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
  swift_release();
  return (uint64_t)v307;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.startIndex.getter();
    uint64_t v7 = v6;
    uint64_t v8 = __CocoaSet.endIndex.getter();
    char v10 = MEMORY[0x18C117400](v5, v7, v8, v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_3:
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v5, v7, v4 != 0, a1, a2);
    uint64_t v11 = v15;
    outlined consume of Set<UIOpenURLContext>.Index._Variant(v5, v7, v4 != 0);
    return v11;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v14 & 1) == 0)
  {
    uint64_t v7 = v13;
    if (*(_DWORD *)(a1 + 36) == v13)
    {
      uint64_t v5 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<UIOpenURLContext>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<AnyView, RootModifier>(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<AnyView, RootModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for PPTTestHost?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for PPTTestHost?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  return specialized Collection.first.getter(a1, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
}

{
  return specialized Collection.first.getter(a1, &lazy cache variable for type metadata for NSUserActivity);
}

void type metadata accessor for (AnyHashable, Data)()
{
  if (!lazy cache variable for type metadata for (AnyHashable, Data))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, Data));
    }
  }
}

id specialized UIHostingController.init(rootView:)(uint64_t a1)
{
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v20 = xmmword_18834C6B0;
  uint64_t v21 = 0;
  char v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of ModifiedContent<AnyView, RootModifier>(a1, (uint64_t)&v20);
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>();
  id v15 = objc_allocWithZone(v14);
  *(void *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>();
  v19.receiver = v6;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(void))type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>, (void (*)(void))type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>, specialized SharingActivityPickerBridge.init(), (void (*)(void))type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>);

  outlined destroy of ModifiedContent<AnyView, RootModifier>(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Class v17;
  id v18;
  objc_class *v19;
  id v20;
  objc_super v22;
  long long v23;
  uint64_t v24;
  char v25;
  char v26;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v22 - v4;
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  unsigned int v6 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  char v23 = xmmword_18834C6B0;
  uint64_t v24 = 0;
  double v25 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v26 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v23, v6);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v7 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v1;
  uint64_t v10 = specialized UIKitDialogBridge.init()(v8);
  swift_release();
  *(void *)&v1[v7] = v10;
  *(void *)&v9[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = -1;
  *(void *)&v9[v11] = v12;
  *(void *)&v9[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v13 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v9[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v9[direct field offset for UIHostingController.deferredEdges] = 256;
  Class v14 = MEMORY[0x1E4FBC860];
  *(void *)&v9[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  id v15 = &v9[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)id v15 = 512;
  void v15[2] = 3;
  *(void *)&v9[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v14;
  v9[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v9[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v16 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v9[v16] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v9[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v5, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  uint64_t v18 = objc_allocWithZone(v17);
  *(void *)&v9[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)v5);

  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  v22.receiver = v9;
  v22.super_class = v19;
  long long v20 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(void))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, &lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t (*)(void))type metadata accessor for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (void (*)(void))type metadata accessor for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, specialized SharingActivityPickerBridge.init(), (void (*)(void))type metadata accessor for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);

  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  return v20;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Class v17;
  id v18;
  objc_class *v19;
  id v20;
  objc_super v22;
  long long v23;
  uint64_t v24;
  char v25;
  char v26;

  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  unsigned int v6 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  char v23 = xmmword_18834C6B0;
  uint64_t v24 = 0;
  double v25 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v26 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v23, v6);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v7 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v1;
  uint64_t v10 = specialized UIKitDialogBridge.init()(v8);
  swift_release();
  *(void *)&v1[v7] = v10;
  *(void *)&v9[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = -1;
  *(void *)&v9[v11] = v12;
  *(void *)&v9[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v13 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v9[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v9[direct field offset for UIHostingController.deferredEdges] = 256;
  Class v14 = MEMORY[0x1E4FBC860];
  *(void *)&v9[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  id v15 = &v9[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)id v15 = 512;
  void v15[2] = 3;
  *(void *)&v9[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v14;
  v9[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v9[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v16 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v9[v16] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v9[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  uint64_t v18 = objc_allocWithZone(v17);
  *(void *)&v9[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)v5);

  type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, &lazy cache variable for type metadata for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v22.receiver = v9;
  v22.super_class = v19;
  long long v20 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(&lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, &lazy cache variable for type metadata for SharingActivityPickerBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);

  outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1, (uint64_t (*)(void))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  return v20;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Class v17;
  id v18;
  objc_class *v19;
  id v20;
  objc_super v22;
  long long v23;
  uint64_t v24;
  char v25;
  char v26;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v22 - v4;
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  unsigned int v6 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  char v23 = xmmword_18834C6B0;
  uint64_t v24 = 0;
  double v25 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v26 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v23, v6);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v7 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v1;
  uint64_t v10 = specialized UIKitDialogBridge.init()(v8);
  swift_release();
  *(void *)&v1[v7] = v10;
  *(void *)&v9[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = -1;
  *(void *)&v9[v11] = v12;
  *(void *)&v9[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v13 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v9[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v9[direct field offset for UIHostingController.deferredEdges] = 256;
  Class v14 = MEMORY[0x1E4FBC860];
  *(void *)&v9[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  id v15 = &v9[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)id v15 = 512;
  void v15[2] = 3;
  *(void *)&v9[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v14;
  v9[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v9[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v16 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v9[v16] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v9[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  uint64_t v18 = objc_allocWithZone(v17);
  *(void *)&v9[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)v5);

  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  v22.receiver = v9;
  v22.super_class = v19;
  long long v20 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(void))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, &lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(void))type metadata accessor for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (void (*)(void))type metadata accessor for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, specialized SharingActivityPickerBridge.init(), (void (*)(void))type metadata accessor for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);

  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  return v20;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  long long v20;
  uint64_t v21;
  char v22;
  char v23;

  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v20 = xmmword_18834C6B0;
  uint64_t v21 = 0;
  char v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of TabItem.RootView(a1, (uint64_t)&v20);
  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  *(void *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>, &lazy cache variable for type metadata for SharingActivityPickerBridge<TabItem.RootView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<TabItem.RootView>);

  outlined destroy of TabItem.RootView(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  long long v20;
  uint64_t v21;
  char v22;
  char v23;

  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v20 = xmmword_18834C6B0;
  uint64_t v21 = 0;
  char v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of DocumentGroupsIntroRootView(a1, (uint64_t)&v20);
  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  *(void *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for UIHostingController<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(&lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<DocumentGroupsIntroRootView>, &lazy cache variable for type metadata for SharingActivityPickerBridge<DocumentGroupsIntroRootView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<DocumentGroupsIntroRootView>);

  outlined destroy of DocumentGroupsIntroRootView(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  long long v20;
  uint64_t v21;
  char v22;
  char v23;

  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v20 = xmmword_18834C6B0;
  uint64_t v21 = 0;
  char v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1, (uint64_t)&v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  *(void *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, &lazy cache variable for type metadata for UIHostingController<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, &lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>);

  outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  long long v20;
  uint64_t v21;
  char v22;
  char v23;

  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v20 = xmmword_18834C6B0;
  uint64_t v21 = 0;
  char v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)&v20);
  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  *(void *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(&lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<BridgedNavigationView.RootView>, &lazy cache variable for type metadata for SharingActivityPickerBridge<BridgedNavigationView.RootView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<BridgedNavigationView.RootView>);

  outlined destroy of BridgedNavigationView.RootView(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;
  long long v21;
  uint64_t v22;
  char v23;
  char v24;

  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  uint64_t v21 = xmmword_18834C6B0;
  char v22 = 0;
  char v23 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v24 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v21, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v15 = objc_allocWithZone(v14);
  outlined retain of BoundInputsView(a1);
  uint64_t v16 = specialized _UIHostingView.init(rootView:)(a1);
  outlined release of BoundInputsView(a1);
  *(void *)&v6[direct field offset for UIHostingController.host] = v16;

  type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v20.receiver = v6;
  v20.super_class = v17;
  uint64_t v18 = objc_msgSendSuper2(&v20, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(specialized _UIHostingView.updateBackgroundColor(), (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, &lazy cache variable for type metadata for SharingActivityPickerBridge<BoundInputsView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<BoundInputsView>);

  return v18;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  long long v14;
  Class v15;
  id v16;
  uint64_t v17;
  objc_class *v18;
  id v19;
  objc_super v21;
  long long v22;
  long long v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  char v22 = xmmword_18834C6B0;
  *(void *)&char v23 = 0;
  BYTE8(v23) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  double v25 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v22, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  unsigned int v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v12 = 512;
  _OWORD v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  uint64_t v26 = *(void *)a1;
  Class v14 = *(_OWORD *)(a1 + 24);
  char v22 = *(_OWORD *)(a1 + 8);
  char v23 = v14;
  uint64_t v24 = *(void *)(a1 + 40);
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>();
  uint64_t v16 = objc_allocWithZone(v15);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  outlined retain of NavigationItemDescription?(&v22, (void (*)(void, void, void, void, void))outlined copy of NavigationListState?);
  id v17 = specialized _UIHostingView.init(rootView:)((uint64_t *)a1);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  outlined retain of NavigationItemDescription?(&v22, (void (*)(void, void, void, void, void))outlined consume of NavigationListState?);
  *(void *)&v6[direct field offset for UIHostingController.host] = v17;

  type metadata accessor for UIHostingController<ModifiedContent<AnyView, DocumentBaseModifier>>();
  v21.receiver = v6;
  v21.super_class = v18;
  objc_super v19 = objc_msgSendSuper2(&v21, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, &lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, (uint64_t (*)(void))type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, DocumentBaseModifier>>, (void (*)(void))type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>, specialized SharingActivityPickerBridge.init(), (void (*)(void))type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);

  return v19;
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (void (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

uint64_t PlatformSceneCache.addHost(_:id:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
  char v8 = a4 & 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v27 = a1;
  outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v26, (uint64_t)v28);
  uint64_t v9 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 16);
  if (!*(void *)(v10 + 16)) {
    goto LABEL_7;
  }
  outlined copy of SceneID(a2, a3, v8);
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v8);
  if ((v12 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v8);
LABEL_7:
    swift_endAccess();
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v8);
  if (*(void *)(v13 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28);
    char v15 = v14;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v15) {
      return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v28);
    }
  }
  else
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
LABEL_8:
  swift_beginAccess();
  uint64_t v16 = *v9;
  if (!*(void *)(*v9 + 16))
  {
LABEL_12:
    swift_endAccess();
    type metadata accessor for HashableWeakBox<UIViewController>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(HashableWeakBox<UIViewController>, ScenePhase)>, (uint64_t (*)(uint64_t))type metadata accessor for (HashableWeakBox<UIViewController>, ScenePhase), MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    outlined init with copy of HashableWeakBox<UIViewController>((uint64_t)v28, inited + 32);
    *(unsigned char *)(inited + 48) = 2;
    unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    goto LABEL_13;
  }
  outlined copy of SceneID(a2, a3, v8);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v8);
  if ((v18 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v8);
    goto LABEL_12;
  }
  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v8);
  outlined init with copy of HashableWeakBox<UIViewController>((uint64_t)v28, (uint64_t)v26);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(2, (uint64_t)v26, isUniquelyReferenced_nonNull_native);
  unint64_t v21 = v19;
  swift_bridgeObjectRelease();
  outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v26);
LABEL_13:
  swift_beginAccess();
  outlined copy of SceneID(a2, a3, v8);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v9;
  uint64_t *v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, v8, v23);
  uint64_t *v9 = v25;
  swift_bridgeObjectRelease();
  outlined consume of SceneID(a2, a3, v8);
  swift_endAccess();
  return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v28);
}

uint64_t outlined init with copy of (NSFileWrapper, UTType)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void specialized AppSceneDelegate.openWindowPresentedValue<A>(from:config:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t, unint64_t);
  _OWORD v21[2];
  uint64_t v22;
  long long v23;
  long long v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (!a1) {
    goto LABEL_25;
  }
  id v5 = a1;
  id v6 = objc_msgSend(v5, sel_activityType);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (one-time initialization token for userActivityTypeOpenWindowByID != -1) {
    swift_once();
  }
  if (v7 == static NSUserActivity.userActivityTypeOpenWindowByID && v9 == *(void *)algn_1E90FBC98)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      goto LABEL_24;
    }
  }
  id v12 = objc_msgSend(v5, sel_userInfo);
  uint64_t v13 = MEMORY[0x1E4FBC840];
  if (!v12)
  {
    char v23 = 0u;
    uint64_t v24 = 0u;
LABEL_22:

    outlined destroy of RootEnvironmentModifier?((uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v13 + 8);
LABEL_25:
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  char v14 = v12;
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&v21[0] = 0xD00000000000001CLL;
  *((void *)&v21[0] + 1) = 0x800000018832B210;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v26), (v17 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v16, (uint64_t)&v23);
  }
  else
  {
    char v23 = 0u;
    uint64_t v24 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v24 + 1)) {
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:

    goto LABEL_25;
  }
  uint64_t v19 = v26;
  unint64_t v18 = v27;
  long long v20 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(a2 + 48);
  if (!v20)
  {
    outlined consume of Data._Representation(v26, v27);
    goto LABEL_24;
  }
  v20(&v26, v26, v27);
  outlined init with copy of RootEnvironmentModifier?((uint64_t)&v26, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  if (*((void *)&v24 + 1))
  {
    v21[0] = v23;
    v21[1] = v24;
    char v22 = v25;
    outlined init with copy of AnyHashable((uint64_t)v21, a3);
    *(void *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v18;
    outlined copy of Data._Representation(v19, v18);
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }

  outlined destroy of RootEnvironmentModifier?((uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  outlined consume of Data._Representation(v19, v18);
}

uint64_t specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = direct field offset for UIHostingController.host;
  uint64_t v9 = *(void **)((char *)a1 + direct field offset for UIHostingController.host);
  uint64_t v10 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge;
  uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge);
  id v12 = (void *)MEMORY[0x1E4FBC8C8];
  swift_weakAssign();
  *(void *)((char *)v9 + *(void *)((*v12 & *v9) + 0x198) + 8) = &protocol witness table for AppSceneDelegate;
  swift_unknownObjectWeakAssign();
  if (v11)
  {
    uint64_t v13 = one-time initialization token for isEnabled;
    swift_retain();
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    if (static ValidTestCasesFeature.isEnabled)
    {
      uint64_t v37 = 0;
      lazy protocol witness table accessor for type ValidTestCasesFeature and conformance ValidTestCasesFeature();
      ViewGraph.append<A>(feature:)();
    }
    swift_release();
    swift_release();
  }
  char v14 = *(void **)((char *)a1 + v8);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a4 + 192);
  uint64_t v16 = *(void *)((char *)v14 + *(void *)((*v12 & *v14) + 0x68));
  uint64_t v17 = *(void *)(v16 + 136);
  *(void *)(v16 + 136) = *(void *)(a4 + 184);
  *(void *)(v16 + 144) = v15;
  swift_retain();
  unint64_t v18 = v14;
  swift_retain();
  outlined consume of EnvironmentValues?(v17);
  if (MEMORY[0x18C119DF0](v16 + 24))
  {
    swift_getObjectType();
    LOWORD(v37) = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  id v19 = objc_msgSend(a5, sel_sizeRestrictions);
  long long v20 = (void *)MEMORY[0x1E4FBC8C8];
  if (v19)
  {

    swift_beginAccess();
    uint64_t v21 = 4;
    switch(*(unsigned char *)(a4 + 224))
    {
      case 1:
        uint64_t v22 = unk_1ED41CF88;
        if ((unk_1ED41CF88 & ~qword_1ED41CF80) == 0) {
          uint64_t v22 = 0;
        }
        uint64_t v21 = v22 | qword_1ED41CF80;
        break;
      case 2:
        break;
      default:
        uint64_t v21 = 0;
        break;
    }
    char v23 = (void *)((char *)a1 + direct field offset for UIHostingController.sizingOptions);
    swift_beginAccess();
    uint64_t v24 = *v23;
    *char v23 = v21;
    uint64_t v37 = v24;
    (*(void (**)(uint64_t *))((*v20 & *a1) + 0x3B0))(&v37);
    swift_beginAccess();
    if ((*(unsigned char *)(a4 + 272) & 1) == 0)
    {
      uint64_t v25 = *(void *)(a2 + v10);
      if (v25)
      {
        swift_retain();
        _ProposedSize.init(_:)();
        uint64_t v26 = v38;
        uint64_t v27 = v39;
        unsigned __int8 v28 = v40;
        *(void *)(v25 + 136) = v37;
        *(void *)(v25 + 144) = v26;
        *(void *)(v25 + 152) = v27;
        *(_WORD *)(v25 + 160) = v28;
        swift_release();
      }
    }
  }
  swift_beginAccess();
  if ((*(unsigned char *)(a4 + 200) & 2) != 0)
  {
    uint64_t v29 = *(void **)((char *)a1 + v8);
    unsigned __int8 v30 = (void *)((char *)v29 + *(void *)((*v20 & *v29) + 0xB8));
    swift_beginAccess();
    uint64_t v31 = *v30;
    uint64_t *v30 = 0;
    if (v31)
    {
      __int16 v32 = word_1ED41CF5A;
      if (((unsigned __int16)word_1ED41CF5A & ~(unsigned __int16)word_1ED41CF58) == 0) {
        __int16 v32 = 0;
      }
      __int16 v41 = v32 | word_1ED41CF58;
      type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>();
      uint64_t v33 = v29;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
  }
  type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, &lazy cache variable for type metadata for ScenePresentationBridge<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for ScenePresentationBridge);
  uint64_t v34 = swift_allocObject();
  *(_DWORD *)(v34 + 16) = -1;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v34 + 24) = JSONEncoder.init()();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)((char *)a1 + v8) + *(void *)((*v20 & **(void **)((char *)a1 + v8)) + 0x140)) = v34;
  swift_retain();
  uint64_t result = swift_release();
  if (*(void *)(a2 + v10))
  {
    swift_weakAssign();
    swift_retain();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)()
{
  if (!lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>))
  {
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(255, &lazy cache variable for type metadata for WindowSceneConfiguration<WindowGroupConfigurationAttributes>, (uint64_t)&type metadata for WindowGroupConfigurationAttributes, (uint64_t)&protocol witness table for WindowGroupConfigurationAttributes, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WindowSceneConfiguration);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>));
    }
  }
}

uint64_t specialized AppSceneDelegate.openWindowByIDSceneID(from:)(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_activityType);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (one-time initialization token for userActivityTypeOpenWindowByID != -1) {
    swift_once();
  }
  if (v3 == static NSUserActivity.userActivityTypeOpenWindowByID && v5 == *(void *)algn_1E90FBC98)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      goto LABEL_21;
    }
  }
  id v8 = objc_msgSend(v1, sel_userInfo);
  uint64_t v9 = MEMORY[0x1E4FBC840];
  if (!v8)
  {
    long long v17 = 0u;
    long long v18 = 0u;
LABEL_20:
    outlined destroy of RootEnvironmentModifier?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_21;
  }
  uint64_t v10 = v8;
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v11 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v16), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v17);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1)) {
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:

    return 0;
  }
  uint64_t v14 = v16;

  return v14;
}

unint64_t lazy protocol witness table accessor for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature;
  if (!lazy protocol witness table cache variable for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomAccessoryPredicate()
{
  lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

unint64_t lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory()
{
  unint64_t result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomScopeBarPredicate()
{
  lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

unint64_t lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar()
{
  unint64_t result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionDispatcherSubscriber(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 28);
    char v7 = (char *)a1 + v6;
    id v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for CombineIdentifier();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t partial apply for closure #1 in static GridRow._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #1 in static GridRow._makeView(view:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static GridRow._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for GridRow();
  uint64_t v8 = a1 + *(int *)(v7 + 36);
  _OWORD v12[2] = v7;
  uint64_t v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, a4, (uint64_t)v12, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v12[5];
}

uint64_t RowTransformTrait.value.getter@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == a1)
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v5 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  RowTransformTrait.update(data:)(&v4);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

uint64_t RowTransformTrait.update(data:)(uint64_t *a1)
{
  unsigned int v2 = AGMakeUniqueID();
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E4F401B8], MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetValue();
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 16);
  if (v6)
  {
    uint64_t v7 = (char *)(v5 + 48);
    uint64_t v8 = *(void *)(*a1 + 16);
    while (1)
    {
      char v9 = *v7;
      v7 += 24;
      if ((v9 & 0xE0) == 0x20) {
        break;
      }
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    char v10 = *(unsigned char *)(result + 8) | 0x20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, (char *)v5);
      uint64_t v5 = result;
    }
    unint64_t v12 = *(void *)(v5 + 16);
    unint64_t v11 = *(void *)(v5 + 24);
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v5);
      uint64_t v5 = result;
    }
    *(void *)(v5 + 16) = v12 + 1;
    unint64_t v13 = v5 + 24 * v12;
    *(void *)(v13 + 32) = v2;
    *(void *)(v13 + 40) = v4;
    *(unsigned char *)(v13 + 48) = v10;
    *a1 = v5;
  }
  return result;
}

uint64_t static GridRow._makeViewList(view:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  long long v17 = *(_OWORD *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 56);
  int v15 = *(_DWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  char v11 = *(unsigned char *)(a2 + 80);
  LODWORD(v18) = *a1;
  type metadata accessor for GridRow();
  type metadata accessor for _GraphValue();
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  _GraphValue.subscript.getter();
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E4F401B8], MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  uint64_t v18 = v7;
  int v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  long long v23 = v17;
  uint64_t v24 = v16;
  int v25 = v15;
  uint64_t v26 = v10;
  char v27 = v11;
  return static RowTransformTrait.makeViewList<A>(content:alignment:inputs:)(v29, (uint64_t)v28, &v18, a3, a4);
}

uint64_t closure #2 in static GridRow._makeViewList(view:inputs:)(uint64_t a1)
{
  v7[2] = type metadata accessor for GridRow();
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E4F401B8], MEMORY[0x1E4FBB718]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_19, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t GridRow.init(alignment:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = a2 & 1;
  type metadata accessor for GridRow();
  return a3();
}

uint64_t type metadata accessor for GridRow()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for VerticalAlignment?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static RowTransformTrait.makeViewList<A>(content:alignment:inputs:)(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v7 = *a1;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v9 = a3[2];
  unsigned int v10 = *((_DWORD *)a3 + 6);
  unsigned int v11 = *((_DWORD *)a3 + 7);
  unsigned int v12 = *((_DWORD *)a3 + 8);
  unsigned int v13 = *((_DWORD *)a3 + 9);
  uint64_t v15 = a3[5];
  uint64_t v14 = a3[6];
  uint64_t v16 = a3[7];
  int v17 = *((_DWORD *)a3 + 16);
  uint64_t v18 = a3[9];
  char v19 = *((unsigned char *)a3 + 80);
  uint64_t v35 = *a3;
  int v36 = v8;
  uint64_t v37 = v9;
  *(void *)&long long v38 = __PAIR64__(v11, v10);
  *((void *)&v38 + 1) = __PAIR64__(v13, v12);
  uint64_t v39 = v15;
  *(void *)&long long v40 = v14;
  *((void *)&v40 + 1) = v16;
  int v41 = v17;
  uint64_t v42 = v18;
  char v43 = v19;
  uint64_t v26 = v35;
  int v27 = v8;
  uint64_t v28 = v9;
  *(void *)&long long v29 = __PAIR64__(v11, v10);
  *((void *)&v29 + 1) = __PAIR64__(v13, v12);
  uint64_t v30 = v15;
  *(void *)&long long v31 = v14;
  *((void *)&v31 + 1) = v16;
  int v32 = v17;
  uint64_t v33 = v18;
  char v34 = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = _ViewListInputs.traits.getter();
  if ((v20 & 0x100000000) != 0) {
    int v21 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    int v21 = v20;
  }
  type metadata accessor for _GraphValue<VerticalAlignment?>();
  LODWORD(v26) = v21;
  HIDWORD(v26) = _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RowTransformTrait and conformance RowTransformTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v26) = 0;
  _ViewListInputs.traits.setter();
  char v22 = v43;
  if (v42)
  {
    uint64_t v26 = v42;
    LOBYTE(v27) = v43 & 1;
    specialized Set._Variant.insert(_:)(&v25, (uint64_t)&type metadata for GridMetadata);
    uint64_t v23 = v26;
    char v22 = v27;
  }
  else
  {
    uint64_t v23 = 0;
  }
  LODWORD(v25) = v7;
  uint64_t v26 = v35;
  int v27 = v36;
  uint64_t v28 = v37;
  long long v29 = v38;
  uint64_t v30 = v39;
  long long v31 = v40;
  int v32 = v41;
  uint64_t v33 = v23;
  char v34 = v22;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a5 + 32))(&v25, &v26, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type RowTransformTrait and conformance RowTransformTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type RowTransformTrait and conformance RowTransformTrait;
  if (!lazy protocol witness table cache variable for type RowTransformTrait and conformance RowTransformTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RowTransformTrait and conformance RowTransformTrait);
  }
  return result;
}

void type metadata accessor for _GraphValue<VerticalAlignment?>()
{
  if (!lazy cache variable for type metadata for _GraphValue<VerticalAlignment?>)
  {
    type metadata accessor for VerticalAlignment?(255, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E4F401B8], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<VerticalAlignment?>);
    }
  }
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE38]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE50]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE18]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE20]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE28]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE30]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE40]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE48]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE58]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  uint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  unint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>)
  {
    type metadata accessor for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>()
{
  if (!lazy cache variable for type metadata for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>)
  {
    lazy protocol witness table accessor for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle();
    unint64_t v0 = type metadata accessor for NavigationStackStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>);
    }
  }
}

uint64_t type metadata accessor for NavigationStackStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle;
  if (!lazy protocol witness table cache variable for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle);
  }
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  int v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);

  return a2;
}

{
  void *v3;
  void **v4;
  void *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  int v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      int v17 = type metadata accessor for CommandOperation();
      return (id)outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16 + *(void *)(*(void *)(v17 - 8) + 72) * v9, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  char v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v19;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);

  return a2;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id result;
  uint64_t v18;
  char v19;
  uint64_t vars8;

  uint64_t v4 = v3;
  int v7 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = *(void *)(v15 + 56);
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for UIMenuIdentifier(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, a2, a1, v15);

  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for NSObject(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

Swift::Bool __swiftcall UIDropSession.hasItemsConforming(to:)(Swift::OpaquePointer to)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay22UniformTypeIdentifiers6UTTypeVG_SSs5NeverOTg5055_s7SwiftUI11PasteHelperV09validatedC7HandleryycSgvgSS22de12Identifiers6G54Vcfu_33_464cb2da6335d584e794ab09e778cff4AHSSTf3nnnpk_nTf1cn_n((uint64_t)to._rawValue);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned __int8 v3 = objc_msgSend(v1, sel_hasItemsConformingToTypeIdentifiers_, isa);

  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay22UniformTypeIdentifiers6UTTypeVG_SSs5NeverOTg5055_s7SwiftUI11PasteHelperV09validatedC7HandleryycSgvgSS22de12Identifiers6G54Vcfu_33_464cb2da6335d584e794ab09e778cff4AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = *(void *)(type metadata accessor for UTType() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = UTType.identifier.getter();
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unsigned __int8 *assignWithCopy for ProgressView(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v66 = type metadata accessor for Date();
    uint64_t v6 = *(void *)(*(void *)(v66 - 8) + 64);
    uint64_t v65 = *(void *)(v66 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v65 + 80);
    uint64_t v64 = v6 + v7;
    uint64_t v8 = ((v6 + v7) & ~v7) + v6;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v70 = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(v70 - 8);
    uint64_t v61 = v8;
    if ((unint64_t)(v8 + 1) > 0xA) {
      uint64_t v11 = v8 + 1;
    }
    else {
      uint64_t v11 = 10;
    }
    uint64_t v12 = *(void *)(v70 - 8);
    uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v14 = v11 + v13 + 1;
    int v15 = *(_DWORD *)(v10 + 84);
    size_t v16 = *(void *)(v10 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    uint64_t v18 = *(void *)(v9 - 8);
    uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v69 = v18;
    size_t v20 = *(void *)(v18 + 64);
    if (!*(_DWORD *)(v18 + 84)) {
      ++v20;
    }
    size_t v62 = v20;
    unint64_t v21 = v20 + ((v17 + v19 + (v14 & ~v13)) & ~v19);
    if (v21 <= 0x40) {
      uint64_t v22 = 64;
    }
    else {
      uint64_t v22 = v21;
    }
    unsigned int v23 = a1[v22];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 2:
          int v26 = *(unsigned __int16 *)a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 3:
          int v26 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 4:
          int v26 = *(_DWORD *)a1;
          if (v22 < 4) {
LABEL_21:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
          else {
LABEL_25:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v63 = ~v7;
    uint64_t v67 = ~v13;
    uint64_t v68 = ~v19;
    if (v23 == 1)
    {

      if (*((void *)a1 + 4))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      unsigned int v27 = a1[v11];
      unsigned int v28 = v27 - 2;
      if (v27 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v29 = v11;
        }
        else {
          uint64_t v29 = 4;
        }
        switch(v29)
        {
          case 1:
            int v30 = *a1;
            if (v11 >= 4) {
              goto LABEL_73;
            }
            goto LABEL_38;
          case 2:
            int v30 = *(unsigned __int16 *)a1;
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_73;
          case 3:
            int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_73;
          case 4:
            int v30 = *(_DWORD *)a1;
            if (v11 < 4)
            {
LABEL_38:
              unsigned int v27 = (v30 | (v28 << (8 * v11))) + 2;
              break;
            }
LABEL_73:
            if (v30 != -1) {
              goto LABEL_41;
            }
            goto LABEL_40;
          default:
            break;
        }
      }
      if (v27 == 1)
      {
LABEL_40:
        uint64_t v59 = *(void *)(v70 - 8);
        uint64_t v31 = v11 + v13 + 1;
        uint64_t v32 = v9;
        uint64_t v33 = *(void (**)(unsigned __int8 *, uint64_t))(v65 + 8);
        v33(a1, v66);
        v33((unsigned __int8 *)((unint64_t)&a1[v64] & v63), v66);
        uint64_t v9 = v32;
        uint64_t v14 = v31;
        uint64_t v12 = v59;
      }
LABEL_41:
      unint64_t v34 = (unint64_t)&a1[v14] & v67;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v34, 1, v70)) {
        (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v34, v70);
      }
      size_t v35 = (v34 + v17 + v19) & v68;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v69 + 48))(v35, 1, v9)) {
        (*(void (**)(size_t, uint64_t))(v69 + 8))(v35, v9);
      }
    }
    unsigned int v36 = a2[v22];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v38 = v22;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *a2;
          if (v22 >= 4) {
            goto LABEL_62;
          }
          goto LABEL_53;
        case 2:
          int v39 = *(unsigned __int16 *)a2;
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_62;
        case 3:
          int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_62;
        case 4:
          int v39 = *(_DWORD *)a2;
          if (v22 < 4)
          {
LABEL_53:
            unsigned int v36 = (v39 | (v37 << (8 * v22))) + 2;
            break;
          }
LABEL_62:
          if (v39 != -1) {
            goto LABEL_63;
          }
          goto LABEL_55;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
LABEL_55:
      long long v40 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      uint64_t v41 = *((void *)a2 + 4);
      id v42 = v40;
      if (v41)
      {
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[16] = a2[16];
        *((void *)a1 + 3) = *((void *)a2 + 3);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = *((void *)a2 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v43 = *(_OWORD *)(a2 + 8);
        long long v44 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = v44;
        *(_OWORD *)(a1 + 8) = v43;
      }
      *((void *)a1 + 7) = *((void *)a2 + 7);
      a1[v22] = 1;
      swift_retain();
    }
    else
    {
LABEL_63:
      unsigned int v45 = a2[v11];
      unsigned int v46 = v45 - 2;
      if (v45 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v47 = v11;
        }
        else {
          uint64_t v47 = 4;
        }
        switch(v47)
        {
          case 1:
            int v48 = *a2;
            if (v11 < 4) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case 2:
            int v48 = *(unsigned __int16 *)a2;
            if (v11 < 4) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case 3:
            int v48 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v11 < 4) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case 4:
            int v48 = *(_DWORD *)a2;
            if (v11 < 4) {
LABEL_76:
            }
              unsigned int v45 = (v48 | (v46 << (8 * v11))) + 2;
            else {
LABEL_80:
            }
              unsigned int v45 = v48 + 2;
            break;
          default:
            break;
        }
      }
      uint64_t v60 = v9;
      if (v45 == 1)
      {
        uint64_t v49 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v65 + 16);
        v49(a1, a2, v66);
        v49((unsigned __int8 *)((unint64_t)&a1[v64] & v63), (unsigned __int8 *)((unint64_t)&a2[v64] & v63), v66);
        a1[v61] = a2[v61];
        char v50 = 1;
      }
      else
      {
        char v50 = 0;
        uint64_t v51 = *(void *)a2;
        *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
        *(void *)a1 = v51;
      }
      a1[v11] = v50;
      Swift::String v52 = (void *)((unint64_t)&a1[v14] & v67);
      Swift::String v53 = (char *)((unint64_t)&a2[v14] & v67);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v53, 1, v70))
      {
        size_t v54 = v17;
        memcpy(v52, v53, v17);
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v52, v53, v70);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v52, 0, 1, v70);
        size_t v54 = v17;
      }
      uint64_t v55 = &v53[v54];
      uint64_t v56 = (void *)(((unint64_t)v52 + v54 + v19) & v68);
      CGSize v57 = (const void *)((unint64_t)&v55[v19] & v68);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v69 + 48))(v57, 1, v60))
      {
        memcpy(v56, v57, v62);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v69 + 16))(v56, v57, v60);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v56, 0, 1, v60);
      }
      a1[v22] = 0;
    }
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>);
    }
  }
}

Swift::Void __swiftcall UIKitSearchBar.didMoveToWindow()()
{
  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v4, sel_didMoveToWindow);
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder;
  int v2 = v0[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder];
  if (v2 != 2 && (v2 & 1) != objc_msgSend(v0, sel_isFirstResponder))
  {
    unsigned __int8 v3 = &selRef_becomeFirstResponder;
    if ((v2 & 1) == 0) {
      unsigned __int8 v3 = &selRef_resignFirstResponder;
    }
    [v0 *v3];
  }
  v0[v1] = 2;
}

uint64_t type metadata completion function for ToolbarItem()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance MagnifyGesture.Child@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v3 = v1[1];
  unsigned __int32 v4 = v1[2];
  unsigned __int32 v5 = v1[3];
  unint64_t v6 = *(void *)AGGraphGetValue();
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E4F404D8]);
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  __n128 result = v8;
  a1->n128_u64[0] = v6;
  a1->n128_u32[2] = v3;
  a1->n128_u32[3] = v5;
  a1[1].n128_u32[0] = v4;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u32[1] = v5;
  a1[2].n128_u32[2] = v4;
  a1[3] = v8;
  a1[4].n128_u64[0] = 1;
  a1[4].n128_u8[8] = 0;
  return result;
}

void type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedMagnifyGesture;
    v8[1] = &type metadata for TouchBasedMagnifyGesture;
    void v8[2] = lazy protocol witness table accessor for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture();
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>)
  {
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>)
  {
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

uint64_t static MenuPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _PickerValue();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for PickerStyleConfiguration() - 8) + 64)) {
    closure #1 in static MenuPickerStyle._makeView<A>(value:inputs:)(1, a3, a4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  AGGraphCreateOffsetAttribute2();
  uint64_t v6 = MEMORY[0x1E4F3FCF0];
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, v6, MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  type metadata accessor for StaticIf();
  type metadata accessor for MenuPickerStyle.Body();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return static StaticIf<>._makeView(view:inputs:)();
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI32PlatformViewRepresentableAdaptor33_19642D833A8FE469B137699ED1426762LLVyAA19UIKitRichTextEditorVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t assignWithCopy for RootModifier(uint64_t a1, uint64_t a2)
{
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  unsigned __int32 v4 = (_OWORD *)(a1 + 24);
  unsigned __int32 v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 24);
      uint64_t v7 = *(void *)(a2 + 56);
      long long v8 = *(_OWORD *)(a2 + 40);
      _OWORD *v4 = *v5;
      *(_OWORD *)(a1 + 40) = v8;
      *(void *)(a1 + 56) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    _OWORD *v4 = v9;
    *(_OWORD *)(a1 + 40) = v10;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v11 = (long long *)(a1 + 72);
  uint64_t v12 = (long long *)(a2 + 72);
  int v13 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      long long v15 = *v12;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      long long *v11 = v15;
    }
    else
    {
      char v22 = v13 & 1;
      uint64_t v23 = *(void *)(a2 + 72);
      uint64_t v24 = *(void *)(a2 + 80);
      outlined copy of SceneID(v23, v24, v13 & 1);
      *(void *)(a1 + 72) = v23;
      *(void *)(a1 + 80) = v24;
      *(unsigned char *)(a1 + 88) = v22;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 72);
    char v14 = *(unsigned char *)(a2 + 88);
    long long *v11 = *v12;
    *(unsigned char *)(a1 + 88) = v14;
  }
  else
  {
    char v16 = v13 & 1;
    uint64_t v17 = *(void *)(a2 + 72);
    uint64_t v18 = *(void *)(a2 + 80);
    outlined copy of SceneID(v17, v18, v13 & 1);
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 80);
    char v21 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 72) = v17;
    *(void *)(a1 + 80) = v18;
    *(unsigned char *)(a1 + 88) = v16;
    outlined consume of SceneID(v19, v20, v21);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

void type metadata completion function for HostingContentViewRootModifier()
{
  type metadata accessor for UICellConfigurationState?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

__n128 __swift_memcpy177_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ListCollectionViewCellBase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TabViewStyleConfiguration<A>.Content(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ShadowListDataSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of UIHostingController.rootView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x348))();
}

id one-time initialization function for dynamicColorCache()
{
  id result = objc_msgSend(self, sel_strongToWeakObjectsMapTable);
  dynamicColorCache = (uint64_t)result;
  return result;
}

uint64_t dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x548))();
}

double StackIconLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (*v4 == 1)
  {
    if (a4)
    {
      if (a2) {
        return 0.0;
      }
      else {
        return *(double *)&a1;
      }
    }
    else
    {
      if (one-time initialization token for stackCircularIconWidth != -1) {
        swift_once();
      }
      double v5 = *(double *)&static ClarityUIMetrics.stackCircularIconWidth;
      if (one-time initialization token for buttonHorizontalPadding != -1) {
        swift_once();
      }
      return v5 + *(double *)&static ClarityUIMetrics.buttonHorizontalPadding;
    }
  }
  else
  {
    if (one-time initialization token for stackCircularIconWidth != -1) {
      swift_once();
    }
    double v6 = *(double *)&static ClarityUIMetrics.stackCircularIconWidth;
    if (one-time initialization token for stackCircularIconHeight != -1) {
      swift_once();
    }
  }
  return v6;
}

uint64_t partial apply for closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.setter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)(a1, a2);
}

uint64_t View.alert<A>(_:isPresented:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v49 = a8;
  int v43 = a7;
  uint64_t v50 = a9;
  uint64_t v52 = a11;
  uint64_t v47 = a10;
  uint64_t v51 = a13;
  uint64_t v45 = a12;
  uint64_t v48 = *(void *)(a12 - 8);
  uint64_t v39 = a14;
  MEMORY[0x1F4188790](a1);
  char v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v42 = v22;
  MEMORY[0x1F4188790](v22);
  long long v40 = (char *)&v35 - v23;
  unint64_t v24 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  *(void *)&v59[9] = a14;
  *(void *)&v59[17] = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v53 = v22;
  *((void *)&v53 + 1) = MEMORY[0x1E4F417F8];
  *(void *)&long long v54 = WitnessTable;
  *((void *)&v54 + 1) = MEMORY[0x1E4F417F0];
  uint64_t v44 = type metadata accessor for AlertModifier();
  uint64_t v46 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  int v26 = (char *)&v35 - v25;
  *(void *)&long long v53 = 0;
  Text.assertUnstyled(_:options:)();
  uint64_t v37 = a5;
  *(void *)&long long v53 = a5;
  *((void *)&v53 + 1) = a6;
  uint64_t v36 = a6;
  LOBYTE(v22) = v43;
  LOBYTE(v54) = v43;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](v59);
  int v38 = v59[0];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = v49(v27);
  uint64_t v29 = (uint64_t)v40;
  uint64_t v30 = v45;
  MEMORY[0x18C113660](v28, v45, &unk_1ED418F28, v39);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v30);
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  __n128 v31 = AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)(v38, v37, v36, v22, a1, a2, a3 & 1, a4, (uint64_t)v26, v29, v34, &v53, 0, v42, MEMORY[0x1E4F417F8]);
  uint64_t v32 = v44;
  MEMORY[0x18C113660](v26, v52, v44, v51, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v26, v32);
}

id AccessibilityNode.applyProperties(_:to:)(uint64_t *a1, void *a2)
{
  long long v3 = v2;
  uint64_t v5 = *a1;
  double v6 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v95 = NSClassFromString(v6);

  AccessibilityProperties.visibility.getter();
  *(void *)&v96[0] = aBlock.i64[0];
  __int16 v7 = AccessibilityNullableOptionSet<>.shouldApplyPlatformElementOverride.getter();
  unsigned __int8 v8 = objc_msgSend(v3, sel_isAccessibilityElement);
  long long v9 = 0;
  long long v10 = &unk_18834C000;
  if (v7)
  {
    unsigned __int8 v11 = v8;
    uint64_t v12 = swift_allocObject();
    *(unsigned char *)(v12 + 16) = v11;
    uint64_t v103 = partial apply for closure #3 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v12;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = 1107296256;
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    uint64_t v102 = &block_descriptor_121;
    long long v9 = _Block_copy(&aBlock);
    swift_release();
  }
  objc_msgSend(a2, sel_setIsAccessibilityElementBlock_, v9);
  _Block_release(v9);
  unsigned __int8 v13 = objc_msgSend(v3, sel_accessibilityElementsHidden);
  if ((v7 & 0x100) != 0)
  {
    unsigned __int8 v15 = v13;
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = v15;
    uint64_t v103 = partial apply for closure #2 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v16;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = 1107296256;
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    uint64_t v102 = &block_descriptor_115;
    char v14 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    char v14 = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityElementsHiddenBlock_, v14);
  _Block_release(v14);
  AccessibilityProperties.traits.getter();
  v96[0] = aBlock;
  v106[0] = 14;
  char v17 = AccessibilityNullableOptionSet<>.subscript.getter();
  if (v17 == 2)
  {
    objc_msgSend(a2, sel_setAccessibilityViewIsModalBlock_, 0);
  }
  else
  {
    char v18 = v17 & 1;
    uint64_t v19 = swift_allocObject();
    *(unsigned char *)(v19 + 16) = v18;
    uint64_t v103 = partial apply for closure #3 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v19;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = 1107296256;
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    uint64_t v102 = &block_descriptor_109;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(a2, sel_setAccessibilityViewIsModalBlock_, v20);
    _Block_release(v20);
  }
  uint64_t v21 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v21, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  if (aBlock.i64[0])
  {
    uint64_t v22 = *(void **)(aBlock.i64[0] + 16);
    swift_bridgeObjectRelease();
    if (v22)
    {
      uint64_t v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #4 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v23;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = 1107296256;
      uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
      uint64_t v102 = &block_descriptor_103_0;
      uint64_t v22 = _Block_copy(&aBlock);
      swift_release();
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityLabelBlock_, v22);
  _Block_release(v22);
  uint64_t v24 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v24, &aBlock);
  swift_bridgeObjectRelease();
  if (v104)
  {
    uint64_t v25 = AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)&aBlock);
    uint64_t v26 = *(void *)(v25 + 16);
    swift_bridgeObjectRelease();
    if (v26)
    {
      uint64_t v27 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #5 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v27;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = 1107296256;
      uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
      uint64_t v102 = &block_descriptor_99;
      uint64_t v28 = _Block_copy(&aBlock);
      swift_release();
      goto LABEL_18;
    }
  }
  else
  {
    outlined destroy of AnyAccessibilityValue?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  }
  uint64_t v28 = 0;
LABEL_18:
  objc_msgSend(a2, sel_setAccessibilityValueBlock_, v28);
  _Block_release(v28);
  aBlock.i64[0] = v5;
  uint64_t v29 = *(void **)(AccessibilityProperties.hints.getter() + 16);
  swift_bridgeObjectRelease();
  if (v29)
  {
    uint64_t v30 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v103 = (uint64_t (*)())partial apply for closure #6 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v30;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = 1107296256;
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
    uint64_t v102 = &block_descriptor_39_0;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_release();
  }
  objc_msgSend(a2, sel_setAccessibilityHintBlock_, v29);
  _Block_release(v29);
  uint64_t v31 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v31, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  uint64_t v32 = (void *)aBlock.i64[1];
  swift_bridgeObjectRelease();
  if (v32)
  {
    uint64_t v33 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v103 = (uint64_t (*)())partial apply for closure #7 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v33;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = 1107296256;
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
    uint64_t v102 = &block_descriptor_95;
    uint64_t v32 = _Block_copy(&aBlock);
    swift_release();
  }
  objc_msgSend(a2, sel_setAccessibilityIdentifierBlock_, v32);
  _Block_release(v32);
  id v34 = objc_msgSend(v3, sel_accessibilityAttributedUserInputLabels);
  if (v34)
  {
    uint64_t v35 = v34;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (v36 >> 62) {
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v37) {
      objc_msgSend(a2, sel_setAccessibilityAttributedUserInputLabels_, v35);
    }
  }
  id v38 = objc_msgSend(v3, sel_accessibilityTextualContext);
  if (v38)
  {
    uint64_t v39 = v38;
    objc_msgSend(a2, sel_setAccessibilityTextualContext_, v38);
  }
  id v40 = objc_msgSend(v3, sel_accessibilityDirectTouchOptions);
  if (v40) {
    objc_msgSend(a2, sel_setAccessibilityDirectTouchOptions_, v40);
  }
  id v41 = objc_msgSend(v3, sel_accessibilityContainerType);
  type metadata accessor for HostingScrollView();
  if (!swift_dynamicCastClass() && v41) {
    objc_msgSend(a2, sel_setAccessibilityContainerType_, v41);
  }
  if (v95)
  {
    if (v41 == (id)1)
    {
      uint64_t v42 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #8 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v42;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = 1107296256;
      uint64_t v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      uint64_t v102 = &block_descriptor_79_0;
      int v43 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityColumnCountBlock_, v43);
      _Block_release(v43);
      uint64_t v44 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #9 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v44;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = 1107296256;
      uint64_t v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      uint64_t v102 = &block_descriptor_83_0;
      uint64_t v45 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityRowCountBlock_, v45);
      _Block_release(v45);
      uint64_t v46 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #10 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v46;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = 1107296256;
      uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned Int, @unowned Int) -> (@out Any?);
      uint64_t v102 = &block_descriptor_87;
      uint64_t v47 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityDataTableCellElementForRowColumnBlock_, v47);
      _Block_release(v47);
      uint64_t v48 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #11 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v48;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = 1107296256;
      long long v10 = (void *)&unk_18834C000;
      uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned Int) -> (@owned [Any]?);
      uint64_t v102 = &block_descriptor_91;
      uint64_t v49 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityHeaderElementsForColumnBlock_, v49);
      _Block_release(v49);
    }
    else
    {
      objc_msgSend(a2, sel__setAccessibilityColumnCountBlock_, 0);
      objc_msgSend(a2, sel__setAccessibilityRowCountBlock_, 0);
      objc_msgSend(a2, sel__setAccessibilityDataTableCellElementForRowColumnBlock_, 0);
      objc_msgSend(a2, sel__setAccessibilityHeaderElementsForColumnBlock_, 0);
    }
    uint64_t v50 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v50, (uint64_t)&aBlock);
    swift_bridgeObjectRelease();
    if (v104 != 255)
    {
      _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)&aBlock, (uint64_t)v96, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
      if (v98 - 1 <= 2)
      {
        outlined destroy of AnyAccessibilityValue?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
        uint64_t v51 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v103 = (uint64_t (*)())partial apply for closure #12 in AccessibilityNode.applyProperties(_:to:);
        uint64_t v104 = (void *)v51;
        aBlock.i64[0] = MEMORY[0x1E4F143A8];
        aBlock.i64[1] = v10[362];
        uint64_t v52 = aBlock.i64[1];
        uint64_t v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
        uint64_t v102 = &block_descriptor_71;
        long long v53 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(a2, sel__setAccessibilityColumnRangeBlock_, v53);
        _Block_release(v53);
        uint64_t v54 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v103 = (uint64_t (*)())partial apply for closure #12 in AccessibilityNode.applyProperties(_:to:);
        uint64_t v104 = (void *)v54;
        aBlock.i64[0] = MEMORY[0x1E4F143A8];
        aBlock.i64[1] = v52;
        uint64_t v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
        uint64_t v102 = &block_descriptor_75;
        long long v55 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(a2, sel__setAccessibilityRowRangeBlock_, v55);
        _Block_release(v55);
        goto LABEL_44;
      }
      outlined destroy of AccessibilityTableContext((uint64_t)v96);
    }
    objc_msgSend(a2, sel__setAccessibilityColumnRangeBlock_, 0);
    objc_msgSend(a2, sel__setAccessibilityRowRangeBlock_, 0);
    outlined destroy of AnyAccessibilityValue?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  }
LABEL_44:
  AccessibilityNode.attachment.getter(aBlock.i64);

  uint64_t v56 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v56, &aBlock);
  swift_bridgeObjectRelease();
  if (v102)
  {
    int8x16_t v57 = aBlock;
    char v58 = (char)v101;
    int v59 = ~(_BYTE)v101;
    outlined consume of AccessibilityActivationPointStorage?(aBlock.i64[0], aBlock.i64[1], (uint64_t)v101, (uint64_t)v102);
    swift_bridgeObjectRelease();
    if (v59)
    {
      int8x16_t aBlock = v57;
      LOBYTE(v101) = v58;
      uint64_t v60 = v3;
      uint64_t v61 = AccessibilityNode.resolvedActivationPoint(for:)((long long *)aBlock.i8);
      uint64_t v63 = v62;
      char v65 = v64;

      goto LABEL_49;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v61 = AccessibilityNode.childActivationPoint(implicit:)(0);
  uint64_t v63 = v66;
  char v65 = v67;
LABEL_49:
  if (v65 == -1)
  {
    objc_msgSend(a2, sel_setAccessibilityActivationPointBlock_, 0);
  }
  else
  {
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = v61;
    *(void *)(v68 + 24) = v63;
    *(unsigned char *)(v68 + 32) = v65 & 1;
    uint64_t v103 = (uint64_t (*)())partial apply for closure #14 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v68;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = v10[362];
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned CGPoint);
    uint64_t v102 = &block_descriptor_67_1;
    uint64_t v69 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(a2, sel_setAccessibilityActivationPointBlock_, v69);
    _Block_release(v69);
  }
  self;
  if (!swift_dynamicCastObjCClass())
  {
    AccessibilityNode.contentPath.getter((uint64_t)v105);
    outlined release of Path?((uint64_t)v105);
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)v105, (uint64_t)v96, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
    if (v97 == 255)
    {
      uint64_t v71 = 0;
    }
    else
    {
      uint64_t v70 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #15 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v70;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = v10[362];
      uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned CGRect);
      uint64_t v102 = &block_descriptor_61;
      uint64_t v71 = _Block_copy(&aBlock);
      swift_release();
    }
    objc_msgSend(a2, sel_setAccessibilityFrameBlock_, v71);
    _Block_release(v71);
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)v105, (uint64_t)v106, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
    if (v106[32] == 255)
    {
      uint64_t v73 = 0;
    }
    else
    {
      uint64_t v72 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #16 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v72;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = v10[362];
      uint64_t v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      uint64_t v102 = &block_descriptor_57;
      uint64_t v73 = _Block_copy(&aBlock);
      swift_release();
    }
    objc_msgSend(a2, sel_setAccessibilityPathBlock_, v73);
    _Block_release(v73);
  }
  if (v95)
  {
    aBlock.i64[0] = v5;
    uint64_t v74 = AccessibilityProperties.customContentList.getter();
    if (*(void *)(v74 + 16))
    {
      uint64_t v75 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      uint64_t v76 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
      uint64_t v77 = (void *)swift_allocObject();
      v77[2] = v74;
      v77[3] = v75;
      v77[4] = v76;
      uint64_t v103 = partial apply for closure #17 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = v77;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = v10[362];
      uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned [AXCustomContent]?);
      uint64_t v102 = &block_descriptor_45;
      uint64_t v78 = _Block_copy(&aBlock);
      swift_retain_n();
      swift_retain_n();
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityCustomContentBlock_, v78);
      _Block_release(v78);
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      objc_msgSend(a2, sel__setAccessibilityCustomContentBlock_, 0);
    }
    uint64_t v79 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v103 = partial apply for closure #18 in AccessibilityNode.applyProperties(_:to:);
    uint64_t v104 = (void *)v79;
    aBlock.i64[0] = MEMORY[0x1E4F143A8];
    aBlock.i64[1] = v10[362];
    uint64_t v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned UIAccessibilityTraits);
    uint64_t v102 = &block_descriptor_49;
    uint64_t v80 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(a2, sel__setAccessibilityAdditionalTraitsBlock_, v80);
    _Block_release(v80);
  }
  uint64_t v81 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  uint64_t v82 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(aBlock.i64);

  uint64_t v83 = swift_bridgeObjectRetain();
  uint64_t v84 = specialized AccessibilityProperties.subscript.getter(v83);
  swift_bridgeObjectRelease_n();
  if (*(void *)(v84 + 16))
  {
    uint64_t v85 = v3;
    swift_retain();
    swift_retain();
    specialized Sequence.compactMap<A>(_:)(v84, v81, v82, (uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomRotor);
    v86.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v86.super.Class isa = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityCustomRotors_, v86.super.isa);

  id v87 = objc_msgSend(v3, sel_accessibilityDragSourceDescriptors);
  objc_msgSend(a2, sel_setAccessibilityDragSourceDescriptors_, v87);

  id v88 = objc_msgSend(v3, sel_accessibilityDropPointDescriptors);
  objc_msgSend(a2, sel_setAccessibilityDropPointDescriptors_, v88);

  aBlock.i64[0] = v5;
  char v99 = 21;
  char v89 = AccessibilityProperties.subscript.getter();
  if (v89 != 2) {
    objc_msgSend(a2, sel_setAccessibilityRespondsToUserInteraction_, v89 & 1);
  }
  uint64_t v90 = swift_bridgeObjectRetain();
  uint64_t v91 = specialized AccessibilityProperties.subscript.getter(v90);
  swift_bridgeObjectRelease();
  id result = (id)swift_release();
  if (v95)
  {
    if (v91)
    {
      uint64_t v93 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v103 = (uint64_t (*)())partial apply for closure #19 in AccessibilityNode.applyProperties(_:to:);
      uint64_t v104 = (void *)v93;
      aBlock.i64[0] = MEMORY[0x1E4F143A8];
      aBlock.i64[1] = v10[362];
      uint64_t v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      uint64_t v102 = &block_descriptor_53_0;
      unint64_t v94 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityChartDescriptorBlock_, v94);
      _Block_release(v94);
      objc_msgSend(a2, sel__accessibilitySetSupportsChartsV2_, 1);
    }
    else
    {
      objc_msgSend(a2, sel__setAccessibilityChartDescriptorBlock_, 0);
      _Block_release(0);
    }
    return objc_msgSend(a2, sel__accessibilitySetSortPriority_, objc_msgSend(v3, sel__accessibilitySortPriority));
  }
  return result;
}

BOOL specialized AccessibilityNode.CellVisitor.isTargetCell(node:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AccessibilityNode.attachment.getter(v12);

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  if (v13 == 255) {
    goto LABEL_14;
  }
  _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)v12, (uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      BOOL v7 = v9 == a2 && v10 == a3;
      goto LABEL_15;
    }
    outlined destroy of AccessibilityTableContext((uint64_t)&v9);
LABEL_14:
    BOOL v7 = 0;
    goto LABEL_15;
  }
  BOOL v7 = 0;
  if ((a3 & 0x8000000000000000) == 0 && v10 > a3) {
    BOOL v7 = v9 == a2;
  }
LABEL_15:
  outlined destroy of AnyAccessibilityValue?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  return v7;
}

uint64_t outlined destroy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with copy of AccessibilityTableContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for AccessibilityTableContext?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t AccessibilityNode._accessibilityDataSeriesGridlinePositions(for:)(uint64_t a1)
{
  AccessibilityNode.attachment.getter(v14);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v14) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    long long v4 = &v16;
  }
  else
  {
    if (a1)
    {
LABEL_9:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
      return 0;
    }
    long long v4 = &v15;
  }
  uint64_t v5 = MEMORY[0x1E4F412E8];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v11, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v9) == 1
    || !*(void *)(v10 + 16))
  {
    goto LABEL_9;
  }
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized _arrayForceCast<A, B>(_:)(v6);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  swift_bridgeObjectRelease();
  return v7;
}

void AccessibilityNode.attachment.getter(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  if (v4)
  {
    uint64_t v5 = (void *)v3[1];
    *a1 = v4;
    a1[1] = (uint64_t)v5;
    id v6 = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
    swift_beginAccess();
    uint64_t v8 = *v7;
    int64_t v9 = *(void *)(*v7 + 16);
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
    if (v9)
    {
      uint64_t v23 = a1;
      v24[0] = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      uint64_t v10 = (void *)v24[0];
      char v11 = (void **)(v8 + 40);
      do
      {
        uint64_t v12 = (uint64_t)*(v11 - 1);
        unsigned __int8 v13 = *v11;
        v24[0] = (uint64_t)v10;
        unint64_t v15 = v10[2];
        unint64_t v14 = v10[3];
        swift_bridgeObjectRetain();
        id v16 = v13;
        if (v15 >= v14 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
          uint64_t v10 = (void *)v24[0];
        }
        void v10[2] = v15 + 1;
        char v17 = &v10[2 * v15];
        v17[4] = v12;
        v17[5] = v13;
        v11 += 5;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      a1 = v23;
    }
    static AccessibilityAttachment.combine(_:)(v10, v24);
    swift_bridgeObjectRelease();
    uint64_t v18 = v24[0];
    uint64_t v19 = (void *)v24[1];
    uint64_t v20 = *v3;
    uint64_t v21 = (void *)v3[1];
    uint64_t *v3 = v24[0];
    v3[1] = (uint64_t)v19;
    id v22 = v19;
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityAttachment?(v20, v21);
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;
    *a1 = v18;
    a1[1] = (uint64_t)v19;
  }
}

Class AccessibilityNode._accessibilityDataSeriesMinimumValue(for:)(uint64_t a1)
{
  AccessibilityNode.attachment.getter(v12);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v10);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v12) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    uint64_t v4 = &v14;
    goto LABEL_6;
  }
  if (!a1)
  {
    uint64_t v4 = &v13;
LABEL_6:
    uint64_t v5 = MEMORY[0x1E4F412E8];
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)v9, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
    if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v8) != 1
      && (v8[80] & 1) == 0)
    {
      Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
      return isa;
    }
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
  return 0;
}

Swift::Double __swiftcall AccessibilityNode._accessibilityDataSeriesSonificationDuration()()
{
  AccessibilityNode.attachment.getter(v5);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v3);
  swift_bridgeObjectRelease_n();
  uint64_t v1 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v1);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v5) == 1) {
    return 0.0;
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v4);
  Swift::Double result = 6.0;
  if ((v6 & 1) == 0) {
    return *(double *)&v5[5];
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v17 = a1 + 32;
    uint64_t v4 = a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    for (uint64_t i = 0; i != v18; ++i)
    {
      uint64_t v6 = v17 + 32 * i;
      uint64_t v7 = *(void *)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      char v9 = *(unsigned char *)(v6 + 16);
      uint64_t v10 = *(void *)(*(void *)v4 + 16);
      if (v10)
      {
        char v11 = (unsigned __int8 *)(*(void *)v4 + 64);
        uint64_t v12 = v10 - 1;
        do
        {
          uint64_t v13 = v12;
          int v14 = *v11;
          v11 += 40;
          if (((v14 != 255) & v14) != 0) {
            break;
          }
          --v12;
        }
        while (v13);
      }
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v8, v9);
      swift_retain();
      swift_retain();
      uint64_t v15 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
      swift_release();
      swift_release();
      outlined consume of Text.Storage(v7, v8, v9);
      uint64_t v16 = swift_bridgeObjectRelease();
      if (v15)
      {
        MEMORY[0x18C115B40](v16);
        if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt32 *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t i;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void v24[2];
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  _OWORD v36[9];
  unsigned char v37[32];
  _OWORD v38[6];
  _OWORD v39[2];
  uint64_t v40;

  uint64_t v5 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (Swift::UInt32 *)((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = MEMORY[0x1E4FBC860];
  id v40 = MEMORY[0x1E4FBC860];
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    char v11 = a1;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v13 = (_OWORD *)(a2 + 16);
    v24[0] = v11;
    v24[1] = v2;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    int v14 = *(void *)(v6 + 72);
    for (uint64_t i = v10 - 1; ; --i)
    {
      outlined init with copy of DisplayList.HostedViewState.Key(v12, (uint64_t)v8, type metadata accessor for DisplayList.HostedViewState.Key);
      uint64_t v16 = v13[6];
      v38[5] = v13[5];
      v39[0] = v16;
      *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)((char *)v13 + 108);
      uint64_t v17 = v13[4];
      uint64_t v18 = v13[1];
      v38[0] = *v13;
      v38[1] = v18;
      uint64_t v19 = v13[3];
      v38[2] = v13[2];
      v38[3] = v19;
      unsigned char v38[4] = v17;
      uint64_t v20 = *((void *)&v39[0] + 1);
      if (*(void *)(*((void *)&v39[0] + 1) + 16))
      {
        outlined retain of DisplayList.HostedViewState((uint64_t)v38);
        uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
        if (v22)
        {
          outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v20 + 56) + 176 * v21, (uint64_t)&v25);
        }
        else
        {
          id v34 = 0u;
          uint64_t v35 = 0u;
          uint64_t v32 = 0u;
          uint64_t v33 = 0u;
          uint64_t v30 = 0u;
          uint64_t v31 = 0u;
          uint64_t v28 = 0u;
          uint64_t v29 = 0u;
          uint64_t v26 = 0u;
          uint64_t v27 = 0u;
          uint64_t v25 = 0u;
        }
        outlined release of DisplayList.HostedViewState((uint64_t)v38);
      }
      else
      {
        id v34 = 0u;
        uint64_t v35 = 0u;
        uint64_t v32 = 0u;
        uint64_t v33 = 0u;
        uint64_t v30 = 0u;
        uint64_t v31 = 0u;
        uint64_t v28 = 0u;
        uint64_t v29 = 0u;
        uint64_t v26 = 0u;
        uint64_t v27 = 0u;
        uint64_t v25 = 0u;
      }
      uint64_t result = outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v8, type metadata accessor for DisplayList.HostedViewState.Key);
      if (*((void *)&v27 + 1))
      {
        v36[8] = v33;
        *(_OWORD *)uint64_t v37 = v34;
        *(_OWORD *)&v37[16] = v35;
        v36[4] = v29;
        v36[5] = v30;
        v36[6] = v31;
        v36[7] = v32;
        v36[0] = v25;
        v36[1] = v26;
        void v36[2] = v27;
        v36[3] = v28;
        if (!*((void *)&v35 + 1))
        {
          __break(1u);
          return result;
        }
        if (*(void *)&v37[8])
        {
          uint64_t v25 = *(_OWORD *)&v37[8];
          swift_retain();
          if ((_ViewOutputs.subscript.getter() & 0x100000000) == 0)
          {
            _s10Foundation4UUIDVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
            AGGraphGetValue();
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          swift_retain();
        }
        MultiViewResponder.children.setter();
        swift_release();
        swift_retain();
        uint64_t v23 = outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v36);
        MEMORY[0x18C115B40](v23);
        if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (!i)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          return v40;
        }
      }
      else
      {
        outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
        if (!i) {
          goto LABEL_21;
        }
      }
      v12 += v14;
    }
  }
  return result;
}

uint64_t View.alert<A, B>(_:isPresented:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v60 = a8;
  char v18 = a7;
  int v47 = a7;
  *(void *)&long long v66 = a5;
  *((void *)&v66 + 1) = a6;
  uint64_t v54 = a4;
  uint64_t v64 = a9;
  uint64_t v65 = a13;
  uint64_t v62 = a12;
  uint64_t v61 = a11;
  uint64_t v58 = a10;
  uint64_t v50 = a18;
  uint64_t v52 = a15;
  uint64_t v63 = a16;
  uint64_t v48 = a17;
  MEMORY[0x1F4188790](a1);
  int v59 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v23;
  uint64_t v57 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v27);
  uint64_t v49 = (char *)&v45 - v28;
  unint64_t v29 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  *(void *)&v73[9] = a17;
  *(void *)&v73[17] = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v67 = v27;
  *((void *)&v67 + 1) = a15;
  *(void *)&long long v68 = WitnessTable;
  *((void *)&v68 + 1) = a18;
  uint64_t v55 = type metadata accessor for AlertModifier();
  uint64_t v56 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v31 = (char *)&v45 - v30;
  *(void *)&long long v67 = 0;
  char v32 = a3 & 1;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = v54;
  Text.assertUnstyled(_:options:)();
  long long v67 = v66;
  LOBYTE(v68) = v18;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](v73);
  int v46 = v73[0];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(a1, a2, v32);
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = v60(v36);
  uint64_t v38 = (uint64_t)v49;
  uint64_t v39 = v53;
  MEMORY[0x18C113660](v37, v53, &unk_1ED418F28, v48);
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v26, v39);
  uint64_t v41 = (uint64_t)v59;
  v61(v40);
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v67 = 0u;
  __n128 v42 = AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)(v46, v66, *((uint64_t *)&v66 + 1), v47, v33, v34, v32, v35, (uint64_t)v31, v38, v41, &v67, 0, v27, v52);
  uint64_t v43 = v55;
  MEMORY[0x18C113660](v31, v65, v55, v63, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v31, v43);
}

unint64_t lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionsModifier and conformance ActionsModifier;
  if (!lazy protocol witness table cache variable for type ActionsModifier and conformance ActionsModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionsModifier and conformance ActionsModifier);
  }
  return result;
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI4PathVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_5(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

__n128 AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long *a12, char a13, uint64_t a14, uint64_t a15)
{
  long long v31 = a12[1];
  long long v32 = *a12;
  long long v29 = a12[3];
  long long v30 = a12[2];
  __n128 v28 = (__n128)a12[4];
  uint64_t v27 = *((void *)a12 + 10);
  uint64_t v21 = (int *)type metadata accessor for AlertModifier();
  uint64_t v22 = a9 + v21[17];
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = a7 & 1;
  *(void *)(a9 + 56) = a8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(a9 + v21[15], a10, a14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(a9 + v21[16], a11, a15);
  *(_OWORD *)uint64_t v22 = v32;
  *(_OWORD *)(v22 + 16) = v31;
  *(_OWORD *)(v22 + 32) = v30;
  *(_OWORD *)(v22 + 48) = v29;
  __n128 result = v28;
  *(__n128 *)(v22 + 64) = v28;
  *(void *)(v22 + 80) = v27;
  *(unsigned char *)(a9 + v21[18]) = a13;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GridScrollViewContent()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, MEMORY[0x1E4FBB320]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t assignWithCopy for SearchOverlayView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 24);
  char v9 = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  uint64_t v12 = *(void *)(v2 + 40);
  LOBYTE(v2) = *(unsigned char *)(v2 + 48);
  outlined copy of Environment<Bool>.Content(v12, v2);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = v2;
  outlined consume of Environment<Bool?>.Content(v13, v14);
  return a1;
}

unint64_t instantiation function for generic protocol witness table for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _NavigationStackStyleConfiguration.Root(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LabeledContentStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LabeledContentStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfigurationReader<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

unint64_t instantiation function for generic protocol witness table for LabelGroupStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.Actions(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ToggleStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance WrappedButtonStyleBody<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41003C0](a1, a2, a3, WitnessTable);
}

unint64_t instantiation function for generic protocol witness table for HelpStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CollectionViewListRoot<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t type metadata completion function for PlaybackButton.Specs()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PlaybackButton.Configuration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackButton.Configuration);
}

uint64_t assignWithCopy for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = (long long *)(a1 + 32);
  char v5 = (long long *)(a2 + 32);
  int v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    if (v6 == 255)
    {
      long long v8 = *v5;
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      long long *v4 = v8;
    }
    else
    {
      char v15 = v6 & 1;
      uint64_t v17 = *(void *)(a2 + 32);
      uint64_t v16 = *(void *)(a2 + 40);
      outlined copy of SceneID(v17, v16, v6 & 1);
      *(void *)(a1 + 32) = v17;
      *(void *)(a1 + 40) = v16;
      *(unsigned char *)(a1 + 48) = v15;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of SceneID(a1 + 32);
    char v7 = *(unsigned char *)(a2 + 48);
    long long *v4 = *v5;
    *(unsigned char *)(a1 + 48) = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    outlined copy of SceneID(v11, v10, v6 & 1);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    char v14 = *(unsigned char *)(a1 + 48);
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 48) = v9;
    outlined consume of SceneID(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for WindowSceneList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = ((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(void *)((((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>();
    lazy protocol witness table accessor for type DividerShape<Rectangle> and conformance DividerShape<A>(&lazy protocol witness table cache variable for type _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>)
  {
    type metadata accessor for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>);
    }
  }
}

void type metadata accessor for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>)
  {
    type metadata accessor for DividerShape<Rectangle>();
    lazy protocol witness table accessor for type DividerShape<Rectangle> and conformance DividerShape<A>(&lazy protocol witness table cache variable for type DividerShape<Rectangle> and conformance DividerShape<A>, (void (*)(uint64_t))type metadata accessor for DividerShape<Rectangle>);
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>);
    }
  }
}

void type metadata accessor for DividerShape<Rectangle>()
{
  if (!lazy cache variable for type metadata for DividerShape<Rectangle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for DividerShape();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DividerShape<Rectangle>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type DividerShape<Rectangle> and conformance DividerShape<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DividerShape()
{
  return __swift_instantiateGenericMetadata();
}

double static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  long long v5 = *(_OWORD *)(a2 + 48);
  void v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v5;
  v11[4] = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v6;
  int v7 = *a1;
  int v12 = *(_DWORD *)(a2 + 80);
  a3(&v9);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(v7, v11);
  swift_beginAccess();
  *(void *)a4 = v9;
  double result = v10;
  a4[1] = v10;
  return result;
}

uint64_t specialized transformKey #1 <A>(_:) in static ToolbarAppearanceModifier._makeView(modifier:inputs:body:)(int a1, long long *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, (unint64_t *)&lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomBarAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  long long v4;
  long long v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  long long v4;
  long long v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, (unint64_t *)&lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<WindowToolbarItemsAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  long long v4;
  long long v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<TabBarAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  long long v4;
  long long v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  long long v4;
  long long v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<NavigationBarAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  int v3;
  long long v4;
  long long v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = a1;
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarAppearanceModifier>, (uint64_t)&type metadata for ToolbarAppearanceModifier, MEMORY[0x1E4F3F590]);
  int v3 = _GraphValue.value.getter();
  long long v4 = a2[3];
  long long v13 = a2[2];
  long long v14 = v4;
  long long v15 = a2[4];
  int v16 = *((_DWORD *)a2 + 20);
  long long v5 = a2[1];
  long long v11 = *a2;
  long long v12 = v5;
  LODWORD(v11) = v3;
  DWORD1(v11) = _ViewInputs.transaction.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(0, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey>);
  lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(&lazy protocol witness table cache variable for type ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>, &lazy cache variable for type metadata for ToolbarAppearanceModifier.PreferenceValue<AccessoryBarAppearanceKey>);
  int v6 = Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v8 = *((void *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = v6;
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey> and conformance ToolbarAppearanceModifier.PreferenceValue<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ToolbarAppearanceModifier.PreferenceValue<BottomOrnamentAppearanceKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for ToolbarAppearanceModifier.PreferenceValue();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for ToolbarAppearanceModifier.PreferenceValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackdropGroupEffect()
{
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

uint64_t type metadata completion function for SelectionManagerBox()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for _TaskValueModifier.InnerModifier.TaskState()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ToolbarButtonContentModifier@<X0>(uint64_t (**a1)@<X0>(int a1@<W0>, uint64_t a2@<X8>)@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  char v5 = v1[16];
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(unsigned char *)(v6 + 32) = v5;
  *a1 = partial apply for closure #1 in ToolbarButtonContentModifier.body(content:);
  a1[1] = (uint64_t (*)@<X0>(int@<W0>, uint64_t@<X8>))v6;

  return outlined copy of Environment<Bool>.Content(v4, v5);
}

uint64_t protocol witness for View.body.getter in conformance ResolvedNavigationSplitStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  __int16 v3 = *(_WORD *)(v1 + 16);
  __int16 v4 = *(_WORD *)(v1 + 18);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 18) = 1;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = 1;
  *(_WORD *)(a1 + 42) = v4;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithTake for ToolbarButtonStyle(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  char v5 = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 72);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t partial apply for closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)(uint64_t a1)
{
  return closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t _s7SwiftUI4ViewPAAE26readNavigationDestinations8position8isActive6readerQrAA0e5StackC8PositionVSg_Sbqd__mtAA0E17DestinationReaderRd__lFySayAA0eM12ResolverBaseCGzcfU_TA_0(uint64_t result)
{
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v2 = (void *)result;
    uint64_t result = swift_bridgeObjectRelease();
    void *v2 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t type metadata completion function for HostingScrollViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t DeferredFetchRequest.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>();
    lazy protocol witness table accessor for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility.Key, (uint64_t)&protocol witness table for CompositeNavigationSplitViewVisibility.Key, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility.Key, (uint64_t)&protocol witness table for CompositeNavigationSplitViewVisibility.Key, MEMORY[0x1E4F40F90]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>);
    }
  }
}

uint64_t View.onOpenURL(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v23[0] = a5;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v13);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  uint64_t v17 = (void *)(v16 + ((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v17 = a1;
  v17[1] = a2;
  type metadata accessor for PassthroughSubject<Any, Never>();
  uint64_t v19 = v18;
  uint64_t v20 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
  swift_retain();
  v23[1] = v19;
  v23[2] = a3;
  v23[3] = v20;
  v23[4] = a4;
  type metadata accessor for SubscriptionView();
  uint64_t result = default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)();
  *(void *)a6 = result;
  *(unsigned char *)(a6 + 8) = v22 & 1;
  *(void *)(a6 + 16) = v23[0];
  *(void *)(a6 + 24) = v16;
  return result;
}

uint64_t View.onContinueUserActivity(_:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  double v14 = MEMORY[0x1F4188790](a1);
  unint64_t v15 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v7, v16, v14);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v15, a5);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = v28;
  v20[1] = a2;
  uint64_t v21 = (void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v30;
  *uint64_t v21 = v29;
  v21[1] = v22;
  type metadata accessor for PassthroughSubject<Any, Never>();
  uint64_t v24 = v23;
  uint64_t v25 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v31 = v24;
  uint64_t v32 = a5;
  uint64_t v33 = v25;
  uint64_t v34 = a6;
  type metadata accessor for SubscriptionView();
  uint64_t result = default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)();
  *(void *)a7 = result;
  *(unsigned char *)(a7 + 8) = v27 & 1;
  *(void *)(a7 + 16) = partial apply for closure #1 in View.onContinueUserActivity(_:perform:);
  *(void *)(a7 + 24) = v19;
  return result;
}

uint64_t default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)()
{
  type metadata accessor for SceneBridge();
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type SceneBridge and conformance SceneBridge, v0, (void (*)(uint64_t))type metadata accessor for SceneBridge);
  return static ObservableObject.environmentStore.getter();
}

ValueMetadata *type metadata accessor for DragPreviewMode()
{
  return &type metadata for DragPreviewMode;
}

uint64_t one-time initialization function for sharedColor()
{
  lazy protocol witness table accessor for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle();
  uint64_t result = Color.init<A>(provider:)();
  static PlainDividerShapeStyle.sharedColor = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle);
  }
  return result;
}

uint64_t implicit closure #1 in static SearchToolbarItem._makeToolbar(content:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform;
  if (!lazy protocol witness table cache variable for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform);
  }
  return result;
}

void HostingScrollView.bounds.didset()
{
  HostingScrollView.PlatformGroupContainer.pruneFillerItems()();
  id v1 = objc_msgSend(v0, sel_isTracking);
  if (v1 && *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget]) {
    *(unsigned char *)(*(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper]
  }
             + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  int v4 = *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v5 = __OFADD__(v4, 1);
  int v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v6;
  MEMORY[0x1F4188790](v1);
  static Update.ensure<A>(_:)();
  int v7 = *(_DWORD *)(v2 + v3);
  BOOL v5 = __OFSUB__(v7, 1);
  int v8 = v7 - 1;
  if (v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  *(_DWORD *)(v2 + v3) = v8;
  if (!v8 && *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
}

void HostingScrollView.PlatformGroupContainer.pruneFillerItems()()
{
  id v1 = v0;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v2 - 8);
  int v4 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  int v7 = (char *)&v83 - v6;
  uint64_t v8 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems;
  if (!*(void *)(*(void *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems]
                  + 16))
    return;
  double v9 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  Class v95 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v16 = v0;
  uint64_t v17 = swift_bridgeObjectRetain();
  unint64_t v18 = (void *)specialized _ArrayProtocol.filter(_:)(v17, v16, &v95, v9, v11, v13, v15);

  uint64_t v19 = v95;
  uint64_t v20 = (void *)v95[2];
  if (v20)
  {
    uint64_t v90 = v4;
    uint64_t v91 = v7;
    uint64_t v21 = v18;
    uint64_t v92 = v8;
    uint64_t v22 = v95 + 4;
    swift_bridgeObjectRetain();
    type metadata accessor for UIKitFocusableFillerItem();
    unint64_t v18 = 0;
    while (1)
    {
      swift_unknownObjectRetain();
      uint64_t v8 = UIFocusItem.isFocused.getter();
      swift_unknownObjectRelease();
      if (v8) {
        break;
      }
      unint64_t v18 = (void *)((char *)v18 + 1);
      v22 += 2;
      if (v20 == v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = v92;
        unint64_t v18 = v21;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    if ((unint64_t)v18 >= v19[2])
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = (void *)*v22;
      swift_unknownObjectRetain();
      specialized Array.remove(at:)((unint64_t)v18);
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      unint64_t v18 = v21;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = v92;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_9:
        uint64_t v24 = (uint64_t)v91;
        unint64_t v26 = v18[2];
        unint64_t v25 = v18[3];
        if (v26 >= v25 >> 1) {
          unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v18);
        }
        void v18[2] = v26 + 1;
        char v27 = &v18[2 * v26];
        uint64_t v27[4] = v19;
        v27[5] = &protocol witness table for UIKitFocusableFillerItem;
        uint64_t v28 = (unsigned __int8 *)swift_unknownObjectRetain();
        uint64_t v29 = HostingScrollView.PlatformGroupContainer.querySubstitute(for:)(v28);
        if (v29)
        {
          *(void *)&v16[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem] = v29;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          static Log.focus.getter();
          uint64_t v30 = type metadata accessor for Logger();
          os_log_t v31 = *(os_log_t *)(v30 - 8);
          Class isa = (unsigned int (*)(uint64_t, uint64_t))v31[6].isa;
          uint64_t v90 = (char *)v30;
          if (isa(v24, 1) == 1)
          {
            outlined destroy of Logger?(v24);
          }
          else
          {
            uint64_t v36 = v16;
            swift_unknownObjectRetain_n();
            swift_unknownObjectRetain_n();
            char v89 = v36;
            uint64_t v37 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.default.getter();
            LODWORD(v88) = v38;
            if (os_log_type_enabled(v37, v38))
            {
              uint64_t v39 = swift_slowAlloc();
              NSArray v86 = v18;
              os_log_t v87 = v31;
              uint64_t v40 = v39;
              uint64_t v84 = swift_slowAlloc();
              v94[0] = v84;
              *(_DWORD *)uint64_t v40 = 136315650;
              uint64_t v41 = (void *)swift_unknownObjectRetain();
              uint64_t v42 = specialized UIKitFocusItemDescription.init(_:)(v41);
              os_log_t v85 = v37;
              uint64_t v43 = v42;
              unint64_t v45 = v44;
              swift_unknownObjectRelease();
              uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v40 + 12) = 2080;
              swift_getObjectType();
              uint64_t v46 = swift_unknownObjectRetain();
              uint64_t v47 = specialized UIKitFocusItemDescription.init(_:)(v46);
              unint64_t v49 = v48;
              swift_unknownObjectRelease();
              uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v40 + 22) = 2080;
              uint64_t v50 = v89;
              uint64_t v51 = specialized UIKitFocusItemDescription.init(_:)();
              unint64_t v53 = v52;

              uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              uint64_t v24 = (uint64_t)v91;
              uint64_t v8 = v92;
              swift_bridgeObjectRelease();
              uint64_t v37 = v85;
              _os_log_impl(&dword_1872C6000, v85, (os_log_type_t)v88, "substituting: %s with: %s in host: %s", (uint8_t *)v40, 0x20u);
              uint64_t v54 = v84;
              swift_arrayDestroy();
              MEMORY[0x18C119C60](v54, -1, -1);
              uint64_t v55 = v40;
              unint64_t v18 = v86;
              os_log_t v31 = v87;
              MEMORY[0x18C119C60](v55, -1, -1);
            }
            else
            {
              uint64_t v76 = v89;

              swift_unknownObjectRelease_n();
              swift_unknownObjectRelease_n();
            }

            ((void (*)(uint64_t, char *))v31[1].isa)(v24, v90);
          }
          objc_msgSend(v16, sel_setNeedsFocusUpdate);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease_n();
        }
        else
        {
          uint64_t v33 = (uint64_t)v90;
          static Log.focus.getter();
          uint64_t v34 = type metadata accessor for Logger();
          uint64_t v35 = *(void *)(v34 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
          {
            swift_unknownObjectRelease_n();
            outlined destroy of Logger?(v33);
          }
          else
          {
            uint64_t v56 = v16;
            swift_unknownObjectRetain_n();
            uint64_t v57 = v56;
            uint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.default.getter();
            int v60 = v59;
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v61 = swift_slowAlloc();
              LODWORD(v89) = v60;
              uint64_t v62 = v61;
              uint64_t v88 = swift_slowAlloc();
              v94[0] = v88;
              *(_DWORD *)uint64_t v62 = 136315394;
              NSArray v86 = (void *)(v62 + 4);
              uint64_t v63 = (void *)swift_unknownObjectRetain();
              uint64_t v64 = specialized UIKitFocusItemDescription.init(_:)(v63);
              os_log_t v87 = v58;
              uint64_t v65 = v64;
              uint64_t v91 = v1;
              long long v66 = v18;
              unint64_t v68 = v67;
              swift_unknownObjectRelease();
              uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v68, v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v62 + 12) = 2080;
              NSArray v86 = (void *)(v62 + 14);
              long long v69 = v57;
              uint64_t v70 = specialized UIKitFocusItemDescription.init(_:)();
              unint64_t v72 = v71;

              uint64_t v73 = v70;
              unint64_t v18 = v66;
              id v1 = v91;
              uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v72, v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              os_log_t v74 = v87;
              _os_log_impl(&dword_1872C6000, v87, (os_log_type_t)v89, "rouge filler: %s in host: %s", (uint8_t *)v62, 0x16u);
              uint64_t v75 = v88;
              swift_arrayDestroy();
              MEMORY[0x18C119C60](v75, -1, -1);
              uint64_t v33 = (uint64_t)v90;
              MEMORY[0x18C119C60](v62, -1, -1);
            }
            else
            {
            }
            swift_unknownObjectRelease_n();
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            uint64_t v8 = v92;
          }
        }
        goto LABEL_25;
      }
    }
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    goto LABEL_9;
  }
LABEL_25:
  uint64_t v77 = v95;
  uint64_t v78 = v95[2];
  if (v78)
  {
    uint64_t v91 = v1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    swift_bridgeObjectRetain();
    uint64_t v79 = 4;
    do
    {
      uint64_t v80 = v77[v79];
      swift_unknownObjectRetain();
      uint64_t v81 = (void *)static UIFocusSystem.focusSystem(for:)();
      if (v81)
      {
        uint64_t v82 = v81;
        objc_msgSend(v81, sel__focusEnvironmentWillDisappear_, v80);
      }
      swift_unknownObjectRelease();
      v79 += 2;
      --v78;
    }
    while (v78);
    swift_bridgeObjectRelease();
    id v1 = v91;
  }
  *(void *)&v1[v8] = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void type metadata completion function for TextSelection.Indices()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t partial apply for closure #1 in PresentationHostingController.setWantsFullScreen(placement:sheetController:)()
{
  return closure #1 in PresentationHostingController.setWantsFullScreen(placement:sheetController:)();
}

uint64_t closure #1 in PresentationHostingController.setWantsFullScreen(placement:sheetController:)()
{
  return swift_release();
}

__n128 protocol witness for ViewModifier.body(content:) in conformance ToolbarButtonLabelModifier@<Q0>(double (**a1)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  outlined init with copy of ToolbarButtonLabelModifier(v1, (uint64_t)v7);
  uint64_t v3 = swift_allocObject();
  long long v4 = v7[5];
  *(_OWORD *)(v3 + 80) = v7[4];
  *(_OWORD *)(v3 + 96) = v4;
  *(unsigned char *)(v3 + 112) = v8;
  long long v5 = v7[1];
  *(_OWORD *)(v3 + 16) = v7[0];
  *(_OWORD *)(v3 + 32) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(v3 + 48) = v7[2];
  *(__n128 *)(v3 + 64) = result;
  *a1 = partial apply for closure #1 in ToolbarButtonLabelModifier.body(content:);
  a1[1] = (double (*)@<D0>(uint64_t@<X8>))v3;
  return result;
}

uint64_t type metadata completion function for HoverResponder()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t associated type witness table accessor for View.Body : View in TabView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance DisableCollectionViewGroupedListsFeature()
{
  return static DisableCollectionViewGroupedListsFeature.cachedValue;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollTargetVisibilityChangeModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ObservableObjectFallbackDelegateBox()
{
  return swift_initClassMetadata2();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _KeyboardShortcutPickerContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in NavigationStackStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityAdaptiveStack<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationStackStyledCore<A>.NavigationStackRepresentableRoot()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in LabelGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in NavigationStackCore<A>.NavigationStackRepresentableRoot()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SidebarListStyle.BodyContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PagingScrollView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in StyleApplicator<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in LazyPageTabView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SheetContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in PickerOption<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in AsyncImage<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in AsyncImage<A>.Inner()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.toolbar<A>(content:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for ToolbarModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  double v12 = (uint64_t *)((char *)&v16 - v11);
  double v14 = (uint64_t *)((char *)&v16 + *(int *)(v13 + 48) - v11);
  *double v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  void *v12 = 0;
  v12[1] = 0;
  a1(v10);
  MEMORY[0x18C113660](v12, a3, v8, a5);
  return (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t ContentShapeResponderFilter.updateValue()()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for _ContentShapeModifier();
  uint64_t v15 = *(void *)(v0 - 8);
  uint64_t v1 = v15;
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v14 - v2;
  ContentShapeResponderFilter.responder.getter();
  uint64_t Value = AGGraphGetValue();
  char v6 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, Value, v0);
  v14[1] = v6 & 1;
  uint64_t v7 = (long long *)AGGraphGetValue();
  v14[0] = v8 & 1;
  long long v9 = v7[1];
  long long v17 = *v7;
  long long v18 = v9;
  long long v16 = *(_OWORD *)AGGraphGetValue();
  uint64_t v10 = AGGraphGetValue();
  uint64_t v19 = *(void *)v10;
  long long v20 = *(_OWORD *)(v10 + 8);
  long long v21 = *(_OWORD *)(v10 + 24);
  swift_retain();
  ContentShapeResponderFilter.responder.getter();
  swift_beginAccess();
  swift_getWitnessTable();
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v0);
  ContentShapeResponderFilter.responder.getter();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v11)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_188351940;
    *(void *)(v13 + 32) = ContentShapeResponderFilter.responder.getter();
    uint64_t v19 = v13;
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ContentShapeResponderFilter.responder.getter()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 120);
  }
  else
  {
    uint64_t v1 = closure #1 in ContentShapeResponderFilter.responder.getter(v0);
    *(void *)(v0 + 120) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

void type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    }
  }
}

uint64_t closure #1 in ContentShapeResponderFilter.responder.getter(uint64_t a1)
{
  id v1 = *(id *)(a1 + 112);
  AGGraphClearUpdate();
  id v2 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in ContentShapeResponderFilter.responder.getter(&v4);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v4;
}

uint64_t closure #1 in closure #1 in ContentShapeResponderFilter.responder.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ContentShapeResponder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = ContentShapeResponder.init(inputs:)();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ContentShapeResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ContentShapeResponder.init(inputs:)()
{
  return DefaultLayoutViewResponder.init(inputs:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OnModifierKeysChangedModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>)
  {
    type metadata accessor for _ViewModifier_Content<OnModifierKeysChangedModifier>();
    type metadata accessor for _TaskModifier(255);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<OnModifierKeysChangedModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnModifierKeysChangedModifier>)
  {
    lazy protocol witness table accessor for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnModifierKeysChangedModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier;
  if (!lazy protocol witness table cache variable for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier);
  }
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance TransformBasedMagnifyGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 4);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  char v12 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v10, (uint64_t)v9);
  uint64_t v5 = MEMORY[0x1E4F40910];
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0((uint64_t)v9, (uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, MEMORY[0x1E4F40910], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphValue<MagnifyGesture>);
  v13[0] = 1;
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, v5, (uint64_t (*)(void))type metadata accessor for _GraphValue<MagnifyGesture>);
  outlined destroy of CoordinateSpace((uint64_t)v10);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v1[1];
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 32) = v4;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v13, a1, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
  *(void *)(a1 + 56) = partial apply for closure #1 in TransformBasedMagnifyGesture.body.getter;
  *(void *)(a1 + 64) = v6;
  return _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
}

uint64_t outlined destroy of DragGesture.Value(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI11DragGestureV5ValueVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t *partial apply for closure #1 in _NavigationSplitReader.CustomParameters.value.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in _NavigationSplitReader.CustomParameters.value.getter(a1);
}

uint64_t *closure #1 in _NavigationSplitReader.CustomParameters.value.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for UISplitViewControllerProxyStorage();
  unint64_t result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *result;
    swift_getKeyPath();
    lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost((unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage, (void (*)(uint64_t))type metadata accessor for UISplitViewControllerProxyStorage);
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    unint64_t result = (uint64_t *)swift_release();
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t type metadata completion function for SearchAttributedString()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?);
  }
  return result;
}

uint64_t SidebarListStyle.BodyContent.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)v15 - v8;
  if (*v1 == 1) {
    SidebarListStyle.BodyContent.placement.getter();
  }
  uint64_t v10 = &v1[*(int *)(a1 + 40)];
  uint64_t v11 = *(void *)(a1 + 24);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v17 = 2;
  long long v18 = 0u;
  long long v19 = 0u;
  char v20 = 0;
  v21[0] = &v17;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  v21[1] = v6;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?();
  v16[0] = v12;
  v16[1] = v3;
  v15[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?();
  v15[1] = v11;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v21, 2uLL, (uint64_t)v16);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v9, v3);
  return ((uint64_t (*)(char *, uint64_t))v13)(v6, v3);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?);
    }
  }
}

uint64_t static ViewBuilder.buildBlock<each A>(_:)(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        _OWORD *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        long long v16 = &v8[8 * v9];
        uint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)long long v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x1F4188790](TupleTypeMetadata);
  char v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    long long v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>();
    type metadata accessor for StyleContextWriter<SidebarListStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarListStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext, (uint64_t)&type metadata for SidebarListStyleContext, MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>();
    type metadata accessor for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListRowInsetsTraitKey>, (uint64_t)&type metadata for ListRowInsetsTraitKey, (uint64_t)&protocol witness table for ListRowInsetsTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>);
    }
  }
}

void type metadata accessor for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>)
  {
    type metadata accessor for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>, (uint64_t)&type metadata for IsSearchImplementedPreferenceKey, (uint64_t)&protocol witness table for IsSearchImplementedPreferenceKey, MEMORY[0x1E4F40F90]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>);
    lazy protocol witness table accessor for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ListRowInsetsTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListRowInsetsTraitKey>, (uint64_t)&type metadata for ListRowInsetsTraitKey, (uint64_t)&protocol witness table for ListRowInsetsTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t SidebarListStyle.Body.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = a1;
  unint64_t v8 = HIDWORD(a1);
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = &v18[-v11];
  int v23 = &type metadata for SidebarListStyle;
  uint64_t v24 = a2;
  uint64_t v25 = &protocol witness table for SidebarListStyle;
  uint64_t v26 = a3;
  uint64_t v13 = type metadata accessor for _ListValue();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = &v18[-v14];
  SidebarListStyle.Body.base.getter((uint64_t)&v18[-v14]);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v12, v15, v9);
  if (*(unsigned char *)AGGraphGetValue()) {
    uint64_t v16 = 11;
  }
  else {
    uint64_t v16 = 3;
  }
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v21 = v6;
  int v22 = v8;
  type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>();
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>> and conformance SidebarListStyle.BodyContent<A>, (void (*)(uint64_t))type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>);
  swift_getWitnessTable();
  return SidebarListBody.init(selection:options:content:)((uint64_t)v12, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in SidebarListStyle.Body.value.getter, a4);
}

uint64_t static SidebarListStyle._makeViewList<A>(value:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

void type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>()
{
  if (!lazy cache variable for type metadata for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>, (void (*)(void))lazy protocol witness table accessor for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>);
    unint64_t v0 = type metadata accessor for SidebarListStyle.BodyContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>;
  if (!lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>)
  {
    type metadata accessor for StyleContextWriter<SidebarListStyleContext>(255, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SourceInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
  }
  return result;
}

uint64_t static SearchFieldConfigurationReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  type metadata accessor for SearchFieldConfigurationReader();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a4 - 8) + 64)) {
    closure #1 in static SearchFieldConfigurationReader._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v10 = PreferencesOutputs.subscript.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v10 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized _GraphInputs.isSourceNil<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    _GraphValue.value.getter();
    type metadata accessor for Optional();
    type metadata accessor for SearchFieldConfigurationReader.MakeContent();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    swift_getWitnessTable();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized _GraphInputs.isSourceNil<A>(_:)(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void))
{
  type metadata accessor for StyleContextWriter<SidebarListStyleContext>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SourceInput);
  a4();
  PropertyList.subscript.getter();
  if (!v8) {
    return *MEMORY[0x1E4F4E7A0];
  }
  uint64_t v5 = *(unsigned int *)(v8 + 40);
  char v6 = *(unsigned char *)(v8 + 44);
  swift_release();
  if (v6)
  {
    type metadata accessor for External<Bool>();
    lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<Bool>);
    return Attribute.init<A>(body:value:flags:update:)();
  }
  return v5;
}

void type metadata accessor for StyleContextWriter<SidebarListStyleContext>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t closure #1 in static SearchFieldConfigurationReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t v8 = a1 + *(int *)(v7 + 60);
  _OWORD v12[2] = v7;
  uint64_t v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t type metadata accessor for SearchFieldConfigurationReader.MakeContent()
{
  return swift_getGenericMetadata();
}

uint64_t specialized _GraphInputs.isSourceNil<A>(_:)()
{
  return specialized _GraphInputs.isSourceNil<A>(_:)(&lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (void (*)(void))lazy protocol witness table accessor for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
}

uint64_t type metadata accessor for SidebarListStyle.BodyContent()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<SidebarListStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarListStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext, (uint64_t)&type metadata for SidebarListStyleContext, MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<SidebarListStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarListStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext, (uint64_t)&type metadata for SidebarListStyleContext, MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>, (uint64_t)&type metadata for IsSearchImplementedPreferenceKey, (uint64_t)&protocol witness table for IsSearchImplementedPreferenceKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SidebarListStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for SidebarListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField;
  if (!lazy protocol witness table cache variable for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField);
  }
  return result;
}

uint64_t SidebarListBody.init(selection:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for SidebarListBody();
  *(void *)(a4 + *(int *)(v9 + 52)) = a2;
  return a3(v9, v10, v11, v12);
}

uint64_t type metadata accessor for SidebarListBody()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in SidebarListStyle.Body.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SidebarListStyle.Body.value.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t closure #1 in SidebarListStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = closure #1 in closure #1 in SidebarListStyle.Body.value.getter(a1, a2, a3);
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = KeyPath;
  *(unsigned char *)(a4 + 16) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>;
  if (!lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>)
  {
    type metadata accessor for StyleContextWriter<SidebarListStyleContext>(255, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SourceInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
  }
  return result;
}

long long *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC450], 0xD00000000000002DLL, (uint64_t (*)(long long *))0x8000000188330CC0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC358], 0xD00000000000002CLL, (uint64_t (*)(long long *))0x8000000188330CF0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC098], 0xD00000000000002BLL, (uint64_t (*)(long long *))0x8000000188330DE0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC0F8], 0xD00000000000002CLL, (uint64_t (*)(long long *))0x8000000188330DB0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeFittingLayoutComputer(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer();

  return MEMORY[0x1F40FE388](a1, v2);
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>)
  {
    type metadata accessor for ProgressViewStyleModifier<DefaultProgressViewStyle>(255, &lazy cache variable for type metadata for ProgressViewStyleModifier<DefaultProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle, (uint64_t)&type metadata for DefaultProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProgressViewStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ToolbarRemovingModifier.TitleRemover(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover();

  return MEMORY[0x1F40FE388](a1, v2);
}

unint64_t lazy protocol witness table accessor for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeFittingMux(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SizeFittingMux and conformance SizeFittingMux();

  return MEMORY[0x1F40FE388](a1, v2);
}

char *specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return (char *)v3;
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        MEMORY[0x18C117680](i, a1);
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell);
        swift_dynamicCast();
        uint64_t v3 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          uint64_t v3 = v12;
        }
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      unint64_t v8 = a1 + 32;
      type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell);
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v3 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v10 = *(void *)(v3 + 16);
        unint64_t v9 = *(void *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
          uint64_t v3 = v12;
        }
        *(void *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  id *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return (char *)v3;
  }
  uint64_t v13 = MEMORY[0x1E4FBC860];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        MEMORY[0x18C117680](i, a1);
        type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      unint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
      do
      {
        unint64_t v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        uint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v11 + 32));
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t RemoteSheetContainerVCWriter.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v2 = type metadata accessor for ViewLeafView();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v24 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v24 = v1;
  ViewResponderFilter.view.getter((uint64_t)v5);
  ViewLeafView.representedViewProvider.getter(v2, (uint64_t)v15);
  uint64_t v16 = v2;
  uint64_t v17 = v7;
  uint64_t v18 = v25;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v16);
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = -1;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v19(v12, v15, AssociatedTypeWitness);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteSheetContaining);
  if (swift_dynamicCast())
  {
    swift_unknownObjectWeakInit();
    uint64_t v20 = swift_unknownObjectWeakAssign();
    outlined init with take of RemoteSheetContainerVCKey.Storage?(v20, (uint64_t)&v27, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteSheetContaining, (uint64_t)&protocolRef__UIRemoteSheetContaining, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    swift_unknownObjectRelease();
    outlined destroy of PlatformViewLayoutInvalidator?(v18, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v28 = 0;
LABEL_5:
    outlined init with take of RemoteSheetContainerVCKey.Storage?((uint64_t)&v27, v18, (uint64_t)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [FocusableBounds]);
    goto LABEL_6;
  }
  v19(v9, v15, AssociatedTypeWitness);
  type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
  if (swift_dynamicCast())
  {
    swift_unknownObjectWeakInit();
    uint64_t v21 = swift_unknownObjectWeakAssign();
    outlined init with take of RemoteSheetContainerVCKey.Storage?(v21, (uint64_t)&v27, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining, (uint64_t)&protocolRef__UIRemoteViewControllerContaining, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    swift_unknownObjectRelease();
    outlined destroy of PlatformViewLayoutInvalidator?(v18, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v28 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of RemoteSheetContainerVCKey.Storage?(v18, (uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v22 = v28;
  outlined destroy of PlatformViewLayoutInvalidator?((uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v22 != 255 && swift_weakLoadStrong())
  {
    uint64_t v27 = AGCreateWeakAttribute();
    char v26 = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, AssociatedTypeWitness);
}

uint64_t type metadata accessor for _UISceneBSActionHandler(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t assignWithTake for HeaderFooterConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance DisableCollectionViewGroupedListsFeature(char a1)
{
  uint64_t result = swift_beginAccess();
  static DisableCollectionViewGroupedListsFeature.cacheduint64_t Value = a1;
  return result;
}

uint64_t one-time initialization function for isEnabledInProcessEnv()
{
  uint64_t result = static ProcessEnvironment.BOOL(forKey:defaultValue:)();
  static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv = result & 1;
  return result;
}

uint64_t initializeWithCopy for FocusStateBindingResponderFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t outlined init with copy of TableRowID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata completion function for UIKitSystemButtonConfigurationModifier()
{
  uint64_t result = type metadata accessor for UIButton.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AnyNavigationLinkPresentedValueStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CoreSheetPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FFCA8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UIKitButtonStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchFieldStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ToolbarRemovingModifier.SidebarToggleRemover(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover();

  return MEMORY[0x1F40FE388](a1, v2);
}

unint64_t lazy protocol witness table accessor for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TokenFieldStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextFieldStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata completion function for UIKitSearchBarAdaptor()
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ShadowListDataSource()
{
  uint64_t result = type metadata accessor for ShadowListUpdateRecorder();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AnyListSelection.Storage()
{
  uint64_t result = type metadata accessor for SelectionManagerBox();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

void storeEnumTagSinglePayload for BorderlessButtonLabelShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 3) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 > 0xFE)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 3] & ~v9;
            uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
            v19(v18);
          }
          else
          {
            a1[2] = a2 + 1;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t closure #1 in View.inspectorAnchor<A>(matching:anchor:)(uint64_t *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  AnyHashable.init<A>(_:)();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *a1 = v7;
  swift_bridgeObjectRelease();
  return outlined destroy of AnyHashable((uint64_t)v8);
}

uint64_t instantiation function for generic protocol witness table for ButtonBorderShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for static PlatformNamedImageRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemListNamedImageRepresentable()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PlatformImageRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemListImageRepresentable()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for NavigationStackStyledCore()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  if (*(void *)(a2 + 32) == 1)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v6;
    swift_retain();
    swift_retain();
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t type metadata completion function for ResolvedProgressView()
{
  uint64_t result = type metadata accessor for ProgressViewValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for DefaultPreviewDropPayloadResponder()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PlatformUnaryViewResponder()
{
  uint64_t result = type metadata singleton initialization cache for PlatformUnaryViewResponder;
  if (!type metadata singleton initialization cache for PlatformUnaryViewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id closure #1 in DisplayLink.setFrameInterval(_:reasons:)(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result == (id)MEMORY[0x1E4FBC4C0])
  {
    uint64_t v5 = 0;
    int64_t v6 = 0;
    uint64_t v7 = a3 + 56;
    uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
    uint64_t v9 = -1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    unint64_t v10 = v9 & *(void *)(a3 + 56);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    if (!v10) {
      goto LABEL_8;
    }
    while (1)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      uint64_t v14 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        break;
      }
      while (1)
      {
        *(_DWORD *)(a2 + 4 * v5) = *(_DWORD *)(*(void *)(a3 + 48) + 4 * v13);
        uint64_t v5 = v14;
        if (v10) {
          break;
        }
LABEL_8:
        int64_t v15 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_32;
        }
        if (v15 >= v11)
        {
LABEL_28:
          uint64_t result = *(id *)(a4 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
          if (result) {
            return objc_msgSend(result, sel_setHighFrameRateReasons_count_, a2, a5);
          }
          return result;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        ++v6;
        if (!v16)
        {
          int64_t v6 = v15 + 1;
          if (v15 + 1 >= v11) {
            goto LABEL_28;
          }
          unint64_t v16 = *(void *)(v7 + 8 * v6);
          if (!v16)
          {
            int64_t v6 = v15 + 2;
            if (v15 + 2 >= v11) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v7 + 8 * v6);
            if (!v16)
            {
              int64_t v6 = v15 + 3;
              if (v15 + 3 >= v11) {
                goto LABEL_28;
              }
              unint64_t v16 = *(void *)(v7 + 8 * v6);
              if (!v16)
              {
                int64_t v6 = v15 + 4;
                if (v15 + 4 >= v11) {
                  goto LABEL_28;
                }
                unint64_t v16 = *(void *)(v7 + 8 * v6);
                if (!v16)
                {
                  int64_t v17 = v15 + 5;
                  if (v17 >= v11) {
                    goto LABEL_28;
                  }
                  unint64_t v16 = *(void *)(v7 + 8 * v17);
                  if (!v16)
                  {
                    while (1)
                    {
                      int64_t v6 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        goto LABEL_34;
                      }
                      if (v6 >= v11) {
                        goto LABEL_28;
                      }
                      unint64_t v16 = *(void *)(v7 + 8 * v6);
                      ++v17;
                      if (v16) {
                        goto LABEL_25;
                      }
                    }
                  }
                  int64_t v6 = v17;
                }
              }
            }
          }
        }
LABEL_25:
        unint64_t v10 = (v16 - 1) & v16;
        unint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
        uint64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_31;
        }
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:previewForLifting:session:)(void *a1)
{
  if (objc_msgSend(a1, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  uint64_t v2 = MEMORY[0x1E4FBC840] + 8;
  _sypSgWObTm_0((uint64_t)v22, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  if (!v25)
  {
LABEL_13:
    _sypSgWOhTm_6((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Any?, v2);
    goto LABEL_14;
  }
  type metadata accessor for DragSourceContext();
  if (swift_dynamicCast())
  {
    uint64_t v2 = v20[0];
    uint64_t v3 = *(void *)(v20[0] + 16);
    uint64_t v4 = MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      uint64_t v6 = *(unsigned int *)(v3 + 312);
      id v7 = objc_allocWithZone(MEMORY[0x1E4FB1720]);
      swift_retain();
      id v8 = objc_msgSend(v7, sel_init);
      uint64_t v9 = self;
      id v10 = v8;
      id v11 = objc_msgSend(v9, sel_clearColor);
      objc_msgSend(v10, sel_setBackgroundColor_, v11);

      objc_msgSend(v10, sel__setPreviewMode_, *(void *)(v3 + 304));
      UIViewSnapshotResponder.contentPath.getter((uint64_t)v20);
      uint64_t v12 = v20[0];
      uint64_t v13 = v20[1];
      uint64_t v14 = v20[2];
      uint64_t v15 = v20[3];
      unsigned __int8 v16 = v21;
      _sypSgWObTm_0((uint64_t)v20, (uint64_t)v22, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
      if (v23 != 255)
      {
        v24[0] = v12;
        v24[1] = v13;
        uint64_t v24[2] = v14;
        uint64_t v25 = v15;
        unsigned __int8 v26 = v16;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
        outlined copy of Path.Storage(v12, v13, v14, v15, v16);
        id v17 = UIBezierPath.init(_:)((uint64_t)v24);
        objc_msgSend(v10, sel_setVisiblePath_, v17);

        outlined release of Path?((uint64_t)v20);
      }
      id v18 = specialized UIViewSnapshotResponder.portalTargetedPreview<A>(kind:id:host:parameters:options:)(2, v6, v5, v10, 9);
      swift_release();

      if (v18)
      {
        swift_release();
        return (uint64_t)v18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id specialized UIViewSnapshotResponder.portalTargetedPreview<A>(kind:id:host:parameters:options:)(uint64_t a1, uint64_t a2, id a3, void *a4, char a5)
{
  uint64_t v6 = v5;
  id v12 = objc_msgSend(a3, sel_window);
  if (v12)
  {

    uint64_t v13 = (void *)DefaultLayoutViewResponder.viewSubgraph.getter();
    int IsValid = AGSubgraphIsValid();

    if (IsValid)
    {
      if (static SemanticFeature.isEnabled.getter())
      {
        static Update.dispatchImmediately<A>(_:)();
        if (v27 == 1)
        {
          uint64_t v15 = UIView.findPortal(kind:id:excludingGroups:)(a1, a2, (a5 & 4) != 0);
          if (v15)
          {
            id v17 = v15;
            char v18 = v16;
            id v19 = v15;
            specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a3, v17, v18, a5, 0);
            unsigned __int8 v21 = v20;

            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITargetedDragPreview);
            id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
            id v23 = v19;
            id v24 = objc_msgSend(v22, sel_initWithView_parameters_target_, v23, a4, v21);

LABEL_11:
            return v24;
          }
        }
      }
      if ((a5 & 8) != 0)
      {
        specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a3, 0, 0, a5, 0);
        unsigned __int8 v21 = v26;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITargetedDragPreview);
        AGGraphClearUpdate();
        closure #1 in UIViewSnapshotResponder.snapshotView(host:)(v6, a3, &v28);
        AGGraphSetUpdate();
        id v23 = v28;
        id v24 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithView_parameters_target_, v28, a4, v21);
        goto LABEL_11;
      }
    }
  }
  return 0;
}

{
  uint64_t v5;
  uint64_t v6;
  id v12;
  void *v13;
  int IsValid;
  void *v15;
  char v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v26;
  char v27;
  void *v28;

  uint64_t v6 = v5;
  id v12 = objc_msgSend(a3, sel_window);
  if (v12)
  {

    uint64_t v13 = (void *)DefaultLayoutViewResponder.viewSubgraph.getter();
    int IsValid = AGSubgraphIsValid();

    if (IsValid)
    {
      if (static SemanticFeature.isEnabled.getter())
      {
        static Update.dispatchImmediately<A>(_:)();
        if (v27 == 1)
        {
          uint64_t v15 = UIView.findPortal(kind:id:excludingGroups:)(a1, a2, (a5 & 4) != 0);
          if (v15)
          {
            id v17 = v15;
            char v18 = v16;
            id v19 = v15;
            specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a3, v17, v18, a5, 0);
            unsigned __int8 v21 = v20;

            id v22 = objc_allocWithZone(MEMORY[0x1E4FB1D48]);
            id v23 = v19;
            id v24 = objc_msgSend(v22, sel_initWithView_parameters_target_, v23, a4, v21);

LABEL_11:
            return v24;
          }
        }
      }
      if ((a5 & 8) != 0)
      {
        specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a3, 0, 0, a5, 0);
        unsigned __int8 v21 = v26;
        AGGraphClearUpdate();
        closure #1 in UIViewSnapshotResponder.snapshotView(host:)(v6, a3, &v28);
        AGGraphSetUpdate();
        id v23 = v28;
        id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D48]), sel_initWithView_parameters_target_, v28, a4, v21);
        goto LABEL_11;
      }
    }
  }
  return 0;
}

uint64_t LazyView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = (void (*)(void))MEMORY[0x1F4188790](v5);
  id v10 = (char *)&v13 - v9;
  v8();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  id v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a3);
}

uint64_t type metadata completion function for TextInputSuggestionsModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ShadowSectionCollection()
{
  uint64_t result = type metadata accessor for ShadowListUpdateRecorder();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ParameterizedLazyView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance ToolbarButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  id v10 = (_WORD *)((char *)v18 - v9);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(a1, (uint64_t)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_1((uint64_t)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  _WORD *v10 = 256;
  uint64_t v13 = (void *)((char *)v10 + *(int *)(v8 + 44));
  void *v13 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  v13[1] = v12;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of _UnaryViewAdaptor<_VariadicView_Children>((uint64_t)v10, a2, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
  uint64_t v15 = a2 + *(int *)(v14 + 36);
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 0;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10);
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>();
  return closure #2 in ToolbarButtonStyle.iosBody(configuration:)(a1, v18[1], a2 + *(int *)(v16 + 52));
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>);
    }
  }
}

uint64_t outlined init with copy of _UnaryViewAdaptor<_VariadicView_Children>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t))
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t ResolvedSegmentedPickerStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v24 = type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v33 = a2;
  uint64_t v34 = v24;
  uint64_t v35 = a3;
  uint64_t v36 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  uint64_t v7 = type metadata accessor for _SegmentedControl();
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  id v22 = (char *)&v22 - v11;
  uint64_t v12 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  char v18 = (char *)&v22 - v17;
  LODWORD(v33) = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  int v32 = a1;
  type metadata accessor for ResolvedSegmentedPickerStyle.Body();
  swift_getWitnessTable();
  Rule.withObservation<A>(do:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = v18;
  _SegmentedControl.init(configuration:content:)((uint64_t)v15, (void (*)(uint64_t))partial apply for closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter, (uint64_t)v26, v24, (uint64_t)v9);
  id v19 = v22;
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v9, v7);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  v20(v19, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t _SegmentedControl.init(configuration:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v20[1] = a3;
  unsigned __int8 v21 = a2;
  uint64_t v22 = a5;
  v20[0] = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v20 - v8;
  uint64_t v10 = type metadata accessor for _SegmentedControlContainer();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = type metadata accessor for _VariadicView.Tree();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v15);
  uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
  v21(v18);
  _VariadicView.Tree.init(root:content:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22, v17, v13);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>();
    lazy protocol witness table accessor for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>)
  {
    lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary()
{
  unint64_t result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>)
  {
    type metadata accessor for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>);
    }
  }
}

uint64_t type metadata completion function for DefaultListNavigationLinkStyle.ListLink()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for BoundNavigationPathDetector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 53) = *(void *)(a2 + 53);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

unsigned char *assignWithCopy for RelationshipModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  *(void *)((*(void *)(v5 + 40) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t type metadata completion function for ToolbarButtonStyle.ResolvedBody()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for BridgedListState.ScrollTarget()
{
  uint64_t result = type metadata accessor for IndexPath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ViewThatFits()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PlatformUnaryViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for DeferredFetchRequest()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>;
  if (!lazy protocol witness table cache variable for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>)
  {
    type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>);
  }
  return result;
}

void type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>()
{
  if (!lazy cache variable for type metadata for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40C60];
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_1(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E4F40F28], MEMORY[0x1E4F40F20], v0);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v1 = type metadata accessor for OrOperationViewInputPredicate();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E4F40F28], MEMORY[0x1E4F40F20], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IncludesStyledTextModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

unint64_t lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText()
{
  unint64_t result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

uint64_t type metadata completion function for SearchPrimitiveModifier.SearchConfigModifier()
{
  uint64_t result = type metadata accessor for SearchField();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SearchPrimitiveModifier.DefaultSearchView()
{
  uint64_t result = type metadata accessor for SearchField();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for NavigationStackReader();
  uint64_t v6 = MEMORY[0x1E4F41808];
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v6, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t type metadata completion function for PagingScrollView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransformScrollBounceBehavior(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransformScrollBounceBehavior(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TransformScrollBounceBehavior()
{
  lazy protocol witness table accessor for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior;
  if (!lazy protocol witness table cache variable for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior);
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityFocusState()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #3 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for NavigationStackReader();
  uint64_t v8 = a1 + *(int *)(v7 + 56);
  _OWORD v12[2] = v7;
  uint64_t v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t type metadata completion function for RelationshipModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PrimitiveTargetVisibilityModifier<A>.VisibilityActionDispatcher(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

void *FileDocumentWriteConfiguration.existingFile.getter()
{
  unint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for FileDocumentWriteConfiguration(0) + 20));
  id v2 = v1;
  return v1;
}

uint64_t type metadata accessor for FileDocumentWriteConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileDocumentWriteConfiguration);
}

uint64_t one-time initialization function for focusSupportingTechnologies()
{
  if (one-time initialization token for focusSupportingTechnologies != -1) {
    uint64_t result = swift_once();
  }
  static AccessibilityTechnologies.focusSupportingTechnologies = static AccessibilityTechnologySet.focusSupportingTechnologies;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of closure #1 in variable initialization expression of static AccessibilityTechnology.focusSupportingTechnologies);
  static AccessibilityTechnology.focusSupportingTechnologies = result;
  return result;
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t result;

  if (one-time initialization token for focusSupportingTechnologies != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v0 = *(void *)(static AccessibilityTechnology.focusSupportingTechnologies + 16);
    if (!v0) {
      break;
    }
    LOWORD(v1) = 0;
    id v2 = (unsigned __int8 *)(static AccessibilityTechnology.focusSupportingTechnologies + 32);
    while (1)
    {
      uint64_t v3 = *v2++;
      long long v4 = 1 << (v3 & 0xF);
      long long v5 = v3 >= 0x10 ? 0 : v4;
      unint64_t v1 = v5 + (unsigned __int16)v1;
      if ((v1 & 0x10000) != 0) {
        break;
      }
      if (!--v0) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    uint64_t result = swift_once();
  }
  LOWORD(v1) = 0;
LABEL_11:
  static AccessibilityTechnologySet.focusSupportingTechnologies = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body;
  if (!lazy protocol witness table cache variable for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation()
{
  unint64_t result = lazy protocol witness table cache variable for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation;
  if (!lazy protocol witness table cache variable for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyEquivalent and conformance KeyEquivalent()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent;
  if (!lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent;
  if (!lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent;
  if (!lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TimelineView<A, B><>.UpdateFilter(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t base witness table accessor for _AttributeBody in TimelineView<A, B><>.AlwaysOnTimelinePreferenceWriter()
{
  return swift_getWitnessTable();
}

void *assignWithCopy for NavigableListModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v49 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v49 - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v7 = v6 + 15;
  unint64_t v8 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = ((unint64_t)a1 + v6 + 15) & v8;
  uint64_t v10 = ((unint64_t)a2 + v6 + 15) & v8;
  size_t v11 = *(void *)(v4 + 64);
  uint64_t v51 = (v6 + 23) & v8;
  uint64_t v12 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (unint64_t *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 >= 0xFFFFFFFFuLL)
  {
    uint64_t v50 = a1;
    if (v14 >= 0xFFFFFFFF)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      swift_retain();
      swift_release();
      void *v12 = *v13;
      swift_retain();
      swift_release();
      uint64_t v15 = (unsigned __int8 *)(((unint64_t)v12 + v7) & v8);
      uint64_t v16 = (unsigned __int8 *)(((unint64_t)v13 + v7) & v8);
      if (v5) {
        size_t v17 = v11;
      }
      else {
        size_t v17 = v11 + 1;
      }
      if (v17 <= v11) {
        unint64_t v18 = v11;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 <= 8) {
        uint64_t v19 = 8;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v15 == v16) {
        goto LABEL_117;
      }
      unsigned int v20 = v15[v19];
      unsigned int v21 = v20 - 3;
      if (v20 < 3)
      {
        uint64_t v23 = v49;
LABEL_65:
        if (v20 == 2) {
          goto LABEL_93;
        }
      }
      else
      {
        if (v19 <= 3) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = 4;
        }
        uint64_t v23 = v49;
        switch(v22)
        {
          case 1:
            int v24 = *v15;
            break;
          case 2:
            int v24 = *(unsigned __int16 *)v15;
            break;
          case 3:
            int v24 = *(unsigned __int16 *)v15 | (v15[2] << 16);
            break;
          case 4:
            int v24 = *(_DWORD *)v15;
            break;
          default:
            goto LABEL_65;
        }
        int v41 = (v24 | (v21 << (8 * v19))) + 3;
        unsigned int v20 = v24 + 3;
        if (v19 < 4) {
          unsigned int v20 = v41;
        }
        if (v20 == 2) {
          goto LABEL_93;
        }
      }
      if (v20 != 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_95;
      }
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v15, 1, v23))
      {
LABEL_95:
        unsigned int v42 = v16[v19];
        unsigned int v43 = v42 - 3;
        if (v42 >= 3)
        {
          if (v19 <= 3) {
            uint64_t v44 = v19;
          }
          else {
            uint64_t v44 = 4;
          }
          switch(v44)
          {
            case 1:
              int v45 = *v16;
              goto LABEL_104;
            case 2:
              int v45 = *(unsigned __int16 *)v16;
              goto LABEL_104;
            case 3:
              int v45 = *(unsigned __int16 *)v16 | (v16[2] << 16);
              goto LABEL_104;
            case 4:
              int v45 = *(_DWORD *)v16;
LABEL_104:
              int v46 = (v45 | (v43 << (8 * v19))) + 3;
              unsigned int v42 = v45 + 3;
              if (v19 < 4) {
                unsigned int v42 = v46;
              }
              break;
            default:
              break;
          }
        }
        if (v42 != 2)
        {
          if (v42 == 1)
          {
            int v39 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v23);
            goto LABEL_109;
          }
          goto LABEL_111;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 16))(v15, v16, v23);
        goto LABEL_113;
      }
LABEL_93:
      (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(v15, v23);
      goto LABEL_95;
    }
    swift_release();
    swift_release();
    uint64_t v29 = (unsigned __int8 *)(((unint64_t)v12 + v7) & v8);
    if (v5) {
      unint64_t v30 = v11;
    }
    else {
      unint64_t v30 = v11 + 1;
    }
    if (v30 <= v11) {
      unint64_t v30 = v11;
    }
    if (v30 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v30;
    }
    unsigned int v31 = v29[v19];
    unsigned int v32 = v31 - 3;
    if (v31 < 3)
    {
      uint64_t v34 = v51;
LABEL_59:
      if (v31 == 2)
      {
LABEL_83:
        (*(void (**)(unint64_t, uint64_t))(v4 + 8))(((unint64_t)v12 + v7) & v8, v49);
LABEL_84:
        memcpy((void *)v9, (const void *)v10, (v34 | 1) + v19);
        uint64_t v3 = v50;
        goto LABEL_118;
      }
    }
    else
    {
      if (v19 <= 3) {
        uint64_t v33 = v19;
      }
      else {
        uint64_t v33 = 4;
      }
      uint64_t v34 = v51;
      switch(v33)
      {
        case 1:
          int v35 = *v29;
          break;
        case 2:
          int v35 = *(unsigned __int16 *)v29;
          break;
        case 3:
          int v35 = *(unsigned __int16 *)v29 | (*(unsigned __int8 *)((((unint64_t)v12 + v7) & v8) + 2) << 16);
          break;
        case 4:
          int v35 = *(_DWORD *)v29;
          break;
        default:
          goto LABEL_59;
      }
      int v40 = (v35 | (v32 << (8 * v19))) + 3;
      unsigned int v31 = v35 + 3;
      if (v19 < 4) {
        unsigned int v31 = v40;
      }
      if (v31 == 2) {
        goto LABEL_83;
      }
    }
    if (v31 == 1)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(((unint64_t)v12 + v7) & v8, 1, v49))(*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(v29, v49); {
    }
      }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_84;
  }
  if (v14 >= 0xFFFFFFFF)
  {
    uint64_t v50 = a1;
    *(void *)uint64_t v9 = *(void *)v10;
    void *v12 = *v13;
    uint64_t v15 = (unsigned __int8 *)(((unint64_t)v12 + v7) & v8);
    uint64_t v16 = (unsigned __int8 *)(((unint64_t)v13 + v7) & v8);
    if (v5) {
      size_t v17 = v11;
    }
    else {
      size_t v17 = v11 + 1;
    }
    if (v17 <= v11) {
      unint64_t v25 = v11;
    }
    else {
      unint64_t v25 = v17;
    }
    if (v25 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v25;
    }
    unsigned int v26 = v16[v19];
    swift_retain();
    swift_retain();
    if (v26 >= 3)
    {
      if (v19 <= 3) {
        uint64_t v27 = v19;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v16;
          goto LABEL_70;
        case 2:
          int v28 = *(unsigned __int16 *)v16;
          goto LABEL_70;
        case 3:
          int v28 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_70;
        case 4:
          int v28 = *(_DWORD *)v16;
LABEL_70:
          int v37 = (v28 | ((v26 - 3) << (8 * v19))) + 3;
          unsigned int v38 = v28 + 3;
          if (v19 >= 4) {
            unsigned int v26 = v38;
          }
          else {
            unsigned int v26 = v37;
          }
          break;
        default:
          break;
      }
    }
    if (v26 != 2)
    {
      if (v26 == 1)
      {
        uint64_t v23 = v49;
        int v39 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v49);
LABEL_109:
        if (v39)
        {
          memcpy(v15, v16, v17);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 16))(v15, v16, v23);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v23);
        }
        char v47 = 1;
        goto LABEL_116;
      }
LABEL_111:
      *(void *)uint64_t v15 = *(void *)v16;
      v15[v19] = 0;
      swift_bridgeObjectRetain();
LABEL_117:
      uint64_t v3 = v50;
      uint64_t v34 = v51;
      goto LABEL_118;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 16))(v15, v16, v49);
LABEL_113:
    char v47 = 2;
LABEL_116:
    v15[v19] = v47;
    goto LABEL_117;
  }
  if (v5) {
    unint64_t v36 = *(void *)(*(void *)(v49 - 8) + 64);
  }
  else {
    unint64_t v36 = v11 + 1;
  }
  if (v36 <= v11) {
    unint64_t v36 = *(void *)(*(void *)(v49 - 8) + 64);
  }
  if (v36 <= 8) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = v36;
  }
  uint64_t v34 = (v6 + 23) & v8;
  memcpy((void *)v9, (const void *)v10, (v51 | 1) + v19);
LABEL_118:
  *(void *)(((v9 | 7) + (v34 | 1) + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v10 | 7) + (v34 | 1) + v19) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return v3;
}

uint64_t implicit closure #1 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

void TaskGesturePhase.Handler.setContinuation(_:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for TaskPhase();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v22 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v21 - v11, a1, v7, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v7);
  uint64_t v14 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v14, v12, v8);
  swift_endAccess();
  uint64_t v15 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 104));
  swift_beginAccess();
  uint64_t v16 = *v15;
  swift_bridgeObjectRetain();
  *uint64_t v15 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 112)))
  {
    swift_bridgeObjectRelease();
    AsyncStream.Continuation.finish()();
    return;
  }
  if (MEMORY[0x18C115CB0](v16, v3))
  {
    uint64_t v17 = 0;
    do
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, v16+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17, v3);
        uint64_t v19 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v20 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v22 != 8)
        {
          __break(1u);
          return;
        }
        uint64_t v23 = v20;
        (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 16))(v6, &v23, v3);
        swift_unknownObjectRelease();
        uint64_t v19 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_12:
          __break(1u);
          break;
        }
      }
      TaskGesturePhase.Handler.enqueue(phase:)((uint64_t)v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      ++v17;
    }
    while (v19 != MEMORY[0x18C115CB0](v16, v3));
  }
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TaskPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v6 = type metadata accessor for CollectionViewListRoot();
  uint64_t v7 = a1 + *(int *)(v6 + 68);
  _OWORD v11[2] = v6;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, (uint64_t)&type metadata for ListPadding, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v12;
}

uint64_t closure #4 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v6 = type metadata accessor for CollectionViewListRoot();
  uint64_t v7 = a1 + *(int *)(v6 + 60);
  _OWORD v12[2] = v6;
  uint64_t v8 = MEMORY[0x1E4FBC958];
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t type metadata completion function for _NavigationSplitReader.SplitPresentationModeLocation()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #4 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v6 = type metadata accessor for NavigationStackReader();
  uint64_t v7 = a1 + *(int *)(v6 + 60);
  _OWORD v12[2] = v6;
  uint64_t v8 = MEMORY[0x1E4FBB390];
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t type metadata completion function for ListCoreBatchUpdates()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SearchToolbarItem()
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogSeverity()
{
  return &type metadata for DialogSeverity;
}

ValueMetadata *type metadata accessor for SubmitLabel()
{
  return &type metadata for SubmitLabel;
}

uint64_t type metadata completion function for UISplitViewControllerProxyStorage()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *assignWithCopy for ResolvedList(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v57 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v57 - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  size_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v8 = v7 | 7;
  uint64_t v9 = ~(v7 | 7);
  uint64_t v10 = (v7 + 23) & v9;
  uint64_t v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (unint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *v12;
  if (*v11 >= 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v56 = a1;
      swift_retain();
      swift_release();
      void *v11 = *v12;
      swift_retain();
      swift_release();
      uint64_t result = v56;
      unint64_t v15 = (unint64_t)v11 + v8 + 8;
      uint64_t v16 = (unsigned __int8 *)(v15 & v9);
      unint64_t v17 = (unint64_t)v12 + v8 + 8;
      unint64_t v18 = (unsigned __int8 *)(v17 & v9);
      if ((v15 & v9) == (v17 & v9)) {
        return result;
      }
      if (v5) {
        size_t v19 = v6;
      }
      else {
        size_t v19 = v6 + 1;
      }
      if (v19 <= v6) {
        unint64_t v20 = v6;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20 <= 8) {
        uint64_t v21 = 8;
      }
      else {
        uint64_t v21 = v20;
      }
      unsigned int v22 = v16[v21];
      unsigned int v23 = v22 - 3;
      if (v22 < 3)
      {
        uint64_t v25 = v57;
LABEL_58:
        if (v22 == 2) {
          goto LABEL_96;
        }
      }
      else
      {
        if (v21 <= 3) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = 4;
        }
        uint64_t v25 = v57;
        switch(v24)
        {
          case 1:
            int v26 = *v16;
            break;
          case 2:
            int v26 = *(unsigned __int16 *)v16;
            break;
          case 3:
            int v26 = *(unsigned __int16 *)v16 | (v16[2] << 16);
            break;
          case 4:
            int v26 = *(_DWORD *)v16;
            break;
          default:
            goto LABEL_58;
        }
        int v49 = (v26 | (v23 << (8 * v21))) + 3;
        unsigned int v22 = v26 + 3;
        if (v21 < 4) {
          unsigned int v22 = v49;
        }
        if (v22 == 2) {
          goto LABEL_96;
        }
      }
      if (v22 != 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_98;
      }
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v25))
      {
LABEL_98:
        unsigned int v50 = v18[v21];
        unsigned int v51 = v50 - 3;
        if (v50 >= 3)
        {
          if (v21 <= 3) {
            uint64_t v52 = v21;
          }
          else {
            uint64_t v52 = 4;
          }
          switch(v52)
          {
            case 1:
              int v53 = *v18;
              goto LABEL_107;
            case 2:
              int v53 = *(unsigned __int16 *)v18;
              goto LABEL_107;
            case 3:
              int v53 = *(unsigned __int16 *)v18 | (v18[2] << 16);
              goto LABEL_107;
            case 4:
              int v53 = *(_DWORD *)v18;
LABEL_107:
              int v54 = (v53 | (v51 << (8 * v21))) + 3;
              unsigned int v50 = v53 + 3;
              if (v21 < 4) {
                unsigned int v50 = v54;
              }
              break;
            default:
              break;
          }
        }
        if (v50 == 2)
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 16))(v16, v18, v25);
          char v55 = 2;
LABEL_118:
          v16[v21] = v55;
          return v56;
        }
        if (v50 == 1)
        {
          if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v25))
          {
            memcpy(v16, v18, v19);
          }
          else
          {
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 16))(v16, v18, v25);
            (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v4 + 56))(v16, 0, 1, v25);
          }
          char v55 = 1;
          goto LABEL_118;
        }
        *(void *)uint64_t v16 = *(void *)v18;
        v16[v21] = 0;
        goto LABEL_115;
      }
LABEL_96:
      (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(v16, v25);
      goto LABEL_98;
    }
    int v35 = a1;
    swift_release();
    swift_release();
    unint64_t v36 = (unsigned __int8 *)(((unint64_t)v11 + v8 + 8) & v9);
    if (v5) {
      unint64_t v37 = v6;
    }
    else {
      unint64_t v37 = v6 + 1;
    }
    if (v37 <= v6) {
      unint64_t v37 = v6;
    }
    if (v37 <= 8) {
      uint64_t v38 = 8;
    }
    else {
      uint64_t v38 = v37;
    }
    unsigned int v39 = v36[v38];
    unsigned int v40 = v39 - 3;
    if (v39 >= 3)
    {
      if (v38 <= 3) {
        uint64_t v41 = v38;
      }
      else {
        uint64_t v41 = 4;
      }
      switch(v41)
      {
        case 1:
          int v42 = *v36;
          goto LABEL_78;
        case 2:
          int v42 = *(unsigned __int16 *)v36;
          goto LABEL_78;
        case 3:
          int v42 = *(unsigned __int16 *)(((unint64_t)v11 + v8 + 8) & v9) | (*(unsigned __int8 *)((((unint64_t)v11 + v8 + 8) & v9) + 2) << 16);
          goto LABEL_78;
        case 4:
          int v42 = *(_DWORD *)v36;
LABEL_78:
          int v48 = (v42 | (v40 << (8 * v38))) + 3;
          unsigned int v39 = v42 + 3;
          if (v38 < 4) {
            unsigned int v39 = v48;
          }
          break;
        default:
          break;
      }
    }
    if (v39 == 2) {
      goto LABEL_83;
    }
    if (v39 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v36, 1, v57)) {
LABEL_83:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(v36, v57);
LABEL_86:
    size_t v44 = v38 + v10 + 1;
    a1 = v35;
    a2 = v3;
LABEL_87:
    memcpy(a1, a2, v44);
    return v35;
  }
  if (v13 < 0xFFFFFFFF)
  {
    if (v5) {
      unint64_t v43 = *(void *)(*(void *)(v57 - 8) + 64);
    }
    else {
      unint64_t v43 = v6 + 1;
    }
    if (v43 <= v6) {
      unint64_t v43 = *(void *)(*(void *)(v57 - 8) + 64);
    }
    if (v43 <= 8) {
      unint64_t v43 = 8;
    }
    size_t v44 = v43 + v10 + 1;
    int v35 = a1;
    goto LABEL_87;
  }
  uint64_t v56 = a1;
  *a1 = *a2;
  void *v11 = *v12;
  uint64_t v27 = (void *)(((unint64_t)v11 + v8 + 8) & v9);
  int v28 = (unsigned __int8 *)(((unint64_t)v12 + v8 + 8) & v9);
  if (v5) {
    size_t v29 = v6;
  }
  else {
    size_t v29 = v6 + 1;
  }
  if (v29 <= v6) {
    unint64_t v30 = v6;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v30 <= 8) {
    uint64_t v31 = 8;
  }
  else {
    uint64_t v31 = v30;
  }
  unsigned int v32 = v28[v31];
  swift_retain();
  swift_retain();
  if (v32 >= 3)
  {
    if (v31 <= 3) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = 4;
    }
    switch(v33)
    {
      case 1:
        int v34 = *v28;
        goto LABEL_63;
      case 2:
        int v34 = *(unsigned __int16 *)v28;
        goto LABEL_63;
      case 3:
        int v34 = *(unsigned __int16 *)v28 | (v28[2] << 16);
        goto LABEL_63;
      case 4:
        int v34 = *(_DWORD *)v28;
LABEL_63:
        int v45 = (v34 | ((v32 - 3) << (8 * v31))) + 3;
        unsigned int v46 = v34 + 3;
        if (v31 >= 4) {
          unsigned int v32 = v46;
        }
        else {
          unsigned int v32 = v45;
        }
        break;
      default:
        break;
    }
  }
  if (v32 == 2)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(v27, v28, v57);
    char v47 = 2;
  }
  else
  {
    if (v32 != 1)
    {
      *uint64_t v27 = *(void *)v28;
      *((unsigned char *)v27 + v31) = 0;
LABEL_115:
      swift_bridgeObjectRetain();
      return v56;
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(v28, 1, v57))
    {
      memcpy(v27, v28, v29);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(v27, v28, v57);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v27, 0, 1, v57);
    }
    char v47 = 1;
  }
  *((unsigned char *)v27 + v31) = v47;
  return v56;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>)
  {
    lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>();
    type metadata accessor for AnyNavigationLinkPresentedValueStorage<AnyHashable>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for AnyNavigationLinkPresentedValueStorage<AnyHashable>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t initializeWithTake for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 | v15 | 7;
  uint64_t v17 = (v16 + 161 + a1) & ~v16;
  uint64_t v18 = (v16 + 161 + a2) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v17, v18, v10);
  uint64_t v19 = *(void *)(v11 + 64) + 7;
  unint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = *v21;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v20 + v15 + 8) & ~v15, ((unint64_t)v21 + v15 + 8) & ~v15, AssociatedTypeWitness);
  unint64_t v22 = *(void *)(v14 + 64) + ((v15 + 8 + (v19 & 0xFFFFFFFFFFFFFFF8)) & ~v15) + 3;
  unsigned int v23 = (_DWORD *)((v22 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v24 = (_DWORD *)((v22 + v18) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v23 = *v24;
  *(_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [_ViewList_ID] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A])
  {
    type metadata accessor for [_ViewList_ID]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [_ViewList_ID]()
{
  if (!lazy cache variable for type metadata for [_ViewList_ID])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_ViewList_ID]);
    }
  }
}

uint64_t initializeWithCopy for _NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t UIHostingConfiguration.background<A>(content:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v28 = a6;
  uint64_t v29 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UIHostingConfigurationStorage(0);
  MEMORY[0x1F4188790](v18 - 8);
  unint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unsigned int v23 = (char *)&v26 - v22;
  outlined init with copy of UIHostingConfigurationStorage(v7 + *(int *)(a3 + 56), (uint64_t)&v26 - v22, type metadata accessor for UIHostingConfigurationStorage);
  *unsigned int v23 = 1;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v7, v13);
  v27(v24);
  outlined init with copy of UIHostingConfigurationStorage((uint64_t)v23, (uint64_t)v20, type metadata accessor for UIHostingConfigurationStorage);
  UIHostingConfiguration.init(rootView:backgroundView:storage:)((uint64_t)v17, (uint64_t)v11, (uint64_t)v20, v13, a4, *(void *)(a3 + 32), v29, v28);
  return outlined destroy of UIHostingConfigurationStorage((uint64_t)v23, type metadata accessor for UIHostingConfigurationStorage);
}

ValueMetadata *type metadata accessor for DisclosureIndicatorDifferentiatesWithoutColor()
{
  return &type metadata for DisclosureIndicatorDifferentiatesWithoutColor;
}

ValueMetadata *type metadata accessor for AutomaticNavigationSplitViewStyle()
{
  return &type metadata for AutomaticNavigationSplitViewStyle;
}

ValueMetadata *type metadata accessor for MultimodalListGridLabelStyle()
{
  return &type metadata for MultimodalListGridLabelStyle;
}

ValueMetadata *type metadata accessor for DefaultToggleStyle()
{
  return &type metadata for DefaultToggleStyle;
}

unint64_t lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent;
  if (!lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent;
  if (!lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent;
  if (!lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent);
  }
  return result;
}

uint64_t type metadata completion function for ArchivableCircularProgressView()
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SearchScopeToolbarContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance PlatformItemTintModifier@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int8 *)v1 + 8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(unsigned char *)(v5 + 24) = v4;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemTintModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t))v5;

  return outlined copy of Environment<Color?>.Content(v3, v4);
}

uint64_t closure #5 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v6 = type metadata accessor for NavigationStackReader();
  uint64_t v7 = a1 + *(int *)(v6 + 64);
  _OWORD v12[2] = v6;
  uint64_t v8 = type metadata accessor for NavigationStateHost();
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

id closure #1 in SwiftUISearchController._searchBar.getter(uint64_t a1)
{
  type metadata accessor for UIKitSearchBar();
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator);
  swift_unknownObjectWeakAssign();
  id v4 = v3;
  objc_msgSend(v2, sel_setDelegate_, v4);
  id v5 = objc_msgSend(v2, sel_searchTextField);
  objc_msgSend(v5, sel_setDelegate_, v4);

  id v6 = objc_msgSend(v2, sel_searchTextField);
  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v4, sel_primaryActionTriggered_, 0x2000);

  return v2;
}

uint64_t type metadata accessor for UIKitSearchBar()
{
  return self;
}

void type metadata completion function for ResolvedTextFieldStyle()
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedGaugeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle);
  }
  return result;
}

Class @objc UICollectionViewListCoordinatorBase.indexTitles(for:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  uint64_t v6 = specialized UICollectionViewListCoordinatorBase.indexTitles(for:)();

  if (v6)
  {
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }

  return v7.super.isa;
}

uint64_t specialized UICollectionViewListCoordinatorBase.indexTitles(for:)()
{
  unint64_t v1 = v0;
  id v2 = (void *)(*MEMORY[0x1E4FBC8C8] & *v0);
  uint64_t v3 = v2[12];
  uint64_t v29 = v2[14];
  uint64_t v26 = v3;
  uint64_t v4 = type metadata accessor for ShadowSectionCollection();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = type metadata accessor for DefaultIndices();
  uint64_t v30 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for ShadowListDataSource();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = (uint64_t)v1 + v2[17];
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  ShadowListDataSource.sectionIDs.getter((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  Collection<>.indices.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
  uint64_t v16 = v2[13];
  uint64_t v17 = v2[15];
  uint64_t v18 = v26;
  uint64_t v19 = v29;
  unint64_t v20 = implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:)(v15, v26, v16, v29, v17);
  uint64_t v31 = v18;
  uint64_t v32 = v16;
  uint64_t v33 = v19;
  uint64_t v34 = v17;
  int v35 = v20;
  uint64_t v36 = v21;
  uint64_t v22 = v28;
  swift_getWitnessTable();
  uint64_t v23 = Sequence.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v22);
  swift_release();
  return v23;
}

uint64_t (*implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10 = type metadata accessor for ShadowListDataSource();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v18 - v13, a1, v10, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  return partial apply for implicit closure #2 in implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableButtonAppIntentModifier(void *a1)
{
  return ArchivableButtonAppIntentModifier.encode(to:)(a1);
}

uint64_t ArchivableButtonAppIntentModifier.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableButtonAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys, (uint64_t)&unk_1ED45E250, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = v3[1];
  v12[0] = *v3;
  v12[1] = v10;
  _OWORD v12[2] = v3[2];
  char v13 = 0;
  lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void closure #1 in FocusBridge.moveFocus(to:designatedPlatformResponder:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    objc_msgSend(v2, sel_becomeFirstResponder);
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnModifierKeysChangedModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for InsetGroupedListStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t static InsetGroupedListStyle._makeViewList<A>(value:inputs:)(int *a1, uint64_t a2, uint64_t a3, _UNKNOWN **a4)
{
  uint64_t v26 = *(ValueMetadata **)a2;
  int v25 = *(_DWORD *)(a2 + 8);
  uint64_t v24 = *(void *)(a2 + 16);
  long long v31 = *(_OWORD *)(a2 + 40);
  uint64_t v30 = *(void *)(a2 + 56);
  int v29 = *(_DWORD *)(a2 + 64);
  uint64_t v28 = *(void *)(a2 + 72);
  char v27 = *(unsigned char *)(a2 + 80);
  int v41 = *a1;
  uint64_t v32 = &type metadata for InsetGroupedListStyle;
  *(void *)&long long v33 = a3;
  *((void *)&v33 + 1) = &protocol witness table for InsetGroupedListStyle;
  uint64_t v34 = a4;
  type metadata accessor for _ListValue();
  type metadata accessor for _GraphValue();
  uint64_t v7 = *(_UNKNOWN ***)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  int v9 = _GraphValue.value.getter();
  memset(v47, 0, sizeof(v47));
  __int16 v48 = 1;
  unint64_t v10 = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v9, (uint64_t)v47, v11, (uint64_t)&type metadata for InsetGroupedListStyleContext, (char *)&v32);
  int v12 = (int)v32;
  long long v23 = v33;
  char v13 = v34;
  unint64_t v14 = v35;
  char v15 = v36;
  char v22 = BYTE1(v36);
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for SelectionManagerBox();
  unint64_t v19 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = v17;
  *(void *)&long long v33 = v18;
  *((void *)&v33 + 1) = v19;
  uint64_t v34 = (_UNKNOWN **)WitnessTable;
  type metadata accessor for InsettableGroupedListBody();
  int v41 = v12;
  long long v42 = v23;
  unint64_t v43 = v13;
  unint64_t v44 = v14;
  char v45 = v15;
  char v46 = v22;
  uint64_t v32 = &type metadata for InsetGroupedListStyle;
  *(void *)&long long v33 = &type metadata for InsetGroupedListStyleContext;
  *((void *)&v33 + 1) = a3;
  uint64_t v34 = &protocol witness table for InsetGroupedListStyle;
  unint64_t v35 = v10;
  *(void *)&long long v36 = a4;
  type metadata accessor for InsettableGroupedListBodyRule();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v32 = v26;
  LODWORD(v33) = v25;
  *((void *)&v33 + 1) = v24;
  uint64_t v34 = v7;
  unint64_t v35 = v8;
  long long v36 = v31;
  uint64_t v37 = v30;
  int v38 = v29;
  uint64_t v39 = v28;
  char v40 = v27;
  swift_getWitnessTable();
  return static View._makeViewList(view:inputs:)();
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<InsetGroupedListStyleContext>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>);
    }
  }
}

uint64_t InsettableGroupedListBodyRule.init(base:insetMode:context:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X8>)
{
  *(_DWORD *)a5 = a1;
  outlined init with take of SectionInsetMode(a2, (uint64_t)(a5 + 8));
  uint64_t v8 = type metadata accessor for InsettableGroupedListBodyRule();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a5[*(int *)(v8 + 72)], a3, a4);
}

uint64_t type metadata accessor for InsettableGroupedListBodyRule()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
    lazy protocol witness table accessor for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<InsetGroupedListStyleContext>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<InsetGroupedListStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<InsetGroupedListStyleContext>)
  {
    lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<InsetGroupedListStyleContext>);
    }
  }
}

uint64_t type metadata completion function for NavigationLinkModifier.Payload()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for BaseModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedToggleStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();

  return MEMORY[0x1F41003C8](a1, a2, a3, v6);
}

uint64_t type metadata completion function for ResolvedList()
{
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for _ListStyleConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _NavigationSplitReader.UpdateRequiredCompactColumn.updateValue()()
{
  uint64_t v1 = MEMORY[0x1E4FBB718];
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(Value, (uint64_t)&v12, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  if (*((void *)&v12 + 1) == 1) {
    return _s7SwiftUI19NavigationAuthorityVSgWOhTm_0((uint64_t)&v12, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  outlined init with take of NavigationAuthority((uint64_t)&v12, (uint64_t)v17);
  type metadata accessor for Binding<NavigationSplitViewColumn>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>?, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4FBB718]);
  uint64_t v4 = AGGraphGetValue();
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return outlined destroy of NavigationAuthority((uint64_t)v17);
  }
  uint64_t v6 = *(void *)v4;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 16);
  int v8 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v8 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v8;
    *(void *)(v0 + 16) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 24) = 0;
  }
  swift_retain();
  swift_retain();
  if (dispatch thunk of AnyLocation.update()())
  {
    uint64_t v9 = v12;
    if (UpdateCycleDetector.dispatch(label:isDebug:)())
    {
      *(void *)&long long v12 = v6;
      *((void *)&v12 + 1) = v5;
      *(void *)char v13 = v7 | (v9 << 8);
      uint64_t v14 = 0;
      memset(&v13[8], 0, 32);
      v15[0] = 5;
      memset(&v15[8], 0, 32);
      *(_OWORD *)&v15[40] = xmmword_18834C6D0;
      v15[56] = 0;
      uint64_t v16 = 0;
      v10[6] = *(_OWORD *)&v15[32];
      v10[7] = *(_OWORD *)&v15[48];
      uint64_t v11 = 0;
      _OWORD v10[2] = *(_OWORD *)&v13[16];
      void v10[3] = 0uLL;
      void v10[4] = *(_OWORD *)v15;
      v10[5] = *(_OWORD *)&v15[16];
      v10[0] = v12;
      v10[1] = *(_OWORD *)v13;
      NavigationAuthority.enqueueRequest(_:)(v10);
      outlined release of NavigationRequest((uint64_t)&v12);
      return outlined destroy of NavigationAuthority((uint64_t)v17);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v17);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v6, v5);
}

void type metadata accessor for Binding<NavigationSplitViewColumn>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for Binding<AnyNavigationSplitVisibility>(255, a3, a4, MEMORY[0x1E4F41638]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ResolvedLabeledContent._Body()
{
  return &type metadata for ResolvedLabeledContent._Body;
}

uint64_t instantiation function for generic protocol witness table for DividerShape<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityLabeledContentContentModifier<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata completion function for NavigableListModifier()
{
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for OptionalSourceWriter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

uint64_t implicit closure #1 in static CommandsModifier._makeScene(modifier:inputs:body:)(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t updated = type metadata accessor for CommandsModifier.UpdateList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_25, (uint64_t)v6, updated, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t type metadata accessor for CommandsModifier.UpdateList()
{
  return __swift_instantiateGenericMetadata();
}

void *UIView.findPortalTarget(kind:)(uint64_t a1)
{
  type metadata accessor for PortalTargetMarkerView();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3
    || (a1 & ~*(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60322PortalTargetMarkerView_kind)) != 0)
  {
    type metadata accessor for PortalGroupMarkerView();
    uint64_t v5 = swift_dynamicCastClass();
    if (!v5
      || (a1 & ~*(void *)(v5 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_kind)) != 0)
    {
      id v6 = objc_msgSend(v1, sel_subviews);
      type metadata accessor for UIView();
      unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v7 >> 62) {
        goto LABEL_20;
      }
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v8)
      {
        uint64_t v9 = 4;
        while (1)
        {
          id v10 = (v7 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x18C117680](v9 - 4, v7)
              : *(id *)(v7 + 8 * v9);
          uint64_t v11 = v10;
          uint64_t v12 = v9 - 3;
          if (__OFADD__(v9 - 4, 1)) {
            break;
          }
          uint64_t v1 = (void *)UIView.findPortalTarget(kind:)(a1);

          if (v1)
          {
            swift_bridgeObjectRelease();
            return v1;
          }
          ++v9;
          if (v12 == v8) {
            goto LABEL_15;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_15:
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  else
  {
    id v4 = v1;
  }
  return v1;
}

uint64_t initializeWithCopy for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  void *v8 = *v7;
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)(v10 + 24);
  swift_retain();
  if (v11 < 0xFFFFFFFF)
  {
    long long v15 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v15;
  }
  else
  {
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = *(void *)(v10 + 8);
    char v14 = *(unsigned char *)(v10 + 16);
    outlined copy of Text.Storage(*(void *)v10, v13, v14);
    *(void *)unint64_t v9 = v12;
    *(void *)(v9 + 8) = v13;
    *(unsigned char *)(v9 + 16) = v14;
    *(void *)(v9 + 24) = *(void *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v20 = *(void *)(v19 + 8);
    *(void *)unint64_t v18 = *(void *)v19;
    *(void *)(v18 + 8) = v20;
    swift_retain();
  }
  unint64_t v21 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  char v22 = (void *)((a1 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = (void *)((a2 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v22 = *v23;
  v22[1] = v23[1];
  *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  id v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata completion function for SearchUnavailableContent.Label()
{
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<Binding<AttributedString>?>.Content(uint64_t a1)
{
}

uint64_t implicit closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(int a1, uint64_t a2, long long *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  LODWORD(v45) = a1;
  type metadata accessor for KeyboardShortcutBindingBehavior();
  type metadata accessor for _GraphValue();
  int v5 = _GraphValue.value.getter();
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v26 = *(void *)(a2 + 16);
  char v27 = *(void **)a2;
  int v25 = *(_DWORD *)(a2 + 24);
  uint64_t v24 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 100);
  unsigned int v28 = *(_DWORD *)(a2 + 104);
  int v29 = *(_DWORD *)(a2 + 96);
  long long v8 = a3[3];
  long long v47 = a3[2];
  long long v48 = v8;
  long long v49 = a3[4];
  LODWORD(v50) = *((_DWORD *)a3 + 20);
  long long v9 = a3[1];
  long long v45 = *a3;
  long long v46 = v9;
  char v10 = v7 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 88);
  long long v22 = *(_OWORD *)(a2 + 56);
  long long v23 = *(_OWORD *)(a2 + 72);
  swift_getKeyPath();
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)a2);
  LODWORD(a2) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = a3[3];
  long long v47 = a3[2];
  long long v48 = v14;
  long long v49 = a3[4];
  LODWORD(v50) = *((_DWORD *)a3 + 20);
  long long v15 = a3[1];
  long long v45 = *a3;
  long long v46 = v15;
  swift_getKeyPath();
  unsigned int v16 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(void *)&long long v45 = *((void *)a3 + 6);
  DWORD2(v45) = *((_DWORD *)a3 + 14);
  unsigned int v17 = PreferencesInputs.hostKeys.getter();
  int v18 = *MEMORY[0x1E4F4E7A0];
  *(_WORD *)((char *)&v42 + 13) = v31;
  HIBYTE(v42) = v32;
  LODWORD(v36) = v5;
  *((void *)&v36 + 1) = v27;
  LODWORD(v37) = v6;
  *((void *)&v37 + 1) = v26;
  LODWORD(v38) = v25;
  *((void *)&v38 + 1) = v24;
  *(void *)&long long v39 = v11;
  *((void *)&v39 + 1) = v12;
  long long v40 = v22;
  long long v41 = v23;
  *(void *)&long long v42 = v13;
  DWORD2(v42) = v29;
  BYTE12(v42) = v10;
  *(void *)&long long v43 = __PAIR64__(a2, v28);
  *((void *)&v43 + 1) = __PAIR64__(v17, v16);
  int v44 = v18;
  uint64_t v34 = type metadata accessor for BindKeyboardShortcutItems();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<[KeyboardShortcutBinding]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_28, (uint64_t)v33, v34, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
  long long v51 = v42;
  long long v52 = v43;
  int v53 = v44;
  long long v47 = v38;
  long long v48 = v39;
  long long v49 = v40;
  long long v50 = v41;
  long long v45 = v36;
  long long v46 = v37;
  outlined release of BindKeyboardShortcutItems<A>((uint64_t)&v45);
  return v30;
}

void **outlined retain of SelectionEditMenuModifier<A>.Child(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t outlined release of BindKeyboardShortcutItems<A>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t type metadata accessor for BindKeyboardShortcutItems()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<[KeyboardShortcutBinding]>()
{
  if (!lazy cache variable for type metadata for Attribute<[KeyboardShortcutBinding]>)
  {
    _s7SwiftUI16KeyboardShortcutVSgMaTm_0(255, &lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[KeyboardShortcutBinding]>);
    }
  }
}

uint64_t type metadata completion function for UIKitContainerFocusResponderItem()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for TooltipResponder()
{
  return swift_initClassMetadata2();
}

uint64_t base witness table accessor for _AttributeBody in CommandsModifier<A>.UpdateList()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for _TaskValueModifier.InnerModifier()
{
  uint64_t result = type metadata accessor for _TaskValueModifier();
  if (v1 <= 0x3F)
  {
    type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v6 = type metadata accessor for CollectionViewListRoot();
  uint64_t v7 = a1 + *(int *)(v6 + 64);
  _OWORD v11[2] = v6;
  type metadata accessor for Binding();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v12, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v13;
}

uint64_t type metadata completion function for CollectionViewListDataSource()
{
  uint64_t result = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NavigationStackReader()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void ToolbarStorage.ID.hash(into:)()
{
  Swift::UInt v1 = v0[2];
  Swift::UInt v2 = v0[3];
  uint64_t v3 = v0[5];
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t specialized implicit closure #2 in ToolbarBridge.makeStorage(in:from:strategy:)@<X0>(uint64_t a1@<X8>)
{
  return ToolbarStorage.Entry.id.getter(a1);
}

uint64_t ToolbarStorage.Entry.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  char v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarStorage.Entry(v2, (uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t result = _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v13, (uint64_t)v6, type metadata accessor for ToolbarStorage.GroupItem);
      uint64_t v20 = *((void *)v6 + 9);
      if (*(void *)(v20 + 16))
      {
        uint64_t v21 = v20 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
        unint64_t v22 = *(void *)(v21 + 8);
        uint64_t v23 = *(void *)(v21 + 32);
        uint64_t v24 = *(void *)(v21 + 40);
        long long v25 = *(_OWORD *)(v21 + 16);
        unint64_t v30 = *(void *)v21;
        unint64_t v31 = v22;
        long long v32 = v25;
        uint64_t v33 = v23;
        uint64_t v34 = v24;
        lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v6 + 16), (uint64_t)&v30);
        unsigned int v17 = type metadata accessor for ToolbarStorage.GroupItem;
        uint64_t v18 = (uint64_t)v6;
        goto LABEL_5;
      }
      __break(1u);
      break;
    case 2u:
      unint64_t v27 = 0x2D69757466697773;
      unint64_t v28 = 0xEE00686372616573;
      goto LABEL_8;
    case 3u:
      unint64_t v27 = 0xD000000000000010;
      unint64_t v28 = 0x8000000188339990;
LABEL_8:
      unint64_t v30 = v27;
      unint64_t v31 = v28;
      uint64_t result = AnyHashable.init<A>(_:)();
      *(void *)(a1 + 72) = 0;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(unsigned char *)(a1 + 80) = -1;
      break;
    default:
      _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v13, (uint64_t)v10, type metadata accessor for ToolbarStorage.Item);
      unint64_t v14 = *((void *)v10 + 1);
      uint64_t v15 = *((void *)v10 + 4);
      uint64_t v16 = *((void *)v10 + 5);
      unint64_t v30 = *(void *)v10;
      unint64_t v31 = v14;
      long long v32 = *((_OWORD *)v10 + 1);
      uint64_t v33 = v15;
      uint64_t v34 = v16;
      lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v10 + 48), (uint64_t)&v30);
      unsigned int v17 = type metadata accessor for ToolbarStorage.Item;
      uint64_t v18 = (uint64_t)v10;
LABEL_5:
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v18, v17);
      long long v26 = v36;
      *(_OWORD *)a1 = v35;
      *(_OWORD *)(a1 + 16) = v26;
      *(void *)(a1 + 32) = v37;
      uint64_t result = outlined init with take of ToolbarItemPlacement.Role?((uint64_t)&v30, a1 + 40);
      break;
  }
  return result;
}

uint64_t outlined init with take of ToolbarItemPlacement.Role?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<Int>(0, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void _s7SwiftUI7BindingVySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata completion function for Tuple()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationDestinationScopeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

unint64_t lazy protocol witness table accessor for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier;
  if (!lazy protocol witness table cache variable for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier);
  }
  return result;
}

void type metadata completion function for SearchFieldConfiguration.Data()
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(319, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t closure #2 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v5 = a1 + 8;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  _OWORD v11[2] = type metadata accessor for NavigationStackReader();
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v7, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v12;
}

uint64_t assignWithTake for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

void type metadata completion function for BridgedListState()
{
  type metadata accessor for BridgedListState.ScrollTarget?(319, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for AccessibilityFocusStoreListModifier()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata completion function for UIKitBarButtonItemGroup()
{
  type metadata accessor for ToolbarStorage.Item?(319, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata completion function for NavigableListModifier.BoundListSelectionDetector()
{
  type metadata accessor for SelectionManagerBox();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_WORD *assignWithTake for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + 2;
  uint64_t v11 = (unsigned __int8 *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (unsigned __int8 *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  if (v11 != v12)
  {
    uint64_t v13 = v6;
    uint64_t v14 = *(void *)(v7 + 64);
    uint64_t v15 = ((v9 + 75) & ~v9) + v14;
    if ((unint64_t)(v15 + 1) > 0x30) {
      uint64_t v16 = v15 + 1;
    }
    else {
      uint64_t v16 = 48;
    }
    unsigned int v17 = v11[v16];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v16 <= 3) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *v11;
          goto LABEL_17;
        case 2:
          int v20 = *(unsigned __int16 *)v11;
          goto LABEL_17;
        case 3:
          int v20 = *(unsigned __int16 *)v11 | (v11[2] << 16);
          goto LABEL_17;
        case 4:
          int v20 = *(_DWORD *)v11;
LABEL_17:
          int v22 = (v20 | (v18 << (8 * v16))) + 3;
          unsigned int v17 = v20 + 3;
          if (v16 < 4) {
            unsigned int v17 = v22;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v43 = a3;
    uint64_t v23 = ~v9;
    if (v17 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v11, *((void *)v11 + 1), v11[16]);
    }
    else if (v17 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v11, *((void *)v11 + 1), *((void *)v11 + 2), *((void *)v11 + 3), *((_WORD *)v11 + 16), v11[34]);
      unint64_t v24 = (unint64_t)(v11 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v24, *(void *)(v24 + 8), *(void *)(v24 + 16), *(void *)(v24 + 24), *(_WORD *)(v24 + 32), *(unsigned char *)(v24 + 34));
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v9 + v24 + 35) & v23, v13);
      goto LABEL_24;
    }
    swift_release();
LABEL_24:
    unsigned int v25 = v12[v16];
    unsigned int v26 = v25 - 3;
    if (v25 >= 3)
    {
      if (v16 <= 3) {
        uint64_t v27 = v16;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v12;
          goto LABEL_33;
        case 2:
          int v28 = *(unsigned __int16 *)v12;
          goto LABEL_33;
        case 3:
          int v28 = *(unsigned __int16 *)v12 | (v12[2] << 16);
          goto LABEL_33;
        case 4:
          int v28 = *(_DWORD *)v12;
LABEL_33:
          int v29 = (v28 | (v26 << (8 * v16))) + 3;
          unsigned int v25 = v28 + 3;
          if (v16 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v25 == 2)
    {
      long long v39 = *(_OWORD *)v12;
      long long v40 = *((_OWORD *)v12 + 2);
      *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
      *((_OWORD *)v11 + 2) = v40;
      *(_OWORD *)uint64_t v11 = v39;
      char v38 = 2;
    }
    else
    {
      if (v25 != 1)
      {
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        v11[v16] = 0;
        goto LABEL_41;
      }
      long long v30 = *(_OWORD *)v12;
      long long v31 = *((_OWORD *)v12 + 1);
      *(_DWORD *)(v11 + 31) = *(_DWORD *)(v12 + 31);
      *(_OWORD *)uint64_t v11 = v30;
      *((_OWORD *)v11 + 1) = v31;
      unint64_t v32 = (unint64_t)(v11 + 42) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = (unint64_t)(v12 + 42) & 0xFFFFFFFFFFFFFFF8;
      long long v34 = *(_OWORD *)v33;
      long long v35 = *(_OWORD *)(v33 + 16);
      *(_DWORD *)(v32 + 31) = *(_DWORD *)(v33 + 31);
      *(_OWORD *)unint64_t v32 = v34;
      *(_OWORD *)(v32 + 16) = v35;
      uint64_t v36 = (v9 + 35 + v32) & v23;
      uint64_t v37 = (v9 + 35 + v33) & v23;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v36, v37, v13);
      *(unsigned char *)(v14 + v36) = *(unsigned char *)(v14 + v37);
      char v38 = 1;
    }
    v11[v16] = v38;
LABEL_41:
    a3 = v43;
    goto LABEL_42;
  }
  uint64_t v21 = ((v9 + 75) & ~v9) + *(void *)(v7 + 64);
  if ((unint64_t)(v21 + 1) > 0x30) {
    uint64_t v16 = v21 + 1;
  }
  else {
    uint64_t v16 = 48;
  }
LABEL_42:
  uint64_t v41 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 40))((unint64_t)&v11[v16 + 1 + *(unsigned __int8 *)(v41 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), (unint64_t)&v12[v16 + 1 + *(unsigned __int8 *)(v41 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return a1;
}

void type metadata accessor for _GraphValue<ToolbarDefaultItemKind?>()
{
  if (!lazy cache variable for type metadata for _GraphValue<ToolbarDefaultItemKind?>)
  {
    type metadata accessor for _GraphValue<ToolbarRemovingModifier>(255, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ToolbarDefaultItemKind?>);
    }
  }
}

double static ToolbarRemovingModifier._makeView(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  int v11 = *((_DWORD *)a2 + 20);
  LODWORD(v20) = *a1;
  type metadata accessor for _GraphValue<ToolbarRemovingModifier>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarRemovingModifier>, (uint64_t)&unk_1ED441148, MEMORY[0x1E4F3F590]);
  type metadata accessor for _GraphValue<ToolbarRemovingModifier>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[8];
  uint64_t v19 = a2[7];
  uint64_t v15 = a2[9];
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<ToolbarDefaultItemKind?>();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v16 = swift_release_n();
  uint64_t v20 = v6;
  int v21 = v7;
  uint64_t v22 = v8;
  uint64_t v23 = v12;
  uint64_t v24 = v13;
  uint64_t v25 = v10;
  uint64_t v26 = v9;
  uint64_t v27 = v19;
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  int v30 = v11;
  a3(&v31, v16, &v20);
  uint64_t v20 = v9;
  int v21 = v19;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = v9;
  int v21 = v19;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  double result = v32;
  a4[1] = v32;
  return result;
}

void type metadata accessor for _GraphValue<ToolbarRemovingModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t closure #3 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v16 = a5;
  uint64_t v17 = a4;
  uint64_t v6 = type metadata accessor for CollectionViewListRoot();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  v13[2] = v6;
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

uint64_t assignWithCopy for NavigationLinkSelectionIdentifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) != 1)
  {
    if (v4 != 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 8);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t type metadata completion function for LegacyBaseModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1
      + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration;
  swift_beginAccess();
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v11, (uint64_t)v10, type metadata accessor for DatePickerStyleConfiguration);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1((uint64_t)v10, type metadata accessor for DatePickerStyleConfiguration);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TabView<A, B>.TransformEnvironment()
{
  swift_getWitnessTable();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationTransitionKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of _NavigationTransitionOutputs?((uint64_t)&static NavigationTransitionKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance AlwaysOnInvalidationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of TimelineInvalidationAction((uint64_t)&static AlwaysOnInvalidationKey.defaultValue, a1);
}

void protocol witness for Collection.endIndex.getter in conformance NavigationPath.CodableCollectionProxy(uint64_t *a1@<X8>)
{
  unint64_t v3 = *v1;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v4;
}

void *assignWithCopy for ItemSheetPresentationModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v31 = a3;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  uint64_t v13 = (void *)((v11 + 8 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (v16)
    {
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
LABEL_6:
      if (v17) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v18 + 1;
      }
      memcpy(v12, v13, v19);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  else
  {
    if (v16)
    {
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
  }
LABEL_12:
  uint64_t v20 = *(void *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v20;
  }
  int v21 = (void *)(((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (unint64_t *)(((unint64_t)a2 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *v22;
  if (*v21 < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      unint64_t v25 = v22[1];
      *int v21 = v23;
      v21[1] = v25;
      swift_retain();
      goto LABEL_21;
    }
LABEL_20:
    *(_OWORD *)int v21 = *(_OWORD *)v22;
    goto LABEL_21;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_20;
  }
  unint64_t v24 = v22[1];
  *int v21 = v23;
  v21[1] = v24;
  swift_retain();
  swift_release();
LABEL_21:
  unint64_t v26 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)(v27 + 8);
  *(void *)unint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = v28;
  swift_retain();
  swift_release();
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  *(unsigned char *)(v26 + 17) = *(unsigned char *)(v27 + 17);
  uint64_t v29 = *(void *)(*(void *)(v31 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))((*(unsigned __int8 *)(v29 + 80) + 18 + v26) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (*(unsigned __int8 *)(v29 + 80) + 18 + v27) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

uint64_t type metadata completion function for Menu()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for UpdateViewDestinationRequestProcessor()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t closure #6 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v10 = type metadata accessor for NavigationStackReader();
  uint64_t v11 = a1 + *(int *)(v10 + 68);
  void v15[2] = v10;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v16 = type metadata accessor for NavigationStackReader.TransformBox();
  uint64_t v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v11, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v15, v16, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  return v17;
}

uint64_t assignWithCopy for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  int v6 = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v6;
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = a3[11];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  return a1;
}

void type metadata completion function for SearchField()
{
  type metadata accessor for StateOrBinding<SearchFieldState>(319);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t type metadata completion function for UpdateViewDestinationViewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for NavigationSplitParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _NavigationSplitReader.CustomParameters.value.getter(unint64_t a1, int a2)
{
  unsigned int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  uint64_t v5 = *(void *)AGGraphGetValue();
  *(void *)&long long v11 = __PAIR64__(v4, v3);
  DWORD2(v11) = a2;
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for UISplitViewControllerProxy?, (uint64_t)&type metadata for UISplitViewControllerProxy, MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters();
  swift_bridgeObjectRetain();
  Rule.withObservation<A>(do:)();
  if (v15)
  {
    swift_getKeyPath();
    if (*(void *)(v15 + 16))
    {
      uint64_t v6 = swift_retain();
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      if (v8)
      {
        outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v7, (uint64_t)&v11);
      }
      else
      {
        long long v11 = 0u;
        long long v12 = 0u;
      }
      swift_release();
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    type metadata accessor for UISplitViewControllerSplitBehavior(0);
    int v9 = swift_dynamicCast();
    if (!v9) {
      uint64_t v13 = 0;
    }
    char v14 = v9 ^ 1;
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v5;
}

uint64_t type metadata completion function for InternalNavigationLinkModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for ListCollectionViewCellBase()
{
  type metadata accessor for UIListContentConfiguration?(319);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t type metadata completion function for ContextMenuPreviewResponder()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance RemoteSheetContainerViewGraphFeature()
{
  _ViewOutputs.subscript.getter();
  uint64_t result = AGCreateWeakAttribute();
  *unint64_t v0 = result;
  return result;
}

uint64_t implicit closure #2 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t assignWithCopy for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v7 + v11 + a1) & ~v11;
  uint64_t v13 = (v7 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v12, v13, v8);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  uint64_t v20 = (void *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v21 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int *)(v23 + 84);
  uint64_t v25 = *(_DWORD *)(v23 + 80);
  uint64_t v26 = v25 + 8;
  unint64_t v27 = *(_DWORD *)(v23 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (void *)(((unint64_t)v20 + v25 + 8) & v27);
  uint64_t v29 = (void *)(((unint64_t)v21 + v25 + 8) & v27);
  size_t v30 = ((v25 + 16) & ~v25) + *(void *)(v23 + 64);
  uint64_t v31 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v50 = ~v25;
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v49 = ((v25 + 16) & ~v25) + *(void *)(v23 + 64);
    long long v35 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48);
    uint64_t v48 = ((unint64_t)v20 + v25 + 8) & v27;
    uint64_t v36 = ((unint64_t)v21 + v25 + 8) & v27;
    uint64_t v37 = ~v25;
    int v47 = v35(((unint64_t)v31 + v26) & ~v25, v24, v22);
    double v32 = (void *)((v36 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v38 = ((unint64_t)v32 + v26) & v37;
    uint64_t v29 = (void *)v36;
    uint64_t v28 = (void *)v48;
    int v34 = v35(v38, v24, v22);
    size_t v30 = v49;
    if (!v47)
    {
LABEL_5:
      if (!v34)
      {
        *uint64_t v28 = *v29;
        swift_retain();
        swift_release();
        void *v31 = *v32;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 24))(((unint64_t)v31 + v26) & v50, ((unint64_t)v32 + v26) & v50, v22);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v23 + 8))(((unint64_t)v31 + v26) & v50, v22);
      goto LABEL_9;
    }
  }
  else
  {
    double v32 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v33 = *v32;
    if (*v32 >= 0xFFFFFFFFuLL) {
      LODWORD(v33) = -1;
    }
    int v34 = v33 + 1;
    if (*v31 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v34)
  {
    *uint64_t v28 = *v29;
    void *v31 = *v32;
    long long v39 = *(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v39(((unint64_t)v31 + v26) & v50, ((unint64_t)v32 + v26) & v50, v22);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v28, v29, v30);
LABEL_12:
  unint64_t v40 = ((unint64_t)v28 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v41 = ((unint64_t)v29 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v40 = *(unsigned char *)v41;
  uint64_t v42 = *(void *)(v41 + 8);
  *(unsigned char *)(v40 + 16) = *(unsigned char *)(v41 + 16);
  *(void *)(v40 + 8) = v42;
  uint64_t v43 = *(void *)(v41 + 24);
  *(unsigned char *)(v40 + 32) = *(unsigned char *)(v41 + 32);
  *(void *)(v40 + 24) = v43;
  uint64_t v44 = *(void *)(v41 + 40);
  *(unsigned char *)(v40 + 48) = *(unsigned char *)(v41 + 48);
  *(void *)(v40 + 40) = v44;
  uint64_t v45 = *(void *)(v41 + 56);
  *(unsigned char *)(v40 + 64) = *(unsigned char *)(v41 + 64);
  *(void *)(v40 + 56) = v45;
  return a1;
}

unsigned __int8 *assignWithCopy for SelectionManagerBox(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= v7) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_20;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_20;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_20;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_20:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2) {
    goto LABEL_25;
  }
  if (v11 != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
LABEL_25:
  }
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
LABEL_27:
  unsigned int v16 = a2[v10];
  unsigned int v17 = v16 - 3;
  if (v16 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v18 = v10;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_36;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_36;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_36;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_36:
        int v20 = (v19 | (v17 << (8 * v10))) + 3;
        unsigned int v16 = v19 + 3;
        if (v10 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 == 2)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v21 = 2;
LABEL_46:
    a1[v10] = v21;
    return a1;
  }
  if (v16 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    char v21 = 1;
    goto LABEL_46;
  }
  *(void *)a1 = *(void *)a2;
  a1[v10] = 0;
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t assignWithCopy for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v7, v8);
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 16);
  *(void *)(v5 + 8) = v7;
  *(unsigned char *)(v5 + 16) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 17 + v5) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 17 + v6) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t specialized LazyStack<>.log(_:)(_OWORD *a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v10._countAndFlagsBits = 0xD000000000000016;
    v10._object = (void *)0x800000018832F0A0;
    String.append(_:)(v10);
    long long v11 = a1[3];
    v30[2] = a1[2];
    void v30[3] = v11;
    long long v12 = a1[7];
    v30[6] = a1[6];
    long long v31 = v12;
    long long v13 = a1[5];
    v30[4] = a1[4];
    v30[5] = v13;
    long long v14 = a1[1];
    v30[0] = *a1;
    v30[1] = v14;
    uint64_t v15 = v31;
    if (*(void *)(v31 + 16))
    {
      uint64_t v16 = *((void *)&v31 + 1);
      outlined retain of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v30);
      EstimationCache.average.getter(v15, v16);
      outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v30);
    }
    v17._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.append(_:)(v18);
    uint64_t v20 = v28;
    unint64_t v19 = v29;
    swift_bridgeObjectRetain();
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v26 = v20;
      uint64_t v24 = v23;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v28 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, a2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v19, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v21, v22, "%s: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v25, -1, -1);
      MEMORY[0x18C119C60](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  int v16 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v13;
  int v22 = v14;
  uint64_t v23 = v15;
  uint64_t v24 = v17;
  uint64_t v25 = v18;
  long long v26 = v20;
  int v27 = v16;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v28, &v21, a4, a5, a6, a8);
}

unsigned char *protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationSplitVisibility.ToTwoColumns(unsigned char *result, __int16 *a2)
{
  __int16 v2 = *a2;
  if ((*a2 & 0xC000) == 0x4000)
  {
    *uint64_t result = v2;
    result[1] = HIBYTE(v2) & 1;
  }
  else
  {
    uint64_t result = (unsigned char *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance CustomButtonMenuStyleWriter<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t type metadata completion function for OscillationDetector()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ButtonStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t assignWithTake for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = a2 + 278;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  char v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v11 = (_OWORD *)(a1 + 64);
  long long v12 = (_OWORD *)(a2 + 64);
  if (*(void *)(a1 + 184) >> 1 == 4294967294) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    long long v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v13;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    long long v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    long long v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    long long v16 = *(_OWORD *)(a2 + 80);
    _OWORD *v11 = *v12;
    *(_OWORD *)(a1 + 80) = v16;
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_16;
  }
  int v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 != 255)
  {
    int v19 = *(unsigned __int8 *)(a2 + 72);
    if (v19 != 255)
    {
      long long v20 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = *(void *)v12;
      *(unsigned char *)(a1 + 72) = v19;
      outlined consume of GraphicsImage.Contents(v20, v18);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(void *)long long v11 = *(void *)v12;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  long long v21 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v21;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  unint64_t v22 = *(void *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v22 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v23 = *(void *)(a2 + 184);
    if (v23 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)(a2 + 192);
      uint64_t v26 = *(void *)(a1 + 168);
      uint64_t v27 = *(void *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 184) = v23;
      *(void *)(a1 + 192) = v25;
      outlined consume of AccessibilityImageLabel(v26, v27, v22);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  long long v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_15:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_unknownObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v28 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
LABEL_16:
  if (!*(void *)(a1 + 256))
  {
LABEL_21:
    long long v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  uint64_t v29 = *(void *)(a2 + 256);
  if (!v29)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  size_t v30 = *(void **)(a1 + 264);
  unint64_t v31 = *(void *)(a2 + 264);
  if ((unint64_t)v30 >= 2)
  {
    if (v31 >= 2)
    {
      *(void *)(a1 + 264) = v31;
    }
    else
    {

      *(void *)(a1 + 264) = *(void *)(a2 + 264);
    }
  }
  else
  {
    *(void *)(a1 + 264) = v31;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(unsigned char *)(a1 + 278) = *(unsigned char *)v6;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_release();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
LABEL_26:
  uint64_t v33 = (_OWORD *)(a1 + 296);
  unint64_t v34 = *(void *)(a1 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    long long v36 = *(_OWORD *)(v6 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v6 + 82);
    *(_OWORD *)(a1 + 376) = v36;
    *(void *)(a1 + 392) = *(void *)(v6 + 114);
    long long v37 = *(_OWORD *)(v6 + 34);
    *uint64_t v33 = *(_OWORD *)(v6 + 18);
    *(_OWORD *)(a1 + 312) = v37;
    long long v38 = *(_OWORD *)(v6 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v6 + 50);
    *(_OWORD *)(a1 + 344) = v38;
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(a2 + 328);
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  long long v39 = *(void **)(a1 + 296);
  uint64_t v40 = *(void *)(a1 + 304);
  uint64_t v41 = *(void *)(a1 + 312);
  uint64_t v42 = *(void *)(a1 + 320);
  uint64_t v43 = *(void *)(a1 + 336);
  uint64_t v44 = *(void *)(a1 + 344);
  uint64_t v45 = *(void *)(a1 + 352);
  long long v46 = *(_OWORD *)(a1 + 360);
  long long v47 = *(_OWORD *)(a1 + 376);
  uint64_t v48 = *(void *)(a1 + 392);
  long long v49 = *(_OWORD *)(v6 + 34);
  *uint64_t v33 = *(_OWORD *)(v6 + 18);
  *(_OWORD *)(a1 + 312) = v49;
  *(void *)(a1 + 328) = v35;
  long long v50 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v50;
  long long v51 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v51;
  outlined consume of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v34, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, SBYTE8(v47), v48);
LABEL_31:
  uint64_t v52 = *(void *)(a1 + 408);
  if (v52 == 1)
  {
LABEL_34:
    long long v54 = *(_OWORD *)(v6 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v6 + 154);
    *(_OWORD *)(a1 + 448) = v54;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v6 + 186);
    long long v55 = *(_OWORD *)(v6 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 122);
    *(_OWORD *)(a1 + 416) = v55;
    goto LABEL_57;
  }
  uint64_t v53 = *(void *)(a2 + 408);
  if (v53 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(v6 + 122);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(v6 + 123);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(v6 + 124);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(v6 + 125);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v52)
  {
    if (v53)
    {
      uint64_t v56 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v53;
      *(void *)(a1 + 416) = v56;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v53)
  {
    uint64_t v57 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v53;
    *(void *)(a1 + 416) = v57;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  uint64_t v58 = *(void *)(a2 + 424);
  if (*(void *)(a1 + 424))
  {
    if (v58)
    {
      uint64_t v59 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v58;
      *(void *)(a1 + 432) = v59;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v58)
  {
    uint64_t v60 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = v58;
    *(void *)(a1 + 432) = v60;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  uint64_t v61 = *(void *)(a2 + 440);
  if (!*(void *)(a1 + 440))
  {
    if (v61)
    {
      uint64_t v63 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = v61;
      *(void *)(a1 + 448) = v63;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_55;
  }
  uint64_t v62 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v61;
  *(void *)(a1 + 448) = v62;
  swift_release();
LABEL_56:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_57:
  uint64_t v64 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v65 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v65)
    {
      uint64_t v66 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v65;
      *(void *)(a1 + 512) = v66;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v65)
  {
    uint64_t v67 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v65;
    *(void *)(a1 + 512) = v67;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(void *)(a1 + 528))
  {
    uint64_t v68 = *(void *)(a2 + 528);
    if (v68)
    {
      *(void *)(a1 + 528) = v68;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
LABEL_69:
  if (*(void *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    goto LABEL_73;
  }
  uint64_t v69 = *(void *)(a2 + 552);
  if (v69 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(void *)(a1 + 552) = v69;
  swift_release();
  uint64_t v93 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v93)
    {
      uint64_t v94 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v93;
      *(void *)(a1 + 568) = v94;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v93)
  {
    uint64_t v110 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v93;
    *(void *)(a1 + 568) = v110;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  uint64_t v70 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  uint64_t v71 = a3[28];
  unint64_t v72 = (unsigned char *)(a1 + v71);
  uint64_t v73 = (unsigned char *)(a2 + v71);
  uint64_t v74 = type metadata accessor for CommandOperation();
  uint64_t v75 = *(void *)(v74 - 8);
  uint64_t v76 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v75 + 48);
  int v77 = v76(v72, 1, v74);
  int v78 = v76(v73, 1, v74);
  if (!v77)
  {
    if (!v78)
    {
      *unint64_t v72 = *v73;
      uint64_t v95 = *(int *)(v74 + 20);
      uint64_t v96 = &v72[v95];
      unsigned __int8 v97 = &v73[v95];
      LOBYTE(v95) = v73[v95 + 16];
      uint64_t v98 = *(void *)v96;
      uint64_t v99 = *((void *)v96 + 1);
      char v100 = v96[16];
      *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
      v96[16] = v95;
      outlined consume of Text.Storage(v98, v99, v100);
      *((void *)v96 + 3) = *((void *)v97 + 3);
      swift_bridgeObjectRelease();
      uint64_t v101 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v102 = &v96[v101];
      uint64_t v103 = &v97[v101];
      uint64_t v104 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v104 - 8) + 40))(v102, v103, v104);
      uint64_t v105 = *(int *)(v74 + 24);
      uint64_t v106 = &v72[v105];
      uint64_t v107 = (uint64_t *)&v73[v105];
      uint64_t v108 = *v107;
      if (*v106)
      {
        if (v108)
        {
          uint64_t v109 = v107[1];
          *uint64_t v106 = v108;
          v106[1] = v109;
          swift_release();
          goto LABEL_90;
        }
        swift_release();
      }
      else if (v108)
      {
        uint64_t v114 = v107[1];
        *uint64_t v106 = v108;
        v106[1] = v114;
        goto LABEL_90;
      }
      *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
      goto LABEL_90;
    }
    outlined destroy of CommandOperation((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_79;
  }
  if (v78)
  {
LABEL_79:
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v72, v73, *(void *)(*(void *)(v92 - 8) + 64));
    goto LABEL_90;
  }
  *unint64_t v72 = *v73;
  uint64_t v79 = *(int *)(v74 + 20);
  uint64_t v80 = &v72[v79];
  uint64_t v81 = &v73[v79];
  long long v82 = *(_OWORD *)&v73[v79 + 16];
  *uint64_t v80 = *(_OWORD *)&v73[v79];
  v80[1] = v82;
  uint64_t v83 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v84 = (char *)v80 + v83;
  os_log_t v85 = &v81[v83];
  uint64_t v86 = type metadata accessor for UUID();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v86 - 8) + 32))(v84, v85, v86);
  uint64_t v87 = *(int *)(v74 + 24);
  uint64_t v88 = &v72[v87];
  char v89 = (uint64_t *)&v73[v87];
  uint64_t v90 = *v89;
  if (*v89)
  {
    uint64_t v91 = v89[1];
    *uint64_t v88 = v90;
    v88[1] = v91;
  }
  else
  {
    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
LABEL_90:
  uint64_t v111 = a3[30];
  *(unsigned char *)(a1 + a3[29]) = *(unsigned char *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v111) = *(unsigned char *)(a2 + v111);
  uint64_t v112 = a3[32];
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v112) = *(unsigned char *)(a2 + v112);
  *(void *)(a1 + a3[33]) = *(void *)(a2 + a3[33]);
  swift_release();
  return a1;
}

uint64_t type metadata completion function for _RowVisitationContext()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v5;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        uint64_t v7 = *(void *)(result - 8) + 64;
        uint64_t v8 = MEMORY[0x1E4FBAD80] + 64;
        swift_getAssociatedTypeWitness();
        uint64_t result = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          uint64_t v9 = *(void *)(result - 8) + 64;
          uint64_t v10 = &unk_188359448;
          long long v11 = &unk_188359460;
          long long v12 = &unk_188359460;
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

void type metadata completion function for SearchFieldConfiguration()
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(319, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for ToolbarSearchFieldStyle.Implementation()
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t UIHostingController.rootView.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  specialized UIHostingController.rootView.setter(a1);
  unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void specialized UIHostingController.rootView.setter(uint64_t a1)
{
  id v3 = *(id *)(v1 + direct field offset for UIHostingController.host);
  specialized _UIHostingView.rootView.setter(a1);
}

uint64_t outlined init with copy of ToolbarStorage.Item(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for ToolbarStorage.Item(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = (_OWORD *)(a1 + 48);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  int v9 = *(unsigned __int8 *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    long long v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v10;
    (**(void (***)(uint64_t, _OWORD *))(v10 - 8))(a1 + 48, v8);
    *(unsigned char *)(a1 + 88) = 1;
  }
  else
  {
    long long v11 = v8[1];
    _OWORD *v7 = *v8;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v8 + 25);
  }
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 104, a2 + 104);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  long long v13 = *(void **)(a2 + 184);
  uint64_t v14 = *(int *)(a3 + 48);
  long long v15 = (void **)(a1 + v14);
  uint64_t v118 = a1;
  uint64_t v119 = a2;
  long long v16 = (void **)(a2 + v14);
  *(void *)(a1 + 184) = v13;
  uint64_t v17 = type metadata accessor for PlatformItemList.Item();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = a3;
  long long v20 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v18 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  id v21 = v13;
  if (v20(v16, 1, v17))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    uint64_t v23 = v19;
    uint64_t v24 = v118;
    uint64_t v25 = v119;
    goto LABEL_50;
  }
  uint64_t v115 = v18;
  uint64_t v116 = v19;
  uint64_t v117 = (int *)v17;
  uint64_t v26 = *v16;
  uint64_t v27 = v16[1];
  *long long v15 = *v16;
  v15[1] = v27;
  uint64_t v28 = v16[3];
  void v15[2] = v16[2];
  void v15[3] = v28;
  *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
  uint64_t v29 = v16[6];
  uint64_t v15[5] = v16[5];
  v15[6] = v29;
  *((unsigned char *)v15 + 56) = *((unsigned char *)v16 + 56);
  size_t v30 = v15 + 8;
  unint64_t v31 = v16 + 8;
  unint64_t v32 = (unint64_t)v16[23];
  id v33 = v26;
  id v34 = v27;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v32 >> 1 != 4294967294)
  {
    int v44 = *((unsigned __int8 *)v16 + 72);
    if (v44 == 255)
    {
      void *v30 = *v31;
      *((unsigned char *)v15 + 72) = *((unsigned char *)v16 + 72);
    }
    else
    {
      uint64_t v45 = v16[8];
      outlined copy of GraphicsImage.Contents(v45, *((unsigned char *)v16 + 72));
      v15[8] = v45;
      *((unsigned char *)v15 + 72) = v44;
      unint64_t v32 = (unint64_t)v16[23];
    }
    v15[10] = v16[10];
    *(_OWORD *)(v15 + 11) = *(_OWORD *)(v16 + 11);
    *((unsigned char *)v15 + 104) = *((unsigned char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 108) = *(_OWORD *)((char *)v16 + 108);
    *((unsigned char *)v15 + 124) = *((unsigned char *)v16 + 124);
    long long v46 = *((_OWORD *)v16 + 9);
    *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
    *((_OWORD *)v15 + 9) = v46;
    *((_WORD *)v15 + 80) = *((_WORD *)v16 + 80);
    *((unsigned char *)v15 + 162) = *((unsigned char *)v16 + 162);
    *((unsigned char *)v15 + 163) = *((unsigned char *)v16 + 163);
    if (v32 >> 1 == 0xFFFFFFFF)
    {
      long long v47 = *(_OWORD *)(v16 + 23);
      *(_OWORD *)(v15 + 21) = *(_OWORD *)(v16 + 21);
      *(_OWORD *)(v15 + 23) = v47;
    }
    else
    {
      uint64_t v48 = (uint64_t)v16[21];
      uint64_t v49 = (uint64_t)v16[22];
      long long v50 = v16[24];
      outlined copy of AccessibilityImageLabel(v48, v49, v32);
      v15[21] = (void *)v48;
      v15[22] = (void *)v49;
      v15[23] = (void *)v32;
      unsigned char v15[24] = v50;
    }
    long long v51 = v16[26];
    v15[25] = v16[25];
    v15[26] = v51;
    *((_WORD *)v15 + 108) = *((_WORD *)v16 + 108);
    *((_DWORD *)v15 + 55) = *((_DWORD *)v16 + 55);
    *((unsigned char *)v15 + 224) = *((unsigned char *)v16 + 224);
    uint64_t v52 = v16[29];
    v15[29] = v52;
    *((_WORD *)v15 + 120) = *((_WORD *)v16 + 120);
    *((unsigned char *)v15 + 242) = *((unsigned char *)v16 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v53 = v52;
    uint64_t v40 = v16[32];
    if (v40) {
      goto LABEL_8;
    }
LABEL_18:
    long long v54 = *(_OWORD *)(v16 + 33);
    *(_OWORD *)(v15 + 31) = *(_OWORD *)(v16 + 31);
    *(_OWORD *)(v15 + 33) = v54;
    *(_OWORD *)(v15 + 35) = *(_OWORD *)(v16 + 35);
    goto LABEL_19;
  }
  long long v35 = *((_OWORD *)v16 + 13);
  *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
  *((_OWORD *)v15 + 13) = v35;
  *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
  *(_DWORD *)((char *)v15 + 239) = *(_DWORD *)((char *)v16 + 239);
  long long v36 = *((_OWORD *)v16 + 9);
  *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
  *((_OWORD *)v15 + 9) = v36;
  long long v37 = *((_OWORD *)v16 + 11);
  *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
  *((_OWORD *)v15 + 11) = v37;
  long long v38 = *((_OWORD *)v16 + 5);
  *(_OWORD *)size_t v30 = *(_OWORD *)v31;
  *((_OWORD *)v15 + 5) = v38;
  long long v39 = *((_OWORD *)v16 + 7);
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  *((_OWORD *)v15 + 7) = v39;
  uint64_t v40 = v16[32];
  if (!v40) {
    goto LABEL_18;
  }
LABEL_8:
  v15[31] = v16[31];
  v15[32] = v40;
  uint64_t v41 = v16[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v41 >= 2) {
    id v42 = v41;
  }
  v15[33] = v41;
  *((_DWORD *)v15 + 68) = *((_DWORD *)v16 + 68);
  *((unsigned char *)v15 + 276) = *((unsigned char *)v16 + 276);
  *(_WORD *)((char *)v15 + 277) = *(_WORD *)((char *)v16 + 277);
  uint64_t v43 = v16[36];
  v15[35] = v16[35];
  v15[36] = v43;
  swift_retain();
  swift_retain();
LABEL_19:
  unint64_t v55 = (unint64_t)v16[41];
  if (v55 >> 2 == 0xFFFFFFFF)
  {
    long long v56 = *(_OWORD *)(v16 + 47);
    *(_OWORD *)(v15 + 45) = *(_OWORD *)(v16 + 45);
    *(_OWORD *)(v15 + 47) = v56;
    v15[49] = v16[49];
    long long v57 = *(_OWORD *)(v16 + 39);
    *(_OWORD *)(v15 + 37) = *(_OWORD *)(v16 + 37);
    *(_OWORD *)(v15 + 39) = v57;
    long long v58 = *(_OWORD *)(v16 + 43);
    *(_OWORD *)(v15 + 41) = *(_OWORD *)(v16 + 41);
    *(_OWORD *)(v15 + 43) = v58;
  }
  else
  {
    uint64_t v59 = v16[37];
    uint64_t v60 = (uint64_t)v16[38];
    uint64_t v61 = (uint64_t)v16[39];
    uint64_t v62 = (uint64_t)v16[40];
    uint64_t v63 = (uint64_t)v16[42];
    uint64_t v64 = (uint64_t)v16[43];
    uint64_t v107 = (uint64_t)v16[45];
    uint64_t v108 = (uint64_t)v16[46];
    uint64_t v109 = (uint64_t)v16[47];
    uint64_t v111 = v16[48];
    __dsta = v16[49];
    uint64_t v65 = v16[44];
    outlined copy of PlatformItemList.Item.SystemItem(v59, v60, v61, v62, v55, v63, v64, (char)v65, v107, v108, v109, (char)v111, (uint64_t)__dsta);
    v15[37] = v59;
    v15[38] = (void *)v60;
    v15[39] = (void *)v61;
    v15[40] = (void *)v62;
    v15[41] = (void *)v55;
    v15[42] = (void *)v63;
    v15[43] = (void *)v64;
    v15[44] = v65;
    v15[45] = (void *)v107;
    v15[46] = (void *)v108;
    v15[47] = (void *)v109;
    v15[48] = v111;
    v15[49] = __dsta;
  }
  uint64_t v66 = v16[51];
  if (v66 != (void *)1)
  {
    *((_DWORD *)v15 + 100) = *((_DWORD *)v16 + 100);
    *((unsigned char *)v15 + 404) = *((unsigned char *)v16 + 404);
    if (v66)
    {
      uint64_t v69 = v16[52];
      v15[51] = v66;
      v15[52] = v69;
      swift_retain();
      uint64_t v70 = v16[53];
      if (v70) {
        goto LABEL_26;
      }
    }
    else
    {
      *(_OWORD *)(v15 + 51) = *(_OWORD *)(v16 + 51);
      uint64_t v70 = v16[53];
      if (v70)
      {
LABEL_26:
        uint64_t v71 = v16[54];
        v15[53] = v70;
        v15[54] = v71;
        swift_retain();
        unint64_t v72 = v16[55];
        if (v72)
        {
LABEL_27:
          uint64_t v73 = v16[56];
          v15[55] = v72;
          v15[56] = v73;
          swift_retain();
LABEL_31:
          v15[57] = v16[57];
          *((unsigned char *)v15 + 464) = *((unsigned char *)v16 + 464);
          goto LABEL_32;
        }
LABEL_30:
        *(_OWORD *)(v15 + 55) = *(_OWORD *)(v16 + 55);
        goto LABEL_31;
      }
    }
    *(_OWORD *)(v15 + 53) = *(_OWORD *)(v16 + 53);
    unint64_t v72 = v16[55];
    if (v72) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  long long v67 = *((_OWORD *)v16 + 28);
  *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
  *((_OWORD *)v15 + 28) = v67;
  *((unsigned char *)v15 + 464) = *((unsigned char *)v16 + 464);
  long long v68 = *((_OWORD *)v16 + 26);
  *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
  *((_OWORD *)v15 + 26) = v68;
LABEL_32:
  uint64_t v74 = v16[60];
  v15[59] = v16[59];
  v15[60] = v74;
  v15[61] = v16[61];
  *((unsigned char *)v15 + 496) = *((unsigned char *)v16 + 496);
  uint64_t v75 = v16[63];
  swift_bridgeObjectRetain();
  if (v75)
  {
    uint64_t v76 = v16[64];
    v15[63] = v75;
    unsigned char v15[64] = v76;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v15 + 63) = *(_OWORD *)(v16 + 63);
  }
  *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
  int v77 = v16[66];
  if (v77)
  {
    v15[66] = v77;
    v15[67] = v16[67];
    v15[68] = v16[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
    v15[68] = v16[68];
  }
  int v78 = v16[69];
  if (v78 == (void *)1)
  {
    *(_OWORD *)(v15 + 69) = *(_OWORD *)(v16 + 69);
    v15[71] = v16[71];
  }
  else
  {
    v15[69] = v78;
    uint64_t v79 = v16[70];
    swift_retain();
    if (v79)
    {
      uint64_t v80 = v16[71];
      v15[70] = v79;
      v15[71] = v80;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v15 + 35) = *((_OWORD *)v16 + 35);
    }
  }
  uint64_t v81 = v16[72];
  v15[72] = v81;
  v15[73] = v16[73];
  v15[74] = v16[74];
  v15[75] = v16[75];
  v15[76] = v16[76];
  v15[77] = v16[77];
  v15[78] = v16[78];
  *((_WORD *)v15 + 316) = *((_WORD *)v16 + 316);
  *((unsigned char *)v15 + 634) = *((unsigned char *)v16 + 634);
  uint64_t v82 = v117[28];
  __dst = (char *)v15 + v82;
  uint64_t v83 = (char *)v16 + v82;
  uint64_t v84 = type metadata accessor for CommandOperation();
  uint64_t v110 = *(void *)(v84 - 8);
  uint64_t v112 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v110 + 48);
  id v85 = v81;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v112(v83, 1, v84))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v83, *(void *)(*(void *)(v86 - 8) + 64));
    uint64_t v23 = v116;
    uint64_t v87 = v117;
    uint64_t v24 = v118;
    uint64_t v25 = v119;
    uint64_t v88 = v115;
  }
  else
  {
    unsigned char *__dst = *v83;
    uint64_t v89 = *(int *)(v84 + 20);
    uint64_t v90 = &__dst[v89];
    uint64_t v91 = &v83[v89];
    uint64_t v92 = *(void *)&v83[v89];
    uint64_t v93 = *(void *)&v83[v89 + 8];
    char v94 = v83[v89 + 16];
    outlined copy of Text.Storage(v92, *((void *)v91 + 1), v91[16]);
    *(void *)uint64_t v90 = v92;
    *((void *)v90 + 1) = v93;
    v90[16] = v94;
    *((void *)v90 + 3) = *((void *)v91 + 3);
    uint64_t v95 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v96 = &v90[v95];
    unsigned __int8 v97 = &v91[v95];
    uint64_t v98 = type metadata accessor for UUID();
    uint64_t v99 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v98 - 8) + 16);
    swift_bridgeObjectRetain();
    v99(v96, v97, v98);
    uint64_t v100 = *(int *)(v84 + 24);
    uint64_t v101 = &__dst[v100];
    uint64_t v102 = &v83[v100];
    if (*v102)
    {
      uint64_t v103 = v102[1];
      *uint64_t v101 = *v102;
      v101[1] = v103;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
    }
    uint64_t v23 = v116;
    uint64_t v87 = v117;
    uint64_t v88 = v115;
    uint64_t v24 = v118;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v110 + 56))(__dst, 0, 1, v84);
    uint64_t v25 = v119;
  }
  *((unsigned char *)v15 + v87[29]) = *((unsigned char *)v16 + v87[29]);
  *((unsigned char *)v15 + v87[30]) = *((unsigned char *)v16 + v87[30]);
  *((unsigned char *)v15 + v87[31]) = *((unsigned char *)v16 + v87[31]);
  *((unsigned char *)v15 + v87[32]) = *((unsigned char *)v16 + v87[32]);
  *(void **)((char *)v15 + v87[33]) = *(void **)((char *)v16 + v87[33]);
  uint64_t v104 = *(void (**)(void **, void, uint64_t, int *))(v88 + 56);
  swift_retain();
  v104(v15, 0, 1, v87);
LABEL_50:
  swift_weakCopyInit();
  uint64_t v105 = *(int *)(v23 + 60);
  *(unsigned char *)(v24 + *(int *)(v23 + 56)) = *(unsigned char *)(v25 + *(int *)(v23 + 56));
  *(unsigned char *)(v24 + v105) = *(unsigned char *)(v25 + v105);
  return v24;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_AH2IDVs5NeverOTg503_s7d18UI23UIKitBarButtonh30GroupC09didChangegF04fromyAA14fg20V0gF0VSg_tFAG2IDVAG0V52Vcfu_32d237e9c4ce9601f416b0dbfaac74f787AnLTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v17;
    uint64_t v4 = *(void *)(type metadata accessor for ToolbarStorage.Item(0) - 8);
    uint64_t v15 = *(void *)(v4 + 72);
    uint64_t v5 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + a1
                   + 24);
    do
    {
      uint64_t v6 = *(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v16 = *(v5 - 1);
      uint64_t v9 = *v5;
      uint64_t v8 = v5[1];
      uint64_t v10 = v5[2];
      unint64_t v11 = *(void *)(v17 + 16);
      unint64_t v12 = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v11 + 1, 1);
      }
      *(void *)(v17 + 16) = v11 + 1;
      long long v13 = (void *)(v17 + 48 * v11);
      void v13[4] = v6;
      v13[5] = v7;
      void v13[6] = v16;
      v13[7] = v9;
      char v13[8] = v8;
      v13[9] = v10;
      uint64_t v5 = (uint64_t *)((char *)v5 + v15);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void View.labelsHidden()()
{
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in PlatformFallbackToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance CommandsDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DragReorderableLayoutCore.state.getter()
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

void type metadata accessor for Binding<_DragReorderableView_DragState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  if (objc_msgSend(v4, sel_canBecomeFirstResponder)
    && (objc_msgSend(v4, sel_isFirstResponder) & 1) == 0
    && (objc_msgSend(v4, sel_isTracking) & 1) != 0)
  {
    objc_msgSend(v4, sel_becomeFirstResponder);
  }
}

id UpdateCoalescingCollectionView.canBecomeFirstResponder.getter()
{
  id result = objc_msgSend(v0, sel_isScrollEnabled);
  if (result)
  {
    v5.receiver = v0;
    v5.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
    id result = objc_msgSendSuper2(&v5, sel_canBecomeFirstResponder);
    if (result)
    {
      uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper];
      if (v2
        && (uint64_t v3 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties,
            swift_beginAccess(),
            int v4 = *(unsigned __int8 *)(v3 + 88),
            v4 != 2))
      {
        return (id)(v4 & 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t assignWithTake for TextFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v6;
      swift_release();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of TextFieldState.FormatActions(a1 + 16);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
LABEL_10:
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    goto LABEL_11;
  }
  if (!v8)
  {
    outlined destroy of TextFieldState.FormatActions(a1 + 48);
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
LABEL_11:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  return a1;
}

uint64_t specialized static DisplayLink.asyncThread(arg:)()
{
  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>(0, &lazy cache variable for type metadata for NSRunLoop.SchedulerOptions?, MEMORY[0x1E4F28088], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v21 - v1;
  uint64_t v22 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  uint64_t v3 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v7 = type metadata accessor for NSRunLoop.SchedulerTimeType();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Update.lock()();
  id v11 = objc_msgSend(self, sel_currentRunLoop);
  unint64_t v12 = (void *)static DisplayLink.asyncRunloop;
  static DisplayLink.asyncRunloop = (uint64_t)v11;

  static Update.broadcast()();
  if (static DisplayLink.asyncPending == 1)
  {
    long long v13 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v14 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      static DisplayLink.asyncPending = 0;
      uint64_t result = static Update.unlock()();
      if (!static DisplayLink.asyncRunloop) {
        break;
      }
      id v16 = (id)static DisplayLink.asyncRunloop;
      Date.init(timeIntervalSinceNow:)();
      uint64_t v17 = NSRunLoop.SchedulerTimeType.init(_:)();
      MEMORY[0x18C117070](v17, 0.1);
      uint64_t v18 = type metadata accessor for NSRunLoop.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v2, 1, 1, v18);
      NSRunLoop.schedule(after:tolerance:options:_:)();

      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v2);
      (*v13)(v5, v22);
      (*v14)(v10, v7);
      uint64_t result = static DisplayLink.asyncRunloop;
      if (!static DisplayLink.asyncRunloop) {
        goto LABEL_8;
      }
      objc_msgSend((id)static DisplayLink.asyncRunloop, sel_run);
      static Update.lock()();
      if ((static DisplayLink.asyncPending & 1) == 0) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
  else
  {
LABEL_6:
    uint64_t v19 = (void *)static DisplayLink.asyncRunloop;
    static DisplayLink.asyncRunloop = 0;

    long long v20 = (void *)static DisplayLink.asyncThread;
    static DisplayLink.asyncThread = 0;

    static Update.broadcast()();
    return static Update.unlock()();
  }
  return result;
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>(0, &lazy cache variable for type metadata for NSRunLoop.SchedulerOptions?, MEMORY[0x1E4F28088], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static UIViewControllerRepresentable._makeViewList(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewThatFits<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSNotificationName(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t type metadata completion function for FocusStateBindingResponder()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for _KeyboardShortcutPickerContent(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_27:
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v16 = *(void *)(((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((v16 + 1) >= 2) {
        return v16;
      }
      else {
        return 0;
      }
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *(unsigned __int8 *)(result + v8);
        if (!*(unsigned char *)(result + v8)) {
          goto LABEL_27;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)(result + v8);
        if (!*(_WORD *)(result + v8)) {
          goto LABEL_27;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v13 = *(_DWORD *)(result + v8);
        if (!v13) {
          goto LABEL_27;
        }
LABEL_22:
        int v14 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v14 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
          int v15 = *(unsigned __int8 *)result;
        }
        else {
          int v15 = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v15 | v14) + 1;
        break;
      default:
        goto LABEL_27;
    }
  }
  return result;
}

void *assignWithCopy for _TaskValueModifier.InnerModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain();
  swift_release();
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)a2 + v10 + 16) & ~v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 24))(((unint64_t)a1 + v10 + 16) & ~v10, v11, v7);
  uint64_t v12 = *(void *)(v9 + 40);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = ~v14;
  uint64_t v35 = *(void *)(a3 + 16);
  unint64_t v32 = *(void (**)(unint64_t, uint64_t))(v13 + 24);
  v32((v12 + v14 + (((unint64_t)a1 + v10 + 16) & ~v10)) & ~v14, (v12 + v14 + v11) & ~v14);
  uint64_t v17 = v13;
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = v18 + (v14 | 7) + ((v15 + ((v10 + 16) & ~v10)) & ~v14);
  long long v38 = a1;
  long long v20 = (void *)(((unint64_t)a1 + v19) & ~(v14 | 7));
  uint64_t v21 = (void *)(((unint64_t)a2 + v19) & ~(v14 | 7));
  uint64_t v22 = *(unsigned int *)(v13 + 84);
  uint64_t v23 = v14 + 8;
  size_t v24 = ((v14 + 8) & ~v14) + v18;
  uint64_t v33 = v17;
  uint64_t v34 = ~v14;
  if ((v22 & 0x80000000) != 0)
  {
    size_t v37 = ((v14 + 8) & ~v14) + v18;
    uint64_t v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v17 + 48);
    int v29 = v28(((unint64_t)v20 + v23) & v16, v22, v35);
    int v26 = v28(((unint64_t)v21 + v23) & v16, v22, v35);
    size_t v24 = v37;
    uint64_t v27 = v35;
    if (!v29)
    {
LABEL_5:
      if (!v26)
      {
        *long long v20 = *v21;
        swift_retain();
        swift_release();
        ((void (*)(unint64_t, unint64_t, uint64_t))v32)(((unint64_t)v20 + v23) & v34, ((unint64_t)v21 + v23) & v34, v27);
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v33 + 8))(((unint64_t)v20 + v23) & v34, v27);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v25 = *v21;
    if (*v21 >= 0xFFFFFFFFuLL) {
      LODWORD(v25) = -1;
    }
    int v26 = v25 + 1;
    uint64_t v27 = v35;
    if (*v20 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v26)
  {
    *long long v20 = *v21;
    size_t v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 16);
    swift_retain();
    v30(((unint64_t)v20 + v23) & v34, ((unint64_t)v21 + v23) & v34, v27);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v20, v21, v24);
LABEL_12:
  *(void *)(((unint64_t)v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return v38;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationTitleStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a2[3];
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  uint64_t v6 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v7 = *a2;
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  outlined copy of Text?(*a2, v6, v5, v3);
  outlined copy of Text?(v10, v9, v8, v2);
  char v11 = static Text.== infix(_:_:)();
  outlined consume of Text?(v7, v6, v5, v3);
  outlined consume of Text?(v10, v9, v8, v2);
  return v11 & 1;
}

uint64_t objectdestroy_50Tm()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 280);
  unint64_t v4 = *(void *)(v0 + 312);
  if ((~v1 & 0x7000000000000007) != 0
    || (v2 & 0xF000000000000007) != 0xF000000000000007
    || (v3 & 0xFFFFFFFFFFFFFFF8) != 4194296
    || (v4 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    long long v11 = *(_OWORD *)(v0 + 288);
    outlined consume of NavigationState.Base(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
      *(void *)(v0 + 168),
      *(void *)(v0 + 176),
      v1,
      *(void *)(v0 + 192),
      *(void *)(v0 + 200),
      *(void *)(v0 + 208),
      *(void *)(v0 + 216),
      *(void *)(v0 + 224),
      *(void *)(v0 + 232),
      *(void *)(v0 + 240),
      *(void *)(v0 + 248),
      *(void *)(v0 + 256),
      v2,
      *(void *)(v0 + 272),
      v3,
      v11,
      *((uint64_t *)&v11 + 1),
      *(void *)(v0 + 304),
      v4,
      *(void *)(v0 + 320));
  }
  swift_release();
  long long v13 = *(_OWORD *)(v0 + 704);
  long long v10 = *(_OWORD *)(v0 + 672);
  long long v12 = *(_OWORD *)(v0 + 688);
  long long v9 = *(_OWORD *)(v0 + 640);
  outlined consume of NavigationState.Base(*(void *)(v0 + 416), *(void *)(v0 + 424), *(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456), *(void *)(v0 + 464), *(void *)(v0 + 472), *(void *)(v0 + 480), *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), *(void *)(v0 + 512), *(void *)(v0 + 520), *(void *)(v0 + 528), *(void *)(v0 + 536), *(void *)(v0 + 544), *(void *)(v0 + 552), *(void *)(v0 + 560),
    *(void *)(v0 + 568),
    *(void *)(v0 + 576),
    *(void *)(v0 + 584),
    *(void *)(v0 + 592),
    *(void *)(v0 + 600),
    *(void *)(v0 + 608),
    *(void *)(v0 + 616),
    *(void *)(v0 + 624),
    *(void *)(v0 + 632),
    v9,
    *((uint64_t *)&v9 + 1),
    *(void *)(v0 + 656),
    *(void *)(v0 + 664),
    v10,
    *((uint64_t *)&v10 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((unint64_t *)&v13 + 1),
    *(void *)(v0 + 720));

  swift_release();

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for _DisabledPickerContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA36ScrollIndicatorFlashOnAppearModifier33_333E2209AFE841F0F3215E9AA4F7EA22LLVGAaBHPxAaBHD1__AgA0cK0HPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>)
  {
    type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(255);
    lazy protocol witness table accessor for type TableRowID and conformance TableRowID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>);
    }
  }
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance CommandsDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _JSONUnkeyedDecodingContainer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _JSONUnkeyedDecodingContainer.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t _JSONUnkeyedDecodingContainer.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9);
  int v13 = (char *)&v62 - v12;
  uint64_t v14 = v4[1];
  uint64_t v15 = v4[3];
  if (v15 >= *(void *)(v14 + 16))
  {
    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *unint64_t v32 = a1;
    uint64_t v33 = *v4;
    swift_beginAccess();
    uint64_t v34 = *(void *)(v33 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v36 = v4[3];
    uint64_t v78 = 0x207865646E49;
    unint64_t v79 = 0xE600000000000000;
    uint64_t v73 = v36;
    swift_bridgeObjectRetain();
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v78;
    unint64_t v39 = v79;
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v40 = swift_allocObject();
    *(void *)(inited + 32) = v40;
    *(void *)(v40 + 16) = v38;
    *(void *)(v40 + 24) = v39;
    *(void *)(v40 + 32) = v36;
    *(unsigned char *)(v40 + 40) = 0;
    uint64_t v78 = v34;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80], v30);
    return swift_willThrow();
  }
  uint64_t v68 = v5;
  uint64_t v64 = v11;
  uint64_t v65 = v10;
  uint64_t v71 = a1;
  long long v67 = v4;
  uint64_t v16 = *v4;
  *(void *)&long long v75 = 0x207865646E49;
  *((void *)&v75 + 1) = 0xE600000000000000;
  uint64_t v78 = v15;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v69 = *((void *)&v75 + 1);
  uint64_t v18 = v75;
  uint64_t v19 = (void *)(v16 + 136);
  swift_beginAccess();
  long long v20 = *(void **)(v16 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v16 + 136) = v20;
  uint64_t v66 = a4;
  uint64_t v70 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    long long v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    *uint64_t v19 = v20;
  }
  unint64_t v23 = v20[2];
  unint64_t v22 = v20[3];
  if (v23 >= v22 >> 1)
  {
    long long v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v20);
    *uint64_t v19 = v20;
  }
  uint64_t v24 = v71;
  uint64_t v76 = &unk_1ED468578;
  unint64_t v63 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  unint64_t v77 = v63;
  uint64_t v25 = swift_allocObject();
  *(void *)&long long v75 = v25;
  uint64_t v26 = v69;
  *(void *)(v25 + 16) = v70;
  *(void *)(v25 + 24) = v26;
  *(void *)(v25 + 32) = v15;
  *(unsigned char *)(v25 + 40) = 0;
  void v20[2] = v23 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v75, (uint64_t)&v20[5 * v23 + 4]);
  if (v15 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v15 >= *(void *)(v14 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v14 + 32 * v15 + 32, (uint64_t)&v75);
  uint64_t v28 = v68;
  __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)&v75, v24, a2, v72, (uint64_t)v13);
  if (v28)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    int v29 = v67;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v29);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  uint64_t v41 = *(void *)(a2 - 8);
  int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v13, 1, a2);
  uint64_t v43 = v67;
  if (v42 == 1)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v65);
    uint64_t v44 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v46 = v45;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    uint64_t v72 = (uint64_t)v46 + *(int *)(v47 + 48);
    uint64_t *v46 = v24;
    uint64_t v48 = *v43;
    swift_beginAccess();
    uint64_t v49 = *(void *)(v48 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v50 = swift_initStackObject();
    *(_OWORD *)(v50 + 16) = xmmword_18834BB80;
    uint64_t v51 = v43[3];
    uint64_t v73 = 0x207865646E49;
    unint64_t v74 = 0xE600000000000000;
    uint64_t v80 = v51;
    swift_bridgeObjectRetain();
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    uint64_t v53 = v73;
    unint64_t v54 = v74;
    unint64_t v55 = v63;
    *(void *)(v50 + 56) = &unk_1ED468578;
    *(void *)(v50 + 64) = v55;
    uint64_t v56 = swift_allocObject();
    *(void *)(v50 + 32) = v56;
    *(void *)(v56 + 16) = v53;
    *(void *)(v56 + 24) = v54;
    *(void *)(v56 + 32) = v51;
    *(unsigned char *)(v56 + 40) = 0;
    uint64_t v73 = v49;
    specialized Array.append<A>(contentsOf:)(v50);
    uint64_t v73 = 0;
    unint64_t v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v73 = 0x6465746365707845;
    unint64_t v74 = 0xE900000000000020;
    v57._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._object = (void *)0x80000001883308B0;
    v58._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v58);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v44 - 8) + 104))(v46, *MEMORY[0x1E4FBBA80], v44);
    swift_willThrow();
LABEL_15:
    int v29 = v43;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v29);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v66, v13, a2);
  uint64_t v59 = v43[3];
  BOOL v60 = __OFADD__(v59, 1);
  uint64_t v61 = v59 + 1;
  if (!v60)
  {
    v43[3] = v61;
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
  return result;
}

void type metadata completion function for SearchFieldConfigurationReader()
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(319, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t partial apply for closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:placement:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:placement:)(a1);
}

uint64_t closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:placement:)@<X0>(uint64_t a1@<X8>)
{
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  char v3 = v4[0];
  PreferenceValues.subscript.getter();
  outlined init with copy of PresentationOptionsPreference((uint64_t)v4, a1);
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4F3FD10]);
  PreferenceValues.subscript.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 137) = v3;
  return result;
}

uint64_t assignWithCopy for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(unsigned char *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  unint64_t v8 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)(v9 + 8);
  if (*(void *)(v8 + 8) < 0xFFFFFFFFuLL)
  {
    if (v10 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v8 = *(void *)v9;
      *(void *)(v8 + 8) = *(void *)(v9 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_19;
    }
LABEL_18:
    long long v11 = *(_OWORD *)v9;
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
    *(_OWORD *)unint64_t v8 = v11;
    goto LABEL_19;
  }
  if (v10 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_18;
  }
  *(void *)unint64_t v8 = *(void *)v9;
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
LABEL_19:
  *(unsigned char *)(v8 + 20) = *(unsigned char *)(v9 + 20);
  *(unsigned char *)(v8 + 21) = *(unsigned char *)(v9 + 21);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v8 + v14 + 22) & ~v14;
  uint64_t v16 = (v9 + v14 + 22) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 40) + 7;
  unint64_t v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_retain();
  swift_release();
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(unsigned char *)(v18 + 9) = *(unsigned char *)(v19 + 9);
  return a1;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.TransparentPresentation()
{
  return &type metadata for ContainerBackgroundKeys.TransparentPresentation;
}

void type metadata completion function for UIKitSearchBarCoordinator()
{
  type metadata accessor for SearchFieldConfiguration?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributedStringKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t assignWithCopy for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  return a1;
}

uint64_t outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t type metadata completion function for SceneStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SceneStorage(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((result + 23) & 0xFFFFFFFFFFFFFFF8) + v6 + 16) & ~v6);
    }
    else
    {
      unint64_t v16 = *(void *)(result + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  else
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 32) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in _IntroDocumentView<>.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _IntroDocumentView<>.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)(*(void *)(v1 + 96), *(void *)(v1 + 40), a1);
}

uint64_t closure #1 in _IntroDocumentView<>.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance CollectionViewGroupedListsEnabled()
{
  PropertyList.subscript.getter();
  if (v2 == 1 && (static InterfaceIdiomPredicate.evaluate(inputs:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature();
    char v0 = static UserDefaultKeyedFeature.isEnabled.getter() ^ 1;
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t implicit closure #1 in static FocusStateBindingModifier._makeView(modifier:inputs:body:)(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t v7 = type metadata accessor for FocusStateBindingModifier.ListTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_19, (uint64_t)v6, v7, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t type metadata accessor for FocusStateBindingModifier.ListTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityCustomPropertyModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>)
  {
    type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(255, (unint64_t *)&lazy cache variable for type metadata for ToggleStyleModifier<DefaultToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultToggleStyle and conformance DefaultToggleStyle, (uint64_t)&type metadata for DefaultToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedTabView()
{
  uint64_t result = type metadata accessor for TabViewStyleConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void storeEnumTagSinglePayload for LazyHGrid(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_42:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v19 = (unint64_t)&a1[v9 + 32] & ~v9;
            long long v20 = *(void (**)(unint64_t))(v6 + 56);
            v20(v19);
          }
          else
          {
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v18 = a2 ^ 0x80000000;
              *((void *)a1 + 2) = 0;
              *((void *)a1 + 3) = 0;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              uint64_t v18 = a2 - 1;
            }
            *(void *)a1 = v18;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetTabViewEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetTabViewEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetTabViewEnvironmentModifier and conformance ResetTabViewEnvironmentModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type ResetTabViewEnvironmentModifier and conformance ResetTabViewEnvironmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetTabViewEnvironmentModifier and conformance ResetTabViewEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetTabViewEnvironmentModifier and conformance ResetTabViewEnvironmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetTabViewEnvironmentModifier and conformance ResetTabViewEnvironmentModifier);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetFormEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetFormEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier);
  }
  return result;
}

uint64_t closure #2 in SidebarListBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v33 = a1;
  uint64_t v34 = a6;
  type metadata accessor for Binding();
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  unsigned int v12 = (char *)&v29 - v11;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v13 = type metadata accessor for SidebarListBody.TableViewRoot();
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v31 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  unint64_t v22 = (char *)&v29 - v21;
  uint64_t v23 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v33, v32, v20);
  uint64_t v24 = (uint64_t)v12;
  uint64_t v25 = v29;
  uint64_t v26 = v30;
  SidebarListBody.TableViewRoot.init(selection:)(v24, (uint64_t)v15);
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = v25;
  uint64_t v38 = v26;
  uint64_t v39 = v23;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v25;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v31 + 8);
  v27(v18, v16);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v16);
}

uint64_t SidebarListBody.TableViewRoot.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = swift_getKeyPath();
  *(_WORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = swift_getKeyPath();
  *(_WORD *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = swift_getKeyPath();
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v4 = a2 + *(int *)(type metadata accessor for SidebarListBody.TableViewRoot() + 60);
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
}

uint64_t type metadata accessor for SidebarListBody.TableViewRoot()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityCustomPropertyModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationStackStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FocusStateBindingModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AlertTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata completion function for AnyNavigationPath.HomogeneousBoxBase()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void type metadata completion function for FocusStore.Entry.Target()
{
  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t partial apply for closure #1 in OnModifierKeysChangedModifier.body(content:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in OnModifierKeysChangedModifier.body(content:)(v0 + 16);
}

void protocol witness for static View._makeView(view:inputs:) in conformance Switch(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  _OWORD v4[2] = *(_OWORD *)(a1 + 32);
  void v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISwitch> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISwitch> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISwitch> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISwitch>, &lazy cache variable for type metadata for UISwitch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISwitch> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t type metadata accessor for PlatformSwitchCoordinator()
{
  return self;
}

char *SwiftUISearchController.init()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem];
  uint64_t v2 = type metadata accessor for ToolbarStorage.SearchItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive] = 2;
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated] = 2;
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator;
  id v4 = objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0));
  int v5 = v0;
  *(void *)&v0[v3] = objc_msgSend(v4, sel_init);
  uint64_t v6 = &v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  *(void *)uint64_t v6 = 0;
  v6[8] = -1;
  unsigned int v7 = &v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  uint64_t v8 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture] = 0;
  uint64_t v9 = &v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((void *)v9 + 10) = 0;
  v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_allowsSecureDrawing] = 0;

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  uint64_t v10 = (char *)objc_msgSendSuper2(&v13, sel_initWithSearchResultsController_, 0);
  *(void *)(*(void *)&v10[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator]
            + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate
            + 8) = &protocol witness table for UISearchController;
  swift_unknownObjectWeakAssign();
  uint64_t v11 = v10;
  objc_msgSend(v11, sel_setObscuresBackgroundDuringPresentation_, 0);
  objc_msgSend(v11, sel_setDelegate_, v11);
  objc_msgSend(v11, sel_setSearchResultsUpdater_, v11);

  return v11;
}

uint64_t type metadata accessor for UIKitSearchBarCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchBarCoordinator);
}

id UIKitSearchBarCoordinator.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission];
  void *v2 = 0;
  v2[1] = 0;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_clearAction];
  void *v3 = 0;
  v3[1] = 0;
  id v4 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration];
  uint64_t v5 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes] = v6;
  unsigned int v7 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar];
  *(_OWORD *)unsigned int v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((void *)v7 + 10) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement] = 2;
  uint64_t v8 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_selection];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_expectedSelectionVersion] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating] = 0;
  uint64_t v10 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText];
  void *v10 = 0;
  v10[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldTokens] = v6;
  uint64_t v11 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((_OWORD *)v11 + 1) = xmmword_18834C6D0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_needsStateRestoration] = 0;
  v13.receiver = v0;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

id specialized UICollectionViewListCoordinator.__allocating_init(dataSource:selection:editMode:transaction:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  char v10 = *((unsigned char *)a3 + 16);
  *(void *)&v9[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x300)] = 0;
  long long v12 = *a3;
  char v13 = v10;
  return specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)(a1, a2, (uint64_t *)&v12, a4);
}

id specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v75 = a4;
  uint64_t v73 = a2;
  uint64_t v69 = a1;
  unsigned int v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = (void *)(*MEMORY[0x1E4FBC8C8] & *v5);
  uint64_t v9 = v8[12];
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v10 = v63;
  MEMORY[0x1F4188790](a1);
  uint64_t v66 = (char *)v60 - v11;
  uint64_t v74 = v8[14];
  v60[1] = *(void *)(v74 + 8);
  uint64_t v68 = type metadata accessor for ShadowListDataSource();
  uint64_t v67 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  uint64_t v65 = (uint64_t)v60 - v12;
  uint64_t v13 = *a3;
  uint64_t v70 = a3[1];
  uint64_t v71 = v13;
  int v72 = *((unsigned __int8 *)a3 + 16);
  *(void *)((char *)v5 + v8[16]) = MEMORY[0x1E4FBC870];
  uint64_t v14 = *(void *)((*v7 & *v5) + 0x90);
  id v15 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  uint64_t v16 = v5;
  uint64_t v17 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  *(void *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 4;
  v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(void *)((char *)v5 + v14) = v17;
  uint64_t v18 = (void *)((char *)v16 + *(void *)((*v7 & *v16) + 0x98));
  *uint64_t v18 = 0;
  v18[1] = 0;
  uint64_t v64 = (void *)((char *)v16 + *(void *)((*v7 & *v16) + 0xA0));
  *uint64_t v64 = 1;
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0xA8)) = 0;
  uint64_t v19 = (uint64_t)v16 + *(void *)((*v7 & *v16) + 0xB0);
  v60[0] = v9;
  double v20 = ListCoreBatchUpdates.init()(v19);
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0xB8)) = 1;
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0xC0)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 56))((char *)v16 + *(void *)((*v7 & *v16) + 0xC8), 1, 1, v9, v20);
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0xD0)) = 0;
  uint64_t v21 = (char *)v16 + *(void *)((*v7 & *v16) + 0xD8);
  uint64_t v22 = type metadata accessor for IndexPath();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v21, 1, 1, v22);
  v23((char *)v16 + *(void *)((*v7 & *v16) + 0xE0), 1, 1, v22);
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0xE8)) = 0;
  uint64_t v24 = (char *)v16 + *(void *)((*v7 & *v16) + 0xF0);
  *(void *)uint64_t v24 = 0;
  *((_WORD *)v24 + 4) = 256;
  swift_unknownObjectWeakInit();
  uint64_t v61 = (char *)v16 + *(void *)((*v7 & *v16) + 0x100);
  uint64_t v25 = v61;
  uint64_t v26 = v8[13];
  uint64_t v62 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v25, 1, 1, v62);
  uint64_t v27 = (char *)v16 + *(void *)((*v7 & *v16) + 0x108);
  LOBYTE(v77) = 0;
  OptionalEdgeInsets.init()();
  uint64_t v28 = v78;
  char v29 = v79;
  uint64_t v30 = v80;
  char v31 = v81;
  uint64_t v32 = v82;
  char v33 = v83;
  uint64_t v34 = v84;
  char v35 = v85;
  *uint64_t v27 = v77;
  *((void *)v27 + 1) = v28;
  v27[16] = v29;
  *((void *)v27 + 3) = v30;
  v27[32] = v31;
  *((void *)v27 + 5) = v32;
  v27[48] = v33;
  *((void *)v27 + 7) = v34;
  v27[64] = v35;
  uint64_t v36 = (char *)v16 + *(void *)((*v7 & *v16) + 0x110);
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = 0;
  v36[16] = 0;
  uint64_t v37 = (char *)v16 + *(void *)((*v7 & *v16) + 0x118);
  uint64_t v38 = v60[0];
  swift_getAssociatedTypeWitness();
  uint64_t v39 = v8[15];
  swift_getAssociatedConformanceWitness();
  *(void *)uint64_t v37 = WeakSelectionBasedStorage.init()();
  *((_DWORD *)v37 + 2) = v40;
  *((_DWORD *)v37 + 3) = v41;
  *((_DWORD *)v37 + 4) = v42;
  *((_DWORD *)v37 + 5) = v43;
  *((_DWORD *)v37 + 6) = v44;
  *((_DWORD *)v37 + 7) = v45;
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0x120)) = 0;
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0x128)) = 0;
  long long v46 = (char *)v16 + *(void *)((*v7 & *v16) + 0x130);
  *(void *)long long v46 = 0;
  *((_WORD *)v46 + 4) = 256;
  uint64_t v47 = (char *)v16 + *(void *)((*v7 & *v16) + 0x138);
  *(void *)uint64_t v47 = 0;
  v47[8] = 1;
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0x140)) = 0;
  *((unsigned char *)v16 + *(void *)((*v7 & *v16) + 0x148)) = 0;
  *(void *)((char *)v16 + *(void *)((*v7 & *v16) + 0x150)) = 0;
  uint64_t v48 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v66, v69, v38);
  uint64_t v49 = v65;
  ShadowListDataSource.init(_:)(v48, v38, v65);
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))((char *)v16 + *(void *)((*v7 & *v16) + 0x88), v49, v68);
  uint64_t v50 = v61;
  swift_beginAccess();
  uint64_t v51 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24))(v50, v73, v51);
  swift_endAccess();
  uint64_t v52 = *(void *)v36;
  uint64_t v53 = *((void *)v36 + 1);
  uint64_t v54 = v70;
  *(void *)uint64_t v36 = v71;
  *((void *)v36 + 1) = v54;
  v36[16] = v72;
  outlined consume of Binding<NavigationSplitViewColumn>?(v52, v53);
  unint64_t v55 = v64;
  swift_beginAccess();
  uint64_t v56 = *v55;
  uint64_t v57 = v75;
  *unint64_t v55 = v75;
  outlined copy of Transaction?(v57);
  outlined consume of Transaction?(v56);

  uint64_t v77 = v38;
  uint64_t v78 = v26;
  uint64_t v79 = v74;
  uint64_t v80 = v39;
  Swift::String v58 = (objc_class *)type metadata accessor for UICollectionViewListCoordinatorBase();
  v76.receiver = v16;
  v76.super_class = v58;
  return objc_msgSendSuper2(&v76, sel_init);
}

uint64_t type metadata accessor for UICollectionViewListCoordinatorBase()
{
  return swift_getGenericMetadata();
}

uint64_t WeakSelectionBasedStorage.init()()
{
  return 0;
}

double ListCoreBatchUpdates.init()@<D0>(uint64_t a1@<X8>)
{
  IndexSet.init()();
  uint64_t v2 = (int *)type metadata accessor for ListCoreBatchUpdates();
  IndexSet.init()();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + v2[10]) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + v2[11]) = v3;
  *(void *)(a1 + v2[12]) = v3;
  *(void *)(a1 + v2[13]) = v3;
  IndexSet.init()();
  uint64_t v4 = a1 + v2[15];
  ListBatchUpdates.init()((uint64_t *)v7);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)uint64_t v4 = v7[0];
  *(_OWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 32) = v8;
  return result;
}

uint64_t ListBatchUpdates.init()@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CountingIndex();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for ListUpdate();
  uint64_t v5 = static Array._allocateUninitialized(_:)();
  uint64_t v4 = CollectionChanges.init()();
  uint64_t v3 = CollectionChanges.init()();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v1;
  a1[4] = result;
  return result;
}

uint64_t CollectionChanges.init()()
{
  return Array.init()();
}

uint64_t type metadata accessor for PlatformViewCoordinator()
{
  return self;
}

uint64_t type metadata accessor for UICollectionViewListCoordinatorBaseBase()
{
  return self;
}

void ListCollectionViewCellBase.updateSwipeActionPresentationBinding()()
{
  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v43);
  outlined init with take of SwipeActions.Value?((uint64_t)v43, (uint64_t)v44);
  outlined init with take of SwipeActions.Value?((uint64_t)v44, (uint64_t)&v45);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v45) != 1)
  {
    uint64_t v0 = v48;
    uint64_t v1 = v49;
    uint64_t v2 = v50;
    uint64_t v3 = v51;
    uint64_t v4 = v54;
    uint64_t v5 = v55;
    uint64_t v6 = v56;
    uint64_t v7 = v57;
    uint64_t v17 = v53;
    uint64_t v18 = v52;
    uint64_t v22 = v46;
    uint64_t v24 = v45;
    uint64_t v20 = v47;
    outlined copy of SwipeActions.Configuration?(v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57);
    outlined release of SwipeActions.Value?(v44);
    if (v0)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
      outlined consume of SwipeActions.Configuration?(v24, v22, v20, v0, v1, v2, v3, v18, v17, v4, v5, v6, v7);
      if (v2)
      {
        v29[0] = *(unsigned char *)(v26 + direct field offset for ListCollectionViewCellBase.wasSwiped);
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
      }
    }
  }
  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v27);
  outlined init with take of SwipeActions.Value?((uint64_t)v27, (uint64_t)v28);
  outlined init with take of SwipeActions.Value?((uint64_t)v28, (uint64_t)v29);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v29) != 1)
  {
    uint64_t v8 = v33;
    uint64_t v10 = v34;
    uint64_t v9 = v35;
    uint64_t v11 = v36;
    uint64_t v12 = v38;
    uint64_t v13 = v39;
    uint64_t v14 = v40;
    uint64_t v15 = v41;
    uint64_t v16 = v42;
    uint64_t v23 = v31;
    uint64_t v25 = v30;
    uint64_t v19 = v37;
    uint64_t v21 = v32;
    outlined copy of SwipeActions.Configuration?(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
    outlined release of SwipeActions.Value?(v28);
    if (v8)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v10, v9);
      outlined consume of SwipeActions.Configuration?(v25, v23, v21, v8, v10, v9, v11, v19, v12, v13, v14, v15, v16);
      if (v9)
      {
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
      }
    }
  }
}

void outlined consume of SwipeActions.Configuration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(a5, a6);
    outlined consume of Binding<SwipeActionResultToken?>?(a8, a9, a10, a11, a12, a13);
  }
}

void storeEnumTagSinglePayload for List(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = (unsigned __int16)((*(_WORD *)(v7 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v7 + 80) & 0xF8) & 0x1F8;
  if (v8) {
    unint64_t v14 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    unint64_t v14 = v9 + 1;
  }
  if (v14 > v9) {
    unint64_t v9 = v14;
  }
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  size_t v15 = v9 + v13 + 1;
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  size_t v17 = ((((*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v15 + v16) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  char v18 = 8 * v17;
  if (v12 >= a3)
  {
    int v22 = 0;
    if (v12 >= a2)
    {
LABEL_24:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_41;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_41;
        case 3:
          goto LABEL_64;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_40;
        default:
LABEL_40:
          if (a2)
          {
LABEL_41:
            if (v11 > 0x7FFFFFFE)
            {
              unint64_t v25 = (unint64_t)&a1[v15 + v16] & ~v16;
              uint64_t v26 = *(void (**)(unint64_t))(v10 + 56);
              v26(v25);
            }
            else if (a2 > 0x7FFFFFFE)
            {
              if (v15 <= 3) {
                int v27 = ~(-1 << (8 * v15));
              }
              else {
                int v27 = -1;
              }
              if (v15)
              {
                int v28 = v27 & (a2 - 0x7FFFFFFF);
                if (v15 <= 3) {
                  int v29 = v15;
                }
                else {
                  int v29 = 4;
                }
                bzero(a1, v15);
                switch(v29)
                {
                  case 2:
                    *(_WORD *)a1 = v28;
                    break;
                  case 3:
                    *(_WORD *)a1 = v28;
                    a1[2] = BYTE2(v28);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v28;
                    break;
                  default:
                    *a1 = v28;
                    break;
                }
              }
            }
            else
            {
              *(void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v12 + 255) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v12 >= a2) {
      goto LABEL_24;
    }
  }
  if (v17 < 4) {
    unsigned int v23 = ((~v12 + a2) >> v18) + 1;
  }
  else {
    unsigned int v23 = 1;
  }
  if (v17 >= 4) {
    unsigned int v24 = ~v12 + a2;
  }
  else {
    unsigned int v24 = (~(_BYTE)v12 + a2);
  }
  bzero(a1, v17);
  if (v17 == 1) {
    *a1 = v24;
  }
  else {
    *(_DWORD *)a1 = v24;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v23;
      break;
    case 3:
LABEL_64:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v17] = v23;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _KeyboardShortcutPickerContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityToggleModifier.RepresentationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _DisabledPickerContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NavigationStackCore()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationRequest.Action()
{
  return &type metadata for NavigationRequest.Action;
}

uint64_t type metadata completion function for AccessibilityLabeledContentContentModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for UpdateCoalescingCollectionView()
{
  _s10Foundation9IndexPathVSgMaTm_2(319, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t specialized UIKitFocusItemDescription.init(_:)(void *a1)
{
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  uint64_t v2 = dynamic_cast_existential_1_superclass_conditional((uint64_t)a1);
  if (v2)
  {
    uint64_t v4 = v2;
    unint64_t v5 = v3;
  }
  else
  {
    swift_getObjectType();
    uint64_t v6 = swift_conformsToProtocol2();
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)a1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      unint64_t v5 = v7 | 0x4000000000000000;
    }
    else
    {
      uint64_t v8 = swift_conformsToProtocol2();
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8) {
        uint64_t v4 = (uint64_t)a1;
      }
      else {
        uint64_t v4 = 0;
      }
      if (!v4)
      {
        swift_unknownObjectRetain();
        v13._countAndFlagsBits = 60;
        v13._object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        unint64_t v5 = 0xC000000000000000;
        uint64_t v4 = (uint64_t)a1;
LABEL_23:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v14._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 62;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);

        uint64_t v12 = 0x3C6E776F6E6B6E55;
        unint64_t v11 = 0xE800000000000000;
        goto LABEL_24;
      }
      unint64_t v5 = v9 | 0x8000000000000000;
    }
  }
  swift_unknownObjectRetain();
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  unint64_t v11 = 0xE400000000000000;
  uint64_t v12 = 1953722184;
  switch(v5 >> 62)
  {
    case 1uLL:
      unint64_t v11 = 0xE900000000000072;
      uint64_t v12 = 0x656E6961746E6F43;
      break;
    case 2uLL:
      uint64_t v12 = 1835365449;
      break;
    case 3uLL:
      goto LABEL_23;
    default:
      break;
  }
LABEL_24:
  unint64_t v16 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v18 = specialized UIKitFocusItemDescription.Category.attributes.getter(v4, v5);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    unsigned int v20 = (void **)(v18 + 40);
    do
    {
      uint64_t v21 = (uint64_t)*(v20 - 1);
      int v22 = *v20;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = v21;
      v23._object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 8251;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);

  return 0;
}

{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;

  swift_getObjectType();
  uint64_t v2 = swift_conformsToProtocol2();
  if (v2) {
    unint64_t v3 = v2;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v2) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4)
  {
    unint64_t v5 = swift_conformsToProtocol2();
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v5) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      unint64_t v3 = v6 | 0x4000000000000000;
    }
    else
    {
      uint64_t v7 = swift_conformsToProtocol2();
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v7) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = 0;
      }
      if (!v4)
      {
        Swift::String v14 = a1;
        v15._countAndFlagsBits = 60;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
        unint64_t v3 = 0xC000000000000000;
        uint64_t v9 = a1;
LABEL_29:
        swift_getObjectType();
        unint64_t v16 = a1;
        v17._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 62;
        v18._object = (void *)0xE100000000000000;
        String.append(_:)(v18);

        Swift::String v13 = 0x3C6E776F6E6B6E55;
        uint64_t v12 = 0xE800000000000000;
        goto LABEL_30;
      }
      unint64_t v3 = v8 | 0x8000000000000000;
    }
  }
  uint64_t v9 = v4;
  Swift::String v10 = a1;
  v11._countAndFlagsBits = 60;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t v12 = 0xE400000000000000;
  Swift::String v13 = 1953722184;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v12 = 0xE900000000000072;
      Swift::String v13 = 0x656E6961746E6F43;
      goto LABEL_27;
    case 2uLL:
      Swift::String v13 = 1835365449;
LABEL_27:
      uint64_t v9 = v4;
      break;
    case 3uLL:
      goto LABEL_29;
    default:
      break;
  }
LABEL_30:
  uint64_t v19 = v12;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v21 = specialized UIKitFocusItemDescription.Category.attributes.getter(v9, v3);
  int v22 = *(void *)(v21 + 16);
  if (v22)
  {
    Swift::String v23 = (void **)(v21 + 40);
    do
    {
      Swift::String v24 = (uint64_t)*(v23 - 1);
      Swift::String v25 = *v23;
      swift_bridgeObjectRetain();
      v26._countAndFlagsBits = v24;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 8251;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v23 += 2;
      --v22;
    }
    while (v22);
  }
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);

  return 0;
}

{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;

  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  uint64_t v2 = dynamic_cast_existential_1_superclass_conditional((uint64_t)a1);
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    unint64_t v5 = v3;
  }
  else
  {
    swift_getObjectType();
    uint64_t v6 = swift_conformsToProtocol2();
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      unint64_t v5 = v7 | 0x4000000000000000;
    }
    else
    {
      uint64_t v8 = swift_conformsToProtocol2();
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = 0;
      }
      if (!v4)
      {
        Swift::String v15 = a1;
        v16._countAndFlagsBits = 60;
        v16._object = (void *)0xE100000000000000;
        String.append(_:)(v16);
        unint64_t v5 = 0xC000000000000000;
        Swift::String v10 = a1;
LABEL_24:
        swift_getObjectType();
        Swift::String v17 = a1;
        v18._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 62;
        v19._object = (void *)0xE100000000000000;
        String.append(_:)(v19);

        Swift::String v14 = 0x3C6E776F6E6B6E55;
        Swift::String v13 = 0xE800000000000000;
        goto LABEL_25;
      }
      unint64_t v5 = v9 | 0x8000000000000000;
    }
  }
  Swift::String v10 = v4;
  unint64_t v11 = a1;
  v12._countAndFlagsBits = 60;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  Swift::String v13 = 0xE400000000000000;
  Swift::String v14 = 1953722184;
  switch(v5 >> 62)
  {
    case 1uLL:
      Swift::String v13 = 0xE900000000000072;
      Swift::String v14 = 0x656E6961746E6F43;
      goto LABEL_22;
    case 2uLL:
      Swift::String v14 = 1835365449;
LABEL_22:
      Swift::String v10 = v4;
      break;
    case 3uLL:
      goto LABEL_24;
    default:
      break;
  }
LABEL_25:
  unsigned int v20 = v13;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 8250;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)();
  int v22 = specialized UIKitFocusItemDescription.Category.attributes.getter(v10, v5);
  Swift::String v23 = *(void *)(v22 + 16);
  if (v23)
  {
    Swift::String v24 = (void **)(v22 + 40);
    do
    {
      Swift::String v25 = (uint64_t)*(v24 - 1);
      uint64_t v26 = *v24;
      swift_bridgeObjectRetain();
      v27._countAndFlagsBits = v25;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 8251;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v24 += 2;
      --v23;
    }
    while (v23);
  }
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 62;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);

  return 0;
}

{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  uint64_t v2 = dynamic_cast_existential_1_superclass_conditional((uint64_t)a1);
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    unint64_t v5 = v3;
  }
  else
  {
    swift_getObjectType();
    uint64_t v6 = swift_conformsToProtocol2();
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      unint64_t v5 = v7 | 0x4000000000000000;
    }
    else
    {
      uint64_t v8 = swift_conformsToProtocol2();
      if (!v8)
      {
        __break(1u);
        JUMPOUT(0x1882A59C4);
      }
      unint64_t v5 = v8 | 0x8000000000000000;
      uint64_t v4 = a1;
    }
  }
  uint64_t v9 = a1;
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  unint64_t v11 = 0xE400000000000000;
  uint64_t v12 = 1953722184;
  switch(v5 >> 62)
  {
    case 1uLL:
      unint64_t v11 = 0xE900000000000072;
      uint64_t v12 = 0x656E6961746E6F43;
      break;
    case 2uLL:
      uint64_t v12 = 1835365449;
      break;
    case 3uLL:
      swift_getObjectType();
      Swift::String v13 = v9;
      v14._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);

      uint64_t v12 = 0x3C6E776F6E6B6E55;
      unint64_t v11 = 0xE800000000000000;
      break;
    default:
      break;
  }
  unint64_t v16 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v18 = specialized UIKitFocusItemDescription.Category.attributes.getter(v4, v5);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    unsigned int v20 = (void **)(v18 + 40);
    do
    {
      uint64_t v21 = (uint64_t)*(v20 - 1);
      int v22 = *v20;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = v21;
      v23._object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 8251;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);

  return 0;
}

uint64_t specialized UIKitFocusItemDescription.Category.attributes.getter(void *a1, unint64_t a2)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
      uint64_t v5 = specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(a1, a2);
      if (v6)
      {
        unint64_t v7 = v6;
      }
      else
      {
        uint64_t v5 = 16191;
        unint64_t v7 = 0xE200000000000000;
      }
      unint64_t v8 = v7;
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x65646E6F70736572;
      *(void *)(v2 + 40) = 0xEB00000000203A72;
      break;
    case 2uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB70;
      uint64_t v9 = (void *)swift_unknownObjectRetain();
      uint64_t v10 = specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(v9, a2);
      if (v11)
      {
        unint64_t v12 = v11;
      }
      else
      {
        uint64_t v10 = 16191;
        unint64_t v12 = 0xE200000000000000;
      }
      unint64_t v13 = v12;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x65646E6F70736572;
      *(void *)(v2 + 40) = 0xEB00000000203A72;
      swift_getObjectType();
      char v14 = UIFocusItem.isFocused.getter();
      BOOL v15 = (v14 & 1) == 0;
      if (v14) {
        uint64_t v16 = 1702195828;
      }
      else {
        uint64_t v16 = 0x65736C6166;
      }
      if (v15) {
        unint64_t v17 = 0xE500000000000000;
      }
      else {
        unint64_t v17 = 0xE400000000000000;
      }
      unint64_t v18 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 48) = 0x3A64657375636F66;
      *(void *)(v2 + 56) = 0xE900000000000020;
      goto LABEL_23;
    case 3uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
      swift_getObjectType();
      outlined copy of UIKitFocusItemDescription<A>.Category<A>(a1, a2);
      char v19 = UIFocusItem.isFocused.getter();
      BOOL v20 = (v19 & 1) == 0;
      if (v19) {
        uint64_t v21 = 1702195828;
      }
      else {
        uint64_t v21 = 0x65736C6166;
      }
      if (v20) {
        unint64_t v22 = 0xE500000000000000;
      }
      else {
        unint64_t v22 = 0xE400000000000000;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x3A64657375636F66;
      *(void *)(v2 + 40) = 0xE900000000000020;
LABEL_23:
      outlined consume of UIKitFocusItemDescription<UIView>.Category(a1, a2);
      break;
    default:
      return v2;
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  uint64_t v2 = MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
      uint64_t v5 = specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(a1, a2);
      if (v6)
      {
        unint64_t v7 = v6;
      }
      else
      {
        uint64_t v5 = 16191;
        unint64_t v7 = 0xE200000000000000;
      }
      unint64_t v8 = v7;
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x65646E6F70736572;
      *(void *)(v2 + 40) = 0xEB00000000203A72;
      break;
    case 2uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB70;
      uint64_t v9 = (void *)swift_unknownObjectRetain();
      uint64_t v10 = specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(v9, a2);
      if (v11)
      {
        unint64_t v12 = v11;
      }
      else
      {
        uint64_t v10 = 16191;
        unint64_t v12 = 0xE200000000000000;
      }
      unint64_t v13 = v12;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x65646E6F70736572;
      *(void *)(v2 + 40) = 0xEB00000000203A72;
      swift_getObjectType();
      char v14 = UIFocusItem.isFocused.getter();
      BOOL v15 = (v14 & 1) == 0;
      if (v14) {
        uint64_t v16 = 1702195828;
      }
      else {
        uint64_t v16 = 0x65736C6166;
      }
      if (v15) {
        unint64_t v17 = 0xE500000000000000;
      }
      else {
        unint64_t v17 = 0xE400000000000000;
      }
      unint64_t v18 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 48) = 0x3A64657375636F66;
      *(void *)(v2 + 56) = 0xE900000000000020;
      goto LABEL_23;
    case 3uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
      swift_getObjectType();
      swift_unknownObjectRetain();
      char v19 = UIFocusItem.isFocused.getter();
      BOOL v20 = (v19 & 1) == 0;
      if (v19) {
        uint64_t v21 = 1702195828;
      }
      else {
        uint64_t v21 = 0x65736C6166;
      }
      if (v20) {
        unint64_t v22 = 0xE500000000000000;
      }
      else {
        unint64_t v22 = 0xE400000000000000;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x3A64657375636F66;
      *(void *)(v2 + 40) = 0xE900000000000020;
LABEL_23:
      outlined consume of UIKitFocusItemDescription<UIView>.Category(a1, a2);
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t partial apply for closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(*(uint64_t **)(v1 + 56), a1);
}

uint64_t closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *))AGGraphGetValue();
  unint64_t v7 = *a1;
  swift_retain();
  swift_bridgeObjectRetain();
  v4(&v6, &v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t type metadata completion function for CollectionViewListRoot()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    if (v2 <= 0x3F)
    {
      type metadata accessor for Binding();
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for GridRow()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View.toolbar(removing:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return MEMORY[0x18C113660](&v4, a2, &unk_1ED441148, a3);
}

void WithCurrentHostingControllerAction.callAsFunction(_:)(void (*a1)(void))
{
  id v3 = (id)MEMORY[0x18C119DF0](v1);
  a1();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ButtonBorderShape(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 1)
  {
    if (v2 != v3) {
      LOBYTE(v4) = 1;
    }
    return (v4 & 1) == 0;
  }
  switch(*(void *)&v2)
  {
    case 1:
      BOOL v5 = *(void *)&v3 == 1;
      break;
    case 2:
      BOOL v5 = *(void *)&v3 == 2;
      break;
    case 3:
      if (*(void *)&v3 <= 2uLL) {
        int v4 = 0;
      }
      return v4 == 1;
    default:
      BOOL v5 = *(void *)&v3 == 0;
      break;
  }
  if (!v5) {
    LOBYTE(v4) = 0;
  }
  return (v4 & 1) != 0;
}

uint64_t closure #1 in OnModifierKeysChangedModifier.body(content:)(uint64_t a1)
{
  v1[34] = a1;
  v1[35] = type metadata accessor for MainActor();
  v1[36] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[37] = v3;
  v1[38] = v2;
  return MEMORY[0x1F4188298](closure #1 in OnModifierKeysChangedModifier.body(content:), v3, v2);
}

uint64_t _NavigationSplitReader.UpdatePreferredCompactColumn.updateValue()()
{
  uint64_t v1 = MEMORY[0x1E4FBB718];
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(Value, (uint64_t)&v12, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  if (*((void *)&v12 + 1) == 1) {
    return _s7SwiftUI19NavigationAuthorityVSgWOhTm_0((uint64_t)&v12, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  outlined init with take of NavigationAuthority((uint64_t)&v12, (uint64_t)v17);
  int v4 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v4 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v4;
    *(void *)(v0 + 16) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 24) = 0;
  }
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638]);
  AGGraphGetValue();
  swift_retain();
  char v5 = dispatch thunk of AnyLocation.update()();
  swift_release();
  if (v5)
  {
    uint64_t v6 = v12;
    if (UpdateCycleDetector.dispatch(label:isDebug:)())
    {
      uint64_t v7 = AGGraphGetValue();
      uint64_t v8 = *(void *)(v7 + 8);
      unint64_t v9 = *(unsigned __int8 *)(v7 + 16) | (unint64_t)(v6 << 8);
      *(void *)&long long v12 = *(void *)v7;
      *((void *)&v12 + 1) = v8;
      *(void *)unint64_t v13 = v9;
      uint64_t v14 = 0;
      memset(&v13[8], 0, 32);
      v15[0] = 4;
      memset(&v15[8], 0, 32);
      *(_OWORD *)&v15[40] = xmmword_18834C6D0;
      v15[56] = 0;
      uint64_t v16 = 0;
      v10[6] = *(_OWORD *)&v15[32];
      v10[7] = *(_OWORD *)&v15[48];
      uint64_t v11 = 0;
      _OWORD v10[2] = *(_OWORD *)&v13[16];
      void v10[3] = 0uLL;
      void v10[4] = *(_OWORD *)v15;
      v10[5] = *(_OWORD *)&v15[16];
      v10[0] = v12;
      v10[1] = *(_OWORD *)v13;
      swift_retain();
      swift_retain();
      NavigationAuthority.enqueueRequest(_:)(v10);
      outlined release of NavigationRequest((uint64_t)&v12);
    }
  }
  return outlined destroy of NavigationAuthority((uint64_t)v17);
}

uint64_t type metadata completion function for ContextMenuPreviewModifierCore()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for UpdateCoalescingCollectionView.UpdateInvalidation()
{
  uint64_t result = type metadata accessor for IndexPath();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t closure #1 in static CollectionViewListRoot._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for CollectionViewListRoot();
  void v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t one-time initialization function for all()
{
  if (one-time initialization token for horizontal != -1) {
    uint64_t result = swift_once();
  }
  int v0 = static _EventDirections.horizontal;
  if (one-time initialization token for vertical != -1) {
    uint64_t result = swift_once();
  }
  char v1 = static _EventDirections.vertical;
  if ((static _EventDirections.vertical & ~v0) == 0) {
    char v1 = 0;
  }
  static _EventDirections.all = v1 | v0;
  return result;
}

{
  unsigned int v0;
  uint64_t result;

  if (one-time initialization token for horizontal != -1) {
    uint64_t result = swift_once();
  }
  int v0 = static SwipeGesture.Direction.horizontal;
  if (one-time initialization token for vertical == -1)
  {
    if (static SwipeGesture.Direction.horizontal >= 0x10u) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = swift_once();
    if (v0 >= 0x10) {
      goto LABEL_9;
    }
  }
  if ((static SwipeGesture.Direction.vertical & ~v0) == 0
    || (v0 |= static SwipeGesture.Direction.vertical, v0 < 0x10))
  {
    static SwipeGesture.Direction.all = v0;
    return result;
  }
LABEL_9:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SwiftUIClass()
{
  return self;
}

uint64_t *assignWithTake for SwitchToggleStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Color?>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 40);
  uint64_t v12 = a1[4];
  char v13 = *((unsigned char *)a1 + 40);
  a1[4] = a2[4];
  *((unsigned char *)a1 + 40) = v11;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v12, v13);
  char v14 = *((unsigned char *)a2 + 56);
  a1[6] = a2[6];
  *((unsigned char *)a1 + 56) = v14;
  swift_release();
  a1[8] = a2[8];
  swift_release();
  return a1;
}

uint64_t type metadata completion function for DeleteInteraction()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SidebarListStyle.BodyContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t FocusStateBindingResponderFilter.updateValue()()
{
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, &lazy cache variable for type metadata for FocusBridge?, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, MEMORY[0x1E4FBB718]);
  AGGraphGetValue();
  swift_weakAssign();
  uint64_t v2 = *(void *)(v0 + 16);
  type metadata accessor for Attribute<FocusStoreList>(0, &lazy cache variable for type metadata for [Namespace.ID], MEMORY[0x1E4F41808], MEMORY[0x1E4FBB320]);
  *(void *)(v2 + 224) = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  char v4 = v3;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = *Value;
  uint64_t v9 = Value[1];
  uint64_t v10 = Value[2];
  uint64_t v11 = Value[3];
  uint64_t v12 = Value[4];
  AGGraphGetValue();
  char v14 = v13;
  char v16 = *(unsigned char *)AGGraphGetValue();
  if ((v4 & 1) != 0 || (v7 & 1) != 0 || (v14 & 1) != 0 || (v15 & 1) != 0 || !AGGraphGetOutputValue())
  {
    *(void *)&long long v26 = v9;
    *((void *)&v26 + 1) = v10;
    *(void *)&long long v27 = v11;
    *((void *)&v27 + 1) = v12;
    uint64_t v17 = swift_retain_n();
    *(double *)&unint64_t v18 = MEMORY[0x18C10C240](v17);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v19, v18));
    *(void *)(v2 + 232) = v8;
    *(_OWORD *)(v2 + 240) = v26;
    *(_OWORD *)(v2 + 256) = v27;
    swift_retain();
    uint64_t v20 = swift_release();
    double v21 = MEMORY[0x18C114450](v20);
    uint64_t v23 = v22;
    swift_release();
    *(double *)(v2 + 272) = v21;
    *(void *)(v2 + 280) = v23;
    *(unsigned char *)(v2 + 288) = v16;
  }
  else
  {
    swift_retain();
  }
  if (AGGraphGetOutputValue())
  {
    return swift_release();
  }
  else
  {
    type metadata accessor for Attribute<FocusStoreList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = v2;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t getEnumTagSinglePayload for PickerOption(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

uint64_t type metadata completion function for ContextMenuPreviewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for InsettableGroupedListBodyRule()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for DragGesture.Value()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double static TransactionalPreferenceModifier._makeView(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  void (*v52)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  void v73[5];
  uint64_t v74;
  int v75;
  uint64_t v76;
  long long v77;
  uint64_t v78;
  uint64_t v79;
  long long v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  long long v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  unint64_t v90;
  int v91;
  uint64_t v92;

  uint64_t v9 = a8;
  uint64_t v64 = a8;
  uint64_t v53 = a9;
  uint64_t v54 = a6;
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a5;
  uint64_t v65 = a5;
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v42 = (char *)&v39 - v16;
  char v83 = v14;
  uint64_t v84 = a6;
  char v85 = a7;
  *(void *)&uint64_t v86 = v9;
  uint64_t IsAnimated = type metadata accessor for IsAnimated();
  uint64_t v18 = *(void *)(IsAnimated - 8);
  uint64_t v48 = IsAnimated;
  uint64_t v49 = v18;
  MEMORY[0x1F4188790](IsAnimated);
  uint64_t v41 = (int *)((char *)&v39 - v19);
  LODWORD(v19) = *a1;
  int v20 = *((_DWORD *)a2 + 2);
  uint64_t v21 = a2[2];
  uint64_t v56 = *a2;
  uint64_t v57 = v21;
  uint64_t v61 = *((_DWORD *)a2 + 6);
  uint64_t v62 = v20;
  unsigned int v22 = *((_DWORD *)a2 + 7);
  uint64_t v59 = *((_DWORD *)a2 + 8);
  BOOL v60 = v22;
  Swift::String v58 = *((_DWORD *)a2 + 9);
  uint64_t v24 = a2[6];
  uint64_t v47 = a2[5];
  uint64_t v23 = v47;
  uint64_t v55 = v24;
  LODWORD(v14) = *((_DWORD *)a2 + 15);
  uint64_t v63 = *((_DWORD *)a2 + 14);
  LODWORD(v9) = *((_DWORD *)a2 + 17);
  unsigned int v40 = *((_DWORD *)a2 + 16);
  unsigned int v45 = v9;
  unsigned int v46 = v14;
  unsigned int v25 = *((_DWORD *)a2 + 18);
  unsigned int v43 = *((_DWORD *)a2 + 19);
  LODWORD(a1) = v43;
  unsigned int v44 = v25;
  int v26 = *((_DWORD *)a2 + 20);
  LODWORD(v74) = v19;
  char v83 = v65;
  uint64_t v84 = v54;
  uint64_t v50 = a7;
  char v85 = a7;
  *(void *)&uint64_t v86 = v64;
  type metadata accessor for TransactionalPreferenceModifier();
  type metadata accessor for _GraphValue();
  int v39 = _GraphValue.value.getter();
  char v83 = v56;
  LODWORD(v84) = v62;
  char v85 = v57;
  *(void *)&uint64_t v86 = __PAIR64__(v60, v61);
  *((void *)&v86 + 1) = __PAIR64__(v58, v59);
  uint64_t v87 = v23;
  uint64_t v88 = v24;
  *(void *)&uint64_t v89 = __PAIR64__(v14, v63);
  LODWORD(v14) = v40;
  *((void *)&v89 + 1) = __PAIR64__(v9, v40);
  uint64_t v90 = __PAIR64__(a1, v25);
  uint64_t v91 = v26;
  LODWORD(a2) = _ViewInputs.transaction.getter();
  uint64_t v27 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v42, 1, 1, v65);
  int v28 = v41;
  int v29 = (int)a2;
  uint64_t v30 = v54;
  IsAnimated.init(modifier:transaction:lastValue:lastTransaction:)(v39, v29, v27, 0, v41);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = v48;
  v73[2] = AssociatedTypeWitness;
  v73[3] = v48;
  v73[4] = swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v73, v32, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
  (*(void (**)(_DWORD *, uint64_t))(v49 + 8))(v28, v32);
  LODWORD(v28) = v83;
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  char v83 = v56;
  LODWORD(v24) = v63;
  LODWORD(v84) = v62;
  char v85 = v57;
  *(void *)&uint64_t v86 = __PAIR64__(v60, v61);
  *((void *)&v86 + 1) = __PAIR64__(v58, v59);
  uint64_t v87 = v47;
  uint64_t v88 = v55;
  *(void *)&uint64_t v89 = __PAIR64__(v46, v63);
  *((void *)&v89 + 1) = __PAIR64__(v45, v14);
  uint64_t v90 = __PAIR64__(v43, v44);
  uint64_t v91 = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = v64;
  PreferencesInputs.remove<A>(_:)();
  uint64_t v74 = v83;
  uint64_t v75 = v84;
  uint64_t v77 = v86;
  objc_super v76 = v85;
  uint64_t v78 = v87;
  uint64_t v79 = v88;
  uint64_t v80 = v89;
  char v81 = v90;
  uint64_t v82 = v91;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v36 = swift_bridgeObjectRetain();
  v52(&v66, v36, &v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v74 = v55;
  uint64_t v75 = v24;
  uint64_t v68 = v65;
  uint64_t v69 = v30;
  uint64_t v70 = v50;
  uint64_t v71 = v35;
  int v72 = (int)v28;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v37 = v53;
  *(void *)uint64_t v53 = v66;
  double result = v67;
  v37[1] = v67;
  return result;
}

void type metadata accessor for TransactionalPreferenceModifier<Bool, StatusBarKey>()
{
  if (!lazy cache variable for type metadata for TransactionalPreferenceModifier<Bool, StatusBarKey>)
  {
    unint64_t v0 = type metadata accessor for TransactionalPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransactionalPreferenceModifier<Bool, StatusBarKey>);
    }
  }
}

uint64_t type metadata accessor for TransactionalPreferenceModifier()
{
  return swift_getGenericMetadata();
}

uint64_t AnyNavigationLinkPresentedValueStorage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 208) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 224));

  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for NavigationStackStyledCore.NavigationStackRepresentableRoot()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for MoveInteraction()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for UIKitBarButtonItem()
{
  type metadata accessor for ToolbarStorage.Item?(319, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ToolbarStorage.Item?(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void *type metadata accessor for BaseModifier()
{
  return &unk_1ED410DE8;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfiguration.Suggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchField(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

Swift::Void __swiftcall ListTableViewCell.updateSeparatorsFromConfiguration()()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v2);
  long long v4 = &v33[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v5 = 0.0;
  int v6 = v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_disclosureIndent + 8];
  if ((v6 & 1) == 0)
  {
    double v7 = *(double *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_disclosureIndent];
    uint64_t v8 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
    swift_beginAccess();
    outlined init with copy of FocusItem?(v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
    if (v4[*(int *)(v2 + 20)] == 2) {
      double v7 = v7 + 40.0;
    }
    _s7SwiftUI9FocusItemVSgWOhTm_1((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
    double v5 = v7;
  }
  uint64_t v9 = &v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  if (*(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration + 8] != 1)
  {
    uint64_t v11 = *((void *)v9 + 3);
    uint64_t v12 = *((void *)v9 + 2) & 0xFELL;
    swift_retain();
    swift_retain();
    if (v12)
    {
      double v13 = 0.0;
      int v6 = 0;
      double v5 = 1.79769313e308;
      int v14 = 1;
      if (v11) {
        goto LABEL_11;
      }
LABEL_28:
      swift_release();
      double v10 = -1.0;
      if (!v6) {
        double v10 = v5;
      }
      if (v14) {
        goto LABEL_14;
      }
      goto LABEL_31;
    }
    static Semantics.v4.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
      goto LABEL_27;
    }
    static HorizontalAlignment.listRowSeparatorLeading.getter();
    uint64_t v18 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host;
    uint64_t v19 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
    if (v19)
    {
      id v20 = v19;
      objc_msgSend(v1, sel_bounds);
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
      lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
      double v5 = COERCE_DOUBLE(ViewRendererHost.explicitAlignment(of:at:)());
      char v22 = v21;

      if ((v22 & 1) == 0) {
        goto LABEL_20;
      }
    }
    static HorizontalAlignment.leadingText.getter();
    uint64_t v23 = *(void **)&v1[v18];
    if (v23)
    {
      id v24 = v23;
      objc_msgSend(v1, sel_bounds);
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
      lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
      double v5 = COERCE_DOUBLE(ViewRendererHost.explicitAlignment(of:at:)());
      char v26 = v25;

      if ((v26 & 1) == 0)
      {
LABEL_20:
        objc_msgSend(v1, sel_directionalLayoutMargins);
        int v6 = 0;
        double v5 = v5 - v27;
        goto LABEL_23;
      }
    }
    else
    {
      double v5 = 0.0;
    }
    int v6 = 1;
LABEL_23:
    static HorizontalAlignment.listRowSeparatorTrailing.getter();
    int v28 = *(void **)&v1[v18];
    if (v28)
    {
      id v29 = v28;
      objc_msgSend(v1, sel_bounds);
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
      lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
      double v13 = COERCE_DOUBLE(ViewRendererHost.explicitAlignment(of:at:)());
      char v31 = v30;

      if (v31)
      {
        int v14 = 1;
        if (!v11) {
          goto LABEL_28;
        }
      }
      else
      {
        objc_msgSend(v1, sel_bounds);
        int v14 = 0;
        double v13 = v32 - v13;
        if (!v11) {
          goto LABEL_28;
        }
      }
LABEL_11:
      type metadata accessor for UIColor();
      uint64_t v15 = swift_retain_n();
      id v16 = UIColor.init(_:)(v15);
      objc_msgSend(v1, sel_setSeparatorColor_, v16);

      swift_release_n();
      swift_release();
      double v10 = -1.0;
      if (!v6) {
        double v10 = v5;
      }
      if (v14) {
        goto LABEL_14;
      }
LABEL_31:
      double v17 = v13;
      goto LABEL_32;
    }
LABEL_27:
    double v13 = 0.0;
    int v14 = 1;
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_11;
  }
  double v10 = -1.0;
  if (!v6) {
    double v10 = v5;
  }
LABEL_14:
  double v17 = -1.0;
LABEL_32:
  objc_msgSend(v1, sel_setSeparatorInset_, 0.0, v10, 0.0, v17);
}

uint64_t outlined destroy of FocusItem?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI9FocusItemVSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s7SwiftUI9FocusItemVSgWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI9FocusItemVSgWOhTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t assignWithCopy for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  double v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  void *v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v10 != (v9 & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned int v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    if (v12 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v13 = *(unsigned __int8 *)(v11 + 17);
    if (v13 >= 2) {
      unsigned int v13 = *(_DWORD *)v11 + 2;
    }
    if (v13 == 1)
    {
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
      *(unsigned char *)(v10 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      *(unsigned char *)(v10 + 17) = 0;
    }
    swift_retain();
  }
  unint64_t v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(v14 + 9) = *(unsigned char *)(v15 + 9);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  double v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_retain();
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t type metadata completion function for SidebarListBody.TableViewRoot()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t implicit closure #1 in static AlertTransformModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v7[0] = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  int v8 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  uint64_t v11 = type metadata accessor for AlertTransformModifier.Transform();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v9, v11, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return AssociatedTypeWitness;
}

uint64_t type metadata accessor for AlertTransformModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TransformBox.readValue(from:key:read:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = *(void *)(*v4 + 112);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v15 - v12, (uint64_t)v4 + *(void *)(v9 + 128), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 120) + 16))(a1, a2, a3, a4, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t _sSo14NSItemProviderCSgIego_ACIegr_TRTA_0@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t destroy for InsettableGroupedListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
    }
  }
  else
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    if (v10 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (((a1 + v8 + ((v6 + 16) & v7) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v11 + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

uint64_t assignWithCopy for DragGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1 + 8);
    if (*(unsigned char *)(a2 + 48))
    {
      long long v6 = *v4;
      long long v7 = v4[1];
      *(_OWORD *)((char *)v5 + 25) = *(long long *)((char *)v4 + 25);
      _OWORD *v5 = v6;
      v5[1] = v7;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(_OWORD *, long long *))(v8 - 8))(v5, v4);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  return a1;
}

uint64_t specialized static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

uint64_t type metadata accessor for FocusState.Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(long long *a1, Swift::Int a2, long long *a3, Swift::Int a4, Swift::Int a5, uint64_t a6)
{
  Swift::Int v114 = a5;
  uint64_t v116 = a3;
  uint64_t v117 = a6;
  uint64_t v115 = a1;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, MEMORY[0x1E4FBBD80]);
  uint64_t v112 = *(void *)(v8 - 8);
  Swift::Int v113 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v111 = (char *)&v104 - v9;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v131 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [ToolbarStorage.ID : Int], (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  uint64_t v12 = v11;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    CGFloat v122 = v10;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0) {
        goto LABEL_123;
      }
      uint64_t v33 = 0;
      uint64_t v34 = v122;
      uint64_t v35 = v115;
      while (1)
      {
        if (a2 == v33) {
          goto LABEL_118;
        }
        long long v36 = *v35;
        long long v37 = v35[2];
        long long v126 = v35[1];
        long long v127 = v37;
        long long v125 = v36;
        outlined retain of ToolbarStorage.ID((uint64_t)&v125);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v124[0] = v34;
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(&v125);
        uint64_t v41 = v34[2];
        BOOL v42 = (v39 & 1) == 0;
        uint64_t v43 = v41 + v42;
        if (__OFADD__(v41, v42)) {
          goto LABEL_119;
        }
        char v44 = v39;
        if (v34[3] >= v43)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v34 = *(void **)&v124[0];
            if ((v39 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v34 = *(void **)&v124[0];
            if ((v44 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, isUniquelyReferenced_nonNull_native);
          unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(&v125);
          if ((v44 & 1) != (v46 & 1)) {
            goto LABEL_124;
          }
          unint64_t v40 = v45;
          uint64_t v34 = *(void **)&v124[0];
          if ((v44 & 1) == 0)
          {
LABEL_32:
            v34[(v40 >> 6) + 8] |= 1 << v40;
            uint64_t v47 = (_OWORD *)(v34[6] + 48 * v40);
            long long v48 = v125;
            long long v49 = v127;
            v47[1] = v126;
            v47[2] = v49;
            _OWORD *v47 = v48;
            *(void *)(v34[7] + 8 * v40) = v33;
            uint64_t v50 = v34[2];
            BOOL v31 = __OFADD__(v50, 1);
            uint64_t v51 = v50 + 1;
            if (v31) {
              goto LABEL_121;
            }
            v34[2] = v51;
            outlined retain of ToolbarStorage.ID((uint64_t)&v125);
            goto LABEL_23;
          }
        }
        *(void *)(v34[7] + 8 * v40) = v33;
LABEL_23:
        ++v33;
        swift_bridgeObjectRelease();
        outlined release of ToolbarStorage.ID((uint64_t)&v125);
        v35 += 3;
        if (a2 == v33)
        {
          CGFloat v122 = v34;
          break;
        }
      }
    }
    if (v131[2] == a4 && v122[2] == a2)
    {
      if (a4 | a2)
      {
        Swift::Int v52 = 0;
        Swift::Int v53 = 0;
        uint64_t v54 = MEMORY[0x1E4FBC860];
        uint64_t v55 = (char *)MEMORY[0x1E4FBC860];
        while (1)
        {
          while (1)
          {
            uint64_t v56 = *(void *)(v54 + 16);
            uint64_t v57 = *((void *)v55 + 2);
            if (v57 + v56 > v117) {
              goto LABEL_112;
            }
            if (v53 != a2) {
              break;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v54 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56 + 1, 1, (char *)v54);
            }
            unint64_t v59 = *(void *)(v54 + 16);
            unint64_t v58 = *(void *)(v54 + 24);
            if (v59 >= v58 >> 1) {
              uint64_t v54 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, (char *)v54);
            }
            *(void *)(v54 + 16) = v59 + 1;
            *(void *)(v54 + 8 * v59 + 32) = v52++;
            Swift::Int v53 = a2;
            if (v52 >= a4) {
              goto LABEL_89;
            }
          }
          if (v52 == a4)
          {
            Swift::Int v60 = v53;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57 + 1, 1, v55);
            }
            unint64_t v62 = *((void *)v55 + 2);
            unint64_t v61 = *((void *)v55 + 3);
            if (v62 >= v61 >> 1)
            {
              unsigned __int8 v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v55);
              Swift::Int v63 = v60;
              uint64_t v55 = v97;
            }
            else
            {
              Swift::Int v63 = v60;
            }
            *((void *)v55 + 2) = v62 + 1;
            *(void *)&v55[8 * v62 + 32] = v63;
            Swift::Int v53 = v63 + 1;
            Swift::Int v52 = a4;
            goto LABEL_89;
          }
          uint64_t v110 = v54;
          uint64_t v111 = v55;
          Swift::Int v113 = v52;
          Swift::Int v114 = v53;
          uint64_t v64 = &v116[3 * v52];
          uint64_t v66 = *((void *)v64 + 1);
          uint64_t v65 = *((void *)v64 + 2);
          uint64_t v108 = *((void *)v64 + 3);
          uint64_t v109 = v65;
          uint64_t v67 = *((void *)v64 + 5);
          uint64_t v68 = &v115[3 * v53];
          uint64_t v70 = *((void *)v68 + 1);
          uint64_t v69 = *((void *)v68 + 2);
          uint64_t v71 = *((void *)v68 + 3);
          uint64_t v106 = *((void *)v64 + 4);
          uint64_t v107 = v71;
          uint64_t v72 = *((void *)v68 + 5);
          uint64_t v105 = *((void *)v68 + 4);
          uint64_t v120 = *(void *)v64;
          uint64_t v121 = v66;
          uint64_t v118 = *(void *)v68;
          uint64_t v119 = v70;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v112 = v70;
          swift_bridgeObjectRetain();
          if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0) {
            break;
          }
          if (v109 != v69) {
            break;
          }
          uint64_t v73 = v72;
          if (v108 != v107) {
            break;
          }
          uint64_t v54 = v110;
          if (!v67)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v73) {
              goto LABEL_96;
            }
LABEL_101:
            swift_bridgeObjectRelease();
LABEL_64:
            swift_bridgeObjectRelease();
            goto LABEL_65;
          }
          if (!v73)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_101;
          }
          if (v106 == v105 && v67 == v73)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_96:
            swift_bridgeObjectRelease();
            Swift::Int v95 = v113;
            swift_bridgeObjectRelease();
LABEL_103:
            Swift::Int v52 = v95 + 1;
            Swift::Int v53 = v114 + 1;
            uint64_t v55 = v111;
            if (v52 >= a4) {
              goto LABEL_89;
            }
          }
          else
          {
            LODWORD(v109) = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::Int v95 = v113;
            if (v109) {
              goto LABEL_103;
            }
LABEL_65:
            long long v74 = *v64;
            long long v75 = v64[2];
            v124[1] = v64[1];
            v124[2] = v75;
            v124[0] = v74;
            objc_super v76 = v122;
            uint64_t v77 = v122[2];
            outlined retain of ToolbarStorage.ID((uint64_t)v124);
            if (v77 && (unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v124), (v79 & 1) != 0))
            {
              char v80 = 0;
              uint64_t v81 = *(void *)(v76[7] + 8 * v78);
            }
            else
            {
              uint64_t v81 = 0;
              char v80 = 1;
            }
            uint64_t v55 = v111;
            long long v82 = *v68;
            long long v83 = v68[2];
            v123[1] = v68[1];
            v123[2] = v83;
            v123[0] = v82;
            uint64_t v84 = v131;
            if (!v131[2]) {
              goto LABEL_76;
            }
            outlined retain of ToolbarStorage.ID((uint64_t)v123);
            unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v123);
            if ((v86 & 1) == 0)
            {
              outlined release of ToolbarStorage.ID((uint64_t)v123);
LABEL_76:
              outlined release of ToolbarStorage.ID((uint64_t)v124);
              if (v80)
              {
LABEL_77:
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v54 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v54 + 16) + 1, 1, (char *)v54);
                }
                Swift::Int v52 = v113;
                goto LABEL_80;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
              }
              Swift::Int v52 = v113;
LABEL_87:
              unint64_t v92 = *((void *)v55 + 2);
              unint64_t v91 = *((void *)v55 + 3);
              int64_t v93 = v92 + 1;
              Swift::Int v94 = v114;
              if (v92 >= v91 >> 1) {
                goto LABEL_108;
              }
              goto LABEL_88;
            }
            Swift::Int v87 = *(void *)(v84[7] + 8 * v85);
            outlined release of ToolbarStorage.ID((uint64_t)v123);
            outlined release of ToolbarStorage.ID((uint64_t)v124);
            if (v80) {
              goto LABEL_77;
            }
            if (v81 >= v114)
            {
              Swift::Int v52 = v113;
              if (v87 < v113)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
                }
                goto LABEL_87;
              }
              if (v87 - v113 < v81 - v114)
              {
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  goto LABEL_80;
                }
LABEL_74:
                uint64_t v54 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v54 + 16) + 1, 1, (char *)v54);
                goto LABEL_80;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
              }
              Swift::Int v94 = v114;
              unint64_t v92 = *((void *)v55 + 2);
              unint64_t v91 = *((void *)v55 + 3);
              int64_t v93 = v92 + 1;
              if (v92 >= v91 >> 1)
              {
LABEL_108:
                uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v91 > 1), v93, 1, v55);
                Swift::Int v94 = v114;
                uint64_t v55 = v96;
              }
LABEL_88:
              *((void *)v55 + 2) = v93;
              *(void *)&v55[8 * v92 + 32] = v94;
              Swift::Int v53 = v94 + 1;
              if (v52 >= a4)
              {
LABEL_89:
                if (v53 >= a2) {
                  goto LABEL_112;
                }
              }
            }
            else
            {
              char v88 = swift_isUniquelyReferenced_nonNull_native();
              Swift::Int v52 = v113;
              if ((v88 & 1) == 0) {
                goto LABEL_74;
              }
LABEL_80:
              unint64_t v90 = *(void *)(v54 + 16);
              unint64_t v89 = *(void *)(v54 + 24);
              Swift::Int v53 = v114;
              if (v90 >= v89 >> 1)
              {
                uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v90 + 1, 1, (char *)v54);
                Swift::Int v53 = v114;
                uint64_t v54 = (uint64_t)v98;
              }
              *(void *)(v54 + 16) = v90 + 1;
              *(void *)(v54 + 8 * v90 + 32) = v52++;
              if (v52 >= a4) {
                goto LABEL_89;
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v54 = v110;
        goto LABEL_64;
      }
      uint64_t v55 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v54 = MEMORY[0x1E4FBC860];
LABEL_112:
      if (*((void *)v55 + 2) + *(void *)(v54 + 16) <= v117)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v54 = 0;
      }
    }
    else
    {
      *(void *)&v124[0] = v115;
      *((void *)&v124[0] + 1) = a2;
      *(void *)&v123[0] = v116;
      *((void *)&v123[0] + 1) = a4;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, MEMORY[0x1E4FBB0C0]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID();
      uint64_t v99 = v111;
      BidirectionalCollection<>.difference<A>(from:)();
      Swift::Int v100 = v113;
      uint64_t v101 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      uint64_t v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA14iJ11V2IDVGAXTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v101);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v102 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA14iJ11V2IDVGAXTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v102);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v112 + 8))(v99, v100);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v54;
  }
  if (a4 < 0) {
    goto LABEL_122;
  }
  uint64_t v110 = v12;
  uint64_t v13 = 0;
  uint64_t v14 = v131;
  uint64_t v15 = v116;
  while (a4 != v13)
  {
    long long v16 = *v15;
    long long v17 = v15[2];
    long long v129 = v15[1];
    long long v130 = v17;
    long long v128 = v16;
    outlined retain of ToolbarStorage.ID((uint64_t)&v128);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v125 = v14;
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(&v128);
    uint64_t v21 = v14[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      goto LABEL_117;
    }
    char v24 = v19;
    if (v14[3] >= v23)
    {
      if (v18)
      {
        uint64_t v14 = (void *)v125;
        if ((v19 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v14 = (void *)v125;
        if ((v24 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, v18);
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(&v128);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_124;
      }
      unint64_t v20 = v25;
      uint64_t v14 = (void *)v125;
      if ((v24 & 1) == 0)
      {
LABEL_14:
        v14[(v20 >> 6) + 8] |= 1 << v20;
        double v27 = (_OWORD *)(v14[6] + 48 * v20);
        long long v28 = v128;
        long long v29 = v130;
        v27[1] = v129;
        v27[2] = v29;
        *double v27 = v28;
        *(void *)(v14[7] + 8 * v20) = v13;
        uint64_t v30 = v14[2];
        BOOL v31 = __OFADD__(v30, 1);
        uint64_t v32 = v30 + 1;
        if (v31) {
          goto LABEL_120;
        }
        _DWORD v14[2] = v32;
        outlined retain of ToolbarStorage.ID((uint64_t)&v128);
        goto LABEL_5;
      }
    }
    *(void *)(v14[7] + 8 * v20) = v13;
LABEL_5:
    ++v13;
    swift_bridgeObjectRelease();
    outlined release of ToolbarStorage.ID((uint64_t)&v128);
    v15 += 3;
    if (a4 == v13)
    {
      uint64_t v131 = v14;
      uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of ToolbarStorage.ID(uint64_t a1)
{
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = a1[2];
  Swift::UInt v3 = a1[3];
  uint64_t v4 = a1[5];
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
    return v4;
  }
  uint64_t v5 = ~v3;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[2];
  uint64_t v14 = a1[4];
  uint64_t v15 = a1[5];
  while (1)
  {
    long long v6 = (void *)(*(void *)(v2 + 48) + 48 * v4);
    uint64_t v7 = v6[2];
    uint64_t v8 = v6[3];
    uint64_t v9 = v6[4];
    uint64_t v10 = v6[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0 && v7 == v17 && v8 == v16)
    {
      if (!v10)
      {
        swift_bridgeObjectRelease();
        if (!v15) {
          goto LABEL_22;
        }
        goto LABEL_15;
      }
      if (v15) {
        break;
      }
    }
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    unint64_t v4 = (v4 + 1) & v5;
    if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
      return v4;
    }
  }
  if (v9 != v14 || v10 != v15)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      return v4;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t outlined release of ToolbarStorage.ID(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SearchPrimitiveModifier.DefaultSearchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v24 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (unsigned __int8 *)((a1 + (v6 | v8 | 7) + 1) & ~(v6 | v8 | 7));
  uint64_t v10 = *(void *)(v5 + 64) + ((v6 + 9) & ~v6);
  unint64_t v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v13 = *(_DWORD *)(v5 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  if (v11 + ((v6 + 16) & v13) <= v12) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = v11 + ((v6 + 16) & v13);
  }
  unsigned int v15 = v9[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v9;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v9;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)v9 | (v9[2] << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v9;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 2;
        unsigned int v15 = v18 + 2;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v20 = ~v6;
  if (v15 == 1)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((((v6 + ((unint64_t)(v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v13) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v20, v4);
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((unint64_t)&v9[v6 + 9] & v20, v4);
    swift_release();
  }
  unint64_t v21 = (unint64_t)&v9[v14 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v22 = *(unsigned __int8 *)(v21 + 17);
  if (v22 >= 2) {
    unsigned int v22 = *(_DWORD *)v21 + 2;
  }
  if (v22 == 1) {
    swift_release();
  }
  swift_release();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))((v8 + v21 + 18) & ~v8, v24);
  if (*(void *)(((unint64_t)&v9[*(void *)(v7 + 64) + 8 + ((v8 + (v14 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v8)] & 0xFFFFFFFFFFFFFFF8)
                 + 8))
  {
    return swift_release();
  }
  return result;
}

void type metadata completion function for SwiftUISearchController()
{
  type metadata accessor for ToolbarStorage.SearchItem?(319, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ToolbarStorage.SearchItem?(319, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata completion function for InsettableGroupedListBody.TableViewRoot()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t UIHostingConfiguration.background<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v7 = *(_OWORD *)(a2 + 32);
  v11[1] = *(_OWORD *)(a2 + 16);
  uint64_t v12 = a3;
  long long v13 = v7;
  uint64_t v14 = a4;
  uint64_t v15 = a1;
  uint64_t v8 = type metadata accessor for _UIHostingConfigurationBackgroundView();
  uint64_t WitnessTable = swift_getWitnessTable();
  return UIHostingConfiguration.background<A>(content:)((void (*)(uint64_t))partial apply for closure #1 in UIHostingConfiguration.background<A>(_:), (uint64_t)v11, a2, v8, WitnessTable, a5);
}

uint64_t type metadata accessor for _UIHostingConfigurationBackgroundView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = *(_OWORD **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  unsigned int v11 = *(_DWORD *)(v2 + 64);
  uint64_t v12 = *(void *)(v2 + 72);
  long long v13 = v6[1];
  v15[0] = *v6;
  v15[1] = v13;
  void v15[2] = v6[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v15, v5, v7, v8, v9, v10, v11, v12, a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  long long v13;
  uint64_t result;
  _OWORD v15[3];

  uint64_t v6 = *(_OWORD **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  unsigned int v11 = *(_DWORD *)(v2 + 64);
  uint64_t v12 = *(void *)(v2 + 72);
  long long v13 = v6[1];
  v15[0] = *v6;
  v15[1] = v13;
  void v15[2] = v6[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v15, v5, v7, v8, v9, v10, v11, v12, a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))
{
  AGGraphClearUpdate();
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v23 = static RepresentableContextValues.current;
  uint64_t v20 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v11;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v12;
  char v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  outlined copy of RepresentableContextValues?(v23, v22, v21, v20, v14);
  outlined consume of RepresentableContextValues?(v23, v22, v21, v20, v14);
  uint64_t v15 = a9(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v16 = static RepresentableContextValues.current;
  long long v17 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v23;
  *((void *)&static RepresentableContextValues.current + 1) = v22;
  *(void *)&xmmword_1EB2E8DA0 = v21;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v20;
  char v18 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v14;
  outlined consume of RepresentableContextValues?(v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  AGGraphSetUpdate();
  return v15;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  long long v16;
  long long v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  AGGraphClearUpdate();
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  uint64_t v22 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v23 = static RepresentableContextValues.current;
  uint64_t v20 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v11;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v12;
  char v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  outlined copy of RepresentableContextValues?(v23, v22, v21, v20, v14);
  outlined consume of RepresentableContextValues?(v23, v22, v21, v20, v14);
  uint64_t v15 = a9(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v16 = static RepresentableContextValues.current;
  long long v17 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v23;
  *((void *)&static RepresentableContextValues.current + 1) = v22;
  *(void *)&xmmword_1EB2E8DA0 = v21;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v20;
  char v18 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v14;
  outlined consume of RepresentableContextValues?(v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  AGGraphSetUpdate();
  return v15;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

uint64_t ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v53 = a1;
  int v54 = a3;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a4;
  int v9 = *((_DWORD *)a4 + 2);
  uint64_t v10 = a4[2];
  int v12 = *((_DWORD *)a4 + 6);
  int v11 = *((_DWORD *)a4 + 7);
  int v62 = *((_DWORD *)a4 + 8);
  int v13 = *((_DWORD *)a4 + 9);
  int v60 = v11;
  int v61 = v13;
  uint64_t v56 = a4[5];
  uint64_t v50 = a4[6];
  uint64_t v52 = a4[8];
  int v51 = *((_DWORD *)a4 + 18);
  if (*(void *)(*(void *)(a5 - 8) + 64)) {
    closure #1 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1, a5);
  }
  int v55 = a2;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  closure #2 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1);
  int v49 = AGGraphCreateOffsetAttribute2();
  uint64_t v59 = v8;
  HIDWORD(v65) = HIDWORD(v8);
  int v66 = v9;
  uint64_t v15 = v10;
  uint64_t v67 = v10;
  int v68 = v12;
  int v69 = v60;
  int v70 = v62;
  int v71 = v61;
  uint64_t v16 = v56;
  uint64_t v72 = v56;
  uint64_t v17 = _GraphInputs.phase.getter();
  int v48 = v17;
  int v58 = v9;
  char v63 = 0;
  LODWORD(v65) = OffsetAttribute2;
  MEMORY[0x1F4188790](v17);
  int v57 = v12;
  uint64_t v41 = type metadata accessor for ToString();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<String?>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v40, v41, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  int v47 = v64;
  closure #3 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1);
  int v46 = AGGraphCreateOffsetAttribute2();
  closure #4 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1);
  int v55 = AGGraphCreateOffsetAttribute2();
  uint64_t v65 = v59;
  int v21 = v57;
  int v20 = v58;
  int v66 = v58;
  uint64_t v67 = v15;
  int v22 = v60;
  int v23 = v61;
  int v68 = v57;
  int v69 = v60;
  int v24 = v62;
  int v70 = v62;
  int v71 = v61;
  uint64_t v72 = v16;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v45 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v65 = v59;
  int v66 = v20;
  uint64_t v67 = v15;
  uint64_t v25 = v15;
  uint64_t v26 = v59;
  int v68 = v21;
  int v69 = v22;
  int v70 = v24;
  int v71 = v23;
  uint64_t v72 = v16;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v44 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v65 = v26;
  int v27 = v58;
  int v66 = v58;
  uint64_t v67 = v25;
  int v68 = v21;
  int v69 = v22;
  int v28 = v61;
  int v29 = v62;
  int v70 = v62;
  int v71 = v61;
  uint64_t v72 = v16;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v43 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v65 = v26;
  int v66 = v27;
  uint64_t v67 = v25;
  int v68 = v57;
  int v69 = v22;
  int v70 = v29;
  int v71 = v28;
  uint64_t v72 = v16;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v30 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  id v31 = (id)AGSubgraphGetCurrent();
  if (!v31) {
    __break(1u);
  }
  id v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  char v34 = v63;
  int v35 = v49;
  *(_DWORD *)a6 = v53;
  *(_DWORD *)(a6 + 4) = v35;
  int v36 = v51;
  *(_DWORD *)(a6 + 8) = v54;
  *(_DWORD *)(a6 + 12) = v36;
  *(_DWORD *)(a6 + 16) = v48;
  *(unsigned char *)(a6 + 20) = v34;
  int v37 = v46;
  *(_DWORD *)(a6 + 24) = v47;
  *(_DWORD *)(a6 + 28) = v37;
  int v38 = v44;
  *(_DWORD *)(a6 + 32) = v45;
  *(_DWORD *)(a6 + 36) = v38;
  *(_DWORD *)(a6 + 40) = v43;
  *(_DWORD *)(a6 + 44) = v30;
  *(_DWORD *)(a6 + 48) = v55;
  uint64_t v39 = v52;
  *(void *)(a6 + 56) = v32;
  *(void *)(a6 + 64) = v39;
  *(void *)(a6 + 72) = 0;
  return result;
}

uint64_t type metadata accessor for ToString()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #4 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarItem();
  uint64_t v3 = a1 + *(int *)(v2 + 60);
  v9[2] = v2;
  type metadata accessor for ViewTransform?(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_9, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t closure #3 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarItem();
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  void v8[2] = v2;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

uint64_t closure #2 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarItem();
  uint64_t v3 = a1 + *(int *)(v2 + 56);
  void v8[2] = v2;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

void type metadata accessor for Attribute<String?>()
{
  if (!lazy cache variable for type metadata for Attribute<String?>)
  {
    type metadata accessor for ViewTransform?(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<String?>);
    }
  }
}

uint64_t implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)()
{
  type metadata accessor for _PreferenceWritingModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)) {
    closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(1);
  }

  return AGGraphCreateOffsetAttribute2();
}

uint64_t closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1)
{
  v5[2] = type metadata accessor for _PreferenceWritingModifier();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, AssociatedTypeWitness, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t View.accessibilityLabel<A>(content:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v21[0] = a5;
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v21[2] = v11;
  v21[3] = v12;
  void v21[4] = MEMORY[0x1E4F40B88];
  v21[5] = v13;
  v21[6] = v14;
  v21[7] = MEMORY[0x1E4F40B80];
  uint64_t v15 = type metadata accessor for AccessibilityCustomPropertyModifier();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v21 - v18;
  a1(v17);
  AccessibilityCustomPropertyModifier.init(result:)((uint64_t)v10, a3, (uint64_t)v19);
  MEMORY[0x18C113660](v19, a2, v15, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t AccessibilityCustomPropertyModifier.init(result:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityCustomPropertyModifier<A, B, C>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), a5, *(_OWORD *)(a4 + 48));
}

double static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>, long long a9)
{
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_OWORD *)(a2 + 48);
  long long v57 = v14;
  int v58 = *(_DWORD *)(a2 + 80);
  int v60 = DWORD2(v56);
  uint64_t v59 = v56;
  *(void *)&long long v47 = v56;
  int v15 = *a1;
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v53 = *(_OWORD *)a2;
  long long v54 = v16;
  long long v55 = v13;
  char v17 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)&long long v47 = v56;
  DWORD2(v47) = DWORD2(v56);
  char v18 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v17 & 1) != 0 || (v18)
  {
    char v32 = v18;
    char v33 = v17;
    long long v22 = *(_OWORD *)(a2 + 48);
    long long v43 = *(_OWORD *)(a2 + 32);
    long long v44 = v22;
    long long v45 = *(_OWORD *)(a2 + 64);
    int v46 = *(_DWORD *)(a2 + 80);
    _ViewInputs.withoutGeometryDependencies.getter();
    type metadata accessor for PlaceholderContentView();
    _ViewInputs.pushModifierBody<A>(_:body:)();
    DWORD1(v49) &= DWORD1(v49) & 0xFFFFFFBF ^ 0x80;
    PreferencesInputs.remove<A>(_:)();
    PreferenceKeys.add(_:)();
    LODWORD(v39) = v15;
    *(void *)&long long v41 = a4;
    *((void *)&v41 + 1) = a5;
    *(void *)&long long v42 = a6;
    *((void *)&v42 + 1) = a7;
    long long v43 = a9;
    type metadata accessor for AccessibilityCustomPropertyModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    char v34 = a8;
    if (*(void *)(*(void *)(a5 - 8) + 64)) {
      closure #1 in static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(1, a4, a5, a6, a7, a9, *((uint64_t *)&a9 + 1));
    }
    type metadata accessor for ZStack();
    type metadata accessor for ModifiedContent();
    LODWORD(v39) = AGGraphCreateOffsetAttribute2();
    type metadata accessor for AccessibilityCustomPropertyModifier.PropertyChild();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    swift_getWitnessTable();
    lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
    swift_getWitnessTable();
    uint64_t v23 = static View.makeDebuggableView(view:inputs:)();
    uint64_t v24 = v39;
    unsigned int v26 = LODWORD(v40);
    unsigned int v25 = HIDWORD(v40);
    long long v43 = v55;
    long long v44 = v56;
    long long v45 = v57;
    int v46 = v58;
    long long v41 = v53;
    long long v42 = v54;
    int v27 = ((void *(*)(uint64_t *__return_ptr, uint64_t, long long *))a3)(&v39, v23, &v41);
    if (v33)
    {
      *(void *)&long long v41 = v24;
      *((void *)&v41 + 1) = __PAIR64__(v25, v26);
      _ViewOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      *(void *)&long long v41 = a4;
      *((void *)&v41 + 1) = a5;
      *(void *)&long long v42 = a6;
      *((void *)&v42 + 1) = a7;
      long long v43 = a9;
      type metadata accessor for AccessibilityCustomPropertyModifier.Attachment();
      swift_getWitnessTable();
      _GraphValue.init<A>(_:)();
      uint64_t v28 = v39;
      unint64_t v29 = *(void *)&v40;
      *(void *)&long long v41 = v59;
      DWORD2(v41) = v60;
      swift_bridgeObjectRetain();
      char v30 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      id v31 = v34;
      if (v30) {
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v38, &v53, v28, v29, 0);
      }
      swift_bridgeObjectRelease();
      LOBYTE(v41) = (v30 & 1) == 0;
      _ViewOutputs.subscript.setter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      if (v32)
      {
        *(void *)&long long v41 = v59;
        DWORD2(v41) = v60;
        MEMORY[0x1F4188790](v27);
        outlined retain of [Text.Modifier]((uint64_t)&v59);
        PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      id v31 = v34;
    }
    *(void *)id v31 = v39;
    double result = v40;
    v31[1] = v40;
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 48);
    long long v49 = *(_OWORD *)(a2 + 32);
    long long v50 = v19;
    long long v51 = *(_OWORD *)(a2 + 64);
    int v52 = *(_DWORD *)(a2 + 80);
    long long v20 = *(_OWORD *)(a2 + 16);
    long long v47 = *(_OWORD *)a2;
    long long v48 = v20;
    a3();
  }
  return result;
}

uint64_t closure #1 in static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  _OWORD v12[2] = type metadata accessor for AccessibilityCustomPropertyModifier();
  _OWORD v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t type metadata accessor for AccessibilityCustomPropertyModifier()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityCustomPropertyModifier.Attachment()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityCustomPropertyModifier.PropertyChild()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for Link()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for LinkDestination();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for ShadowRowCollection()
{
  uint64_t result = type metadata accessor for ShadowListUpdateRecorder();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void type metadata completion function for LoadingState()
{
  _s10Foundation3URLVSgMaTm_4(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata completion function for TaskResult()
{
  _s10Foundation3URLVSgMaTm_4(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TupleCommandContent.Visitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    v10[1] = v11[1];
    _OWORD v10[2] = v11[2];
    *(void *)(((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v71 = a4;
  uint64_t v6 = (void *)(*MEMORY[0x1E4FBC8C8] & *a3);
  uint64_t v7 = v6[92];
  uint64_t v69 = v6[94];
  uint64_t v91 = type metadata accessor for ShadowListDataSource();
  uint64_t v8 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  int64_t v93 = (char *)&v65 - v9;
  uint64_t v70 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v81 = type metadata accessor for Optional();
  uint64_t v72 = *(void (***)(uint64_t, uint64_t))(v81 - 8);
  MEMORY[0x1F4188790](v81);
  unint64_t v92 = (char *)&v65 - v11;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  char v80 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v79 = (char *)&v65 - v16;
  MEMORY[0x1F4188790](v17);
  unint64_t v78 = (char *)&v65 - v18;
  uint64_t v19 = type metadata accessor for IndexPath();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  long long v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v23 - 8);
  unsigned int v25 = (char *)&v65 - v24;
  uint64_t v26 = v6[95];
  Swift::Int v94 = a3;
  uint64_t v27 = v6[93];
  uint64_t v67 = v26;
  uint64_t v66 = v27;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v105 = Set.init()();
  uint64_t v28 = *(void *)(a2 + 16);
  uint64_t v68 = a2;
  if (v28)
  {
    char v30 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v29 = v20 + 16;
    uint64_t v31 = a2 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    Swift::Int v95 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 40);
    unint64_t v89 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 32);
    unint64_t v90 = v30;
    uint64_t v87 = *(void *)(v29 + 56);
    char v86 = (void (**)(char *, char *, uint64_t))(v29 + 16);
    unint64_t v85 = (void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v84 = (void (**)(char *, uint64_t))(v8 + 8);
    long long v83 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    long long v75 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    long long v74 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v73 = (void (**)(char *, uint64_t))(v12 + 8);
    long long v82 = (void (**)(uint64_t, uint64_t))(v29 - 8);
    ++v72;
    swift_bridgeObjectRetain();
    uint64_t v88 = v29;
    uint64_t v76 = v19;
    while (1)
    {
      v90(v25, v31, v19);
      int v37 = *v95;
      (*v95)(v25, 0, 1, v19);
      if ((*v89)(v25, 1, v19) == 1) {
        break;
      }
      (*v86)(v22, v25, v19);
      int v38 = (char *)v94 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v94) + 0x88);
      swift_beginAccess();
      uint64_t v39 = v93;
      double v40 = v38;
      uint64_t v41 = (uint64_t)v22;
      uint64_t v42 = v91;
      uint64_t v43 = (uint64_t)v92;
      (*v85)(v93, v40, v91);
      uint64_t WitnessTable = swift_getWitnessTable();
      ListCoreDataSource.selectionValue(forRowAt:)(v41, v42, WitnessTable, v43);
      (*v84)(v39, v42);
      if ((*v83)(v43, 1, AssociatedTypeWitness) == 1)
      {
        (*v82)(v41, v19);
        (*v72)(v43, v81);
      }
      else
      {
        char v32 = v25;
        char v33 = v78;
        (*v75)(v78, v43, AssociatedTypeWitness);
        (*v74)(v80, v33, AssociatedTypeWitness);
        type metadata accessor for Set();
        char v34 = v79;
        Set.insert(_:)();
        int v35 = *v73;
        (*v73)(v34, AssociatedTypeWitness);
        int v36 = v33;
        unsigned int v25 = v32;
        uint64_t v19 = v76;
        v35(v36, AssociatedTypeWitness);
        (*v82)(v41, v19);
      }
      long long v22 = (char *)v41;
      v31 += v87;
      if (!--v28)
      {
        v37(v25, 1, 1, v19);
        break;
      }
    }
  }
  else
  {
    long long v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    swift_bridgeObjectRetain();
    v45(v25, 1, 1, v19);
  }
  uint64_t v46 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v46);
  uint64_t v47 = v66;
  *(&v65 - 6) = v70;
  *(&v65 - 5) = v47;
  uint64_t v48 = v67;
  *(&v65 - 4) = v69;
  *(&v65 - 3) = v48;
  LODWORD(v63) = v71;
  v64._rawuint64_t Value = &v105;
  static Update.ensure<A>(_:)();
  uint64_t v49 = v96;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  UIMenuElementSize v50 = MEMORY[0x1E4FBC860];
  uint64_t v104 = MEMORY[0x1E4FBC860];
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  LOBYTE(v96) = 0;
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v52 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v53 = (*(unsigned __int8 *)(*(void *)(v52 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v52 - 8) + 80);
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v55 = __swift_project_value_buffer(v52, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of MenuVisitor.MenuStackGroup(v55, v54 + v53, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  char v56 = v96;
  uint64_t v96 = 0;
  char v97 = 0;
  uint64_t v98 = MEMORY[0x1E4FBC868];
  unint64_t v99 = v51;
  UIMenuElementSize v100 = v50;
  uint64_t v101 = MEMORY[0x1E4FBC868];
  char v102 = v56;
  uint64_t v103 = v54;
  MenuVisitor.visit(_:uniqueNames:)(v49, &v104);
  swift_bridgeObjectRelease();
  UIMenuElementSize v57 = v100;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = 0;
  v58._object = (void *)0xE000000000000000;
  v106.value.super.Class isa = 0;
  v106.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v59, v58, (Swift::String_optional)0, v106, 0, 0xFFFFFFFFFFFFFFFFLL, v57, v64);
  uint64_t v61 = v60;
  swift_bridgeObjectRelease();
  return v61;
}

void *type metadata accessor for OnScrollVisibilityGeometryAction()
{
  return &unk_1ED45D1F0;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static UIViewControllerRepresentable._makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345C60;
    v7._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345C60;
  v23._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345C10;
    v7._countAndFlagsBits = 0xD000000000000043;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345C10;
  v23._countAndFlagsBits = 0xD000000000000043;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._countAndFlagsBits = 0x7765695674736F48;
    v7._object = (void *)0xE800000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._object = (void *)0x8000000188336920;
  v22._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x7765695674736F48;
  v23._object = (void *)0xE800000000000000;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345B90;
    v7._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345B90;
  v23._countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345BD0;
    v7._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0
    || (type metadata accessor for UIKitAdaptableTabView(0), (AGTypeID.isValueType.getter() & 1) != 0))
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitAdaptableTabView>();
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345BD0;
  v23._countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345B00;
    v7._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345B00;
  v23._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345AD0;
    v7._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345AD0;
  v23._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  long long v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  int v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v28 == 1)
  {
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000188345B30;
    v7._countAndFlagsBits = 0xD000000000000059;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000188336960;
    String.append(_:)(v8);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v28 = *(void *)(a2 + 48);
    DWORD2(v28) = *(_DWORD *)(a2 + 56);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      unsigned int v10 = v28;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v11;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v12;
      LODWORD(v26) = v10;
      _ViewInputs.pushIdentity(_:)();
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v13;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v14;
      unsigned int v15 = _ViewInputs.animatedPosition()();
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v16;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v28 = *(_OWORD *)a2;
      long long v29 = v17;
      int v18 = _ViewInputs.animatedSize()();
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v30 = *(_OWORD *)(a2 + 32);
      long long v31 = v19;
      long long v32 = *(_OWORD *)(a2 + 64);
      int v33 = *(_DWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v28 = __PAIR64__(v15, v10);
      DWORD2(v28) = v18;
      HIDWORD(v28) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v28) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    *a3 = v24;
    uint64_t v20 = v25;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    LODWORD(v24) = a1;
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v28, a2, (double *)&v28);
    uint64_t v24 = *(void *)(a2 + 48);
    LODWORD(v25) = *(_DWORD *)(a2 + 56);
    uint64_t v26 = *(void *)(a2 + 48);
    int v27 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v28;
    uint64_t v20 = *((void *)&v28 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v22._countAndFlagsBits = 0xD000000000000034;
  v22._object = (void *)0x8000000188336920;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000188345B30;
  v23._countAndFlagsBits = 0xD000000000000059;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISplitViewController> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISplitViewController> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISplitViewController> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISplitViewController> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

uint64_t closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(uint64_t result, uint64_t a2, void *a3)
{
  if (result) {
    return result;
  }
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  long long v6 = (void *)(a2 + direct field offset for DragAndDropBridge.activeDrop);
  swift_beginAccess();
  if (*v6) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6[1] == 1;
  }
  if (!v7)
  {
    Strong = (void *)swift_weakLoadStrong();
    if (Strong)
    {
      (*(void (**)(void *__return_ptr, void))(v6[1] + 8))(v14, *Strong);
      if (v14[3])
      {
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DropDelegate);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
        if (swift_dynamicCast())
        {
          if (*((void *)&v16 + 1))
          {
            outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v20);
            uint64_t v9 = *((void *)&v21 + 1);
            uint64_t v10 = v22;
            __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
            (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v17 = 0;
          long long v15 = 0u;
          long long v16 = 0u;
        }
      }
      else
      {
        outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        long long v15 = 0u;
        long long v16 = 0u;
        uint64_t v17 = 0;
      }
      swift_release();
      outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v15, &lazy cache variable for type metadata for DropDelegate_Private?, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
    }
  }
LABEL_14:
  if (objc_msgSend(a3, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  uint64_t v11 = MEMORY[0x1E4FBC840] + 8;
  _sypSgWObTm_0((uint64_t)&v15, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  if (!*((void *)&v21 + 1))
  {
    _sypSgWOhTm_6((uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v11);
    goto LABEL_21;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_22;
  }
  swift_retain();
  swift_release();
  DragPayload.resolve()((uint64_t)&v20);
  swift_release();
LABEL_22:
  outlined init with copy of DropDestination?((uint64_t)&v20, (uint64_t)&v15, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  if (v19)
  {
    long long v12 = v18;
    outlined copy of AppIntentExecutor?((uint64_t)v18);
    outlined destroy of DragContext((uint64_t)&v15);
    if (v12)
    {
      v12(0);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v12);
    }
    long long v13 = &v20;
  }
  else
  {
    _sypSgWOhTm_6((uint64_t)&v20, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    long long v13 = &v15;
  }
  return _sypSgWOhTm_6((uint64_t)v13, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
}

uint64_t outlined destroy of LocationBasedSensoryFeedback?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for IntelligenceAppIntentsPayloadProviding?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for CVarArg(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t NavigationPath.withCollectionProxy(_:)(void (*a1)(uint64_t *))
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 8);
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v7 = *(void *)v1;
    uint64_t v5 = v7;
    swift_bridgeObjectRetain();
    a1(&v7);
    return outlined consume of NavigationPath.Representation(v5, v4, v3, 0);
  }
  return result;
}

uint64_t type metadata completion function for _TabViewValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TabViewStyleConfiguration();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t one-time initialization function for monitor()
{
  type metadata accessor for ModifierKeyMonitor();
  uint64_t v0 = swift_allocObject();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = 0;
  static DefaultModifierKeySource.monitor = v0;
  return result;
}

uint64_t type metadata accessor for ModifierKeyMonitor()
{
  return self;
}

void type metadata accessor for (UUID, UIMenuIdentifier)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for UUID();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

uint64_t implicit closure #2 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v10 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)v10 - v5, a1, v2, v4);
  uint64_t v12 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Binding<AttributedString>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_23, (uint64_t)v11, v2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v10[3];
}

uint64_t initializeWithCopy for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a8, a1, a4);
  long long v15 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v15 + 2) = a4;
  *((void *)v15 + 3) = a5;
  *((void *)v15 + 4) = a6;
  *((void *)v15 + 5) = a7;
  *((void *)v15 + 6) = a2;
  *((void *)v15 + 7) = a3;
  uint64_t result = type metadata accessor for TimelineView();
  uint64_t v17 = (uint64_t (**)(uint64_t))(a8 + *(int *)(result + 44));
  *uint64_t v17 = partial apply for closure #1 in TimelineView<>.init(_:content:);
  v17[1] = v15;
  return result;
}

{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;

  long long v16 = *(void *)(a4 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  long long v21 = (void *)swift_allocObject();
  void v21[2] = a4;
  v21[3] = a5;
  void v21[4] = a6;
  v21[5] = a7;
  v21[6] = a2;
  v21[7] = a3;
  TimelineView<>.init(_:content:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TimelineView<>.init(_:content:), (uint64_t)v21, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;

  long long v16 = *(void *)(a4 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  long long v21 = (void *)swift_allocObject();
  void v21[2] = a4;
  v21[3] = a5;
  void v21[4] = a6;
  v21[5] = a7;
  v21[6] = a2;
  v21[7] = a3;
  TimelineView<>.init(_:content:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TimelineView<>.init(_:content:), (uint64_t)v21, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

uint64_t getEnumTagSinglePayload for _ContentShapeModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t View.navigationTransitionEagerRenderEnabled(_:)()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for ToolbarBackgroundVisibility()
{
  return &type metadata for ToolbarBackgroundVisibility;
}

uint64_t type metadata completion function for ContentShapeResponder()
{
  type metadata accessor for _ContentShapeModifier();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ContentResponderHelper();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for FetchController()
{
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Swift::Void __swiftcall UIKitSearchBar.layoutSubviews()()
{
  unint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  unsigned int v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38.receiver = v1;
  v38.super_class = ObjectType;
  objc_msgSendSuper2(&v38, sel_layoutSubviews, v5);
  int v8 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
  if (v8)
  {
    id v32 = v8;
    id v9 = objc_msgSend(v1, sel_traitCollection);
    objc_msgSend(v9, sel_displayScale);
    double v11 = v10;

    double v12 = 1.0 / v11;
    objc_msgSend(v1, sel_safeAreaInsets);
    uint64_t v36 = v14;
    uint64_t v37 = v13;
    uint64_t v34 = v16;
    uint64_t v35 = v15;
    uint64_t v17 = *MEMORY[0x1E4FBBEA0];
    int v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v18(v7, v17, v3);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v12);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v12);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v12);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v12);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    v19(v7, v3);
    objc_msgSend(v1, sel_bounds);
    static Edge.Set.horizontal.getter();
    EdgeInsets.in(_:)();
    CGSize.inset(by:)();
    double v21 = v20;
    UIKitSearchBar.roundedScopeBarSizeThatFits(_:)(v20, INFINITY);
    double v23 = v22;
    EdgeInsets.originOffset.getter();
    double v25 = v24;
    objc_msgSend(v1, sel_bounds);
    CGFloat v27 = v25 + v26;
    v18(v7, v17, v3);
    CGFloat v33 = v27;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v12);
    double v28 = v33;
    v19(v7, v3);
    objc_msgSend(v1, sel_bounds);
    CGFloat v29 = CGRectGetMaxY(v39) - v23;
    v18(v7, v17, v3);
    CGFloat v33 = v29;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v12);
    double v30 = v33;
    v19(v7, v3);
    id v31 = v32;
    objc_msgSend(v32, sel_setFrame_, v28, v30, v21, v23);
  }
}

uint64_t FillShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)&long long v32 = *(void *)(a1 + 48);
  *((void *)&v32 + 1) = v2;
  swift_retain();
  swift_retain();
  EnvironmentValues.backgroundMaterial.getter();
  uint64_t v3 = *((void *)&v42 + 1);
  if (BYTE8(v42) != 0xFF)
  {
    uint64_t v8 = v42;
    swift_release();
    swift_release();
    *(unsigned char *)(a1 + 105) = 0;
    *(void *)&long long v42 = v8;
    BYTE8(v42) = v3;
    HIDWORD(v42) = HIDWORD(v3);
    ForegroundMaterialStyle._apply(to:)();
    return outlined consume of Material?(v8, v3);
  }
  swift_release();
  uint64_t result = swift_release();
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  switch(*(unsigned char *)(a1 + 24))
  {
    case 1:
      if (v6 == v7) {
        return result;
      }
      if (v7 < v6)
      {
        __break(1u);
        goto LABEL_33;
      }
      if (v6 >= v7)
      {
LABEL_33:
        __break(1u);
        return result;
      }
      uint64_t v28 = *(void *)a1;
      uint64_t v29 = *(void *)(a1 + 16);
      char v9 = *(void *)a1;
      do
      {
        uint64_t v30 = v6 + 1;
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v13 = *(void *)(a1 + 96);
        char v14 = *(unsigned char *)(a1 + 104);
        __int16 v15 = *(_WORD *)(a1 + 105);
        uint64_t v53 = v10;
        char v16 = *(unsigned char *)(a1 + 40);
        char v54 = v16;
        *(void *)&long long v55 = v11;
        *((void *)&v55 + 1) = v12;
        long long v17 = *(_OWORD *)(a1 + 80);
        long long v56 = *(_OWORD *)(a1 + 64);
        long long v57 = v17;
        uint64_t v58 = v13;
        char v59 = v14;
        __int16 v60 = v15;
        *(void *)unint64_t v51 = v28;
        *(_OWORD *)&v51[8] = xmmword_18834BB90;
        char v52 = 1;
        char v18 = 3;
        if ((unint64_t)v6 < 3) {
          char v18 = v6;
        }
        if (v6 >= 0) {
          char v19 = v18;
        }
        else {
          char v19 = 0;
        }
        *(void *)&long long v42 = v11;
        *((void *)&v42 + 1) = v12;
        outlined copy of _ShapeStyle_Shape.Result(v10, v16);
        swift_retain();
        swift_retain();
        swift_retain();
        FillShapeStyle.Kind.resolve(in:)((uint64_t *)&v42, v19);
        Color._apply(to:)();
        swift_release();
        uint64_t v20 = v53;
        char v21 = v54;
        long long v42 = *(_OWORD *)v51;
        *(void *)&long long v43 = *(void *)&v51[16];
        BYTE8(v43) = v52;
        *(void *)&long long v44 = v53;
        BYTE8(v44) = v54;
        long long v45 = v55;
        long long v46 = v56;
        long long v47 = v57;
        uint64_t v48 = v58;
        LOBYTE(v49) = v59;
        *(_WORD *)((char *)&v49 + 1) = v60;
        _ShapeStyle_Shape.stylePack.getter();
        *(void *)&long long v32 = v50;
        v31[0] = v9;
        _ShapeStyle_Pack.subscript.getter();
        swift_bridgeObjectRelease();
        long long v32 = v42;
        long long v33 = v43;
        long long v34 = v44;
        long long v35 = v45;
        long long v36 = v46;
        char v37 = v47;
        int v38 = DWORD1(v47);
        uint64_t v39 = *((void *)&v47 + 1);
        char v40 = v48;
        uint64_t v41 = v49;
        v31[39] = v9;
        double v22 = (void (*)(unsigned char *, void))_ShapeStyle_Shape.stylePack.modify();
        _ShapeStyle_Pack.subscript.setter();
        v22(v31, 0);
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        uint64_t result = swift_release();
        ++v6;
      }
      while (v29 != v30);
      return result;
    case 2:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      char v23 = 2;
      goto LABEL_18;
    case 3:
      goto LABEL_28;
    case 4:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      char v23 = 4;
LABEL_18:
      *(unsigned char *)(a1 + 24) = v23;
      goto LABEL_19;
    case 5:
      if (v7 | v6 | v5)
      {
LABEL_28:
        uint64_t v26 = AnyShapeStyle.init<A>(_:)();
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
        *(void *)(a1 + 32) = v26;
        char v27 = 2;
      }
      else
      {
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
        *(void *)(a1 + 32) = 0;
        char v27 = 4;
      }
      *(unsigned char *)(a1 + 40) = v27;
      return result;
    default:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(void *)(a1 + 16) = 0;
LABEL_19:
      char v24 = 3;
      if ((unint64_t)v5 < 3) {
        char v24 = v5;
      }
      if (v5 >= 0) {
        char v25 = v24;
      }
      else {
        char v25 = 0;
      }
      long long v42 = *(_OWORD *)(a1 + 48);
      FillShapeStyle.Kind.resolve(in:)((uint64_t *)&v42, v25);
      Color._apply(to:)();
      return swift_release();
  }
}

uint64_t FillShapeStyle.Kind.resolve(in:)(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  switch(a2)
  {
    case 1:
      EnvironmentValues.colorScheme.getter();
      int v4 = v20;
      uint64_t v18 = v3;
      uint64_t v19 = v2;
      EnvironmentValues.colorSchemeContrast.getter();
      BOOL v8 = v17 == 0;
      v9.n128_u64[0] = 0x3FC47AE147AE147BLL;
      if (v17) {
        v9.n128_f64[0] = 0.24;
      }
      double v10 = 0.32;
      double v11 = 0.4;
      goto LABEL_26;
    case 2:
      EnvironmentValues.colorScheme.getter();
      uint64_t v18 = v3;
      uint64_t v19 = v2;
      EnvironmentValues.colorSchemeContrast.getter();
      v9.n128_u64[0] = 0x3FBEB851EB851EB8;
      if (v17) {
        v9.n128_f64[0] = 0.2;
      }
      double v12 = 0.24;
      if (v17) {
        double v12 = 0.32;
      }
      if (v20) {
        v7.n128_f64[0] = v12;
      }
      else {
        v7.n128_f64[0] = v9.n128_f64[0];
      }
      LOBYTE(v18) = 0;
      v9.n128_u64[0] = 0x3FDD9D9D9D9D9D9ELL;
      goto LABEL_32;
    case 3:
      EnvironmentValues.colorScheme.getter();
      uint64_t v18 = v3;
      uint64_t v19 = v2;
      EnvironmentValues.colorSchemeContrast.getter();
      double v13 = 0.08;
      if (v17) {
        double v13 = 0.16;
      }
      double v14 = 0.18;
      if (v17) {
        double v14 = 0.26;
      }
      if (v20) {
        double v15 = v14;
      }
      else {
        double v15 = v13;
      }
      uint64_t v18 = v3;
      uint64_t v19 = v2;
      EnvironmentValues.colorScheme.getter();
      v9.n128_u64[0] = 0x3FDD1D1D1D1D1D1DLL;
      if (v20) {
        v9.n128_f64[0] = 0.462745098;
      }
      LOBYTE(v18) = 0;
      v6.n128_u64[0] = 0x3FE0101010101010;
      v5.n128_u64[0] = v9.n128_u64[0];
      v7.n128_f64[0] = v15;
      return MEMORY[0x18C113940](&v18, v9, v5, v6, v7);
    default:
      EnvironmentValues.colorScheme.getter();
      int v4 = v20;
      uint64_t v18 = v3;
      uint64_t v19 = v2;
      EnvironmentValues.colorSchemeContrast.getter();
      BOOL v8 = v17 == 0;
      v9.n128_u64[0] = 0x3FC999999999999ALL;
      if (v17) {
        v9.n128_f64[0] = 0.28;
      }
      double v10 = 0.36;
      double v11 = 0.44;
LABEL_26:
      if (!v8) {
        double v10 = v11;
      }
      if (v4) {
        v7.n128_f64[0] = v10;
      }
      else {
        v7.n128_f64[0] = v9.n128_f64[0];
      }
      LOBYTE(v18) = 0;
      v9.n128_u64[0] = 0x3FDE1E1E1E1E1E1ELL;
LABEL_32:
      v6.n128_u64[0] = 0x3FE0101010101010;
      v5.n128_u64[0] = v9.n128_u64[0];
      return MEMORY[0x18C113940](&v18, v9, v5, v6, v7);
  }
}

uint64_t outlined consume of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      uint64_t result = swift_release();
      break;
    case 1:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.didMoveToWindow()()
{
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v11, sel_didMoveToWindow);
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {

    uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper];
    if (v2)
    {
      uint64_t v3 = v2;
      _UIUpdateCycleRegisterIdleObserver();
      int v4 = &v3[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
      swift_beginAccess();
      if ((*((_DWORD *)v4 + 32) | *((_DWORD *)v4 + 26)))
      {
        __n128 v5 = (char *)MEMORY[0x18C119DF0](&v3[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView]);
        objc_msgSend(v5, sel_flashScrollIndicators);

        uint64_t v3 = v5;
      }
    }
    __n128 v6 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
    if ((v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize + 16] & 1) == 0)
    {
      __n128 v7 = specialized UIView.firstAncestorWhere(_:)(v0);
      if (v7)
      {
        BOOL v8 = v7;
        *(void *)__n128 v6 = 0;
        *((void *)v6 + 1) = 0;
        unsigned char v6[16] = 1;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v10 = swift_conformsToProtocol2();
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  else if (*(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper])
  {
    _UIUpdateCycleUnregisterIdleObserver();
  }
}

uint64_t NavigationSplitReader.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  __int16 v15 = *(_WORD *)(v1 + 48);
  __int16 v13 = *(_WORD *)(v1 + 50);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v14 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 72);
  char v19 = *(unsigned char *)(v1 + 81);
  char v20 = *(unsigned char *)(v1 + 80);
  uint64_t v18 = Namespace.wrappedValue.getter();
  uint64_t v17 = Namespace.wrappedValue.getter();
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_retain();
  swift_retain();
  outlined copy of HoverCallback();
  type metadata accessor for NavigationStateHost();
  lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost((unint64_t *)&lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost, (void (*)(uint64_t))type metadata accessor for NavigationStateHost);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v7 = StateObject.wrappedValue.getter();
  outlined consume of HoverCallback();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
  uint64_t v9 = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v21, v9);
  unsigned int v10 = (unsigned __int16)v21 >> 14;
  if (v10 < 2 || v10 == 3 && (unsigned __int16)v21 == 49152) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 3;
  }
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v17;
  *(unsigned char *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v16;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = v15;
  *(_WORD *)(a1 + 58) = v13;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 96) = v20;
  *(void *)(a1 + 104) = v11;
  return result;
}

uint64_t ListBatchUpdates.formUpdates<A>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v32 = a4;
  uint64_t v44 = a2;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v42 = a3;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v40 = a1;
  uint64_t v41 = v7;
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for CountingIndexListDataSource();
  uint64_t v43 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  long long v36 = (void (**)(char *, char *, uint64_t))((char *)&v30 - v9);
  uint64_t v34 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v10);
  long long v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CountingIndexListDataSource();
  uint64_t v37 = *(void *)(v12 - 8);
  uint64_t v38 = v12;
  MEMORY[0x1F4188790](v12);
  id v31 = (void (**)(char *, uint64_t))((char *)&v30 - v13);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for CountingIndex();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v46 = v14;
  uint64_t v47 = v15;
  uint64_t v48 = WitnessTable;
  uint64_t v49 = v17;
  type metadata accessor for ListUpdate();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(1);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(1);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(1);
  char v19 = v33;
  uint64_t v18 = v34;
  uint64_t v20 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v40, v32);
  uint64_t v21 = v31;
  double v22 = v19;
  uint64_t v23 = v20;
  (*(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v18 + 32))(v31, v22, v20);
  uint64_t v24 = v41;
  char v25 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v39, v44, v6);
  uint64_t v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v36, v25, v6);
  uint64_t v27 = v42;
  uint64_t v28 = v35;
  ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(v21, v26, v42, v23, v35);
  ListBatchUpdates.computeMoves<A>(from:to:)(v21, v26, v27, v23, v28);
  (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v43 + 8))(v26, v45);
  return (*(uint64_t (**)(void, uint64_t))(v37 + 8))(v21, v38);
}

uint64_t ListBatchUpdates.computeMoves<A>(from:to:)(void (**a1)(char *, uint64_t), void (**a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v352 = a5;
  uint64_t v347 = a2;
  v346 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v374 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v313 = type metadata accessor for CountingIndexCollection();
  long long v373 = *(void (**)(void))(v313 - 8);
  MEMORY[0x1F4188790](v313);
  uint64_t v312 = (uint64_t)&v285 - v7;
  swift_getAssociatedTypeWitness();
  uint64_t v370 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(char **)(AssociatedConformanceWitness + 8);
  uint64_t v377 = AssociatedConformanceWitness;
  long long v378 = v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v367 = type metadata accessor for CountingIndex();
  uint64_t v11 = v10;
  uint64_t v12 = v367;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v318 = swift_getTupleTypeMetadata2();
  uint64_t v296 = type metadata accessor for Optional();
  uint64_t v362 = *(void *)(v296 - 8);
  MEMORY[0x1F4188790](v296);
  uint64_t v295 = (void (**)(void))((char *)&v285 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v301 = (void (**)(char *, uint64_t))((char *)&v285 - v16);
  MEMORY[0x1F4188790](v17);
  v294 = (void (**)(void))((char *)&v285 - v18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v311 = type metadata accessor for CountingIndexCollection();
  long long v361 = *(void **)(v311 - 8);
  MEMORY[0x1F4188790](v311);
  uint64_t v310 = (uint64_t)&v285 - v19;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v358 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v321 = (char *)&v285 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v319 = (char *)&v285 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v345 = (char *)&v285 - v24;
  uint64_t v371 = TupleTypeMetadata2;
  long long v366 = *(void (***)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](v25);
  v293 = (char *)&v285 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  v344 = (char *)&v285 - v28;
  MEMORY[0x1F4188790](v29);
  char v298 = (char *)&v285 - v30;
  MEMORY[0x1F4188790](v31);
  uint64_t v342 = (char *)&v285 - v32;
  uint64_t v33 = v12;
  v340 = *(void (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x1F4188790](v34);
  v339 = (char *)&v285 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v328 = (char *)&v285 - v37;
  uint64_t v338 = type metadata accessor for CountingIndexCollection();
  uint64_t v377 = *(void *)(v338 - 8);
  MEMORY[0x1F4188790](v338);
  uint64_t v337 = (uint64_t)&v285 - v38;
  uint64_t v39 = v11;
  uint64_t v368 = swift_getTupleTypeMetadata2();
  uint64_t v354 = type metadata accessor for Optional();
  long long v363 = *(void (***)(char *, uint64_t))(v354 - 8);
  MEMORY[0x1F4188790](v354);
  os_log_type_t v309 = (char *)&v285 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  v308 = (char *)&v285 - v42;
  MEMORY[0x1F4188790](v43);
  id v307 = (Swift::Int *)((char *)&v285 - v44);
  MEMORY[0x1F4188790](v45);
  v323 = (Swift::Int *)((char *)&v285 - v46);
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (char *)&v285 - v48;
  swift_getAssociatedTypeWitness();
  uint64_t v348 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t v336 = type metadata accessor for CountingIndexCollection();
  v330 = *(void (***)(uint64_t, uint64_t))(v336 - 8);
  MEMORY[0x1F4188790](v336);
  uint64_t v335 = (uint64_t)&v285 - v50;
  unint64_t v51 = v375;
  uint64_t v376 = swift_getAssociatedTypeWitness();
  uint64_t v52 = *(void *)(v376 - 8);
  MEMORY[0x1F4188790](v376);
  uint64_t v327 = (char *)&v285 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v54);
  uint64_t v326 = (char *)&v285 - v55;
  MEMORY[0x1F4188790](v56);
  v329 = (char *)&v285 - v57;
  MEMORY[0x1F4188790](v58);
  v322 = (char *)&v285 - v59;
  MEMORY[0x1F4188790](v60);
  int v62 = (char *)&v285 - v61;
  uint64_t v63 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v334 = (char *)&v285 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v66);
  v325 = (char *)&v285 - v67;
  MEMORY[0x1F4188790](v68);
  uint64_t v299 = (char *)&v285 - v69;
  MEMORY[0x1F4188790](v70);
  long long v349 = (char *)&v285 - v71;
  MEMORY[0x1F4188790](v72);
  uint64_t v300 = (char *)&v285 - v73;
  MEMORY[0x1F4188790](v74);
  v324 = (char *)&v285 - v75;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v379 = v39;
  uint64_t v382 = v39;
  uint64_t v383 = v33;
  uint64_t v384 = WitnessTable;
  uint64_t v385 = v77;
  unint64_t v78 = v49;
  uint64_t v79 = type metadata accessor for ListUpdate();
  uint64_t v359 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  v289 = (char *)&v285 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v81);
  v288 = (char *)&v285 - v82;
  MEMORY[0x1F4188790](v83);
  id v292 = (char *)&v285 - v84;
  MEMORY[0x1F4188790](v85);
  Class v291 = (char *)&v285 - v86;
  MEMORY[0x1F4188790](v87);
  long long v378 = (char *)&v285 - v88;
  MEMORY[0x1F4188790](v89);
  long long v356 = (char *)&v285 - v90;
  uint64_t v91 = Array.init()();
  uint64_t v380 = *v51;
  uint64_t v381 = v91;
  uint64_t v92 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v360 = v92;
  RandomAccessCollection<>.indices.getter();
  Swift::Int v93 = 0;
  uint64_t v94 = v382;
  uint64_t v95 = v383;
  if (v382 == v383)
  {
LABEL_2:
    uint64_t v382 = v93;
    type metadata accessor for PartialRangeFrom<Int>();
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeSubrange<A>(_:)();
    uint64_t v382 = v381;
    swift_getWitnessTable();
    return Array.append<A>(contentsOf:)();
  }
  if (v383 < v382) {
    goto LABEL_57;
  }
  Swift::Int v93 = 0;
  uint64_t v355 = v359 + 40;
  v341 = (void (**)(char *, uint64_t))(v359 + 8);
  uint64_t v343 = v340 + 4;
  long long v365 = (void (**)(void))(v63 + 16);
  long long v350 = (void (**)(void))(v340 + 2);
  uint64_t v331 = (void (**)(uint64_t, uint64_t))(v377 + 8);
  uint64_t v303 = (void (**)(uint64_t, uint64_t))((char *)v373 + 8);
  long long v369 = v51 + 3;
  uint64_t v364 = v368 - 8;
  long long v353 = (void (**)(Swift::Int *, uint64_t))(v363 + 1);
  uint64_t v333 = (void (**)(char *, uint64_t))(v358 + 8);
  long long v363 = (void (**)(char *, uint64_t))(v52 + 8);
  v332 = v366 + 1;
  ++v340;
  long long v366 = (void (**)(char *, uint64_t))(v63 + 8);
  char v97 = (void (**)(void))(v63 + 32);
  v317 = v51 + 4;
  uint64_t v304 = v318 - 8;
  uint64_t v297 = (void (**)(char *, char *, uint64_t))(v358 + 16);
  v290 = (void (**)(void (**)(void), uint64_t))(v362 + 8);
  ++v330;
  unsigned __int8 v302 = (void (**)(uint64_t, uint64_t))(v361 + 1);
  v320 = (void (**)(char *, char *, uint64_t))(v52 + 16);
  long long v361 = v78;
  long long v358 = v62;
  uint64_t v357 = v79;
  uint64_t v362 = v383;
  long long v372 = v97;
  while (2)
  {
    if (v94 >= v95) {
      goto LABEL_54;
    }
    if (v94 != v93)
    {
      uint64_t v98 = v356;
      Array.subscript.getter();
      Array._makeMutableAndUnique()();
      uint64_t v99 = *v51;
      Array._checkSubscript_mutating(_:)(v93);
      (*(void (**)(unint64_t, char *, uint64_t))(v359 + 40))(v99+ ((*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80))+ *(void *)(v359 + 72) * v93, v98, v79);
    }
    ++v94;
    Array.subscript.getter();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v377 = v94;
        long long v373 = *v97;
        ((void (*)(char *, char *, uint64_t))v373)(v349, v378, v379);
        uint64_t v148 = type metadata accessor for CountingIndexListDataSource();
        uint64_t v149 = v337;
        CountingIndexListDataSource.sectionIDs.getter(v148, v337);
        v150 = v329;
        uint64_t v151 = v338;
        CountingIndexCollection.subscript.getter();
        uint64_t v152 = v149;
        uint64_t v153 = v368;
        (*v331)(v152, v151);
        uint64_t v154 = *v369;
        uint64_t v155 = v376;
        uint64_t v156 = (char *)swift_getAssociatedConformanceWitness();
        uint64_t v157 = v307;
        MEMORY[0x18C115450](v150, v154, v155, v153, v156);
        uint64_t v158 = *(void *)(v153 - 8);
        if ((*(unsigned int (**)(Swift::Int *, uint64_t, uint64_t))(v158 + 48))(v157, 1, v153) == 1)
        {
          (*v353)(v157, v354);
          (*v320)(v322, v150, v155);
          char v159 = v323;
          uint64_t v160 = (char *)v323 + *(int *)(v153 + 48);
          Swift::Int *v323 = v93;
          uint64_t v161 = v379;
          ((void (*)(char *, char *, uint64_t))*v365)(v160, v349, v379);
          (*(void (**)(Swift::Int *, void, uint64_t, uint64_t))(v158 + 56))(v159, 0, 1, v153);
          uint64_t v162 = v376;
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
          (*v363)(v150, v162);
          (*v366)(v349, v161);
        }
        else
        {
          unint64_t v316 = v156;
          Swift::Int v215 = *v157;
          id v216 = v299;
          uint64_t v217 = v379;
          ((void (*)(char *, char *, uint64_t))v373)(v299, (char *)v157 + *(int *)(v153 + 48), v379);
          v218 = v292;
          Array.subscript.getter();
          if (swift_getEnumCaseMultiPayload())
          {
            uint64_t v219 = *v366;
            (*v366)(v216, v217);
            (*v363)(v329, v155);
            v219(v349, v217);
            (*v341)(v218, v79);
          }
          else
          {
            uint64_t v271 = v359;
            (*(void (**)(char *, uint64_t))(v359 + 8))(v218, v79);
            (*v320)(v322, v329, v155);
            (*(void (**)(Swift::Int *, uint64_t, uint64_t, uint64_t))(v158 + 56))(v323, 1, 1, v153);
            type metadata accessor for Dictionary();
            uint64_t v272 = (uint64_t)v299;
            Dictionary.subscript.setter();
            uint64_t v273 = swift_getTupleTypeMetadata2();
            uint64_t v274 = v356;
            uint64_t v275 = &v356[*(int *)(v273 + 48)];
            uint64_t v276 = *v365;
            ((void (*)(char *, uint64_t, uint64_t))*v365)(v356, v272, v379);
            uint64_t v277 = (uint64_t)v349;
            ((void (*)(char *, char *, uint64_t))v276)(v275, v349, v379);
            swift_storeEnumTagMultiPayload();
            uint64_t v278 = v375;
            Array._makeMutableAndUnique()();
            uint64_t v279 = *v278;
            Array._checkSubscript_mutating(_:)(v215);
            (*(void (**)(unint64_t, char *, uint64_t))(v271 + 40))(v279+ ((*(unsigned __int8 *)(v271 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v271 + 80))+ *(void *)(v271 + 72) * v215, v274, v79);
            uint64_t v382 = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(v346, v272, v347, v277, v370, v348, v374, v352);
            swift_getWitnessTable();
            Array.append<A>(contentsOf:)();
            uint64_t v280 = *v366;
            (*v366)((char *)v272, v379);
            (*v363)(v329, v376);
            v280((char *)v277, v379);
            BOOL v197 = __OFSUB__(v93--, 1);
            if (v197) {
              goto LABEL_56;
            }
          }
        }
        unint64_t v78 = v361;
        int v62 = v358;
        goto LABEL_46;
      case 2u:
      case 5u:
        goto LABEL_60;
      case 3u:
        long long v373 = (void (*)(void))v93;
        uint64_t v377 = v94;
        uint64_t v163 = v371;
        uint64_t v164 = &v378[*(int *)(v371 + 48)];
        uint64_t v165 = (uint64_t)v325;
        v306 = (void (*)(void))*v97;
        ((void (*)(char *))v306)(v325);
        CGRect v166 = v328;
        id v167 = v164;
        uint64_t v168 = v367;
        uint64_t v305 = *v343;
        ((void (*)(char *, char *, uint64_t))v305)(v328, v167, v367);
        uint64_t v169 = (void (*)(void))&v342[*(int *)(v163 + 48)];
        unint64_t v315 = *v365;
        v315();
        uint64_t v170 = *v350;
        uint64_t v314 = v169;
        unint64_t v316 = (char *)v170;
        ((void (*)(void (*)(void), char *, uint64_t))v170)(v169, v166, v168);
        uint64_t v171 = type metadata accessor for CountingIndexListDataSource();
        uint64_t v172 = v335;
        CountingIndexListDataSource.sectionIDs.getter(v171, v335);
        uint64_t v173 = v326;
        uint64_t v174 = v336;
        CountingIndexCollection.subscript.getter();
        (*v330)(v172, v174);
        uint64_t v175 = v310;
        CountingIndexListDataSource.rowIDs(forSectionAt:)(v165, v171, v310);
        uint64_t v176 = v311;
        CountingIndexCollection.subscript.getter();
        uint64_t v177 = v368;
        (*v302)(v175, v176);
        uint64_t v178 = *v369;
        uint64_t v179 = v376;
        uint64_t v180 = swift_getAssociatedConformanceWitness();
        v181 = v308;
        MEMORY[0x18C115450](v173, v178, v179, v177, v180);
        LODWORD(v178) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v177 - 8) + 48))(v181, 1, v177);
        (*v353)((Swift::Int *)v181, v354);
        if (v178 == 1)
        {
          uint64_t v182 = v371;
          uint64_t v183 = *v317;
          uint64_t v184 = AssociatedTypeWitness;
          uint64_t v185 = swift_getAssociatedConformanceWitness();
          uint64_t v186 = v294;
          uint64_t v187 = v345;
          uint64_t v188 = v318;
          MEMORY[0x18C115450](v345, v183, v184, v318, v185);
          uint64_t v189 = *(void *)(v188 - 8);
          int v190 = (*(uint64_t (**)(void (**)(void), uint64_t, uint64_t))(v189 + 48))(v186, 1, v188);
          uint64_t v142 = v373;
          if (v190 == 1)
          {
            (*v290)(v186, v296);
            (*v297)(v319, v187, v184);
            int v191 = v301;
            uint64_t v192 = (char *)v301 + *(int *)(v188 + 48);
            *uint64_t v301 = v142;
            id v193 = &v192[*(int *)(v182 + 48)];
            uint64_t v194 = v342;
            v315();
            int v195 = v193;
            uint64_t v196 = v367;
            ((void (*)(char *, void (*)(void), uint64_t))v316)(v195, v314, v367);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(v191, 0, 1, v188);
            type metadata accessor for Dictionary();
            Dictionary.subscript.setter();
            (*v333)(v187, v184);
            (*v363)(v326, v376);
            (*v332)(v194, v371);
            (*v340)(v328, v196);
            (*v366)(v325, v379);
            goto LABEL_34;
          }
          id v287 = (char *)v185;
          uint64_t v247 = *(int *)(v182 + 48);
          os_log_type_t v248 = &v298[v247];
          v249 = *v186;
          uint64_t v250 = (char *)v186 + *(int *)(v188 + 48) + v247;
          uint64_t v251 = v379;
          char v97 = v372;
          v306();
          Class v286 = v248;
          uint64_t v252 = v250;
          uint64_t v253 = v367;
          ((void (*)(char *, char *, uint64_t))v305)(v248, v252, v367);
          unint64_t v51 = v375;
          uint64_t v229 = v288;
          v306 = v249;
          uint64_t v79 = v357;
          Array.subscript.getter();
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            unint64_t v254 = &v229[*(int *)(v182 + 48)];
            uint64_t v305 = *v340;
            v305(v254, v253);
            uint64_t v285 = *v366;
            v285(v229, v251);
            (*v297)(v319, v345, AssociatedTypeWitness);
            uint64_t v255 = v253;
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v301, 1, 1, v188);
            type metadata accessor for Dictionary();
            uint64_t v79 = v357;
            Dictionary.subscript.setter();
            uint64_t v256 = swift_getTupleTypeMetadata2();
            v257 = v356;
            id v287 = &v356[*(int *)(v256 + 48)];
            uint64_t v258 = &v356[*(int *)(v182 + 48)];
            v259 = v315;
            ((void (*)(char *, char *, uint64_t))v315)(v356, v342, v251);
            v260 = v258;
            uint64_t v261 = v255;
            uint64_t v262 = v255;
            uint64_t v263 = v316;
            ((void (*)(char *, void (*)(void), uint64_t))v316)(v260, v314, v262);
            id v264 = &v287[*(int *)(v182 + 48)];
            v259();
            ((void (*)(char *, char *, uint64_t))v263)(v264, v286, v261);
            swift_storeEnumTagMultiPayload();
            uint64_t v265 = v375;
            Array._makeMutableAndUnique()();
            uint64_t v266 = *v265;
            unint64_t v267 = v306;
            Array._checkSubscript_mutating(_:)((Swift::Int)v306);
            (*(void (**)(unint64_t, char *, uint64_t))(v359 + 40))(v266+ ((*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80))+ *(void *)(v359 + 72) * (void)v267, v257, v79);
            v268 = *v332;
            uint64_t v269 = v371;
            (*v332)(v298, v371);
            (*v333)(v345, AssociatedTypeWitness);
            (*v363)(v326, v376);
            v268(v342, v269);
            v305(v328, v261);
            v285(v325, v379);
            BOOL v197 = __OFSUB__(v142, 1);
            uint64_t v142 = (void (*)(void))((char *)v142 - 1);
            if (v197) {
              goto LABEL_58;
            }
            unint64_t v51 = v375;
            unint64_t v78 = v361;
            int v62 = v358;
            goto LABEL_35;
          }
          uint64_t v283 = v253;
          uint64_t v284 = *v332;
          (*v332)(v298, v182);
          (*v333)(v345, AssociatedTypeWitness);
          (*v363)(v326, v376);
          v284(v342, v182);
          (*v340)(v328, v283);
          (*v366)(v325, v251);
          goto LABEL_51;
        }
        (*v333)(v345, AssociatedTypeWitness);
        (*v363)(v173, v179);
        (*v332)(v342, v371);
        (*v340)(v166, v367);
        (*v366)((char *)v165, v379);
        goto LABEL_29;
      case 4u:
        long long v373 = (void (*)(void))v93;
        uint64_t v377 = v94;
        uint64_t v114 = v371;
        uint64_t v115 = &v378[*(int *)(v371 + 48)];
        uint64_t v116 = (uint64_t)v334;
        v306 = (void (*)(void))*v97;
        ((void (*)(char *))v306)(v334);
        uint64_t v117 = v339;
        uint64_t v118 = v115;
        uint64_t v119 = v367;
        uint64_t v305 = *v343;
        ((void (*)(char *, char *, uint64_t))v305)(v339, v118, v367);
        uint64_t v120 = &v344[*(int *)(v114 + 48)];
        uint64_t v314 = *v365;
        v314();
        uint64_t v121 = *v350;
        unint64_t v316 = v120;
        unint64_t v315 = v121;
        ((void (*)(char *, char *, uint64_t))v121)(v120, v117, v119);
        uint64_t v122 = type metadata accessor for CountingIndexListDataSource();
        uint64_t v123 = v337;
        CountingIndexListDataSource.sectionIDs.getter(v122, v337);
        uint64_t v124 = v327;
        uint64_t v125 = v338;
        CountingIndexCollection.subscript.getter();
        uint64_t v126 = v368;
        (*v331)(v123, v125);
        uint64_t v127 = v312;
        CountingIndexListDataSource.rowIDs(forSectionAt:)(v116, v122, v312);
        long long v128 = v321;
        uint64_t v129 = v313;
        CountingIndexCollection.subscript.getter();
        (*v303)(v127, v129);
        uint64_t v130 = *v369;
        uint64_t v131 = v376;
        uint64_t v132 = swift_getAssociatedConformanceWitness();
        uint64_t v133 = v309;
        MEMORY[0x18C115450](v124, v130, v131, v126, v132);
        LODWORD(v130) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48))(v133, 1, v126);
        (*v353)((Swift::Int *)v133, v354);
        if (v130 != 1)
        {
          (*v333)(v128, AssociatedTypeWitness);
          (*v363)(v124, v131);
          (*v332)(v344, v371);
          (*v340)(v339, v367);
          (*v366)(v334, v379);
LABEL_29:
          unint64_t v51 = v375;
          unint64_t v78 = v361;
          int v62 = v358;
          uint64_t v79 = v357;
          uint64_t v94 = v377;
          uint64_t v95 = v362;
          char v97 = v372;
          Swift::Int v93 = (Swift::Int)v373 + 1;
          if (__OFADD__(v373, 1)) {
            goto LABEL_53;
          }
          goto LABEL_47;
        }
        uint64_t v134 = v379;
        uint64_t v135 = *v317;
        uint64_t v136 = AssociatedTypeWitness;
        uint64_t v137 = swift_getAssociatedConformanceWitness();
        uint64_t v138 = v295;
        uint64_t v139 = v318;
        MEMORY[0x18C115450](v128, v135, v136, v318, v137);
        uint64_t v140 = *(void *)(v139 - 8);
        int v141 = (*(uint64_t (**)(void (**)(void), uint64_t, uint64_t))(v140 + 48))(v138, 1, v139);
        uint64_t v142 = v373;
        if (v141 == 1)
        {
          (*v290)(v138, v296);
          (*v297)(v319, v128, v136);
          uint64_t v143 = v301;
          char v144 = (char *)v301 + *(int *)(v139 + 48);
          *uint64_t v301 = v142;
          uint64_t v145 = &v144[*(int *)(v371 + 48)];
          v314();
          unint64_t v146 = v145;
          uint64_t v147 = v367;
          ((void (*)(char *, char *, uint64_t))v315)(v146, v316, v367);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v140 + 56))(v143, 0, 1, v139);
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
          (*v333)(v128, v136);
          (*v363)(v327, v376);
          (*v332)(v344, v371);
          (*v340)(v339, v147);
          (*v366)(v334, v134);
LABEL_34:
          unint64_t v51 = v375;
          unint64_t v78 = v361;
          int v62 = v358;
          uint64_t v79 = v357;
LABEL_35:
          uint64_t v94 = v377;
          uint64_t v95 = v362;
          char v97 = v372;
          BOOL v197 = __OFADD__(v142, 1);
          Swift::Int v93 = (Swift::Int)v142 + 1;
          if (v197) {
            goto LABEL_53;
          }
          goto LABEL_47;
        }
        id v287 = (char *)v137;
        uint64_t v220 = v139;
        uint64_t v221 = v371;
        uint64_t v222 = *(int *)(v371 + 48);
        v223 = v293;
        id v224 = &v293[v222];
        v225 = *v138;
        uint64_t v226 = (char *)v138 + *(int *)(v220 + 48) + v222;
        char v97 = v372;
        ((void (*)(char *))v306)(v293);
        Class v286 = v224;
        v227 = v226;
        uint64_t v228 = v367;
        ((void (*)(char *, char *, uint64_t))v305)(v224, v227, v367);
        unint64_t v51 = v375;
        uint64_t v229 = v289;
        v306 = v225;
        uint64_t v79 = v357;
        Array.subscript.getter();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v230 = &v229[*(int *)(v221 + 48)];
          uint64_t v305 = *v340;
          v305(v230, v228);
          uint64_t v285 = *v366;
          uint64_t v231 = v229;
          uint64_t v232 = v379;
          v285(v231, v379);
          (*v297)(v319, v321, AssociatedTypeWitness);
          uint64_t v233 = v228;
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v301, 1, 1, v220);
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
          uint64_t v234 = swift_getTupleTypeMetadata2();
          v235 = v356;
          uint64_t v236 = &v356[*(int *)(v234 + 48)];
          v237 = &v356[*(int *)(v221 + 48)];
          uint64_t v238 = v314;
          ((void (*)(char *, char *, uint64_t))v314)(v356, v293, v232);
          uint64_t v239 = v315;
          ((void (*)(char *, char *, uint64_t))v315)(v237, v286, v233);
          v240 = &v236[*(int *)(v221 + 48)];
          ((void (*)(char *, char *, uint64_t))v238)(v236, v344, v232);
          uint64_t v241 = v367;
          ((void (*)(char *, char *, uint64_t))v239)(v240, v316, v367);
          uint64_t v242 = v357;
          swift_storeEnumTagMultiPayload();
          v243 = v375;
          Array._makeMutableAndUnique()();
          uint64_t v244 = *v243;
          uint64_t v245 = v306;
          Array._checkSubscript_mutating(_:)((Swift::Int)v306);
          (*(void (**)(unint64_t, char *, uint64_t))(v359 + 40))(v244+ ((*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80))+ *(void *)(v359 + 72) * (void)v245, v235, v242);
          v246 = *v332;
          (*v332)(v293, v221);
          (*v333)(v321, AssociatedTypeWitness);
          (*v363)(v327, v376);
          v246(v344, v221);
          v305(v339, v241);
          v285(v334, v379);
          BOOL v197 = __OFSUB__(v142, 1);
          uint64_t v142 = (void (*)(void))((char *)v142 - 1);
          if (v197) {
            goto LABEL_59;
          }
          goto LABEL_34;
        }
        uint64_t v281 = v228;
        uint64_t v282 = *v332;
        (*v332)(v223, v221);
        (*v333)(v321, AssociatedTypeWitness);
        (*v363)(v327, v376);
        v282(v344, v221);
        (*v340)(v339, v281);
        (*v366)(v334, v379);
LABEL_51:
        (*v341)(v229, v79);
        unint64_t v78 = v361;
        int v62 = v358;
        uint64_t v94 = v377;
        uint64_t v95 = v362;
        BOOL v197 = __OFADD__(v142, 1);
        Swift::Int v93 = (Swift::Int)v142 + 1;
        if (!v197)
        {
LABEL_47:
          if (v95 == v94) {
            goto LABEL_2;
          }
          continue;
        }
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      case 6u:
        (*v341)(v378, v79);
        BOOL v197 = __OFADD__(v93++, 1);
        if (!v197) {
          goto LABEL_47;
        }
        goto LABEL_53;
      default:
        long long v373 = (void (*)(void))v93;
        uint64_t v377 = v94;
        UIMenuElementSize v100 = (void (*)(char *, char *, uint64_t))*v97;
        uint64_t v101 = v324;
        ((void (*)(char *, char *, uint64_t))*v97)(v324, v378, v379);
        uint64_t v102 = type metadata accessor for CountingIndexListDataSource();
        uint64_t v103 = v335;
        CountingIndexListDataSource.sectionIDs.getter(v102, v335);
        uint64_t v104 = v336;
        CountingIndexCollection.subscript.getter();
        (*v330)(v103, v104);
        uint64_t v105 = *v369;
        UIImage_optional v106 = v62;
        uint64_t v107 = v376;
        uint64_t v108 = swift_getAssociatedConformanceWitness();
        uint64_t v109 = v368;
        MEMORY[0x18C115450](v106, v105, v107, v368, v108);
        uint64_t v110 = *(void *)(v109 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v110 + 48))(v78, 1, v109) == 1)
        {
          (*v353)(v78, v354);
          (*v320)(v322, v106, v107);
          uint64_t v111 = v323;
          uint64_t v112 = (char *)v323 + *(int *)(v109 + 48);
          Swift::Int v113 = v373;
          Swift::Int *v323 = (Swift::Int)v373;
          ((void (*)(char *, char *, uint64_t))*v365)(v112, v101, v379);
          (*(void (**)(Swift::Int *, void, uint64_t, uint64_t))(v110 + 56))(v111, 0, 1, v109);
          Swift::Int v93 = (Swift::Int)v113;
          type metadata accessor for Dictionary();
          unint64_t v78 = v361;
          Dictionary.subscript.setter();
          (*v363)(v106, v107);
          (*v366)(v101, v379);
          int v62 = v106;
          uint64_t v79 = v357;
        }
        else
        {
          long long v198 = (char *)*v78;
          uint64_t v199 = v300;
          uint64_t v200 = v379;
          char v97 = v372;
          v100(v300, (char *)v78 + *(int *)(v109 + 48), v379);
          os_log_type_t v201 = v291;
          uint64_t v79 = v357;
          Array.subscript.getter();
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            uint64_t v270 = *v366;
            (*v366)(v199, v200);
            int v62 = v358;
            (*v363)(v358, v376);
            v270(v324, v200);
            (*v341)(v201, v79);
            uint64_t v94 = v377;
            uint64_t v95 = v362;
            unint64_t v51 = v375;
            Swift::Int v93 = (Swift::Int)v373 + 1;
            if (__OFADD__(v373, 1)) {
              goto LABEL_53;
            }
            goto LABEL_47;
          }
          uint64_t v202 = v359;
          (*(void (**)(char *, uint64_t))(v359 + 8))(v201, v79);
          uint64_t v203 = *v320;
          unint64_t v316 = v198;
          uint64_t v204 = v358;
          v203(v322, v358, v376);
          (*(void (**)(Swift::Int *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v323, 1, 1, v109);
          type metadata accessor for Dictionary();
          int v62 = v204;
          Dictionary.subscript.setter();
          uint64_t v205 = swift_getTupleTypeMetadata2();
          uint64_t v206 = v356;
          unint64_t v207 = &v356[*(int *)(v205 + 48)];
          unint64_t v208 = *v365;
          uint64_t v209 = (uint64_t)v324;
          ((void (*)(char *, char *, uint64_t))*v365)(v356, v324, v200);
          uint64_t v210 = (uint64_t)v300;
          ((void (*)(char *, char *, uint64_t))v208)(v207, v300, v200);
          swift_storeEnumTagMultiPayload();
          uint64_t v211 = v375;
          Array._makeMutableAndUnique()();
          uint64_t v212 = *v211;
          uint64_t v213 = v316;
          Array._checkSubscript_mutating(_:)((Swift::Int)v316);
          (*(void (**)(unint64_t, char *, uint64_t))(v202 + 40))(v212+ ((*(unsigned __int8 *)(v202 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80))+ *(void *)(v202 + 72) * (void)v213, v206, v79);
          uint64_t v382 = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(v346, v209, v347, v210, v370, v348, v374, v352);
          swift_getWitnessTable();
          Array.append<A>(contentsOf:)();
          uint64_t v214 = *v366;
          (*v366)((char *)v210, v200);
          (*v363)(v62, v376);
          v214((char *)v209, v200);
          Swift::Int v93 = (Swift::Int)v373 - 1;
          if (__OFSUB__(v373, 1)) {
            goto LABEL_55;
          }
          unint64_t v78 = v361;
        }
LABEL_46:
        uint64_t v94 = v377;
        uint64_t v95 = v362;
        char v97 = v372;
        unint64_t v51 = v375;
        BOOL v197 = __OFADD__(v93++, 1);
        if (v197) {
          goto LABEL_53;
        }
        goto LABEL_47;
    }
  }
}

uint64_t CountingIndexListDataSource.sectionIDs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v9, AssociatedTypeWitness);
}

void type metadata accessor for PartialRangeFrom<Int>()
{
  if (!lazy cache variable for type metadata for PartialRangeFrom<Int>)
  {
    unint64_t v0 = type metadata accessor for PartialRangeFrom();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Toolbar.VendedItem>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Toolbar.VendedItem>);
    }
  }
}

uint64_t type metadata completion function for InsettableGroupedListBody()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *assignWithCopy for SearchToolbarItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  char *v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  void v8[2] = *((unsigned char *)a2 + v7 + 2);
  v8[3] = *((unsigned char *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  _DWORD v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = *((unsigned __int8 *)a1 + v19 + 8);
  int v23 = *((unsigned __int8 *)a2 + v19 + 8);
  if (v22 == 255)
  {
    if (v23 == 255)
    {
      uint64_t v25 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v21[8];
      *(void *)uint64_t v20 = v25;
    }
    else
    {
      char v30 = v23 & 1;
      uint64_t v31 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(v31, v23 & 1);
      *(void *)uint64_t v20 = v31;
      *(unsigned char *)(v20 + 8) = v30;
    }
  }
  else if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
    char v24 = v21[8];
    *(void *)uint64_t v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = v24;
  }
  else
  {
    char v26 = v23 & 1;
    uint64_t v27 = *(void *)v21;
    outlined copy of PlatformItemCollection.Storage(v27, v23 & 1);
    uint64_t v28 = *(void *)v20;
    char v29 = *(unsigned char *)(v20 + 8);
    *(void *)uint64_t v20 = v27;
    *(unsigned char *)(v20 + 8) = v26;
    outlined consume of PlatformItemCollection.Storage(v28, v29);
  }
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v32 = v18[8];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)((char *)a2 + v32);
  uint64_t v36 = *(void *)((char *)a2 + v32 + 8);
  char v37 = *((unsigned char *)a2 + v32 + 16);
  outlined copy of Text.Storage(v35, v36, v37);
  uint64_t v38 = *(void *)v33;
  uint64_t v39 = *((void *)v33 + 1);
  char v40 = v33[16];
  *(void *)uint64_t v33 = v35;
  *((void *)v33 + 1) = v36;
  unsigned char v33[16] = v37;
  outlined consume of Text.Storage(v38, v39, v40);
  *((void *)v33 + 3) = *((void *)v34 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v41 = a3[6];
  uint64_t v42 = (uint64_t)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(void *)((char *)a1 + v41);
  uint64_t v45 = *(void *)((char *)a2 + v41);
  if (v44)
  {
    if (v45)
    {
      uint64_t v46 = *((void *)v43 + 1);
      *(void *)uint64_t v42 = v45;
      *(void *)(v42 + 8) = v46;
      *(_DWORD *)(v42 + 16) = *((_DWORD *)v43 + 4);
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      uint64_t v47 = (void *)*((void *)v43 + 4);
      uint64_t v48 = *(void **)(v42 + 32);
      *(void *)(v42 + 32) = v47;
      id v49 = v47;

      *(void *)(v42 + 40) = *((void *)v43 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v42 + 48) = *((_DWORD *)v43 + 12);
      *(void *)(v42 + 56) = *((void *)v43 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v42 + 64) = *((_DWORD *)v43 + 16);
      *(_DWORD *)(v42 + 68) = *((_DWORD *)v43 + 17);
      *(_DWORD *)(v42 + 72) = *((_DWORD *)v43 + 18);
      *(_DWORD *)(v42 + 76) = *((_DWORD *)v43 + 19);
      *(void *)(v42 + 80) = *((void *)v43 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v42);
      long long v53 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v53;
      long long v55 = *((_OWORD *)v43 + 3);
      long long v54 = *((_OWORD *)v43 + 4);
      long long v56 = *((_OWORD *)v43 + 2);
      *(void *)(v42 + 80) = *((void *)v43 + 10);
      *(_OWORD *)(v42 + 48) = v55;
      *(_OWORD *)(v42 + 64) = v54;
      *(_OWORD *)(v42 + 32) = v56;
    }
  }
  else if (v45)
  {
    uint64_t v50 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = v45;
    *(void *)(v42 + 8) = v50;
    *(_DWORD *)(v42 + 16) = *((_DWORD *)v43 + 4);
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    unint64_t v51 = (void *)*((void *)v43 + 4);
    *(void *)(v42 + 32) = v51;
    *(void *)(v42 + 40) = *((void *)v43 + 5);
    *(_DWORD *)(v42 + 48) = *((_DWORD *)v43 + 12);
    *(void *)(v42 + 56) = *((void *)v43 + 7);
    *(_DWORD *)(v42 + 64) = *((_DWORD *)v43 + 16);
    *(_DWORD *)(v42 + 68) = *((_DWORD *)v43 + 17);
    *(_DWORD *)(v42 + 72) = *((_DWORD *)v43 + 18);
    *(_DWORD *)(v42 + 76) = *((_DWORD *)v43 + 19);
    *(void *)(v42 + 80) = *((void *)v43 + 10);
    id v52 = v51;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v57 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *(_OWORD *)(v42 + 16) = v57;
    long long v58 = *((_OWORD *)v43 + 2);
    long long v59 = *((_OWORD *)v43 + 3);
    long long v60 = *((_OWORD *)v43 + 4);
    *(void *)(v42 + 80) = *((void *)v43 + 10);
    *(_OWORD *)(v42 + 48) = v59;
    *(_OWORD *)(v42 + 64) = v60;
    *(_OWORD *)(v42 + 32) = v58;
  }
  uint64_t v61 = a3[7];
  uint64_t v62 = (uint64_t)a1 + v61;
  uint64_t v63 = (char *)a2 + v61;
  uint64_t v64 = *(void *)((char *)a1 + v61);
  uint64_t v65 = *(void *)((char *)a2 + v61);
  if (v64)
  {
    if (v65)
    {
      uint64_t v66 = *((void *)v63 + 1);
      *(void *)uint64_t v62 = v65;
      *(void *)(v62 + 8) = v66;
      *(_DWORD *)(v62 + 16) = *((_DWORD *)v63 + 4);
      *(void *)(v62 + 24) = *((void *)v63 + 3);
      uint64_t v67 = (void *)*((void *)v63 + 4);
      uint64_t v68 = *(void **)(v62 + 32);
      *(void *)(v62 + 32) = v67;
      id v69 = v67;

      *(void *)(v62 + 40) = *((void *)v63 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v62 + 48) = *((_DWORD *)v63 + 12);
      *(void *)(v62 + 56) = *((void *)v63 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v62 + 64) = *((_DWORD *)v63 + 16);
      *(_DWORD *)(v62 + 68) = *((_DWORD *)v63 + 17);
      *(_DWORD *)(v62 + 72) = *((_DWORD *)v63 + 18);
      *(_DWORD *)(v62 + 76) = *((_DWORD *)v63 + 19);
      *(void *)(v62 + 80) = *((void *)v63 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v62);
      long long v73 = *((_OWORD *)v63 + 1);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v73;
      long long v75 = *((_OWORD *)v63 + 3);
      long long v74 = *((_OWORD *)v63 + 4);
      long long v76 = *((_OWORD *)v63 + 2);
      *(void *)(v62 + 80) = *((void *)v63 + 10);
      *(_OWORD *)(v62 + 48) = v75;
      *(_OWORD *)(v62 + 64) = v74;
      *(_OWORD *)(v62 + 32) = v76;
    }
  }
  else if (v65)
  {
    uint64_t v70 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = v65;
    *(void *)(v62 + 8) = v70;
    *(_DWORD *)(v62 + 16) = *((_DWORD *)v63 + 4);
    *(void *)(v62 + 24) = *((void *)v63 + 3);
    uint64_t v71 = (void *)*((void *)v63 + 4);
    *(void *)(v62 + 32) = v71;
    *(void *)(v62 + 40) = *((void *)v63 + 5);
    *(_DWORD *)(v62 + 48) = *((_DWORD *)v63 + 12);
    *(void *)(v62 + 56) = *((void *)v63 + 7);
    *(_DWORD *)(v62 + 64) = *((_DWORD *)v63 + 16);
    *(_DWORD *)(v62 + 68) = *((_DWORD *)v63 + 17);
    *(_DWORD *)(v62 + 72) = *((_DWORD *)v63 + 18);
    *(_DWORD *)(v62 + 76) = *((_DWORD *)v63 + 19);
    *(void *)(v62 + 80) = *((void *)v63 + 10);
    id v72 = v71;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v77 = *((_OWORD *)v63 + 1);
    *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
    *(_OWORD *)(v62 + 16) = v77;
    long long v78 = *((_OWORD *)v63 + 2);
    long long v79 = *((_OWORD *)v63 + 3);
    long long v80 = *((_OWORD *)v63 + 4);
    *(void *)(v62 + 80) = *((void *)v63 + 10);
    *(_OWORD *)(v62 + 48) = v79;
    *(_OWORD *)(v62 + 64) = v80;
    *(_OWORD *)(v62 + 32) = v78;
  }
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v81 = a3[9];
  uint64_t v82 = (uint64_t)a1 + v81;
  uint64_t v83 = (char *)a2 + v81;
  uint64_t v84 = *(void *)((char *)a1 + v81);
  uint64_t v85 = *(void *)((char *)a2 + v81);
  if (v84)
  {
    if (v85)
    {
      uint64_t v86 = *((void *)v83 + 1);
      *(void *)uint64_t v82 = v85;
      *(void *)(v82 + 8) = v86;
      *(_DWORD *)(v82 + 16) = *((_DWORD *)v83 + 4);
      *(void *)(v82 + 24) = *((void *)v83 + 3);
      uint64_t v87 = (void *)*((void *)v83 + 4);
      uint64_t v88 = *(void **)(v82 + 32);
      *(void *)(v82 + 32) = v87;
      id v89 = v87;

      *(void *)(v82 + 40) = *((void *)v83 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v82 + 48) = *((_DWORD *)v83 + 12);
      *(void *)(v82 + 56) = *((void *)v83 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v82 + 64) = *((_DWORD *)v83 + 16);
      *(_DWORD *)(v82 + 68) = *((_DWORD *)v83 + 17);
      *(_DWORD *)(v82 + 72) = *((_DWORD *)v83 + 18);
      *(_DWORD *)(v82 + 76) = *((_DWORD *)v83 + 19);
      *(void *)(v82 + 80) = *((void *)v83 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v82);
      long long v93 = *((_OWORD *)v83 + 1);
      *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
      *(_OWORD *)(v82 + 16) = v93;
      long long v95 = *((_OWORD *)v83 + 3);
      long long v94 = *((_OWORD *)v83 + 4);
      long long v96 = *((_OWORD *)v83 + 2);
      *(void *)(v82 + 80) = *((void *)v83 + 10);
      *(_OWORD *)(v82 + 48) = v95;
      *(_OWORD *)(v82 + 64) = v94;
      *(_OWORD *)(v82 + 32) = v96;
    }
  }
  else if (v85)
  {
    uint64_t v90 = *((void *)v83 + 1);
    *(void *)uint64_t v82 = v85;
    *(void *)(v82 + 8) = v90;
    *(_DWORD *)(v82 + 16) = *((_DWORD *)v83 + 4);
    *(void *)(v82 + 24) = *((void *)v83 + 3);
    uint64_t v91 = (void *)*((void *)v83 + 4);
    *(void *)(v82 + 32) = v91;
    *(void *)(v82 + 40) = *((void *)v83 + 5);
    *(_DWORD *)(v82 + 48) = *((_DWORD *)v83 + 12);
    *(void *)(v82 + 56) = *((void *)v83 + 7);
    *(_DWORD *)(v82 + 64) = *((_DWORD *)v83 + 16);
    *(_DWORD *)(v82 + 68) = *((_DWORD *)v83 + 17);
    *(_DWORD *)(v82 + 72) = *((_DWORD *)v83 + 18);
    *(_DWORD *)(v82 + 76) = *((_DWORD *)v83 + 19);
    *(void *)(v82 + 80) = *((void *)v83 + 10);
    id v92 = v91;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v97 = *((_OWORD *)v83 + 1);
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    *(_OWORD *)(v82 + 16) = v97;
    long long v98 = *((_OWORD *)v83 + 2);
    long long v99 = *((_OWORD *)v83 + 3);
    long long v100 = *((_OWORD *)v83 + 4);
    *(void *)(v82 + 80) = *((void *)v83 + 10);
    *(_OWORD *)(v82 + 48) = v99;
    *(_OWORD *)(v82 + 64) = v100;
    *(_OWORD *)(v82 + 32) = v98;
  }
  return a1;
}

uint64_t specialized View.onPlatformContainerSelection(_:isMomentary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = swift_getKeyPath();
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  long long v12 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a4 + 48) = v12;
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v4 + 64);
  uint64_t v13 = *(void *)(v4 + 80);
  long long v14 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_OWORD *)(a4 + 16) = v14;
  *(void *)(a4 + 80) = v13;
  *(void *)(a4 + 88) = a1;
  *(void *)(a4 + 96) = a2;
  *(unsigned char *)(a4 + 104) = a3;
  *(void *)(a4 + 112) = KeyPath;
  *(unsigned char *)(a4 + 120) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = v10;
  *(_WORD *)(a4 + 152) = 0;
  *(void *)(a4 + 160) = v11;
  *(unsigned char *)(a4 + 168) = 0;

  return outlined retain of ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(v4);
}

void *closure #1 in View.platformItemToggleState(_:)(void *result, char a2)
{
  unint64_t v2 = (void *)*result;
  uint64_t v3 = *(void *)(*result + 16);
  if (v3)
  {
    uint64_t v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      unint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (unint64_t i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v7 = type metadata accessor for PlatformItemList.Item();
      uint64_t v8 = *(void *)(v7 - 8);
      uint64_t result = (void *)(v7 - 8);
      *((unsigned char *)v2
      + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * i
      + 634) = a2;
    }
    void *v5 = v2;
  }
  return result;
}

uint64_t @objc NavigationSplitCoordinator.splitViewController(_:willHide:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  id v7 = a3;
  swift_retain();
  swift_retain();
  a5(v7, a4);

  swift_release();

  return swift_release();
}

Swift::Void __swiftcall NavigationSplitSidebarStateMachine.splitViewController(_:willShow:)(UISplitViewController *_, UISplitViewControllerColumn willShow)
{
  uint64_t v3 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.splitViewVisibility.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of Logger?((uint64_t)v8);
  }
  else
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v19 = _;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v21 = v18;
      *(_DWORD *)uint64_t v13 = 136315138;
      unint64_t v14 = 0xE700000000000000;
      uint64_t v15 = 0x7972616D697270;
      switch(willShow)
      {
        case UISplitViewControllerColumnPrimary:
          break;
        case UISplitViewControllerColumnSupplementary:
          unint64_t v14 = 0xED0000797261746ELL;
          uint64_t v15 = 0x656D656C70707573;
          break;
        case UISplitViewControllerColumnSecondary:
          unint64_t v14 = 0xE900000000000079;
          uint64_t v15 = 0x7261646E6F636573;
          break;
        case UISplitViewControllerColumnCompact:
          uint64_t v15 = 0x746361706D6F63;
          break;
        default:
          uint64_t v15 = 0x6E776F6E6B6E75;
          break;
      }
      uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v11, v12, "willShow %s", v13, 0xCu);
      uint64_t v16 = v18;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v16, -1, -1);
      MEMORY[0x18C119C60](v13, -1, -1);

      _ = v19;
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(_);
  if (willShow == UISplitViewControllerColumnSecondary && !*(void *)(v3 + 16))
  {
    uint64_t v17 = (void *)MEMORY[0x18C119DF0](v3 + 32);
    swift_unknownObjectWeakAssign();
    NavigationSplitSidebarStateMachine.coordinatedHost.didset(v17);
  }
}

uint64_t project #1 <A>(_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ObjectFallbackDelegateBox();
  type metadata accessor for UISceneDelegate();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox) = ObjectFallbackDelegateBox.__allocating_init(_:)(v4);
  return swift_release();
}

unint64_t type metadata accessor for UISceneDelegate()
{
  unint64_t result = lazy cache variable for type metadata for UISceneDelegate;
  if (!lazy cache variable for type metadata for UISceneDelegate)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneDelegate);
  }
  return result;
}

uint64_t ObjectFallbackDelegateBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for ObjectFallbackDelegateBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DateSequenceTimeline()
{
  return self;
}

id specialized DateSequenceTimeline.__allocating_init(identifier:schedule:)(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  id v10 = objc_allocWithZone(a3);
  outlined init with copy of TableColumnList((uint64_t)v14, (uint64_t)v10 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule);
  v13.receiver = v10;
  v13.super_class = a3;
  id v11 = objc_msgSendSuper2(&v13, sel_initWithIdentifier_configure_, a1, 0);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v11;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationPresentationAdaptorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t type metadata completion function for Picker()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

void *specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void, uint64_t, uint64_t, uint64_t))
{
  os_log_type_t v12 = v11;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v17 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v18 = (char *)v11 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v11) + 0x80);
  *((void *)v18 + 1) = 0;
  swift_unknownObjectWeakInit();
  *((unsigned char *)v11 + *(void *)((*v17 & *v11) + 0x88)) = 2;
  swift_weakInit();
  uint64_t v19 = *(void *)((*v17 & *v11) + 0xA0);
  type metadata accessor for UIView.SafeAreaHelper();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(unsigned char *)(v20 + 48) = 1;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(unsigned char *)(v20 + 88) = 1;
  *(void *)((char *)v11 + v19) = v20;
  int64x2_t v21 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int v22 = (int64x2_t *)((char *)v12 + *(void *)((*v17 & *v12) + 0xA8));
  int64x2_t *v22 = v21;
  v22[1] = v21;
  *((unsigned char *)v11 + *(void *)((*v17 & *v11) + 0xB0)) = 0;
  *((unsigned char *)v11 + *(void *)((*v17 & *v11) + 0xB8)) = 2;
  int v23 = (char *)v12 + *(void *)((*v17 & *v12) + 0xC0);
  *(void *)int v23 = 0;
  *((void *)v23 + 1) = 0;
  v23[16] = 1;
  *((unsigned char *)v11 + *(void *)((*v17 & *v11) + 0xC8)) = 0;
  char v24 = (char *)v12 + *(void *)((*v17 & *v12) + 0xD0);
  *(_OWORD *)char v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((_OWORD *)v24 + 2) = 0u;
  v24[48] = 1;
  uint64_t v25 = (void *)((char *)v12 + *(void *)((*v17 & *v12) + 0x68));
  *uint64_t v25 = a4;
  v25[1] = a5;
  *(_DWORD *)((char *)v11 + *(void *)((*v17 & *v11) + 0x70)) = a6;
  *(void *)((char *)v11 + *(void *)((*v17 & *v11) + 0x78)) = a1;
  *((void *)v18 + 1) = a3;
  swift_unknownObjectWeakAssign();
  char v26 = (char *)v12 + *(void *)((*v17 & *v12) + 0x90);
  *(void *)char v26 = 0;
  unsigned char v26[8] = 0;
  *((_DWORD *)v26 + 3) = 0;
  *(void *)((char *)v11 + *(void *)((*v17 & *v11) + 0x60)) = a7;
  v35.receiver = v11;
  v35.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v27 = objc_msgSendSuper2(&v35, sel_initWithHostedView_, 0);
  static Semantics.v6.getter();
  *((unsigned char *)v27 + *(void *)((*v17 & *v27) + 0x88)) = (isLinkedOnOrAfter(_:)() & 1) == 0;
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    id v28 = objc_msgSend(v27, sel_layer);
    objc_msgSend(v28, sel_setAllowsGroupOpacity_, 0);

    id v29 = objc_msgSend(v27, sel_layer);
    objc_msgSend(v29, sel_setAllowsGroupBlending_, 0);
  }
  specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(a4, a5, a6, a8, a9, a10, a11);

  swift_unknownObjectRelease();
  swift_release();
  return v27;
}

id specialized NavigationSplitCoordinator.makeSplitViewController(environment:seeds:splitViewControllerProxyStorage:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  *((void *)&v36 + 1) = a1[1];
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
  swift_retain_n();
  if (*((void *)&v36 + 1))
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  *(void *)&long long v36 = v5;
  swift_release_n();
  uint64_t v6 = *(void *)(v2 + 248);
  uint64_t v7 = *(void *)(v2 + 256);
  long long v8 = v38;
  uint64_t v9 = *(void *)(v2 + 264);
  *(_OWORD *)(v2 + 248) = v37;
  *(_OWORD *)(v2 + 264) = v8;
  outlined consume of NavigationEventHandlers?(v6, v7, v9);
  uint64_t v10 = *(void *)(v2 + 224);
  uint64_t v11 = *(void *)(v2 + 232);
  __int16 v12 = *(_WORD *)(v2 + 240);
  uint64_t v13 = *(void *)(v2 + 248);
  uint64_t v14 = *(void *)(v2 + 256);
  uint64_t v15 = *(void *)(v2 + 264);
  swift_beginAccess();
  *(void *)&long long v37 = v10;
  *((void *)&v37 + 1) = v11;
  LOWORD(v38) = v12;
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?(v13, v14, v15);
  type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v43);
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(v13, v14, v15);
  unsigned int v16 = (unsigned __int16)v43 >> 14;
  if (v16 >= 2)
  {
    if (v16 == 2)
    {
      uint64_t v17 = 2;
    }
    else if ((unsigned __int16)v43 == 49152)
    {
      uint64_t v17 = 1;
    }
    else
    {
      uint64_t v17 = 2;
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
  id v18 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSplitViewController()), sel_initWithStyle_, v17);
  if (a2)
  {
    swift_getKeyPath();
    *(void *)&long long v37 = a2;
    lazy protocol witness table accessor for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage();
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    *(void *)&long long v37 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    specialized NavigationSplitCoordinator.applyOverrides(from:to:)((uint64_t *)&v37, v18);
    swift_release();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v18, sel_setPrimaryBackgroundStyle_, (*(unsigned char *)(v3 + 208) & 1) == 0, (void)v36);
  objc_msgSend(v18, sel_setPreferredSplitBehavior_, qword_1883DF980[*(char *)(v3 + 192)]);
  objc_msgSend(v18, sel__setUsesExtraWidePrimaryColumn_, *(unsigned __int8 *)(v3 + 210));
  objc_msgSend(v18, sel_setDelegate_, v3);
  uint64_t v19 = *(void *)(v3 + 232);
  int v20 = *(_DWORD *)(v3 + 240);
  uint64_t v21 = *(void *)(v3 + 248);
  uint64_t v22 = *(void *)(v3 + 256);
  uint64_t v24 = *(void *)(v3 + 264);
  uint64_t v23 = *(void *)(v3 + 272);
  char v25 = *(unsigned char *)(v3 + 192);
  *(void *)&long long v37 = *(void *)(v3 + 224);
  *((void *)&v37 + 1) = v19;
  LODWORD(v38) = v20;
  *((void *)&v38 + 1) = v21;
  uint64_t v39 = v22;
  uint64_t v40 = v24;
  uint64_t v41 = v23;
  char v42 = v25;
  swift_retain();
  swift_retain();
  id v26 = v18;
  outlined copy of NavigationEventHandlers?(v21, v22, v24);
  uint64_t v27 = UISplitViewControllerVisibilityEngine.initialDisplayMode.getter();
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(v21, v22, v24);
  objc_msgSend(v26, sel_setPreferredDisplayMode_, v27);

  uint64_t v28 = *((void *)&v36 + 1);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>);
  uint64_t v29 = v36;
  swift_retain_n();
  if (*((void *)&v36 + 1))
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *((unsigned char *)v26 + OBJC_IVAR____TtC7SwiftUI24UIKitSplitViewController_allowsSecureDrawing) = v37;
  long long v37 = v36;
  if ((EnvironmentValues.isVisionEnabled.getter() & 1) == 0
    || (static Semantics.v6.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
  {
    uint64_t v30 = *(void *)(v3 + 248);
    uint64_t v31 = *(void *)(v3 + 256);
    uint64_t v32 = *(void *)(v3 + 264);
    BOOL v33 = *(unsigned __int8 *)(v3 + 243) << 8 == 512;
    swift_retain();
    swift_retain();
    id v34 = v26;
    outlined copy of NavigationEventHandlers?(v30, v31, v32);
    swift_release();
    swift_release();
    uint64_t v29 = v36;
    outlined consume of NavigationEventHandlers?(v30, v31, v32);
    uint64_t v28 = *((void *)&v36 + 1);
    objc_msgSend(v34, sel_setPresentsWithGesture_, v33);
  }
  *(void *)&long long v37 = v29;
  *((void *)&v37 + 1) = v28;
  NavigationSplitCoordinator.makeNavigationControllers(splitController:environment:)(v26, (uint64_t *)&v37);
  return v26;
}

uint64_t UISplitViewControllerVisibilityEngine.initialDisplayMode.getter()
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  double v20;
  __int16 v21;
  unsigned __int8 v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  __int16 v26;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  __int16 v3 = *((_WORD *)v0 + 8);
  __int16 v4 = *((_WORD *)v0 + 9);
  uint64_t v6 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[5];
  long long v8 = *((unsigned char *)v0 + 56);
  if ((unint64_t)v6 >= 2)
  {
    uint64_t v28 = *((unsigned char *)v0 + 56);
    uint64_t v9 = self;
    swift_retain();
    uint64_t v10 = objc_msgSend(v9, sel_mainScreen);
    objc_msgSend(v10, sel_bounds);
    __int16 v12 = v11;
    uint64_t v14 = v13;
    unsigned int v16 = v15;
    id v18 = v17;

    v33.origin.CGFloat x = v12;
    v33.origin.CGFloat y = v14;
    v33.size.double width = v16;
    v33.size.double height = v18;
    Width = CGRectGetWidth(v33);
    v34.origin.CGFloat x = v12;
    v34.origin.CGFloat y = v14;
    v34.size.double width = v16;
    v34.size.double height = v18;
    if (CGRectGetHeight(v34) >= Width) {
      int v20 = 1194.0;
    }
    else {
      int v20 = 1024.0;
    }
    v35.origin.CGFloat x = v12;
    v35.origin.CGFloat y = v14;
    v35.size.double width = v16;
    v35.size.double height = v18;
    LOBYTE(v32) = CGRectGetWidth(v35) >= v20;
    BYTE1(v32) = 1;
    v6(&v29, &v32);
    uint64_t v21 = v29;
    if ((v29 & 0xFF00) != 0x200)
    {
      uint64_t v29 = v1;
      uint64_t v30 = v2;
      uint64_t v31 = v3;
      swift_retain();
      swift_retain();
      outlined copy of NavigationEventHandlers?((uint64_t)v6, v5, v7);
      type metadata accessor for Binding<AnyNavigationSplitVisibility>();
      MEMORY[0x18C113DA0](&v32);
      char v25 = (unsigned __int16)v32 >> 14;
      if (v25 < 2 || v25 == 3 && (unsigned __int16)v32 == 49152)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v6, v5, v7);
        id v26 = 0x4000;
      }
      else
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v6, v5, v7);
        id v26 = 0x8000;
      }
      LOWORD(v29) = v21 & 0x1FF | v26;
      uint64_t v22 = v28;
      return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)(0, 1, v22);
    }
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
    long long v8 = v28;
  }
  if ((v4 & 0xFF00) == 0x200)
  {
    uint64_t v29 = v1;
    uint64_t v30 = v2;
    uint64_t v31 = v3;
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18C113DA0](&v32);
    LOWORD(v29) = v32;
    uint64_t v22 = v8;
    return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)(0, 1, v22);
  }
  uint64_t v29 = v1;
  uint64_t v30 = v2;
  uint64_t v31 = v3;
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?((uint64_t)v6, v5, v7);
  type metadata accessor for Binding<AnyNavigationSplitVisibility>();
  MEMORY[0x18C113DA0](&v32);
  uint64_t v23 = (unsigned __int16)v32 >> 14;
  if (v23 < 2 || v23 == 3 && (unsigned __int16)v32 == 49152) {
    uint64_t v24 = 2;
  }
  else {
    uint64_t v24 = 4;
  }
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?((uint64_t)v6, v5, v7);
  if (!(_BYTE)v4) {
    return 1;
  }
  if (v4 == 1) {
    return 2;
  }
  return v24;
}

uint64_t AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)(uint64_t result, char a2, unsigned __int8 a3)
{
  switch((unsigned __int16)*v3 >> 14)
  {
    case 1:
      if (!*v3) {
        goto LABEL_48;
      }
      if (!a3) {
        goto LABEL_24;
      }
      if (a3 == 1)
      {
        uint64_t result = 3;
      }
      else
      {
        uint64_t v8 = 2;
        if (((result - 3) & 0xFFFFFFFFFFFFFFFDLL) == 0) {
          uint64_t v8 = 3;
        }
        if (a2) {
          uint64_t result = 2;
        }
        else {
          uint64_t result = v8;
        }
      }
      break;
    case 2:
      if (!*v3) {
        goto LABEL_48;
      }
      if (*v3 == 1)
      {
        int v4 = a3;
        if (!a3) {
          goto LABEL_24;
        }
        goto LABEL_13;
      }
      if (!a3) {
        goto LABEL_55;
      }
      if (a3 == 1) {
        return 5;
      }
      if ((a2 & 1) != 0 || (unint64_t)(result - 3) >= 4) {
LABEL_55:
      }
        uint64_t result = 4;
      else {
        uint64_t result = qword_188359558[result - 3];
      }
      break;
    case 3:
      if (a3)
      {
        if (a3 == 1)
        {
          if (a2)
          {
            uint64_t result = 0;
          }
          else
          {
            if ((unint64_t)(result - 2) >= 5) {
              goto LABEL_48;
            }
            uint64_t result = qword_1883595A0[result - 2];
          }
        }
        else if (a2)
        {
          uint64_t result = 0;
        }
      }
      else if (a2)
      {
        uint64_t result = 0;
      }
      else
      {
        if ((unint64_t)(result - 2) >= 5) {
          goto LABEL_48;
        }
        uint64_t result = qword_188359578[result - 2];
      }
      break;
    default:
      if (*v3)
      {
        if (*v3 == 1)
        {
          int v4 = a3;
          if (a3)
          {
LABEL_13:
            uint64_t v5 = 2;
            uint64_t v6 = 2;
            if (((result - 3) & 0xFFFFFFFFFFFFFFFDLL) == 0) {
              uint64_t v6 = 3;
            }
            if ((a2 & 1) == 0) {
              uint64_t v5 = v6;
            }
            if (v4 == 1) {
              uint64_t result = 3;
            }
            else {
              uint64_t result = v5;
            }
          }
          else
          {
LABEL_24:
            uint64_t result = 2;
          }
        }
        else
        {
LABEL_48:
          uint64_t result = 1;
        }
      }
      else if (a3)
      {
        uint64_t v7 = 3;
        if (!(a2 & 1 | ((unint64_t)(result - 2) < 5))) {
          uint64_t v7 = 1;
        }
        if (a3 == 1) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 0;
        }
      }
      else if (a2 & 1 | ((unint64_t)(result - 2) < 5))
      {
        uint64_t result = 2;
      }
      else
      {
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

uint64_t type metadata accessor for UIKitSplitViewController()
{
  return self;
}

uint64_t type metadata accessor for TimelineView<>.AlwaysOnTimelinePreferenceWriter()
{
  return swift_getGenericMetadata();
}

void DropInfoAdaptor.originContentPath.getter(uint64_t a1@<X8>)
{
  __int16 v3 = (void *)MEMORY[0x18C119DF0](v1);
  long long v4 = 0uLL;
  if (!v3)
  {
    char v11 = -1;
    long long v12 = 0uLL;
LABEL_20:
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v12;
    *(unsigned char *)(a1 + 32) = v11;
    return;
  }
  id v5 = objc_msgSend(v3, sel_localDragSession, 0.0);
  swift_unknownObjectRelease();
  if (!v5)
  {
LABEL_19:
    char v11 = -1;
    long long v12 = 0uLL;
    long long v4 = 0uLL;
    goto LABEL_20;
  }
  id v6 = objc_msgSend(v5, sel_items);
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 != 1) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x18C117680](0, v7);
LABEL_8:
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v9, sel_localObject);

    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
    }
    uint64_t v13 = MEMORY[0x1E4FBC840] + 8;
    _sypSgWObTm_0((uint64_t)&v17, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    if (v21)
    {
      type metadata accessor for DragSourceContext();
      if (swift_dynamicCast())
      {
        swift_retain();
        swift_release();
        UIViewSnapshotResponder.contentPath.getter((uint64_t)&v17);
        long long v15 = v17;
        long long v16 = v18;
        char v11 = v19;
        swift_release();
        _sypSgWObTm_0((uint64_t)&v17, (uint64_t)v20, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
        if (v22 != 255)
        {
          long long v4 = v15;
          long long v12 = v16;
          goto LABEL_20;
        }
      }
    }
    else
    {
      _sypSgWOhTm_6((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v13);
    }
    goto LABEL_19;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v8 = *(id *)(v7 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

id specialized DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(void *a1, id a2)
{
  uint64_t v3 = v2;
  if (objc_msgSend(a1, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v29, 0, sizeof(v29));
  }
  uint64_t v5 = MEMORY[0x1E4FBC840] + 8;
  _sypSgWObTm_0((uint64_t)v29, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  if (!v32)
  {
    _sypSgWOhTm_6((uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v5);
    goto LABEL_13;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    id v21 = a2;
    return a2;
  }
  uint64_t v6 = *(void *)(v27[0] + 16);
  if (((*(uint64_t (**)(void))(class metadata base offset for DragDropDefaultPreviewResponder + *(void *)v6 + 40))() & 1) == 0)
  {
    swift_release();
    return 0;
  }
  uint64_t v7 = v3 + direct field offset for DragAndDropBridge.host;
  id result = (id)MEMORY[0x18C119DF0](v3 + direct field offset for DragAndDropBridge.host);
  id v26 = result;
  if (result)
  {
    unsigned int v25 = *(_DWORD *)(v6 + 312);
    id v9 = objc_allocWithZone(MEMORY[0x1E4FB1720]);
    swift_retain();
    id v10 = objc_msgSend(v9, sel_init);
    char v11 = self;
    id v12 = v10;
    id v13 = objc_msgSend(v11, sel_clearColor);
    objc_msgSend(v12, sel_setBackgroundColor_, v13);

    objc_msgSend(v12, sel__setPreviewMode_, *(void *)(v6 + 304));
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v27);
    uint64_t v14 = v27[0];
    uint64_t v15 = v27[1];
    uint64_t v17 = v27[2];
    uint64_t v16 = v27[3];
    unsigned __int8 v18 = v28;
    _sypSgWObTm_0((uint64_t)v27, (uint64_t)v29, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
    if (v30 != 255)
    {
      v31[0] = v14;
      v31[1] = v15;
      v31[2] = v17;
      uint64_t v32 = v16;
      unsigned __int8 v33 = v18;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
      outlined copy of Path.Storage(v14, v15, v17, v16, v18);
      id v19 = UIBezierPath.init(_:)((uint64_t)v31);
      objc_msgSend(v12, sel_setVisiblePath_, v19);

      outlined release of Path?((uint64_t)v27);
    }
    id v20 = specialized UIViewSnapshotResponder.portalTargetedPreview<A>(kind:id:host:parameters:options:)(2, v25, v26, v12, 4);

    if (v20)
    {
      swift_release();
      swift_release();
      return v20;
    }
    id result = (id)MEMORY[0x18C119DF0](v7);
    if (result)
    {
      unsigned __int8 v22 = result;
      specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(result, 0, 0, 8, 0);
      uint64_t v24 = v23;

      a2 = objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v24);
      swift_release();
      swift_release();

      return a2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t _sypSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_4(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for [Color.Resolved](0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWObTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for AccessibilityUIKitTraits?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t key path getter for EnvironmentValues.effectiveFont : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.effectiveFont.getter();
  *a1 = result;
  return result;
}

void *initializeWithCopy for InsettableGroupedListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  id v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    unsigned char *__dst = *__src;
    uint64_t v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v12;
    uint64_t v23 = ((unint64_t)v15 + v8 + 8) & v9;
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v16(v23, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  unint64_t v17 = ((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v18;
  long long v20 = *(_OWORD *)(v18 + 16);
  *(_WORD *)(v17 + 32) = *(_WORD *)(v18 + 32);
  *(_OWORD *)unint64_t v17 = v19;
  *(_OWORD *)(v17 + 16) = v20;
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 16))((*(unsigned __int8 *)(v21 + 80) + 34 + v17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (*(unsigned __int8 *)(v21 + 80) + 34 + v18) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return __dst;
}

uint64_t type metadata completion function for FocusStore.Entry()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for FocusStore.Entry.Target();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StackDepthModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void *assignWithCopy for LegacyBaseModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v11 = *(void *)(v5 + 40) + 7;
  uint64_t v9 = (uint64_t *)((v11 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (uint64_t *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v11) = -1;
  if ((unint64_t)*v9 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  else {
    uint64_t v12 = *v9;
  }
  int v13 = v12 - 1;
  uint64_t v14 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF) {
    uint64_t v11 = *v10;
  }
  int v15 = v11 - 1;
  if (v13 < 0)
  {
    if (v15 < 0)
    {
      uint64_t *v9 = v14;
      swift_retain();
      swift_release();
      v9[1] = v10[1];
      swift_retain();
      swift_release();
      goto LABEL_12;
    }
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  if ((v15 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    goto LABEL_12;
  }
  uint64_t *v9 = v14;
  v9[1] = v10[1];
  swift_retain();
  swift_retain();
LABEL_12:
  unint64_t v16 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (unint64_t)v10 + 19;
  unint64_t v18 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  int v19 = *(_DWORD *)v18;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)unint64_t v16 = v19;
  *(unsigned char *)(v16 + 5) = *(unsigned char *)(v18 + 5);
  *(unsigned char *)(v16 + 6) = *(unsigned char *)(v18 + 6);
  uint64_t v20 = ((unint64_t)v9 + 19) | 7;
  uint64_t v21 = v17 | 7;
  unint64_t v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((v17 | 7) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v23;
  swift_retain();
  swift_release();
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  unint64_t v24 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  swift_retain();
  swift_release();
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(unsigned char *)(v24 + 9) = *(unsigned char *)(v25 + 9);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ToolbarDefaultItemKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t specialized static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

uint64_t type metadata accessor for AccessibilityFocusState.Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for InsettableGroupedListBody.CollectionViewBody()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for SidebarListBody.CollectionViewBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void FlipForRTLTransform.value.getter(uint64_t a1@<X8>)
{
  int v2 = *(unsigned __int8 *)AGGraphGetValue();
  if (v2 == 2 || ((v2 & 1) == 0) == *(unsigned char *)AGGraphGetValue())
  {
    uint64_t Value = AGGraphGetValue();
    *(void *)a1 = *(void *)Value;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
    swift_retain();
  }
  else
  {
    uint64_t v3 = AGGraphGetValue();
    *(void *)a1 = *(void *)v3;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v3 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
    AGGraphGetValue();
    uint64_t v4 = swift_retain();
    *(double *)&unint64_t v5 = MEMORY[0x18C10C240](v4);
    ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(v6, v5));
    AGGraphGetValue();
    ViewSize.width.getter();
    *(_OWORD *)&v9.a = 0xBFF0000000000000;
    v9.c = 0.0;
    v9.d = 1.0;
    v9.tCGFloat x = v7;
    v9.tCGFloat y = 0.0;
    ViewTransform.appendAffineTransform(_:inverse:)(&v9, 1);
  }
}

uint64_t initializeWithCopy for ReuseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  outlined copy of ReuseMessage(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t outlined copy of ReuseMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned int v8 = a8 >> 4;
  if (v8 <= 9)
  {
    if (((1 << v8) & 0x37C) == 0)
    {
      if (v8 != 7) {
        return result;
      }
      swift_retain();
    }
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<DraggableTabModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DraggableTabModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DraggableTabModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DraggableTabModifier and conformance DraggableTabModifier, (uint64_t)&unk_1ED4806A8);
    lazy protocol witness table accessor for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DraggableTabModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<DropDestinationModifier>(255, a2, a3, a4, MEMORY[0x1E4F408E0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static NavigationStackStyledCore._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unsigned __int8 v30 = a4;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  unint64_t v6 = *(void *)a2;
  int v29 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  int v28 = *(_DWORD *)(a2 + 80);
  LODWORD(v33) = v5;
  type metadata accessor for NavigationStackStyledCore();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static NavigationStackStyledCore._makeView(view:inputs:)(1, a3);
  }
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v33) = v5;
  _GraphValue.value.getter();
  closure #2 in static NavigationStackStyledCore._makeView(view:inputs:)(1);
  unsigned int v26 = AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  unint64_t v15 = v33;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v16 = swift_release_n();
  MEMORY[0x1F4188790](v16);
  uint64_t v24 = type metadata accessor for NavigationStackStyledCore.NavigationStateStructureSeed();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<UInt32?>(0, &lazy cache variable for type metadata for Attribute<UInt32?>, &lazy cache variable for type metadata for UInt32?, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_27, (uint64_t)&v23, v24, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  int v19 = v31;
  type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot();
  unint64_t v33 = __PAIR64__(v26, OffsetAttribute2);
  int v34 = v19;
  *(void *)objc_super v35 = v15;
  type metadata accessor for NavigationStackStyledCore.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v33 = v6;
  int v34 = v29;
  *(void *)&v35[1] = v7;
  *(void *)&v35[3] = v8;
  *(void *)&v35[5] = v9;
  *(void *)&v35[7] = v10;
  *(void *)&v35[9] = v11;
  *(void *)&v35[11] = v12;
  *(void *)&v35[13] = v13;
  *(void *)&v35[15] = v14;
  v35[17] = v28;
  swift_getWitnessTable();
  uint64_t result = static View.makeDebuggableView(view:inputs:)();
  uint64_t v21 = v32;
  unint64_t v22 = v30;
  void *v30 = v31;
  v22[1] = v21;
  return result;
}

uint64_t closure #2 in static NavigationStackStyledCore._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigationStackStyledCore();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  _OWORD v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_14, (uint64_t)v7, (uint64_t)&type metadata for NavigationStackContext, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #1 in static NavigationStackStyledCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for NavigationStackStyledCore();
  void v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t type metadata accessor for NavigationStackStyledCore.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NavigationStackStyledCore.NavigationStateStructureSeed()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<UInt32?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for UInt32?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

double static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  int v14 = *((_DWORD *)a2 + 14);
  int v13 = *((_DWORD *)a2 + 15);
  int v15 = *((_DWORD *)a2 + 16);
  int v16 = *((_DWORD *)a2 + 17);
  int v17 = *((_DWORD *)a2 + 18);
  int v18 = *((_DWORD *)a2 + 19);
  int v19 = *((_DWORD *)a2 + 20);
  uint64_t v31 = *a2;
  int v32 = v5;
  uint64_t v33 = v6;
  int v34 = v7;
  int v35 = v8;
  int v36 = v10;
  int v37 = v9;
  uint64_t v29 = v11;
  uint64_t v38 = v11;
  uint64_t v39 = v12;
  int v40 = v14;
  int v41 = v13;
  int v27 = v15;
  int v28 = v13;
  int v42 = v15;
  int v43 = v16;
  int v25 = v17;
  int v26 = v16;
  int v44 = v17;
  int v45 = v18;
  int v23 = v19;
  int v24 = v18;
  int v46 = v19;
  a3(&v47, a1, &v31);
  uint64_t v31 = v12;
  int v32 = v14;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v31 = v4;
    int v32 = v5;
    uint64_t v33 = v6;
    int v34 = v7;
    int v35 = v8;
    int v36 = v10;
    int v37 = v9;
    uint64_t v38 = v29;
    uint64_t v39 = v12;
    int v40 = v14;
    int v41 = v28;
    int v42 = v27;
    int v43 = v26;
    int v44 = v25;
    int v45 = v24;
    int v46 = v23;
    swift_getKeyPath();
    _ViewInputs.mapEnvironment<A>(_:)();
    uint64_t v20 = swift_release();
    MEMORY[0x1F4188790](v20);
    uint64_t v31 = v12;
    int v32 = v14;
    MEMORY[0x1F4188790](v21);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(void *)a4 = v47;
  double result = v48;
  a4[1] = v48;
  return result;
}

uint64_t ForEach.reuseID<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
  swift_getKeyPath();
  type metadata accessor for KeyPath();
  uint64_t v5 = _AppendKeyPath.appending<A, B, C>(path:)();
  swift_release();
  uint64_t v6 = *(int *)(a1 + 68);
  uint64_t result = swift_release();
  *(void *)(a2 + v6) = v5;
  return result;
}

void type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, ToolbarStorage.Entry>)
  {
    type metadata accessor for ToolbarStorage.Entry(255);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, ToolbarStorage.Entry>);
    }
  }
}

uint64_t partial apply for closure #1 in closure #3 in _TaskValueModifier.InnerModifier.body(content:)()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  void *v4 = v3;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v6();
}

uint64_t assignWithCopy for UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = (long long *)(a1 + 8);
  int v8 = (long long *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v9)
    {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 16);
      if (*(unsigned char *)(a1 + 16) == 2)
      {
        if (v10 == 2)
        {
          long long v11 = *v8;
          *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
          long long *v7 = v11;
LABEL_18:
          swift_unknownObjectWeakCopyAssign();
          swift_unknownObjectWeakCopyAssign();
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
          swift_unknownObjectWeakCopyAssign();
          swift_unknownObjectWeakCopyAssign();
          swift_unknownObjectWeakCopyAssign();
          *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
          *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        swift_unknownObjectWeakCopyInit();
      }
      else
      {
        if (v10 == 2)
        {
          outlined destroy of PushTarget(a1 + 8);
          long long v17 = *(_OWORD *)(a2 + 17);
          long long *v7 = *v8;
          *(_OWORD *)(a1 + 17) = v17;
          goto LABEL_18;
        }
        swift_unknownObjectWeakCopyAssign();
      }
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v23 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v23;
      goto LABEL_18;
    }
    outlined destroy of Toolbar.UpdateContext(a1 + 8);
    long long v13 = *(_OWORD *)(a2 + 24);
    long long *v7 = *v8;
    *(_OWORD *)(a1 + 24) = v13;
    long long v14 = *(_OWORD *)(a2 + 88);
    long long v16 = *(_OWORD *)(a2 + 40);
    long long v15 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v14;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 56) = v15;
  }
  else if (v9)
  {
    if (*(unsigned char *)(a2 + 16) == 2)
    {
      long long v12 = *v8;
      *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
      long long *v7 = v12;
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v22 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v22;
    }
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 24);
    long long *v7 = *v8;
    *(_OWORD *)(a1 + 24) = v18;
    long long v19 = *(_OWORD *)(a2 + 40);
    long long v20 = *(_OWORD *)(a2 + 56);
    long long v21 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v21;
    *(_OWORD *)(a1 + 40) = v19;
    *(_OWORD *)(a1 + 56) = v20;
  }
  return a1;
}

void type metadata completion function for TaskConfig()
{
  _s10Foundation3URLVSgMaTm_4(319, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void storeEnumTagSinglePayload for _ContentShapeModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFE)
          {
            a1[v9] = a2 + 1;
          }
          else
          {
            long long v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

Swift::Void __swiftcall NavigationSplitCoordinator.splitViewController(_:willChangeTo:)(UISplitViewController *_, UISplitViewControllerDisplayMode willChangeTo)
{
  uint64_t v4 = *(void *)(v2 + 224);
  uint64_t v5 = *(void *)(v2 + 232);
  int v6 = *(_DWORD *)(v2 + 240);
  uint64_t v7 = *(void *)(v2 + 248);
  uint64_t v8 = *(void *)(v2 + 256);
  uint64_t v10 = *(void *)(v2 + 264);
  uint64_t v9 = *(void *)(v2 + 272);
  swift_beginAccess();
  char v11 = *(unsigned char *)(v2 + 192);
  *(void *)&long long v13 = v4;
  *((void *)&v13 + 1) = v5;
  int v14 = v6;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v10;
  uint64_t v18 = v9;
  char v19 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?(v7, v8, v10);
  NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(_, willChangeTo, &v13);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(v7, v8, v10);
}

void NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = v3;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = a3[1];
  long long v36 = *a3;
  long long v37 = v11;
  v38[0] = a3[2];
  *(_OWORD *)((char *)v38 + 9) = *(long long *)((char *)a3 + 41);
  static Log.splitViewVisibility.getter();
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    outlined destroy of Logger?((uint64_t)v10);
  }
  else
  {
    int v14 = Logger.logObject.getter();
    int v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, (os_log_type_t)v15))
    {
      int v33 = v15;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v35 = v32;
      *(_DWORD *)uint64_t v16 = 136315138;
      unint64_t v17 = 0xE900000000000063;
      uint64_t v18 = 0x6974616D6F747561;
      switch(a2)
      {
        case 0:
          break;
        case 1:
          unint64_t v17 = 0xED0000796C6E4F79;
          uint64_t v18 = 0x7261646E6F636573;
          break;
        case 2:
          uint64_t v18 = 0xD000000000000012;
          char v19 = "oneBesideSecondary";
          goto LABEL_13;
        case 3:
          long long v20 = "oneOverSecondary";
          goto LABEL_11;
        case 4:
          uint64_t v18 = 0xD000000000000012;
          char v19 = "twoBesideSecondary";
          goto LABEL_13;
        case 5:
          long long v20 = "twoOverSecondary";
LABEL_11:
          unint64_t v17 = (unint64_t)(v20 - 32) | 0x8000000000000000;
          uint64_t v18 = 0xD000000000000010;
          break;
        case 6:
          uint64_t v18 = 0xD000000000000014;
          char v19 = "twoDisplaceSecondary";
LABEL_13:
          unint64_t v17 = (unint64_t)(v19 - 32) | 0x8000000000000000;
          break;
        default:
          unint64_t v17 = 0xE700000000000000;
          uint64_t v18 = 0x6E776F6E6B6E75;
          break;
      }
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v14, (os_log_type_t)v33, "willChangeTo %s", v16, 0xCu);
      uint64_t v21 = v32;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v21, -1, -1);
      MEMORY[0x18C119C60](v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  uint64_t v22 = swift_allocObject();
  long long v23 = v37;
  *(_OWORD *)(v22 + 16) = v36;
  *(_OWORD *)(v22 + 32) = v23;
  *(_OWORD *)(v22 + 48) = v38[0];
  *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)v38 + 9);
  *(void *)(v22 + 80) = a1;
  *(void *)(v22 + 88) = a2;
  *(void *)(v22 + 96) = v4;
  outlined retain of UISplitViewControllerVisibilityEngine(&v36);
  id v24 = a1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  if (objc_msgSend(v24, sel_style))
  {
    id v25 = objc_msgSend(v24, sel_viewControllerForColumn_, 2);
    if (v25)
    {
      int v26 = v25;
      self;
      int v27 = (void *)swift_dynamicCastObjCClass();
      if (!v27)
      {
        id v30 = 0;
LABEL_26:

        goto LABEL_27;
      }
      id v28 = objc_msgSend(v27, sel_topViewController);

      if (v28)
      {
        type metadata accessor for UIHostingController<AnyView>();
        uint64_t v29 = swift_dynamicCastClass();
        if (v29) {
          id v30 = *(id *)(v29 + direct field offset for UIHostingController.host);
        }
        else {
          id v30 = 0;
        }
        int v26 = v28;
        goto LABEL_26;
      }
    }
  }
  id v30 = 0;
LABEL_27:
  uint64_t v31 = (void *)MEMORY[0x18C119DF0](v4 + 32);
  swift_unknownObjectWeakAssign();
  NavigationSplitSidebarStateMachine.coordinatedHost.didset(v31);
}

void *outlined retain of UISplitViewControllerVisibilityEngine(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?(v2, v3, v4);
  return a1;
}

void NavigationSplitSidebarStateMachine.coordinatedHost.didset(void *a1)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1 + 32;
  uint64_t v12 = (void *)MEMORY[0x18C119DF0](v1 + 32, v8);
  if (v12)
  {
    uint64_t v13 = v12;

    if (a1 && v13 == a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  static Log.splitViewVisibility.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Logger?((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    int v14 = (void *)MEMORY[0x18C119DF0](v1 + 32);
    if (v14)
    {
      uint64_t v38 = (uint64_t)v14;
    }
    else
    {
      uint64_t v38 = 0;
    }
    int v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v39 = (uint64_t)a1;
      uint64_t v40 = v37;
      *(_DWORD *)unint64_t v17 = 136315138;
      long long v36 = v17 + 4;
      type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for ObjectIdentifier?, MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB718]);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v15, v16, "old coordinatedHost: %s", v17, 0xCu);
      uint64_t v20 = v37;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      MEMORY[0x18C119C60](v17, -1, -1);
    }

    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v37 = v24;
      *(_DWORD *)long long v23 = 136315138;
      long long v36 = v23 + 4;
      uint64_t v39 = v38;
      uint64_t v40 = v24;
      type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for ObjectIdentifier?, MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB718]);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v21, v22, "new coordinatedHost: %s", v23, 0xCu);
      uint64_t v27 = v37;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v27, -1, -1);
      MEMORY[0x18C119C60](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  id v28 = (void *)MEMORY[0x1E4FBC8C8];
  if (a1)
  {
    uint64_t v29 = *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
    int v30 = *(_DWORD *)((char *)a1 + v29);
    BOOL v31 = __OFSUB__(v30, 1);
    int v32 = v30 - 1;
    if (v31)
    {
      __break(1u);
      return;
    }
    *(_DWORD *)((char *)a1 + v29) = v32 & ~(v32 >> 31);
  }
  int v33 = (void *)MEMORY[0x18C119DF0](v11);
  if (v33)
  {
    uint64_t v34 = *(void *)((*v28 & *v33) + 0x70);
    ++*(_DWORD *)((char *)v33 + v34);
  }
}

void type metadata accessor for UIHostingController<AnyView>()
{
  if (!lazy cache variable for type metadata for UIHostingController<AnyView>)
  {
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>);
    }
  }
}

SEL *specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1, SEL *a2, SEL *a3, uint64_t a4, void *a5)
{
  outlined init with copy of Any(a1, (uint64_t)v30);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  outlined init with copy of Any(a1, (uint64_t)v30);
  uint64_t v10 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    int v15 = v14;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *int v15 = v10;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA70], v13);
    swift_willThrow();
    return a2;
  }
  uint64_t v11 = v29;
  if (*MEMORY[0x1E4F1CFD0]) {
    BOOL v12 = v29 == (id)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v12 = 0;
  }
  if (v12 || *MEMORY[0x1E4F1CFC8] && v29 == (id)*MEMORY[0x1E4F1CFC8])
  {

    goto LABEL_11;
  }
  a2 = (SEL *)[v29 *a2];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v17 = objc_msgSend(objc_allocWithZone(NSNumber), *a3, a2);
  char v18 = static NSObject.== infix(_:_:)();

  if ((v18 & 1) == 0)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v20;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    id v21 = objc_msgSend(v29, sel_description, 0xD000000000000014, 0x8000000188330160);
    a2 = (SEL *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v23 = v22;

    v24._countAndFlagsBits = (uint64_t)a2;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x8000000188330180;
    v25._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v25);
    v26._countAndFlagsBits = a4;
    v26._object = a5;
    String.append(_:)(v26);
    v27._countAndFlagsBits = 46;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    uint64_t v28 = v31;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 104))(v28, *MEMORY[0x1E4FBBA78], v19);
    swift_willThrow();
  }

  return a2;
}

uint64_t get_witness_table_7SwiftUI4ViewRzSyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA13AlertModifierVyADyqd_0_AA07ActionsG033_CFAA2A4382B588C39EB2C5339BE6A4A5LLVGAA05EmptyC0VGGAaBHPxAaBHD1__AmA0cG0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 88), *(void *)(v1 + 96), *(unsigned __int8 *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

uint64_t closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v46 = a6;
  uint64_t v47 = a5;
  uint64_t v50 = a4;
  LODWORD(v54) = a3;
  uint64_t v53 = a2;
  uint64_t v56 = a7;
  uint64_t v15 = *(void *)(a9 - 8);
  uint64_t v55 = a14;
  MEMORY[0x1F4188790](a1);
  unint64_t v51 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int v45 = (char *)&v44 - v18;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  MEMORY[0x1F4188790](v19);
  id v21 = (char *)&v44 - v20;
  uint64_t v52 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v22);
  Swift::String v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v44 - v30;
  uint64_t v58 = a1;
  uint64_t v59 = v53;
  char v60 = v54;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v61);
  if (v61 == 1)
  {
    uint64_t v54 = v15;
    uint64_t v33 = v48;
    uint64_t v32 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v21, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v21, 1, a10) != 1)
    {
      uint64_t v37 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v24, v21, a10);
      uint64_t v38 = v51;
      v47(v24);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v24, a10);
      uint64_t v39 = v45;
      uint64_t v36 = v55;
      static ViewBuilder.buildExpression<A>(_:)(v38);
      uint64_t v40 = v54;
      int v41 = *(void (**)(char *, uint64_t))(v54 + 8);
      v41(v51, a9);
      static ViewBuilder.buildExpression<A>(_:)(v39);
      v41(v39, a9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, a9);
      uint64_t v34 = (uint64_t)v31;
      uint64_t v35 = (uint64_t)v28;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v32);
    uint64_t v15 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v28, 1, 1, a9);
  uint64_t v34 = (uint64_t)v31;
  uint64_t v35 = (uint64_t)v28;
  uint64_t v36 = v55;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v35, v34);
  int v42 = *(void (**)(char *, uint64_t))(v26 + 8);
  v42(v28, v25);
  uint64_t v57 = v36;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v31);
  return ((uint64_t (*)(char *, uint64_t))v42)(v31, v25);
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UINavigationController>, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void protocol witness for View.body.getter in conformance ResolvedToggleStyleBody(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  char v20 = *(unsigned char *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v7 = *(void **)(v1 + 72);
  if (v7) {
    uint64_t v9 = *(void *)(v1 + 48);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(void *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 88);
  if (v7) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v16 = v12;
  uint64_t v17 = v9;
  if (v7) {
    uint64_t v13 = v8 & 1;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v7) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v7) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v18 = v15;
  uint64_t v19 = v14;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v5, v6, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v17, v16, v13, v7);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v17, v16, v13, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v20;
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v18;
}

uint64_t @objc SheetBridge.adaptivePresentationStyle(for:traitCollection:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  uint64_t v9 = specialized SheetBridge.adaptivePresentationStyle(for:traitCollection:)(v7);

  return v9;
}

uint64_t specialized SheetBridge.adaptivePresentationStyle(for:traitCollection:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for SheetBridge.host);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_traitCollection);

    id v6 = objc_msgSend(v5, sel_userInterfaceIdiom);
    if (v6 == (id)6) {
      return -1;
    }
  }
  uint64_t v7 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v7, (uint64_t)v11);
  id v8 = (void *)PresentationState.Base.presentedVC.getter();
  outlined destroy of PresentationState((uint64_t)v11);
  if (!v8) {
    return -1;
  }
  uint64_t v9 = specialized PresentationHostingController.adaptivePresentationStyle(traitCollection:kind:)(a1, 2);

  return v9;
}

uint64_t specialized PresentationHostingController.adaptivePresentationStyle(traitCollection:kind:)(void *a1, char a2)
{
  id v5 = objc_msgSend(a1, sel_verticalSizeClass);
  if (v5 == (id)1)
  {
    id v6 = (void *)(v2 + direct field offset for PresentationHostingController.lastPresentationOptions);
    swift_beginAccess();
    if (!*v6)
    {
LABEL_9:
      if (objc_msgSend(a1, sel_verticalSizeClass) == (id)2) {
        return 5;
      }
      uint64_t v12 = a2;
      uint64_t v13 = &unk_1883B94A8;
      return v13[v12];
    }
    uint64_t v7 = (char *)v6 + 41;
    goto LABEL_7;
  }
  if (objc_msgSend(a1, sel_horizontalSizeClass) != (id)1) {
    return -1;
  }
  id v8 = (void *)(v2 + direct field offset for PresentationHostingController.lastPresentationOptions);
  swift_beginAccess();
  if (*v8)
  {
    uint64_t v7 = v8 + 5;
LABEL_7:
    int v9 = *v7;
    if (v9 == 6)
    {
LABEL_8:
      if (v5 == (id)1) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
    if (v9 != 2 || a2 == 1)
    {
      uint64_t result = -1;
      switch(*v7)
      {
        case 1:
        case 2:
          return result;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_9;
        case 5:
          if (objc_msgSend(a1, (SEL)&selRef__isFromSwiftUI) == (id)2) {
            return 8;
          }
          uint64_t v12 = a2;
          uint64_t v13 = &unk_1883B94D0;
          break;
        default:
          goto LABEL_8;
      }
      return v13[v12];
    }
    _StringGuts.grow(_:)(162);
    v14._countAndFlagsBits = 8257;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x800000018833D970;
    v16._countAndFlagsBits = 0x100000000000009ELL;
    String.append(_:)(v16);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    return -1;
  }
LABEL_17:
  if (a2 == 1) {
    return 2;
  }
  else {
    return -1;
  }
}

void *initializeWithCopy for NavigableListModifier.BoundListSelectionDetector(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  id v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  id v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v8 = *v7;
  int v9 = (void *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (void *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  void *v10 = *v9;
  uint64_t v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v12 = *v11;
  uint64_t v13 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  Swift::String v14 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = ((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (uint64_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v19 = *v18;
  *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)v18 + 5);
  *uint64_t v17 = v19;
  char v20 = (_DWORD *)(((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  id v21 = (_DWORD *)(((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *char v20 = *v21;
  uint64_t v22 = *(void *)(a3 + 16);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  unint64_t v25 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = v24 + 11;
  uint64_t v27 = (void *)(((unint64_t)v20 + v26) & v25);
  uint64_t v28 = (void *)(((unint64_t)v21 + v26) & v25);
  unint64_t v29 = *(void *)(v23 + 64);
  if (*(_DWORD *)(v23 + 84)) {
    size_t v30 = *(void *)(v23 + 64);
  }
  else {
    size_t v30 = v29 + 1;
  }
  if (v30 > v29) {
    unint64_t v29 = v30;
  }
  if (v29 <= 8) {
    uint64_t v31 = 8;
  }
  else {
    uint64_t v31 = v29;
  }
  unsigned int v32 = *((unsigned __int8 *)v28 + v31);
  if (v32 <= 2)
  {
    if (v32 == 2)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(v23 + 16))(v27, ((unint64_t)v21 + v26) & v25, v22);
      char v34 = 2;
    }
    else
    {
      if (v32 != 1)
      {
        *uint64_t v27 = *v28;
        *((unsigned char *)v27 + v31) = 0;
        swift_bridgeObjectRetain();
LABEL_20:
        uint64_t v33 = v31 + 1;
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(((unint64_t)v21 + v26) & v25, 1, v22))
      {
        memcpy(v27, v28, v30);
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v27, v28, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v22);
      }
      char v34 = 1;
    }
    *((unsigned char *)v27 + v31) = v34;
    goto LABEL_20;
  }
  uint64_t v33 = v31 + 1;
  memcpy(v27, (const void *)(((unint64_t)v21 + v26) & v25), v31 + 1);
LABEL_21:
  *((unsigned char *)v27 + v33) = *((unsigned char *)v28 + v33);
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<CodingKey>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CodingKey>)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for CodingKey);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    }
  }
}

uint64_t _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, void (*a3)(uint64_t)@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a12;
  uint64_t v31 = a13;
  uint64_t v32 = a14;
  uint64_t v33 = a15;
  uint64_t v34 = a16;
  uint64_t v35 = a17;
  uint64_t v36 = a2;
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v18, v20, v19 & 1, v21, a1, a3, a4, a6, a5, a7, (void (*)(uint64_t))partial apply for closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:), (uint64_t)v27, a8, a9, a10, a11, MEMORY[0x1E4F41618], a13, a14,
    a15,
    MEMORY[0x1E4F41610],
    a17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a12 - 8) + 8))(a2, a12);
}

uint64_t _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, void (*a13)(void), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v58 = a7;
  uint64_t v59 = a6;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v51 = a1;
  uint64_t v61 = a8;
  uint64_t v62 = a11;
  uint64_t v57 = a10;
  uint64_t v60 = a12;
  uint64_t v24 = *(void *)(a18 - 8);
  *(double *)&long long v25 = MEMORY[0x1F4188790](a1);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v63 = v25;
  uint64_t v64 = v29;
  uint64_t v65 = v28;
  uint64_t v66 = v31;
  uint64_t v67 = v30;
  uint64_t v32 = (int *)type metadata accessor for _IntroDocumentView();
  uint64_t v33 = (char *)a9 + v32[19];
  *(_OWORD *)uint64_t v33 = 0u;
  *((_OWORD *)v33 + 1) = 0u;
  uint64_t v52 = v32[20];
  *(void *)((char *)a9 + v52) = 0;
  *(void *)&long long v63 = MEMORY[0x1E4FBC860];
  a13();
  (*(void (**)(long long *, uint64_t, uint64_t))(a22 + 48))(&v63, a18, a22);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, a18);
  uint64_t v34 = *(void *)v33;
  uint64_t v35 = *((void *)v33 + 1);
  uint64_t v36 = *((void *)v33 + 2);
  uint64_t v37 = *((void *)v33 + 3);
  uint64_t v38 = a1;
  uint64_t v40 = v53;
  uint64_t v39 = v54;
  uint64_t v41 = v55;
  outlined copy of Text?(v38, v53, v54, v55);
  outlined consume of Text?(v34, v35, v36, v37);
  uint64_t v43 = v51;
  uint64_t v42 = v52;
  *(void *)uint64_t v33 = v51;
  *((void *)v33 + 1) = v40;
  *((void *)v33 + 2) = v39;
  *((void *)v33 + 3) = v41;
  *a9 = v56;
  uint64_t v44 = v63;
  uint64_t v45 = swift_bridgeObjectRelease();
  *(void *)((char *)a9 + v42) = v44;
  v59(v45);
  uint64_t v46 = (void *)((char *)a9 + v32[18]);
  uint64_t v47 = v57;
  void *v46 = v61;
  v46[1] = v47;
  uint64_t v48 = swift_retain();
  v62(v48);
  swift_release();
  return outlined consume of Text?(v43, v40, v39, v41);
}

unsigned char *initializeWithCopy for SearchPrimitiveModifier.DefaultSearchView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v67 = *(void *)(a3 + 16);
  uint64_t v66 = *(void *)(v67 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v66 + 80);
  uint64_t v10 = v8 | v9 | 7;
  uint64_t v11 = (unint64_t)&v5[v10 + 1] & ~v10;
  uint64_t v12 = (unint64_t)&a2[v10 + 1] & ~v10;
  uint64_t v13 = v8 + 9;
  uint64_t v14 = (v8 + 9) & ~v8;
  uint64_t v15 = *(void *)(v7 + 64);
  unint64_t v16 = ((v15 + v14) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v17 = *(_DWORD *)(v7 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  if (v16 + ((v8 + 16) & v17) <= ((v15 + v14) & 0xFFFFFFFFFFFFFFF8) + 24) {
    unint64_t v18 = ((v15 + v14) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  else {
    unint64_t v18 = v16 + ((v8 + 16) & v17);
  }
  unsigned int v19 = *(unsigned __int8 *)(v12 + v18);
  unsigned int v20 = v19 - 2;
  if (v19 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *(unsigned __int8 *)v12;
        goto LABEL_13;
      case 2:
        int v22 = *(unsigned __int16 *)v12;
        goto LABEL_13;
      case 3:
        int v22 = *(unsigned __int16 *)v12 | (*(unsigned __int8 *)(v12 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v22 = *(_DWORD *)v12;
LABEL_13:
        int v23 = (v22 | (v20 << (8 * v18))) + 2;
        unsigned int v19 = v22 + 2;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v24 = ~v8;
  if (v19 == 1)
  {
    *(void *)uint64_t v11 = *(void *)v12;
    long long v25 = (void *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v25 = *v26;
    uint64_t v27 = ((unint64_t)v25 + v8 + 8) & v17;
    uint64_t v28 = ((unint64_t)v26 + v8 + 8) & v17;
    *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
    *(unsigned char *)(v27 | 1) = *(unsigned char *)(v28 | 1);
    *(unsigned char *)(v27 | 2) = *(unsigned char *)(v28 | 2);
    *(unsigned char *)(v27 | 3) = *(unsigned char *)(v28 | 3);
    unint64_t v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v27) = *(_DWORD *)v30;
    *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
    *(_DWORD *)unint64_t v29 = v27;
    uint64_t v31 = v8 + 5;
    unint64_t v32 = (v31 + v29) & v24;
    unint64_t v33 = (v31 + v30) & v24;
    uint64_t v65 = v9;
    uint64_t v34 = v5;
    uint64_t v35 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    unint64_t v36 = v18;
    uint64_t v37 = v6;
    swift_retain();
    swift_retain();
    uint64_t v38 = v37;
    unint64_t v18 = v36;
    v35(v32, v33, v38);
    uint64_t v5 = v34;
    uint64_t v9 = v65;
    *(unsigned char *)(v32 + v15) = *(unsigned char *)(v33 + v15);
    unint64_t v39 = (v32 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v40 = (v33 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    int v41 = *(_DWORD *)(v40 + 4);
    *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
    *(_DWORD *)(v39 + 4) = v41;
    uint64_t v42 = v11 | 7;
    uint64_t v43 = v12 | 7;
    char v44 = 1;
  }
  else
  {
    *(unsigned char *)uint64_t v11 = *(unsigned char *)v12;
    *(unsigned char *)(v11 | 1) = *(unsigned char *)(v12 | 1);
    *(unsigned char *)(v11 | 2) = *(unsigned char *)(v12 | 2);
    *(unsigned char *)(v11 | 3) = *(unsigned char *)(v12 | 3);
    uint64_t v45 = v11 | 4;
    int v46 = *(_DWORD *)(v12 | 4);
    *(unsigned char *)(v45 + 4) = *(unsigned char *)((v12 | 4) + 4);
    *(_DWORD *)uint64_t v45 = v46;
    uint64_t v47 = (v13 + v11) & v24;
    uint64_t v48 = (v13 + v12) & v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v47, v48, v6);
    *(unsigned char *)(v47 + v15) = *(unsigned char *)(v48 + v15);
    unint64_t v49 = (v47 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v50 = (v48 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    int v51 = *(_DWORD *)(v50 + 4);
    *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
    *(_DWORD *)(v49 + 4) = v51;
    uint64_t v42 = v11 | 7;
    uint64_t v43 = v12 | 7;
    *(void *)(((v11 | 7) + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v43 + v16) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    char v44 = 0;
  }
  *(unsigned char *)(v11 + v18) = v44;
  unint64_t v52 = (v42 + v18 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v53 = (v43 + v18 + 1) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v54 = *(unsigned __int8 *)(v53 + 17);
  if (v54 >= 2) {
    unsigned int v54 = *(_DWORD *)v53 + 2;
  }
  if (v54 == 1)
  {
    *(void *)unint64_t v52 = *(void *)v53;
    *(void *)(v52 + 8) = *(void *)(v53 + 8);
    *(unsigned char *)(v52 + 16) = *(unsigned char *)(v53 + 16);
    swift_retain();
    char v55 = 1;
  }
  else
  {
    char v55 = 0;
    *(unsigned char *)unint64_t v52 = *(unsigned char *)v53;
    *(void *)(v52 + 8) = *(void *)(v53 + 8);
  }
  swift_retain();
  *(unsigned char *)(v52 + 17) = v55;
  uint64_t v56 = (v9 + 18 + v52) & ~v9;
  uint64_t v57 = (v9 + 18 + v53) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v56, v57, v67);
  uint64_t v58 = *(void *)(v66 + 64);
  *(unsigned char *)(v58 + v56) = *(unsigned char *)(v58 + v57);
  unint64_t v59 = ((v9 + (v18 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v9) + v58 + 1;
  unint64_t v60 = (v42 + v59) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v61 = (v43 + v59) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v60 = *(unsigned char *)v61;
  uint64_t v62 = *(void *)(v61 + 8);
  if (v62)
  {
    uint64_t v63 = *(void *)(v61 + 16);
    *(void *)(v60 + 8) = v62;
    *(void *)(v60 + 16) = v63;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v60 + 8) = *(_OWORD *)(v61 + 8);
  }
  return v5;
}

id specialized AppDelegate.application(_:configurationForConnecting:options:)(void *a1)
{
  type metadata accessor for [SceneList.Item]?();
  static Update.ensure<A>(_:)();
  id v2 = objc_msgSend(a1, sel_role);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_13:

LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v9 = one-time initialization token for clarityUI;
  id v10 = v2;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {

    goto LABEL_11;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_15;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_15:

    goto LABEL_16;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23) {
    goto LABEL_15;
  }
  uint64_t v24 = one-time initialization token for carPlay;
  id v25 = v10;
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v30)
  {
LABEL_27:

    if (v105[0])
    {
      uint64_t v31 = *(void *)(v105[0] + 16);
      if (v31)
      {
        uint64_t v32 = v105[0] + 32;
        swift_bridgeObjectRetain();
        while (2)
        {
          outlined init with copy of SceneList.Item(v32, (uint64_t)v105);
          outlined init with copy of SceneList.Item.Value((uint64_t)v105, (uint64_t)&v96);
          switch(v104)
          {
            case 2:
              outlined destroy of SceneList.Item.Value((uint64_t)&v96);
              goto LABEL_31;
            case 3:
              goto LABEL_42;
            case 4:
              goto LABEL_85;
            case 5:
              uint64_t v46 = *((void *)&v96 + 1);
              uint64_t v45 = v96;
              char v47 = v97;
              unint64_t v48 = v98;
              if ((void)v98 == 1 || (void)v98 == 2)
              {
                outlined consume of SceneID(v96, *((uint64_t *)&v96 + 1), v97);
              }
              else
              {
                if (!(void)v98) {
                  goto LABEL_82;
                }
                uint64_t v49 = *((void *)&v97 + 1);
                outlined consume of SceneID(v96, *((uint64_t *)&v96 + 1), v97);
                outlined consume of UISceneAdaptorConfiguration.Kind(v49, v48);
              }
LABEL_42:
              swift_release();
LABEL_31:
              outlined destroy of SceneList.Item((uint64_t)v105);
              v32 += 280;
              if (--v31) {
                continue;
              }
              goto LABEL_77;
            case 6:
              uint64_t v41 = *((void *)&v97 + 1);
              uint64_t v42 = v98;
              char v43 = BYTE8(v98);
              uint64_t v44 = v99;
              swift_release();
              swift_bridgeObjectRelease();
              outlined consume of Text?(v41, v42, v43, v44);
              goto LABEL_31;
            case 7:
              long long v92 = v100;
              long long v93 = v101;
              long long v94 = v102;
              long long v95 = v103;
              long long v88 = v96;
              long long v89 = v97;
              long long v90 = v98;
              long long v91 = v99;
              outlined release of DocumentIntroductionConfiguration(&v88);
              goto LABEL_31;
            case 8:
              uint64_t v33 = *((void *)&v97 + 1);
              uint64_t v34 = v98;
              char v35 = BYTE8(v98);
              swift_release();
              swift_release();
              outlined consume of Text.Storage(v33, v34, v35);
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_31;
            default:
              uint64_t v36 = *((void *)&v96 + 1);
              uint64_t v37 = v97;
              char v38 = BYTE8(v97);
              uint64_t v39 = v98;
              uint64_t v40 = v99;
              swift_release();
              outlined consume of Text?(v36, v37, v38, v39);
              outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v40);
              goto LABEL_31;
          }
        }
      }
LABEL_78:
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    goto LABEL_79;
  }
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;
  if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v52 == v53)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_47;
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v54)
  {
LABEL_47:
    if (v105[0])
    {
      uint64_t v55 = *(void *)(v105[0] + 16);
      if (v55)
      {
        uint64_t v56 = v105[0] + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of SceneList.Item(v56, (uint64_t)v105);
          outlined init with copy of SceneList.Item.Value((uint64_t)v105, (uint64_t)&v96);
          switch(v104)
          {
            case 2:
              outlined destroy of SceneList.Item.Value((uint64_t)&v96);
              goto LABEL_51;
            case 3:
              goto LABEL_61;
            case 4:
              goto LABEL_85;
            case 5:
              uint64_t v46 = *((void *)&v96 + 1);
              uint64_t v45 = v96;
              char v47 = v97;
              unint64_t v62 = v98;
              if ((unint64_t)v98 < 2)
              {
                outlined consume of SceneID(v96, *((uint64_t *)&v96 + 1), v97);
              }
              else
              {
                if ((void)v98 == 2)
                {
LABEL_82:
                  outlined consume of SceneID(v45, v46, v47);
                  goto LABEL_83;
                }
                uint64_t v63 = *((void *)&v97 + 1);
                outlined consume of SceneID(v96, *((uint64_t *)&v96 + 1), v97);
                outlined consume of UISceneAdaptorConfiguration.Kind(v63, v62);
              }
LABEL_61:
              swift_release();
LABEL_51:
              outlined destroy of SceneList.Item((uint64_t)v105);
              v56 += 280;
              if (!--v55) {
                goto LABEL_77;
              }
              break;
            case 6:
              uint64_t v64 = *((void *)&v97 + 1);
              uint64_t v65 = v98;
              char v66 = BYTE8(v98);
              uint64_t v67 = v99;
              swift_release();
              swift_bridgeObjectRelease();
              outlined consume of Text?(v64, v65, v66, v67);
              goto LABEL_51;
            case 7:
              long long v92 = v100;
              long long v93 = v101;
              long long v94 = v102;
              long long v95 = v103;
              long long v88 = v96;
              long long v89 = v97;
              long long v90 = v98;
              long long v91 = v99;
              outlined release of DocumentIntroductionConfiguration(&v88);
              goto LABEL_51;
            case 8:
              uint64_t v68 = *((void *)&v97 + 1);
              uint64_t v69 = v98;
              char v70 = BYTE8(v98);
              swift_release();
              swift_release();
              outlined consume of Text.Storage(v68, v69, v70);
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_51;
            default:
              uint64_t v57 = *((void *)&v96 + 1);
              uint64_t v58 = v97;
              char v59 = BYTE8(v97);
              uint64_t v60 = v98;
              uint64_t v61 = v99;
              swift_release();
              outlined consume of Text?(v57, v58, v59, v60);
              outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v61);
              goto LABEL_51;
          }
        }
      }
      goto LABEL_78;
    }
LABEL_79:
    id v86 = objc_msgSend(a1, sel_configuration);
    return v86;
  }
  if (!v105[0]) {
    goto LABEL_79;
  }
  uint64_t v71 = *(void *)(v105[0] + 16);
  if (!v71) {
    goto LABEL_78;
  }
  uint64_t v72 = v105[0] + 32;
  swift_bridgeObjectRetain();
  while (2)
  {
    outlined init with copy of SceneList.Item(v72, (uint64_t)v105);
    outlined init with copy of SceneList.Item.Value((uint64_t)v105, (uint64_t)&v96);
    switch(v104)
    {
      case 2:
        outlined destroy of SceneList.Item.Value((uint64_t)&v96);
        goto LABEL_66;
      case 3:
        swift_release();
        goto LABEL_66;
      case 4:
LABEL_85:
        id result = (id)_diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      case 5:
        unint64_t v78 = v98;
        if (!(void)v98 || (void)v98 == 2 || (void)v98 == 1)
        {
          outlined consume of SceneID(v96, *((uint64_t *)&v96 + 1), v97);
          swift_release();
LABEL_66:
          outlined destroy of SceneList.Item((uint64_t)v105);
          v72 += 280;
          if (!--v71)
          {
LABEL_77:
            swift_bridgeObjectRelease();
            goto LABEL_78;
          }
          continue;
        }
        uint64_t v87 = *((void *)&v97 + 1);
        outlined consume of SceneID(v96, *((uint64_t *)&v96 + 1), v97);
        outlined consume of UISceneAdaptorConfiguration.Kind(v87, v78);
LABEL_83:
        swift_release();
        outlined destroy of SceneList.Item((uint64_t)v105);
        swift_bridgeObjectRelease_n();
LABEL_17:
        id v16 = objc_msgSend(a1, sel_role);
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B88]), sel_initWithName_sessionRole_, 0, v16);

        type metadata accessor for AppSceneDelegate();
        objc_msgSend(v17, sel_setDelegateClass_, swift_getObjCClassFromMetadata());
        return v17;
      case 6:
        uint64_t v79 = *((void *)&v97 + 1);
        uint64_t v80 = v98;
        char v81 = BYTE8(v98);
        uint64_t v82 = v99;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text?(v79, v80, v81, v82);
        goto LABEL_66;
      case 7:
        long long v92 = v100;
        long long v93 = v101;
        long long v94 = v102;
        long long v95 = v103;
        long long v88 = v96;
        long long v89 = v97;
        long long v90 = v98;
        long long v91 = v99;
        outlined release of DocumentIntroductionConfiguration(&v88);
        goto LABEL_66;
      case 8:
        uint64_t v83 = *((void *)&v97 + 1);
        uint64_t v84 = v98;
        char v85 = BYTE8(v98);
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v83, v84, v85);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_66;
      default:
        uint64_t v73 = *((void *)&v96 + 1);
        uint64_t v74 = v97;
        char v75 = BYTE8(v97);
        uint64_t v76 = v98;
        uint64_t v77 = v99;
        swift_release();
        outlined consume of Text?(v73, v74, v75, v76);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v77);
        goto LABEL_66;
    }
  }
}

void type metadata accessor for [SceneList.Item]?()
{
  if (!lazy cache variable for type metadata for [SceneList.Item]?)
  {
    _ss11AnyHashableVSgMaTm_0(255, &lazy cache variable for type metadata for [SceneList.Item], (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SceneList.Item]?);
    }
  }
}

void *assignWithCopy for ResolvedSearchFieldStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  char *v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  _OWORD v6[2] = *((unsigned char *)a2 + v5 + 2);
  v6[3] = *((unsigned char *)a2 + v5 + 3);
  LODWORD(v5) = *(_DWORD *)((char *)a2 + v5 + 4);
  v6[8] = v7[8];
  *((_DWORD *)v6 + 1) = v5;
  char v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  id v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v13 = v8[11];
  uint64_t v14 = &v6[v13];
  char v15 = &v7[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  id v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = (uint64_t)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  int v21 = *((unsigned __int8 *)a2 + v17 + 8);
  if (v20 == 255)
  {
    if (v21 == 255)
    {
      uint64_t v23 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v19[8];
      *(void *)uint64_t v18 = v23;
    }
    else
    {
      char v28 = v21 & 1;
      uint64_t v29 = *(void *)v19;
      outlined copy of PlatformItemCollection.Storage(v29, v21 & 1);
      *(void *)uint64_t v18 = v29;
      *(unsigned char *)(v18 + 8) = v28;
    }
  }
  else if (v21 == 255)
  {
    outlined destroy of PlatformItemCollection(v18);
    char v22 = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    *(unsigned char *)(v18 + 8) = v22;
  }
  else
  {
    char v24 = v21 & 1;
    uint64_t v25 = *(void *)v19;
    outlined copy of PlatformItemCollection.Storage(v25, v21 & 1);
    uint64_t v26 = *(void *)v18;
    char v27 = *(unsigned char *)(v18 + 8);
    *(void *)uint64_t v18 = v25;
    *(unsigned char *)(v18 + 8) = v24;
    outlined consume of PlatformItemCollection.Storage(v26, v27);
  }
  *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
  uint64_t v30 = v16[8];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)((char *)a2 + v30);
  uint64_t v34 = *((void *)v32 + 1);
  char v35 = v32[16];
  outlined copy of Text.Storage(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)uint64_t v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Text.Storage(v36, v37, v38);
  *((void *)v31 + 3) = *((void *)v32 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter(char a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1B8);
  swift_beginAccess();
  char v4 = *v3;
  char *v3 = a1;
  return _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(v4);
}

uint64_t _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  char v4 = (unsigned __int8 *)v1 + v3[55];
  uint64_t result = swift_beginAccess();
  int v6 = *v4;
  if (v6 != v2)
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.unspecified.getter();
    if (v6)
    {
      uint64_t v7 = swift_allocObject();
      swift_unknownObjectWeakInit();
      char v8 = (void *)swift_allocObject();
      void v8[2] = v3[10];
      v8[3] = v3[11];
      void v8[4] = v7;
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      swift_release();
    }
    else
    {
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.stopObserving(proposal:)();
      swift_endAccess();
    }
    return swift_release();
  }
  return result;
}

void *assignWithCopy for NavigationStackReader(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v5 = *v6;
  swift_retain();
  swift_release();
  v5[1] = v6[1];
  swift_retain();
  swift_release();
  v5[2] = v6[2];
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 24) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 24) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 40);
  unint64_t v13 = v12 + v10;
  unint64_t v14 = v12 + v11;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  uint64_t v17 = (void *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetSearchEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetSearchEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ClearNavigationContextModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v4;
  uint64_t v22 = v5;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ClearNavigationContextModifier._makeInputs(modifier:inputs:)();
  uint64_t v11 = v20;
  int v12 = v21;
  uint64_t v13 = v5;
  long long v14 = v23;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v26;
  uint64_t v18 = v27;
  int v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ClearNavigationContextModifier._makeInputs(modifier:inputs:)()
{
  return PropertyList.subscript.setter();
}

double static BarItemModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  int v4 = *a1;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v7 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  uint64_t v26 = *a2;
  int v27 = v5;
  long long v29 = *(_OWORD *)(a2 + 3);
  uint64_t v28 = v6;
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  long long v32 = *(_OWORD *)(a2 + 7);
  int v13 = v32;
  uint64_t v33 = a2[9];
  int v34 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for _GraphValue<BarItemModifier>, (uint64_t)&unk_1ED472C88, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type BarEdgeInput and conformance BarEdgeInput();
  PropertyList.subscript.setter();
  uint64_t v15 = v26;
  int v16 = v27;
  uint64_t v17 = v6;
  long long v18 = v29;
  uint64_t v19 = v8;
  uint64_t v20 = v7;
  long long v21 = v32;
  uint64_t v22 = v33;
  int v23 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(&v24, v10, &v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v15) = v4;
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  uint64_t v15 = v7;
  int v16 = v13;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a4 = v24;
  double result = v25;
  a4[1] = v25;
  return result;
}

void @objc NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1, uint64_t a2, void *a3, void *a4, Swift::Bool a5)
{
  uint64_t v8 = a3;
  int v9 = a4;
  id v10 = a1;
  NavigationStackCoordinator.navigationController(_:willShow:animated:)(v8, v9, a5);
}

Swift::Void __swiftcall NavigationStackCoordinator.navigationController(_:willShow:animated:)(UINavigationController *_, UIViewController *willShow, Swift::Bool animated)
{
  int v4 = v3;
  int v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *v3;
  if (!animated
    || (uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *v3,
        id v10 = [(UINavigationController *)_ transitionCoordinator],
        uint64_t v6 = *v5 & *v4,
        !v10))
  {
    *((unsigned char *)v4 + *(void *)(v6 + 144)) = 0;
    return;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)((*v5 & *v4) + 0x90);
  *((unsigned char *)v4 + v12) = 1;
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  long long v14 = (void *)swift_allocObject();
  uint64_t v15 = *(void *)(v9 + 80);
  _DWORD v14[2] = v15;
  uint64_t v16 = *(void *)(v9 + 88);
  v14[3] = v16;
  v14[4] = v13;
  aBlock[4] = partial apply for closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  aBlock[3] = &block_descriptor_75;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v11, sel_animateAlongsideTransition_completion_, 0, v17);
  _Block_release(v17);
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    goto LABEL_21;
  }
  if ([(UINavigationController *)_ lastOperation] == (id)1)
  {
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = v15;
    v19[3] = v16;
    v19[4] = v18;
    v19[5] = _;
    aBlock[4] = partial apply for closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:);
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    aBlock[3] = &block_descriptor_25_1;
    uint64_t v20 = _Block_copy(aBlock);
LABEL_6:
    long long v21 = _;
    swift_release();
    objc_msgSend(v11, sel_notifyWhenInteractionChangesUsingBlock_, v20);
    _Block_release(v20);
LABEL_21:
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v22 = *(UIViewController **)((char *)v4 + *(void *)((*v5 & *v4) + 0x88));
  if (v22) {
    BOOL v23 = v22 == willShow;
  }
  else {
    BOOL v23 = 1;
  }
  char v24 = v23;
  char v46 = v24;
  double v25 = [(UINavigationController *)_ viewControllers];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  NavigationStackCoordinator.previousContent.getter(aBlock);
  memcpy(__dst, aBlock, sizeof(__dst));
  NavigationState.StackContent.count.getter();
  uint64_t v29 = v28;
  outlined release of NavigationState.StackContent((uint64_t)aBlock, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  if (v27 >= v29 || *((unsigned char *)v4 + *(void *)((*v5 & *v4) + 0x80)) == 1 || (v46 & 1) == 0) {
    goto LABEL_21;
  }
  if (objc_msgSend(v11, sel_isInteractive))
  {
    uint64_t v30 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v31 = (void *)swift_allocObject();
    v31[2] = v15;
    void v31[3] = v16;
    v31[4] = v30;
    v31[5] = _;
    __dst[4] = partial apply for closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:);
    __dst[5] = v31;
    __dst[0] = MEMORY[0x1E4F143A8];
    __dst[1] = 1107296256;
    __dst[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    __dst[3] = &block_descriptor_18_1;
    uint64_t v20 = _Block_copy(__dst);
    goto LABEL_6;
  }
  long long v32 = [(UINavigationController *)_ viewControllers];
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  NavigationStackCoordinator.previousContent.getter(__src);
  memcpy(__dst, __src, sizeof(__dst));
  NavigationState.StackContent.count.getter();
  uint64_t v36 = v35;
  outlined release of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  *((unsigned char *)v4 + v12) = 0;
  *((unsigned char *)v4 + *(void *)((*v5 & *v4) + 0x78)) = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v4 + *(void *)((*v5 & *v4) + 0x68), (uint64_t)v50);
  uint64_t v37 = v36 - v34;
  if (__OFSUB__(v36, v34))
  {
    __break(1u);
  }
  else
  {
    NavigationStackCoordinator.previousContent.getter(__dst);
    memcpy(v49, __dst, sizeof(v49));
    uint64_t v38 = NavigationState.StackContent.topKey.getter();
    unsigned __int8 v40 = v39;
    uint64_t v42 = v41;
    outlined release of NavigationState.StackContent((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    static Transaction.current.getter();
    static Transaction.current.getter();
    char v43 = Transaction.disablesAnimations.getter();
    swift_release();
    if (v43) {
      char v44 = 1;
    }
    else {
      char v44 = Transaction.disablesAnimations.getter();
    }
    static Transaction.current.getter();
    uint64_t v45 = Transaction.animation.getter();
    swift_release();
    if (!v45) {
      uint64_t v45 = Transaction.animation.getter();
    }
    swift_release();
    memset(&v49[8], 0, 56);
    uint64_t v48 = v45;
    *(void *)uint64_t v49 = v37;
    v49[64] = 9;
    *(void *)&v49[72] = v38;
    *(void *)&v49[80] = v40;
    *(void *)&v49[88] = v42;
    memset(&v49[96], 0, 24);
    v49[120] = v44 & 1;
    *(void *)&v49[128] = v45;
    v47[6] = 0u;
    v47[7] = *(_OWORD *)&v49[112];
    v47[2] = *(_OWORD *)&v49[32];
    v47[3] = 0uLL;
    v47[4] = *(_OWORD *)&v49[64];
    v47[5] = *(_OWORD *)&v49[80];
    v47[0] = *(_OWORD *)v49;
    v47[1] = *(_OWORD *)&v49[16];
    NavigationAuthority.enqueueRequest(_:)(v47);
    swift_unknownObjectRelease();
    outlined release of NavigationRequest((uint64_t)v49);
    outlined destroy of NavigationAuthority((uint64_t)v50);
  }
}

void *assignWithCopy for InternalNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v5 != v6)
  {
    unsigned int v7 = *(unsigned __int8 *)(v5 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)v5 + 2;
    }
    if (v7 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v8 = *(unsigned __int8 *)(v6 + 17);
    if (v8 >= 2) {
      unsigned int v8 = *(_DWORD *)v6 + 2;
    }
    if (v8 == 1)
    {
      *(void *)unint64_t v5 = *(void *)v6;
      *(void *)(v5 + 8) = *(void *)(v6 + 8);
      *(unsigned char *)(v5 + 16) = *(unsigned char *)(v6 + 16);
      *(unsigned char *)(v5 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v5 = *(unsigned char *)v6;
      *(void *)(v5 + 8) = *(void *)(v6 + 8);
      *(unsigned char *)(v5 + 17) = 0;
    }
    swift_retain();
  }
  unint64_t v9 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    unsigned int v11 = *(unsigned __int8 *)(v9 + 20);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)v9 + 2;
    }
    if (v11 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v12 = *(unsigned __int8 *)(v10 + 20);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    if (v12 == 1)
    {
      *(void *)unint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
      *(unsigned char *)(v9 + 20) = 1;
      swift_retain();
    }
    else
    {
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      *(unsigned char *)(v9 + 20) = 0;
    }
    swift_retain();
  }
  unint64_t v13 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v6 + 53) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v14, v16);
  uint64_t v17 = *(void *)v13;
  uint64_t v18 = *(unsigned __int8 *)(v13 + 8);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  *(unsigned char *)(v13 + 9) = *(unsigned char *)(v14 + 9);
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v20 = v19 + 24;
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v21 + 10 + v13) & ~v21;
  uint64_t v23 = (v21 + 10 + v14) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  uint64_t v24 = *(void *)(v20 + 40) + 7;
  unint64_t v25 = (v24 + v22) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v24 + v23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v25 = *(void *)v26;
  swift_retain();
  swift_release();
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  *(unsigned char *)(v25 + 9) = *(unsigned char *)(v26 + 9);
  unint64_t v27 = (v25 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v26 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v29 = *(_OWORD *)v28;
  long long v30 = *(_OWORD *)(v28 + 32);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(v28 + 16);
  *(_OWORD *)(v27 + 32) = v30;
  *(_OWORD *)unint64_t v27 = v29;
  *(unsigned char *)(v27 + 48) = *(unsigned char *)(v28 + 48);
  return a1;
}

uint64_t closure #1 in AccessibilityCustomPropertyModifier.PropertyChild.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v13 - v8;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, a3);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  unsigned int v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v11)(v9, a3);
}

void type metadata completion function for AsyncImage()
{
  _s10Foundation3URLVSgMaTm_4(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F)
  {
    _s10Foundation3URLVSgMaTm_4(319, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

float _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = a4;
  uint64_t v55 = a2;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v17 = v16;
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v53 = a3;
  if (!v20 || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v22 & 1) == 0))
  {
    long long v61 = 0u;
    long long v62 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v21, (uint64_t)&v61);
  swift_bridgeObjectRelease();
  if (!*((void *)&v62 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v61);
    uint64_t v51 = type metadata accessor for DecodingError();
    uint64_t v52 = swift_allocError();
    uint64_t v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    _OWORD v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    uint64_t v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v37(boxed_opaque_existential_1, v17, a5);
    uint64_t v38 = v55;
    swift_beginAccess();
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    unint64_t v59 = 0xD00000000000001DLL;
    unint64_t v60 = 0x8000000188330C20;
    uint64_t v57 = a5;
    uint64_t v58 = a6;
    unsigned __int8 v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v56);
    v37(v39, v17, a5);
    uint64_t v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v56, v38);
    uint64_t v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v51 - 8) + 104))(v34, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v61, &v56);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v51 = v10;
  v50(v15, v17, a5);
  uint64_t v23 = v55;
  uint64_t v24 = (uint64_t *)(v55 + 136);
  swift_beginAccess();
  unint64_t v25 = *(void **)(v23 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v23 + 136) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *uint64_t v24 = (uint64_t)v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  uint64_t v29 = v51;
  if (v28 >= v27 >> 1) {
    *uint64_t v24 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
  }
  v50(v12, (uint64_t)v15, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)v12, v24, a5, a6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, a5);
  swift_endAccess();
  uint64_t v30 = v55;
  uint64_t v31 = v52;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v56);
  if (v31) {
    goto LABEL_15;
  }
  if ((v32 & 0x100000000) != 0)
  {
    uint64_t v46 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v48 = v47;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v48 = MEMORY[0x1E4FBB470];
    *(void *)&long long v61 = 0;
    *((void *)&v61 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v46 - 8) + 104))(v48, *MEMORY[0x1E4FBBA80], v46);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    return v6;
  }
  float v6 = *(float *)&v32;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  return v6;
}

void specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() != a2 || v5 != a3)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_13;
    }
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() != a2 || v8 != a3)
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0) {
        return;
      }
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  swift_getAssociatedTypeWitness();
  if (swift_dynamicCastUnknownClass())
  {
    swift_getAssociatedConformanceWitness();
    PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
  }
}

uint64_t ScrollableProvider.value.getter@<X0>(unint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  unint64_t v5 = HIDWORD(a1);
  uint64_t v6 = AGCreateWeakAttribute();
  uint64_t v7 = AGCreateWeakAttribute();
  uint64_t v8 = AGCreateWeakAttribute();
  int v9 = *MEMORY[0x1E4F4E7A0];
  if (*MEMORY[0x1E4F4E7A0] != v5)
  {
    unint64_t v13 = AGCreateWeakAttribute();
    int v10 = v13;
    unint64_t v17 = HIDWORD(v13);
    if (v9 != a2) {
      goto LABEL_3;
    }
LABEL_5:
    int v12 = 0;
    LODWORD(v16) = 0;
    goto LABEL_6;
  }
  int v10 = 0;
  LODWORD(v17) = 0;
  if (v9 == a2) {
    goto LABEL_5;
  }
LABEL_3:
  unint64_t v11 = AGCreateWeakAttribute();
  int v12 = v11;
  unint64_t v16 = HIDWORD(v11);
LABEL_6:
  type metadata accessor for External<SystemScrollLayoutState>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F3F398]);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  a3[3] = (uint64_t)&unk_1ED432570;
  a3[4] = lazy protocol witness table accessor for type ScrollViewScrollable and conformance ScrollViewScrollable();
  uint64_t result = swift_allocObject();
  *a3 = result;
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = v7;
  *(void *)(result + 32) = v8;
  *(_DWORD *)(result + 40) = v10;
  *(_DWORD *)(result + 44) = v17;
  *(_DWORD *)(result + 48) = v12;
  *(_DWORD *)(result + 52) = v16;
  *(void *)(result + 56) = v14;
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewScrollable and conformance ScrollViewScrollable()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewScrollable and conformance ScrollViewScrollable;
  if (!lazy protocol witness table cache variable for type ScrollViewScrollable and conformance ScrollViewScrollable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewScrollable and conformance ScrollViewScrollable);
  }
  return result;
}

uint64_t Array<A>.motionVectors(closestTo:in:avoiding:distance:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, double (*a3)(uint64_t, double, double, double, double, double, double, double, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  *(double *)&v87[16] = a8;
  *(double *)&v87[24] = a9;
  *(double *)uint64_t v87 = a6;
  *(double *)&v87[8] = a7;
  uint64_t v9 = a2;
  unint64_t v10 = a1;
  unint64_t v105 = *(void *)(a2 + 16);
  if (v105)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    int v12 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v13 = 32;
    uint64_t v103 = v9;
    while (1)
    {
      uint64_t v106 = v13;
      swift_retain();
      _ViewList_ID.canonicalID.getter();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v113 = v12;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v108 | ((unint64_t)v110 << 32), v111);
      unint64_t v17 = v12;
      uint64_t v18 = v12[2];
      BOOL v19 = (v15 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        goto LABEL_65;
      }
      char v21 = v15;
      if (v17[3] >= v20)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v24 = v113;
          if ((v15 & 1) == 0) {
            goto LABEL_12;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v24 = v113;
          if ((v21 & 1) == 0) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v108 | ((unint64_t)v110 << 32), v111);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_69;
        }
        unint64_t v16 = v22;
        uint64_t v24 = v113;
        if ((v21 & 1) == 0)
        {
LABEL_12:
          v24[(v16 >> 6) + 8] |= 1 << v16;
          uint64_t v25 = v24[6] + 16 * v16;
          *(_DWORD *)uint64_t v25 = v108;
          *(_DWORD *)(v25 + 4) = v110;
          *(void *)(v25 + 8) = v111;
          *(void *)(v24[7] + 8 * v16) = v11;
          uint64_t v26 = v24[2];
          BOOL v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_66;
          }
          int v12 = v24;
          uint64_t v24[2] = v28;
          swift_retain();
          goto LABEL_4;
        }
      }
      *(void *)(v24[7] + 8 * v16) = v11;
      int v12 = v24;
LABEL_4:
      ++v11;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v13 = v106 + 72;
      uint64_t v9 = v103;
      if (v105 == v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = a4;
        unint64_t v10 = a1;
        if ((a1 & 0x8000000000000000) == 0) {
          goto LABEL_17;
        }
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
  }
  uint64_t v29 = a4;
  int v12 = (void *)MEMORY[0x1E4FBC868];
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_64;
  }
LABEL_17:
  unint64_t v30 = *(void *)(v29 + 16);
  if (v30 <= v10)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v31 = v29 + 72 * v10;
  uint64_t v33 = *(void *)(v31 + 32);
  uint64_t v32 = *(void *)(v31 + 40);
  long long v99 = v12;
  swift_retain();
  double v34 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v36 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v35, *(unint64_t *)&v34));
  double x = v36.x;
  double y = v36.y;
  uint64_t v109 = v33;
  uint64_t v112 = v32;
  double v39 = _LazyLayout_PlacedSubview.size.getter();
  double v41 = v40;
  swift_release();
  uint64_t v93 = v9 + 32;
  swift_bridgeObjectRetain();
  uint64_t v42 = 0;
  char v104 = 1;
  double v97 = 0.0;
  double v91 = 0.0;
  double v92 = 0.0;
  double v89 = 0.0;
  double v90 = 0.0;
  double v94 = v41;
  double v95 = v39;
  do
  {
    if (!v10) {
      goto LABEL_20;
    }
    uint64_t v43 = v29 + v42;
    swift_retain();
    _ViewList_ID.canonicalID.getter();
    if (!v12[2] || (unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v112), (v45 & 1) == 0))
    {
      swift_release();
      swift_release();
      goto LABEL_20;
    }
    unint64_t v100 = *(void *)(v12[7] + 8 * v44);
    unint64_t v102 = v10;
    swift_release();
    uint64_t v47 = *(void *)(v43 + 32);
    uint64_t v46 = *(void *)(v43 + 40);
    char v48 = *(unsigned char *)(v43 + 48);
    swift_retain_n();
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      AGGraphGetValue();
      swift_retain();
    }
    LayoutComputer.sizeThatFits(_:)();
    unint64_t v50 = v49;
    unint64_t v52 = v51;
    swift_release();
    CGPoint v53 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v52, v50));
    uint64_t v112 = *(void *)(v47 + 40);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      uint64_t v112 = *(void *)(AGGraphGetValue() + 8);
      swift_retain();
    }
    uint64_t v109 = v46;
    LOBYTE(v112) = v48;
    LayoutComputer.sizeThatFits(_:)();
    double v55 = v54;
    double v57 = v56;
    swift_release_n();
    uint64_t v58 = swift_release();
    double v59 = a3(v58, x, y, v39, v41, v53.x, v53.y, v55, v57);
    if (!(v104 & 1 | (v59 < v97)))
    {
      swift_release();
      char v104 = 0;
      uint64_t v29 = a4;
      int v12 = v99;
      unint64_t v10 = v102;
      goto LABEL_20;
    }
    if (v100 >= v105) {
      goto LABEL_67;
    }
    double v107 = v59;
    unint64_t v60 = (uint64_t *)(v93 + 72 * v100);
    uint64_t v62 = *v60;
    uint64_t v61 = v60[1];
    char v63 = *((unsigned char *)v60 + 16);
    swift_retain();
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      AGGraphGetValue();
      swift_retain();
    }
    LayoutComputer.sizeThatFits(_:)();
    unint64_t v65 = v64;
    unint64_t v67 = v66;
    swift_release();
    CGPoint v68 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v67, v65));
    uint64_t v112 = *(void *)(v62 + 40);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      uint64_t v112 = *(void *)(AGGraphGetValue() + 8);
      swift_retain();
    }
    uint64_t v109 = v61;
    LOBYTE(v112) = v63;
    LayoutComputer.sizeThatFits(_:)();
    CGFloat v70 = v69;
    CGFloat v72 = v71;
    swift_release();
    swift_release();
    v114.origin.double x = v53.x;
    v114.origin.double y = v53.y;
    v114.size.double width = v55;
    v114.size.double height = v57;
    if (CGRectIsEmpty(v114))
    {
      swift_release();
      uint64_t v29 = a4;
      int v12 = v99;
      unint64_t v10 = v102;
LABEL_43:
      double y = v36.y;
      double x = v36.x;
      double v41 = v94;
      double v39 = v95;
      goto LABEL_20;
    }
    v115.origin.double x = v68.x;
    v115.origin.double y = v68.y;
    v115.size.double width = v70;
    v115.size.double height = v72;
    uint64_t v29 = a4;
    int v12 = v99;
    unint64_t v10 = v102;
    if (CGRectIsEmpty(v115))
    {
      swift_release();
      goto LABEL_43;
    }
    v116.origin.double x = v68.x;
    v116.origin.double y = v68.y;
    v116.size.double width = v70;
    v116.size.double height = v72;
    double Width = CGRectGetWidth(v116);
    v117.origin.double x = v53.x;
    v117.origin.double y = v53.y;
    v117.size.double width = v55;
    v117.size.double height = v57;
    double v86 = Width / CGRectGetWidth(v117);
    v118.origin.double x = v68.x;
    v118.origin.double y = v68.y;
    v118.size.double width = v70;
    v118.size.double height = v72;
    double Height = CGRectGetHeight(v118);
    v119.origin.double x = v53.x;
    v119.origin.double y = v53.y;
    v119.size.double width = v55;
    v119.size.double height = v57;
    double v74 = Height / CGRectGetHeight(v119);
    double y = v36.y;
    double x = v36.x;
    double v41 = v94;
    double v39 = v95;
    double v77 = v95 * v86;
    if (v95 == 0.0) {
      double v77 = 0.0;
    }
    double v78 = v94 * v74;
    if (v94 == 0.0) {
      double v78 = 0.0;
    }
    CGFloat v75 = v36.x + v68.x - v53.x;
    CGFloat v76 = v36.y + v68.y - v53.y;
    CGRect v120 = CGRectIntersection(*(CGRect *)(&v77 - 2), *(CGRect *)v87);
    IsEmptdouble y = CGRectIsEmpty(v120);
    swift_release();
    if (IsEmpty)
    {
      char v104 = 0;
      double v97 = v107;
      double v91 = v68.y - v53.y;
      double v92 = v68.x - v53.x;
      double v89 = v74;
      double v90 = v86;
    }
LABEL_20:
    v42 += 72;
    --v10;
    --v30;
  }
  while (v30);
  swift_bridgeObjectRelease();
  if (v104) {
    double v80 = 0.0;
  }
  else {
    double v80 = v92;
  }
  if (v104) {
    double v81 = 0.0;
  }
  else {
    double v81 = v91;
  }
  if (v104) {
    double v82 = 0.0;
  }
  else {
    double v82 = v90;
  }
  if (v104) {
    double v83 = 0.0;
  }
  else {
    double v83 = v89;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(double *)a5 = v80;
  *(double *)(a5 + 8) = v81;
  *(double *)(a5 + 16) = v82;
  *(double *)(a5 + 24) = v83;
  *(unsigned char *)(a5 + 32) = v104 & 1;
  return result;
}

double _LazyLayout_PlacedSubview.size.getter()
{
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  LayoutComputer.sizeThatFits(_:)();
  double v1 = v0;
  swift_release();
  return v1;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TabViewStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeViewList(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t static ViewAlias._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  unsigned int v8 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v10 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v13 = a2[7];
  int v14 = *((_DWORD *)a2 + 16);
  uint64_t v15 = a2[9];
  char v16 = *((unsigned char *)a2 + 80);
  uint64_t v40 = *a2;
  int v41 = v5;
  uint64_t v42 = v6;
  *(void *)&long long v43 = __PAIR64__(v7, v8);
  *((void *)&v43 + 1) = __PAIR64__(v9, v10);
  unsigned int v27 = v9;
  uint64_t v44 = v12;
  *(void *)&long long v45 = v11;
  uint64_t v25 = v13;
  uint64_t v26 = v11;
  *((void *)&v45 + 1) = v13;
  char v23 = v16;
  int v24 = v14;
  int v46 = v14;
  uint64_t v47 = v15;
  char v48 = v16;
  type metadata accessor for SourceInput();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _GraphInputs.popLast<A, B>(_:)();
  uint64_t v17 = v31;
  if (v31)
  {
    uint64_t v18 = v34;
    char v19 = BYTE4(v34);
    uint64_t v21 = v32;
    uint64_t v20 = v33;
    _GraphInputs.resetCurrentStyleableView()();
    uint64_t v31 = v40;
    LODWORD(v32) = v41;
    uint64_t v33 = v42;
    long long v34 = v43;
    uint64_t v35 = v44;
    long long v36 = v45;
    int v37 = v46;
    uint64_t v38 = v47;
    char v39 = v48;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))(v30, v17, v21, v20, v18 | ((unint64_t)(v19 & 1) << 32), &v31, a3, a4, v17, v21);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v31 = v4;
    LODWORD(v32) = v5;
    uint64_t v33 = v6;
    *(void *)&long long v34 = __PAIR64__(v7, v8);
    *((void *)&v34 + 1) = __PAIR64__(v27, v10);
    uint64_t v35 = v12;
    *(void *)&long long v36 = v26;
    *((void *)&v36 + 1) = v25;
    int v37 = v24;
    uint64_t v38 = v15;
    char v39 = v23;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

void SheetBridge.contingentlyPresent(_:from:animated:)(uint64_t a1, UIViewController *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v3 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v8, (uint64_t)v14);
  LOBYTE(v8) = PresentationState.isDismissing.getter();
  outlined destroy of PresentationState((uint64_t)v14);
  if (v8)
  {
    uint64_t v9 = v4 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v9, (uint64_t)v14);
    LOBYTE(v9) = PresentationState.isDismissalPreemptable.getter();
    outlined destroy of PresentationState((uint64_t)v14);
    if ((v9 & 1) != 0
      && [(UIViewController *)a2 _willPreemptRunningPresentationTransition])
    {
      uint64_t v10 = v4 + direct field offset for SheetBridge.presentationState;
      swift_beginAccess();
      outlined init with copy of PresentationState(v10, (uint64_t)v14);
      uint64_t v11 = (unsigned char *)PresentationState.Base.presentedVC.getter();
      outlined destroy of PresentationState((uint64_t)v14);
      if (v11)
      {
        v11[direct field offset for PresentationHostingController.wasPreempted] = 1;
      }
      SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(a1, a2, a3 & 1, 0, 1u);
    }
    else
    {
      swift_beginAccess();
      PresentationState.enqueueDelayedPresentation(_:animated:)(a1, a3 & 1);
      swift_endAccess();
    }
  }
  else
  {
    uint64_t v12 = v4 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v12, (uint64_t)v14);
    uint64_t v13 = (void *)PresentationState.Base.presentedVC.getter();
    outlined destroy of PresentationState((uint64_t)v14);
    SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(a1, a2, a3 & 1, (uint64_t)v13, 0);
  }
}

uint64_t PresentationState.isDismissing.getter()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v3);
  uint64_t result = 0;
  switch(v6[105])
  {
    case 2:
    case 3:
    case 5:

      int v2 = (id *)&v4;
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 6:
      goto LABEL_4;
    case 7:
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)&v3);
      return 0;
    case 8:

      outlined destroy of SheetPreference((uint64_t)v6);
LABEL_7:
      int v2 = &v3;
LABEL_8:
      outlined destroy of SheetPreference((uint64_t)v2);
      uint64_t result = 1;
      break;
    case 0xA:
      return result;
    default:

LABEL_4:
      outlined destroy of SheetPreference((uint64_t)&v3);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t type metadata completion function for TimelineView<>.UpdateFilter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationDestinationScopeModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v4;
  uint64_t v22 = v5;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v11 = v20;
  int v12 = v21;
  uint64_t v13 = v5;
  long long v14 = v23;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v26;
  uint64_t v18 = v27;
  int v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

ValueMetadata *type metadata accessor for IsDeleteDisabledTraitKey()
{
  return &type metadata for IsDeleteDisabledTraitKey;
}

uint64_t base witness table accessor for Sequence in FetchedResults<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

void partial apply for closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)()
{
  closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56), *(void **)(v0 + 64), *(unsigned char *)(v0 + 72), *(_DWORD *)(v0 + 76), *(void **)(v0 + 80));
}

void closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(uint64_t a1, char a2, void *a3, char a4, int a5, void *a6)
{
  uint64_t v11 = a1 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x18C119DF0](v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = v12 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v14, (uint64_t)aBlock);
    outlined init with copy of PresentationState.Base((uint64_t)aBlock, (uint64_t)v27);
    if (v29 >= 2u)
    {
      outlined destroy of PresentationState.Base((uint64_t)v27);
      outlined destroy of PresentationState((uint64_t)aBlock);
      goto LABEL_16;
    }

    outlined destroy of SheetPreference((uint64_t)v27);
    outlined destroy of PresentationState((uint64_t)aBlock);
    if ((a2 & 1) == 0)
    {
      id v15 = objc_msgSend(a3, sel_presentedViewController);
      if (v15)
      {
        uint64_t v16 = v15;
        if ((objc_msgSend(v15, sel_isBeingDismissed) & 1) == 0)
        {
          self;
          if (!swift_dynamicCastObjCClass()) {
            objc_msgSend(a3, sel_dismissViewControllerAnimated_completion_, a4 & 1, 0);
          }
        }
      }
    }
    uint64_t v17 = (uint64_t)v13 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v17, (uint64_t)aBlock);
    PresentationState.Base.presentationSeed.getter((uint64_t)&v25);
    outlined destroy of PresentationState((uint64_t)aBlock);
    if (v26 == 1 || v25 == -1 || a5 == -1 || v25 != a5) {
      goto LABEL_16;
    }
    if (a4)
    {
      objc_msgSend(a3, sel_presentViewController_animated_completion_, a6, 1, 0);
LABEL_16:

      return;
    }
    uint64_t v18 = self;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a6;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = partial apply for closure #1 in closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:);
    *(void *)(v20 + 24) = v19;
    aBlock[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_42;
    int v21 = _Block_copy(aBlock);
    id v22 = a3;
    id v23 = a6;
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel__performWithoutDeferringTransitions_, v21);

    _Block_release(v21);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

uint64_t PresentationState.Base.presentationSeed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of PresentationState.Base(v1, (uint64_t)&v7);
  switch(v11[105])
  {
    case 2:
    case 3:
    case 5:

      int v4 = (id *)&v8;
      goto LABEL_7;
    case 4:
    case 6:
      goto LABEL_6;
    case 7:
    case 9:
      uint64_t result = outlined destroy of PresentationState.Base((uint64_t)&v7);
      goto LABEL_8;
    case 8:

      outlined destroy of SheetPreference((uint64_t)v11);
LABEL_6:
      int v4 = &v7;
LABEL_7:
      uint64_t result = outlined destroy of SheetPreference((uint64_t)v4);
      goto LABEL_8;
    case 0xA:
LABEL_8:
      int v5 = 0;
      char v6 = 1;
      break;
    default:

      int v5 = v10;
      uint64_t result = outlined destroy of SheetPreference((uint64_t)&v7);
      char v6 = 0;
      break;
  }
  *(_DWORD *)a1 = v5;
  *(unsigned char *)(a1 + 4) = v6;
  return result;
}

void storeEnumTagSinglePayload for _DisabledPickerContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFE)
          {
            a1[v9] = a2 + 1;
          }
          else
          {
            uint64_t v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t View.searchable(text:isPresented:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v34 = a9;
  int v30 = a7;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v27 = a1;
  uint64_t v33 = a14;
  uint64_t v31 = a3;
  uint64_t v32 = a15;
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v18);
  int v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v35 = *a8;
  swift_retain();
  uint64_t v22 = a2;
  swift_retain();
  uint64_t v23 = a4;
  swift_bridgeObjectRetain();
  outlined copy of Text?(a10, a11, a12, a13);
  uint64_t v24 = v28;
  swift_retain();
  uint64_t v25 = v29;
  swift_retain();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v27, v22, v31, v23, v24, v25, v30 & 1, &v35, (uint64_t)v21, a10, a11, a12, a13);
  MEMORY[0x18C113660](v21, v33, v19, v32);
  return outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;

  char v39 = a9;
  unsigned __int8 v35 = a7;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a4;
  int v37 = a3;
  uint64_t v38 = a15;
  long long v36 = a14;
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v18);
  int v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = *a8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v23;
  char v26 = v25;
  uint64_t v28 = v27 & 1;
  uint64_t v29 = v33;
  swift_retain();
  int v30 = v34;
  swift_retain();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v37, v32, v29, v30, v35 & 1, &v40, (uint64_t)v21, v22, v24, v28, v26);
  MEMORY[0x18C113660](v21, v36, v19, v38);
  return outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultimodalNavigationStack()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>)
  {
    uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E4F408C8];
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, MEMORY[0x1E4F408C8]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>(&lazy protocol witness table cache variable for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  size_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a3;
  *(void *)&long long v24 = 0;
  LOBYTE(v23) = 1;
  swift_setAtWritableKeyPath();
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release();
  swift_release_n();
  long long v11 = a1[1];
  long long v24 = *a1;
  long long v25 = v11;
  v26[0] = a1[2];
  *(_OWORD *)((char *)v26 + 9) = *(long long *)((char *)a1 + 41);
  UISplitViewControllerVisibilityEngine.visibility.getter(&v23);
  *(_WORD *)(a4 + 24) = v23;
  static Log.splitViewVisibility.getter();
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1) {
    return outlined destroy of Logger?((uint64_t)v10);
  }
  outlined retain of UISplitViewControllerVisibilityEngine(a1);
  outlined retain of UISplitViewControllerVisibilityEngine(a1);
  int v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v23 = v18;
    *(_DWORD *)int v17 = 136315138;
    v22[1] = v17 + 4;
    long long v19 = a1[1];
    long long v24 = *a1;
    long long v25 = v19;
    v26[0] = a1[2];
    *(_OWORD *)((char *)v26 + 9) = *(long long *)((char *)a1 + 41);
    unint64_t v20 = UISplitViewControllerVisibilityEngine.description.getter();
    *(void *)&long long v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of UISplitViewControllerVisibilityEngine(a1);
    outlined release of UISplitViewControllerVisibilityEngine(a1);
    _os_log_impl(&dword_1872C6000, v15, v16, "wrote visibility back to bindings, %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v18, -1, -1);
    MEMORY[0x18C119C60](v17, -1, -1);
  }
  else
  {

    outlined release of UISplitViewControllerVisibilityEngine(a1);
    outlined release of UISplitViewControllerVisibilityEngine(a1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, v12);
}

uint64_t assignWithCopy for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_retain();
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    unsigned int v11 = *(unsigned __int8 *)(v9 + 17);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)v9 + 2;
    }
    if (v11 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    if (v12 == 1)
    {
      *(void *)unint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
      *(unsigned char *)(v9 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      *(unsigned char *)(v9 + 17) = 0;
    }
    swift_retain();
  }
  unint64_t v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(v13 + 9) = *(unsigned char *)(v14 + 9);
  unint64_t v15 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v16 = (a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v18 = *(_OWORD *)v17;
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  *(_OWORD *)unint64_t v16 = v18;
  long long v19 = (_OWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (long long *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = *v20;
  long long v22 = v20[2];
  v19[1] = v20[1];
  void v19[2] = v22;
  *long long v19 = v21;
  unint64_t v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = *(void *)(v23 + 8);
  if (v25 >= 0xFFFFFFFF) {
    LODWORD(v25) = -1;
  }
  int v26 = v25 - 1;
  unint64_t v27 = *(void *)(v24 + 8);
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  int v28 = v27 - 1;
  if (v26 < 0)
  {
    if (v28 < 0)
    {
      swift_weakCopyAssign();
      *(void *)(v23 + 8) = *(void *)(v24 + 8);
      swift_retain();
      swift_release();
      *(void *)(v23 + 16) = *(void *)(v24 + 16);
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if ((v28 & 0x80000000) == 0)
  {
LABEL_21:
    long long v29 = *(_OWORD *)v24;
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    *(_OWORD *)unint64_t v23 = v29;
    goto LABEL_22;
  }
  swift_weakCopyInit();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  swift_retain();
  swift_retain();
LABEL_22:
  *(unsigned char *)(v23 + 24) = *(unsigned char *)(v24 + 24);
  unint64_t v30 = ((unint64_t)v19 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v20 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v30 = *(unsigned char *)v31;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  swift_retain();
  swift_release();
  unint64_t v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = *(void *)v33;
  uint64_t v35 = *(void *)(v33 + 8);
  LOBYTE(v31) = *(unsigned char *)(v33 + 17);
  unsigned __int8 v36 = *(unsigned char *)(v33 + 16);
  outlined copy of Environment<Binding<EditMode>?>.Content(*(void *)v33, v35, v36, v31);
  uint64_t v37 = *(void *)v32;
  uint64_t v38 = *(void *)(v32 + 8);
  char v39 = *(unsigned char *)(v32 + 17);
  *(void *)unint64_t v32 = v34;
  *(void *)(v32 + 8) = v35;
  uint64_t v40 = *(unsigned __int8 *)(v32 + 16);
  *(unsigned char *)(v32 + 16) = v36;
  *(unsigned char *)(v32 + 17) = v31;
  outlined consume of Environment<Binding<Visibility>?>.Content(v37, v38, v40, v39);
  unint64_t v41 = (v32 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (v33 + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = *(void *)v42;
  LOBYTE(v35) = *(unsigned char *)(v42 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v42, v35);
  uint64_t v44 = *(void *)v41;
  uint64_t v45 = *(unsigned __int8 *)(v41 + 8);
  *(void *)unint64_t v41 = v43;
  *(unsigned char *)(v41 + 8) = v35;
  outlined consume of Environment<Bool?>.Content(v44, v45);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  long long v17;
  _OWORD *v18;
  long long *v19;
  long long v20;
  long long v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  long long v28;
  unint64_t v29;
  unint64_t v30;

  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  unsigned int v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_retain();
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unsigned int v11 = (void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unsigned char *v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(_OWORD *)v16;
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = v17;
  long long v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v19 = (long long *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = *v19;
  long long v21 = v19[2];
  v18[1] = v19[1];
  uint64_t v18[2] = v21;
  *long long v18 = v20;
  long long v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = *(void *)(v22 + 8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  unint64_t v25 = v24 - 1;
  int v26 = *(void *)(v23 + 8);
  if (v26 >= 0xFFFFFFFF) {
    LODWORD(v26) = -1;
  }
  unint64_t v27 = v26 - 1;
  if (v25 < 0)
  {
    if (v27 < 0)
    {
      swift_weakCopyAssign();
      *(void *)(v22 + 8) = *(void *)(v23 + 8);
      swift_retain();
      swift_release();
      *(void *)(v22 + 16) = *(void *)(v23 + 16);
      swift_retain();
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v27 & 0x80000000) == 0)
  {
LABEL_10:
    int v28 = *(_OWORD *)v23;
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    *(_OWORD *)long long v22 = v28;
    goto LABEL_11;
  }
  swift_weakCopyInit();
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  swift_retain();
  swift_retain();
LABEL_11:
  long long v29 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)long long v29 = *(_DWORD *)v30;
  *(_DWORD *)(v29 + 4) = *(_DWORD *)(v30 + 4);
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  return a1;
}

uint64_t key path getter for UISplitViewControllerProxy.subscript<A>(dynamicMember:) : <A>UISplitViewControllerProxyA@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = *a1;
  swift_bridgeObjectRetain();
  UISplitViewControllerProxy.subscript.getter(v3, a2);

  return swift_bridgeObjectRelease();
}

uint64_t UISplitViewControllerProxy.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = swift_retain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v8)
    {
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_release();
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  uint64_t v9 = *(void *)(*MEMORY[0x1E4FBBE08] + v4 + 8);
  int v10 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, v10 ^ 1u, 1, v9);
}

uint64_t partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(void (*a1)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v5 = (_OWORD *)v1[5];
  uint64_t v7 = v1[6];
  long long v8 = v5[1];
  v10[0] = *v5;
  v10[1] = v8;
  _OWORD v10[2] = v5[2];
  AGGraphClearUpdate();
  a1(v3, v4, v6, v10, v7);
  return AGGraphSetUpdate();
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  _OWORD v10[3];

  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v5 = (_OWORD *)v1[5];
  uint64_t v7 = v1[6];
  long long v8 = v5[1];
  v10[0] = *v5;
  v10[1] = v8;
  _OWORD v10[2] = v5[2];
  AGGraphClearUpdate();
  a1(v3, v4, v6, v10, v7);
  return AGGraphSetUpdate();
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  long long v5 = a4[1];
  long long v40 = *a4;
  long long v41 = v5;
  long long v42 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    long long v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v39 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      unint64_t v32 = &v26;
      uint64_t v11 = v40;
      long long v12 = v41;
      char v13 = v42;
      int v28 = (void *)*((void *)&v42 + 1);
      uint64_t v34 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v35 = static RepresentableContextValues.current;
      uint64_t v14 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v33 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v40;
      xmmword_1EB2E8DA0 = v41;
      int v15 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v42;
      uint64_t v27 = *((void *)&v40 + 1);
      swift_retain();
      swift_retain();
      uint64_t v26 = v12;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      id v29 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      uint64_t v16 = v35;
      uint64_t v17 = v34;
      uint64_t v18 = v33;
      uint64_t v30 = v14;
      int v31 = v15;
      outlined copy of RepresentableContextValues?(v35, v34, v33, v14, v15);
      outlined consume of RepresentableContextValues?(v16, v17, v18, v14, v15);
      long long v19 = a5[1];
      long long v43 = *a5;
      long long v44 = v19;
      long long v45 = a5[2];
      uint64_t v46 = v43;
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v44 + 8, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v45, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700]);
      uint64_t v49 = *((void *)&v45 + 1);
      v36[0] = v11;
      v36[1] = v27;
      uint64_t v20 = v26;
      void v36[2] = v26;
      v36[3] = *((void *)&v12 + 1);
      char v37 = v13;
      long long v21 = v28;
      uint64_t v38 = v28;
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v46);
      swift_retain();
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v47);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v48);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v49);
      id v22 = v21;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v12 + 1), v13);
      Switch.updateUIView(_:context:)(v29, v36);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v12 + 1), v13);

      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v46);
      swift_release();
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v47);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v48);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v49);
      long long v23 = static RepresentableContextValues.current;
      long long v24 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v35;
      *((void *)&static RepresentableContextValues.current + 1) = v34;
      *(void *)&xmmword_1EB2E8DA0 = v33;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v30;
      char v25 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v31;
      outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v20, *((uint64_t *)&v12 + 1), v13);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  id v11;
  long long v12;
  uint64_t v13;
  long long v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  long long v23;
  void *v24;
  id v25;
  long long v26;
  long long v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  id v39;
  long long v40;
  long long v41;
  long long v42;
  _OWORD v43[2];
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  char v51[8];
  uint64_t v52;

  long long v5 = a4[1];
  long long v40 = *a4;
  long long v41 = v5;
  long long v42 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    long long v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v39 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      uint64_t v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v12 = v10[1];
      v43[0] = *v10;
      v43[1] = v12;
      long long v44 = v10[2];
      char v37 = &v29;
      char v13 = *(void *)&v43[0];
      uint64_t v14 = v12;
      int v15 = v44;
      uint64_t v38 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v16 = static RepresentableContextValues.current;
      int v31 = *((void *)&xmmword_1EB2E8DA0 + 1);
      unint64_t v32 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v43[0];
      xmmword_1EB2E8DA0 = v12;
      uint64_t v30 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v44;
      swift_retain();
      unsigned __int8 v36 = v13;
      swift_retain();
      uint64_t v35 = *((void *)&v14 + 1);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v14, *((uint64_t *)&v14 + 1), v15);
      uint64_t v34 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v14, *((uint64_t *)&v14 + 1), v15);
      uint64_t v17 = v16;
      uint64_t v33 = v16;
      uint64_t v18 = v16;
      long long v19 = v38;
      uint64_t v20 = v32;
      long long v21 = v31;
      id v22 = v30;
      outlined copy of RepresentableContextValues?(v18, v38, v32, v31, v30);
      outlined consume of RepresentableContextValues?(v17, v19, v20, v21, v22);
      long long v23 = a5[1];
      long long v45 = *a5;
      uint64_t v46 = v23;
      uint64_t v47 = a5[2];
      char v48 = v45;
      uint64_t v49 = v23;
      unint64_t v50 = v47;
      long long v24 = (void *)v23;
      unint64_t v52 = v45;
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v50, (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v52);
      swift_retain();
      char v25 = v24;
      outlined retain of String?((uint64_t)v51);
      specialized PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(v34, (uint64_t)v43);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v52);

      swift_release();
      outlined release of String?((uint64_t)v51);
      uint64_t v26 = static RepresentableContextValues.current;
      uint64_t v27 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v33;
      *((void *)&static RepresentableContextValues.current + 1) = v38;
      *(void *)&xmmword_1EB2E8DA0 = v20;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v21;
      int v28 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v22;
      outlined consume of RepresentableContextValues?(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v35, v15);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  long long v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  uint64_t v20;
  void *v21;
  id v22;
  long long v23;
  long long v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void v36[4];
  char v37;
  void *v38;
  id v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  char v45;
  long long v46;

  long long v5 = a4[1];
  long long v40 = *a4;
  long long v41 = v5;
  long long v42 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    long long v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v39 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      unint64_t v32 = &v26;
      uint64_t v11 = v40;
      long long v12 = v41;
      char v13 = v42;
      int v28 = (void *)*((void *)&v42 + 1);
      uint64_t v34 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v35 = static RepresentableContextValues.current;
      uint64_t v14 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v33 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v40;
      xmmword_1EB2E8DA0 = v41;
      int v15 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v42;
      uint64_t v27 = *((void *)&v40 + 1);
      swift_retain();
      swift_retain();
      uint64_t v26 = *((void *)&v12 + 1);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      id v29 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      uint64_t v16 = v35;
      uint64_t v17 = v34;
      uint64_t v18 = v33;
      uint64_t v30 = v14;
      int v31 = v15;
      outlined copy of RepresentableContextValues?(v35, v34, v33, v14, v15);
      outlined consume of RepresentableContextValues?(v16, v17, v18, v14, v15);
      long long v19 = a5[1];
      long long v43 = *a5;
      long long v44 = v19;
      long long v45 = *((unsigned char *)a5 + 32);
      uint64_t v46 = v43;
      v36[0] = v11;
      v36[1] = v27;
      uint64_t v20 = v26;
      void v36[2] = v12;
      v36[3] = v26;
      char v37 = v13;
      long long v21 = v28;
      uint64_t v38 = v28;
      outlined retain of [Text.Modifier]((uint64_t)&v46);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v46 + 8);
      swift_retain();
      id v22 = v21;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v20, v13);
      SystemSegmentedControl.updateUIView(_:context:)(v29, (uint64_t)v36);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v20, v13);

      outlined release of _LazyLayout_Placements((uint64_t)&v46);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v46 + 8);
      swift_release();
      long long v23 = static RepresentableContextValues.current;
      long long v24 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v35;
      *((void *)&static RepresentableContextValues.current + 1) = v34;
      *(void *)&xmmword_1EB2E8DA0 = v33;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v30;
      char v25 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v31;
      outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v20, v13);
    }
  }
}

void *assignWithTake for UIKitPageIndexView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 24) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 24) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  long long v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  char v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = *(unsigned char *)(v15 + 8);
  uint64_t v17 = *(void *)v14;
  uint64_t v18 = *(unsigned __int8 *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v15;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitDatePicker(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
    uint64_t v8 = *(int *)(v7 + 32);
    uint64_t v9 = (char *)v6 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    char v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v13(v9, v10, v11);
    unsigned __int8 v36 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
    uint64_t v14 = v36[6];
    unint64_t v15 = (char *)v6 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v17((char *)a2 + v14, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    uint64_t v19 = v36[7];
    uint64_t v20 = (char *)v6 + v19;
    long long v21 = (char *)a2 + v19;
    if (v17((char *)a2 + v19, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v13(v20, v21, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
    }
    *(uint64_t *)((char *)v6 + v36[8]) = *(uint64_t *)((char *)a2 + v36[8]);
    uint64_t v23 = a3[6];
    *(uint64_t *)((char *)v6 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    long long v24 = (uint64_t *)((char *)v6 + v23);
    char v25 = (uint64_t *)((char *)a2 + v23);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    }
    else
    {
      *long long v24 = *v25;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = a3[7];
    int v28 = (uint64_t *)((char *)v6 + v27);
    id v29 = (uint64_t *)((char *)a2 + v27);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v30 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    }
    else
    {
      *int v28 = *v29;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = a3[8];
    unint64_t v32 = (uint64_t *)((char *)v6 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v34 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
    }
    else
    {
      *unint64_t v32 = *v33;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v6;
}

void type metadata accessor for Binding<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata completion function for FocusStoreLocation()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeMetadata2();
    uint64_t v2 = type metadata accessor for Optional();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      type metadata accessor for FocusStore.Entry();
      uint64_t v0 = type metadata accessor for Optional();
      if (v4 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return v0;
}

uint64_t View.pickerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PickerStyleWriter();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

double closure #2 in CircularPercentageGauge.body.getter@<D0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  double result = 58.0;
  *(_OWORD *)a2 = xmmword_18836C4A0;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  *(unsigned char *)(a2 + 40) = a1 & 1;
  *(unsigned char *)(a2 + 41) = BYTE1(a1) & 1;
  *(unsigned char *)(a2 + 42) = BYTE2(a1) & 1;
  *(void *)(a2 + 48) = v9;
  *(_WORD *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = KeyPath;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContentMarginPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t CubicGradientProvider.resolve(in:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7 = *(void *)(a2 + 16);
  if (!a3)
  {
    int64_t v8 = *(void *)(a2 + 16);
    if (v7) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t result = default argument 1 of ResolvedGradient.init(stops:colorSpace:)();
    *(void *)a5 = MEMORY[0x1E4FBC860];
    *(unsigned char *)(a5 + 8) = v21;
    return result;
  }
  if (*(void *)(a3 + 16) <= v7) {
    int64_t v8 = *(void *)(a2 + 16);
  }
  else {
    int64_t v8 = *(void *)(a3 + 16);
  }
  if (!v8) {
    goto LABEL_14;
  }
LABEL_6:
  long long v20 = *a1;
  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0, MEMORY[0x1E4FBC860]);
  unint64_t v10 = 0;
  uint64_t v11 = a4 + 44;
  do
  {
    if (v10 < v7)
    {
      long long v21 = v20;
      swift_retain();
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
    }
    ResolvedGradient.Stop.init(color:location:interpolation:)();
    long long v12 = v21;
    long long v13 = v23;
    unint64_t v15 = *((void *)v9 + 2);
    unint64_t v14 = *((void *)v9 + 3);
    if (v15 >= v14 >> 1)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v9);
      long long v12 = v21;
      long long v13 = v23;
      uint64_t v9 = v17;
    }
    *((void *)v9 + 2) = v15 + 1;
    uint64_t v16 = &v9[48 * v15];
    *((_OWORD *)v16 + 2) = v12;
    ++v10;
    *((void *)v16 + 6) = v22;
    *(_OWORD *)(v16 + 56) = v13;
    v16[72] = v24;
    v11 += 16;
  }
  while (v8 != v10);
  uint64_t result = default argument 1 of ResolvedGradient.init(stops:colorSpace:)();
  *(void *)a5 = v9;
  *(unsigned char *)(a5 + 8) = v21;
  return result;
}

uint64_t specialized static SceneID.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = a5;
  uint64_t v8 = a2;
  if (a3)
  {
    if (a6)
    {
      char v10 = a1 == a4 && a2 == a5;
      return v10 & 1;
    }
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v20 = v11;
    v12._countAndFlagsBits = 45;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v8 = v20;
    swift_bridgeObjectRetain();
    if (v18 != a4) {
      goto LABEL_15;
    }
LABEL_10:
    if (v8 == v6)
    {
      swift_bridgeObjectRelease_n();
      char v10 = 1;
      return v10 & 1;
    }
LABEL_15:
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10 & 1;
  }
  if (a6)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _typeName(_:qualified:)();
    uint64_t v21 = v14;
    v15._countAndFlagsBits = 45;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v6 = v21;
    if (a1 != v19) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  if (a1 == a4 && a2 == a5)
  {
    char v10 = 1;
    return v10 & 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CountingIndex();
  uint64_t v6 = a3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a3, a2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v6, a1, v5);
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for ListUpdate();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ListContentVisitor()
{
  type metadata accessor for _RowVisitationContext();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        _OWORD v4[5] = v4;
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_DWORD *_LazyLayoutViewCache.init(layout:list:inputs:)(int a1, int a2, uint64_t *a3)
{
  uint64_t v14 = *a3;
  int v6 = *((_DWORD *)a3 + 2);
  uint64_t v7 = a3[2];
  int v15 = *((_DWORD *)a3 + 20);
  uint64_t v8 = *(void *)(*(void *)v3 + 320);
  uint64_t v9 = *(void *)(*(void *)v3 + 328);
  char v10 = *(void (**)(uint64_t, uint64_t))(v9 + 40);
  swift_retain();
  v10(v8, v9);
  v3[57] = a1;
  swift_release();
  uint64_t v17 = v14;
  int v18 = v6;
  uint64_t v19 = v7;
  uint64_t v11 = a3[4];
  uint64_t v20 = a3[3];
  uint64_t v21 = v11;
  long long v12 = *(_OWORD *)(a3 + 7);
  long long v22 = *(_OWORD *)(a3 + 5);
  long long v23 = v12;
  uint64_t v24 = a3[9];
  int v25 = v15;
  LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, a2, (uint64_t)&v17, v8, v9);
  return v3;
}

uint64_t LazyLayoutViewCache.init<A>(layout:list:inputs:)(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v171 = a4;
  uint64_t v172 = a5;
  LODWORD(v173) = a2;
  LODWORD(v154) = a1;
  uint64_t v197 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)a3;
  unsigned int v7 = *(_DWORD *)(a3 + 8);
  unint64_t v8 = *(void *)(a3 + 16);
  int v9 = *(_DWORD *)(a3 + 28);
  LODWORD(v168) = *(_DWORD *)(a3 + 24);
  HIDWORD(v168) = v9;
  unsigned int v10 = *(_DWORD *)(a3 + 32);
  unsigned int v170 = *(_DWORD *)(a3 + 36);
  unint64_t v11 = *(void *)(a3 + 40);
  unint64_t v12 = *(void *)(a3 + 48);
  unsigned int v13 = *(_DWORD *)(a3 + 56);
  unsigned int v166 = v10;
  unsigned int v167 = v13;
  unsigned int v164 = *(_DWORD *)(a3 + 60);
  unsigned int v14 = *(_DWORD *)(a3 + 68);
  unsigned int v160 = *(_DWORD *)(a3 + 64);
  unsigned int v161 = v7;
  unsigned int v15 = *(_DWORD *)(a3 + 72);
  HIDWORD(v159) = *(_DWORD *)(a3 + 76);
  int v16 = *(_DWORD *)(a3 + 80);
  swift_weakInit();
  int v17 = *MEMORY[0x1E4F4E7A0];
  uint64_t v175 = v5;
  *(_DWORD *)(v5 + 168) = 0;
  int v156 = v17;
  *(_DWORD *)(v5 + 148) = v17;
  *(void *)(v5 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v5 + 176) = xmmword_188371540;
  *(_DWORD *)(v5 + 192) = 0;
  *(_DWORD *)(v5 + 220) = 0;
  *(void *)(v5 + 200) = 0;
  *(void *)(v5 + 208) = 0;
  *(unsigned char *)(v5 + 216) = 0;
  uint64_t v151 = v5 + 168;
  *(_DWORD *)(v5 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0]();
  swift_weakAssign();
  swift_release();
  unint64_t v188 = v6;
  unsigned int v189 = v161;
  unint64_t v190 = v8;
  *(void *)&long long v191 = v168;
  *((void *)&v191 + 1) = __PAIR64__(v170, v166);
  unint64_t v192 = v11;
  unint64_t v193 = v12;
  *(void *)&long long v194 = __PAIR64__(v164, v167);
  *((void *)&v194 + 1) = __PAIR64__(v14, v160);
  unsigned int v158 = v14;
  LODWORD(v159) = v15;
  unint64_t v195 = __PAIR64__(HIDWORD(v159), v15);
  int v157 = v16;
  int v196 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v155 = _GraphInputs.scrollTargetRole.getter();
  unint64_t v169 = v12;
  char v18 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  unint64_t v19 = v6;
  v187[0] = v6;
  LODWORD(v187[1]) = v161;
  unint64_t v20 = v8;
  v187[2] = v8;
  v187[3] = v168;
  v187[4] = __PAIR64__(v170, v166);
  unint64_t v163 = v11;
  v187[5] = v11;
  char v21 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v18 & 1) != 0 && (v21)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  if (v155 != v156)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v187[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  unsigned int v22 = v189;
  unint64_t v23 = v190;
  unint64_t v25 = v192;
  unint64_t v24 = v193;
  int v26 = v196;
  uint64_t v27 = v175;
  *(void *)(v175 + 32) = v188;
  *(_DWORD *)(v27 + 40) = v22;
  unint64_t v153 = v23;
  *(void *)(v27 + 48) = v23;
  *(_OWORD *)(v27 + 56) = v191;
  *(void *)(v27 + 72) = v25;
  *(void *)(v27 + 80) = v24;
  uint64_t v174 = v24;
  *(_OWORD *)(v27 + 88) = v194;
  *(void *)(v27 + 104) = v195;
  *(_DWORD *)(v27 + 112) = v26;
  id v28 = (id)AGSubgraphGetCurrent();
  if (!v28) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v27 + 24) = v28;
  *(_DWORD *)(v27 + 136) = v173;
  unint64_t v165 = v19;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v29 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v27 + 140) = v29;
  unint64_t v162 = v20;
  LOBYTE(v186[0]) = 1;
  *(_DWORD *)(v27 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  unsigned int v31 = HIDWORD(v159);
  unsigned int v30 = v160;
  unsigned int v32 = v158;
  int v33 = v157;
  swift_getKeyPath();
  int v34 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v175 + 152) = v34;
  _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v35 = Attribute.init<A>(body:value:flags:update:)();
  v187[0] = v165;
  v187[1] = v161;
  v187[2] = v162;
  v187[3] = v168;
  v187[4] = __PAIR64__(v170, v166);
  v187[5] = v163;
  v187[6] = v169;
  v187[7] = __PAIR64__(v164, v167);
  v187[8] = __PAIR64__(v32, v30);
  v187[9] = __PAIR64__(v31, v159);
  LODWORD(v187[10]) = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LazySubviewPlacements.init(layout:cache:inputs:)(v154, v35, v187, (uint64_t)v186);
  MEMORY[0x1F4188790](v36);
  uint64_t v145 = type metadata accessor for LazySubviewPlacements();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<[_LazyLayout_PlacedSubview]>();
  uint64_t v152 = v145;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v186, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)&AssociatedTypeWitness, v145, MEMORY[0x1E4FBC248], v37, MEMORY[0x1E4FBC278], v38);
  memcpy(v187, v186, 0x149uLL);
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v187);
  unsigned int v39 = v179;
  uint64_t v40 = v175;
  *(_DWORD *)(v175 + 144) = v179;
  *(void *)&v186[0] = __PAIR64__(v35, v39);
  LODWORD(v153) = v35;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  *(void *)(v40 + 120) = *(void *)&v186[0];
  uint64_t v174 = v40 + 120;
  *(void *)(v40 + 128) = *((void *)&v186[0] + 1);
  long long v179 = v193;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v173 = (char *)&v179 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v41 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v43 = *v42;
      uint64_t v44 = v42[1];
      v41(v186, 0);
      uint64_t v45 = *((void *)&v179 + 1);
      *(void *)&v186[0] = v179;
      swift_bridgeObjectRetain();
      uint64_t v46 = PreferenceKeys.endIndex.getter();
      if (v45 < 0 || v45 >= v46) {
        break;
      }
      *((void *)&v179 + 1) = v45 + 1;
      uint64_t v47 = swift_bridgeObjectRelease();
      LODWORD(v186[0]) = *(_DWORD *)(v175 + 144);
      *((void *)&v186[0] + 1) = 0;
      MEMORY[0x1F4188790](v47);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v48 = type metadata accessor for LazyPreference();
      uint64_t v144 = v48;
      uint64_t v145 = swift_getWitnessTable();
      uint64_t v49 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v186, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v142, v48, MEMORY[0x1E4FBC248], v49, MEMORY[0x1E4FBC278], v50);
      swift_release();
      uint64_t v51 = LODWORD(v178[0]);
      swift_beginAccess();
      MEMORY[0x18C10D730](v43, v51, v43, v44);
      swift_endAccess();
      uint64_t v52 = *((void *)&v179 + 1);
      if (v52 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((v170 & 2) != 0)
  {
    *(void *)&v186[0] = v165;
    unsigned int v54 = v161;
    DWORD2(v186[0]) = v161;
    unint64_t v55 = v163;
    *(void *)&v186[1] = v162;
    unsigned int v56 = v168;
    *((void *)&v186[1] + 1) = v168;
    unsigned int v58 = v166;
    unsigned int v57 = v167;
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v169;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    unsigned int v59 = v164;
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    int v60 = v157;
    *((void *)&v186[4] + 1) = v159;
    LODWORD(v186[5]) = v157;
    LODWORD(v173) = _ViewInputs.environment.getter();
    *(void *)&v186[0] = v165;
    DWORD2(v186[0]) = v54;
    *(void *)&v186[1] = v162;
    *((void *)&v186[1] + 1) = __PAIR64__(HIDWORD(v168), v56);
    *(void *)&v186[2] = __PAIR64__(v170, v58);
    *((void *)&v186[2] + 1) = v55;
    *(void *)&v186[3] = v169;
    *((void *)&v186[3] + 1) = __PAIR64__(v59, v57);
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    *((void *)&v186[4] + 1) = v159;
    LODWORD(v186[5]) = v60;
    _ViewInputs.containerSize.getter();
    *(void *)&v186[0] = LazyLayoutComputer.init(layout:environment:cache:containerSize:)(v154, v173);
    *((void *)&v186[0] + 1) = v61;
    MEMORY[0x1F4188790](*(void *)&v186[0]);
    uint64_t v62 = type metadata accessor for LazyLayoutComputer();
    uint64_t v145 = v62;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, MEMORY[0x1E4F3F978], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v186, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&AssociatedTypeWitness, v62, MEMORY[0x1E4FBC248], v63, MEMORY[0x1E4FBC278], v64);
    swift_beginAccess();
    LOBYTE(v179) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v53 = v175;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v65 = swift_release();
  int v66 = v186[0];
  if (LODWORD(v186[0]) != v156)
  {
    *(void *)&v186[0] = v165;
    unint64_t v67 = v165;
    unsigned int v68 = v161;
    DWORD2(v186[0]) = v161;
    *(void *)&v186[1] = v162;
    unint64_t v69 = v162;
    unsigned int v70 = HIDWORD(v168);
    *((void *)&v186[1] + 1) = v168;
    unsigned int v71 = v168;
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v169;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    unsigned int v72 = v158;
    *((void *)&v186[4] + 1) = v159;
    unsigned int v73 = v159;
    LODWORD(v186[5]) = v157;
    LODWORD(v173) = v66;
    int v150 = _ViewInputs.size.getter();
    *(void *)&v186[0] = v67;
    DWORD2(v186[0]) = v68;
    *(void *)&v186[1] = v69;
    unint64_t v74 = v69;
    *((void *)&v186[1] + 1) = __PAIR64__(v70, v71);
    unsigned int v75 = v166;
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    unint64_t v76 = v163;
    unint64_t v77 = v169;
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v169;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    *(void *)&v186[4] = __PAIR64__(v72, v160);
    *((void *)&v186[4] + 1) = __PAIR64__(HIDWORD(v159), v73);
    int v78 = v157;
    LODWORD(v186[5]) = v157;
    int v149 = _ViewInputs.position.getter();
    *(void *)&v186[0] = v165;
    DWORD2(v186[0]) = v68;
    *(void *)&v186[1] = v74;
    *((void *)&v186[1] + 1) = v168;
    *(void *)&v186[2] = __PAIR64__(v170, v75);
    unsigned int v79 = v170;
    *((void *)&v186[2] + 1) = v76;
    *(void *)&v186[3] = v77;
    unsigned int v80 = v167;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    LODWORD(v74) = v164;
    LODWORD(v76) = HIDWORD(v159);
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    unsigned int v81 = v158;
    LODWORD(v77) = v159;
    *((void *)&v186[4] + 1) = v159;
    LODWORD(v186[5]) = v78;
    int v148 = _ViewInputs.transform.getter();
    *(void *)&v186[0] = v165;
    DWORD2(v186[0]) = v161;
    unint64_t v82 = v163;
    *(void *)&v186[1] = v162;
    *((void *)&v186[1] + 1) = v168;
    *(void *)&v186[2] = __PAIR64__(v79, v166);
    unint64_t v83 = v169;
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v169;
    *((void *)&v186[3] + 1) = __PAIR64__(v74, v80);
    LODWORD(v74) = v160;
    *(void *)&v186[4] = __PAIR64__(v81, v160);
    *((void *)&v186[4] + 1) = __PAIR64__(v76, v77);
    int v84 = v157;
    LODWORD(v186[5]) = v157;
    int v147 = _ViewInputs.environment.getter();
    *(void *)&v186[0] = v165;
    DWORD2(v186[0]) = v161;
    *(void *)&v186[1] = v162;
    *((void *)&v186[1] + 1) = v168;
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    *((void *)&v186[2] + 1) = v82;
    *(void *)&v186[3] = v83;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    *(void *)&v186[4] = __PAIR64__(v81, v74);
    *((void *)&v186[4] + 1) = __PAIR64__(v76, v77);
    LODWORD(v186[5]) = v84;
    int v85 = _ViewInputs.containerSize.getter();
    uint64_t v87 = v171;
    uint64_t v86 = v172;
    protocol witness for SetAlgebra.init() in conformance UIRectEdge(&v179);
    uint64_t v88 = default argument 10 of LazySubviewPrefetcher.init(layout:size:position:transform:environment:prefetchState:cache:containerSize:prefetchID:placementSeed:phase:)();
    uint64_t v145 = v87;
    uint64_t WitnessTable = v86;
    uint64_t v90 = LazySubviewPrefetcher.init(layout:size:position:transform:environment:prefetchState:cache:containerSize:prefetchID:placementSeed:phase:)(v154, v150, v149, v148, v147, (int)v173, v153, v85, (uint64_t)v186, (uint64_t *)&v179, 0, v88, v89);
    long long v179 = v186[0];
    long long v180 = v186[1];
    *(void *)&long long v181 = *(void *)&v186[2];
    DWORD2(v181) = DWORD2(v186[2]);
    *(void *)&long long v182 = *(void *)&v186[3];
    BYTE8(v182) = BYTE8(v186[3]);
    MEMORY[0x1F4188790](v90);
    uint64_t v91 = type metadata accessor for LazySubviewPrefetcher();
    uint64_t v145 = v91;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v179, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&AssociatedTypeWitness, v91, MEMORY[0x1E4FBC248], v92, MEMORY[0x1E4FBC278], v93);
    uint64_t v53 = v175;
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v65 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v65);
  uint64_t v145 = (uint64_t)partial apply for closure #1 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t WitnessTable = v53;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v53 + 144));
  uint64_t AssociatedTypeWitness = v171;
  uint64_t v144 = v172;
  uint64_t v145 = v53;
  MEMORY[0x1F4188790](v94);
  AGGraphMutateAttribute();
  long long v179 = v193;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v95 = v175;
    while (1)
    {
      long long v96 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v98 = *v97;
      uint64_t v99 = v97[1];
      v96(v186, 0);
      uint64_t v100 = *((void *)&v179 + 1);
      *(void *)&v186[0] = v179;
      swift_bridgeObjectRetain();
      uint64_t v101 = PreferenceKeys.endIndex.getter();
      if (v100 < 0 || v100 >= v101) {
        break;
      }
      uint64_t v102 = v100 + 1;
      *((void *)&v179 + 1) = v102;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v178[0] = *(void *)(v95 + 120);
      v178[1] = *(void *)(v95 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v103 = swift_endAccess();
        MEMORY[0x1F4188790](v103);
        v142[0] = v171;
        v142[1] = v98;
        uint64_t AssociatedTypeWitness = v172;
        uint64_t v144 = v99;
        uint64_t v145 = v95;
        uint64_t v104 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v104);
        AGGraphMutateAttribute();
        uint64_t v102 = *((void *)&v179 + 1);
      }
      if (v102 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  unint64_t v105 = v169;
  *(void *)&v186[0] = v169;
  unsigned int v106 = v167;
  DWORD2(v186[0]) = v167;
  int v107 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  unint64_t v108 = v165;
  if ((v107 & 1) != 0 || v155 != v156)
  {
    *(void *)&v186[0] = v165;
    DWORD2(v186[0]) = v161;
    unsigned int v109 = v161;
    *(void *)&v186[1] = v162;
    unint64_t v110 = v162;
    *((void *)&v186[1] + 1) = v168;
    unsigned int v111 = HIDWORD(v168);
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v105;
    unint64_t v112 = v163;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    unsigned int v113 = v164;
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    int v114 = v157;
    *((void *)&v186[4] + 1) = v159;
    LODWORD(v186[5]) = v157;
    LODWORD(v173) = v107;
    swift_retain();
    _ViewInputs.position.getter();
    uint64_t v154 = AGCreateWeakAttribute();
    *(void *)&v186[0] = v108;
    DWORD2(v186[0]) = v109;
    *(void *)&v186[1] = v110;
    *((void *)&v186[1] + 1) = __PAIR64__(v111, v168);
    LODWORD(v110) = v166;
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    *((void *)&v186[2] + 1) = v112;
    *(void *)&v186[3] = v105;
    *((void *)&v186[3] + 1) = __PAIR64__(v113, v167);
    unsigned int v116 = HIDWORD(v159);
    unsigned int v115 = v160;
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    unsigned int v117 = v158;
    LODWORD(v112) = v159;
    *((void *)&v186[4] + 1) = v159;
    LODWORD(v186[5]) = v114;
    _ViewInputs.transform.getter();
    uint64_t v118 = AGCreateWeakAttribute();
    unint64_t v119 = v105;
    uint64_t v120 = v118;
    *(void *)&v186[0] = v108;
    DWORD2(v186[0]) = v161;
    *(void *)&v186[1] = v162;
    *((void *)&v186[1] + 1) = v168;
    uint64_t v121 = v175;
    *(void *)&v186[2] = __PAIR64__(v170, v110);
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v119;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v167);
    *(void *)&v186[4] = __PAIR64__(v117, v115);
    *((void *)&v186[4] + 1) = __PAIR64__(v116, v112);
    LODWORD(v186[5]) = v114;
    uint64_t v122 = _ViewInputs.weakScrollable.getter();
    swift_beginAccess();
    long long v179 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v123 = AGCreateWeakAttribute();
    swift_retain();
    LazyScrollable.init(position:transform:parent:children:cache:)(v154, v120, v122, v123, v178);
    if (v173)
    {
      uint64_t v124 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for [ScrollStateRequest](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v125 = swift_allocObject();
      *(_OWORD *)(v125 + 16) = xmmword_18834BB80;
      uint64_t v126 = type metadata accessor for LazyScrollable();
      *(void *)(v125 + 56) = v126;
      *(void *)(v125 + 64) = swift_getWitnessTable();
      uint64_t v127 = swift_allocObject();
      *(void *)(v125 + 32) = v127;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v126 - 8) + 16))(v127 + 16, v178, v126);
      *(void *)&v186[0] = v125;
      type metadata accessor for [ScrollStateRequest](0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v124, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type External<[Scrollable]> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v179) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v155 == v156)
    {
      uint64_t v132 = type metadata accessor for LazyScrollable();
      (*(void (**)(void *, uint64_t))(*(void *)(v132 - 8) + 8))(v178, v132);
      swift_release();
      unint64_t v105 = v169;
      unint64_t v108 = v165;
      unsigned int v106 = v167;
    }
    else
    {
      uint64_t v128 = type metadata accessor for LazyScrollable();
      *((void *)&v186[1] + 1) = v128;
      *(void *)&v186[2] = swift_getWitnessTable();
      *(void *)&v186[0] = swift_allocObject();
      uint64_t v173 = *(char **)(v128 - 8);
      (*((void (**)(uint64_t, void *, uint64_t))v173 + 2))(*(void *)&v186[0] + 16, v178, v128);
      uint64_t v129 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for [ScrollStateRequest](0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v129, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v186);
      uint64_t v130 = ScrollTargetRole.SetLayout.init(role:collection:)();
      unint64_t v105 = v169;
      *(void *)&long long v179 = v169;
      unsigned int v106 = v167;
      DWORD2(v179) = v167;
      uint64_t v145 = MEMORY[0x1F4188790](v130);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      unint64_t v108 = v165;
      *(void *)&long long v179 = v165;
      DWORD2(v179) = v161;
      *(void *)&long long v180 = v162;
      *((void *)&v180 + 1) = v168;
      *(void *)&long long v181 = __PAIR64__(v170, v166);
      *((void *)&v181 + 1) = v163;
      *(void *)&long long v182 = v105;
      *((void *)&v182 + 1) = __PAIR64__(v164, v106);
      unint64_t v183 = __PAIR64__(v158, v160);
      uint64_t v184 = v159;
      int v185 = v157;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v131 = ScrollStateRequestTransform.init(collection:inputs:)();
      unint64_t v176 = v105;
      unsigned int v177 = v106;
      MEMORY[0x1F4188790](v131);
      uint64_t v145 = (uint64_t)v186;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      (*((void (**)(void *, uint64_t))v173 + 1))(v178, v128);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v186);
    }
  }
  *(void *)&v186[0] = v105;
  DWORD2(v186[0]) = v106;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    uint64_t v133 = v175;
    unsigned int v135 = *(_DWORD *)(v175 + 128);
    unsigned int v136 = *(_DWORD *)(v175 + 132);
    *(void *)&long long v179 = *(void *)(v175 + 120);
    uint64_t v134 = v179;
    *((void *)&v179 + 1) = __PAIR64__(v136, v135);
    uint64_t v137 = _ViewOutputs.subscript.getter();
    *(void *)&long long v179 = v134;
    *((void *)&v179 + 1) = __PAIR64__(v136, v135);
    uint64_t v138 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    *(void *)&v186[0] = v108;
    DWORD2(v186[0]) = v161;
    *(void *)&v186[1] = v162;
    *((void *)&v186[1] + 1) = v168;
    *(void *)&v186[2] = __PAIR64__(v170, v166);
    *((void *)&v186[2] + 1) = v163;
    *(void *)&v186[3] = v169;
    *((void *)&v186[3] + 1) = __PAIR64__(v164, v106);
    *(void *)&v186[4] = __PAIR64__(v158, v160);
    *((void *)&v186[4] + 1) = v159;
    LODWORD(v186[5]) = v157;
    if ((v137 & 0x100000000) != 0) {
      LODWORD(v137) = v156;
    }
    if ((v138 & 0x100000000) != 0) {
      LODWORD(v138) = v156;
    }
    int v139 = *(_DWORD *)(v133 + 144);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v139, v137, v138, (uint64_t)&v179);
    v186[2] = v181;
    v186[3] = v182;
    *(void *)&v186[4] = v183;
    v186[0] = v179;
    v186[1] = v180;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v179);
    swift_beginAccess();
    LOBYTE(v178[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((BYTE8(v186[0]) & 1) == 0)
  {
    uint64_t v140 = *(void *)&v186[0];
    swift_beginAccess();
    *(void *)(v175 + 176) = v140;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v175;
}

Swift::Void __swiftcall ScrollViewHelper.updateTargetContentOffset(_:velocity:)(CGPoint *_, CGPoint velocity)
{
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options) & 1) == 0
    || (uint64_t v4 = v2,
        uint64_t v5 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes,
        !*(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes)))
  {
    *(void *)&long long v88 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    goto LABEL_8;
  }
  CGFloat y = velocity.y;
  CGFloat x = velocity.x;
  uint64_t v9 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ResolvedScrollBehavior?(v9 + 8, (uint64_t)&v84);
  if (!*((void *)&v85 + 1))
  {
LABEL_8:
    outlined destroy of ResolvedScrollBehavior?((uint64_t)&v84);
    return;
  }
  v82[2] = v86;
  _OWORD v82[3] = v87;
  uint64_t v83 = v88;
  v82[0] = v84;
  v82[1] = v85;
  unsigned int v10 = (void *)MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v10)
  {
    CGFloat v56 = x;
    CGFloat v61 = y;
    unint64_t v11 = v10;
    objc_msgSend(v10, sel_adjustedContentInset);
    double v59 = v12;
    double v14 = v13;
    uint64_t v15 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment + 8);
    v81[0] = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment);
    v81[1] = v15;
    swift_retain();
    swift_retain();
    UIScrollView.scrollGeometry(env:)(v81, (uint64_t)&v84);
    swift_release();
    swift_release();
    *(_OWORD *)int v16 = v84;
    *(_OWORD *)&v16[16] = v85;
    *(_OWORD *)&unsigned char v16[32] = v86;
    uint64_t v17 = *((void *)&v87 + 1);
    uint64_t v19 = *((void *)&v88 + 1);
    uint64_t v18 = v88;
    uint64_t v20 = *((void *)&v89 + 1);
    uint64_t v21 = v89;
    uint64_t v22 = *((void *)&v90 + 1);
    uint64_t v23 = v90;
    long long v60 = v90;
    unsigned int v58 = _;
    double v57 = v14;
    uint64_t v68 = v88;
    uint64_t v69 = *((void *)&v87 + 1);
    uint64_t v66 = v89;
    uint64_t v67 = *((void *)&v88 + 1);
    int v55 = *(unsigned __int8 *)(v9 + 81);
    if (v55 == 1)
    {
      uint64_t v24 = v87;
      ScrollGeometry.contentSize.getter();
      long long v84 = *(_OWORD *)v16;
      long long v85 = *(_OWORD *)&v16[16];
      long long v86 = *(_OWORD *)&v16[32];
      *(void *)&long long v87 = v24;
      *((void *)&v87 + 1) = v69;
      *(void *)&long long v88 = v68;
      *((void *)&v88 + 1) = v67;
      *(void *)&long long v89 = v66;
      *((void *)&v89 + 1) = v20;
      long long v90 = v60;
      ScrollGeometry.containerSize.getter();
      long long v84 = *(_OWORD *)v16;
      long long v85 = *(_OWORD *)&v16[16];
      long long v86 = *(_OWORD *)&v16[32];
      *(void *)&long long v87 = v24;
      *((void *)&v87 + 1) = v69;
      *(void *)&long long v88 = v68;
      *((void *)&v88 + 1) = v67;
      *(void *)&long long v89 = v66;
      *((void *)&v89 + 1) = v20;
      long long v90 = v60;
      ScrollGeometry.contentSize.getter();
      long long v84 = *(_OWORD *)v16;
      long long v85 = *(_OWORD *)&v16[16];
      long long v86 = *(_OWORD *)&v16[32];
      *(void *)&long long v87 = v24;
      *((void *)&v87 + 1) = v69;
      *(void *)&long long v88 = v68;
      *((void *)&v88 + 1) = v67;
      *(void *)&long long v89 = v66;
      *((void *)&v89 + 1) = v20;
      long long v90 = v60;
      ScrollGeometry.containerSize.getter();
      uint64_t v22 = *((void *)&v60 + 1);
      uint64_t v23 = v60;
      uint64_t v21 = v66;
      uint64_t v19 = v67;
      uint64_t v18 = v68;
      uint64_t v17 = v69;
      uint64_t v25 = *(void *)&v16[40];
    }
    else
    {
      uint64_t v25 = *((void *)&v86 + 1);
      uint64_t v24 = v87;
    }
    long long v84 = *(_OWORD *)v16;
    long long v85 = *(_OWORD *)&v16[16];
    *(void *)&long long v86 = *(void *)&v16[32];
    uint64_t v65 = v25;
    *((void *)&v86 + 1) = v25;
    *(void *)&long long v87 = v24;
    *((void *)&v87 + 1) = v17;
    *(void *)&long long v88 = v18;
    *((void *)&v88 + 1) = v19;
    *(void *)&long long v89 = v21;
    *((void *)&v89 + 1) = v20;
    *(void *)&long long v90 = v23;
    *((void *)&v90 + 1) = v22;
    uint64_t v26 = v17;
    uint64_t v27 = v18;
    uint64_t v28 = v19;
    uint64_t v29 = v21;
    ScrollGeometry.containerSize.getter();
    ScrollTarget.init(rect:anchor:)();
    long long v30 = v84;
    long long v31 = v85;
    long long v32 = v86;
    char v33 = 4;
    char v34 = v87;
    int v35 = *(unsigned __int8 *)(v4 + v5);
    if ((*(unsigned char *)(v4 + v3) & 1) != 0 && v35) {
      char v33 = *(unsigned char *)(v9 + 80);
    }
    EnvironmentValues.init()();
    EnvironmentValues.init()();
    long long v36 = v84;
    swift_release();
    swift_release();
    v70[0] = v30;
    v70[1] = v31;
    v70[2] = v32;
    LOBYTE(v71) = v34;
    *((CGFloat *)&v71 + 1) = v56;
    *(CGFloat *)&long long v72 = v61;
    *((void *)&v72 + 1) = *(void *)v16;
    long long v73 = *(_OWORD *)&v16[8];
    long long v74 = *(_OWORD *)&v16[24];
    *(void *)&long long v75 = v65;
    *((void *)&v75 + 1) = v24;
    *(void *)&long long v76 = v26;
    *((void *)&v76 + 1) = v27;
    *(void *)&long long v77 = v28;
    *((void *)&v77 + 1) = v29;
    *(void *)int v78 = v20;
    *(_OWORD *)&v78[8] = v60;
    v78[24] = v35;
    v78[25] = v33;
    *(void *)&long long v79 = MEMORY[0x1E4FBC860];
    *((void *)&v79 + 1) = MEMORY[0x1E4FBC860];
    long long v80 = v36;
    long long v92 = v76;
    long long v93 = v77;
    long long v90 = *(_OWORD *)&v16[24];
    long long v91 = v75;
    long long v84 = v30;
    long long v85 = v31;
    long long v88 = v72;
    long long v89 = *(_OWORD *)&v16[8];
    long long v86 = v32;
    long long v87 = v71;
    long long v96 = v79;
    long long v97 = v36;
    long long v94 = *(_OWORD *)v78;
    long long v95 = *(_OWORD *)&v78[16];
    ScrollGeometry.containerSize.getter();
    uint64_t v37 = ScrollTarget.init(rect:anchor:)();
    MEMORY[0x1F4188790](v37);
    static Update.ensure<A>(_:)();
    ScrollTarget.rect.getter();
    double v39 = v38;
    double v62 = v40;
    if (v55)
    {
      ScrollGeometry.contentSize.getter();
      double v63 = v41;
      ScrollGeometry.containerSize.getter();
      double v39 = v63 - (v39 + v42);
    }
    uint64_t v43 = static Axis.allCases.getter();
    uint64_t v44 = *(void *)(v43 + 16);
    if (v44)
    {
      uint64_t v45 = (unsigned __int8 *)(v43 + 32);
      while (1)
      {
        int v46 = *v45;
        ScrollGeometry.contentSize.getter();
        double v64 = v47;
        double v49 = v48;
        ScrollGeometry.containerSize.getter();
        double v52 = v64;
        if (v46)
        {
          double v52 = v49;
          double v53 = v62;
        }
        else
        {
          double v53 = v39;
        }
        if (v46) {
          double v50 = v51;
        }
        double v54 = v52 - v50;
        if (v54 <= 0.0)
        {
          if (v53 < 0.0 || v53 > 0.0) {
            goto LABEL_30;
          }
        }
        else
        {
          if (v53 >= 0.0)
          {
            if (v54 < v53) {
              double v53 = v54;
            }
            if ((v46 & 1) == 0) {
              goto LABEL_18;
            }
LABEL_36:
            double v62 = v53;
            double v53 = v39;
            goto LABEL_18;
          }
          double v53 = v54;
          if (v54 >= 0.0) {
LABEL_30:
          }
            double v53 = 0.0;
        }
        if (v46) {
          goto LABEL_36;
        }
LABEL_18:
        ++v45;
        double v39 = v53;
        if (!--v44) {
          goto LABEL_38;
        }
      }
    }
    double v53 = v39;
LABEL_38:
    swift_bridgeObjectRelease();
    outlined release of ScrollTargetBehaviorContext((uint64_t)v70);

    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v82);
    v58->CGFloat x = v53 - v57;
    v58->CGFloat y = v62 - v59;
  }
  else
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v82);
  }
}

uint64_t specialized static ToolbarAppearanceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v82 = a5;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v75 = a1;
  uint64_t v76 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v77 = v7;
  uint64_t v78 = 0;
  uint64_t v79 = v10 & v8;
  uint64_t v80 = a2;
  uint64_t v81 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
  uint64_t v11 = v64;
  while (1)
  {
    if (v11 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<UIPress>.Iterator._Variant();
      return swift_release();
    }
    outlined init with take of ToolbarPlacement.Role((uint64_t)v63, (uint64_t)v62);
    char v15 = v63[40];
    uint64_t v58 = v64;
    char v16 = v66;
    uint64_t v17 = v67;
    char v18 = v68;
    uint64_t v53 = v69;
    char v55 = v71;
    char v57 = v70;
    char v19 = v72;
    uint64_t v60 = v73;
    uint64_t v61 = v65;
    char v59 = v74;
    uint64_t v20 = *(void **)v82;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
    uint64_t v23 = v20[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    char v26 = v21;
    if (v20[3] >= v25)
    {
      if ((a4 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, a4 & 1);
      uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_35;
      }
      unint64_t v22 = v27;
    }
    uint64_t v29 = *(void **)v82;
    if (v26)
    {
      uint64_t v49 = 80 * v22;
      uint64_t v30 = v29[7] + 80 * v22;
      uint64_t v32 = *(void *)(v30 + 8);
      uint64_t v31 = *(void *)(v30 + 16);
      int v33 = *(unsigned __int8 *)(v30 + 24);
      uint64_t v52 = *(void *)(v30 + 32);
      uint64_t v34 = *(void *)(v30 + 48);
      int v35 = *(unsigned __int8 *)(v30 + 56);
      int v36 = *(unsigned __int8 *)(v30 + 57);
      char v50 = *(unsigned char *)(v30 + 58);
      char v51 = *(unsigned char *)(v30 + 40);
      uint64_t v37 = *(void *)(v30 + 64);
      int v13 = *(unsigned __int8 *)(v30 + 72);
      if (*(unsigned char *)v30) {
        char v38 = *(unsigned char *)v30;
      }
      else {
        char v38 = v15;
      }
      char v48 = v38;
      uint64_t v39 = v31;
      if (!v31)
      {
        uint64_t v39 = v61;
        swift_retain();
      }
      if (v33) {
        char v16 = v33;
      }
      uint64_t v40 = v53;
      if (!v35) {
        uint64_t v40 = v34;
      }
      uint64_t v54 = v40;
      char v41 = v55;
      if (v36 != 2) {
        char v41 = v36;
      }
      char v56 = v41;
      uint64_t v42 = v37;
      if (!v37)
      {
        uint64_t v42 = v60;
        swift_retain();
      }
      char v12 = v35 & v57;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      swift_release();
      if (!v13) {
        LOBYTE(v13) = v59;
      }
      outlined destroy of ToolbarPlacement.Role((uint64_t)v62);
      uint64_t v14 = *(void *)(*(void *)v82 + 56) + v49;
      swift_release();
      swift_release();
      swift_release();
      *(unsigned char *)uint64_t v14 = v48;
      *(void *)(v14 + 8) = v32;
      *(void *)(v14 + 16) = v39;
      *(unsigned char *)(v14 + 24) = v16;
      *(void *)(v14 + 32) = v52;
      *(unsigned char *)(v14 + 40) = v51;
      *(void *)(v14 + 48) = v54;
      *(unsigned char *)(v14 + 56) = v12;
      *(unsigned char *)(v14 + 57) = v56;
      *(unsigned char *)(v14 + 58) = v50;
      *(void *)(v14 + 64) = v42;
      *(unsigned char *)(v14 + 72) = v13;
    }
    else
    {
      v29[(v22 >> 6) + 8] |= 1 << v22;
      outlined init with take of ToolbarPlacement.Role((uint64_t)v62, v29[6] + 40 * v22);
      uint64_t v43 = v29[7] + 80 * v22;
      *(unsigned char *)uint64_t v43 = v15;
      *(void *)(v43 + 8) = v58;
      *(void *)(v43 + 16) = v61;
      *(unsigned char *)(v43 + 24) = v16;
      *(void *)(v43 + 32) = v17;
      *(unsigned char *)(v43 + 40) = v18;
      *(void *)(v43 + 48) = v53;
      *(unsigned char *)(v43 + 56) = v57;
      *(unsigned char *)(v43 + 57) = v55;
      *(unsigned char *)(v43 + 58) = v19;
      *(void *)(v43 + 64) = v60;
      *(unsigned char *)(v43 + 72) = v59;
      uint64_t v44 = v29[2];
      BOOL v45 = __OFADD__(v44, 1);
      uint64_t v46 = v44 + 1;
      if (v45) {
        goto LABEL_34;
      }
      _OWORD v29[2] = v46;
    }
    specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
    uint64_t v11 = v64;
    a4 = 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt32 v27;
  void *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned char v40[184];
  unsigned char v41[184];
  unsigned char v42[184];
  long long v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  BOOL v45 = a1;
  uint64_t v46 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  double v47 = v8;
  char v48 = 0;
  uint64_t v49 = v11 & v9;
  char v50 = a2;
  char v51 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v43);
  if (!v44) {
    goto LABEL_26;
  }
  char v12 = v43;
  outlined init with take of ConfirmationDialog((uint64_t)&v43 + 8, (uint64_t)v42);
  int v13 = *(void **)a5;
  char v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  char v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    unint64_t v22 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_DWORD *)(v22[6] + 4 * v15) = v12;
    outlined init with take of ConfirmationDialog((uint64_t)v42, v22[7] + 184 * v15);
    uint64_t v23 = v22[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    _OWORD v22[2] = v25;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v43);
    while (v44)
    {
      uint64_t v27 = v43;
      outlined init with take of ConfirmationDialog((uint64_t)&v43 + 8, (uint64_t)v42);
      char v28 = *(void **)a5;
      uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
      uint64_t v31 = v28[2];
      uint64_t v32 = (v30 & 1) == 0;
      BOOL v24 = __OFADD__(v31, v32);
      int v33 = v31 + v32;
      if (v24) {
        goto LABEL_27;
      }
      uint64_t v34 = v30;
      if (v28[3] < v33)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
        uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if ((v34 & 1) != (v35 & 1)) {
          goto LABEL_29;
        }
      }
      if (v34)
      {
        char v26 = 184 * v29;
        outlined init with copy of ConfirmationDialog(*(void *)(*(void *)a5 + 56) + 184 * v29, (uint64_t)v40);
        outlined init with copy of ConfirmationDialog((uint64_t)v40, (uint64_t)v41);
        outlined destroy of ConfirmationDialog((uint64_t)v40);
        outlined destroy of ConfirmationDialog((uint64_t)v42);
        outlined assign with take of ConfirmationDialog((uint64_t)v41, *(void *)(*(void *)a5 + 56) + v26);
      }
      else
      {
        int v36 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
        *(_DWORD *)(v36[6] + 4 * v29) = v27;
        outlined init with take of ConfirmationDialog((uint64_t)v42, v36[7] + 184 * v29);
        uint64_t v37 = v36[2];
        BOOL v24 = __OFADD__(v37, 1);
        char v38 = v37 + 1;
        if (v24) {
          goto LABEL_28;
        }
        void v36[2] = v38;
      }
      specialized LazyMapSequence.Iterator.next()(&v43);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    char v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of ConfirmationDialog(*(void *)(*(void *)a5 + 56) + 184 * v15, (uint64_t)v40);
    outlined init with copy of ConfirmationDialog((uint64_t)v40, (uint64_t)v41);
    outlined destroy of ConfirmationDialog((uint64_t)v40);
    outlined destroy of ConfirmationDialog((uint64_t)v42);
    outlined assign with take of ConfirmationDialog((uint64_t)v41, *(void *)(*(void *)a5 + 56) + 184 * v15);
    goto LABEL_16;
  }
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void **, uint64_t, uint64_t);
  int i;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  void v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void **, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  uint64_t v10 = type metadata accessor for CommandOperation();
  uint64_t v60 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  char v50 = (uint64_t)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v49 = (uint64_t)v48 - v13;
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)v48 - v15;
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for (UIMenuElement, CommandOperation)?, (uint64_t (*)(uint64_t))type metadata accessor for (UIMenuElement, CommandOperation), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8);
  char v19 = (void **)((char *)v48 - v18);
  uint64_t v20 = -1 << *(unsigned char *)(a1 + 32);
  char v21 = ~v20;
  unint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = -v20;
  uint64_t v53 = a1;
  uint64_t v54 = a1 + 64;
  if (v23 < 64) {
    BOOL v24 = ~(-1 << v23);
  }
  else {
    BOOL v24 = -1;
  }
  char v55 = v21;
  char v56 = 0;
  char v57 = v24 & v22;
  uint64_t v58 = a2;
  char v59 = a3;
  v48[1] = a1;
  swift_bridgeObjectRetain();
  v48[0] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
  type metadata accessor for (UIMenuElement, CommandOperation)();
  char v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  char v28 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v27 + 48);
  char v51 = v27 + 48;
  uint64_t v52 = v28;
  for (unint64_t i = v28(v19, 1, v25); ; unint64_t i = v52(v19, 1, v26))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<UIPress>.Iterator._Variant();
      return swift_release();
    }
    int v33 = *v19;
    outlined init with take of CommandOperation((uint64_t)v19 + *(int *)(v26 + 48), (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    uint64_t v34 = *(void **)a5;
    int v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v33);
    uint64_t v37 = v34[2];
    char v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      break;
    }
    uint64_t v40 = v35;
    if (v34[3] >= v39)
    {
      if (a4)
      {
        uint64_t v43 = *(void **)a5;
        if (v35) {
          goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v43 = *(void **)a5;
        if (v40) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, a4 & 1);
      char v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v33);
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_22;
      }
      int v36 = v41;
      uint64_t v43 = *(void **)a5;
      if (v40)
      {
LABEL_5:
        uint64_t v30 = *(void *)(v60 + 72) * v36;
        uint64_t v31 = v50;
        _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v43[7] + v30, v50, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        uint64_t v32 = v49;
        _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v31, v49, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CommandOperation);

        outlined assign with take of CommandOperation(v32, *(void *)(*(void *)a5 + 56) + v30);
        goto LABEL_6;
      }
    }
    v43[(v36 >> 6) + 8] |= 1 << v36;
    *(void *)(v43[6] + 8 * v36) = v33;
    outlined init with take of CommandOperation((uint64_t)v16, v43[7] + *(void *)(v60 + 72) * v36, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    uint64_t v44 = v43[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_21;
    }
    v43[2] = v46;
LABEL_6:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v19);
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  long long v25;
  long long v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  long long v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  long long v48;
  long long v49;
  uint64_t v50;
  long long v51;
  long long v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  char v55 = a1;
  char v56 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  char v57 = v8;
  uint64_t v58 = 0;
  char v59 = v11 & v9;
  uint64_t v60 = a2;
  uint64_t v61 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v51);
  if (!*((void *)&v52 + 1)) {
    goto LABEL_27;
  }
  char v48 = v51;
  uint64_t v49 = v52;
  char v12 = v54;
  char v50 = v53;
  int v13 = *(void **)a5;
  char v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  char v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    BOOL v24 = v23[6] + 40 * v15;
    uint64_t v25 = v48;
    char v26 = v49;
    *(void *)(v24 + 32) = v50;
    *(_OWORD *)BOOL v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
    *(void *)(v23[7] + 8 * v15) = v12;
    uint64_t v27 = v23[2];
    char v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v29;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v51);
    while (*((void *)&v52 + 1))
    {
      char v48 = v51;
      uint64_t v49 = v52;
      uint64_t v31 = v54;
      char v50 = v53;
      uint64_t v32 = *(void **)a5;
      uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
      int v35 = v32[2];
      int v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        uint64_t v34 = v39;
      }
      if (v38)
      {
        outlined destroy of AnyHashable((uint64_t)&v48);
        uint64_t v30 = *(void *)(*(void *)a5 + 56);
        swift_release();
        *(void *)(v30 + 8 * v34) = v31;
      }
      else
      {
        char v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = v41[6] + 40 * v34;
        uint64_t v43 = v48;
        uint64_t v44 = v49;
        *(void *)(v42 + 32) = v50;
        *(_OWORD *)uint64_t v42 = v43;
        *(_OWORD *)(v42 + 16) = v44;
        *(void *)(v41[7] + 8 * v34) = v31;
        BOOL v45 = v41[2];
        char v28 = __OFADD__(v45, 1);
        uint64_t v46 = v45 + 1;
        if (v28) {
          goto LABEL_29;
        }
        v41[2] = v46;
      }
      specialized LazyMapSequence.Iterator.next()(&v51);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
  if ((v19 & 1) == (v21 & 1))
  {
    char v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined destroy of AnyHashable((uint64_t)&v48);
    unint64_t v22 = *(void *)(*(void *)a5 + 56);
    swift_release();
    *(void *)(v22 + 8 * v15) = v12;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned char v40[96];
  unsigned char v41[96];
  uint64_t v42;
  unsigned char v43[88];
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  BOOL v45 = a1;
  uint64_t v46 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  double v47 = v8;
  char v48 = 0;
  uint64_t v49 = v11 & v9;
  char v50 = a2;
  char v51 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
  if (v44 == 255) {
    goto LABEL_27;
  }
  char v12 = v42;
  outlined init with take of NavigationDestinationPresentation((uint64_t)v43, (uint64_t)v41);
  int v13 = *(void **)a5;
  char v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  char v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    unint64_t v22 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v22[6] + 8 * v15) = v12;
    outlined init with take of NavigationDestinationPresentation((uint64_t)v41, v22[7] + 96 * v15);
    uint64_t v23 = v22[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    _OWORD v22[2] = v25;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
    while (v44 != 255)
    {
      char v26 = v42;
      outlined init with take of NavigationDestinationPresentation((uint64_t)v43, (uint64_t)v41);
      uint64_t v27 = *(void **)a5;
      uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      uint64_t v30 = v27[2];
      uint64_t v31 = (v28 & 1) == 0;
      uint64_t v32 = v30 + v31;
      if (__OFADD__(v30, v31)) {
        goto LABEL_28;
      }
      int v33 = v28;
      if (v27[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_30;
        }
        uint64_t v29 = v34;
      }
      if (v33)
      {
        outlined init with copy of NavigationDestinationPresentation((uint64_t)v41, (uint64_t)v40);
        outlined destroy of NavigationDestinationPresentation((uint64_t)v41);
        outlined assign with take of NavigationDestinationPresentation((uint64_t)v40, *(void *)(*(void *)a5 + 56) + 96 * v29);
      }
      else
      {
        int v36 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
        *(void *)(v36[6] + 8 * v29) = v26;
        outlined init with take of NavigationDestinationPresentation((uint64_t)v41, v36[7] + 96 * v29);
        uint64_t v37 = v36[2];
        BOOL v24 = __OFADD__(v37, 1);
        char v38 = v37 + 1;
        if (v24) {
          goto LABEL_29;
        }
        void v36[2] = v38;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    char v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v41, (uint64_t)v40);
    outlined destroy of NavigationDestinationPresentation((uint64_t)v41);
    outlined assign with take of NavigationDestinationPresentation((uint64_t)v40, *(void *)(*(void *)a5 + 56) + 96 * v15);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static PrimitiveButtonGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0();
  type metadata accessor for CGFloat?(0, &lazy cache variable for type metadata for _GraphValue<PrimitiveButtonGesture>, (uint64_t)&type metadata for PrimitiveButtonGesture, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  swift_getKeyPath();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  _GraphInputs.interfaceIdiom.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
  swift_getOpaqueTypeConformance2();
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  type metadata accessor for CGFloat?(0, (unint64_t *)&lazy cache variable for type metadata for _GestureOutputs<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, MEMORY[0x1E4F3FC30]);
  _GestureOutputs.phase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for CGFloat?(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3F5F8]);
  lazy protocol witness table accessor for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase();
  Attribute.init<A>(body:value:flags:update:)();
  _GestureOutputs.withPhase<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>();
    lazy protocol witness table accessor for type AddGestureModifier<_EndedGesture<SpatialTapGesture>> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0);
    }
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

unsigned __int8 *assignWithCopy for SearchPrimitiveModifier.SearchConfigModifier(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v73 = type metadata accessor for AttributedString();
    uint64_t v6 = *(void *)(v73 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v71 = *(void *)(v6 + 64);
    uint64_t v8 = ((v7 + 9) & ~v7) + v71;
    unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_15:
          }
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 2;
          else {
LABEL_17:
          }
            unsigned int v13 = v16 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v7;
    uint64_t v18 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v17, v73);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v17, v73);
      swift_release();
    }
    unsigned int v19 = a2[v12];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_31:
            unsigned int v19 = (v22 | (v20 << (8 * v12))) + 2;
            break;
          }
LABEL_35:
          if (v22 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
LABEL_33:
      *(void *)a1 = *(void *)a2;
      uint64_t v23 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      BOOL v24 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v23 = *v24;
      uint64_t v25 = ((unint64_t)v23 + v11 + 8) & v18;
      uint64_t v26 = ((unint64_t)v24 + v11 + 8) & v18;
      *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
      *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
      *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
      *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
      unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v29 = *(_DWORD *)v28;
      *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
      *(_DWORD *)unint64_t v27 = v29;
      uint64_t v30 = v7 + 5;
      uint64_t v31 = (v7 + 5 + v27) & v17;
      unint64_t v32 = (v30 + v28) & v17;
      int v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v33(v31, v32, v73);
      *(unsigned char *)(v31 + v71) = *(unsigned char *)(v32 + v71);
      unint64_t v34 = (v31 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v35 = (v32 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      int v36 = *(_DWORD *)(v35 + 4);
      *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
      *(_DWORD *)(v34 + 4) = v36;
      a1[v12] = 1;
    }
    else
    {
LABEL_36:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      unint64_t v37 = (unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v38 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v39 = *(_DWORD *)v38;
      *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
      *(_DWORD *)unint64_t v37 = v39;
      uint64_t v40 = (v37 + v7 + 5) & v17;
      uint64_t v41 = (v38 + v7 + 5) & v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v40, v41, v73);
      *(unsigned char *)(v40 + v71) = *(unsigned char *)(v41 + v71);
      unint64_t v42 = (v40 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v43 = (v41 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      int v44 = *(_DWORD *)(v43 + 4);
      *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      *(_DWORD *)(v42 + 4) = v44;
      *(void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      a1[v12] = 0;
      swift_retain();
    }
    uint64_t v3 = a3;
  }
  uint64_t v45 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v46 = ((*(_DWORD *)(v45 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v45 + 80))
      + *(void *)(v45 + 64);
  unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v49 = ((*(_DWORD *)(v45 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v45 + 80) + 16)) + v47 + 9;
  if (v49 <= v48) {
    unint64_t v50 = v48;
  }
  else {
    unint64_t v50 = v49;
  }
  unint64_t v51 = (unint64_t)&a1[v50 + 8] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (unint64_t)&a2[v50 + 8] & 0xFFFFFFFFFFFFFFF8;
  if (v51 != v52)
  {
    unsigned int v53 = *(unsigned __int8 *)(v51 + 17);
    if (v53 >= 2) {
      unsigned int v53 = *(_DWORD *)v51 + 2;
    }
    if (v53 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v54 = *(unsigned __int8 *)(v52 + 17);
    if (v54 >= 2) {
      unsigned int v54 = *(_DWORD *)v52 + 2;
    }
    if (v54 == 1)
    {
      *(void *)unint64_t v51 = *(void *)v52;
      *(void *)(v51 + 8) = *(void *)(v52 + 8);
      *(unsigned char *)(v51 + 16) = *(unsigned char *)(v52 + 16);
      *(unsigned char *)(v51 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v51 = *(unsigned char *)v52;
      *(void *)(v51 + 8) = *(void *)(v52 + 8);
      *(unsigned char *)(v51 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v55 = *(void *)(*(void *)(v3 + 16) - 8);
  uint64_t v56 = v55 + 24;
  uint64_t v57 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v58 = (v51 + v57 + 18) & ~v57;
  (*(void (**)(uint64_t, unint64_t))(v55 + 24))(v58, (v52 + v57 + 18) & ~v57);
  uint64_t v59 = *(void *)(v56 + 40);
  *(unsigned char *)(v58 + v59) = *(unsigned char *)(((v52 + v57 + 18) & ~v57) + v59);
  unint64_t v60 = v59 + (((v50 & 0xFFFFFFFFFFFFFFF8) + v57 + 26) & ~v57) + 1;
  unint64_t v61 = (unint64_t)&a2[v60];
  a1[v60] = a2[v60];
  unint64_t v62 = (unint64_t)&a1[v60] & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v62 + 8) = *(unsigned char *)((v61 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v63 = v62 + 8;
  unint64_t v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v65 = (_OWORD *)(v63 + 8);
  uint64_t v67 = (uint64_t *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v66 = *v67;
  if (!*(void *)(v63 + 8))
  {
    if (v66)
    {
      uint64_t v69 = *(void *)(v64 + 16);
      *(void *)(v63 + 8) = v66;
      *(void *)(v63 + 16) = v69;
      swift_retain();
      return a1;
    }
LABEL_58:
    *uint64_t v65 = *(_OWORD *)v67;
    return a1;
  }
  if (!v66)
  {
    outlined destroy of TriggerSubmitAction(v63 + 8);
    goto LABEL_58;
  }
  uint64_t v68 = *(void *)(v64 + 16);
  *(void *)(v63 + 8) = v66;
  *(void *)(v63 + 16) = v68;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 33 + a1) & ~v8;
  uint64_t v10 = (v8 + 33 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40);
  unint64_t v12 = v11 + v9;
  unint64_t v13 = v11 + v10;
  *(unsigned char *)unint64_t v12 = *(unsigned char *)v13;
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v18 = *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 32);
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)v17;
      uint64_t v26 = *(void *)(v17 + 8);
      char v27 = *(unsigned char *)(v17 + 16);
      outlined copy of Text.Storage(*(void *)v17, v26, v27);
      *(void *)unint64_t v15 = v25;
      *(void *)(v15 + 8) = v26;
      *(unsigned char *)(v15 + 16) = v27;
      *(void *)(v15 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v18 >= 0xFFFFFFFF)
    {
      uint64_t v19 = *(void *)v17;
      uint64_t v20 = *(void *)(v17 + 8);
      char v21 = *(unsigned char *)(v17 + 16);
      outlined copy of Text.Storage(*(void *)v17, v20, v21);
      uint64_t v22 = *(void *)v15;
      uint64_t v23 = *(void *)(v15 + 8);
      char v24 = *(unsigned char *)(v15 + 16);
      *(void *)unint64_t v15 = v19;
      *(void *)(v15 + 8) = v20;
      *(unsigned char *)(v15 + 16) = v21;
      outlined consume of Text.Storage(v22, v23, v24);
      *(void *)(v15 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24));
    swift_bridgeObjectRelease();
  }
  long long v28 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v17;
  *(_OWORD *)(v15 + 16) = v28;
LABEL_8:
  unint64_t v29 = (v14 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v16 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (v29 == v30) {
    goto LABEL_38;
  }
  unsigned int v31 = *(unsigned __int8 *)(v29 + 108);
  if (v31 >= 2) {
    unsigned int v31 = *(_DWORD *)v29 + 2;
  }
  if (v31 == 1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(void *)(v29 + 32))
    {
      swift_release();
      swift_release();
    }
    if (!*(void *)(v29 + 64)) {
      goto LABEL_21;
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v29 + 16))
    {
      swift_release();
      swift_release();
    }
    if (*(void *)(v29 + 48))
    {
      swift_release();
      swift_release();
    }
  }
  swift_release();
LABEL_21:
  unsigned int v32 = *(unsigned __int8 *)(v30 + 108);
  if (v32 >= 2) {
    unsigned int v32 = *(_DWORD *)v30 + 2;
  }
  if (v32 == 1)
  {
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8) = *(void *)(v30 + 8);
    *(void *)(v29 + 16) = *(void *)(v30 + 16);
    *(void *)(v29 + 24) = *(void *)(v30 + 24);
    uint64_t v33 = *(void *)(v30 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      uint64_t v34 = *(void *)(v30 + 40);
      *(void *)(v29 + 32) = v33;
      *(void *)(v29 + 40) = v34;
      uint64_t v35 = *(void *)(v30 + 56);
      *(void *)(v29 + 48) = *(void *)(v30 + 48);
      *(void *)(v29 + 56) = v35;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v39 = *(_OWORD *)(v30 + 48);
      *(_OWORD *)(v29 + 32) = *(_OWORD *)(v30 + 32);
      *(_OWORD *)(v29 + 48) = v39;
    }
    uint64_t v40 = *(void *)(v30 + 64);
    if (v40)
    {
      uint64_t v41 = *(void *)(v30 + 72);
      *(void *)(v29 + 64) = v40;
      *(void *)(v29 + 72) = v41;
      uint64_t v42 = *(void *)(v30 + 88);
      *(void *)(v29 + 80) = *(void *)(v30 + 80);
      *(void *)(v29 + 88) = v42;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v47 = *(_OWORD *)(v30 + 80);
      *(_OWORD *)(v29 + 64) = *(_OWORD *)(v30 + 64);
      *(_OWORD *)(v29 + 80) = v47;
    }
    *(unsigned char *)(v29 + 96) = *(unsigned char *)(v30 + 96);
    int v48 = *(_DWORD *)(v30 + 100);
    *(unsigned char *)(v29 + 104) = *(unsigned char *)(v30 + 104);
    *(_DWORD *)(v29 + 100) = v48;
    *(unsigned char *)(v29 + 105) = *(unsigned char *)(v30 + 105);
    *(unsigned char *)(v29 + 106) = *(unsigned char *)(v30 + 106);
    *(unsigned char *)(v29 + 107) = *(unsigned char *)(v30 + 107);
    *(unsigned char *)(v29 + 108) = 1;
  }
  else
  {
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8) = *(void *)(v30 + 8);
    uint64_t v36 = *(void *)(v30 + 16);
    swift_bridgeObjectRetain();
    if (v36)
    {
      uint64_t v37 = *(void *)(v30 + 24);
      *(void *)(v29 + 16) = v36;
      *(void *)(v29 + 24) = v37;
      uint64_t v38 = *(void *)(v30 + 40);
      *(void *)(v29 + 32) = *(void *)(v30 + 32);
      *(void *)(v29 + 40) = v38;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v43 = *(_OWORD *)(v30 + 32);
      *(_OWORD *)(v29 + 16) = *(_OWORD *)(v30 + 16);
      *(_OWORD *)(v29 + 32) = v43;
    }
    uint64_t v44 = *(void *)(v30 + 48);
    if (v44)
    {
      uint64_t v45 = *(void *)(v30 + 56);
      *(void *)(v29 + 48) = v44;
      *(void *)(v29 + 56) = v45;
      uint64_t v46 = *(void *)(v30 + 72);
      *(void *)(v29 + 64) = *(void *)(v30 + 64);
      *(void *)(v29 + 72) = v46;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v49 = *(_OWORD *)(v30 + 64);
      *(_OWORD *)(v29 + 48) = *(_OWORD *)(v30 + 48);
      *(_OWORD *)(v29 + 64) = v49;
    }
    *(unsigned char *)(v29 + 80) = *(unsigned char *)(v30 + 80);
    int v50 = *(_DWORD *)(v30 + 84);
    *(unsigned char *)(v29 + 88) = *(unsigned char *)(v30 + 88);
    *(_DWORD *)(v29 + 84) = v50;
    *(unsigned char *)(v29 + 89) = *(unsigned char *)(v30 + 89);
    *(unsigned char *)(v29 + 90) = *(unsigned char *)(v30 + 90);
    *(unsigned char *)(v29 + 91) = *(unsigned char *)(v30 + 91);
    *(void *)(v29 + 96) = *(void *)(v30 + 96);
    *(unsigned char *)(v29 + 108) = 0;
    swift_retain();
  }
LABEL_38:
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(_DWORD *)(v52 + 80) & 0xF8;
  uint64_t v54 = v53 | 7;
  uint64_t v55 = ~(v53 | 7);
  uint64_t v56 = (void *)((v29 + (v53 | 7) + 109) & v55);
  uint64_t v57 = (void *)((v30 + (v53 | 7) + 109) & v55);
  if (*(void *)(v52 + 64) <= 0x10uLL) {
    uint64_t v58 = 16;
  }
  else {
    uint64_t v58 = *(void *)(v52 + 64);
  }
  uint64_t v59 = (v53 + 23) & ~v54;
  unint64_t v60 = (void *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v61 = (unint64_t *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v62 = *v61;
  if (*v60 < 0xFFFFFFFFuLL)
  {
    if (v62 >= 0xFFFFFFFF)
    {
      uint64_t v83 = v51;
      uint64_t v85 = *(void *)(v51 - 8);
      *uint64_t v56 = *v57;
      *unint64_t v60 = *v61;
      uint64_t v71 = (_OWORD *)(((unint64_t)v60 + v54 + 8) & v55);
      char v72 = (_OWORD *)(((unint64_t)v61 + v54 + 8) & v55);
      unsigned int v73 = *((unsigned __int8 *)v72 + v58);
      swift_retain();
      swift_retain();
      if (v73 <= 1)
      {
        if (v73 == 1)
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v85 + 16))(v71, v72, v83);
          char v78 = 1;
        }
        else
        {
          char v78 = 0;
          *uint64_t v71 = *v72;
        }
        *((unsigned char *)v71 + v58) = v78;
        *((unsigned char *)v71 + v58 + 1) = *((unsigned char *)v72 + v58 + 1);
        return a1;
      }
      uint64_t v75 = v71;
      uint64_t v76 = (const void *)(((unint64_t)v61 + v54 + 8) & v55);
      size_t v74 = v58 + 2;
LABEL_71:
      memcpy(v75, v76, v74);
      return a1;
    }
    size_t v74 = v59 + v58 + 2;
LABEL_62:
    uint64_t v75 = v56;
    uint64_t v76 = v57;
    goto LABEL_71;
  }
  uint64_t v82 = v51;
  uint64_t v84 = *(void *)(v51 - 8);
  if (v62 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    if (*(unsigned char *)((((unint64_t)v60 + v54 + 8) & v55) + v58) == 1) {
      (*(void (**)(void))(v84 + 8))();
    }
    size_t v74 = v59 + v58 + 2;
    goto LABEL_62;
  }
  *uint64_t v56 = *v57;
  swift_retain();
  swift_release();
  *unint64_t v60 = *v61;
  swift_retain();
  swift_release();
  unint64_t v63 = (unsigned __int8 *)(((unint64_t)v60 + v54 + 8) & v55);
  unint64_t v64 = (unsigned __int8 *)(((unint64_t)v61 + v54 + 8) & v55);
  unsigned int v65 = v63[v58];
  unsigned int v66 = v64[v58];
  if (v65 > 1)
  {
    if (v66 <= 1)
    {
      if (v66 == 1)
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v84 + 16))(((unint64_t)v60 + v54 + 8) & v55, ((unint64_t)v61 + v54 + 8) & v55, v82);
        char v79 = 1;
      }
      else
      {
        char v79 = 0;
        *(_OWORD *)unint64_t v63 = *(_OWORD *)v64;
      }
      v63[v58] = v79;
      v63[v58 + 1] = v64[v58 + 1];
      return a1;
    }
    goto LABEL_70;
  }
  if (v66 > 1)
  {
    if (v65 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v84 + 8))(v63, v82);
    }
LABEL_70:
    uint64_t v75 = (void *)(((unint64_t)v60 + v54 + 8) & v55);
    uint64_t v76 = (const void *)(((unint64_t)v61 + v54 + 8) & v55);
    size_t v74 = v58 + 2;
    goto LABEL_71;
  }
  uint64_t v67 = v58 + 1;
  if (v63 != v64)
  {
    if (v65 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v84 + 8))(v63, v82);
      unsigned int v66 = v64[v58];
      unsigned int v68 = v66 - 2;
      if (v66 < 2)
      {
        uint64_t v67 = v58 + 1;
      }
      else
      {
        if (v58 <= 3) {
          uint64_t v69 = v58;
        }
        else {
          uint64_t v69 = 4;
        }
        uint64_t v67 = v58 + 1;
        switch(v69)
        {
          case 1:
            int v70 = *v64;
            goto LABEL_79;
          case 2:
            int v70 = *(unsigned __int16 *)v64;
            goto LABEL_79;
          case 3:
            int v70 = *(unsigned __int16 *)v64 | (*(unsigned __int8 *)((((unint64_t)v61 + v54 + 8) & v55) + 2) << 16);
            goto LABEL_79;
          case 4:
            int v70 = *(_DWORD *)v64;
LABEL_79:
            int v80 = (v70 | (v68 << (8 * v58))) + 2;
            unsigned int v66 = v70 + 2;
            if (v58 < 4) {
              unsigned int v66 = v80;
            }
            break;
          default:
            break;
        }
      }
    }
    if (v66 == 1)
    {
      (*(void (**)(unsigned __int8 *, unint64_t, uint64_t))(v84 + 16))(v63, ((unint64_t)v61 + v54 + 8) & v55, v82);
      uint64_t v67 = v58 + 1;
      char v81 = 1;
    }
    else
    {
      char v81 = 0;
      *(_OWORD *)unint64_t v63 = *(_OWORD *)v64;
    }
    v63[v58] = v81;
  }
  v63[v67] = v64[v67];
  return a1;
}

ValueMetadata *type metadata accessor for IsMoveDisabledTraitKey()
{
  return &type metadata for IsMoveDisabledTraitKey;
}

uint64_t _PagingView.body(size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v86 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)&long long v90 = v5;
  *((void *)&v90 + 1) = &unk_1ED411DD8;
  uint64_t v91 = v6;
  unint64_t v83 = v7;
  uint64_t v92 = v7;
  uint64_t v93 = v8;
  uint64_t v94 = v9;
  type metadata accessor for _ScrollableLayoutView();
  swift_getWitnessTable();
  uint64_t v80 = type metadata accessor for _ScrollView();
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v78 = (uint64_t)&v67 - v10;
  uint64_t v70 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v71 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v90 = v5;
  *((void *)&v90 + 1) = v6;
  uint64_t v82 = v8;
  uint64_t v91 = v8;
  uint64_t v81 = v9;
  uint64_t v92 = v9;
  uint64_t v74 = type metadata accessor for _PagingView.ToPageOffset();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v72 = (uint64_t)&v67 - v13;
  uint64_t v84 = v6;
  uint64_t v85 = v5;
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v69 = type metadata accessor for Binding();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  *(void *)&long long v77 = (char *)&v67 - v14;
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v67 - v18;
  uint64_t v76 = v15;
  uint64_t v20 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v75 = (char *)&v67 - v22;
  uint64_t v23 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _ScrollViewConfig(v3 + *(int *)(a1 + 60), (uint64_t)&v90);
  CGSize.inset(by:)();
  double v28 = v27;
  double v30 = v29;
  uint64_t v31 = v3;
  unsigned int v32 = (char *)(v3 + *(int *)(a1 + 56));
  double v33 = *((double *)v32 + 1);
  LOBYTE(v6) = v32[16];
  uint64_t v34 = v31;
  (*(void (**)(char *))(v23 + 16))(v26);
  if (v6)
  {
    uint64_t v35 = &v26[*(int *)(a1 + 56)];
    if (*v35) {
      double v36 = v28;
    }
    else {
      double v36 = v30;
    }
    double v37 = *((double *)v35 + 3);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, a1);
    double v33 = v36 - (v37 + v37);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, a1);
  }
  uint64_t v38 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v34 + *(int *)(a1 + 52), v16);
  uint64_t v39 = v76;
  int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v76);
  uint64_t v41 = v85;
  if (v40 == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v42 = v84;
    uint64_t v43 = v82;
    uint64_t v44 = v81;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v75, v19, v39);
    uint64_t v67 = v20;
    double v45 = _PagingView.$offset.getter();
    *(void *)&long long v87 = v46;
    *((void *)&v87 + 1) = v47;
    *(double *)long long v88 = v45;
    Binding.zip<A>(with:)();
    swift_release();
    swift_release();
    uint64_t v48 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v34, v41);
    uint64_t v49 = *((void *)v32 + 1);
    char v50 = v32[16];
    char v51 = v32[40];
    LOBYTE(v87) = *v32;
    *((void *)&v87 + 1) = v49;
    v88[0] = v50;
    *(_OWORD *)&v88[8] = *(_OWORD *)(v32 + 24);
    char v89 = v51;
    uint64_t v52 = v41;
    uint64_t v53 = v72;
    uint64_t v42 = v84;
    uint64_t v43 = v82;
    uint64_t v44 = v81;
    _PagingView.ToPageOffset.init(views:config:itemSize:)(v48, (char *)&v87, v52, v72, v33);
    uint64_t v54 = v74;
    swift_getWitnessTable();
    uint64_t v71 = (char *)v38;
    uint64_t v55 = v39;
    uint64_t v56 = v69;
    uint64_t v57 = v77;
    Binding.projecting<A>(_:)();
    uint64_t v58 = v53;
    uint64_t v41 = v52;
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v58, v54);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v57, v56);
    uint64_t v59 = v55;
    uint64_t v38 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v75, v59);
    long long v77 = v87;
    uint64_t v60 = *(void *)v88;
    uint64_t v61 = *(void *)&v88[8];
    outlined consume of _ScrollViewConfig.ContentOffset(v90, *((uint64_t *)&v90 + 1), v91, v92, v93);
    long long v90 = v77;
    uint64_t v91 = v60;
    uint64_t v92 = v61;
    LOBYTE(v93) = 1;
  }
  char v62 = *v32;
  char v63 = v32[40];
  *(double *)&long long v87 = v33;
  BYTE8(v87) = v62;
  *(_OWORD *)long long v88 = *(_OWORD *)(v32 + 24);
  v88[16] = v63;
  uint64_t v64 = v78;
  _ScrollableLayout.subscript.getter(v38, (uint64_t)&unk_1ED411DD8, v41, v83, v42, v43, v44, v78);
  uint64_t v65 = v80;
  outlined assign with copy of _ScrollViewConfig((uint64_t)&v90, v64 + *(int *)(v80 + 36));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v86, v64, v65);
  return outlined destroy of _ScrollViewConfig((uint64_t)&v90);
}

double _ScrollableLayout.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v33 = a4;
  uint64_t v34 = a1;
  uint64_t v36 = a8;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[0] = v21;
  v37[1] = v20;
  v37[2] = v23;
  v37[3] = v22;
  v37[4] = v24;
  v37[5] = v25;
  uint64_t v26 = type metadata accessor for _ScrollableLayoutView();
  double v27 = MEMORY[0x1F4188790](v26);
  double v29 = (char *)&v31 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, v34, a3, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v35, a2);
  _ScrollableLayoutView.init(data:layout:)((uint64_t)v19, (uint64_t)v14, a3, a2, v32, v33, a6, a7, (uint64_t)v29);
  swift_getWitnessTable();
  default argument 1 of _ScrollView.init(contentProvider:config:)((uint64_t)v37);
  *(void *)&double result = _ScrollView.init(contentProvider:config:)((uint64_t)v29, (uint64_t)v37, v26, v36).n128_u64[0];
  return result;
}

uint64_t partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(void (*a1)(unsigned char *, uint64_t, uint64_t, uint64_t, void))
{
  return specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v1 + 16, *(void *)(v1 + 408), v1 + 416, *(void *)(v1 + 808), *(void *)(v1 + 816), *(unsigned char *)(v1 + 824), a1);
}

uint64_t specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void (*a7)(unsigned char *, uint64_t, uint64_t, uint64_t, void))
{
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(a1, (uint64_t)v17, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v17, (uint64_t)v20, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(a1, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src);
  if (result != 1)
  {
    memcpy(__dst, __src, sizeof(__dst));
    swift_beginAccess();
    uint64_t result = MEMORY[0x18C119DF0](a2 + 16);
    if (result)
    {
      uint64_t v15 = (void *)result;
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v20, (uint64_t)v16, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      outlined release of NavigationState.StackContent((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      a7(__dst, a3, a4, a5, a6 & 1);

      return _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
    }
  }
  return result;
}

uint64_t specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  LODWORD(v283) = v3;
  uint64_t v286 = v5;
  id v287 = v4;
  v290 = v6;
  uint64_t v8 = v7;
  memcpy(v310, v4, sizeof(v310));
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v278 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v278 - v13;
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v16 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70));
  swift_beginAccess();
  uint64_t v17 = v16[2];
  if (!v17)
  {
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  uint64_t v284 = v16;
  uint64_t v20 = v16;
  uint64_t v19 = *v16;
  uint64_t v18 = v20[1];
  outlined init with take of NavigationState.Base(v8, v305);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = v19;
  v21[3] = v18;
  void v21[4] = v17;
  outlined init with take of NavigationState.Base(v305, v306);
  v306[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v306[50] = v21;
  v306[51] = v17;
  memcpy(v307, v306, sizeof(v307));
  outlined copy of NavigationStrategy_Phone?(v19, v18, v17);
  outlined copy of NavigationStrategy_Phone?(v19, v18, v17);
  swift_bridgeObjectRetain();
  v289 = v8;
  outlined release of NavigationState.StackContent((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  uint64_t v285 = specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  outlined consume of RichTextAttributeResolver?(v19, v18, v17);
  uint64_t v22 = *v15 & *v2;
  uint64_t v23 = *(void *)(v22 + 0x78);
  int v24 = *((unsigned __int8 *)v2 + v23);
  v288 = v2;
  uint64_t v25 = v15;
  if (v24 != 2)
  {
    static Log.navigation.getter();
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v14, 1, v33) == 1)
    {
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Logger?);
      uint64_t v32 = v284;
    }
    else
    {
      uint64_t v70 = v25;
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      BOOL v73 = os_log_type_enabled(v71, v72);
      uint64_t v32 = v284;
      if (v73)
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl(&dword_1872C6000, v71, v72, "Updating stack views in place after end-user triggered transition or isTransitioningViewControllers", v74, 2u);
        MEMORY[0x18C119C60](v74, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v33);
      uint64_t v25 = v70;
    }
    uint64_t v41 = (char **)v288;
    specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, v307, v286);
    int v75 = *((unsigned __int8 *)v41 + v23);
    if (v75 == 2) {
      goto LABEL_144;
    }
    *((unsigned char *)v41 + v23) = 2;
    memcpy(v308, v287, 0x188uLL);
    NavigationState.StackContent.count.getter();
    uint64_t v77 = v76;
    memcpy(v308, v289, 0x188uLL);
    NavigationState.StackContent.count.getter();
    uint64_t v79 = v77 - v78;
    if (__OFSUB__(v77, v78)) {
      goto LABEL_228;
    }
    if (v79 < 1)
    {
LABEL_144:
      uint64_t v237 = v285;
      if (!v285) {
        return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
      }
      goto LABEL_145;
    }
    uint64_t v80 = (uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68);
    uint64_t v81 = v25;
    if ((v75 & 1) == 0)
    {
      outlined init with copy of NavigationAuthority(v80, (uint64_t)v308);
      uint64_t v77 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v82 = v32[2];
      if (!v82)
      {
LABEL_254:
        __break(1u);
        goto LABEL_255;
      }
      uint64_t v84 = v32;
      uint64_t v32 = (uint64_t *)*v32;
      uint64_t v83 = v84[1];
      uint64_t v85 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v303);
      uint64_t v86 = (void *)swift_allocObject();
      v86[2] = v32;
      v86[3] = v83;
      v86[4] = v82;
      outlined init with take of NavigationState.Base(v303, v299);
      v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v299[50] = v86;
      v299[51] = v82;
      memcpy(v309, v299, sizeof(v309));
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v83, v82);
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v83, v82);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?((uint64_t)v32, v83, v82);
      long long v87 = memcpy(v300, v299, sizeof(v300));
      uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      uint64_t v302 = 0;
      uint64_t v88 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v87);
      uint64_t v92 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v79, v88, v89 & 1, v90, v91);
      if ((_BYTE)v95 == 0xFF)
      {
        uint64_t v231 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        uint64_t v96 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v231);
        uint64_t v25 = v232;
        uint64_t v23 = v233;
        char v97 = v234 & 1;
        uint64_t v92 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      }
      else
      {
        uint64_t v96 = v92;
        uint64_t v25 = v94;
        uint64_t v23 = v95;
        char v97 = v93 & 1;
      }
      uint64_t v235 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v92);
      if ((v236 & 1) == 0)
      {
        if (v97) {
          goto LABEL_143;
        }
        if (v96 < v235)
        {
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
          goto LABEL_251;
        }
        if (v235 < v96) {
          goto LABEL_143;
        }
        if (!(_BYTE)v23) {
          goto LABEL_202;
        }
        if (v23 != 1) {
          goto LABEL_208;
        }
        if (v190 != 1 || (uint64_t)v25 >= v189)
        {
LABEL_143:
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
          LOBYTE(v298[0]) = v97;
          LOBYTE(v292[0]) = 1;
          memcpy((char *)v296 + 7, v299, 0x1A0uLL);
          *(void *)&v297[0] = v96;
          BYTE8(v297[0]) = v97;
          *(void *)&v297[1] = v25;
          BYTE8(v297[1]) = v23;
          *(void *)&v297[2] = 0;
          BYTE8(v297[2]) = 1;
          *(void *)&v297[3] = 0;
          BYTE8(v297[3]) = 2;
          memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
          *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
          *((void *)&v297[30] + 1) = 0;
          memcpy(v308, v297, sizeof(v308));
          specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E450, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
          swift_release();
          outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
          uint64_t v25 = v81;
          goto LABEL_144;
        }
        __break(1u);
      }
      if ((v97 & 1) == 0)
      {
LABEL_241:
        __break(1u);
        goto LABEL_242;
      }
      goto LABEL_143;
    }
    outlined init with copy of NavigationAuthority(v80, (uint64_t)v308);
    uint64_t v96 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v308);
    uint64_t v162 = v32[2];
    if (!v162)
    {
LABEL_255:
      __break(1u);
LABEL_256:
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
LABEL_257:
      __break(1u);
      goto LABEL_258;
    }
    unsigned int v164 = v32;
    uint64_t v32 = (uint64_t *)*v32;
    uint64_t v163 = v164[1];
    uint64_t v165 = (uint64_t)v287;
    outlined init with take of NavigationState.Base(v287, v303);
    unsigned int v166 = (void *)swift_allocObject();
    v166[2] = v32;
    v166[3] = v163;
    v166[4] = v162;
    outlined init with take of NavigationState.Base(v303, v299);
    v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v299[50] = v166;
    v299[51] = v162;
    memcpy(v309, v299, sizeof(v309));
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v163, v162);
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v163, v162);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?((uint64_t)v32, v163, v162);
    unsigned int v167 = memcpy(v300, v299, sizeof(v300));
    uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    uint64_t v302 = 0;
    uint64_t v168 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v167);
    uint64_t v172 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v79, v168, v169 & 1, v170, v171);
    if ((_BYTE)v175 == 0xFF)
    {
      uint64_t v239 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      uint64_t v77 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v239);
      uint64_t v25 = v240;
      uint64_t v23 = v241;
      char v97 = v242 & 1;
      uint64_t v172 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
    }
    else
    {
      uint64_t v77 = v172;
      uint64_t v25 = v174;
      uint64_t v23 = v175;
      char v97 = v173 & 1;
    }
    uint64_t v243 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v172);
    if ((v244 & 1) == 0)
    {
      if (v97) {
        goto LABEL_157;
      }
      if (v77 < v243) {
        goto LABEL_249;
      }
      if (v243 < v77) {
        goto LABEL_157;
      }
      if (!(_BYTE)v23) {
        goto LABEL_205;
      }
      if (v23 != 1) {
        goto LABEL_211;
      }
      if (v190 != 1 || (uint64_t)v25 >= v189)
      {
LABEL_157:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        LOBYTE(v298[0]) = v97;
        LOBYTE(v292[0]) = 1;
        memcpy((char *)v296 + 7, v299, 0x1A0uLL);
        *(void *)&v297[0] = v77;
        BYTE8(v297[0]) = v97;
        *(void *)&v297[1] = v25;
        BYTE8(v297[1]) = v23;
        *(void *)&v297[2] = 0;
        BYTE8(v297[2]) = 1;
        *(void *)&v297[3] = 0;
        BYTE8(v297[3]) = 2;
        memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
        *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
        *((void *)&v297[30] + 1) = 0;
        memcpy(v308, v297, sizeof(v308));
        swift_retain();
        uint64_t v245 = specialized Sequence.compactMap<A>(_:)((uint64_t)v308, v96, (uint64_t)&unk_1ED48E388, (uint64_t)&unk_1ED48E3B0, (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)partial apply, (uint64_t)closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply, (uint64_t)&unk_1ED48E3D8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
        uint64_t v246 = swift_allocObject();
        *(void *)(v246 + 16) = v245;
        swift_release();
        outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
        uint64_t v25 = v81;
        uint64_t v247 = (uint64_t *)((char *)v41 + *(void *)((*v81 & (unint64_t)*v41) + 0xA0));
        uint64_t v248 = *v247;
        uint64_t *v247 = (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred<A>(at:)partial apply;
        v247[1] = v246;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v248);
        uint64_t v237 = v285;
        if (!v285) {
          return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        }
LABEL_145:
        outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v297);
        NavigationAuthority.controllerCache.getter();
        uint64_t v238 = v297;
        goto LABEL_194;
      }
      __break(1u);
    }
    if ((v97 & 1) == 0)
    {
LABEL_242:
      __break(1u);
      goto LABEL_243;
    }
    goto LABEL_157;
  }
  char v304 = 1;
  uint64_t v26 = *(void *)(v22 + 128);
  *((unsigned char *)v2 + v26) = 1;
  if ((*((unsigned char *)v2 + *(void *)((*v15 & *v2) + 0x98)) & 1) == 0) {
    goto LABEL_12;
  }
  id v27 = [(UINavigationController *)v290 view];
  if (!v27) {
    goto LABEL_252;
  }
  uint64_t v28 = v27;
  id v29 = objc_msgSend(v27, sel_window);

  if (v29 && (id v30 = objc_msgSend(v29, sel_windowScene), v29, v30))
  {
    if (objc_msgSend(self, sel_areAnimationsEnabled))
    {
      if (objc_msgSend(v30, sel_activationState))
      {
        id v31 = objc_msgSend(v30, sel_activationState);

        LODWORD(v32) = v31 == (id)1;
      }
      else
      {

        LODWORD(v32) = 1;
      }
    }
    else
    {

      LODWORD(v32) = 0;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v32) = 0;
  }
  uint64_t v281 = v26;
  memcpy(v308, v289, 0x188uLL);
  memcpy(v303, v310, 0x188uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v303, v35, v36, v37);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v303, (uint64_t)v297, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  uint64_t v23 = NavigationState.StackContent.change(from:)((uint64_t)v297);
  LODWORD(v39) = v38;
  static Log.navigation.getter();
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = *(char ***)(v40 - 8);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v41[6])(v11, 1, v40) != 1)
  {
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      LODWORD(v280) = v39;
      uint64_t v39 = (uint8_t *)v100;
      uint64_t v101 = swift_slowAlloc();
      uint64_t v279 = v101;
      int v282 = (int)v32;
      *(_DWORD *)uint64_t v39 = 136315138;
      *(void *)&v297[0] = v101;
      v278[1] = v39 + 4;
      *(void *)&v308[0] = v23;
      BYTE8(v308[0]) = v280 & 1;
      uint64_t v102 = String.init<A>(describing:)();
      *(void *)&v308[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)v297);
      LODWORD(v32) = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v98, v99, "Updating stack content for change: %s", v39, 0xCu);
      uint64_t v104 = v279;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v104, -1, -1);
      unint64_t v105 = v39;
      LOBYTE(v39) = (_BYTE)v280;
      MEMORY[0x18C119C60](v105, -1, -1);
    }

    unsigned int v106 = v41[1];
    ++v41;
    ((void (*)(char *, uint64_t))v106)(v11, v40);
    if ((v39 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_44:
    switch(v23)
    {
      case 1:
        uint64_t v41 = (char **)v288;
        specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, v307, v286);
        goto LABEL_190;
      case 2:
        goto LABEL_59;
      case 3:
        uint64_t v41 = (char **)v288;
        uint64_t v176 = (uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68);
        outlined init with copy of NavigationAuthority(v176, (uint64_t)v308);
        NavigationAuthority.controllerCache.getter();
        outlined destroy of NavigationAuthority((uint64_t)v308);
        unsigned int v177 = *((unsigned __int8 *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x60) + 8);
        if (v177 >= 3) {
          LOBYTE(v177) = 3;
        }
        LOBYTE(v308[0]) = v177;
        NavigationHostingControllerCache_UIKit.ejectAll(in:)((SwiftUI::NavigationSplitViewColumn_optional)v308);
        swift_release();
        unint64_t v178 = (unint64_t)v290;

        *(void *)&v297[0] = 0;
        BYTE8(v297[0]) = 1;
        outlined init with copy of NavigationAuthority(v176, (uint64_t)v308);
        NavigationAuthority.controllerCache.getter();
        uint64_t v179 = outlined destroy of NavigationAuthority((uint64_t)v308);
        MEMORY[0x1F4188790](v179);
        uint64_t v180 = v286;
        v278[-6] = v307;
        v278[-5] = v180;
        uint64_t v277 = v297;
        MEMORY[0x1F4188790](v181);
        v278[-6] = v41;
        LOBYTE(v278[-5]) = v283 & 1;
        uint64_t v275 = v182;
        unint64_t v276 = v178;
        LOBYTE(v277) = 0;
        specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v178, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v183, (void (*)(unint64_t))partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)&v278[-8]);
        swift_release();
        goto LABEL_190;
      default:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized Collection.dropLast(_:)(1, v308);
        uint64_t v41 = (char **)v288;
        specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, (uint64_t *)v308, v286, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
        outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)v308);
        uint64_t v107 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v107);
        if ((v109 & 1) != 0 && v108 > 1u) {
          goto LABEL_256;
        }
        int v282 = (int)v32;
        unint64_t v110 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
        char v112 = v111;
        uint64_t v114 = v113;
        unsigned int v116 = v115;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v110, v112 & 1, v114, v116);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        if (!*(void *)&v300[0]) {
          goto LABEL_257;
        }
        v297[2] = v300[2];
        v297[3] = v300[3];
        LOBYTE(v297[4]) = v300[4];
        v297[1] = v300[1];
        v297[0] = v300[0];
        outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v300);
        uint64_t v283 = NavigationAuthority.controllerCache.getter();
        uint64_t v117 = outlined destroy of NavigationAuthority((uint64_t)v300);
        uint64_t v284 = v278;
        MEMORY[0x1F4188790](v117);
        uint64_t v118 = v286;
        unint64_t v119 = (void *)v289;
        uint64_t v120 = v290;
        outlined release of NavigationState.StackContent((uint64_t)v289, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v280 = v120;
        uint64_t v121 = v25;
        uint64_t v122 = v41;
        uint64_t v123 = (char **)v287;
        outlined release of NavigationState.StackContent((uint64_t)v287, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        swift_retain();
        uint64_t v124 = v122;
        uint64_t v25 = v121;
        specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v120, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t)&v278[-6], v283, (unint64_t)v280, v124, v282, v119, v123, v118, (uint64_t)&v304);
        swift_release();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v297);
        break;
    }
    goto LABEL_190;
  }
  outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Logger?);
  if (v39) {
    goto LABEL_44;
  }
LABEL_15:
  uint64_t v41 = &selRef_showsMenuAsPrimaryAction;
  if (v23 == 1)
  {
    uint64_t v42 = [(UINavigationController *)v290 viewControllers];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 >= 2)
    {
      int v282 = (int)v32;
      outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v45 = v284[2];
      if (!v45)
      {
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        swift_unknownObjectRelease();
        __break(1u);
        goto LABEL_261;
      }
      uint64_t v46 = *v284;
      uint64_t v47 = v284[1];
      uint64_t v48 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v296);
      uint64_t v49 = (void *)swift_allocObject();
      v49[2] = v46;
      v49[3] = v47;
      v49[4] = v45;
      outlined init with take of NavigationState.Base(v296, v300);
      *((void *)&v300[24] + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      *(void *)&v300[25] = v49;
      *((void *)&v300[25] + 1) = v45;
      memcpy(v297, v300, 0x1A0uLL);
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v46, v47, v45);
      char v50 = memcpy(v308, v300, 0x1A0uLL);
      *(void *)&v308[26] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      *((void *)&v308[26] + 1) = 0;
      specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v50);
      if ((v53 & 1) != 0 && v52 == 2 && !v51)
      {
LABEL_261:
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v308);
        __break(1u);
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      unint64_t v54 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
      char v56 = v55;
      uint64_t v58 = v57;
      unsigned int v60 = v59;
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v300);
      specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v54, v56 & 1, v58, v60);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v300);
      char v61 = v309[1];
      uint64_t v62 = v309[2];
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v309);
      outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v308);
      LOBYTE(v309[0]) = v61;
      v309[1] = v62;
      char v63 = v309;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v63);
      swift_release();
      uint64_t v64 = [(UINavigationController *)v290 viewControllers];
      unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = v65 >> 62;
      if (!(v65 >> 62))
      {
        uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_25;
      }
LABEL_235:
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_25:
      uint64_t v41 = (char **)v288;
      char v67 = v282;
      if (__OFSUB__(0, v66))
      {
        __break(1u);
      }
      else
      {
        if (v66)
        {
          BOOL v68 = __OFSUB__(v66--, 1);
          if (v68)
          {
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
            goto LABEL_248;
          }
          if (v66 < 0) {
            goto LABEL_244;
          }
        }
        if (!v23)
        {
          uint64_t v69 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_105;
        }
        swift_bridgeObjectRetain();
        uint64_t v212 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v212 & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_105:
          if (v69 >= v66)
          {
            if ((v65 & 0xC000000000000001) != 0 && v66)
            {
              Swift::Int v213 = 0;
              do
              {
                Swift::Int v214 = v213 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v213);
                Swift::Int v213 = v214;
              }
              while (v66 != v214);
            }
            if (v23)
            {
              swift_bridgeObjectRetain();
              _CocoaArrayWrapper.subscript.getter();
              uint64_t v215 = v216;
              uint64_t v23 = v217;
              unint64_t v219 = v218;
              swift_bridgeObjectRelease_n();
              uint64_t v66 = v219 >> 1;
            }
            else
            {
              uint64_t v215 = (v65 & 0xFFFFFFFFFFFFFF8) + 32;
            }
            uint64_t v220 = v289;
            if (v23 == v66)
            {
              swift_unknownObjectRelease();
              uint64_t v221 = 0;
              goto LABEL_117;
            }
            if (v66 - 1 >= v23)
            {
              uint64_t v221 = (char *)*(id *)(v215 + 8 * (v66 - 1));
              swift_unknownObjectRelease();
LABEL_117:
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              *(char **)((char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v41) + 0x88)) = v221;
              if (v67)
              {
                memcpy(v309, v220, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v299);
                int v222 = v299[0];
                memcpy(v309, v287, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v298);
                BOOL v225 = v222 != -1 && LODWORD(v298[0]) != -1 && v222 == LODWORD(v298[0]);
              }
              else
              {
                BOOL v225 = 0;
              }
              uint64_t v226 = v290;

              specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v226, v307, v286);
              id v227 = [(UINavigationController *)v226 transitionCoordinator];
              if (v227)
              {
                uint64_t v228 = v227;
                if (v225)
                {
                  char v304 = 1;
                  uint64_t v229 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  v309[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                  v309[5] = v229;
                  v309[0] = MEMORY[0x1E4F143A8];
                  v309[1] = 1107296256;
                  v309[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                  v309[3] = &block_descriptor_190;
                  uint64_t v230 = _Block_copy(v309);
                  swift_release();
                  objc_msgSend(v228, sel_animateAlongsideTransition_completion_, 0, v230);
                  _Block_release(v230);
                }
                swift_unknownObjectRelease();
              }
              goto LABEL_189;
            }
            goto LABEL_246;
          }
          goto LABEL_238;
        }
      }
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
  }
  uint64_t v125 = [(UINavigationController *)v290 viewControllers];
  uint64_t v77 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v126 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v126 >> 62) {
    goto LABEL_230;
  }
  uint64_t v127 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v127 < 2) {
      goto LABEL_59;
    }
    id v128 = [v290 v41[47]];
    unint64_t v129 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v129 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v130 = *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v23 >= v130)
    {
LABEL_59:
      memcpy(v308, v287, 0x188uLL);
      NavigationState.StackContent.count.getter();
      uint64_t v146 = v145;
      memcpy(v308, v289, 0x188uLL);
      NavigationState.StackContent.count.getter();
      BOOL v68 = __OFSUB__(v146, v147);
      uint64_t v77 = v146 - v147;
      if (v68) {
        goto LABEL_229;
      }
      uint64_t v41 = (char **)v288;
      if (v77 < 1) {
        goto LABEL_85;
      }
      int v282 = (int)v32;
      outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
      uint64_t v96 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v148 = v284[2];
      if (!v148) {
        goto LABEL_253;
      }
      uint64_t v149 = *v284;
      uint64_t v150 = v284[1];
      uint64_t v151 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v298);
      uint64_t v152 = (void *)swift_allocObject();
      _OWORD v152[2] = v149;
      v152[3] = v150;
      v152[4] = v148;
      outlined init with take of NavigationState.Base(v298, v299);
      v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v299[50] = v152;
      v299[51] = v148;
      memcpy(v309, v299, sizeof(v309));
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v149, v150, v148);
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v149, v150, v148);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v149, v150, v148);
      unint64_t v153 = memcpy(v300, v299, sizeof(v300));
      uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      uint64_t v302 = 0;
      uint64_t v154 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v153);
      uint64_t v158 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v154, v155 & 1, v156, v157);
      if ((_BYTE)v161 == 0xFF)
      {
        uint64_t v184 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        uint64_t v25 = (void *)specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v184);
        uint64_t v32 = v185;
        uint64_t v81 = v186;
        char v97 = v187 & 1;
        uint64_t v158 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      }
      else
      {
        uint64_t v25 = (void *)v158;
        uint64_t v32 = v160;
        uint64_t v81 = v161;
        char v97 = v159 & 1;
      }
      unint64_t v65 = (unint64_t)v309;
      uint64_t v188 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v158);
      if (v191) {
        goto LABEL_82;
      }
      if (v97) {
        goto LABEL_83;
      }
      if ((uint64_t)v25 < v188) {
        goto LABEL_245;
      }
      if (v188 < (uint64_t)v25) {
        goto LABEL_83;
      }
      if ((_BYTE)v81)
      {
        if (v81 == 1)
        {
          if (v190 != 1 || (uint64_t)v32 >= v189) {
            goto LABEL_83;
          }
          __break(1u);
LABEL_82:
          if ((v97 & 1) == 0)
          {
            __break(1u);
          }
          else
          {
LABEL_83:
            outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
            outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
            LOBYTE(v292[0]) = v97;
            LOBYTE(v293) = 1;
            memcpy((char *)v296 + 7, v299, 0x1A0uLL);
            *(void *)&v297[0] = v25;
            BYTE8(v297[0]) = v97;
            *(void *)&v297[1] = v32;
            BYTE8(v297[1]) = (_BYTE)v81;
            *(void *)&v297[2] = 0;
            BYTE8(v297[2]) = 1;
            *(void *)&v297[3] = 0;
            BYTE8(v297[3]) = 2;
            memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
            *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
            *((void *)&v297[30] + 1) = 0;
            memcpy(v308, v297, sizeof(v308));
            specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E450, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
            swift_release();
            outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
            unint64_t v192 = [(UINavigationController *)v290 viewControllers];
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            unint64_t v193 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v65 = specialized BidirectionalCollection.dropLast(_:)(v77, v193);
            uint64_t v195 = v194;
            int64_t v197 = v196;
            uint64_t v23 = v198;
            swift_bridgeObjectRelease();
            int64_t v199 = (unint64_t)v23 >> 1;
            if (v197 == (unint64_t)v23 >> 1)
            {
              swift_unknownObjectRelease();
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              LODWORD(v32) = v282;
LABEL_85:
              if (v32) {
                goto LABEL_86;
              }
              goto LABEL_97;
            }
            int v204 = v282;
            if (v199 > v197)
            {
              uint64_t v205 = (char *)*(id *)(v195 + 8 * v199 - 8);
              swift_unknownObjectRelease();
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              *(char **)((char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v41) + 0x88)) = v205;

              if (v204)
              {
LABEL_86:
                memcpy(v297, v289, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v300);
                int v200 = v300[0];
                memcpy(v297, v287, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v296);
                char v203 = v200 != -1 && LODWORD(v296[0]) != -1 && v200 == LODWORD(v296[0]);
                goto LABEL_98;
              }
LABEL_97:
              char v203 = 0;
LABEL_98:
              uint64_t v206 = v290;
              specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(v290, (uint64_t)v307, v203, v286, v283 & 1);
              id v207 = [(UINavigationController *)v206 transitionCoordinator];
              if (!v207) {
                goto LABEL_190;
              }
              unint64_t v208 = v207;
              char v209 = v203 ^ 1;
              if (v77 < 1) {
                char v209 = 1;
              }
              if ((v209 & 1) == 0)
              {
                char v304 = 1;
                uint64_t v210 = swift_allocObject();
                swift_unknownObjectWeakInit();
                *(void *)&v297[2] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                *((void *)&v297[2] + 1) = v210;
                *(void *)&v297[0] = MEMORY[0x1E4F143A8];
                *((void *)&v297[0] + 1) = 1107296256;
                *(void *)&v297[1] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                *((void *)&v297[1] + 1) = &block_descriptor_168;
                uint64_t v211 = _Block_copy(v297);
                swift_release();
                objc_msgSend(v208, sel_animateAlongsideTransition_completion_, 0, v211);
                _Block_release(v211);
              }
              goto LABEL_188;
            }
          }
          __break(1u);
          goto LABEL_235;
        }
      }
      else
      {
        if (!v190)
        {
LABEL_214:
          if ((uint64_t)v32 >= v189) {
            goto LABEL_83;
          }
          __break(1u);
          goto LABEL_216;
        }
        if (v190 == 2) {
          goto LABEL_83;
        }
        __break(1u);
      }
      if (v190 == 2 && !v189) {
        goto LABEL_83;
      }
      __break(1u);
LABEL_202:
      if (!v190) {
        goto LABEL_222;
      }
      if (v190 == 2) {
        goto LABEL_143;
      }
      __break(1u);
LABEL_205:
      if (!v190) {
        goto LABEL_224;
      }
      if (v190 == 2) {
        goto LABEL_157;
      }
      __break(1u);
LABEL_208:
      if (v190 == 2 && !v189) {
        goto LABEL_143;
      }
      __break(1u);
LABEL_211:
      if (v190 == 2 && !v189) {
        goto LABEL_157;
      }
      __break(1u);
      goto LABEL_214;
    }
    uint64_t v96 = v23;
    int v282 = (int)v32;
    outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
    uint64_t v23 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v308);
    uint64_t v131 = v284[2];
    if (!v131) {
      goto LABEL_259;
    }
    uint64_t v132 = *v284;
    uint64_t v133 = v284[1];
    uint64_t v134 = (uint64_t)v287;
    outlined init with take of NavigationState.Base(v287, v298);
    unsigned int v135 = (void *)swift_allocObject();
    v135[2] = v132;
    v135[3] = v133;
    v135[4] = v131;
    outlined init with take of NavigationState.Base(v298, v299);
    v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v299[50] = v135;
    v299[51] = v131;
    memcpy(v309, v299, sizeof(v309));
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v132, v133, v131);
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v132, v133, v131);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v132, v133, v131);
    unsigned int v136 = memcpy(v300, v299, sizeof(v300));
    uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    uint64_t v302 = 0;
    if (v96 < 0) {
      goto LABEL_239;
    }
    uint64_t v137 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v136);
    uint64_t v141 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v96, v137, v138 & 1, v139, v140);
    if ((_BYTE)v144 == 0xFF)
    {
      uint64_t v249 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      uint64_t v25 = (void *)specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v249);
      uint64_t v32 = v250;
      uint64_t v81 = v251;
      char v97 = v252 & 1;
      uint64_t v141 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
    }
    else
    {
      uint64_t v25 = (void *)v141;
      uint64_t v32 = v143;
      uint64_t v81 = v144;
      char v97 = v142 & 1;
    }
    uint64_t v253 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v141);
    if (v254) {
      goto LABEL_170;
    }
    if (v97) {
      goto LABEL_171;
    }
    if ((uint64_t)v25 < v253) {
      goto LABEL_250;
    }
    if (v253 < (uint64_t)v25) {
      goto LABEL_171;
    }
    if ((_BYTE)v81) {
      break;
    }
LABEL_216:
    if (v190)
    {
      if (v190 == 2) {
        goto LABEL_171;
      }
      __break(1u);
      goto LABEL_219;
    }
LABEL_226:
    if ((uint64_t)v32 >= v189) {
      goto LABEL_171;
    }
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    swift_bridgeObjectRetain();
    uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v81 != 1)
  {
LABEL_219:
    if (v190 == 2 && !v189) {
      goto LABEL_171;
    }
    __break(1u);
LABEL_222:
    if ((uint64_t)v25 >= v189) {
      goto LABEL_143;
    }
    __break(1u);
LABEL_224:
    if ((uint64_t)v25 >= v189) {
      goto LABEL_157;
    }
    __break(1u);
    goto LABEL_226;
  }
  if (v190 == 1 && (uint64_t)v32 < v189)
  {
    __break(1u);
LABEL_170:
    if ((v97 & 1) == 0) {
      goto LABEL_247;
    }
  }
LABEL_171:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
  outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
  char v295 = v97;
  char v294 = 1;
  memcpy((char *)v296 + 7, v299, 0x1A0uLL);
  *(void *)&v297[0] = v25;
  BYTE8(v297[0]) = v97;
  *(void *)&v297[1] = v32;
  BYTE8(v297[1]) = (_BYTE)v81;
  *(void *)&v297[2] = 0;
  BYTE8(v297[2]) = 1;
  *(void *)&v297[3] = 0;
  BYTE8(v297[3]) = 2;
  memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
  *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
  *((void *)&v297[30] + 1) = 0;
  memcpy(v308, v297, sizeof(v308));
  specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E450, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
  swift_release();
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
  id v255 = [v290 v41[47]];
  unint64_t v256 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized BidirectionalCollection.dropLast(_:)(v96, v256);
  uint64_t v258 = v257;
  uint64_t v260 = v259;
  unint64_t v262 = v261;
  swift_bridgeObjectRelease();
  int64_t v263 = v262 >> 1;
  if (v260 == v262 >> 1) {
    goto LABEL_260;
  }
  uint64_t v41 = (char **)v288;
  uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
  int v264 = v282;
  if (v263 <= v260) {
    goto LABEL_240;
  }
  uint64_t v221 = (char *)*(id *)(v258 + 8 * v263 - 8);
  swift_unknownObjectRelease();
  *(char **)((char *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x88)) = v221;
  if (v264)
  {
    memcpy(v292, v289, sizeof(v292));
    NavigationState.StackContent.animationSeed.getter(&v293);
    int v265 = v293;
    memcpy(v292, v287, sizeof(v292));
    NavigationState.StackContent.animationSeed.getter(&v291);
    BOOL v268 = v265 != -1 && v291 != -1 && v265 == v291;
  }
  else
  {
    BOOL v268 = 0;
  }
  uint64_t v269 = v290;

  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v269, v307, v286);
  id v270 = [(UINavigationController *)v269 transitionCoordinator];
  if (v270)
  {
    uint64_t v271 = v270;
    if (v268)
    {
      char v304 = 1;
      uint64_t v272 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v292[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
      v292[5] = v272;
      v292[0] = MEMORY[0x1E4F143A8];
      v292[1] = 1107296256;
      v292[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v292[3] = &block_descriptor_181;
      uint64_t v273 = _Block_copy(v292);
      swift_release();
      objc_msgSend(v271, sel_animateAlongsideTransition_completion_, 0, v273);
      _Block_release(v273);
    }

LABEL_188:
    swift_unknownObjectRelease();
    goto LABEL_190;
  }
LABEL_189:

LABEL_190:
  if (v304 == 1)
  {
    *((unsigned char *)v41 + v281) = 0;
    *(char **)((char *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x88)) = 0;
  }
  uint64_t v237 = v285;
  if (v285)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v300);
    NavigationAuthority.controllerCache.getter();
    uint64_t v238 = v300;
LABEL_194:
    outlined destroy of NavigationAuthority((uint64_t)v238);
    specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v237);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
}

{
  void *v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  UINavigationController *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint8_t *v39;
  uint64_t v40;
  char **v41;
  NSArray *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  void *v63;
  NSArray *v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  uint64_t v69;
  void *v70;
  NSObject *v71;
  os_log_type_t v72;
  BOOL v73;
  uint8_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  char *v106;
  uint64_t v107;
  unsigned __int8 v108;
  char v109;
  unint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  UINavigationController *v120;
  void *v121;
  char **v122;
  char **v123;
  char **v124;
  NSArray *v125;
  unint64_t v126;
  uint64_t v127;
  id v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  void *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  NSArray *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int64_t v196;
  int64_t v197;
  uint64_t v198;
  int64_t v199;
  int v200;
  char v203;
  int v204;
  char *v205;
  UINavigationController *v206;
  id v207;
  void *v208;
  char v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  Swift::Int v213;
  Swift::Int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  const void *v220;
  char *v221;
  int v222;
  BOOL v225;
  UINavigationController *v226;
  id v227;
  void *v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  _OWORD *v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  char v244;
  void *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  void *v251;
  char v252;
  uint64_t v253;
  char v254;
  id v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  int64_t v263;
  int v264;
  int v265;
  BOOL v268;
  UINavigationController *v269;
  id v270;
  void *v271;
  uint64_t v272;
  void *v273;
  uint64_t result;
  uint64_t v275;
  unint64_t v276;
  _OWORD *v277;
  void v278[2];
  uint64_t v279;
  UINavigationController *v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  void *v288;
  const void *v289;
  UINavigationController *v290;
  uint64_t v291;
  void v292[49];
  uint64_t v293;
  char v294;
  char v295;
  void v296[53];
  _OWORD v297[32];
  void v298[49];
  void v299[52];
  _OWORD v300[26];
  uint64_t (*v301)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v302;
  unsigned char v303[399];
  char v304;
  unsigned char v305[392];
  void v306[55];
  unsigned char v307[416];
  _OWORD v308[31];
  void v309[52];
  unsigned char v310[392];

  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  LODWORD(v283) = v3;
  uint64_t v286 = v5;
  id v287 = v4;
  v290 = v6;
  uint64_t v8 = v7;
  memcpy(v310, v4, sizeof(v310));
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v278 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v278 - v13;
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v16 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70));
  swift_beginAccess();
  uint64_t v17 = v16[2];
  if (!v17)
  {
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  uint64_t v284 = v16;
  uint64_t v20 = v16;
  uint64_t v19 = *v16;
  uint64_t v18 = v20[1];
  outlined init with take of NavigationState.Base(v8, v305);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = v19;
  v21[3] = v18;
  void v21[4] = v17;
  outlined init with take of NavigationState.Base(v305, v306);
  v306[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v306[50] = v21;
  v306[51] = v17;
  memcpy(v307, v306, sizeof(v307));
  outlined copy of NavigationStrategy_Phone?(v19, v18, v17);
  outlined copy of NavigationStrategy_Phone?(v19, v18, v17);
  swift_bridgeObjectRetain();
  v289 = v8;
  outlined release of NavigationState.StackContent((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  uint64_t v285 = specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  outlined consume of RichTextAttributeResolver?(v19, v18, v17);
  uint64_t v22 = *v15 & *v2;
  uint64_t v23 = *(void *)(v22 + 0x78);
  int v24 = *((unsigned __int8 *)v2 + v23);
  v288 = v2;
  uint64_t v25 = v15;
  if (v24 != 2)
  {
    static Log.navigation.getter();
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v14, 1, v33) == 1)
    {
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Logger?);
      uint64_t v32 = v284;
    }
    else
    {
      uint64_t v70 = v25;
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      BOOL v73 = os_log_type_enabled(v71, v72);
      uint64_t v32 = v284;
      if (v73)
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl(&dword_1872C6000, v71, v72, "Updating stack views in place after end-user triggered transition or isTransitioningViewControllers", v74, 2u);
        MEMORY[0x18C119C60](v74, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v33);
      uint64_t v25 = v70;
    }
    uint64_t v41 = (char **)v288;
    specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, v307, v286);
    int v75 = *((unsigned __int8 *)v41 + v23);
    if (v75 == 2) {
      goto LABEL_144;
    }
    *((unsigned char *)v41 + v23) = 2;
    memcpy(v308, v287, 0x188uLL);
    NavigationState.StackContent.count.getter();
    uint64_t v77 = v76;
    memcpy(v308, v289, 0x188uLL);
    NavigationState.StackContent.count.getter();
    uint64_t v79 = v77 - v78;
    if (__OFSUB__(v77, v78)) {
      goto LABEL_228;
    }
    if (v79 < 1)
    {
LABEL_144:
      uint64_t v237 = v285;
      if (!v285) {
        return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
      }
      goto LABEL_145;
    }
    uint64_t v80 = (uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68);
    uint64_t v81 = v25;
    if ((v75 & 1) == 0)
    {
      outlined init with copy of NavigationAuthority(v80, (uint64_t)v308);
      uint64_t v77 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v82 = v32[2];
      if (!v82)
      {
LABEL_254:
        __break(1u);
        goto LABEL_255;
      }
      uint64_t v84 = v32;
      uint64_t v32 = (uint64_t *)*v32;
      uint64_t v83 = v84[1];
      uint64_t v85 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v303);
      uint64_t v86 = (void *)swift_allocObject();
      v86[2] = v32;
      v86[3] = v83;
      v86[4] = v82;
      outlined init with take of NavigationState.Base(v303, v299);
      v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v299[50] = v86;
      v299[51] = v82;
      memcpy(v309, v299, sizeof(v309));
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v83, v82);
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v83, v82);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?((uint64_t)v32, v83, v82);
      long long v87 = memcpy(v300, v299, sizeof(v300));
      uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      uint64_t v302 = 0;
      uint64_t v88 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v87);
      uint64_t v92 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v79, v88, v89 & 1, v90, v91);
      if ((_BYTE)v95 == 0xFF)
      {
        uint64_t v231 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        uint64_t v96 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v231);
        uint64_t v25 = v232;
        uint64_t v23 = v233;
        char v97 = v234 & 1;
        uint64_t v92 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      }
      else
      {
        uint64_t v96 = v92;
        uint64_t v25 = v94;
        uint64_t v23 = v95;
        char v97 = v93 & 1;
      }
      uint64_t v235 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v92);
      if ((v236 & 1) == 0)
      {
        if (v97) {
          goto LABEL_143;
        }
        if (v96 < v235)
        {
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
          goto LABEL_251;
        }
        if (v235 < v96) {
          goto LABEL_143;
        }
        if (!(_BYTE)v23) {
          goto LABEL_202;
        }
        if (v23 != 1) {
          goto LABEL_208;
        }
        if (v190 != 1 || (uint64_t)v25 >= v189)
        {
LABEL_143:
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
          LOBYTE(v298[0]) = v97;
          LOBYTE(v292[0]) = 1;
          memcpy((char *)v296 + 7, v299, 0x1A0uLL);
          *(void *)&v297[0] = v96;
          BYTE8(v297[0]) = v97;
          *(void *)&v297[1] = v25;
          BYTE8(v297[1]) = v23;
          *(void *)&v297[2] = 0;
          BYTE8(v297[2]) = 1;
          *(void *)&v297[3] = 0;
          BYTE8(v297[3]) = 2;
          memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
          *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
          *((void *)&v297[30] + 1) = 0;
          memcpy(v308, v297, sizeof(v308));
          specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E090, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
          swift_release();
          outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
          uint64_t v25 = v81;
          goto LABEL_144;
        }
        __break(1u);
      }
      if ((v97 & 1) == 0)
      {
LABEL_241:
        __break(1u);
        goto LABEL_242;
      }
      goto LABEL_143;
    }
    outlined init with copy of NavigationAuthority(v80, (uint64_t)v308);
    uint64_t v96 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v308);
    uint64_t v162 = v32[2];
    if (!v162)
    {
LABEL_255:
      __break(1u);
LABEL_256:
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
LABEL_257:
      __break(1u);
      goto LABEL_258;
    }
    unsigned int v164 = v32;
    uint64_t v32 = (uint64_t *)*v32;
    uint64_t v163 = v164[1];
    uint64_t v165 = (uint64_t)v287;
    outlined init with take of NavigationState.Base(v287, v303);
    unsigned int v166 = (void *)swift_allocObject();
    v166[2] = v32;
    v166[3] = v163;
    v166[4] = v162;
    outlined init with take of NavigationState.Base(v303, v299);
    v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v299[50] = v166;
    v299[51] = v162;
    memcpy(v309, v299, sizeof(v309));
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v163, v162);
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v163, v162);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?((uint64_t)v32, v163, v162);
    unsigned int v167 = memcpy(v300, v299, sizeof(v300));
    uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    uint64_t v302 = 0;
    uint64_t v168 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v167);
    uint64_t v172 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v79, v168, v169 & 1, v170, v171);
    if ((_BYTE)v175 == 0xFF)
    {
      uint64_t v239 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      uint64_t v77 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v239);
      uint64_t v25 = v240;
      uint64_t v23 = v241;
      char v97 = v242 & 1;
      uint64_t v172 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
    }
    else
    {
      uint64_t v77 = v172;
      uint64_t v25 = v174;
      uint64_t v23 = v175;
      char v97 = v173 & 1;
    }
    uint64_t v243 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v172);
    if ((v244 & 1) == 0)
    {
      if (v97) {
        goto LABEL_157;
      }
      if (v77 < v243) {
        goto LABEL_249;
      }
      if (v243 < v77) {
        goto LABEL_157;
      }
      if (!(_BYTE)v23) {
        goto LABEL_205;
      }
      if (v23 != 1) {
        goto LABEL_211;
      }
      if (v190 != 1 || (uint64_t)v25 >= v189)
      {
LABEL_157:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        LOBYTE(v298[0]) = v97;
        LOBYTE(v292[0]) = 1;
        memcpy((char *)v296 + 7, v299, 0x1A0uLL);
        *(void *)&v297[0] = v77;
        BYTE8(v297[0]) = v97;
        *(void *)&v297[1] = v25;
        BYTE8(v297[1]) = v23;
        *(void *)&v297[2] = 0;
        BYTE8(v297[2]) = 1;
        *(void *)&v297[3] = 0;
        BYTE8(v297[3]) = 2;
        memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
        *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
        *((void *)&v297[30] + 1) = 0;
        memcpy(v308, v297, sizeof(v308));
        swift_retain();
        uint64_t v245 = specialized Sequence.compactMap<A>(_:)((uint64_t)v308, v96, (uint64_t)&unk_1ED48DFA0, (uint64_t)&unk_1ED48DFC8, (uint64_t)partial apply for closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:), (uint64_t)partial apply for thunk for @callee_guaranteed () -> (), (uint64_t)&unk_1ED48DFF0, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
        uint64_t v246 = swift_allocObject();
        *(void *)(v246 + 16) = v245;
        swift_release();
        outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
        uint64_t v25 = v81;
        uint64_t v247 = (uint64_t *)((char *)v41 + *(void *)((*v81 & (unint64_t)*v41) + 0xA0));
        uint64_t v248 = *v247;
        uint64_t *v247 = (uint64_t)partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:sessionWillBegin:);
        v247[1] = v246;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v248);
        uint64_t v237 = v285;
        if (!v285) {
          return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        }
LABEL_145:
        outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v297);
        NavigationAuthority.controllerCache.getter();
        uint64_t v238 = v297;
        goto LABEL_194;
      }
      __break(1u);
    }
    if ((v97 & 1) == 0)
    {
LABEL_242:
      __break(1u);
      goto LABEL_243;
    }
    goto LABEL_157;
  }
  char v304 = 1;
  uint64_t v26 = *(void *)(v22 + 128);
  *((unsigned char *)v2 + v26) = 1;
  if ((*((unsigned char *)v2 + *(void *)((*v15 & *v2) + 0x98)) & 1) == 0) {
    goto LABEL_12;
  }
  id v27 = [(UINavigationController *)v290 view];
  if (!v27) {
    goto LABEL_252;
  }
  uint64_t v28 = v27;
  id v29 = objc_msgSend(v27, sel_window);

  if (v29 && (id v30 = objc_msgSend(v29, sel_windowScene), v29, v30))
  {
    if (objc_msgSend(self, sel_areAnimationsEnabled))
    {
      if (objc_msgSend(v30, sel_activationState))
      {
        id v31 = objc_msgSend(v30, sel_activationState);

        LODWORD(v32) = v31 == (id)1;
      }
      else
      {

        LODWORD(v32) = 1;
      }
    }
    else
    {

      LODWORD(v32) = 0;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v32) = 0;
  }
  uint64_t v281 = v26;
  memcpy(v308, v289, 0x188uLL);
  memcpy(v303, v310, 0x188uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v303, v35, v36, v37);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v303, (uint64_t)v297, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  uint64_t v23 = NavigationState.StackContent.change(from:)((uint64_t)v297);
  LODWORD(v39) = v38;
  static Log.navigation.getter();
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = *(char ***)(v40 - 8);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v41[6])(v11, 1, v40) != 1)
  {
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      LODWORD(v280) = v39;
      uint64_t v39 = (uint8_t *)v100;
      uint64_t v101 = swift_slowAlloc();
      uint64_t v279 = v101;
      int v282 = (int)v32;
      *(_DWORD *)uint64_t v39 = 136315138;
      *(void *)&v297[0] = v101;
      v278[1] = v39 + 4;
      *(void *)&v308[0] = v23;
      BYTE8(v308[0]) = v280 & 1;
      uint64_t v102 = String.init<A>(describing:)();
      *(void *)&v308[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)v297);
      LODWORD(v32) = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v98, v99, "Updating stack content for change: %s", v39, 0xCu);
      uint64_t v104 = v279;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v104, -1, -1);
      unint64_t v105 = v39;
      LOBYTE(v39) = (_BYTE)v280;
      MEMORY[0x18C119C60](v105, -1, -1);
    }

    unsigned int v106 = v41[1];
    ++v41;
    ((void (*)(char *, uint64_t))v106)(v11, v40);
    if ((v39 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_44:
    switch(v23)
    {
      case 1:
        uint64_t v41 = (char **)v288;
        specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, v307, v286);
        goto LABEL_190;
      case 2:
        goto LABEL_59;
      case 3:
        uint64_t v41 = (char **)v288;
        uint64_t v176 = (uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68);
        outlined init with copy of NavigationAuthority(v176, (uint64_t)v308);
        NavigationAuthority.controllerCache.getter();
        outlined destroy of NavigationAuthority((uint64_t)v308);
        unsigned int v177 = *((unsigned __int8 *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x60) + 8);
        if (v177 >= 3) {
          LOBYTE(v177) = 3;
        }
        LOBYTE(v308[0]) = v177;
        NavigationHostingControllerCache_UIKit.ejectAll(in:)((SwiftUI::NavigationSplitViewColumn_optional)v308);
        swift_release();
        unint64_t v178 = (unint64_t)v290;

        *(void *)&v297[0] = 0;
        BYTE8(v297[0]) = 1;
        outlined init with copy of NavigationAuthority(v176, (uint64_t)v308);
        NavigationAuthority.controllerCache.getter();
        uint64_t v179 = outlined destroy of NavigationAuthority((uint64_t)v308);
        MEMORY[0x1F4188790](v179);
        uint64_t v180 = v286;
        v278[-6] = v307;
        v278[-5] = v180;
        uint64_t v277 = v297;
        MEMORY[0x1F4188790](v181);
        v278[-6] = v41;
        LOBYTE(v278[-5]) = v283 & 1;
        uint64_t v275 = v182;
        unint64_t v276 = v178;
        LOBYTE(v277) = 0;
        specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v178, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v183, (void (*)(unint64_t))partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)&v278[-8]);
        swift_release();
        goto LABEL_190;
      default:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized Collection.dropLast(_:)(1, v308);
        uint64_t v41 = (char **)v288;
        specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, (uint64_t *)v308, v286, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
        outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)v308);
        uint64_t v107 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v107);
        if ((v109 & 1) != 0 && v108 > 1u) {
          goto LABEL_256;
        }
        int v282 = (int)v32;
        unint64_t v110 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
        char v112 = v111;
        uint64_t v114 = v113;
        unsigned int v116 = v115;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v110, v112 & 1, v114, v116);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        if (!*(void *)&v300[0]) {
          goto LABEL_257;
        }
        v297[2] = v300[2];
        v297[3] = v300[3];
        LOBYTE(v297[4]) = v300[4];
        v297[1] = v300[1];
        v297[0] = v300[0];
        outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v300);
        uint64_t v283 = NavigationAuthority.controllerCache.getter();
        uint64_t v117 = outlined destroy of NavigationAuthority((uint64_t)v300);
        uint64_t v284 = v278;
        MEMORY[0x1F4188790](v117);
        uint64_t v118 = v286;
        unint64_t v119 = (void *)v289;
        uint64_t v120 = v290;
        outlined release of NavigationState.StackContent((uint64_t)v289, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v280 = v120;
        uint64_t v121 = v25;
        uint64_t v122 = v41;
        uint64_t v123 = (char **)v287;
        outlined release of NavigationState.StackContent((uint64_t)v287, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        swift_retain();
        uint64_t v124 = v122;
        uint64_t v25 = v121;
        specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v120, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t)&v278[-6], v283, (unint64_t)v280, v124, v282, v119, v123, v118, (uint64_t)&v304);
        swift_release();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v297);
        break;
    }
    goto LABEL_190;
  }
  outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Logger?);
  if (v39) {
    goto LABEL_44;
  }
LABEL_15:
  uint64_t v41 = &selRef_showsMenuAsPrimaryAction;
  if (v23 == 1)
  {
    uint64_t v42 = [(UINavigationController *)v290 viewControllers];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 >= 2)
    {
      int v282 = (int)v32;
      outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v45 = v284[2];
      if (!v45)
      {
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        swift_unknownObjectRelease();
        __break(1u);
        goto LABEL_261;
      }
      uint64_t v46 = *v284;
      uint64_t v47 = v284[1];
      uint64_t v48 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v296);
      uint64_t v49 = (void *)swift_allocObject();
      v49[2] = v46;
      v49[3] = v47;
      v49[4] = v45;
      outlined init with take of NavigationState.Base(v296, v300);
      *((void *)&v300[24] + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      *(void *)&v300[25] = v49;
      *((void *)&v300[25] + 1) = v45;
      memcpy(v297, v300, 0x1A0uLL);
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v46, v47, v45);
      char v50 = memcpy(v308, v300, 0x1A0uLL);
      *(void *)&v308[26] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      *((void *)&v308[26] + 1) = 0;
      specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v50);
      if ((v53 & 1) != 0 && v52 == 2 && !v51)
      {
LABEL_261:
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v308);
        __break(1u);
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      unint64_t v54 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
      char v56 = v55;
      uint64_t v58 = v57;
      unsigned int v60 = v59;
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v300);
      specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v54, v56 & 1, v58, v60);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v300);
      char v61 = v309[1];
      uint64_t v62 = v309[2];
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v309);
      outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v308);
      LOBYTE(v309[0]) = v61;
      v309[1] = v62;
      char v63 = v309;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v63);
      swift_release();
      uint64_t v64 = [(UINavigationController *)v290 viewControllers];
      unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = v65 >> 62;
      if (!(v65 >> 62))
      {
        uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_25;
      }
LABEL_235:
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_25:
      uint64_t v41 = (char **)v288;
      char v67 = v282;
      if (__OFSUB__(0, v66))
      {
        __break(1u);
      }
      else
      {
        if (v66)
        {
          BOOL v68 = __OFSUB__(v66--, 1);
          if (v68)
          {
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
            goto LABEL_248;
          }
          if (v66 < 0) {
            goto LABEL_244;
          }
        }
        if (!v23)
        {
          uint64_t v69 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_105;
        }
        swift_bridgeObjectRetain();
        uint64_t v212 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v212 & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_105:
          if (v69 >= v66)
          {
            if ((v65 & 0xC000000000000001) != 0 && v66)
            {
              Swift::Int v213 = 0;
              do
              {
                Swift::Int v214 = v213 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v213);
                Swift::Int v213 = v214;
              }
              while (v66 != v214);
            }
            if (v23)
            {
              swift_bridgeObjectRetain();
              _CocoaArrayWrapper.subscript.getter();
              uint64_t v215 = v216;
              uint64_t v23 = v217;
              unint64_t v219 = v218;
              swift_bridgeObjectRelease_n();
              uint64_t v66 = v219 >> 1;
            }
            else
            {
              uint64_t v215 = (v65 & 0xFFFFFFFFFFFFFF8) + 32;
            }
            uint64_t v220 = v289;
            if (v23 == v66)
            {
              swift_unknownObjectRelease();
              uint64_t v221 = 0;
              goto LABEL_117;
            }
            if (v66 - 1 >= v23)
            {
              uint64_t v221 = (char *)*(id *)(v215 + 8 * (v66 - 1));
              swift_unknownObjectRelease();
LABEL_117:
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              *(char **)((char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v41) + 0x88)) = v221;
              if (v67)
              {
                memcpy(v309, v220, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v299);
                int v222 = v299[0];
                memcpy(v309, v287, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v298);
                BOOL v225 = v222 != -1 && LODWORD(v298[0]) != -1 && v222 == LODWORD(v298[0]);
              }
              else
              {
                BOOL v225 = 0;
              }
              uint64_t v226 = v290;

              specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v226, v307, v286);
              id v227 = [(UINavigationController *)v226 transitionCoordinator];
              if (v227)
              {
                uint64_t v228 = v227;
                if (v225)
                {
                  char v304 = 1;
                  uint64_t v229 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  v309[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                  v309[5] = v229;
                  v309[0] = MEMORY[0x1E4F143A8];
                  v309[1] = 1107296256;
                  v309[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                  v309[3] = &block_descriptor_91_1;
                  uint64_t v230 = _Block_copy(v309);
                  swift_release();
                  objc_msgSend(v228, sel_animateAlongsideTransition_completion_, 0, v230);
                  _Block_release(v230);
                }
                swift_unknownObjectRelease();
              }
              goto LABEL_189;
            }
            goto LABEL_246;
          }
          goto LABEL_238;
        }
      }
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
  }
  uint64_t v125 = [(UINavigationController *)v290 viewControllers];
  uint64_t v77 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v126 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v126 >> 62) {
    goto LABEL_230;
  }
  uint64_t v127 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v127 < 2) {
      goto LABEL_59;
    }
    id v128 = [v290 v41[47]];
    unint64_t v129 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v129 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v130 = *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v23 >= v130)
    {
LABEL_59:
      memcpy(v308, v287, 0x188uLL);
      NavigationState.StackContent.count.getter();
      uint64_t v146 = v145;
      memcpy(v308, v289, 0x188uLL);
      NavigationState.StackContent.count.getter();
      BOOL v68 = __OFSUB__(v146, v147);
      uint64_t v77 = v146 - v147;
      if (v68) {
        goto LABEL_229;
      }
      uint64_t v41 = (char **)v288;
      if (v77 < 1) {
        goto LABEL_85;
      }
      int v282 = (int)v32;
      outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
      uint64_t v96 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v148 = v284[2];
      if (!v148) {
        goto LABEL_253;
      }
      uint64_t v149 = *v284;
      uint64_t v150 = v284[1];
      uint64_t v151 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v298);
      uint64_t v152 = (void *)swift_allocObject();
      _OWORD v152[2] = v149;
      v152[3] = v150;
      v152[4] = v148;
      outlined init with take of NavigationState.Base(v298, v299);
      v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v299[50] = v152;
      v299[51] = v148;
      memcpy(v309, v299, sizeof(v309));
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v149, v150, v148);
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v149, v150, v148);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v149, v150, v148);
      unint64_t v153 = memcpy(v300, v299, sizeof(v300));
      uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      uint64_t v302 = 0;
      uint64_t v154 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v153);
      uint64_t v158 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v154, v155 & 1, v156, v157);
      if ((_BYTE)v161 == 0xFF)
      {
        uint64_t v184 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        uint64_t v25 = (void *)specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v184);
        uint64_t v32 = v185;
        uint64_t v81 = v186;
        char v97 = v187 & 1;
        uint64_t v158 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      }
      else
      {
        uint64_t v25 = (void *)v158;
        uint64_t v32 = v160;
        uint64_t v81 = v161;
        char v97 = v159 & 1;
      }
      unint64_t v65 = (unint64_t)v309;
      uint64_t v188 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v158);
      if (v191) {
        goto LABEL_82;
      }
      if (v97) {
        goto LABEL_83;
      }
      if ((uint64_t)v25 < v188) {
        goto LABEL_245;
      }
      if (v188 < (uint64_t)v25) {
        goto LABEL_83;
      }
      if ((_BYTE)v81)
      {
        if (v81 == 1)
        {
          if (v190 != 1 || (uint64_t)v32 >= v189) {
            goto LABEL_83;
          }
          __break(1u);
LABEL_82:
          if ((v97 & 1) == 0)
          {
            __break(1u);
          }
          else
          {
LABEL_83:
            outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
            outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
            LOBYTE(v292[0]) = v97;
            LOBYTE(v293) = 1;
            memcpy((char *)v296 + 7, v299, 0x1A0uLL);
            *(void *)&v297[0] = v25;
            BYTE8(v297[0]) = v97;
            *(void *)&v297[1] = v32;
            BYTE8(v297[1]) = (_BYTE)v81;
            *(void *)&v297[2] = 0;
            BYTE8(v297[2]) = 1;
            *(void *)&v297[3] = 0;
            BYTE8(v297[3]) = 2;
            memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
            *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
            *((void *)&v297[30] + 1) = 0;
            memcpy(v308, v297, sizeof(v308));
            specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E090, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
            swift_release();
            outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
            unint64_t v192 = [(UINavigationController *)v290 viewControllers];
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            unint64_t v193 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v65 = specialized BidirectionalCollection.dropLast(_:)(v77, v193);
            uint64_t v195 = v194;
            int64_t v197 = v196;
            uint64_t v23 = v198;
            swift_bridgeObjectRelease();
            int64_t v199 = (unint64_t)v23 >> 1;
            if (v197 == (unint64_t)v23 >> 1)
            {
              swift_unknownObjectRelease();
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              LODWORD(v32) = v282;
LABEL_85:
              if (v32) {
                goto LABEL_86;
              }
              goto LABEL_97;
            }
            int v204 = v282;
            if (v199 > v197)
            {
              uint64_t v205 = (char *)*(id *)(v195 + 8 * v199 - 8);
              swift_unknownObjectRelease();
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              *(char **)((char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v41) + 0x88)) = v205;

              if (v204)
              {
LABEL_86:
                memcpy(v297, v289, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v300);
                int v200 = v300[0];
                memcpy(v297, v287, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v296);
                char v203 = v200 != -1 && LODWORD(v296[0]) != -1 && v200 == LODWORD(v296[0]);
                goto LABEL_98;
              }
LABEL_97:
              char v203 = 0;
LABEL_98:
              uint64_t v206 = v290;
              specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(v290, (uint64_t)v307, v203, v286, v283 & 1);
              id v207 = [(UINavigationController *)v206 transitionCoordinator];
              if (!v207) {
                goto LABEL_190;
              }
              unint64_t v208 = v207;
              char v209 = v203 ^ 1;
              if (v77 < 1) {
                char v209 = 1;
              }
              if ((v209 & 1) == 0)
              {
                char v304 = 1;
                uint64_t v210 = swift_allocObject();
                swift_unknownObjectWeakInit();
                *(void *)&v297[2] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                *((void *)&v297[2] + 1) = v210;
                *(void *)&v297[0] = MEMORY[0x1E4F143A8];
                *((void *)&v297[0] + 1) = 1107296256;
                *(void *)&v297[1] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                *((void *)&v297[1] + 1) = &block_descriptor_69;
                uint64_t v211 = _Block_copy(v297);
                swift_release();
                objc_msgSend(v208, sel_animateAlongsideTransition_completion_, 0, v211);
                _Block_release(v211);
              }
              goto LABEL_188;
            }
          }
          __break(1u);
          goto LABEL_235;
        }
      }
      else
      {
        if (!v190)
        {
LABEL_214:
          if ((uint64_t)v32 >= v189) {
            goto LABEL_83;
          }
          __break(1u);
          goto LABEL_216;
        }
        if (v190 == 2) {
          goto LABEL_83;
        }
        __break(1u);
      }
      if (v190 == 2 && !v189) {
        goto LABEL_83;
      }
      __break(1u);
LABEL_202:
      if (!v190) {
        goto LABEL_222;
      }
      if (v190 == 2) {
        goto LABEL_143;
      }
      __break(1u);
LABEL_205:
      if (!v190) {
        goto LABEL_224;
      }
      if (v190 == 2) {
        goto LABEL_157;
      }
      __break(1u);
LABEL_208:
      if (v190 == 2 && !v189) {
        goto LABEL_143;
      }
      __break(1u);
LABEL_211:
      if (v190 == 2 && !v189) {
        goto LABEL_157;
      }
      __break(1u);
      goto LABEL_214;
    }
    uint64_t v96 = v23;
    int v282 = (int)v32;
    outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
    uint64_t v23 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v308);
    uint64_t v131 = v284[2];
    if (!v131) {
      goto LABEL_259;
    }
    uint64_t v132 = *v284;
    uint64_t v133 = v284[1];
    uint64_t v134 = (uint64_t)v287;
    outlined init with take of NavigationState.Base(v287, v298);
    unsigned int v135 = (void *)swift_allocObject();
    v135[2] = v132;
    v135[3] = v133;
    v135[4] = v131;
    outlined init with take of NavigationState.Base(v298, v299);
    v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v299[50] = v135;
    v299[51] = v131;
    memcpy(v309, v299, sizeof(v309));
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v132, v133, v131);
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v132, v133, v131);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v132, v133, v131);
    unsigned int v136 = memcpy(v300, v299, sizeof(v300));
    uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    uint64_t v302 = 0;
    if (v96 < 0) {
      goto LABEL_239;
    }
    uint64_t v137 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v136);
    uint64_t v141 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v96, v137, v138 & 1, v139, v140);
    if ((_BYTE)v144 == 0xFF)
    {
      uint64_t v249 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      uint64_t v25 = (void *)specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v249);
      uint64_t v32 = v250;
      uint64_t v81 = v251;
      char v97 = v252 & 1;
      uint64_t v141 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
    }
    else
    {
      uint64_t v25 = (void *)v141;
      uint64_t v32 = v143;
      uint64_t v81 = v144;
      char v97 = v142 & 1;
    }
    uint64_t v253 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v141);
    if (v254) {
      goto LABEL_170;
    }
    if (v97) {
      goto LABEL_171;
    }
    if ((uint64_t)v25 < v253) {
      goto LABEL_250;
    }
    if (v253 < (uint64_t)v25) {
      goto LABEL_171;
    }
    if ((_BYTE)v81) {
      break;
    }
LABEL_216:
    if (v190)
    {
      if (v190 == 2) {
        goto LABEL_171;
      }
      __break(1u);
      goto LABEL_219;
    }
LABEL_226:
    if ((uint64_t)v32 >= v189) {
      goto LABEL_171;
    }
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    swift_bridgeObjectRetain();
    uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v81 != 1)
  {
LABEL_219:
    if (v190 == 2 && !v189) {
      goto LABEL_171;
    }
    __break(1u);
LABEL_222:
    if ((uint64_t)v25 >= v189) {
      goto LABEL_143;
    }
    __break(1u);
LABEL_224:
    if ((uint64_t)v25 >= v189) {
      goto LABEL_157;
    }
    __break(1u);
    goto LABEL_226;
  }
  if (v190 == 1 && (uint64_t)v32 < v189)
  {
    __break(1u);
LABEL_170:
    if ((v97 & 1) == 0) {
      goto LABEL_247;
    }
  }
LABEL_171:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
  outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
  char v295 = v97;
  char v294 = 1;
  memcpy((char *)v296 + 7, v299, 0x1A0uLL);
  *(void *)&v297[0] = v25;
  BYTE8(v297[0]) = v97;
  *(void *)&v297[1] = v32;
  BYTE8(v297[1]) = (_BYTE)v81;
  *(void *)&v297[2] = 0;
  BYTE8(v297[2]) = 1;
  *(void *)&v297[3] = 0;
  BYTE8(v297[3]) = 2;
  memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
  *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
  *((void *)&v297[30] + 1) = 0;
  memcpy(v308, v297, sizeof(v308));
  specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E090, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
  swift_release();
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
  id v255 = [v290 v41[47]];
  unint64_t v256 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized BidirectionalCollection.dropLast(_:)(v96, v256);
  uint64_t v258 = v257;
  uint64_t v260 = v259;
  unint64_t v262 = v261;
  swift_bridgeObjectRelease();
  int64_t v263 = v262 >> 1;
  if (v260 == v262 >> 1) {
    goto LABEL_260;
  }
  uint64_t v41 = (char **)v288;
  uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
  int v264 = v282;
  if (v263 <= v260) {
    goto LABEL_240;
  }
  uint64_t v221 = (char *)*(id *)(v258 + 8 * v263 - 8);
  swift_unknownObjectRelease();
  *(char **)((char *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x88)) = v221;
  if (v264)
  {
    memcpy(v292, v289, sizeof(v292));
    NavigationState.StackContent.animationSeed.getter(&v293);
    int v265 = v293;
    memcpy(v292, v287, sizeof(v292));
    NavigationState.StackContent.animationSeed.getter(&v291);
    BOOL v268 = v265 != -1 && v291 != -1 && v265 == v291;
  }
  else
  {
    BOOL v268 = 0;
  }
  uint64_t v269 = v290;

  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v269, v307, v286);
  id v270 = [(UINavigationController *)v269 transitionCoordinator];
  if (v270)
  {
    uint64_t v271 = v270;
    if (v268)
    {
      char v304 = 1;
      uint64_t v272 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v292[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
      v292[5] = v272;
      v292[0] = MEMORY[0x1E4F143A8];
      v292[1] = 1107296256;
      v292[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v292[3] = &block_descriptor_82_0;
      uint64_t v273 = _Block_copy(v292);
      swift_release();
      objc_msgSend(v271, sel_animateAlongsideTransition_completion_, 0, v273);
      _Block_release(v273);
    }

LABEL_188:
    swift_unknownObjectRelease();
    goto LABEL_190;
  }
LABEL_189:

LABEL_190:
  if (v304 == 1)
  {
    *((unsigned char *)v41 + v281) = 0;
    *(char **)((char *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x88)) = 0;
  }
  uint64_t v237 = v285;
  if (v285)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v300);
    NavigationAuthority.controllerCache.getter();
    uint64_t v238 = v300;
LABEL_194:
    outlined destroy of NavigationAuthority((uint64_t)v238);
    specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v237);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
}

{
  void *v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  UINavigationController *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint8_t *v39;
  uint64_t v40;
  char **v41;
  NSArray *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  void *v63;
  NSArray *v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  uint64_t v69;
  void *v70;
  NSObject *v71;
  os_log_type_t v72;
  BOOL v73;
  uint8_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  char *v106;
  uint64_t v107;
  unsigned __int8 v108;
  char v109;
  unint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  UINavigationController *v120;
  void *v121;
  char **v122;
  char **v123;
  char **v124;
  NSArray *v125;
  unint64_t v126;
  uint64_t v127;
  id v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  void *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  NSArray *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int64_t v196;
  int64_t v197;
  uint64_t v198;
  int64_t v199;
  int v200;
  char v203;
  int v204;
  char *v205;
  UINavigationController *v206;
  id v207;
  void *v208;
  char v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  Swift::Int v213;
  Swift::Int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  const void *v220;
  char *v221;
  int v222;
  BOOL v225;
  UINavigationController *v226;
  id v227;
  void *v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  _OWORD *v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  char v244;
  void *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  void *v251;
  char v252;
  uint64_t v253;
  char v254;
  id v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  int64_t v263;
  int v264;
  int v265;
  BOOL v268;
  UINavigationController *v269;
  id v270;
  void *v271;
  uint64_t v272;
  void *v273;
  uint64_t v275;
  unint64_t v276;
  _OWORD *v277;
  void v278[2];
  uint64_t v279;
  UINavigationController *v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  void *v288;
  const void *v289;
  UINavigationController *v290;
  uint64_t v291;
  void v292[49];
  uint64_t v293;
  char v294;
  char v295;
  void v296[53];
  _OWORD v297[32];
  void v298[49];
  void v299[52];
  _OWORD v300[26];
  uint64_t (*v301)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v302;
  unsigned char v303[399];
  char v304;
  unsigned char v305[392];
  void v306[55];
  unsigned char v307[416];
  _OWORD v308[31];
  void v309[52];
  unsigned char v310[392];

  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  LODWORD(v283) = v3;
  uint64_t v286 = v5;
  id v287 = v4;
  v290 = v6;
  uint64_t v8 = v7;
  memcpy(v310, v4, sizeof(v310));
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v278 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v278 - v13;
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v16 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70));
  swift_beginAccess();
  uint64_t v17 = v16[2];
  if (!v17)
  {
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  uint64_t v284 = v16;
  uint64_t v20 = v16;
  uint64_t v19 = *v16;
  uint64_t v18 = v20[1];
  outlined init with take of NavigationState.Base(v8, v305);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = v19;
  v21[3] = v18;
  void v21[4] = v17;
  outlined init with take of NavigationState.Base(v305, v306);
  v306[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v306[50] = v21;
  v306[51] = v17;
  memcpy(v307, v306, sizeof(v307));
  outlined copy of NavigationStrategy_Phone?(v19, v18, v17);
  outlined copy of NavigationStrategy_Phone?(v19, v18, v17);
  swift_bridgeObjectRetain();
  v289 = v8;
  outlined release of NavigationState.StackContent((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  uint64_t v285 = specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  outlined consume of RichTextAttributeResolver?(v19, v18, v17);
  uint64_t v22 = *v15 & *v2;
  uint64_t v23 = *(void *)(v22 + 0x78);
  int v24 = *((unsigned __int8 *)v2 + v23);
  v288 = v2;
  uint64_t v25 = v15;
  if (v24 != 2)
  {
    static Log.navigation.getter();
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v14, 1, v33) == 1)
    {
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Logger?);
      uint64_t v32 = v284;
    }
    else
    {
      uint64_t v70 = v25;
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      BOOL v73 = os_log_type_enabled(v71, v72);
      uint64_t v32 = v284;
      if (v73)
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl(&dword_1872C6000, v71, v72, "Updating stack views in place after end-user triggered transition or isTransitioningViewControllers", v74, 2u);
        MEMORY[0x18C119C60](v74, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v33);
      uint64_t v25 = v70;
    }
    uint64_t v41 = (char **)v288;
    specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, v307, v286);
    int v75 = *((unsigned __int8 *)v41 + v23);
    if (v75 == 2) {
      goto LABEL_144;
    }
    *((unsigned char *)v41 + v23) = 2;
    memcpy(v308, v287, 0x188uLL);
    NavigationState.StackContent.count.getter();
    uint64_t v77 = v76;
    memcpy(v308, v289, 0x188uLL);
    NavigationState.StackContent.count.getter();
    uint64_t v79 = v77 - v78;
    if (__OFSUB__(v77, v78)) {
      goto LABEL_228;
    }
    if (v79 < 1)
    {
LABEL_144:
      uint64_t v237 = v285;
      if (!v285) {
        return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
      }
LABEL_145:
      outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v297);
      NavigationAuthority.controllerCache.getter();
      uint64_t v238 = v297;
      goto LABEL_194;
    }
    uint64_t v80 = (uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68);
    uint64_t v81 = v25;
    if ((v75 & 1) == 0)
    {
      outlined init with copy of NavigationAuthority(v80, (uint64_t)v308);
      uint64_t v77 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v82 = v32[2];
      if (!v82)
      {
LABEL_254:
        __break(1u);
        goto LABEL_255;
      }
      uint64_t v84 = v32;
      uint64_t v32 = (uint64_t *)*v32;
      uint64_t v83 = v84[1];
      uint64_t v85 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v303);
      uint64_t v86 = (void *)swift_allocObject();
      v86[2] = v32;
      v86[3] = v83;
      v86[4] = v82;
      outlined init with take of NavigationState.Base(v303, v299);
      v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v299[50] = v86;
      v299[51] = v82;
      memcpy(v309, v299, sizeof(v309));
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v83, v82);
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v83, v82);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?((uint64_t)v32, v83, v82);
      long long v87 = memcpy(v300, v299, sizeof(v300));
      uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      uint64_t v302 = 0;
      uint64_t v88 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v87);
      uint64_t v92 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v79, v88, v89 & 1, v90, v91);
      if ((_BYTE)v95 == 0xFF)
      {
        uint64_t v231 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        uint64_t v96 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v231);
        uint64_t v25 = v232;
        uint64_t v23 = v233;
        char v97 = v234 & 1;
        uint64_t v92 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      }
      else
      {
        uint64_t v96 = v92;
        uint64_t v25 = v94;
        uint64_t v23 = v95;
        char v97 = v93 & 1;
      }
      uint64_t v235 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v92);
      if ((v236 & 1) == 0)
      {
        if (v97) {
          goto LABEL_143;
        }
        if (v96 < v235)
        {
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
          goto LABEL_251;
        }
        if (v235 < v96) {
          goto LABEL_143;
        }
        if (!(_BYTE)v23) {
          goto LABEL_202;
        }
        if (v23 != 1) {
          goto LABEL_208;
        }
        if (v190 != 1 || (uint64_t)v25 >= v189)
        {
LABEL_143:
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
          LOBYTE(v298[0]) = v97;
          LOBYTE(v292[0]) = 1;
          memcpy((char *)v296 + 7, v299, 0x1A0uLL);
          *(void *)&v297[0] = v96;
          BYTE8(v297[0]) = v97;
          *(void *)&v297[1] = v25;
          BYTE8(v297[1]) = v23;
          *(void *)&v297[2] = 0;
          BYTE8(v297[2]) = 1;
          *(void *)&v297[3] = 0;
          BYTE8(v297[3]) = 2;
          memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
          *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
          *((void *)&v297[30] + 1) = 0;
          memcpy(v308, v297, sizeof(v308));
          specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E7E8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
          swift_release();
          outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
          uint64_t v25 = v81;
          goto LABEL_144;
        }
        __break(1u);
      }
      if ((v97 & 1) == 0)
      {
LABEL_241:
        __break(1u);
        goto LABEL_242;
      }
      goto LABEL_143;
    }
    outlined init with copy of NavigationAuthority(v80, (uint64_t)v308);
    uint64_t v96 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v308);
    uint64_t v162 = v32[2];
    if (!v162)
    {
LABEL_255:
      __break(1u);
LABEL_256:
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }
    unsigned int v164 = v32;
    uint64_t v32 = (uint64_t *)*v32;
    uint64_t v163 = v164[1];
    uint64_t v165 = (uint64_t)v287;
    outlined init with take of NavigationState.Base(v287, v303);
    unsigned int v166 = (void *)swift_allocObject();
    v166[2] = v32;
    v166[3] = v163;
    v166[4] = v162;
    outlined init with take of NavigationState.Base(v303, v299);
    v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v299[50] = v166;
    v299[51] = v162;
    memcpy(v309, v299, sizeof(v309));
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v163, v162);
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?((uint64_t)v32, v163, v162);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined release of NavigationState.StackContent(v165, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?((uint64_t)v32, v163, v162);
    unsigned int v167 = memcpy(v300, v299, sizeof(v300));
    uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    uint64_t v302 = 0;
    uint64_t v168 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v167);
    uint64_t v172 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v79, v168, v169 & 1, v170, v171);
    if ((_BYTE)v175 == 0xFF)
    {
      uint64_t v239 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      uint64_t v77 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v239);
      uint64_t v25 = v240;
      uint64_t v23 = v241;
      char v97 = v242 & 1;
      uint64_t v172 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
    }
    else
    {
      uint64_t v77 = v172;
      uint64_t v25 = v174;
      uint64_t v23 = v175;
      char v97 = v173 & 1;
    }
    uint64_t v243 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v172);
    if ((v244 & 1) == 0)
    {
      if (v97) {
        goto LABEL_157;
      }
      if (v77 < v243) {
        goto LABEL_249;
      }
      if (v243 < v77) {
        goto LABEL_157;
      }
      if (!(_BYTE)v23) {
        goto LABEL_205;
      }
      if (v23 != 1) {
        goto LABEL_211;
      }
      if (v190 != 1 || (uint64_t)v25 >= v189)
      {
LABEL_157:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        LOBYTE(v298[0]) = v97;
        LOBYTE(v292[0]) = 1;
        memcpy((char *)v296 + 7, v299, 0x1A0uLL);
        *(void *)&v297[0] = v77;
        BYTE8(v297[0]) = v97;
        *(void *)&v297[1] = v25;
        BYTE8(v297[1]) = v23;
        *(void *)&v297[2] = 0;
        BYTE8(v297[2]) = 1;
        *(void *)&v297[3] = 0;
        BYTE8(v297[3]) = 2;
        memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
        *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
        *((void *)&v297[30] + 1) = 0;
        memcpy(v308, v297, sizeof(v308));
        swift_retain();
        uint64_t v245 = specialized Sequence.compactMap<A>(_:)((uint64_t)v308, v96, (uint64_t)&unk_1ED48E720, (uint64_t)&unk_1ED48E748, (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)partial apply, (uint64_t)closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply, (uint64_t)&unk_1ED48E770, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
        uint64_t v246 = swift_allocObject();
        *(void *)(v246 + 16) = v245;
        swift_release();
        outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
        uint64_t v25 = v81;
        uint64_t v247 = (uint64_t *)((char *)v41 + *(void *)((*v81 & (unint64_t)*v41) + 0xA0));
        uint64_t v248 = *v247;
        uint64_t *v247 = (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred<A>(at:)partial apply;
        v247[1] = v246;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v248);
        uint64_t v237 = v285;
        if (!v285) {
          return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        }
        goto LABEL_145;
      }
      __break(1u);
    }
    if ((v97 & 1) == 0)
    {
LABEL_242:
      __break(1u);
      goto LABEL_243;
    }
    goto LABEL_157;
  }
  char v304 = 1;
  uint64_t v26 = *(void *)(v22 + 128);
  *((unsigned char *)v2 + v26) = 1;
  if ((*((unsigned char *)v2 + *(void *)((*v15 & *v2) + 0x98)) & 1) == 0) {
    goto LABEL_12;
  }
  id v27 = [(UINavigationController *)v290 view];
  if (!v27) {
    goto LABEL_252;
  }
  uint64_t v28 = v27;
  id v29 = objc_msgSend(v27, sel_window);

  if (v29 && (id v30 = objc_msgSend(v29, sel_windowScene), v29, v30))
  {
    if (objc_msgSend(self, sel_areAnimationsEnabled))
    {
      if (objc_msgSend(v30, sel_activationState))
      {
        id v31 = objc_msgSend(v30, sel_activationState);

        LODWORD(v32) = v31 == (id)1;
      }
      else
      {

        LODWORD(v32) = 1;
      }
    }
    else
    {

      LODWORD(v32) = 0;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v32) = 0;
  }
  uint64_t v281 = v26;
  memcpy(v308, v289, 0x188uLL);
  memcpy(v303, v310, 0x188uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v303, v35, v36, v37);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v303, (uint64_t)v297, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  uint64_t v23 = NavigationState.StackContent.change(from:)((uint64_t)v297);
  LODWORD(v39) = v38;
  static Log.navigation.getter();
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = *(char ***)(v40 - 8);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v41[6])(v11, 1, v40) != 1)
  {
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      LODWORD(v280) = v39;
      uint64_t v39 = (uint8_t *)v100;
      uint64_t v101 = swift_slowAlloc();
      uint64_t v279 = v101;
      int v282 = (int)v32;
      *(_DWORD *)uint64_t v39 = 136315138;
      *(void *)&v297[0] = v101;
      v278[1] = v39 + 4;
      *(void *)&v308[0] = v23;
      BYTE8(v308[0]) = v280 & 1;
      uint64_t v102 = String.init<A>(describing:)();
      *(void *)&v308[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)v297);
      LODWORD(v32) = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v98, v99, "Updating stack content for change: %s", v39, 0xCu);
      uint64_t v104 = v279;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v104, -1, -1);
      unint64_t v105 = v39;
      LOBYTE(v39) = (_BYTE)v280;
      MEMORY[0x18C119C60](v105, -1, -1);
    }

    unsigned int v106 = v41[1];
    ++v41;
    ((void (*)(char *, uint64_t))v106)(v11, v40);
    if ((v39 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_44:
    switch(v23)
    {
      case 1:
        uint64_t v41 = (char **)v288;
        specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, v307, v286);
        goto LABEL_190;
      case 2:
        goto LABEL_59;
      case 3:
        uint64_t v41 = (char **)v288;
        uint64_t v176 = (uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68);
        outlined init with copy of NavigationAuthority(v176, (uint64_t)v308);
        NavigationAuthority.controllerCache.getter();
        outlined destroy of NavigationAuthority((uint64_t)v308);
        unsigned int v177 = *((unsigned __int8 *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x60) + 8);
        if (v177 >= 3) {
          LOBYTE(v177) = 3;
        }
        LOBYTE(v308[0]) = v177;
        NavigationHostingControllerCache_UIKit.ejectAll(in:)((SwiftUI::NavigationSplitViewColumn_optional)v308);
        swift_release();
        unint64_t v178 = (unint64_t)v290;

        *(void *)&v297[0] = 0;
        BYTE8(v297[0]) = 1;
        outlined init with copy of NavigationAuthority(v176, (uint64_t)v308);
        NavigationAuthority.controllerCache.getter();
        uint64_t v179 = outlined destroy of NavigationAuthority((uint64_t)v308);
        MEMORY[0x1F4188790](v179);
        uint64_t v180 = v286;
        v278[-6] = v307;
        v278[-5] = v180;
        uint64_t v277 = v297;
        MEMORY[0x1F4188790](v181);
        v278[-6] = v41;
        LOBYTE(v278[-5]) = v283 & 1;
        uint64_t v275 = v182;
        unint64_t v276 = v178;
        LOBYTE(v277) = 0;
        specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v178, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v183, (void (*)(unint64_t))partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)&v278[-8]);
        swift_release();
        goto LABEL_190;
      default:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized Collection.dropLast(_:)(1, v308);
        uint64_t v41 = (char **)v288;
        specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v290, (uint64_t *)v308, v286, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
        outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)v308);
        uint64_t v107 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v107);
        if ((v109 & 1) != 0 && v108 > 1u) {
          goto LABEL_256;
        }
        int v282 = (int)v32;
        unint64_t v110 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
        char v112 = v111;
        uint64_t v114 = v113;
        unsigned int v116 = v115;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v110, v112 & 1, v114, v116);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
        if (!*(void *)&v300[0]) {
          goto LABEL_257;
        }
        v297[2] = v300[2];
        v297[3] = v300[3];
        LOBYTE(v297[4]) = v300[4];
        v297[1] = v300[1];
        v297[0] = v300[0];
        outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v300);
        uint64_t v283 = NavigationAuthority.controllerCache.getter();
        uint64_t v117 = outlined destroy of NavigationAuthority((uint64_t)v300);
        uint64_t v284 = v278;
        MEMORY[0x1F4188790](v117);
        uint64_t v118 = v286;
        unint64_t v119 = (void *)v289;
        uint64_t v120 = v290;
        outlined release of NavigationState.StackContent((uint64_t)v289, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v280 = v120;
        uint64_t v121 = v25;
        uint64_t v122 = v41;
        uint64_t v123 = (char **)v287;
        outlined release of NavigationState.StackContent((uint64_t)v287, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        swift_retain();
        uint64_t v124 = v122;
        uint64_t v25 = v121;
        specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v120, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t)&v278[-6], v283, (unint64_t)v280, v124, v282, v119, v123, v118, (uint64_t)&v304);
        swift_release();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v297);
        break;
    }
    goto LABEL_190;
  }
  outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Logger?);
  if (v39) {
    goto LABEL_44;
  }
LABEL_15:
  uint64_t v41 = &selRef_showsMenuAsPrimaryAction;
  if (v23 == 1)
  {
    uint64_t v42 = [(UINavigationController *)v290 viewControllers];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 >= 2)
    {
      int v282 = (int)v32;
      outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v45 = v284[2];
      if (!v45) {
        goto LABEL_258;
      }
      uint64_t v46 = *v284;
      uint64_t v47 = v284[1];
      uint64_t v48 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v296);
      uint64_t v49 = (void *)swift_allocObject();
      v49[2] = v46;
      v49[3] = v47;
      v49[4] = v45;
      outlined init with take of NavigationState.Base(v296, v300);
      *((void *)&v300[24] + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      *(void *)&v300[25] = v49;
      *((void *)&v300[25] + 1) = v45;
      memcpy(v297, v300, 0x1A0uLL);
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v46, v47, v45);
      char v50 = memcpy(v308, v300, 0x1A0uLL);
      *(void *)&v308[26] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      *((void *)&v308[26] + 1) = 0;
      specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v50);
      if ((v53 & 1) != 0 && v52 == 2 && !v51)
      {
LABEL_261:
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v308);
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1880F07D8);
      }
      unint64_t v54 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
      char v56 = v55;
      uint64_t v58 = v57;
      unsigned int v60 = v59;
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v300);
      specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v54, v56 & 1, v58, v60);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v300);
      char v61 = v309[1];
      uint64_t v62 = v309[2];
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v309);
      outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v308);
      LOBYTE(v309[0]) = v61;
      v309[1] = v62;
      char v63 = v309;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v63);
      swift_release();
      uint64_t v64 = [(UINavigationController *)v290 viewControllers];
      unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = v65 >> 62;
      if (!(v65 >> 62))
      {
        uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_25;
      }
LABEL_235:
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_25:
      uint64_t v41 = (char **)v288;
      char v67 = v282;
      if (__OFSUB__(0, v66))
      {
        __break(1u);
      }
      else
      {
        if (v66)
        {
          BOOL v68 = __OFSUB__(v66--, 1);
          if (v68)
          {
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
            goto LABEL_248;
          }
          if (v66 < 0) {
            goto LABEL_244;
          }
        }
        if (!v23)
        {
          uint64_t v69 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_105;
        }
        swift_bridgeObjectRetain();
        uint64_t v212 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v212 & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_105:
          if (v69 >= v66)
          {
            if ((v65 & 0xC000000000000001) != 0 && v66)
            {
              Swift::Int v213 = 0;
              do
              {
                Swift::Int v214 = v213 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v213);
                Swift::Int v213 = v214;
              }
              while (v66 != v214);
            }
            if (v23)
            {
              swift_bridgeObjectRetain();
              _CocoaArrayWrapper.subscript.getter();
              uint64_t v215 = v216;
              uint64_t v23 = v217;
              unint64_t v219 = v218;
              swift_bridgeObjectRelease_n();
              uint64_t v66 = v219 >> 1;
            }
            else
            {
              uint64_t v215 = (v65 & 0xFFFFFFFFFFFFFF8) + 32;
            }
            uint64_t v220 = v289;
            if (v23 == v66)
            {
              swift_unknownObjectRelease();
              uint64_t v221 = 0;
              goto LABEL_117;
            }
            if (v66 - 1 >= v23)
            {
              uint64_t v221 = (char *)*(id *)(v215 + 8 * (v66 - 1));
              swift_unknownObjectRelease();
LABEL_117:
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              *(char **)((char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v41) + 0x88)) = v221;
              if (v67)
              {
                memcpy(v309, v220, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v299);
                int v222 = v299[0];
                memcpy(v309, v287, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v298);
                BOOL v225 = v222 != -1 && LODWORD(v298[0]) != -1 && v222 == LODWORD(v298[0]);
              }
              else
              {
                BOOL v225 = 0;
              }
              uint64_t v226 = v290;

              specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v226, v307, v286);
              id v227 = [(UINavigationController *)v226 transitionCoordinator];
              if (v227)
              {
                uint64_t v228 = v227;
                if (v225)
                {
                  char v304 = 1;
                  uint64_t v229 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  v309[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                  v309[5] = v229;
                  v309[0] = MEMORY[0x1E4F143A8];
                  v309[1] = 1107296256;
                  v309[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                  v309[3] = &block_descriptor_292;
                  uint64_t v230 = _Block_copy(v309);
                  swift_release();
                  objc_msgSend(v228, sel_animateAlongsideTransition_completion_, 0, v230);
                  _Block_release(v230);
                }
                swift_unknownObjectRelease();
              }
              goto LABEL_189;
            }
            goto LABEL_246;
          }
          goto LABEL_238;
        }
      }
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
  }
  uint64_t v125 = [(UINavigationController *)v290 viewControllers];
  uint64_t v77 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v126 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v126 >> 62) {
    goto LABEL_230;
  }
  uint64_t v127 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v127 < 2) {
      goto LABEL_59;
    }
    id v128 = [v290 v41[47]];
    unint64_t v129 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v129 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v130 = *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v23 >= v130)
    {
LABEL_59:
      memcpy(v308, v287, 0x188uLL);
      NavigationState.StackContent.count.getter();
      uint64_t v146 = v145;
      memcpy(v308, v289, 0x188uLL);
      NavigationState.StackContent.count.getter();
      BOOL v68 = __OFSUB__(v146, v147);
      uint64_t v77 = v146 - v147;
      if (v68) {
        goto LABEL_229;
      }
      uint64_t v41 = (char **)v288;
      if (v77 < 1) {
        goto LABEL_85;
      }
      int v282 = (int)v32;
      outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
      uint64_t v96 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v308);
      uint64_t v148 = v284[2];
      if (!v148) {
        goto LABEL_253;
      }
      uint64_t v149 = *v284;
      uint64_t v150 = v284[1];
      uint64_t v151 = (uint64_t)v287;
      outlined init with take of NavigationState.Base(v287, v298);
      uint64_t v152 = (void *)swift_allocObject();
      _OWORD v152[2] = v149;
      v152[3] = v150;
      v152[4] = v148;
      outlined init with take of NavigationState.Base(v298, v299);
      v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v299[50] = v152;
      v299[51] = v148;
      memcpy(v309, v299, sizeof(v309));
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v149, v150, v148);
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v149, v150, v148);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined release of NavigationState.StackContent(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v149, v150, v148);
      unint64_t v153 = memcpy(v300, v299, sizeof(v300));
      uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      uint64_t v302 = 0;
      uint64_t v154 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v153);
      uint64_t v158 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v154, v155 & 1, v156, v157);
      if ((_BYTE)v161 == 0xFF)
      {
        uint64_t v184 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
        uint64_t v25 = (void *)specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v184);
        uint64_t v32 = v185;
        uint64_t v81 = v186;
        char v97 = v187 & 1;
        uint64_t v158 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      }
      else
      {
        uint64_t v25 = (void *)v158;
        uint64_t v32 = v160;
        uint64_t v81 = v161;
        char v97 = v159 & 1;
      }
      unint64_t v65 = (unint64_t)v309;
      uint64_t v188 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v158);
      if (v191) {
        goto LABEL_82;
      }
      if (v97) {
        goto LABEL_83;
      }
      if ((uint64_t)v25 < v188) {
        goto LABEL_245;
      }
      if (v188 < (uint64_t)v25) {
        goto LABEL_83;
      }
      if ((_BYTE)v81)
      {
        if (v81 == 1)
        {
          if (v190 != 1 || (uint64_t)v32 >= v189) {
            goto LABEL_83;
          }
          __break(1u);
LABEL_82:
          if ((v97 & 1) == 0)
          {
            __break(1u);
          }
          else
          {
LABEL_83:
            outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
            outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
            LOBYTE(v292[0]) = v97;
            LOBYTE(v293) = 1;
            memcpy((char *)v296 + 7, v299, 0x1A0uLL);
            *(void *)&v297[0] = v25;
            BYTE8(v297[0]) = v97;
            *(void *)&v297[1] = v32;
            BYTE8(v297[1]) = (_BYTE)v81;
            *(void *)&v297[2] = 0;
            BYTE8(v297[2]) = 1;
            *(void *)&v297[3] = 0;
            BYTE8(v297[3]) = 2;
            memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
            *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
            *((void *)&v297[30] + 1) = 0;
            memcpy(v308, v297, sizeof(v308));
            specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E7E8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
            swift_release();
            outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
            unint64_t v192 = [(UINavigationController *)v290 viewControllers];
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            unint64_t v193 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v65 = specialized BidirectionalCollection.dropLast(_:)(v77, v193);
            uint64_t v195 = v194;
            int64_t v197 = v196;
            uint64_t v23 = v198;
            swift_bridgeObjectRelease();
            int64_t v199 = (unint64_t)v23 >> 1;
            if (v197 == (unint64_t)v23 >> 1)
            {
              swift_unknownObjectRelease();
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              LODWORD(v32) = v282;
LABEL_85:
              if (v32) {
                goto LABEL_86;
              }
              goto LABEL_97;
            }
            int v204 = v282;
            if (v199 > v197)
            {
              uint64_t v205 = (char *)*(id *)(v195 + 8 * v199 - 8);
              swift_unknownObjectRelease();
              uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
              *(char **)((char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v41) + 0x88)) = v205;

              if (v204)
              {
LABEL_86:
                memcpy(v297, v289, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v300);
                int v200 = v300[0];
                memcpy(v297, v287, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v296);
                char v203 = v200 != -1 && LODWORD(v296[0]) != -1 && v200 == LODWORD(v296[0]);
LABEL_98:
                uint64_t v206 = v290;
                specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(v290, (uint64_t)v307, v203, v286, v283 & 1);
                id v207 = [(UINavigationController *)v206 transitionCoordinator];
                if (v207)
                {
                  unint64_t v208 = v207;
                  char v209 = v203 ^ 1;
                  if (v77 < 1) {
                    char v209 = 1;
                  }
                  if ((v209 & 1) == 0)
                  {
                    char v304 = 1;
                    uint64_t v210 = swift_allocObject();
                    swift_unknownObjectWeakInit();
                    *(void *)&v297[2] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                    *((void *)&v297[2] + 1) = v210;
                    *(void *)&v297[0] = MEMORY[0x1E4F143A8];
                    *((void *)&v297[0] + 1) = 1107296256;
                    *(void *)&v297[1] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                    *((void *)&v297[1] + 1) = &block_descriptor_270;
                    uint64_t v211 = _Block_copy(v297);
                    swift_release();
                    objc_msgSend(v208, sel_animateAlongsideTransition_completion_, 0, v211);
                    _Block_release(v211);
                  }
LABEL_188:
                  swift_unknownObjectRelease();
                }
                goto LABEL_190;
              }
LABEL_97:
              char v203 = 0;
              goto LABEL_98;
            }
          }
          __break(1u);
          goto LABEL_235;
        }
      }
      else
      {
        if (!v190)
        {
LABEL_214:
          if ((uint64_t)v32 >= v189) {
            goto LABEL_83;
          }
          __break(1u);
          goto LABEL_216;
        }
        if (v190 == 2) {
          goto LABEL_83;
        }
        __break(1u);
      }
      if (v190 == 2 && !v189) {
        goto LABEL_83;
      }
      __break(1u);
LABEL_202:
      if (!v190) {
        goto LABEL_222;
      }
      if (v190 == 2) {
        goto LABEL_143;
      }
      __break(1u);
LABEL_205:
      if (!v190) {
        goto LABEL_224;
      }
      if (v190 == 2) {
        goto LABEL_157;
      }
      __break(1u);
LABEL_208:
      if (v190 == 2 && !v189) {
        goto LABEL_143;
      }
      __break(1u);
LABEL_211:
      if (v190 == 2 && !v189) {
        goto LABEL_157;
      }
      __break(1u);
      goto LABEL_214;
    }
    uint64_t v96 = v23;
    int v282 = (int)v32;
    outlined init with copy of NavigationAuthority((uint64_t)v288 + *(void *)((*v25 & *v288) + 0x68), (uint64_t)v308);
    uint64_t v23 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v308);
    uint64_t v131 = v284[2];
    if (!v131) {
      goto LABEL_259;
    }
    uint64_t v132 = *v284;
    uint64_t v133 = v284[1];
    uint64_t v134 = (uint64_t)v287;
    outlined init with take of NavigationState.Base(v287, v298);
    unsigned int v135 = (void *)swift_allocObject();
    v135[2] = v132;
    v135[3] = v133;
    v135[4] = v131;
    outlined init with take of NavigationState.Base(v298, v299);
    v299[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v299[50] = v135;
    v299[51] = v131;
    memcpy(v309, v299, sizeof(v309));
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v132, v133, v131);
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v132, v133, v131);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined release of NavigationState.StackContent(v134, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v132, v133, v131);
    unsigned int v136 = memcpy(v300, v299, sizeof(v300));
    uint64_t v301 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    uint64_t v302 = 0;
    if (v96 < 0) {
      goto LABEL_239;
    }
    uint64_t v137 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v136);
    uint64_t v141 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v96, v137, v138 & 1, v139, v140);
    if ((_BYTE)v144 == 0xFF)
    {
      uint64_t v249 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
      uint64_t v25 = (void *)specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v249);
      uint64_t v32 = v250;
      uint64_t v81 = v251;
      char v97 = v252 & 1;
      uint64_t v141 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
    }
    else
    {
      uint64_t v25 = (void *)v141;
      uint64_t v32 = v143;
      uint64_t v81 = v144;
      char v97 = v142 & 1;
    }
    uint64_t v253 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v141);
    if (v254) {
      goto LABEL_170;
    }
    if (v97) {
      goto LABEL_171;
    }
    if ((uint64_t)v25 < v253) {
      goto LABEL_250;
    }
    if (v253 < (uint64_t)v25) {
      goto LABEL_171;
    }
    if ((_BYTE)v81) {
      break;
    }
LABEL_216:
    if (v190)
    {
      if (v190 == 2) {
        goto LABEL_171;
      }
      __break(1u);
      goto LABEL_219;
    }
LABEL_226:
    if ((uint64_t)v32 >= v189) {
      goto LABEL_171;
    }
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    swift_bridgeObjectRetain();
    uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v81 != 1)
  {
LABEL_219:
    if (v190 == 2 && !v189) {
      goto LABEL_171;
    }
    __break(1u);
LABEL_222:
    if ((uint64_t)v25 >= v189) {
      goto LABEL_143;
    }
    __break(1u);
LABEL_224:
    if ((uint64_t)v25 >= v189) {
      goto LABEL_157;
    }
    __break(1u);
    goto LABEL_226;
  }
  if (v190 == 1 && (uint64_t)v32 < v189)
  {
    __break(1u);
LABEL_170:
    if ((v97 & 1) == 0) {
      goto LABEL_247;
    }
  }
LABEL_171:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v299);
  outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v300);
  char v295 = v97;
  char v294 = 1;
  memcpy((char *)v296 + 7, v299, 0x1A0uLL);
  *(void *)&v297[0] = v25;
  BYTE8(v297[0]) = v97;
  *(void *)&v297[1] = v32;
  BYTE8(v297[1]) = (_BYTE)v81;
  *(void *)&v297[2] = 0;
  BYTE8(v297[2]) = 1;
  *(void *)&v297[3] = 0;
  BYTE8(v297[3]) = 2;
  memcpy((char *)&v297[3] + 9, v296, 0x1A7uLL);
  *(void *)&v297[30] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
  *((void *)&v297[30] + 1) = 0;
  memcpy(v308, v297, sizeof(v308));
  specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v308, (uint64_t)&unk_1ED48E7E8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
  swift_release();
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v297);
  id v255 = [v290 v41[47]];
  unint64_t v256 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized BidirectionalCollection.dropLast(_:)(v96, v256);
  uint64_t v258 = v257;
  uint64_t v260 = v259;
  unint64_t v262 = v261;
  swift_bridgeObjectRelease();
  int64_t v263 = v262 >> 1;
  if (v260 == v262 >> 1)
  {
LABEL_260:
    swift_unknownObjectRelease();
    __break(1u);
    goto LABEL_261;
  }
  uint64_t v41 = (char **)v288;
  uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
  int v264 = v282;
  if (v263 <= v260) {
    goto LABEL_240;
  }
  uint64_t v221 = (char *)*(id *)(v258 + 8 * v263 - 8);
  swift_unknownObjectRelease();
  *(char **)((char *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x88)) = v221;
  if (v264)
  {
    memcpy(v292, v289, sizeof(v292));
    NavigationState.StackContent.animationSeed.getter(&v293);
    int v265 = v293;
    memcpy(v292, v287, sizeof(v292));
    NavigationState.StackContent.animationSeed.getter(&v291);
    BOOL v268 = v265 != -1 && v291 != -1 && v265 == v291;
  }
  else
  {
    BOOL v268 = 0;
  }
  uint64_t v269 = v290;

  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v269, v307, v286);
  id v270 = [(UINavigationController *)v269 transitionCoordinator];
  if (v270)
  {
    uint64_t v271 = v270;
    if (v268)
    {
      char v304 = 1;
      uint64_t v272 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v292[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
      v292[5] = v272;
      v292[0] = MEMORY[0x1E4F143A8];
      v292[1] = 1107296256;
      v292[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v292[3] = &block_descriptor_283;
      uint64_t v273 = _Block_copy(v292);
      swift_release();
      objc_msgSend(v271, sel_animateAlongsideTransition_completion_, 0, v273);
      _Block_release(v273);
    }

    goto LABEL_188;
  }
LABEL_189:

LABEL_190:
  if (v304 == 1)
  {
    *((unsigned char *)v41 + v281) = 0;
    *(char **)((char *)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x88)) = 0;
  }
  uint64_t v237 = v285;
  if (v285)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v41 + *(void *)((*v25 & (unint64_t)*v41) + 0x68), (uint64_t)v300);
    NavigationAuthority.controllerCache.getter();
    uint64_t v238 = v300;
LABEL_194:
    outlined destroy of NavigationAuthority((uint64_t)v238);
    specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v237);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v306);
}

uint64_t outlined copy of NavigationStrategy_Phone?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationDestinationModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

void closure #2 in PlatformItemListTransform.value.getter(char **a1, uint64_t a2, char *a3, char a4, unint64_t a5)
{
  uint64_t v205 = a1;
  unint64_t v208 = HIDWORD(a5);
  uint64_t v8 = 0;
  uint64_t v9 = type metadata accessor for PlatformItemList.Item();
  uint64_t v211 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9 - 8);
  MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v183 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (long long *)((char *)&v183 - v17);
  if (a4)
  {
    if (a4 != 1) {
      return;
    }
    uint64_t v13 = *v205;
    uint64_t v18 = (long long *)*((void *)*v205 + 2);
    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_151;
      }
      goto LABEL_5;
    }
    uint64_t v189 = v16;
    uint64_t v190 = v15;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v43 = Dictionary.init(minimumCapacity:)();
    unint64_t v223 = v43;
    uint64_t v44 = *(void *)(a2 + 16);
    if (v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = a2 + 32;
      uint64_t v191 = a2 + 32;
      uint64_t v192 = v44;
      while (1)
      {
        uint64_t v56 = v47 + 24 * v46;
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *(void **)(v56 + 8);
        int v59 = *(unsigned __int8 *)(v56 + 16);
        if (!v59)
        {
          uint64_t v200 = v46;
          id v55 = v57;
          swift_bridgeObjectRetain();
          goto LABEL_42;
        }
        if (v59 == 1) {
          break;
        }
LABEL_43:
        if (++v46 == v44) {
          goto LABEL_147;
        }
      }
      uint64_t v200 = v46;
      uint64_t v196 = *(void *)(v58 + 16);
      uint64_t v186 = v57;
      if (!v196)
      {
        swift_bridgeObjectRetain();
        char v173 = (char *)MEMORY[0x1E4FBC860];
        goto LABEL_135;
      }
      uint64_t v198 = v58 + 32;
      outlined copy of AccessibilityAttachment.Tree(v58, v57, 1);
      swift_bridgeObjectRetain();
      uint64_t v60 = 0;
      char v61 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v194 = v58;
LABEL_50:
      uint64_t v63 = v198 + 24 * v60;
      uint64_t v64 = *(void *)v63;
      unint64_t v65 = *(void **)(v63 + 8);
      int v66 = *(unsigned __int8 *)(v63 + 16);
      if (!v66)
      {
        uint64_t v195 = v60;
        char v203 = v61;
        id v69 = v65;
        uint64_t v70 = v64;
        swift_bridgeObjectRetain();
        goto LABEL_55;
      }
      if (v66 != 1) {
        goto LABEL_49;
      }
      uint64_t v195 = v60;
      char v203 = v61;
      uint64_t v67 = *(void *)(v64 + 16);
      uint64_t v184 = v64;
      int v185 = v65;
      uint64_t v197 = v67;
      if (!v67)
      {
        outlined copy of AccessibilityAttachment.Tree(v64, v65, 1);
        outlined copy of AccessibilityAttachment.Tree(v64, v65, 1);
        swift_bridgeObjectRetain();
        uint64_t v76 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v8 = *(void *)(MEMORY[0x1E4FBC860] + 16);
        if (!v8) {
          goto LABEL_132;
        }
        goto LABEL_60;
      }
      uint64_t v201 = v64 + 32;
      outlined copy of AccessibilityAttachment.Tree(v64, v65, 1);
      outlined copy of AccessibilityAttachment.Tree(v64, v65, 1);
      outlined copy of AccessibilityAttachment.Tree(v64, v65, 1);
      swift_bridgeObjectRetain();
      uint64_t v68 = 0;
      int v204 = (char *)MEMORY[0x1E4FBC860];
      while (2)
      {
        uint64_t v94 = v201 + 24 * v68;
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *(void **)(v94 + 8);
        int v97 = *(unsigned __int8 *)(v94 + 16);
        if (!v97)
        {
          uint64_t v199 = v68;
          uint64_t v101 = v95;
          id v102 = v95;
          uint64_t v103 = v96;
          swift_bridgeObjectRetain();
          goto LABEL_77;
        }
        if (v97 != 1) {
          goto LABEL_71;
        }
        uint64_t v199 = v68;
        uint64_t v98 = *(void *)(v96 + 16);
        char v187 = v95;
        uint64_t v188 = v96;
        if (v98)
        {
          id v207 = (char *)(v96 + 32);
          os_log_type_t v99 = v95;
          outlined copy of AccessibilityAttachment.Tree(v96, v95, 1);
          outlined copy of AccessibilityAttachment.Tree(v96, v99, 1);
          outlined copy of AccessibilityAttachment.Tree(v96, v99, 1);
          swift_bridgeObjectRetain();
          uint64_t v100 = 0;
          char v209 = (char *)MEMORY[0x1E4FBC860];
          uint64_t v193 = v98;
          while (2)
          {
            uint64_t v131 = &v207[24 * v100];
            uint64_t v133 = *(void *)v131;
            uint64_t v132 = (void *)*((void *)v131 + 1);
            int v134 = v131[16];
            if (!v134)
            {
              unint64_t v147 = (unint64_t)v132;
              id v148 = v132;
              swift_bridgeObjectRetain();
              goto LABEL_116;
            }
            if (v134 != 1) {
              goto LABEL_93;
            }
            uint64_t v135 = *(void *)(v133 + 16);
            uint64_t v202 = v133;
            uint64_t v206 = (long long *)v132;
            unsigned int v136 = v132;
            if (v135)
            {
              outlined copy of AccessibilityAttachment.Tree(v133, v132, 1);
              outlined copy of AccessibilityAttachment.Tree(v133, v136, 1);
              outlined copy of AccessibilityAttachment.Tree(v133, v136, 1);
              swift_bridgeObjectRetain();
              uint64_t v137 = (unsigned char *)(v133 + 48);
              char v138 = (char *)MEMORY[0x1E4FBC860];
              while (1)
              {
                uint64_t v140 = *((void *)v137 - 2);
                uint64_t v141 = (void *)*((void *)v137 - 1);
                if (!*v137) {
                  break;
                }
                if (*v137 == 1)
                {
                  outlined copy of AccessibilityAttachment.Tree(*((void *)v137 - 2), *((void **)v137 - 1), 1);
                  outlined copy of AccessibilityAttachment.Tree(v140, v141, 1);
                  uint64_t v142 = swift_bridgeObjectRetain();
                  uint64_t v143 = specialized Sequence.compactMap<A>(_:)(v142);
                  static AccessibilityAttachment.combine(_:)(v143, (uint64_t *)&v212);
                  swift_bridgeObjectRelease();
                  outlined consume of AccessibilityAttachment.Tree(v140, v141, 1);
                  outlined consume of AccessibilityAttachment.Tree(v140, v141, 1);
                  swift_bridgeObjectRelease();
                  uint64_t v141 = (void *)*((void *)&v212 + 1);
                  uint64_t v140 = v212;
LABEL_104:
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    char v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v138 + 2) + 1, 1, v138);
                  }
                  unint64_t v146 = *((void *)v138 + 2);
                  unint64_t v145 = *((void *)v138 + 3);
                  if (v146 >= v145 >> 1) {
                    char v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v145 > 1), v146 + 1, 1, v138);
                  }
                  *((void *)v138 + 2) = v146 + 1;
                  uint64_t v139 = &v138[16 * v146];
                  *((void *)v139 + 4) = v140;
                  *((void *)v139 + 5) = v141;
                }
                v137 += 24;
                if (!--v135)
                {
                  uint64_t v133 = v202;
                  outlined consume of AccessibilityAttachment.Tree(v202, v206, 1);
                  uint64_t v98 = v193;
                  goto LABEL_111;
                }
              }
              id v144 = v141;
              swift_bridgeObjectRetain();
              goto LABEL_104;
            }
            outlined copy of AccessibilityAttachment.Tree(v133, v132, 1);
            outlined copy of AccessibilityAttachment.Tree(v133, v136, 1);
            swift_bridgeObjectRetain();
            char v138 = (char *)MEMORY[0x1E4FBC860];
LABEL_111:
            uint64_t v149 = *((void *)v138 + 2);
            uint64_t v150 = v149 - 1;
            if (v149 == 1)
            {
              uint64_t v152 = v133;
              uint64_t v133 = *((void *)v138 + 4);
              unint64_t v153 = (void *)*((void *)v138 + 5);
              *(void *)&long long v214 = v133;
              id v154 = v153;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              char v155 = v206;
              outlined consume of AccessibilityAttachment.Tree(v152, v206, 1);
              outlined consume of AccessibilityAttachment.Tree(v152, v155, 1);
              outlined consume of AccessibilityAttachment.Tree(v152, v155, 1);
              unint64_t v147 = (unint64_t)v153;
              goto LABEL_115;
            }
            if (!v149)
            {
              AccessibilityAttachment.init()();
              swift_bridgeObjectRelease();
              uint64_t v151 = v206;
              outlined consume of AccessibilityAttachment.Tree(v133, v206, 1);
              outlined consume of AccessibilityAttachment.Tree(v133, v151, 1);
              outlined consume of AccessibilityAttachment.Tree(v133, v151, 1);
              unint64_t v147 = *((void *)&v214 + 1);
              uint64_t v133 = v214;
LABEL_115:
              uint64_t v58 = v194;
              goto LABEL_116;
            }
            uint64_t v210 = v45;
            uint64_t v158 = &v138[16 * v150];
            unint64_t v160 = *((void *)v158 + 4);
            char v159 = (void *)*((void *)v158 + 5);
            *(void *)&long long v212 = v160;
            *((void *)&v212 + 1) = v159;
            id v161 = v159;
            swift_bridgeObjectRetain();
            uint64_t v43 = swift_bridgeObjectRetain();
            uint64_t v162 = (void **)&v138[16 * v149 + 8];
            uint64_t v163 = v149 - 2;
            do
            {
              if (v163 >= v150)
              {
                __break(1u);
                goto LABEL_138;
              }
              unint64_t v165 = (unint64_t)*(v162 - 1);
              unsigned int v164 = *v162;
              v222.n128_u64[0] = v165;
              id v166 = v164;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)((uint64_t *)&v222);
              __n128 v222 = (__n128)v212;
              unsigned int v167 = (void *)AccessibilityAttachment.platformElement.getter();

              if (!v167)
              {
                v222.n128_u64[0] = v165;
                v222.n128_u64[1] = (unint64_t)v164;
                if (AccessibilityAttachment.platformElement.getter()) {
                  AccessibilityAttachment.platformElement.setter();
                }
              }

              uint64_t v43 = swift_bridgeObjectRelease();
              v162 -= 2;
              --v163;
            }
            while (v163 != -1);
            swift_bridgeObjectRelease_n();
            uint64_t v168 = v202;
            char v169 = v206;
            outlined consume of AccessibilityAttachment.Tree(v202, v206, 1);
            outlined consume of AccessibilityAttachment.Tree(v168, v169, 1);
            outlined consume of AccessibilityAttachment.Tree(v168, v169, 1);
            unint64_t v147 = *((void *)&v212 + 1);
            uint64_t v133 = v212;
            uint64_t v45 = v210;
            uint64_t v98 = v193;
            uint64_t v58 = v194;
LABEL_116:
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v129 = v209;
            }
            else {
              unint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v209 + 2) + 1, 1, v209);
            }
            unint64_t v157 = *((void *)v129 + 2);
            unint64_t v156 = *((void *)v129 + 3);
            if (v157 >= v156 >> 1) {
              unint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v156 > 1), v157 + 1, 1, v129);
            }
            *((void *)v129 + 2) = v157 + 1;
            char v209 = v129;
            uint64_t v130 = &v129[16 * v157];
            *((void *)v130 + 4) = v133;
            *((void *)v130 + 5) = v147;
LABEL_93:
            if (++v100 != v98) {
              continue;
            }
            break;
          }
          outlined consume of AccessibilityAttachment.Tree(v188, v187, 1);
          unint64_t v65 = v185;
          uint64_t v107 = v209;
          uint64_t v108 = *((void *)v209 + 2);
          if (!v108)
          {
LABEL_129:
            AccessibilityAttachment.init()();
            swift_bridgeObjectRelease();
            char v171 = v187;
            uint64_t v170 = v188;
            outlined consume of AccessibilityAttachment.Tree(v188, v187, 1);
            outlined consume of AccessibilityAttachment.Tree(v170, v171, 1);
            outlined consume of AccessibilityAttachment.Tree(v170, v171, 1);
            uint64_t v101 = (void *)*((void *)&v219[0] + 1);
            uint64_t v103 = *(void *)&v219[0];
LABEL_77:
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v92 = v204;
            }
            else {
              uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v204 + 2) + 1, 1, v204);
            }
            unint64_t v105 = *((void *)v92 + 2);
            unint64_t v104 = *((void *)v92 + 3);
            if (v105 >= v104 >> 1) {
              uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v104 > 1), v105 + 1, 1, v92);
            }
            *((void *)v92 + 2) = v105 + 1;
            int v204 = v92;
            char v93 = &v92[16 * v105];
            *((void *)v93 + 4) = v103;
            *((void *)v93 + 5) = v101;
            uint64_t v68 = v199;
LABEL_71:
            if (++v68 != v197) {
              continue;
            }
            outlined consume of AccessibilityAttachment.Tree(v184, v65, 1);
            uint64_t v76 = v204;
            uint64_t v8 = *((void *)v204 + 2);
            if (!v8)
            {
LABEL_132:
              AccessibilityAttachment.init()();
              swift_bridgeObjectRelease();
              uint64_t v172 = v184;
              outlined consume of AccessibilityAttachment.Tree(v184, v65, 1);
              outlined consume of AccessibilityAttachment.Tree(v172, v65, 1);
              outlined consume of AccessibilityAttachment.Tree(v172, v65, 1);
              uint64_t v70 = v220;
              unint64_t v65 = v221;
LABEL_55:
              if (swift_isUniquelyReferenced_nonNull_native()) {
                char v61 = v203;
              }
              else {
                char v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v203 + 2) + 1, 1, v203);
              }
              unint64_t v72 = *((void *)v61 + 2);
              unint64_t v71 = *((void *)v61 + 3);
              uint64_t v60 = v195;
              if (v72 >= v71 >> 1)
              {
                BOOL v73 = v65;
                uint64_t v74 = v195;
                int v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v61);
                uint64_t v60 = v74;
                unint64_t v65 = v73;
                char v61 = v75;
              }
              *((void *)v61 + 2) = v72 + 1;
              uint64_t v62 = &v61[16 * v72];
              *((void *)v62 + 4) = v70;
              *((void *)v62 + 5) = v65;
LABEL_49:
              if (++v60 != v196) {
                goto LABEL_50;
              }
              uint64_t v174 = v61;
              outlined consume of AccessibilityAttachment.Tree(v58, v186, 1);
              char v173 = v174;
LABEL_135:
              static AccessibilityAttachment.combine(_:)(v173, &v220);
              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree(v58, v186, 1);
              uint64_t v58 = v220;
              id v55 = v221;
LABEL_42:
              uint64_t v220 = v58;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)(&v220);

              swift_bridgeObjectRelease_n();
              uint64_t v47 = v191;
              uint64_t v44 = v192;
              uint64_t v46 = v200;
              goto LABEL_43;
            }
LABEL_60:
            uint64_t v77 = v8 - 1;
            if (v8 == 1)
            {
              uint64_t v79 = (void *)*((void *)v76 + 5);
              uint64_t v220 = *((void *)v76 + 4);
              uint64_t v78 = v220;
              id v80 = v79;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v81 = v65;
              uint64_t v82 = v184;
              outlined consume of AccessibilityAttachment.Tree(v184, v81, 1);
              outlined consume of AccessibilityAttachment.Tree(v82, v81, 1);
              outlined consume of AccessibilityAttachment.Tree(v82, v81, 1);
              uint64_t v70 = v78;
              unint64_t v65 = v79;
              uint64_t v58 = v194;
              goto LABEL_55;
            }
            uint64_t v83 = v45;
            uint64_t v84 = v76;
            uint64_t v85 = &v76[16 * v77];
            uint64_t v18 = (long long *)*((void *)v85 + 4);
            uint64_t v86 = (void *)*((void *)v85 + 5);
            *(void *)&v219[0] = v18;
            *((void *)&v219[0] + 1) = v86;
            id v87 = v86;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            a2 = (uint64_t)&v84[16 * v8 + 8];
            uint64_t v13 = (char *)(v8 - 2);
            while ((uint64_t)v13 < v77)
            {
              uint64_t v88 = *(void *)(a2 - 8);
              uint64_t v8 = *(void *)a2;
              *(void *)&long long v214 = v88;
              id v89 = (id)v8;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)((uint64_t *)&v214);
              long long v214 = v219[0];
              uint64_t v18 = (long long *)AccessibilityAttachment.platformElement.getter();

              if (!v18)
              {
                *(void *)&long long v214 = v88;
                *((void *)&v214 + 1) = v8;
                uint64_t v18 = &v214;
                if (AccessibilityAttachment.platformElement.getter())
                {
                  uint64_t v18 = v219;
                  AccessibilityAttachment.platformElement.setter();
                }
              }

              swift_bridgeObjectRelease();
              a2 -= 16;
              if (--v13 == (char *)-1)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v90 = v184;
                char v91 = v185;
                outlined consume of AccessibilityAttachment.Tree(v184, v185, 1);
                outlined consume of AccessibilityAttachment.Tree(v90, v91, 1);
                outlined consume of AccessibilityAttachment.Tree(v90, v91, 1);
                unint64_t v65 = (void *)*((void *)&v219[0] + 1);
                uint64_t v70 = *(void *)&v219[0];
                uint64_t v45 = v83;
                uint64_t v58 = v194;
                goto LABEL_55;
              }
            }
            __break(1u);
            while (2)
            {
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              uint64_t v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
LABEL_5:
              uint64_t v19 = 0;
              uint64_t v20 = *(long long **)(a2 + 16);
              uint64_t v21 = (unsigned char *)(a2 + 48);
              char v209 = (char *)v18;
              uint64_t v206 = v20;
              id v207 = v13;
LABEL_9:
              if ((unint64_t)v19 >= *((void *)v13 + 2)) {
                continue;
              }
              break;
            }
            if (v19 < v20)
            {
              a2 = *(unsigned __int8 *)(v211 + 80);
              uint64_t v25 = *(void *)(v211 + 72);
              uint64_t v26 = *((void *)v21 - 2);
              if (*v21)
              {
                if (*v21 == 1)
                {
                  id v27 = (void *)*((void *)v21 - 1);
                  uint64_t v28 = swift_bridgeObjectRetain();
                  id v29 = specialized Sequence.compactMap<A>(_:)(v28);
                  static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v29, 1, &v220);
                  swift_bridgeObjectRelease();
                  outlined consume of AccessibilityAttachment.Tree(v26, v27, 1);
                  uint64_t v26 = v220;
                  goto LABEL_15;
                }
              }
              else
              {
                swift_bridgeObjectRetain();
LABEL_15:
                a2 = (uint64_t)&v13[((a2 + 32) & ~a2) + v25 * (void)v19];
                uint64_t v30 = *(void *)(a2 + 528);
                if (v30)
                {
                  swift_bridgeObjectRetain();
                }
                else
                {
                  type metadata accessor for AnyAccessibilityPropertiesEntry();
                  uint64_t v30 = Dictionary.init(minimumCapacity:)();
                }
                uint64_t v210 = v8;
                *(void *)&v219[0] = v30;
                uint64_t v220 = v26;
                swift_bridgeObjectRetain();
                AccessibilityProperties.merge(with:)((uint64_t *)v219);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v31 = v220;
                uint64_t v32 = *(void *)(a2 + 528);
                if (v32)
                {
                  uint64_t v22 = *(void *)(a2 + 536);
                  uint64_t v23 = *(void *)(a2 + 544);
                  swift_retain();
                  uint64_t v24 = v23;
                }
                else
                {
                  uint64_t Value = (uint64_t *)AGGraphGetValue();
                  uint64_t v22 = *Value;
                  uint64_t v24 = Value[1];
                  swift_retain();
                }
                swift_retain();
                outlined consume of PlatformItemList.Item.Accessibility?(v32);
                *(void *)(a2 + 528) = v31;
                *(void *)(a2 + 536) = v22;
                *(void *)(a2 + 544) = v24;
                uint64_t v18 = (long long *)v209;
                uint64_t v8 = v210;
                uint64_t v20 = v206;
                uint64_t v13 = v207;
              }
            }
            uint64_t v19 = (long long *)((char *)v19 + 1);
            v21 += 24;
            if (v18 == v19)
            {
              *uint64_t v205 = v13;
              return;
            }
            goto LABEL_9;
          }
        }
        else
        {
          unsigned int v106 = v95;
          outlined copy of AccessibilityAttachment.Tree(v96, v95, 1);
          outlined copy of AccessibilityAttachment.Tree(v96, v106, 1);
          swift_bridgeObjectRetain();
          uint64_t v107 = (char *)MEMORY[0x1E4FBC860];
          uint64_t v108 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          if (!v108) {
            goto LABEL_129;
          }
        }
        break;
      }
      uint64_t v109 = v108 - 1;
      if (v108 == 1)
      {
        char v111 = (void *)*((void *)v107 + 5);
        *(void *)&v219[0] = *((void *)v107 + 4);
        uint64_t v110 = *(void *)&v219[0];
        id v112 = v111;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v114 = v187;
        uint64_t v113 = v188;
        outlined consume of AccessibilityAttachment.Tree(v188, v187, 1);
        outlined consume of AccessibilityAttachment.Tree(v113, v114, 1);
        outlined consume of AccessibilityAttachment.Tree(v113, v114, 1);
        uint64_t v103 = v110;
        uint64_t v101 = v111;
        unint64_t v65 = v185;
        goto LABEL_77;
      }
      uint64_t v115 = v45;
      unsigned int v116 = v107;
      uint64_t v117 = &v107[16 * v109];
      uint64_t v119 = *((void *)v117 + 4);
      uint64_t v118 = (void *)*((void *)v117 + 5);
      *(void *)&long long v214 = v119;
      *((void *)&v214 + 1) = v118;
      id v120 = v118;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v121 = (void **)&v116[16 * v108 + 8];
      uint64_t v122 = v108 - 2;
      while (v122 < v109)
      {
        unint64_t v124 = (unint64_t)*(v121 - 1);
        uint64_t v123 = *v121;
        *(void *)&long long v212 = v124;
        id v125 = v123;
        swift_bridgeObjectRetain();
        AccessibilityProperties.merge(with:)((uint64_t *)&v212);
        long long v212 = v214;
        unint64_t v126 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v126)
        {
          *(void *)&long long v212 = v124;
          *((void *)&v212 + 1) = v123;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }

        swift_bridgeObjectRelease();
        v121 -= 2;
        if (--v122 == -1)
        {
          swift_bridgeObjectRelease_n();
          id v128 = v187;
          uint64_t v127 = v188;
          outlined consume of AccessibilityAttachment.Tree(v188, v187, 1);
          outlined consume of AccessibilityAttachment.Tree(v127, v128, 1);
          outlined consume of AccessibilityAttachment.Tree(v127, v128, 1);
          uint64_t v101 = (void *)*((void *)&v214 + 1);
          uint64_t v103 = v214;
          uint64_t v45 = v115;
          uint64_t v58 = v194;
          unint64_t v65 = v185;
          goto LABEL_77;
        }
      }
      __break(1u);
LABEL_147:
      unint64_t v175 = v223;
    }
    else
    {
LABEL_138:
      unint64_t v175 = v43;
    }
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v220);
    outlined init with take of Image.Resolved?((uint64_t)&v220, (uint64_t)v219);
    long long v214 = xmmword_18834BB90;
    long long v215 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    char v218 = 0;
    uint64_t v176 = (unint64_t *)AGGraphGetValue();
    unint64_t v177 = *v176;
    unint64_t v178 = v176[1];
    *(void *)&long long v212 = v175;
    *((void *)&v212 + 1) = v177;
    unint64_t v213 = v178;
    uint64_t v179 = v190;
    PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v219, &v214, (__n128 *)&v212, 0, 0, v190);
    outlined init with copy of AccessibilityNodeAttachment(v179, v189, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v180 = *v205;
    swift_retain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v180 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v180 + 2) + 1, 1, v180);
    }
    unint64_t v182 = *((void *)v180 + 2);
    unint64_t v181 = *((void *)v180 + 3);
    if (v182 >= v181 >> 1) {
      uint64_t v180 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v181 > 1, v182 + 1, 1, v180);
    }
    *((void *)v180 + 2) = v182 + 1;
    outlined init with take of AccessibilityNodeAttachment(v189, (uint64_t)&v180[((*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80))+ *(void *)(v211 + 72) * v182], (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    *uint64_t v205 = v180;
    uint64_t v54 = v190;
    goto LABEL_144;
  }
  uint64_t v34 = *v205;
  char v209 = (char *)*((void *)*v205 + 2);
  uint64_t v210 = a2;
  if (!v209)
  {
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v220);
    outlined init with take of Image.Resolved?((uint64_t)&v220, (uint64_t)v219);
    long long v214 = xmmword_18834BB90;
    long long v215 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    char v218 = 0;
    uint64_t v48 = (unint64_t *)AGGraphGetValue();
    unint64_t v49 = *v48;
    unint64_t v50 = v48[1];
    *(void *)&long long v212 = v210;
    *((void *)&v212 + 1) = v49;
    unint64_t v213 = v50;
    PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v219, &v214, (__n128 *)&v212, 0, 0, (uint64_t)v18);
    outlined init with copy of AccessibilityNodeAttachment((uint64_t)v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    outlined copy of AccessibilityAttachment.Tree(v210, a3, 0);
    uint64_t v51 = v210;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34);
    }
    unint64_t v53 = *((void *)v34 + 2);
    unint64_t v52 = *((void *)v34 + 3);
    if (v53 >= v52 >> 1) {
      uint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v53 + 1;
    outlined init with take of AccessibilityNodeAttachment((uint64_t)v13, (uint64_t)&v34[((*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80))+ *(void *)(v211 + 72) * v53], (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    outlined consume of AccessibilityAttachment.Tree(v51, a3, 0);
    *uint64_t v205 = v34;
    uint64_t v54 = (uint64_t)v18;
LABEL_144:
    outlined destroy of AccessibilityNodeAttachment?(v54, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    return;
  }
  uint64_t v35 = a3;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v207 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
  }
  unint64_t v37 = 0;
  do
  {
    if (v37 >= *((void *)v34 + 2)) {
      goto LABEL_150;
    }
    uint64_t v40 = &v34[((*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80))
             + *(void *)(v211 + 72) * v37];
    uint64_t v41 = *((void *)v40 + 66);
    if (v41)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for AnyAccessibilityPropertiesEntry();
      swift_bridgeObjectRetain();
      uint64_t v41 = Dictionary.init(minimumCapacity:)();
    }
    *(void *)&v219[0] = v41;
    uint64_t v220 = a2;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)((uint64_t *)v219);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v220;
    uint64_t v18 = (long long *)*((void *)v40 + 66);
    if (v18)
    {
      uint64_t v38 = *((void *)v40 + 67);
      uint64_t v39 = (char *)*((void *)v40 + 68);
      swift_retain();
      uint64_t v13 = v39;
    }
    else
    {
      uint64_t v42 = (uint64_t *)AGGraphGetValue();
      uint64_t v38 = *v42;
      uint64_t v13 = (char *)v42[1];
      swift_retain();
    }
    ++v37;
    swift_retain();
    outlined consume of PlatformItemList.Item.Accessibility?((uint64_t)v18);
    *((void *)v40 + 66) = v8;
    *((void *)v40 + 67) = v38;
    *((void *)v40 + 68) = v13;
    a2 = v210;
  }
  while (v209 != (char *)v37);
  outlined consume of AccessibilityAttachment.Tree(v210, v207, 0);
  *uint64_t v205 = v34;
}