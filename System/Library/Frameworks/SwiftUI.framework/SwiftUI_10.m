void specialized AccessibilityBridgedPlatformView.updateValue()()
{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  id *OutputValue;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
  Value = AGGraphGetValue();
  v1 = *(void *)(Value + 64);
  v2 = *(unsigned __int8 *)(Value + 72);
  v3 = *(void **)(Value + 80);
  v16 = *(void **)(Value + 88);
  v4 = *(void **)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    swift_retain();
    swift_retain();
    v9 = v4;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<HoverEffect?>.Content(v1, v2);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v10 = v3;
    v11 = v16;
    v18 = v9;
    v19 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<HoverEffect?>.Content(v1, v2);
    v6 = v3;
    v7 = v16;
    v8 = v4;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v12 = v4;
  v17 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v20 = v13;
  v21 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  v18 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v18, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  v15 = *OutputValue;
  v18 = v15;
  v19 = v17;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of Environment<AnyShapeStyle?>.Content(v1, v2);
}

{
  uint64_t Value;
  char v1;
  char v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
  Value = AGGraphGetValue();
  v2 = v1;
  v3 = *(void **)(Value + 8);
  v4 = *(void **)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  v5 = *(id *)Value;
  v6 = v3;
  swift_retain();
  v7 = objc_msgSend(v4, sel_view);
  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v7;
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v14 = v8;
    v15 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v8;
  v13 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v16 = v10;
  v17 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  v14 = v8;
  specialized Dictionary.subscript.setter((uint64_t)&v14, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  v12 = *OutputValue;
  v14 = v12;
  v15 = v13;
  AGGraphSetOutputValue();
  swift_release();

  swift_bridgeObjectRelease();
}

{
  void *v0;
  void *v1;
  char v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id *OutputValue;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
  v0 = *(void **)(AGGraphGetValue() + 8);
  v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78));
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v5 = v1;
    swift_bridgeObjectRetain();
    v6 = v0;
    v12 = v5;
    v13 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = v0;
    v4 = v1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v7 = v1;
  v11 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v14 = v8;
  v15 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  v12 = v1;
  specialized Dictionary.subscript.setter((uint64_t)&v12, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  v10 = *OutputValue;
  v12 = v10;
  v13 = v11;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id *OutputValue;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
  Value = AGGraphGetValue();
  v1 = *(void *)Value;
  v2 = *(unsigned char *)(Value + 8);
  v3 = *(void **)(Value + 16);
  v4 = *(void **)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v8 = v4;
    outlined copy of Environment<Bool>.Content(v1, v2);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v9 = v3;
    v15 = v8;
    v16 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined copy of Environment<Bool>.Content(v1, v2);
    v6 = v3;
    v7 = v4;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v10 = v4;
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v17 = v11;
  v18 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  v15 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  v13 = *OutputValue;
  v15 = v13;
  v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(v1, v2);
}

{
  uint64_t Value;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id *OutputValue;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
  Value = AGGraphGetValue();
  v1 = *(void **)(Value + 16);
  v2 = *(void **)(Value + 24);
  v3 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78));
  if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v8 = v3;
    swift_bridgeObjectRetain();
    v9 = v1;
    v10 = v2;
    v16 = v8;
    v17 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v5 = v1;
    v6 = v2;
    v7 = v3;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v11 = v3;
  v15 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v18 = v12;
  v19 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  v16 = v3;
  specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  v14 = *OutputValue;
  v16 = v14;
  v17 = v15;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  char v1;
  char v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
  Value = AGGraphGetValue();
  v2 = v1;
  v3 = *(void **)(Value + 8);
  v4 = *(void **)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  v5 = *(id *)Value;
  v6 = v3;
  v7 = objc_msgSend(v4, sel_view);
  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v7;
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v14 = v8;
    v15 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v8;
  v13 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v16 = v10;
  v17 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  v14 = v8;
  specialized Dictionary.subscript.setter((uint64_t)&v14, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  v12 = *OutputValue;
  v14 = v12;
  v15 = v13;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
}

uint64_t specialized PlatformItemsTransform.updateValue()()
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    int v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    v4 = (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v7 = v6;
    uint64_t v8 = *(void *)Value;
    unsigned int v9 = *(_DWORD *)(Value + 8);
    uint64_t v10 = swift_bridgeObjectRetain();
    if (v10) {
      int v1 = v7 & 1;
    }
    else {
      int v1 = 0;
    }
    if (v10) {
      uint64_t v2 = v9;
    }
    else {
      uint64_t v2 = 0;
    }
    if (v10) {
      uint64_t v3 = v8;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v10) {
      v4 = (char *)v10;
    }
    else {
      v4 = (char *)MEMORY[0x1E4FBC860];
    }
  }
  v11 = (uint64_t *)AGGraphGetValue();
  char v13 = v12;
  uint64_t v14 = *v11;
  unint64_t v15 = v11[1];
  if (AGGraphGetOutputValue()) {
    BOOL v16 = (v13 & 1) == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16 || v1 != 0)
  {
    uint64_t v18 = *((void *)v4 + 2);
    swift_bridgeObjectRetain();
    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_61;
      }
      while (1)
      {
        unint64_t v19 = 0;
        uint64_t v20 = 32;
        while (v19 < *((void *)v4 + 2))
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[v20], (uint64_t)&v33);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v36 = v14;
          unint64_t v37 = v15;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          }
          if (v19 >= *((void *)v4 + 2)) {
            goto LABEL_58;
          }
          ++v19;
          outlined assign with copy of PlatformItem((uint64_t)&v33, (uint64_t)&v4[v20]);
          outlined destroy of PlatformItem((uint64_t)&v33);
          v20 += 336;
          if (v18 == v19) {
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
    }
LABEL_34:
    int v22 = *(_DWORD *)(v0 + 8);
    uint64_t v23 = (v22 + 1);
    BOOL v24 = v22 == -1;
    *(_DWORD *)(v0 + 8) = v23;
    if (v2 == -1 || v24)
    {
      LODWORD(v23) = v2;
      uint64_t v2 = *((void *)v4 + 2);
      if (!v2)
      {
LABEL_56:
        uint64_t v33 = v3;
        int v34 = v23;
        v35 = v4;
        AGGraphSetOutputValue();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (v2 && v23 != -1)
      {
        unint64_t v25 = (v23 | (v2 << 32)) + ~(v23 << 32);
        unint64_t v26 = 9
            * (((v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13)) ^ (((v25 ^ (v25 >> 22))
                                                                      + ~((v25 ^ (v25 >> 22)) << 13)) >> 8));
        unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        LODWORD(v23) = (v27 >> 31) ^ v27;
      }
      uint64_t v2 = *((void *)v4 + 2);
      if (!v2) {
        goto LABEL_56;
      }
    }
    unint64_t v15 = 0;
    uint64_t v18 = 32;
    while (v15 < *((void *)v4 + 2))
    {
      uint64_t v28 = *(unsigned int *)(v0 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v18], (uint64_t)&v33);
      if (v35 != -1 && v28 != 0)
      {
        if (v35 && v28 != -1)
        {
          unint64_t v30 = (v28 | ((unint64_t)v35 << 32)) + ~(v28 << 32);
          unint64_t v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
          unint64_t v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
          LODWORD(v28) = ((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~(v32 << 27));
        }
        LODWORD(v35) = v28;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
      if (v15 >= *((void *)v4 + 2)) {
        goto LABEL_60;
      }
      ++v15;
      outlined assign with copy of PlatformItem((uint64_t)&v33, (uint64_t)&v4[v18]);
      outlined destroy of PlatformItem((uint64_t)&v33);
      v18 += 336;
      if (v2 == v15) {
        goto LABEL_56;
      }
    }
    goto LABEL_59;
  }

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  BOOL v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  int v34;
  char *v35;
  unsigned char v36[96];
  unsigned char v37[64];
  uint64_t v38;

  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    int v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    v4 = (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v7 = v6;
    uint64_t v8 = *(void *)Value;
    unsigned int v9 = *(_DWORD *)(Value + 8);
    uint64_t v10 = swift_bridgeObjectRetain();
    if (v10) {
      int v1 = v7 & 1;
    }
    else {
      int v1 = 0;
    }
    if (v10) {
      uint64_t v2 = v9;
    }
    else {
      uint64_t v2 = 0;
    }
    if (v10) {
      uint64_t v3 = v8;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v10) {
      v4 = (char *)v10;
    }
    else {
      v4 = (char *)MEMORY[0x1E4FBC860];
    }
  }
  v11 = AGGraphGetValue();
  char v13 = v12;
  outlined init with copy of PlatformButtonActionTransform(v11, (uint64_t)v37);
  if (AGGraphGetOutputValue()) {
    uint64_t v14 = (v13 & 1) == 0;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v14 || v1 != 0)
  {
    BOOL v16 = *((void *)v4 + 2);
    if (v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_58;
      }
      while (1)
      {
        v17 = 0;
        uint64_t v18 = 32;
        while (v17 < *((void *)v4 + 2))
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[v18], (uint64_t)&v33);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, MEMORY[0x1E4FBB718]);
          outlined init with copy of PlatformItem.SelectionContent((uint64_t)v37, (uint64_t)v36);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          }
          if (v17 >= *((void *)v4 + 2)) {
            goto LABEL_55;
          }
          ++v17;
          outlined assign with copy of PlatformItem((uint64_t)&v33, (uint64_t)&v4[v18]);
          outlined destroy of PlatformItem((uint64_t)&v33);
          v18 += 336;
          if (v16 == v17) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
    }
LABEL_30:
    unint64_t v19 = *(_DWORD *)(v0 + 8);
    uint64_t v20 = (v19 + 1);
    v21 = v19 == -1;
    *(_DWORD *)(v0 + 8) = v20;
    if (v2 == -1 || v21)
    {
      LODWORD(v20) = v2;
      unint64_t v25 = *((void *)v4 + 2);
      if (!v25)
      {
LABEL_52:
        uint64_t v33 = v3;
        int v34 = v20;
        v35 = v4;
        AGGraphSetOutputValue();
        goto LABEL_53;
      }
    }
    else
    {
      if (v2 && v20 != -1)
      {
        int v22 = (v20 | (v2 << 32)) + ~(v20 << 32);
        uint64_t v23 = 9
            * (((v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13)) ^ (((v22 ^ (v22 >> 22))
                                                                      + ~((v22 ^ (v22 >> 22)) << 13)) >> 8));
        BOOL v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
        LODWORD(v20) = (v24 >> 31) ^ v24;
      }
      unint64_t v25 = *((void *)v4 + 2);
      if (!v25) {
        goto LABEL_52;
      }
    }
    unint64_t v26 = 0;
    uint64_t v2 = 32;
    BOOL v16 = -1;
    while (v26 < *((void *)v4 + 2))
    {
      unint64_t v27 = *(unsigned int *)(v0 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v2], (uint64_t)&v33);
      if (v35 != -1 && v27 != 0)
      {
        if (v35 && v27 != -1)
        {
          v29 = (v27 | ((unint64_t)v35 << 32)) + ~(v27 << 32);
          unint64_t v30 = (v29 ^ (v29 >> 22)) + ~((v29 ^ (v29 >> 22)) << 13);
          unint64_t v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
          LODWORD(v27) = ((v31 + ~(v31 << 27)) >> 31) ^ (v31 + ~(v31 << 27));
        }
        LODWORD(v35) = v27;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
      if (v26 >= *((void *)v4 + 2)) {
        goto LABEL_57;
      }
      ++v26;
      outlined assign with copy of PlatformItem((uint64_t)&v33, (uint64_t)&v4[v2]);
      outlined destroy of PlatformItem((uint64_t)&v33);
      v2 += 336;
      if (v25 == v26) {
        goto LABEL_52;
      }
    }
    goto LABEL_56;
  }
LABEL_53:
  outlined destroy of PlatformButtonActionTransform((uint64_t)v37);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  BOOL v12;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  int v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned char v36[216];
  uint64_t v37[27];
  unsigned char v38[216];
  uint64_t v39[27];
  unsigned char v40[216];
  uint64_t v41[27];
  char *v42;
  int v43;
  char *v44;
  id v45[2];
  id v46;
  unsigned char v47[216];
  uint64_t v48[29];
  uint64_t vars8;

  v48[27] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    int v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    v4 = (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v7 = v6;
    uint64_t v8 = *(char **)Value;
    LODWORD(v2) = *(_DWORD *)(Value + 8);
    unsigned int v9 = swift_bridgeObjectRetain();
    if (v9) {
      int v1 = v7 & 1;
    }
    else {
      int v1 = 0;
    }
    if (v9) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = 0;
    }
    if (v9) {
      uint64_t v3 = v8;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v9) {
      v4 = (char *)v9;
    }
    else {
      v4 = (char *)MEMORY[0x1E4FBC860];
    }
  }
  AGGraphGetValue();
  v11 = v10;
  if (AGGraphGetOutputValue()) {
    char v12 = (v11 & 1) == 0;
  }
  else {
    char v12 = 0;
  }
  if (!v12 || v1 != 0)
  {
    uint64_t v14 = (uint64_t *)*((void *)v4 + 2);
    if (!v14) {
      goto LABEL_44;
    }
    int v34 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_71;
    }
    while (1)
    {
      v35 = v3;
      if (*((void *)v4 + 2))
      {
        unint64_t v15 = 0;
        uint64_t v3 = (char *)v14 - 1;
        BOOL v16 = 32;
        uint64_t v14 = &lazy cache variable for type metadata for PlatformItem.PrimaryContent?;
        while (1)
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[v16], (uint64_t)&v42);
          outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v45, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v48) != 1)
          {
            v17 = v45[0];
            if (v45[0])
            {
              outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v45, (uint64_t)v40, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
              outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v40, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
              if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v41) == 1 || !v46)
              {
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v45, (uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v38, (uint64_t)v39, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v39) != 1)
                {
                  uint64_t v18 = v46;
                  unint64_t v19 = v17;

                  v46 = v17;
                }
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v45, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v36, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v37) != 1)
                {

                  v45[0] = 0;
                }
              }
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          }
          if ((unint64_t)v15 >= *((void *)v4 + 2)) {
            goto LABEL_68;
          }
          outlined assign with copy of PlatformItem((uint64_t)&v42, (uint64_t)&v4[v16]);
          outlined destroy of PlatformItem((uint64_t)&v42);
          if (v3 == v15) {
            break;
          }
          ++v15;
          v16 += 336;
          if ((unint64_t)v15 >= *((void *)v4 + 2)) {
            goto LABEL_67;
          }
        }
        uint64_t v2 = v34;
        uint64_t v3 = v35;
LABEL_44:
        v21 = *(_DWORD *)(v0 + 8);
        int v22 = (v21 + 1);
        uint64_t v23 = v21 == -1;
        *(_DWORD *)(v0 + 8) = v22;
        if (v2 == -1 || v23)
        {
          LODWORD(v22) = v2;
          uint64_t v14 = (uint64_t *)*((void *)v4 + 2);
          if (!v14) {
            goto LABEL_66;
          }
        }
        else
        {
          if (v2 && v22 != -1)
          {
            BOOL v24 = (v22 | (v2 << 32)) + ~(v22 << 32);
            unint64_t v25 = 9
                * (((v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13)) ^ (((v24 ^ (v24 >> 22))
                                                                          + ~((v24 ^ (v24 >> 22)) << 13)) >> 8));
            unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
            LODWORD(v22) = (v26 >> 31) ^ v26;
          }
          uint64_t v14 = (uint64_t *)*((void *)v4 + 2);
          if (!v14)
          {
LABEL_66:
            v42 = v3;
            v43 = v22;
            v44 = v4;
            AGGraphSetOutputValue();
            return swift_bridgeObjectRelease();
          }
        }
        unint64_t v27 = 0;
        uint64_t v28 = 32;
        while ((unint64_t)v27 < *((void *)v4 + 2))
        {
          v29 = *(unsigned int *)(v0 + 8);
          outlined init with copy of PlatformItem((uint64_t)&v4[v28], (uint64_t)&v42);
          if (v44 != -1 && v29 != 0)
          {
            if (v44 && v29 != -1)
            {
              unint64_t v31 = (v29 | ((unint64_t)v44 << 32)) + ~(v29 << 32);
              unint64_t v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
              uint64_t v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
              LODWORD(v29) = ((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~(v33 << 27));
            }
            LODWORD(v44) = v29;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          }
          if ((unint64_t)v27 >= *((void *)v4 + 2)) {
            goto LABEL_70;
          }
          unint64_t v27 = (uint64_t *)((char *)v27 + 1);
          outlined assign with copy of PlatformItem((uint64_t)&v42, (uint64_t)&v4[v28]);
          outlined destroy of PlatformItem((uint64_t)&v42);
          v28 += 336;
          if (v14 == v27) {
            goto LABEL_66;
          }
        }
      }
      else
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
      }
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
    }
  }

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  char v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned char *v24;
  unint64_t *v25;
  ValueMetadata *v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[40];
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  uint64_t v57;
  int v58;
  char *v59;
  unsigned char v60[16];
  uint64_t v61;
  void v62[11];
  uint64_t vars8;

  v62[9] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    int v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    v4 = (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v7 = v6;
    uint64_t v3 = *(void *)Value;
    uint64_t v8 = *(_DWORD *)(Value + 8);
    unsigned int v9 = swift_bridgeObjectRetain();
    if (v9) {
      int v1 = v7 & 1;
    }
    else {
      int v1 = 0;
    }
    if (v9) {
      uint64_t v2 = v8;
    }
    else {
      uint64_t v2 = 0;
    }
    if (v9)
    {
      v4 = (char *)v9;
    }
    else
    {
      uint64_t v3 = 0;
      v4 = (char *)MEMORY[0x1E4FBC860];
    }
  }
  AGGraphGetValue();
  v11 = v10;
  if (AGGraphGetOutputValue()) {
    char v12 = (v11 & 1) == 0;
  }
  else {
    char v12 = 0;
  }
  if (!v12 || v1 != 0)
  {
    v44 = v2;
    v45 = v0;
    uint64_t v14 = *((void *)v4 + 2);
    v43 = v3;
    if (v14)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_65;
      }
      while (1)
      {
        unint64_t v15 = 0;
        BOOL v16 = 32;
        while (v15 < *((void *)v4 + 2))
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[v16], (uint64_t)&v57);
          v17 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)v60, (uint64_t)&v53, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, MEMORY[0x1E4FBB718]);
          uint64_t v18 = v56;
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v53, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, v17);
          if (v18 == 1)
          {
            type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
            unint64_t v19 = AGGraphGetValue();
            outlined init with copy of TableColumnList(v19, (uint64_t)v52);
            uint64_t v20 = AGCreateWeakAttribute();
            v21 = v20;
            int v22 = HIDWORD(v20);
            uint64_t v23 = AGCreateWeakAttribute();
            v47 = 0;
            memset(v46, 0, sizeof(v46));
            v55 = 0u;
            v56 = 0u;
            v54 = 0u;
            *(void *)&v53 = __PAIR64__(v22, v21);
            *((void *)&v53 + 1) = v23;
            outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v46, (uint64_t)&v54 + 8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
            v48 = v53;
            *((void *)&v49 + 1) = *((void *)&v54 + 1);
            v50 = v55;
            v51 = v56;
            *(void *)&v49 = 8;
            outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v52, (uint64_t)&v49 + 8);
            v53 = v48;
            v54 = v49;
            v55 = v50;
            v56 = v51;
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v52, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, MEMORY[0x1E4FBB718]);
            BOOL v24 = v60;
            unint64_t v25 = (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?;
            unint64_t v26 = &type metadata for PlatformItem.SelectionContent;
          }
          else
          {
            if (v62[3] == 1) {
              goto LABEL_30;
            }
            if ((v61 & 8) == 0) {
              v61 |= 8uLL;
            }
            type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
            unint64_t v27 = AGGraphGetValue();
            outlined init with copy of TableColumnList(v27, (uint64_t)&v53);
            BOOL v24 = v62;
            unint64_t v25 = &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?;
            unint64_t v26 = &type metadata for PlatformItem.SelectionContent.AuxiliaryContent;
          }
          outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v53, (uint64_t)v24, v25, (uint64_t)v26);
LABEL_30:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          }
          if (v15 >= *((void *)v4 + 2)) {
            goto LABEL_62;
          }
          ++v15;
          outlined assign with copy of PlatformItem((uint64_t)&v57, (uint64_t)&v4[v16]);
          outlined destroy of PlatformItem((uint64_t)&v57);
          v16 += 336;
          if (v14 == v15) {
            goto LABEL_38;
          }
        }
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
    }
LABEL_38:
    v29 = *(_DWORD *)(v45 + 8);
    unint64_t v30 = (v29 + 1);
    unint64_t v31 = v29 == -1;
    *(_DWORD *)(v45 + 8) = v30;
    if (v44 == -1 || v31)
    {
      LODWORD(v30) = v44;
      v35 = *((void *)v4 + 2);
      if (!v35)
      {
LABEL_60:
        v57 = v43;
        v58 = v30;
        v59 = v4;
        AGGraphSetOutputValue();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (v44 && v30 != -1)
      {
        unint64_t v32 = ((v30 | (v44 << 32)) + ~(v30 << 32)) ^ (((v30 | (unint64_t)(v44 << 32)) + ~(v30 << 32)) >> 22);
        uint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
        int v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
        LODWORD(v30) = (v34 >> 31) ^ v34;
      }
      v35 = *((void *)v4 + 2);
      if (!v35) {
        goto LABEL_60;
      }
    }
    uint64_t v36 = 0;
    unint64_t v37 = 32;
    uint64_t v14 = -1;
    while (v36 < *((void *)v4 + 2))
    {
      uint64_t v38 = *(unsigned int *)(v45 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v37], (uint64_t)&v57);
      if (v59 != -1 && v38 != 0)
      {
        if (v59 && v38 != -1)
        {
          v40 = (v38 | ((unint64_t)v59 << 32)) + ~(v38 << 32);
          v41 = (v40 ^ (v40 >> 22)) + ~((v40 ^ (v40 >> 22)) << 13);
          v42 = (9 * (v41 ^ (v41 >> 8))) ^ ((9 * (v41 ^ (v41 >> 8))) >> 15);
          LODWORD(v38) = ((v42 + ~(v42 << 27)) >> 31) ^ (v42 + ~(v42 << 27));
        }
        LODWORD(v59) = v38;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
      if (v36 >= *((void *)v4 + 2)) {
        goto LABEL_64;
      }
      ++v36;
      outlined assign with copy of PlatformItem((uint64_t)&v57, (uint64_t)&v4[v37]);
      outlined destroy of PlatformItem((uint64_t)&v57);
      v37 += 336;
      if (v35 == v36) {
        goto LABEL_60;
      }
    }
    goto LABEL_63;
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized PlatformItemRule.updateValue()()
{
  int v1 = (_DWORD *)v0;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(v0 + 24);
  int v3 = *(_DWORD *)(v0 + 32);
  int v4 = *(_DWORD *)(v0 + 36);
  int v5 = *(_DWORD *)(v0 + 40);
  uint64_t Value = (id *)AGGraphGetValue();
  char v8 = v7;
  v23[0] = *Value;
  id v9 = v23[0];
  uint64_t v10 = PlatformTextRepresentableContext.text.getter();

  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v35);
  *(void *)&v37[0] = 0;
  long long v36 = (unint64_t)v10;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v35, (uint64_t)v37 + 8, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  BYTE11(v38) = 0;
  uint64_t v39 = 0;
  int v11 = *(_DWORD *)AGGraphGetValue() >> 1;
  BOOL v12 = v11 != v4 || v3 == 0;
  char v13 = v12;
  if (v12)
  {
    int v3 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v14 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v14 = 1;
    }
    static ViewIdentity.nextSeed = v14;
    v1[8] = v3;
    v1[9] = v11;
  }
  if (AGGraphGetOutputValue()) {
    char v15 = v13;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0 && (v8 & 1) == 0) {
    return outlined release of PlatformItem.PrimaryContent((uint64_t)&v36);
  }
  v1[10] = v5 + 1;
  v17 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
  *(_DWORD *)(v18 + 32) = v3;
  v33[10] = v37[9];
  v33[11] = v37[10];
  v33[12] = v38;
  uint64_t v34 = v39;
  v33[6] = v37[5];
  v33[7] = v37[6];
  v33[8] = v37[7];
  v33[9] = v37[8];
  v33[2] = v37[1];
  v33[3] = v37[2];
  v33[4] = v37[3];
  v33[5] = v37[4];
  v33[0] = v36;
  v33[1] = v37[0];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v33, v19, v20, v21);
  *(_OWORD *)&v25[216] = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = xmmword_18834FC50;
  v23[0] = (id)v18;
  v23[1] = v2;
  int v24 = v5 + 1;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v33, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  uint64_t v29 = 0;
  char v30 = 1;
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, v17);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18834BB80;
  outlined init with copy of PlatformItem((uint64_t)v23, v22 + 32);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return outlined destroy of PlatformItem((uint64_t)v23);
}

{
  uint64_t v0;
  char *Value;
  char v2;
  char v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  int v20;
  uint64_t OutputValue;
  int v23;
  uint64_t (*v24)(void, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void v31[2];
  int v32;
  unsigned char v33[232];
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[13];
  uint64_t v42;
  _OWORD v43[10];
  unsigned char v44[19];
  unsigned char __dst[184];
  long long v46;
  _OWORD v47[11];
  long long v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (char *)AGGraphGetValue();
  int v3 = v2;
  int v4 = *((_OWORD *)Value + 3);
  char v6 = *(_OWORD *)Value;
  int v5 = *((_OWORD *)Value + 1);
  v43[2] = *((_OWORD *)Value + 2);
  v43[3] = v4;
  v43[0] = v6;
  v43[1] = v5;
  char v7 = *((_OWORD *)Value + 7);
  id v9 = *((_OWORD *)Value + 4);
  char v8 = *((_OWORD *)Value + 5);
  v43[6] = *((_OWORD *)Value + 6);
  v43[7] = v7;
  v43[4] = v9;
  v43[5] = v8;
  int v11 = *((_OWORD *)Value + 9);
  uint64_t v10 = *((_OWORD *)Value + 10);
  BOOL v12 = *(_DWORD *)(Value + 175);
  v43[8] = *((_OWORD *)Value + 8);
  *(_DWORD *)&v44[15] = v12;
  v43[9] = v11;
  *(_OWORD *)v44 = v10;
  char v13 = *((void *)Value + 24);
  memmove(__dst, Value, 0xB3uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v14, v15, v16);
  v46 = 0uLL;
  *(void *)&v47[0] = 0;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)__dst, (uint64_t)v47 + 8, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v17 = 1;
  BYTE11(v48) = 1;
  v49 = v13;
  uint64_t v18 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v18 == *(_DWORD *)(v0 + 36) && (uint64_t v19 = *(_DWORD *)(v0 + 32)) != 0)
  {
    v17 = 0;
  }
  else
  {
    uint64_t v19 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      uint64_t v20 = static ViewIdentity.nextSeed + 1;
    }
    else {
      uint64_t v20 = 1;
    }
    static ViewIdentity.nextSeed = v20;
    *(_DWORD *)(v0 + 32) = v19;
    *(_DWORD *)(v0 + 36) = v18;
  }
  Outputuint64_t Value = AGGraphGetOutputValue();
  if (v17 & 1) != 0 || !OutputValue || (v3)
  {
    uint64_t v23 = *(_DWORD *)(v0 + 40) + 1;
    *(_DWORD *)(v0 + 40) = v23;
    int v24 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBBE00]);
    unint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_18834BB80;
    *(_DWORD *)(v25 + 32) = v19;
    long long v26 = *(void *)(v0 + 24);
    v41[10] = v47[9];
    v41[11] = v47[10];
    v41[12] = v48;
    v42 = v49;
    v41[6] = v47[5];
    v41[7] = v47[6];
    v41[8] = v47[7];
    v41[9] = v47[8];
    v41[2] = v47[1];
    v41[3] = v47[2];
    v41[4] = v47[3];
    v41[5] = v47[4];
    v41[0] = v46;
    v41[1] = v47[0];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v41, v27, v28, v29);
    *(_OWORD *)&v33[216] = 0u;
    uint64_t v34 = 0u;
    v35 = 0u;
    long long v36 = xmmword_18834FC50;
    v31[0] = v25;
    v31[1] = v26;
    uint64_t v32 = v23;
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v41, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    unint64_t v37 = 0;
    long long v38 = 1;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, v24);
    char v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_18834BB80;
    outlined init with copy of PlatformItem((uint64_t)v31, v30 + 32);
    outlined retain of Image.Resolved((uint64_t)v43);
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return outlined destroy of PlatformItem((uint64_t)v31);
  }
  else
  {
    outlined retain of Image.Resolved((uint64_t)v43);
    swift_retain();
    return outlined release of PlatformItem.PrimaryContent((uint64_t)&v46);
  }
}

uint64_t specialized PlatformItemListGenerator.updateValue()()
{
  uint64_t v1 = v0;
  if (AGGraphGetOutputValue())
  {
    int v2 = *(_DWORD *)(v0 + 104);
  }
  else
  {
    int v3 = *(void **)v0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v4 = v3;
    AGGraphClearUpdate();
    id v5 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    int v2 = specialized PlatformItemListGenerator.makeItemList()();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *(_DWORD *)(v1 + 104) = v2;
  }
  if (v2 != *MEMORY[0x1E4F4E7A0])
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized PlatformItemListGenerator.makeItemList()()
{
  long long v1 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v1;
  v5[4] = *(_OWORD *)(v0 + 80);
  int v6 = *(_DWORD *)(v0 + 96);
  long long v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  if (*(unsigned char *)(v0 + 100))
  {
    _ViewInputs.withoutGeometryDependencies.getter();
    outlined retain of _ViewInputs((uint64_t)v5);
    PreferenceKeys.init()();
    _ViewInputs.intern<A>(_:id:)();
    swift_bridgeObjectRelease();
    outlined release of _ViewInputs((uint64_t)v5);
    PreferencesInputs.init(hostKeys:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of _ViewInputs((uint64_t)v5);
  }
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  PropertyList.subscript.setter();
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
    PreferenceKeys.add(_:)();
  }
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
  _GraphValue.init(_:)();
  static HStack._makeView(view:inputs:)();
  uint64_t v3 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v3 & 0x100000000) != 0) {
    uint64_t v3 = *MEMORY[0x1E4F4E7A0];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v3;
}

uint64_t specialized implicit closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_188357320;
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    id v8 = (id)AGGraphGetAttributeGraph();
    Swift::UInt v9 = AGGraphRef.graphIdentity()();

    uint64_t v10 = MEMORY[0x1E4FBB808];
    uint64_t v11 = MEMORY[0x1E4FBB868];
    *(void *)(v6 + 56) = MEMORY[0x1E4FBB808];
    *(void *)(v6 + 64) = v11;
    *(void *)(v6 + 32) = v9;
    *(void *)(v6 + 96) = MEMORY[0x1E4FBB1A0];
    unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 80) = a3;
    uint64_t v13 = *(void *)(a1 + 80);
    *(void *)(v6 + 136) = v10;
    *(void *)(v6 + 144) = v11;
    *(void *)(v6 + 104) = v12;
    *(void *)(v6 + 112) = v13;
    return v6;
  }
  return result;
}

void *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  uint64_t v21 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v22 = static RepresentableContextValues.current;
  uint64_t v19 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v20 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v10;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  char v13 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  int v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v15 = static RepresentableContextValues.current;
  long long v16 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v22;
  *((void *)&static RepresentableContextValues.current + 1) = v21;
  *(void *)&xmmword_1EB2E8DA0 = v20;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v19;
  char v17 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  long long v13;
  long long v14;
  char v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  Class v21;
  void *v22;
  long long v23;
  long long v24;
  char v25;
  uint64_t v27;

  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  char v12 = *(unsigned __int8 *)(a1 + 32);
  char v13 = static RepresentableContextValues.current;
  int v14 = xmmword_1EB2E8DA0;
  long long v15 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v11;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v10;
  long long v27 = v10;
  byte_1EB2E8DB0 = v12;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  long long v16 = outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  char v17 = *a2;
  if (v12 == 1)
  {
    MEMORY[0x1F4188790](v16);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    swift_retain();
    uint64_t v18 = v17;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  }
  else
  {
    swift_retain();
    uint64_t v19 = v17;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v27, 0);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v20 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
  objc_allocWithZone(v21);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v17, a3, a4, a5, 0, a7, v20, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478C98, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  uint64_t v23 = static RepresentableContextValues.current;
  int v24 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v13;
  xmmword_1EB2E8DA0 = v14;
  unint64_t v25 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v15;
  outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  AGGraphSetUpdate();
  return v22;
}

void *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  AGGraphClearUpdate();
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  long long v14 = static RepresentableContextValues.current;
  uint64_t v26 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v27 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v11;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v12;
  char v25 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  swift_retain();
  swift_retain();
  char v31 = v13;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  outlined copy of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v27, v26, v25);
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v27, v26, v25);
  uint64_t v15 = *a2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v16 = specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)((uint64_t *)a1, v15);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
  id v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v17);
  swift_release();
  long long v21 = static RepresentableContextValues.current;
  long long v22 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v14;
  *(void *)&xmmword_1EB2E8DA0 = v27;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v26;
  char v23 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v25;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v31);
  AGGraphSetUpdate();
  return v20;
}

void *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  AGGraphClearUpdate();
  char v11 = *(unsigned char *)(a1 + 32);
  long long v12 = static RepresentableContextValues.current;
  long long v13 = xmmword_1EB2E8DA0;
  long long v14 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  xmmword_1EB2E8DA0 = v14;
  char v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  id v16 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v17 = static RepresentableContextValues.current;
  long long v18 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v12;
  xmmword_1EB2E8DA0 = v13;
  char v19 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v15;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  AGGraphSetUpdate();
  return v16;
}

void *specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a3;
  int v47 = a7;
  uint64_t v45 = a5;
  uint64_t v46 = a4;
  uint64_t v38 = a2;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v9 - 8);
  char v11 = (char *)&v36 - v10;
  uint64_t v13 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  int v16 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v17 = static RepresentableContextValues.current;
  uint64_t v48 = xmmword_1EB2E8DA0;
  uint64_t v49 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v37 = *((void *)&xmmword_1EB2E8DA0 + 1);
  *(void *)&static RepresentableContextValues.current = v13;
  *((void *)&static RepresentableContextValues.current + 1) = v12;
  uint64_t v42 = v13;
  *(void *)&xmmword_1EB2E8DA0 = v14;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v15;
  char v18 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v16;
  swift_retain();
  swift_retain();
  uint64_t v41 = v14;
  uint64_t v39 = v15;
  int v40 = v16;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  uint64_t v19 = v17;
  uint64_t v20 = v17;
  uint64_t v21 = v48;
  uint64_t v22 = v49;
  uint64_t v23 = v37;
  LOBYTE(v15) = v18;
  outlined copy of RepresentableContextValues?(v20, v49, v48, v37, v18);
  uint64_t v24 = v19;
  outlined consume of RepresentableContextValues?(v19, v22, v21, v23, v15);
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v38, (uint64_t)v11);
  id v25 = specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(a1);
  outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>((uint64_t)v11);
  uint64_t v26 = *(void *)(v43 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
  id v28 = objc_allocWithZone(v27);
  uint64_t v29 = v45;
  swift_retain();
  swift_retain();
  uint64_t v30 = v44;
  swift_unknownObjectRetain();
  char v31 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v25, v30, v46, v29, 0, v47, v26);
  swift_release();
  long long v32 = static RepresentableContextValues.current;
  long long v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v24;
  *((void *)&static RepresentableContextValues.current + 1) = v49;
  *(void *)&xmmword_1EB2E8DA0 = v48;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v23;
  char v34 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v15;
  outlined consume of RepresentableContextValues?(v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v41, v39, v40);
  return v31;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  Class v31;
  void *v32;
  long long v33;
  long long v34;
  char v35;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void v52[4];
  char v53;
  void *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;
  long long v64;
  uint64_t v65;

  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  char v11 = *(void *)(a1 + 24);
  uint64_t v13 = *(unsigned char *)(a1 + 32);
  uint64_t v15 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v14 = static RepresentableContextValues.current;
  int v16 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  v51 = static RepresentableContextValues.current;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v12;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  uint64_t v17 = v11;
  char v18 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  uint64_t v19 = v13;
  uint64_t v49 = v10;
  swift_retain();
  swift_retain();
  int v47 = v12;
  uint64_t v48 = v17;
  v50 = v19;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v17, v19);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v17, v19);
  uint64_t v41 = v15;
  outlined copy of RepresentableContextValues?(v14, v15, v16, *((uint64_t *)&v16 + 1), v18);
  outlined consume of RepresentableContextValues?(v14, v15, v16, *((uint64_t *)&v16 + 1), v18);
  uint64_t v20 = *(unsigned char *)(a2 + 8);
  uint64_t v21 = *(void *)(a2 + 16);
  LOBYTE(v10) = *(unsigned char *)(a2 + 25);
  uint64_t v22 = *(void *)(a2 + 32);
  uint64_t v23 = *(unsigned char *)(a2 + 40);
  uint64_t v37 = v23;
  uint64_t v24 = *(void *)(a2 + 48);
  id v25 = *(unsigned char *)(a2 + 56);
  uint64_t v26 = *(void *)(a2 + 80);
  Class v27 = *(unsigned __int8 *)(a2 + 24);
  v55 = *(void *)a2;
  uint64_t v39 = v55;
  int v40 = v20;
  v56 = v20;
  v57 = v21;
  v58 = v27;
  v59 = v10;
  v60 = v22;
  v61 = v23;
  v62 = v24;
  v63 = v25;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = v26;
  uint64_t v38 = *(void **)(a1 + 40);
  v52[0] = v51;
  v52[1] = v49;
  v52[2] = v47;
  v52[3] = v48;
  v53 = v50;
  v54 = v38;
  outlined copy of Environment<Bool>.Content(v55, v20);
  outlined copy of Environment<CGFloat?>.Content(v21, v27, v10);
  outlined copy of Environment<HoverEffect?>.Content(v22, v37);
  outlined copy of Environment<Bool>.Content(v24, v25);
  swift_bridgeObjectRetain();
  swift_retain();
  id v28 = v38;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v47, v48, v50);
  uint64_t v29 = UIKitPasteControl.makeUIView(context:)((uint64_t)v52);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v47, v48, v50);

  outlined consume of Environment<Bool>.Content(v39, v40);
  outlined consume of Environment<CGFloat?>.Content(v21, v27, v10);
  outlined consume of Environment<AnyShapeStyle?>.Content(v22, v37);
  outlined consume of Environment<Bool>.Content(v24, v25);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
  objc_allocWithZone(v31);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  long long v32 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v29, a3, a4, a5, 0, a7, v30);
  swift_release();
  long long v33 = static RepresentableContextValues.current;
  char v34 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = __PAIR128__(v41, v14);
  xmmword_1EB2E8DA0 = v16;
  v35 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v18;
  outlined consume of RepresentableContextValues?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v47, v48, v50);
  return v32;
}

{
  uint64_t v9;
  char v10;
  long long v11;
  long long v12;
  unsigned long long v13;
  char v14;
  id v15;
  id v16;
  double v17;
  uint64_t v18;
  Class v19;
  id v20;
  void *v21;
  long long v22;
  long long v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;

  uint64_t v9 = *(void *)(a1 + 8);
  Class v27 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned char *)(a1 + 32);
  char v11 = static RepresentableContextValues.current;
  uint64_t v12 = xmmword_1EB2E8DA0;
  uint64_t v13 = xmmword_1EB2E8DA0;
  uint64_t v29 = v13 >> 64;
  uint64_t v30 = v13;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v27;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v26;
  uint64_t v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v14);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v14);
  uint64_t v15 = objc_allocWithZone((Class)type metadata accessor for UIKitToolbar());
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v27, v26, v10);
  int v16 = objc_msgSend(v15, sel_init);
  LODWORD(v17) = 1112014848;
  objc_msgSend(v16, sel_setContentHuggingPriority_forAxis_, 0, v17);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  swift_bridgeObjectRelease();
  char v18 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
  uint64_t v20 = objc_allocWithZone(v19);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v18);
  swift_release();
  uint64_t v22 = static RepresentableContextValues.current;
  uint64_t v23 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v11;
  xmmword_1EB2E8DA0 = __PAIR128__(v29, v30);
  uint64_t v24 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v14;
  outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  return v21;
}

{
  uint64_t v9;
  char v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  id v16;
  uint64_t v17;
  Class v18;
  id v19;
  void *v20;
  long long v21;
  long long v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v26 = *(void *)(a1 + 16);
  id v25 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned char *)(a1 + 32);
  char v11 = static RepresentableContextValues.current;
  uint64_t v12 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v13 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v26;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v25;
  uint64_t v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  id v28 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v13, v12, v14);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v13, v12, v14);
  type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView();
  uint64_t v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v26, v25, v10);
  int v16 = objc_msgSend(v15, sel_initWithProgressViewStyle_, 0);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  swift_release();
  uint64_t v17 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
  uint64_t v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v17);
  swift_release();
  uint64_t v21 = static RepresentableContextValues.current;
  uint64_t v22 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v11;
  xmmword_1EB2E8DA0 = __PAIR128__(v28, v13);
  uint64_t v23 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v14;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  return v20;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  Class v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  long long v32;
  long long v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v43 = a8;
  uint64_t v44 = a3;
  int v47 = a7;
  uint64_t v45 = a5;
  uint64_t v46 = a4;
  uint64_t v38 = a2;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v9 - 8);
  char v11 = (char *)&v36 - v10;
  uint64_t v13 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  int v16 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v17 = static RepresentableContextValues.current;
  uint64_t v48 = xmmword_1EB2E8DA0;
  uint64_t v49 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v37 = *((void *)&xmmword_1EB2E8DA0 + 1);
  *(void *)&static RepresentableContextValues.current = v13;
  *((void *)&static RepresentableContextValues.current + 1) = v12;
  uint64_t v42 = v13;
  *(void *)&xmmword_1EB2E8DA0 = v14;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v15;
  char v18 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v16;
  swift_retain();
  swift_retain();
  uint64_t v41 = v14;
  uint64_t v39 = v15;
  int v40 = v16;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  uint64_t v19 = v17;
  uint64_t v20 = v17;
  uint64_t v21 = v48;
  uint64_t v22 = v49;
  uint64_t v23 = v37;
  LOBYTE(v15) = v18;
  outlined copy of RepresentableContextValues?(v20, v49, v48, v37, v18);
  uint64_t v24 = v19;
  outlined consume of RepresentableContextValues?(v19, v22, v21, v23, v15);
  outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v38, (uint64_t)v11);
  id v25 = specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(a1);
  outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v11);
  uint64_t v26 = *(void *)(v43 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
  id v28 = objc_allocWithZone(v27);
  uint64_t v29 = v45;
  swift_retain();
  swift_retain();
  uint64_t v30 = v44;
  swift_unknownObjectRetain();
  char v31 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v25, v30, v46, v29, 0, v47, v26);
  swift_release();
  long long v32 = static RepresentableContextValues.current;
  long long v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v24;
  *((void *)&static RepresentableContextValues.current + 1) = v49;
  *(void *)&xmmword_1EB2E8DA0 = v48;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v23;
  char v34 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v15;
  outlined consume of RepresentableContextValues?(v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v41, v39, v40);
  return v31;
}

void *specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  char v14 = *((unsigned char *)a1 + 32);
  long long v15 = static RepresentableContextValues.current;
  long long v16 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v11;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v12;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v13;
  char v38 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v14;
  swift_retain();
  swift_retain();
  uint64_t v37 = v12;
  char v31 = v14;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
  outlined copy of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v38);
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v38);
  uint64_t v17 = *(void *)(a2 + 8);
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = (void *)a1[5];
  id v20 = objc_allocWithZone(MEMORY[0x1E4FB1CA8]);
  swift_retain();
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of AppIntentExecutor?(v18);
  swift_retain();
  id v21 = v19;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v37, v13, v31);
  id v22 = objc_msgSend(v20, sel_init);
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v21, sel_valueChanged_, 4096);
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v21, sel_editingBegan_, 1);
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v21, sel_editingEnded_, 448);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v37, v13, v31);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  swift_release();
  uint64_t v23 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>();
  id v25 = objc_allocWithZone(v24);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v26 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v22, a3, a4, a5, 0, a7, v23);
  swift_release();
  long long v27 = static RepresentableContextValues.current;
  long long v28 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v15;
  xmmword_1EB2E8DA0 = v16;
  char v29 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v38;
  outlined consume of RepresentableContextValues?(v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v37, v13, v31);
  return v26;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  long long v15;
  char v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class v22;
  id v23;
  void *v24;
  long long v25;
  long long v26;
  char v27;
  uint64_t v29;
  uint64_t v35;

  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = *((unsigned char *)a1 + 32);
  char v14 = *((void *)&static RepresentableContextValues.current + 1);
  long long v15 = xmmword_1EB2E8DA0;
  v35 = static RepresentableContextValues.current;
  *(void *)&static RepresentableContextValues.current = v10;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v11;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v12;
  long long v16 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  char v29 = v14;
  outlined copy of RepresentableContextValues?(v35, v14, v15, *((uint64_t *)&v15 + 1), v16);
  outlined consume of RepresentableContextValues?(v35, v14, v15, *((uint64_t *)&v15 + 1), v16);
  uint64_t v17 = (void *)a1[5];
  uint64_t v18 = objc_allocWithZone(MEMORY[0x1E4FB16B0]);
  uint64_t v19 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  id v20 = objc_msgSend(v18, sel_init);
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v19, sel_dateChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);

  id v21 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
  uint64_t v23 = objc_allocWithZone(v22);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  Class v24 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v20, a3, a4, a5, 0, a7, v21);
  swift_release();
  id v25 = static RepresentableContextValues.current;
  uint64_t v26 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v35;
  *((void *)&static RepresentableContextValues.current + 1) = v29;
  xmmword_1EB2E8DA0 = v15;
  long long v27 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v16;
  outlined consume of RepresentableContextValues?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  return v24;
}

void *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v12 = *a1;
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v26 = *(_OWORD *)a2;
  long long v27 = v13;
  char v28 = *(unsigned char *)(a2 + 32);
  char v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v26, (uint64_t)v31, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)v31, (uint64_t)&v25, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  uint64_t v30 = *((void *)&v26 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v27, (uint64_t)v29);
  uint64_t v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v29, (uint64_t)&v32);
  if (v33)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v15)));
    id v16 = v12;
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v31);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v26);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v26);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
  }
  else
  {
    id v17 = v12;
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v31);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v29);
  }
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_initWithNibName_bundle_, 0, 0);
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(v12, v18);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v19 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
  objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  id v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478C48, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v21;
}

void *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v27 = a8;
  uint64_t v28 = a4;
  int v29 = a7;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (char *)&v26 - v13;
  outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(a1, (uint64_t)&v26 - v13);
  uint64_t v15 = (void *)a2[5];
  uint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  uint64_t v19 = a2[2];
  uint64_t v18 = a2[3];
  LOBYTE(a2) = *((unsigned char *)a2 + 32);
  v30[0] = v16;
  v30[1] = v17;
  v30[2] = v19;
  v30[3] = v18;
  char v31 = (char)a2;
  long long v32 = v15;
  swift_retain();
  id v20 = v15;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v18, (char)a2);
  id v21 = TextViewAdaptor.makeUIView(context:)((uint64_t)v30);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v19, v18, (char)a2);

  outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v14);
  uint64_t v22 = *(void *)(v27 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
  objc_allocWithZone(v23);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  Class v24 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v21, a3, v28, a5, 0, v29, v22);
  swift_release();
  return v24;
}

{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Class v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  long long v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;

  uint64_t v28 = a8;
  int v29 = a4;
  uint64_t v30 = a7;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (char *)&v27 - v13;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(a1, (uint64_t)&v27 - v13);
  uint64_t v15 = (void *)a2[5];
  uint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  uint64_t v19 = a2[2];
  uint64_t v18 = a2[3];
  LOBYTE(a2) = *((unsigned char *)a2 + 32);
  *(void *)&char v31 = v16;
  *((void *)&v31 + 1) = v17;
  long long v32 = v19;
  char v33 = v18;
  char v34 = (char)a2;
  v35 = v15;
  swift_retain();
  id v20 = v15;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v18, (char)a2);
  UIKitRichTextEditor.makeUIView(context:)(&v31);
  uint64_t v22 = v21;
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v19, v18, (char)a2);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v14);
  Class v23 = *(void *)(v28 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
  objc_allocWithZone(v24);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v25 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(v22, a3, v29, a5, 0, v30, v23);
  swift_release();
  return v25;
}

void *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  long long v13 = a1[7];
  long long v14 = a1[9];
  long long v58 = a1[8];
  long long v59 = v14;
  long long v15 = a1[3];
  long long v16 = a1[5];
  long long v54 = a1[4];
  long long v55 = v16;
  long long v17 = a1[5];
  long long v18 = a1[7];
  long long v56 = a1[6];
  long long v57 = v18;
  long long v19 = a1[1];
  v51[0] = *a1;
  v51[1] = v19;
  long long v20 = a1[3];
  long long v22 = *a1;
  long long v21 = a1[1];
  long long v52 = a1[2];
  long long v53 = v20;
  long long v39 = v13;
  long long v40 = v58;
  long long v41 = a1[9];
  long long v35 = v15;
  long long v36 = v54;
  long long v37 = v17;
  long long v38 = v56;
  *(_OWORD *)&v32[8] = v22;
  long long v33 = v21;
  char v60 = *((unsigned char *)a1 + 160);
  char v42 = *((unsigned char *)a1 + 160);
  long long v34 = v52;
  long long v23 = *(_OWORD *)(a2 + 16);
  long long v43 = *(_OWORD *)a2;
  long long v44 = v23;
  char v45 = *(unsigned char *)(a2 + 32);
  Class v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v43, (uint64_t)&v48, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)&v48, (uint64_t)v32, &lazy cache variable for type metadata for PreferenceBridge?, v24);
  uint64_t v47 = *((void *)&v43 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v44, (uint64_t)v46);
  uint64_t v25 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v46, (uint64_t)&v49);
  if (v50)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v25)));
    outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v51);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v48);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v47);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
  }
  else
  {
    outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v51);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v48);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v47);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v46);
  }
  id v26 = CustomizableURLDocumentViewControllerRepresentable.makeUIViewController(context:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v51);
  uint64_t v27 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
  objc_allocWithZone(v28);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  int v29 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v26, a3, a4, a5, 0, a7, v27, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478CE8, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v29;
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void **a5)
{
  uint64_t v9 = AGGraphClearUpdate();
  uint64_t v10 = *(void **)(a3 + 80);
  if (v10)
  {
    id v18 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
    MEMORY[0x1F4188790](v9);
    if (a1)
    {
      MEMORY[0x1F4188790](v11);
      id v14 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v15 = a4[1];
      v17[0] = *a4;
      v17[1] = v15;
      v17[2] = a4[2];
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v17, a5, v12);
    }
  }
  return AGGraphSetUpdate();
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = AGGraphClearUpdate();
  uint64_t v10 = *(void **)(a3 + 80);
  if (v10)
  {
    id v19 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
    MEMORY[0x1F4188790](v9);
    if (a1)
    {
      MEMORY[0x1F4188790](v11);
      id v14 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v15 = *(_OWORD *)(a4 + 16);
      v17[0] = *(_OWORD *)a4;
      v17[1] = v15;
      char v18 = *(unsigned char *)(a4 + 32);
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v17, a5, v12);
    }
  }
  return AGGraphSetUpdate();
}

{
  uint64_t v9;
  uint64_t v10;
  long long v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  unsigned long long v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  long long v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  long long v47;
  long long v48;
  char v49;
  id v50;

  uint64_t v9 = AGGraphClearUpdate();
  uint64_t v10 = v9;
  uint64_t v11 = *(_OWORD *)(a4 + 16);
  uint64_t v47 = *(_OWORD *)a4;
  uint64_t v48 = v11;
  uint64_t v49 = *(unsigned char *)(a4 + 32);
  uint64_t v12 = *(void **)(a3 + 80);
  if (v12)
  {
    id v13 = *(void **)((char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x78));
    char v50 = v13;
    MEMORY[0x1F4188790](v9);
    if (a1)
    {
      MEMORY[0x1F4188790](v14);
      long long v15 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v40 = &v34;
      long long v41 = v10;
      long long v16 = v48;
      long long v17 = v49;
      char v18 = static RepresentableContextValues.current;
      long long v43 = xmmword_1EB2E8DA0;
      long long v44 = *((void *)&static RepresentableContextValues.current + 1);
      char v42 = *((void *)&xmmword_1EB2E8DA0 + 1);
      static RepresentableContextValues.current = v47;
      xmmword_1EB2E8DA0 = v48;
      char v45 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v49;
      long long v36 = *((void *)&v47 + 1);
      swift_retain();
      swift_retain();
      long long v37 = v16 >> 64;
      long long v35 = v16;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v16, *((uint64_t *)&v16 + 1), v17);
      long long v38 = v13;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v16, *((uint64_t *)&v16 + 1), v17);
      id v19 = v18;
      long long v39 = v18;
      long long v20 = v18;
      long long v22 = v43;
      long long v21 = v44;
      long long v23 = v42;
      Class v24 = v45;
      outlined copy of RepresentableContextValues?(v20, v44, v43, v42, v45);
      outlined consume of RepresentableContextValues?(v19, v21, v22, v23, v24);
      uint64_t v25 = *(void *)a5;
      id v26 = *(unsigned char *)(a5 + 8);
      outlined copy of Environment<Bool>.Content(v25, v26);
      swift_retain();
      swift_retain();
      uint64_t v27 = v35;
      Class v28 = v37;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v35, v37, v17);
      specialized Environment.wrappedValue.getter(v25, v26, &v46);
      if (v46) {
        int v29 = 2030;
      }
      else {
        int v29 = 3901;
      }
      objc_msgSend(v38, sel_transitionToStyle_, v29);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v27, v28, v17);
      outlined consume of Environment<Bool>.Content(v25, v26);
      uint64_t v30 = static RepresentableContextValues.current;
      char v31 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v39;
      *((void *)&static RepresentableContextValues.current + 1) = v44;
      *(void *)&xmmword_1EB2E8DA0 = v43;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v42;
      long long v32 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v45;
      outlined consume of RepresentableContextValues?(v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v27, v28, v17);
    }
  }
  return AGGraphSetUpdate();
}

{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  long long v15;
  _OWORD v17[2];
  char v18;
  id v19;

  uint64_t v9 = AGGraphClearUpdate();
  uint64_t v10 = *(void **)(a3 + 80);
  if (v10)
  {
    id v19 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
    MEMORY[0x1F4188790](v9);
    if (a1)
    {
      MEMORY[0x1F4188790](v11);
      id v14 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v15 = *(_OWORD *)(a4 + 16);
      v17[0] = *(_OWORD *)a4;
      v17[1] = v15;
      char v18 = *(unsigned char *)(a4 + 32);
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v17, a5, (uint64_t)v12);
    }
  }
  return AGGraphSetUpdate();
}

{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  long long v15;
  _OWORD v17[2];
  char v18;
  id v19;

  uint64_t v9 = AGGraphClearUpdate();
  uint64_t v10 = *(void **)(a3 + 80);
  if (v10)
  {
    id v19 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
    MEMORY[0x1F4188790](v9);
    if (a1)
    {
      MEMORY[0x1F4188790](v11);
      id v14 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v15 = *(_OWORD *)(a4 + 16);
      v17[0] = *(_OWORD *)a4;
      v17[1] = v15;
      char v18 = *(unsigned char *)(a4 + 32);
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v17, a5, v12);
    }
  }
  return AGGraphSetUpdate();
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v9 = AGGraphClearUpdate();
  uint64_t v10 = *(void **)(a3 + 80);
  if (v10)
  {
    id v20 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
    MEMORY[0x1F4188790](v9);
    if (a1)
    {
      MEMORY[0x1F4188790](v11);
      id v14 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v15 = *(_OWORD *)(a4 + 16);
      v18[0] = *(_OWORD *)a4;
      v18[1] = v15;
      char v19 = *(unsigned char *)(a4 + 32);
      id v16 = v12;
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v18, a5);
    }
  }
  return AGGraphSetUpdate();
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t *a5)
{
  long long v5 = a4[1];
  long long v61 = *a4;
  long long v62 = v5;
  long long v63 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    id v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v60 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v53 = &v39;
      long long v11 = v61;
      long long v12 = v62;
      int v13 = v63;
      uint64_t v49 = (void *)*((void *)&v63 + 1);
      uint64_t v55 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v56 = static RepresentableContextValues.current;
      uint64_t v14 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v54 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v61;
      xmmword_1EB2E8DA0 = v62;
      int v15 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v63;
      swift_retain();
      uint64_t v40 = v11;
      swift_retain();
      uint64_t v39 = v12;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      id v50 = v8;
      swift_retain();
      uint64_t v41 = *((void *)&v11 + 1);
      swift_retain();
      uint64_t v43 = *((void *)&v12 + 1);
      int v42 = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      uint64_t v16 = v56;
      uint64_t v17 = v55;
      uint64_t v18 = v54;
      uint64_t v51 = v14;
      int v52 = v15;
      outlined copy of RepresentableContextValues?(v56, v55, v54, v14, v15);
      outlined consume of RepresentableContextValues?(v16, v17, v18, v14, v15);
      uint64_t v20 = *a5;
      uint64_t v19 = a5[1];
      uint64_t v21 = a5[2];
      uint64_t v22 = a5[3];
      uint64_t v23 = a5[4];
      uint64_t v24 = a5[5];
      uint64_t v25 = a5[6];
      uint64_t v26 = a5[8];
      uint64_t v27 = *((unsigned __int8 *)a5 + 72);
      v57[0] = v40;
      v57[1] = *((void *)&v11 + 1);
      uint64_t v28 = v39;
      v57[2] = v39;
      v57[3] = *((void *)&v12 + 1);
      char v58 = v13;
      int v29 = v49;
      long long v59 = v49;
      uint64_t v64 = v20;
      uint64_t v65 = v19;
      uint64_t v48 = v20;
      uint64_t v45 = v19;
      uint64_t v66 = v21;
      uint64_t v67 = v22;
      uint64_t v68 = v23;
      uint64_t v46 = v24;
      uint64_t v69 = v24;
      uint64_t v70 = v25;
      uint64_t v44 = v25;
      uint64_t v71 = a5[7];
      uint64_t v30 = v26;
      uint64_t v47 = v26;
      uint64_t v72 = v26;
      char v73 = v27;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v31 = v27;
      outlined copy of Environment<HoverEffect?>.Content(v30, v27);
      id v32 = v29;
      swift_retain();
      swift_retain();
      uint64_t v33 = v28;
      uint64_t v34 = v28;
      uint64_t v35 = v43;
      LOBYTE(v13) = v42;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v33, v43, v42);
      SystemSlider.updateUIView(_:context:)(v50, (uint64_t)v57);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v13);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      outlined consume of Environment<AnyShapeStyle?>.Content(v47, v31);
      long long v36 = static RepresentableContextValues.current;
      long long v37 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v56;
      *((void *)&static RepresentableContextValues.current + 1) = v55;
      *(void *)&xmmword_1EB2E8DA0 = v54;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v51;
      char v38 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v52;
      outlined consume of RepresentableContextValues?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v13);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double v29;
  double v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  long long v37;
  long long v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  id v60;
  long long v61;
  long long v62;
  long long v63;

  long long v5 = a4[1];
  long long v61 = *a4;
  long long v62 = v5;
  long long v63 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    id v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v60 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v11 = v61;
      long long v12 = *((void *)&v62 + 1);
      id v50 = &v40;
      uint64_t v45 = (id)*((void *)&v63 + 1);
      int v13 = static RepresentableContextValues.current;
      long long v57 = xmmword_1EB2E8DA0;
      char v58 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v56 = *((void *)&xmmword_1EB2E8DA0 + 1);
      static RepresentableContextValues.current = v61;
      xmmword_1EB2E8DA0 = v62;
      uint64_t v14 = v62;
      long long v59 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v63;
      int v15 = v63;
      long long v53 = *((void *)&v61 + 1);
      swift_retain();
      swift_retain();
      uint64_t v16 = v14;
      uint64_t v55 = v12;
      uint64_t v54 = v15;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v12, v15);
      uint64_t v17 = v8;
      uint64_t v48 = v11;
      swift_retain();
      swift_retain();
      uint64_t v18 = v16;
      uint64_t v47 = v16;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v12, v15);
      uint64_t v19 = v13;
      uint64_t v49 = v13;
      uint64_t v20 = v13;
      uint64_t v22 = v57;
      uint64_t v21 = v58;
      uint64_t v23 = v56;
      LOBYTE(v15) = v59;
      outlined copy of RepresentableContextValues?(v20, v58, v57, v56, v59);
      outlined consume of RepresentableContextValues?(v19, v21, v22, v23, v15);
      uint64_t v24 = a5[1];
      int v52 = *a5;
      uint64_t v25 = a5[2];
      uint64_t v26 = a5[3];
      uint64_t v44 = a5[4];
      uint64_t v27 = a5[6];
      uint64_t v46 = a5[5];
      uint64_t v51 = v27;
      swift_retain();
      uint64_t v28 = (char *)v45;
      uint64_t v45 = v28;
      outlined copy of AppIntentExecutor?(v24);
      outlined copy of AppIntentExecutor?(v26);
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v55, v54);
      objc_msgSend(v17, sel_setValue_, 0.0);
      int v29 = -2.0;
      if (!v26) {
        int v29 = 0.0;
      }
      objc_msgSend(v17, sel_setMinimumValue_, v29);
      uint64_t v30 = 2.0;
      if (!v24) {
        uint64_t v30 = 0.0;
      }
      objc_msgSend(v17, sel_setMaximumValue_, v30);
      objc_msgSend(v17, sel_setStepValue_, 1.0);
      uint64_t v31 = &v28[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
      id v32 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8];
      uint64_t v41 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24];
      int v42 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 48];
      *(void *)uint64_t v31 = v52;
      *((void *)v31 + 1) = v24;
      uint64_t v43 = v25;
      *((void *)v31 + 2) = v25;
      *((void *)v31 + 3) = v26;
      uint64_t v33 = v46;
      *((void *)v31 + 4) = v44;
      *((void *)v31 + 5) = v33;
      *((void *)v31 + 6) = v51;
      swift_retain();
      outlined copy of AppIntentExecutor?(v24);
      outlined copy of AppIntentExecutor?(v26);
      swift_retain();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v41);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v34 = v47;
      uint64_t v35 = v55;
      long long v36 = v54;
      outlined consume of RepresentableContextValues.EnvironmentStorage(v47, v55, v54);
      swift_release();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v24);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
      swift_release();
      long long v37 = static RepresentableContextValues.current;
      char v38 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v49;
      *((void *)&static RepresentableContextValues.current + 1) = v58;
      *(void *)&xmmword_1EB2E8DA0 = v57;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v56;
      uint64_t v39 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v59;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v36);
    }
  }
}

{
  long long v5;
  void *v6;
  void *v8;
  uint64_t v9;
  id v10;
  long long v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  long long v22;
  long long v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int v29;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[48];
  id v36;
  long long v37;
  long long v38;
  long long v39;

  long long v5 = a4[1];
  long long v37 = *a4;
  char v38 = v5;
  uint64_t v39 = a4[2];
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    id v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    long long v36 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v31 = &v25;
      long long v11 = v38;
      long long v12 = v39;
      uint64_t v30 = (id)*((void *)&v39 + 1);
      uint64_t v33 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v34 = static RepresentableContextValues.current;
      id v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v27 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v37;
      xmmword_1EB2E8DA0 = v38;
      int v13 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v39;
      swift_retain();
      swift_retain();
      uint64_t v26 = *((void *)&v11 + 1);
      HIDWORD(v25) = v12;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), v12);
      uint64_t v28 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v11, *((uint64_t *)&v11 + 1), v12);
      int v15 = v33;
      uint64_t v14 = v34;
      uint64_t v16 = v27;
      uint64_t v17 = v32;
      int v29 = v13;
      outlined copy of RepresentableContextValues?(v34, v33, v27, v32, v13);
      outlined consume of RepresentableContextValues?(v14, v15, v16, v17, v13);
      uint64_t v18 = *a5;
      swift_bridgeObjectRetain();
      uint64_t v19 = v30;
      swift_retain();
      swift_retain();
      uint64_t v20 = v26;
      uint64_t v21 = BYTE4(v25);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v26, SBYTE4(v25));
      UIKitSegmentedControlAdaptor.updateUIView(_:context:)(v28, (uint64_t)v35, v18);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v20, v21);
      swift_bridgeObjectRelease();

      uint64_t v22 = static RepresentableContextValues.current;
      uint64_t v23 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v34;
      *((void *)&static RepresentableContextValues.current + 1) = v33;
      *(void *)&xmmword_1EB2E8DA0 = v16;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
      uint64_t v24 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v29;
      outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v20, v21);
    }
  }
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a4 + 16);
  long long v34 = *(_OWORD *)a4;
  long long v35 = v4;
  unsigned __int8 v36 = *(unsigned char *)(a4 + 32);
  long long v5 = *(void **)(a3 + 80);
  if (v5)
  {
    uint64_t v6 = *(void **)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x78));
    id v33 = v6;
    MEMORY[0x1F4188790](a1);
    if (v7)
    {
      MEMORY[0x1F4188790](v7);
      id v8 = v6;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v30 = &v24;
      long long v9 = v35;
      int v10 = v36;
      uint64_t v31 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v32 = static RepresentableContextValues.current;
      uint64_t v11 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v26 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v34;
      xmmword_1EB2E8DA0 = v35;
      int v12 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v36;
      swift_retain();
      swift_retain();
      long long v25 = v9;
      HIDWORD(v24) = v10;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v9, *((uint64_t *)&v9 + 1), v10);
      id v27 = v6;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v9, *((uint64_t *)&v9 + 1), v10);
      uint64_t v14 = v31;
      uint64_t v13 = v32;
      uint64_t v15 = v26;
      uint64_t v28 = v11;
      int v29 = v12;
      outlined copy of RepresentableContextValues?(v32, v31, v26, v11, v12);
      outlined consume of RepresentableContextValues?(v13, v14, v15, v11, v12);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      unsigned long long v18 = v25;
      uint64_t v17 = v18 >> 64;
      uint64_t v16 = v18;
      char v19 = BYTE4(v24);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v25, *((uint64_t *)&v25 + 1), SBYTE4(v24));
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v27, sel_setItems_, isa);
      swift_release();
      swift_release();

      outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, v19);
      swift_bridgeObjectRelease();
      long long v21 = static RepresentableContextValues.current;
      long long v22 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v32;
      *((void *)&static RepresentableContextValues.current + 1) = v31;
      *(void *)&xmmword_1EB2E8DA0 = v15;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v28;
      char v23 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v29;
      outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, v19);
    }
  }
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  long long v5 = *(_OWORD *)(a4 + 16);
  long long v42 = *(_OWORD *)a4;
  long long v43 = v5;
  char v44 = *(unsigned char *)(a4 + 32);
  uint64_t v6 = *(void **)(a3 + 80);
  if (v6)
  {
    id v8 = *(void **)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    id v41 = v8;
    MEMORY[0x1F4188790](a1);
    if (v9)
    {
      MEMORY[0x1F4188790](v9);
      id v10 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v11 = v42;
      unsigned __int8 v36 = &v30;
      long long v12 = v43;
      char v13 = v44;
      uint64_t v32 = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v33 = static RepresentableContextValues.current;
      uint64_t v37 = *((void *)&xmmword_1EB2E8DA0 + 1);
      uint64_t v31 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v42;
      xmmword_1EB2E8DA0 = v43;
      int v14 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v44;
      uint64_t v15 = *((void *)&v42 + 1);
      swift_retain();
      swift_retain();
      long long v30 = v12;
      char v16 = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      id v34 = v8;
      swift_retain();
      uint64_t v17 = v15;
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v16);
      uint64_t v19 = v32;
      uint64_t v18 = v33;
      uint64_t v20 = v31;
      uint64_t v21 = v37;
      int v35 = v14;
      outlined copy of RepresentableContextValues?(v33, v32, v31, v37, v14);
      outlined consume of RepresentableContextValues?(v18, v19, v20, v21, v14);
      double v22 = *a5;
      uint64_t v23 = *((void *)a5 + 1);
      v38[0] = v11;
      v38[1] = v17;
      unsigned long long v26 = v30;
      uint64_t v25 = v26 >> 64;
      uint64_t v24 = v26;
      long long v39 = v30;
      char v40 = v16;
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, v25, v16);
      LinearUIKitProgressView.Base.updateUIView(_:context:)(v34, (uint64_t)v38, v23, v22);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v24, v25, v16);
      swift_release();
      long long v27 = static RepresentableContextValues.current;
      long long v28 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v18;
      *((void *)&static RepresentableContextValues.current + 1) = v19;
      *(void *)&xmmword_1EB2E8DA0 = v20;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v37;
      char v29 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v35;
      outlined consume of RepresentableContextValues?(v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v24, v25, v16);
    }
  }
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v30, v26);
  char v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  unsigned __int8 v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  UIKitSearchBarAdaptor.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  char v9 = *((unsigned char *)a1 + 32);
  long long v10 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v6;
  *((void *)&static RepresentableContextValues.current + 1) = v5;
  uint64_t v30 = v6;
  *(void *)&xmmword_1EB2E8DA0 = v7;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v8;
  char v34 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v9;
  uint64_t v11 = v5;
  swift_retain();
  swift_retain();
  char v31 = v9;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  swift_retain();
  uint64_t v12 = v11;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  outlined copy of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v33, v32, v34);
  outlined consume of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v33, v32, v34);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v15 = a2[2];
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  uint64_t v18 = a2[5];
  uint64_t v19 = a2[6];
  uint64_t v20 = a2[8];
  uint64_t v21 = *((unsigned __int8 *)a2 + 72);
  char v22 = (void *)a1[5];
  v35[0] = v30;
  v35[1] = v12;
  v35[2] = v7;
  v35[3] = v8;
  char v36 = v31;
  uint64_t v37 = v22;
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  uint64_t v40 = v15;
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  uint64_t v43 = v18;
  uint64_t v44 = v19;
  uint64_t v45 = a2[7];
  uint64_t v46 = v20;
  uint64_t v23 = v21;
  char v47 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<HoverEffect?>.Content(v20, v23);
  id v28 = v22;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v31);
  SystemSlider.updateUIView(_:context:)(a3, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  outlined consume of Environment<AnyShapeStyle?>.Content(v20, v23);
  long long v24 = static RepresentableContextValues.current;
  long long v25 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v10;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v26 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v34;
  outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  swift_release();
  swift_release();

  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v31);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  long long v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  long long v16;
  long long v17;
  char v18;
  uint64_t v22;
  uint64_t v23;
  unsigned char v24[48];
  uint64_t vars8;

  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v8 = *((unsigned char *)a1 + 32);
  char v9 = static RepresentableContextValues.current;
  long long v10 = static RepresentableContextValues.current;
  uint64_t v23 = xmmword_1EB2E8DA0;
  char v22 = *((void *)&xmmword_1EB2E8DA0 + 1);
  *(void *)&static RepresentableContextValues.current = v5;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v7;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v6;
  uint64_t v11 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  swift_retain();
  swift_retain();
  uint64_t v12 = v6;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  outlined copy of RepresentableContextValues?(v9, *((uint64_t *)&v10 + 1), v23, v22, v11);
  outlined consume of RepresentableContextValues?(v9, *((uint64_t *)&v10 + 1), v23, v22, v11);
  uint64_t v13 = *a2;
  uint64_t v14 = (void *)a1[5];
  swift_bridgeObjectRetain();
  uint64_t v15 = v14;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v12, v8);
  UIKitSegmentedControlAdaptor.updateUIView(_:context:)(a3, (uint64_t)v24, v13);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v12, v8);
  swift_bridgeObjectRelease();

  uint64_t v16 = static RepresentableContextValues.current;
  uint64_t v17 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v10;
  *(void *)&xmmword_1EB2E8DA0 = v23;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v22;
  uint64_t v18 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined consume of RepresentableContextValues?(v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18);
  swift_release();
  swift_release();

  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v12, v8);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, void **a2, void *a3)
{
  long long v24 = a2;
  id v25 = a3;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(unsigned __int8 *)(a1 + 32);
  long long v9 = static RepresentableContextValues.current;
  long long v10 = xmmword_1EB2E8DA0;
  int v23 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = v4;
  *((void *)&static RepresentableContextValues.current + 1) = v5;
  *(void *)&xmmword_1EB2E8DA0 = v6;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v7;
  byte_1EB2E8DB0 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  uint64_t v26 = v4;
  char v11 = v23;
  swift_retain();
  swift_retain();
  uint64_t v27 = v6;
  uint64_t v28 = v7;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  outlined copy of RepresentableContextValues?(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v23);
  uint64_t v31 = *((void *)&v9 + 1);
  uint64_t v32 = v9;
  uint64_t v29 = *((void *)&v10 + 1);
  uint64_t v30 = v10;
  uint64_t v12 = outlined consume of RepresentableContextValues?(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v23);
  uint64_t v13 = *v24;
  if (v8 == 1)
  {
    long long v24 = (void **)&v22;
    MEMORY[0x1F4188790](v12);
    uint64_t v14 = v27;
    swift_retain();
    swift_retain();
    uint64_t v15 = v28;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v28, 1);
    id v16 = v13;
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
    swift_retain();
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v15, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
  }
  else
  {
    id v17 = v13;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = v27;
    uint64_t v15 = v28;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v27, v28, 0);
  }
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(v13, v25);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v18 = static RepresentableContextValues.current;
  long long v19 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v32;
  *((void *)&static RepresentableContextValues.current + 1) = v31;
  *(void *)&xmmword_1EB2E8DA0 = v30;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v29;
  char v20 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v15, v8);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v38 = xmmword_1EB2E8DA0;
  uint64_t v39 = static RepresentableContextValues.current;
  uint64_t v37 = *((void *)&xmmword_1EB2E8DA0 + 1);
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v5;
  *(void *)&xmmword_1EB2E8DA0 = v7;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v6;
  uint64_t v10 = v6;
  char v11 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  char v12 = v8;
  swift_retain();
  swift_retain();
  char v36 = v12;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v10, v12);
  swift_retain();
  swift_retain();
  uint64_t v13 = v10;
  uint64_t v32 = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v10, v12);
  char v34 = v11;
  outlined copy of RepresentableContextValues?(v39, v9, v38, v37, v11);
  outlined consume of RepresentableContextValues?(v39, v9, v38, v37, v11);
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v16 = a2[2];
  uint64_t v17 = a2[3];
  uint64_t v35 = a2[4];
  uint64_t v30 = a2[6];
  uint64_t v31 = a2[5];
  long long v18 = *(void **)(a1 + 40);
  swift_retain();
  long long v19 = v18;
  uint64_t v29 = v19;
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of AppIntentExecutor?(v17);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v13, v36);
  objc_msgSend(a3, sel_setValue_, 0.0);
  double v20 = -2.0;
  if (!v17) {
    double v20 = 0.0;
  }
  objc_msgSend(a3, sel_setMinimumValue_, v20);
  double v21 = 2.0;
  if (!v15) {
    double v21 = 0.0;
  }
  objc_msgSend(a3, sel_setMaximumValue_, v21);
  objc_msgSend(a3, sel_setStepValue_, 1.0);
  uint64_t v22 = &v19[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
  uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8];
  uint64_t v28 = *((void *)v22 + 3);
  *(void *)uint64_t v22 = v14;
  *((void *)v22 + 1) = v15;
  *((void *)v22 + 2) = v16;
  *((void *)v22 + 3) = v17;
  *((void *)v22 + 4) = v35;
  *((void *)v22 + 5) = v31;
  *((void *)v22 + 6) = v30;
  swift_retain();
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of AppIntentExecutor?(v17);
  swift_retain();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v32, v36);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  swift_release();
  long long v24 = static RepresentableContextValues.current;
  long long v25 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v39;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v38;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v37;
  char v26 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v34;
  outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  swift_release();
  swift_release();

  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v32, v36);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  TextViewAdaptor.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v21 = static RepresentableContextValues.current;
  uint64_t v17 = xmmword_1EB2E8DA0;
  uint64_t v20 = *((void *)&xmmword_1EB2E8DA0 + 1);
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  uint64_t v5 = static RepresentableContextValues.current;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v6;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v7;
  char v10 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  outlined copy of RepresentableContextValues?(v21, v9, v17, v20, v10);
  outlined consume of RepresentableContextValues?(v21, v9, v17, v20, v10);
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a2, (uint64_t)v25);
  long long v11 = *(void **)(a1 + 40);
  v22[0] = v5;
  v22[1] = v4;
  v22[2] = v6;
  v22[3] = v7;
  char v23 = v8;
  uint64_t v24 = v11;
  id v12 = v11;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  UIKitPagingView.updateUIView(_:context:)(a3, (uint64_t)v22);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v25);
  long long v13 = static RepresentableContextValues.current;
  long long v14 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v21;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v17;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v20;
  char v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  UIKitTextViewAdaptor.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  long long v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  long long v20;
  long long v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void v34[4];
  char v35;
  void *v36;

  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  KitRepresentable.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  long long v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  void *v20;
  id v21;
  long long v22;
  long long v23;
  char v24;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void v37[4];
  char v38;
  void *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  char v48;
  long long v49;
  uint64_t v50;
  uint64_t vars8;

  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = *((unsigned char *)a1 + 32);
  int v10 = static RepresentableContextValues.current;
  char v35 = *((void *)&xmmword_1EB2E8DA0 + 1);
  long long v11 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v6;
  *((void *)&static RepresentableContextValues.current + 1) = v5;
  *(void *)&xmmword_1EB2E8DA0 = v7;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v8;
  char v36 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v9;
  uint64_t v33 = v5;
  swift_retain();
  swift_retain();
  char v34 = v9;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  uint64_t v31 = v11;
  outlined copy of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v11, v35, v36);
  outlined consume of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v11, v35, v36);
  int v12 = *(unsigned char *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(unsigned char *)(a2 + 25);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(unsigned char *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v27 = v16;
  uint64_t v28 = *(unsigned char *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 80);
  id v19 = *(unsigned char *)(a2 + 24);
  uint64_t v26 = v19;
  uint64_t v40 = *(void *)a2;
  int v29 = v40;
  uint64_t v30 = v12;
  uint64_t v41 = v12;
  uint64_t v42 = v13;
  uint64_t v43 = v19;
  uint64_t v44 = v14;
  uint64_t v45 = v15;
  uint64_t v46 = v16;
  char v47 = v17;
  uint64_t v48 = v28;
  uint64_t v49 = *(_OWORD *)(a2 + 64);
  id v50 = v18;
  long long v20 = (void *)a1[5];
  v37[0] = v6;
  v37[1] = v33;
  v37[2] = v7;
  v37[3] = v8;
  uint64_t v38 = v34;
  uint64_t v39 = v20;
  outlined copy of Environment<Bool>.Content(v40, v12);
  outlined copy of Environment<CGFloat?>.Content(v13, v26, v14);
  outlined copy of Environment<HoverEffect?>.Content(v15, v27);
  outlined copy of Environment<Bool>.Content(v17, v28);
  swift_bridgeObjectRetain();
  swift_retain();
  long long v21 = v20;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v34);
  UIKitPasteControl.updateUIView(_:context:)(a3, (uint64_t)v37);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v34);

  outlined consume of Environment<Bool>.Content(v29, v30);
  outlined consume of Environment<CGFloat?>.Content(v13, v26, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v15, v27);
  outlined consume of Environment<Bool>.Content(v17, v28);
  swift_release();
  swift_bridgeObjectRelease();
  char v22 = static RepresentableContextValues.current;
  char v23 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v10;
  xmmword_1EB2E8DA0 = __PAIR128__(v35, v31);
  uint64_t v24 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v36;
  outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  swift_release();
  swift_release();

  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v34);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  long long v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  long long v20;
  long long v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void v34[4];
  char v35;
  void *v36;

  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  PlatformTextFieldAdaptor.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  long long v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  long long v20;
  long long v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void v34[4];
  char v35;
  void *v36;

  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  UIKitDatePickerRepresentable.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  long long v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  long long v20;
  long long v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void v34[4];
  char v35;
  void *v36;

  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  UIKitCalendarViewRepresentable.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v24 - v5;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  int v10 = *((unsigned __int8 *)a1 + 32);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v32 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v33 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v7;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  int v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  uint64_t v25 = v8;
  HIDWORD(v24) = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v27 = *((void *)&v11 + 1);
  uint64_t v28 = v11;
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  int v29 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v33, v32, v12);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v14, v13, v12);
  uint64_t v15 = v26;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v30, v26);
  uint64_t v16 = (void *)a1[5];
  v34[0] = v7;
  v34[1] = v6;
  uint64_t v17 = v25;
  v34[2] = v25;
  v34[3] = v9;
  uint64_t v18 = v9;
  LOBYTE(v9) = BYTE4(v24);
  char v35 = BYTE4(v24);
  char v36 = v16;
  id v19 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
  UIKitRichTextEditor.updateUIView(_:context:)(v31, (uint64_t)v34);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v15);
  long long v20 = static RepresentableContextValues.current;
  long long v21 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v28;
  *((void *)&static RepresentableContextValues.current + 1) = v27;
  *(void *)&xmmword_1EB2E8DA0 = v33;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v32;
  char v22 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v29;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v9);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, long long *a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  char v8 = *((unsigned char *)a1 + 32);
  uint64_t v9 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v10 = static RepresentableContextValues.current;
  uint64_t v11 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v25 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v5;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v6;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v7;
  char v12 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  uint64_t v13 = v4;
  swift_retain();
  swift_retain();
  char v21 = v8;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  uint64_t v23 = v10;
  outlined copy of RepresentableContextValues?(v10, v9, v25, v11, v12);
  outlined consume of RepresentableContextValues?(v10, v9, v25, v11, v12);
  long long v14 = a2[1];
  long long v29 = *a2;
  long long v30 = v14;
  char v31 = *((unsigned char *)a2 + 32);
  long long v32 = v29;
  uint64_t v15 = (void *)a1[5];
  v26[0] = v5;
  v26[1] = v13;
  v26[2] = v6;
  v26[3] = v7;
  char v27 = v21;
  uint64_t v28 = v15;
  outlined retain of [Text.Modifier]((uint64_t)&v32);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v32 + 8);
  swift_retain();
  id v16 = v15;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v21);
  SystemSegmentedControl.updateUIView(_:context:)(a3, (uint64_t)v26);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v21);

  outlined release of _LazyLayout_Placements((uint64_t)&v32);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v32 + 8);
  swift_release();
  long long v17 = static RepresentableContextValues.current;
  long long v18 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = __PAIR128__(v9, v23);
  *(void *)&xmmword_1EB2E8DA0 = v25;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  char v19 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v21);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, double *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  long long v7 = static RepresentableContextValues.current;
  long long v8 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  uint64_t v16 = static RepresentableContextValues.current;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v5;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v17;
  char v9 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  char v19 = v9;
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  double v10 = *a2;
  uint64_t v11 = *((void *)a2 + 1);
  v21[0] = v16;
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v17;
  char v22 = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v17, v6);
  LinearUIKitProgressView.Base.updateUIView(_:context:)(a3, (uint64_t)v21, v11, v10);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  swift_release();
  long long v12 = static RepresentableContextValues.current;
  long long v13 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v7;
  xmmword_1EB2E8DA0 = v8;
  char v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v19;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

uint64_t (*specialized ViewResponderFilter.preferredFocusableView.getter())()
{
  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for UIKitSearchBar);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISlider);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIStepper);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for VerticalTextView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for PagingCollectionView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for TextEditorTextView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UISearchTextField);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIPasteControl);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIColorWell);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for TextEditorTextView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for UIKitToolbar);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for UIKitTabBarController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for SystemSegmentedControl.UISegmentedControl);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIKBVisualEffectView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIProgressView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UITextField);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIActivityIndicatorView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISplitViewController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIDatePicker);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISegmentedControl);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UICalendarView);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for CustomizableDocumentViewController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISwitch);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v4 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

uint64_t specialized ViewResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _OWORD *Value;
  long long v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  long long v11;
  unsigned int v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  unsigned char v22[24];
  long long v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v20 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  char v6 = *(_DWORD *)(v0 + 12);
  char v7 = AGGraphGetValue();
  *(void *)char v22 = *(void *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  id v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  long long v8 = (void *)MEMORY[0x1E4FBC8C8];
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  int v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v2[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((void *)&v11 + 1) = __PAIR64__(v6, v20);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(void *)&id v23 = v2;
  *((void *)&v23 + 1) = __PAIR64__(v12, v9);
  long long v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  int v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    long long v15 = v13;
    unsigned int v16 = AGGraphGetValue();
    *(void *)&v21[0] = *(void *)(*(void *)(v16 + 80) + *(void *)((*v8 & **(void **)(v16 + 80)) + 0x78));
    uint64_t v17 = *(id *)&v21[0];
    int v14 = ((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v2 + 56))(v14);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    char v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_188351940;
    *(void *)(v19 + 32) = *(void *)(v1 + 24);
    *(void *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _OWORD *Value;
  long long v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  long long v11;
  unsigned int v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  unsigned char v22[24];
  long long v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v20 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  char v6 = *(_DWORD *)(v0 + 12);
  char v7 = AGGraphGetValue();
  *(void *)char v22 = *(void *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  id v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  long long v8 = (void *)MEMORY[0x1E4FBC8C8];
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  int v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v2[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((void *)&v11 + 1) = __PAIR64__(v6, v20);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(void *)&id v23 = v2;
  *((void *)&v23 + 1) = __PAIR64__(v12, v9);
  long long v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  int v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    long long v15 = v13;
    unsigned int v16 = AGGraphGetValue();
    *(void *)&v21[0] = *(void *)(*(void *)(v16 + 56) + *(void *)((*v8 & **(void **)(v16 + 56)) + 0x78));
    uint64_t v17 = *(id *)&v21[0];
    int v14 = ((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v2 + 56))(v14);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    char v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_188351940;
    *(void *)(v19 + 32) = *(void *)(v1 + 24);
    *(void *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t Value;
  long long v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  void *v15;
  id v16[5];

  v16[3] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v1 = *(void **)(v0 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  unsigned int v12 = *(void *)Value;
  uint64_t v3 = *(_OWORD *)(Value + 24);
  long long v13 = *(_OWORD *)(Value + 8);
  int v14 = v3;
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v1[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = specialized ViewResponderFilter.preferredFocusableView.getter();
  char v6 = 0;
  if ((unint64_t)v5 >= 2)
  {
    char v7 = v5;
    long long v8 = AGGraphGetValue();
    outlined init with copy of ScrollableCollection?(v8, (uint64_t)&v12, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    v16[0] = *(id *)((char *)v15 + *(void *)((*v4 & *v15) + 0x78));
    int v9 = v16[0];
    outlined destroy of ScrollableCollection?((uint64_t)&v12, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    char v6 = ((uint64_t (*)(id *))v7)(v16);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v7);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v1 + 56))(v6);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_188351940;
    *(void *)(v11 + 32) = *(void *)(v0 + 24);
    unsigned int v12 = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _OWORD *Value;
  long long v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  long long v11;
  unsigned int v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  unsigned char v22[24];
  long long v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v20 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  char v6 = *(_DWORD *)(v0 + 12);
  char v7 = AGGraphGetValue();
  *(void *)char v22 = *(void *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  id v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  long long v8 = (void *)MEMORY[0x1E4FBC8C8];
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  int v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v2[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((void *)&v11 + 1) = __PAIR64__(v6, v20);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(void *)&id v23 = v2;
  *((void *)&v23 + 1) = __PAIR64__(v12, v9);
  long long v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  int v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    long long v15 = v13;
    unsigned int v16 = AGGraphGetValue();
    *(void *)&v21[0] = *(void *)(*(void *)(v16 + 88) + *(void *)((*v8 & **(void **)(v16 + 88)) + 0x78));
    uint64_t v17 = *(id *)&v21[0];
    int v14 = ((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v2 + 56))(v14);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    char v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_188351940;
    *(void *)(v19 + 32) = *(void *)(v1 + 24);
    *(void *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _OWORD *Value;
  long long v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  long long v11;
  unsigned int v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  unsigned char v22[24];
  long long v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v20 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  char v6 = *(_DWORD *)(v0 + 12);
  char v7 = AGGraphGetValue();
  *(void *)char v22 = *(void *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  id v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  long long v8 = (void *)MEMORY[0x1E4FBC8C8];
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  int v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v2[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((void *)&v11 + 1) = __PAIR64__(v6, v20);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(void *)&id v23 = v2;
  *((void *)&v23 + 1) = __PAIR64__(v12, v9);
  long long v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  int v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    long long v15 = v13;
    unsigned int v16 = AGGraphGetValue();
    *(void *)&v21[0] = *(void *)(*(void *)(v16 + 8) + *(void *)((*v8 & **(void **)(v16 + 8)) + 0x78));
    uint64_t v17 = *(id *)&v21[0];
    int v14 = ((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v2 + 56))(v14);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    char v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_188351940;
    *(void *)(v19 + 32) = *(void *)(v1 + 24);
    *(void *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t Value;
  long long v9;
  uint64_t (*v10)();
  uint64_t v11;
  void *v12;
  uint64_t (*v13)();
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  void *v21;
  id v22[5];

  uint64_t v1 = v0;
  v22[3] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(AGGraphGetValue() + 72);
  uint64_t v3 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x78));
  uint64_t v4 = v2;
  uint64_t v5 = objc_msgSend(v3, sel_view);
  if (!v5) {
    __break(1u);
  }
  char v6 = v5;

  swift_unknownObjectWeakAssign();
  char v7 = *(void **)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  uint64_t v18 = *(void *)Value;
  int v9 = *(_OWORD *)(Value + 24);
  char v19 = *(_OWORD *)(Value + 8);
  uint64_t v20 = v9;
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v7[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v11 = 0;
  unsigned int v12 = (void *)MEMORY[0x1E4FBC8C8];
  if ((unint64_t)v10 >= 2)
  {
    long long v13 = v10;
    int v14 = AGGraphGetValue();
    outlined init with copy of ScrollableCollection?(v14, (uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    v22[0] = *(id *)((char *)v21 + *(void *)((*v12 & *v21) + 0x78));
    long long v15 = v22[0];
    outlined destroy of ScrollableCollection?((uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    uint64_t v11 = ((uint64_t (*)(id *))v13)(v22);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v13);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v7 + 56))(v11);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_188351940;
    *(void *)(v17 + 32) = *(void *)(v1 + 24);
    uint64_t v18 = v17;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  _OWORD *Value;
  char v12;
  long long v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  long long v19;
  unsigned int v20;
  uint64_t (*v21)();
  uint64_t v22;
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  long long v34;
  _OWORD v35[2];
  unsigned char v36[24];
  long long v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  char v31 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(AGGraphGetValue() + *(int *)(v3 + 36));
  char v6 = *(void **)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x78));
  char v7 = v5;
  long long v8 = objc_msgSend(v6, sel_view);
  if (!v8) {
    __break(1u);
  }
  int v9 = v8;

  swift_unknownObjectWeakAssign();
  unsigned int v10 = *(void **)(v1 + 24);
  uint64_t v33 = *(_DWORD *)(v1 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v32 = v12 & 1;
  long long v13 = Value[1];
  v35[0] = *Value;
  v35[1] = v13;
  int v14 = *(_DWORD *)(v1 + 4);
  char v34 = *(_OWORD *)AGGraphGetValue();
  long long v15 = *(_DWORD *)(v1 + 12);
  unsigned int v16 = AGGraphGetValue();
  *(void *)char v36 = *(void *)v16;
  *(_OWORD *)&v36[8] = *(_OWORD *)(v16 + 8);
  uint64_t v37 = *(_OWORD *)(v16 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  uint64_t v17 = *(_DWORD *)(v1 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v10[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(_DWORD *)(v1 + 16);
  LODWORD(v19) = *(_DWORD *)v1;
  DWORD1(v19) = v14;
  *((void *)&v19 + 1) = __PAIR64__(v15, v33);
  uint64_t v20 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v36 = v19;
  *(_DWORD *)&v36[16] = v18;
  *(void *)&uint64_t v37 = v10;
  *((void *)&v37 + 1) = __PAIR64__(v20, v17);
  uint64_t v21 = specialized ViewResponderFilter.preferredFocusableView.getter();
  char v22 = 0;
  id v23 = (void *)MEMORY[0x1E4FBC8C8];
  if ((unint64_t)v21 >= 2)
  {
    uint64_t v24 = v21;
    uint64_t v25 = AGGraphGetValue();
    uint64_t v26 = v31;
    outlined init with copy of ScrollableCollection?(v25, v31, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    int v27 = *(void **)(v26 + *(int *)(v3 + 36));
    *(void *)&v35[0] = *(void *)((char *)v27 + *(void *)((*v23 & *v27) + 0x78));
    unsigned int v28 = *(id *)&v35[0];
    outlined destroy of ScrollableCollection?(v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    char v22 = ((uint64_t (*)(_OWORD *))v24)(v35);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v24);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v10 + 56))(v22);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    long long v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_188351940;
    *(void *)(v30 + 32) = *(void *)(v1 + 24);
    *(void *)&v35[0] = v30;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _OWORD *Value;
  long long v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  long long v11;
  unsigned int v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  unsigned char v22[24];
  long long v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v20 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  char v6 = *(_DWORD *)(v0 + 12);
  char v7 = AGGraphGetValue();
  *(void *)char v22 = *(void *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  id v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  long long v8 = (void *)MEMORY[0x1E4FBC8C8];
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  int v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v2[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((void *)&v11 + 1) = __PAIR64__(v6, v20);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(void *)&id v23 = v2;
  *((void *)&v23 + 1) = __PAIR64__(v12, v9);
  long long v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  int v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    long long v15 = v13;
    unsigned int v16 = AGGraphGetValue();
    *(void *)&v21[0] = *(void *)(*(void *)(v16 + 40) + *(void *)((*v8 & **(void **)(v16 + 40)) + 0x78));
    uint64_t v17 = *(id *)&v21[0];
    int v14 = ((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v2 + 56))(v14);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    char v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_188351940;
    *(void *)(v19 + 32) = *(void *)(v1 + 24);
    *(void *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _OWORD *Value;
  long long v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  long long v11;
  unsigned int v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  unsigned char v22[24];
  long long v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v20 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  char v6 = *(_DWORD *)(v0 + 12);
  char v7 = AGGraphGetValue();
  *(void *)char v22 = *(void *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  id v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  long long v8 = (void *)MEMORY[0x1E4FBC8C8];
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  int v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v2[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((void *)&v11 + 1) = __PAIR64__(v6, v20);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(void *)&id v23 = v2;
  *((void *)&v23 + 1) = __PAIR64__(v12, v9);
  long long v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  int v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    long long v15 = v13;
    unsigned int v16 = AGGraphGetValue();
    *(void *)&v21[0] = *(void *)(*(void *)(v16 + 176) + *(void *)((*v8 & **(void **)(v16 + 176)) + 0x78));
    uint64_t v17 = *(id *)&v21[0];
    int v14 = ((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v2 + 56))(v14);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    char v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_188351940;
    *(void *)(v19 + 32) = *(void *)(v1 + 24);
    *(void *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t Value;
  uint64_t (*v9)();
  uint64_t v10;
  void *v11;
  uint64_t (*v12)();
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  void *v20;
  id v21[5];

  uint64_t v1 = v0;
  v21[3] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(AGGraphGetValue() + 376);
  uint64_t v3 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x78));
  uint64_t v4 = v2;
  uint64_t v5 = objc_msgSend(v3, sel_view);
  if (!v5) {
    __break(1u);
  }
  char v6 = v5;

  swift_unknownObjectWeakAssign();
  char v7 = *(void **)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  uint64_t v17 = *(void *)Value;
  uint64_t v18 = *(_OWORD *)(Value + 8);
  char v19 = *(_OWORD *)(Value + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v7[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v9 = specialized ViewResponderFilter.preferredFocusableView.getter();
  unsigned int v10 = 0;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  if ((unint64_t)v9 >= 2)
  {
    unsigned int v12 = v9;
    long long v13 = AGGraphGetValue();
    outlined init with copy of ScrollableCollection?(v13, (uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    v21[0] = *(id *)((char *)v20 + *(void *)((*v11 & *v20) + 0x78));
    int v14 = v21[0];
    outlined destroy of ScrollableCollection?((uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    unsigned int v10 = ((uint64_t (*)(id *))v12)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v12);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v7 + 56))(v10);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    unsigned int v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_188351940;
    *(void *)(v16 + 32) = *(void *)(v1 + 24);
    uint64_t v17 = v16;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t Value;
  long long v9;
  uint64_t (*v10)();
  uint64_t v11;
  void *v12;
  uint64_t (*v13)();
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  void *v21;
  id v22[5];

  uint64_t v1 = v0;
  v22[3] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(AGGraphGetValue() + 176);
  uint64_t v3 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x78));
  uint64_t v4 = v2;
  uint64_t v5 = objc_msgSend(v3, sel_view);
  if (!v5) {
    __break(1u);
  }
  char v6 = v5;

  swift_unknownObjectWeakAssign();
  char v7 = *(void **)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  uint64_t v18 = *(void *)Value;
  int v9 = *(_OWORD *)(Value + 24);
  char v19 = *(_OWORD *)(Value + 8);
  uint64_t v20 = v9;
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v7[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v10 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v11 = 0;
  unsigned int v12 = (void *)MEMORY[0x1E4FBC8C8];
  if ((unint64_t)v10 >= 2)
  {
    long long v13 = v10;
    int v14 = AGGraphGetValue();
    outlined init with copy of ScrollableCollection?(v14, (uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    v22[0] = *(id *)((char *)v21 + *(void *)((*v12 & *v21) + 0x78));
    long long v15 = v22[0];
    outlined destroy of ScrollableCollection?((uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    uint64_t v11 = ((uint64_t (*)(id *))v13)(v22);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v13);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v7 + 56))(v11);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_188351940;
    *(void *)(v17 + 32) = *(void *)(v1 + 24);
    uint64_t v18 = v17;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  char v7;
  long long v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  _OWORD v30[2];
  unsigned char v31[24];
  long long v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v26 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v0 + 24);
  unsigned int v28 = *(_DWORD *)(v0 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v27 = v7 & 1;
  long long v8 = Value[1];
  v30[0] = *Value;
  v30[1] = v8;
  int v9 = *(_DWORD *)(v0 + 4);
  long long v29 = *(_OWORD *)AGGraphGetValue();
  unsigned int v10 = *(_DWORD *)(v0 + 12);
  uint64_t v11 = AGGraphGetValue();
  *(void *)char v31 = *(void *)v11;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v11 + 8);
  long long v32 = *(_OWORD *)(v11 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v12 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v9;
  *((void *)&v15 + 1) = __PAIR64__(v10, v28);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)char v31 = v15;
  *(_DWORD *)&v31[16] = v14;
  *(void *)&long long v32 = v5;
  *((void *)&v32 + 1) = __PAIR64__(v16, v12);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  if ((unint64_t)v17 >= 2)
  {
    char v19 = v17;
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = v26;
    outlined init with copy of ScrollableCollection?(v20, v26, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    char v22 = *(void **)(v21 + *(int *)(v3 + 36));
    *(void *)&v30[0] = *(void *)((char *)v22 + *(void *)((*v13 & *v22) + 0x78));
    id v23 = *(id *)&v30[0];
    outlined destroy of ScrollableCollection?(v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v19)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v19);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v1 + 24);
    *(void *)&v30[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t Value;
  uint64_t (*v9)();
  uint64_t v10;
  void *v11;
  uint64_t (*v12)();
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  void *v20;
  id v21[5];

  uint64_t v1 = v0;
  v21[3] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(AGGraphGetValue() + 240);
  uint64_t v3 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x78));
  uint64_t v4 = v2;
  uint64_t v5 = objc_msgSend(v3, sel_view);
  if (!v5) {
    __break(1u);
  }
  char v6 = v5;

  swift_unknownObjectWeakAssign();
  char v7 = *(void **)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  uint64_t v17 = *(void *)Value;
  uint64_t v18 = *(_OWORD *)(Value + 8);
  char v19 = *(_OWORD *)(Value + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v7[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v9 = specialized ViewResponderFilter.preferredFocusableView.getter();
  unsigned int v10 = 0;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  if ((unint64_t)v9 >= 2)
  {
    unsigned int v12 = v9;
    long long v13 = AGGraphGetValue();
    outlined init with copy of ScrollableCollection?(v13, (uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    v21[0] = *(id *)((char *)v20 + *(void *)((*v11 & *v20) + 0x78));
    int v14 = v21[0];
    outlined destroy of ScrollableCollection?((uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    unsigned int v10 = ((uint64_t (*)(id *))v12)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v12);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v7 + 56))(v10);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    unsigned int v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_188351940;
    *(void *)(v16 + 32) = *(void *)(v1 + 24);
    uint64_t v17 = v16;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _OWORD *Value;
  long long v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  long long v15;
  unsigned int v16;
  uint64_t (*v17)();
  uint64_t v18;
  void *v19;
  uint64_t (*v20)();
  uint64_t v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  unsigned int v25;
  _OWORD v26[2];
  unsigned char v27[24];
  long long v28;
  uint64_t v29;

  uint64_t v1 = v0;
  long long v29 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = *(void **)(AGGraphGetValue() + 168);
  uint64_t v3 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x78));
  uint64_t v4 = v2;
  uint64_t v5 = objc_msgSend(v3, sel_view);
  if (!v5) {
    __break(1u);
  }
  char v6 = v5;

  swift_unknownObjectWeakAssign();
  char v7 = *(void **)(v1 + 24);
  uint64_t v25 = *(_DWORD *)(v1 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  int v9 = Value[1];
  v26[0] = *Value;
  v26[1] = v9;
  unsigned int v10 = *(_DWORD *)(v1 + 4);
  AGGraphGetValue();
  uint64_t v11 = *(_DWORD *)(v1 + 12);
  unsigned int v12 = AGGraphGetValue();
  *(void *)int v27 = *(void *)v12;
  *(_OWORD *)&v27[8] = *(_OWORD *)(v12 + 8);
  unsigned int v28 = *(_OWORD *)(v12 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  long long v13 = *(_DWORD *)(v1 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v7[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v1 + 16);
  LODWORD(v15) = *(_DWORD *)v1;
  DWORD1(v15) = v10;
  *((void *)&v15 + 1) = __PAIR64__(v11, v25);
  unsigned int v16 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)int v27 = v15;
  *(_DWORD *)&v27[16] = v14;
  *(void *)&unsigned int v28 = v7;
  *((void *)&v28 + 1) = __PAIR64__(v16, v13);
  uint64_t v17 = specialized ViewResponderFilter.preferredFocusableView.getter();
  uint64_t v18 = 0;
  char v19 = (void *)MEMORY[0x1E4FBC8C8];
  if ((unint64_t)v17 >= 2)
  {
    uint64_t v20 = v17;
    uint64_t v21 = AGGraphGetValue();
    *(void *)&v26[0] = *(void *)(*(void *)(v21 + 168) + *(void *)((*v19 & **(void **)(v21 + 168)) + 0x78));
    char v22 = *(id *)&v26[0];
    uint64_t v18 = ((uint64_t (*)(_OWORD *))v20)(v26);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v20);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v7 + 56))(v18);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_188351940;
    *(void *)(v24 + 32) = *(void *)(v1 + 24);
    *(void *)&v26[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ViewResponderFilter.updateValue()(void (*a1)(void), uint64_t (*a2)(uint64_t), void (*a3)(uint64_t (*)(void), uint64_t))
{
  uint64_t v4 = v3;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  a1(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v3 + 24);
  unsigned int v27 = *(_DWORD *)(v3 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v7 = Value[1];
  v29[0] = *Value;
  v29[1] = v7;
  int v8 = *(_DWORD *)(v3 + 4);
  AGGraphGetValue();
  unsigned int v9 = *(_DWORD *)(v3 + 12);
  uint64_t v10 = AGGraphGetValue();
  *(void *)long long v30 = *(void *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  long long v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v11 = *(_DWORD *)(v3 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRelease();
  int v13 = *(_DWORD *)(v4 + 16);
  LODWORD(v14) = *(_DWORD *)v4;
  DWORD1(v14) = v8;
  long long v15 = (void *)MEMORY[0x1E4FBC8C8];
  *((void *)&v14 + 1) = __PAIR64__(v9, v27);
  unsigned int v16 = *(_DWORD *)(v4 + 36);
  *(_OWORD *)long long v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(void *)&long long v31 = v5;
  *((void *)&v31 + 1) = __PAIR64__(v16, v11);
  unint64_t v17 = a2(v12);
  uint64_t v19 = 0;
  if (v17 >= 2)
  {
    uint64_t v20 = (uint64_t (*)(_OWORD *))v17;
    uint64_t v21 = v18;
    uint64_t v22 = AGGraphGetValue();
    *(void *)&v29[0] = *(void *)(*(void *)(v22 + 16) + *(void *)((*v15 & **(void **)(v22 + 16)) + 0x78));
    id v23 = *(id *)&v29[0];
    uint64_t v19 = v20(v29);
    a3((uint64_t (*)(void))v20, v21);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v19);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v4 + 24);
    *(void *)&v29[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *Value;
  long long v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  long long v14;
  void *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_OWORD *);
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  unsigned int v27;
  _OWORD v29[2];
  unsigned char v30[24];
  long long v31;
  uint64_t v32;

  uint64_t v4 = v3;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  a1(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v5 = *(void **)(v3 + 24);
  unsigned int v27 = *(_DWORD *)(v3 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v7 = Value[1];
  v29[0] = *Value;
  v29[1] = v7;
  int v8 = *(_DWORD *)(v3 + 4);
  AGGraphGetValue();
  unsigned int v9 = *(_DWORD *)(v3 + 12);
  uint64_t v10 = AGGraphGetValue();
  *(void *)long long v30 = *(void *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  long long v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v11 = *(_DWORD *)(v3 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v5[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRelease();
  int v13 = *(_DWORD *)(v4 + 16);
  LODWORD(v14) = *(_DWORD *)v4;
  DWORD1(v14) = v8;
  long long v15 = (void *)MEMORY[0x1E4FBC8C8];
  *((void *)&v14 + 1) = __PAIR64__(v9, v27);
  unsigned int v16 = *(_DWORD *)(v4 + 36);
  *(_OWORD *)long long v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(void *)&long long v31 = v5;
  *((void *)&v31 + 1) = __PAIR64__(v16, v11);
  unint64_t v17 = a2(v12);
  uint64_t v19 = 0;
  if (v17 >= 2)
  {
    uint64_t v20 = (uint64_t (*)(_OWORD *))v17;
    uint64_t v21 = v18;
    uint64_t v22 = AGGraphGetValue();
    *(void *)&v29[0] = *(void *)(*(void *)(v22 + 48) + *(void *)((*v15 & **(void **)(v22 + 48)) + 0x78));
    id v23 = *(id *)&v29[0];
    uint64_t v19 = v20(v29);
    a3((uint64_t (*)(void))v20, v21);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v5 + 56))(v19);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_188351940;
    *(void *)(v25 + 32) = *(void *)(v4 + 24);
    *(void *)&v29[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ViewResponderFilter.updateValue()(void (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  a1(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  uint64_t v4 = *(void **)(AGGraphGetValue() + 8);
  uint64_t v5 = *(void **)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78));
  char v6 = v4;
  id v7 = objc_msgSend(v5, sel_view);
  if (!v7) {
    __break(1u);
  }
  int v8 = v7;

  swift_unknownObjectWeakAssign();
  unsigned int v9 = *(void **)(v3 + 24);
  unsigned int v28 = *(_DWORD *)(v3 + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v11 = Value[1];
  v30[0] = *Value;
  v30[1] = v11;
  int v12 = *(_DWORD *)(v3 + 4);
  AGGraphGetValue();
  unsigned int v13 = *(_DWORD *)(v3 + 12);
  uint64_t v14 = AGGraphGetValue();
  *(void *)long long v31 = *(void *)v14;
  *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)(v14 + 8);
  long long v32 = *(_OWORD *)(v14 + 24);
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  unsigned int v15 = *(_DWORD *)(v3 + 32);
  type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v9[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRelease();
  int v17 = *(_DWORD *)(v3 + 16);
  LODWORD(v18) = *(_DWORD *)v3;
  DWORD1(v18) = v12;
  *((void *)&v18 + 1) = __PAIR64__(v13, v28);
  unsigned int v19 = *(_DWORD *)(v3 + 36);
  *(_OWORD *)long long v31 = v18;
  *(_DWORD *)&v31[16] = v17;
  *(void *)&long long v32 = v9;
  *((void *)&v32 + 1) = __PAIR64__(v19, v15);
  unint64_t v20 = a2(v16);
  uint64_t v21 = 0;
  uint64_t v22 = (void *)MEMORY[0x1E4FBC8C8];
  if (v20 >= 2)
  {
    id v23 = (uint64_t (*)(_OWORD *))v20;
    uint64_t v24 = AGGraphGetValue();
    *(void *)&v30[0] = *(void *)(*(void *)(v24 + 8) + *(void *)((*v22 & **(void **)(v24 + 8)) + 0x78));
    id v25 = *(id *)&v30[0];
    uint64_t v21 = v23(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v23);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v9 + 56))(v21);
  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_188351940;
    *(void *)(v27 + 32) = *(void *)(v3 + 24);
    *(void *)&v30[0] = v27;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  type metadata accessor for UIKitSearchBar();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  id v6 = v1;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  id v7 = objc_msgSend(v5, sel_init);
  swift_unknownObjectWeakAssign();
  objc_msgSend(v7, sel_setDelegate_, v6);
  id v8 = objc_msgSend(v7, sel_searchTextField);
  objc_msgSend(v8, sel_setDelegate_, v6);

  id v9 = objc_msgSend(v7, sel_searchTextField);
  objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v6, sel_primaryActionTriggered_, 0x2000);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  unsigned char v12[8];
  unsigned char v13[16];

  uint64_t v2 = v1;
  uint64_t v3 = *(void **)(a1 + 40);
  char v4 = *(void *)(a1 + 16);
  id v5 = *(void *)(a1 + 24);
  id v6 = *(unsigned char *)(a1 + 32);
  id v7 = objc_allocWithZone(MEMORY[0x1E4FB1D70]);
  swift_retain();
  id v8 = v3;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  id v9 = objc_msgSend(v7, sel_init);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<UITextField>((uint64_t)v12, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
  v13[8] = 0;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)v13);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)v13);
  objc_msgSend(v9, sel_setBorderStyle_, *(void *)(v2 + *(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)));
  uint64_t v10 = (void *)MEMORY[0x18C115780](32, 0xE100000000000000);
  objc_msgSend(v9, sel_setText_, v10);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  return v9;
}

void specialized PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(void *a1, uint64_t a2)
{
  long long v4 = v2[1];
  long long v24 = *v2;
  long long v25 = v4;
  long long v26 = v2[2];
  id v5 = *(char **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = MEMORY[0x1E4FBB1A0];
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v26, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v28, (uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for String?, v9);
  uint64_t v10 = v30;
  if (v30)
  {
    uint64_t v11 = v29;
    swift_retain();
    int v12 = v5;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
    uint64_t v10 = (void *)MEMORY[0x18C115780](v11, v10);
  }
  else
  {
    swift_retain();
    unsigned int v13 = v5;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  }
  objc_msgSend(a1, sel_setTitle_, v10, v7, v6);

  objc_msgSend(a1, sel_setSupportsAlpha_, BYTE8(v25));
  uint64_t v14 = (void *)v25;
  uint64_t v27 = v24;
  type metadata accessor for Binding<UIColor>();
  MEMORY[0x18C113DA0](&v23);
  unsigned int v15 = v23;
  objc_msgSend(a1, sel_setSelectedColor_, v23);

  uint64_t v16 = &v5[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent];
  int v17 = *(void **)&v5[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent
                    + 16];
  long long v19 = v25;
  long long v18 = v26;
  *(_OWORD *)uint64_t v16 = v24;
  *((_OWORD *)v16 + 1) = v19;
  *((_OWORD *)v16 + 2) = v18;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v27);
  swift_retain();
  id v20 = v14;
  outlined retain of String?((uint64_t)v28);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v22, v21, v8);
}

uint64_t specialized HVGrid.minorGeometry(updatingSize:)(double *a1, uint64_t a2)
{
  unint64_t v67 = *(void *)(a2 + 16);
  if (!v67) {
    return 0;
  }
  double v3 = *a1;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if ((~*(void *)a1 & 0x7FF0000000000000) == 0) {
    return 0;
  }
  double v69 = *a1;
  uint64_t v68 = 0;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v66 = a2 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  double v10 = v3;
  do
  {
    double v11 = *(double *)(a2 + v8 + 56);
    if (!*(unsigned char *)(a2 + v8 + 48))
    {
      double v10 = v10 - *(double *)(a2 + v8 + 32);
      double v69 = v10;
      if (v7 == 1) {
        goto LABEL_7;
      }
LABEL_13:
      if (*(unsigned char *)(a2 + v8 + 64)) {
        uint64_t result = defaultSpacingValue.getter();
      }
      double v10 = v10 - v11;
      double v69 = v10;
      goto LABEL_7;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      return result;
    }
    uint64_t v68 = v9;
    if (v7 != 1) {
      goto LABEL_13;
    }
LABEL_7:
    v8 += 64;
    --v7;
  }
  while (v7);
  uint64_t v64 = a1;
  double v65 = v3;
  if (*(void *)(v4 + 16) <= v67) {
    int64_t v13 = v67;
  }
  else {
    int64_t v13 = *(void *)(v4 + 16);
  }
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, (char *)v4);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v15 = 0;
  double v16 = 0.0;
  do
  {
    uint64_t v20 = v66 + (v15 << 6);
    double v22 = *(double *)v20;
    double v21 = *(double *)(v20 + 8);
    int v23 = *(unsigned __int8 *)(v20 + 16);
    char v24 = *(unsigned char *)(v20 + 56);
    if (*(unsigned char *)(v20 + 32))
    {
      defaultSpacingValue.getter();
      double v26 = v25;
      if ((v24 & 1) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      double v26 = *(double *)(v20 + 24);
      if ((*(unsigned char *)(v20 + 56) & 1) == 0)
      {
LABEL_26:
        uint64_t result = Alignment.fraction.getter();
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        if (!v23) {
          goto LABEL_42;
        }
        goto LABEL_27;
      }
    }
    lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
    swift_bridgeObjectRetain();
    AlignmentGuide.fraction.getter();
    UnitPoint.init(_:in:by:)();
    uint64_t v28 = v37;
    uint64_t v30 = v38;
    uint64_t result = swift_bridgeObjectRelease();
    if (!v23)
    {
LABEL_42:
      unint64_t v40 = *((void *)v14 + 2);
      unint64_t v39 = *((void *)v14 + 3);
      if (v40 >= v39 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v14);
      }
      *((void *)v14 + 2) = v40 + 1;
      uint64_t v41 = &v14[32 * v40];
      *((double *)v41 + 4) = v16;
      double v17 = v22;
      *((double *)v41 + 5) = v22;
      *((void *)v41 + 6) = v28;
      *((void *)v41 + 7) = v30;
      goto LABEL_21;
    }
LABEL_27:
    double v31 = v22;
    if (v23 == 1)
    {
      if (v22 > v21) {
        goto LABEL_81;
      }
      if (v10 < 0.0) {
        double v32 = 0.0;
      }
      else {
        double v32 = v10;
      }
      double v33 = v32 / (double)v9;
      if (v33 >= v22) {
        double v31 = v33;
      }
      if (v31 <= v21) {
        double v17 = v31;
      }
      else {
        double v17 = v21;
      }
      unint64_t v35 = *((void *)v14 + 2);
      unint64_t v34 = *((void *)v14 + 3);
      if (v35 >= v34 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v14);
      }
      *((void *)v14 + 2) = v35 + 1;
      char v36 = &v14[32 * v35];
      *((double *)v36 + 4) = v16;
      *((double *)v36 + 5) = v17;
      *((void *)v36 + 6) = v28;
      *((void *)v36 + 7) = v30;
    }
    else
    {
      if (v10 < 0.0) {
        double v42 = 0.0;
      }
      else {
        double v42 = v10;
      }
      double v43 = v42 / (double)v9;
      double v44 = floor((v43 - v22) / (v26 + v22));
      if (v44 < 0.0) {
        double v45 = 1.0;
      }
      else {
        double v45 = v44 + 1.0;
      }
      if ((~*(void *)&v45 & 0x7FF0000000000000) == 0) {
        goto LABEL_82;
      }
      if (v45 <= -9.22337204e18) {
        goto LABEL_83;
      }
      if (v45 >= 9.22337204e18) {
        goto LABEL_84;
      }
      uint64_t v46 = (uint64_t)v45;
      if (__OFSUB__((uint64_t)v45, 1)) {
        goto LABEL_85;
      }
      double v47 = (v43 - v26 * (double)((uint64_t)v45 - 1)) / (double)v46;
      if (v47 >= v21) {
        double v48 = v21;
      }
      else {
        double v48 = v47;
      }
      if (v46 < 0) {
        goto LABEL_86;
      }
      if (v46)
      {
        unint64_t v49 = *((void *)v14 + 2);
        uint64_t v50 = 32 * v49 + 32;
        double v17 = 0.0;
        do
        {
          unint64_t v51 = *((void *)v14 + 3);
          unint64_t v52 = v49 + 1;
          if (v49 >= v51 >> 1) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v49 + 1, 1, v14);
          }
          *((void *)v14 + 2) = v52;
          long long v53 = &v14[v50];
          *(double *)long long v53 = v16 + v17;
          *((double *)v53 + 1) = v48;
          *((void *)v53 + 2) = v28;
          *((void *)v53 + 3) = v30;
          --v46;
          double v54 = -0.0;
          if (v46) {
            double v54 = v26;
          }
          double v17 = v48 + v17 + v54;
          v50 += 32;
          unint64_t v49 = v52;
        }
        while (v46);
      }
      else
      {
        double v17 = 0.0;
      }
    }
    double v10 = v69 - v17;
    double v69 = v69 - v17;
    uint64_t v9 = --v68;
LABEL_21:
    uint64_t v18 = v15 + 1;
    double v19 = -0.0;
    if (v15 != v67 - 1) {
      double v19 = v26;
    }
    double v16 = v19 + v16 + v17;
    ++v15;
  }
  while (v18 != v67);
  swift_bridgeObjectRelease();
  if (v65 < v16)
  {
    *uint64_t v64 = v16;
    return *((void *)v14 + 2);
  }
  if (v16 < v65)
  {
    lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
    AlignmentGuide.fraction.getter();
    double v56 = (v65 - v16) * v55;
    if (v56 != 0.0)
    {
      uint64_t v57 = *((void *)v14 + 2);
      if (v57)
      {
        if (v57 == 1)
        {
          uint64_t v58 = 0;
          goto LABEL_77;
        }
        uint64_t v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        long long v59 = (double *)(v14 + 64);
        uint64_t v60 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          double v61 = v56 + *v59;
          *(v59 - 4) = v56 + *(v59 - 4);
          *long long v59 = v61;
          v59 += 8;
          v60 -= 2;
        }
        while (v60);
        if (v57 != v58)
        {
LABEL_77:
          uint64_t v62 = v57 - v58;
          long long v63 = (double *)&v14[32 * v58 + 32];
          do
          {
            *long long v63 = v56 + *v63;
            v63 += 4;
            --v62;
          }
          while (v62);
        }
      }
    }
  }
  return *((void *)v14 + 2);
}

{
  double v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  int v23;
  char v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;

  unint64_t v67 = *(void *)(a2 + 16);
  if (!v67) {
    return 0;
  }
  double v3 = *a1;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if ((~*(void *)a1 & 0x7FF0000000000000) == 0) {
    return 0;
  }
  double v69 = *a1;
  uint64_t v68 = 0;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v66 = a2 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  double v10 = v3;
  do
  {
    double v11 = *(double *)(a2 + v8 + 56);
    if (!*(unsigned char *)(a2 + v8 + 48))
    {
      double v10 = v10 - *(double *)(a2 + v8 + 32);
      double v69 = v10;
      if (v7 == 1) {
        goto LABEL_7;
      }
LABEL_13:
      if (*(unsigned char *)(a2 + v8 + 64)) {
        uint64_t result = defaultSpacingValue.getter();
      }
      double v10 = v10 - v11;
      double v69 = v10;
      goto LABEL_7;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      return result;
    }
    uint64_t v68 = v9;
    if (v7 != 1) {
      goto LABEL_13;
    }
LABEL_7:
    v8 += 64;
    --v7;
  }
  while (v7);
  uint64_t v64 = a1;
  double v65 = v3;
  if (*(void *)(v4 + 16) <= v67) {
    int64_t v13 = v67;
  }
  else {
    int64_t v13 = *(void *)(v4 + 16);
  }
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, (char *)v4);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v15 = 0;
  double v16 = 0.0;
  do
  {
    uint64_t v20 = v66 + (v15 << 6);
    double v22 = *(double *)v20;
    double v21 = *(double *)(v20 + 8);
    int v23 = *(unsigned __int8 *)(v20 + 16);
    char v24 = *(unsigned char *)(v20 + 56);
    if (*(unsigned char *)(v20 + 32))
    {
      defaultSpacingValue.getter();
      double v26 = v25;
      if ((v24 & 1) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      double v26 = *(double *)(v20 + 24);
      if ((*(unsigned char *)(v20 + 56) & 1) == 0)
      {
LABEL_26:
        uint64_t result = Alignment.fraction.getter();
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        if (!v23) {
          goto LABEL_42;
        }
        goto LABEL_27;
      }
    }
    lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
    swift_bridgeObjectRetain();
    AlignmentGuide.fraction.getter();
    UnitPoint.init(_:in:by:)();
    uint64_t v28 = v37;
    uint64_t v30 = v38;
    uint64_t result = swift_bridgeObjectRelease();
    if (!v23)
    {
LABEL_42:
      unint64_t v40 = *((void *)v14 + 2);
      unint64_t v39 = *((void *)v14 + 3);
      if (v40 >= v39 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v14);
      }
      *((void *)v14 + 2) = v40 + 1;
      uint64_t v41 = &v14[32 * v40];
      *((double *)v41 + 4) = v16;
      double v17 = v22;
      *((double *)v41 + 5) = v22;
      *((void *)v41 + 6) = v28;
      *((void *)v41 + 7) = v30;
      goto LABEL_21;
    }
LABEL_27:
    double v31 = v22;
    if (v23 == 1)
    {
      if (v22 > v21) {
        goto LABEL_81;
      }
      if (v10 < 0.0) {
        double v32 = 0.0;
      }
      else {
        double v32 = v10;
      }
      double v33 = v32 / (double)v9;
      if (v33 >= v22) {
        double v31 = v33;
      }
      if (v31 <= v21) {
        double v17 = v31;
      }
      else {
        double v17 = v21;
      }
      unint64_t v35 = *((void *)v14 + 2);
      unint64_t v34 = *((void *)v14 + 3);
      if (v35 >= v34 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v14);
      }
      *((void *)v14 + 2) = v35 + 1;
      char v36 = &v14[32 * v35];
      *((double *)v36 + 4) = v16;
      *((double *)v36 + 5) = v17;
      *((void *)v36 + 6) = v28;
      *((void *)v36 + 7) = v30;
    }
    else
    {
      if (v10 < 0.0) {
        double v42 = 0.0;
      }
      else {
        double v42 = v10;
      }
      double v43 = v42 / (double)v9;
      double v44 = floor((v43 - v22) / (v26 + v22));
      if (v44 < 0.0) {
        double v45 = 1.0;
      }
      else {
        double v45 = v44 + 1.0;
      }
      if ((~*(void *)&v45 & 0x7FF0000000000000) == 0) {
        goto LABEL_82;
      }
      if (v45 <= -9.22337204e18) {
        goto LABEL_83;
      }
      if (v45 >= 9.22337204e18) {
        goto LABEL_84;
      }
      uint64_t v46 = (uint64_t)v45;
      if (__OFSUB__((uint64_t)v45, 1)) {
        goto LABEL_85;
      }
      double v47 = (v43 - v26 * (double)((uint64_t)v45 - 1)) / (double)v46;
      if (v47 >= v21) {
        double v48 = v21;
      }
      else {
        double v48 = v47;
      }
      if (v46 < 0) {
        goto LABEL_86;
      }
      if (v46)
      {
        unint64_t v49 = *((void *)v14 + 2);
        uint64_t v50 = 32 * v49 + 32;
        double v17 = 0.0;
        do
        {
          unint64_t v51 = *((void *)v14 + 3);
          unint64_t v52 = v49 + 1;
          if (v49 >= v51 >> 1) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v49 + 1, 1, v14);
          }
          *((void *)v14 + 2) = v52;
          long long v53 = &v14[v50];
          *(double *)long long v53 = v16 + v17;
          *((double *)v53 + 1) = v48;
          *((void *)v53 + 2) = v28;
          *((void *)v53 + 3) = v30;
          --v46;
          double v54 = -0.0;
          if (v46) {
            double v54 = v26;
          }
          double v17 = v48 + v17 + v54;
          v50 += 32;
          unint64_t v49 = v52;
        }
        while (v46);
      }
      else
      {
        double v17 = 0.0;
      }
    }
    double v10 = v69 - v17;
    double v69 = v69 - v17;
    uint64_t v9 = --v68;
LABEL_21:
    uint64_t v18 = v15 + 1;
    double v19 = -0.0;
    if (v15 != v67 - 1) {
      double v19 = v26;
    }
    double v16 = v19 + v16 + v17;
    ++v15;
  }
  while (v18 != v67);
  swift_bridgeObjectRelease();
  if (v65 < v16)
  {
    *uint64_t v64 = v16;
    return *((void *)v14 + 2);
  }
  if (v16 < v65)
  {
    lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
    AlignmentGuide.fraction.getter();
    double v56 = (v65 - v16) * v55;
    if (v56 != 0.0)
    {
      uint64_t v57 = *((void *)v14 + 2);
      if (v57)
      {
        if (v57 == 1)
        {
          uint64_t v58 = 0;
          goto LABEL_77;
        }
        uint64_t v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        long long v59 = (double *)(v14 + 64);
        uint64_t v60 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          double v61 = v56 + *v59;
          *(v59 - 4) = v56 + *(v59 - 4);
          *long long v59 = v61;
          v59 += 8;
          v60 -= 2;
        }
        while (v60);
        if (v57 != v58)
        {
LABEL_77:
          uint64_t v62 = v57 - v58;
          long long v63 = (double *)&v14[32 * v58 + 32];
          do
          {
            *long long v63 = v56 + *v63;
            v63 += 4;
            --v62;
          }
          while (v62);
        }
      }
    }
  }
  return *((void *)v14 + 2);
}

uint64_t specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a2)
  {
    unint64_t v33 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(result + 16);
    if (!v7) {
      return result;
    }
  }
  else
  {
    unint64_t v33 = 0;
    uint64_t v7 = *(void *)(result + 16);
    if (!v7) {
      return result;
    }
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v26 = a2 + 32;
  uint64_t v31 = result + 32;
  uint64_t v32 = *(void *)(a3 + 16);
  char v28 = a7 & 1;
  uint64_t v30 = v7 - 1;
  uint64_t v10 = a3 + 40;
  double v11 = 0.0;
  double v12 = 0.0;
  while (v32 != v9)
  {
    _ProposedSize.init(_:in:by:)();
    uint64_t v48 = v52;
    LOBYTE(v49) = BYTE8(v52);
    uint64_t v50 = v53;
    char v51 = BYTE8(v53);
    uint64_t result = ProposedViewSize.init(_:)();
    char v14 = v13;
    char v16 = v15;
    if (v9 >= v33)
    {
      long long v55 = 0u;
      memset(v56, 0, sizeof(v56));
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v17 = v8;
      long long v52 = 0u;
    }
    else
    {
      if (!a2) {
        goto LABEL_25;
      }
      if (v9 >= *(void *)(a2 + 16)) {
        goto LABEL_24;
      }
      uint64_t v17 = 96 * v9;
      outlined init with copy of _LazyLayout_Subview(v26 + v8, (uint64_t)&v52);
    }
    outlined init with copy of _LazyLayout_Subview(v31 + v17, (uint64_t)&v48);
    uint64_t v18 = LazyLayoutViewCache.item(data:)((uint64_t)&v50);
    uint64_t v19 = *(void *)(v18 + 32);
    swift_bridgeObjectRetain();
    uint64_t v20 = *(void *)(v18 + 40);
    swift_release();
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v20;
    _ViewOutputs.layoutComputer.getter();
    swift_bridgeObjectRelease();
    LayoutProxy.init(context:layoutComputer:)();
    double v44 = v46;
    int v45 = v47;
    LOBYTE(v39) = v14 & 1;
    LOBYTE(v34) = v16 & 1;
    _ProposedSize.init(_:)();
    *(void *)&long long v34 = v39;
    BYTE8(v34) = BYTE8(v39);
    *(void *)&long long v35 = v40;
    BYTE8(v35) = BYTE8(v40);
    LayoutProxy.lengthThatFits(_:in:)();
    double v22 = v21;
    outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v52, (uint64_t)&v39, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if ((void)v39)
    {
      long long v36 = v41;
      long long v37 = v42;
      v38[0] = v43[0];
      *(_OWORD *)((char *)v38 + 15) = *(_OWORD *)((char *)v43 + 15);
      long long v34 = v39;
      long long v35 = v40;
      closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v34, a6, v28, 0, (uint64_t)&v48, &v46);
      outlined destroy of _LazyLayout_Subview((uint64_t)&v34);
      double v23 = v46;
    }
    else
    {
      double v23 = 0.0;
    }
    outlined destroy of _LazyLayout_Subview((uint64_t)&v48);
    if (v12 <= v22) {
      double v12 = v22;
    }
    if (v11 <= v23) {
      double v11 = v23;
    }
    type metadata accessor for AGGraphRef(0);
    char updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
    uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v52, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if ((updated & 1) == 0)
    {
      v8 += 96;
      v10 += 32;
      if (v30 != v9++) {
        continue;
      }
    }
    return result;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  char updated;
  uint64_t v26;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  _OWORD v38[2];
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  _OWORD v43[2];
  double v44;
  int v45;
  double v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  unsigned char v56[31];

  if (a2)
  {
    unint64_t v33 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(result + 16);
    if (!v7) {
      return result;
    }
  }
  else
  {
    unint64_t v33 = 0;
    uint64_t v7 = *(void *)(result + 16);
    if (!v7) {
      return result;
    }
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v26 = a2 + 32;
  uint64_t v31 = result + 32;
  uint64_t v32 = *(void *)(a3 + 16);
  char v28 = a7 & 1;
  uint64_t v30 = v7 - 1;
  uint64_t v10 = a3 + 40;
  double v11 = 0.0;
  double v12 = 0.0;
  while (v32 != v9)
  {
    _ProposedSize.init(_:in:by:)();
    uint64_t v48 = v52;
    LOBYTE(v49) = BYTE8(v52);
    uint64_t v50 = v53;
    char v51 = BYTE8(v53);
    uint64_t result = ProposedViewSize.init(_:)();
    char v14 = v13;
    char v16 = v15;
    if (v9 >= v33)
    {
      long long v55 = 0u;
      memset(v56, 0, sizeof(v56));
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v17 = v8;
      long long v52 = 0u;
    }
    else
    {
      if (!a2) {
        goto LABEL_25;
      }
      if (v9 >= *(void *)(a2 + 16)) {
        goto LABEL_24;
      }
      uint64_t v17 = 96 * v9;
      outlined init with copy of _LazyLayout_Subview(v26 + v8, (uint64_t)&v52);
    }
    outlined init with copy of _LazyLayout_Subview(v31 + v17, (uint64_t)&v48);
    uint64_t v18 = LazyLayoutViewCache.item(data:)((uint64_t)&v50);
    uint64_t v19 = *(void *)(v18 + 32);
    swift_bridgeObjectRetain();
    uint64_t v20 = *(void *)(v18 + 40);
    swift_release();
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v20;
    _ViewOutputs.layoutComputer.getter();
    swift_bridgeObjectRelease();
    LayoutProxy.init(context:layoutComputer:)();
    double v44 = v46;
    int v45 = v47;
    LOBYTE(v39) = v14 & 1;
    LOBYTE(v34) = v16 & 1;
    _ProposedSize.init(_:)();
    *(void *)&long long v34 = v39;
    BYTE8(v34) = BYTE8(v39);
    *(void *)&long long v35 = v40;
    BYTE8(v35) = BYTE8(v40);
    LayoutProxy.lengthThatFits(_:in:)();
    double v22 = v21;
    outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v52, (uint64_t)&v39, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if ((void)v39)
    {
      long long v36 = v41;
      long long v37 = v42;
      v38[0] = v43[0];
      *(_OWORD *)((char *)v38 + 15) = *(_OWORD *)((char *)v43 + 15);
      long long v34 = v39;
      long long v35 = v40;
      closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v34, a6, v28, 1, (uint64_t)&v48, &v46);
      outlined destroy of _LazyLayout_Subview((uint64_t)&v34);
      double v23 = v46;
    }
    else
    {
      double v23 = 0.0;
    }
    outlined destroy of _LazyLayout_Subview((uint64_t)&v48);
    if (v12 <= v22) {
      double v12 = v22;
    }
    if (v11 <= v23) {
      double v11 = v23;
    }
    type metadata accessor for AGGraphRef(0);
    char updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
    uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v52, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if ((updated & 1) == 0)
    {
      v8 += 96;
      v10 += 32;
      if (v30 != v9++) {
        continue;
      }
    }
    return result;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

id (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (**(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())())(void)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

id specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return FoundationProgressView.Body.BodyAttribute.updateValue()();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
}

{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityScene.IndirectOutputs.updateValue());
}

{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityConfiguration.IndirectOutputs.updateValue());
}

{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue());
}

uint64_t *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return BadgeInfoActionBinding.updateValue()();
}

{
  return ScrollStateActionBinding.updateValue()();
}

void (**specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)())(void)
{
  return UISplitViewControllerProxyModifier.EnsureObservableProxy.updateValue()();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (!*(void *)(a1 + 96))
  {
    id v5 = (id)AGSubgraphGetGraph();
    uint64_t v6 = (void *)AGSubgraphCreate();

    uint64_t v7 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v6;
    id v9 = v6;

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v8 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    a3(a1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in Attribute.setValue(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4FBB390]);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for TableRowList);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityFocus);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityFocusStore);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for FocusStore);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for FocusedValues);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for TableColumnList);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityNodeList);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4FBC848] + 8);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4FBC4C0]);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4F3F560]);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for LazyLayoutCacheItem.State);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for [Scrollable]();

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityScrollableModifier);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityAttachmentModifier);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for ViewIdentity);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4F40EE0]);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4F3F9B8]);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityContainerModifier);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for AccessibilityPlatformViewModifier);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for CGSize(0);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4F404B0]);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4F3FD68]);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for SystemScrollLayoutState);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for BridgedListState(0);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4FBB550]);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for NavigationSplitColumn);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for DocumentBrowserContextMenuStorage);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E4F3F960], MEMORY[0x1E4FBB718]);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for [SceneID : KeyboardShortcut]();

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for [SceneList.Item.Summary], (uint64_t)&type metadata for SceneList.Item.Summary, MEMORY[0x1E4FBB320]);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, &type metadata for ScenePhase);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  return MEMORY[0x1F410B078](a1, a2, MEMORY[0x1E4F41618]);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for WeakBox<UIView>();

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for HostingScrollView();

  return MEMORY[0x1F410B078](a1, a2, v4);
}

uint64_t closure #1 in Attribute.init(type:)@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for External();
  swift_getWitnessTable();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in Attribute.init(type:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init(type:)(a1);
}

uint64_t partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, closure #2 in static _ScrollableLayoutView._makeView(view:inputs:));
}

uint64_t type metadata accessor for _ScrollableLayoutView()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #3 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, closure #3 in static _ScrollableLayoutView._makeView(view:inputs:));
}

uint64_t partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput;
  if (!lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput;
  if (!lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput);
  }
  return result;
}

uint64_t type metadata accessor for ScrollableLayoutState.Value()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ScrollableLayoutViewAdaptor()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in _ScrollableLayoutView<A, B>()
{
  return &protocol witness table for _ScrollableLayoutView<A, B>;
}

uint64_t associated type witness table accessor for _ScrollableContentProvider.Root : View in _ScrollableLayoutView<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for _ScrollableLayoutView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3[4] = v3;
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      v3[5] = *(void *)(result - 8) + 64;
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ScrollableLayoutView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & ~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v15, ((unint64_t)a2 + v10) & v15, v7);
  }
  return v4;
}

uint64_t destroy for _ScrollableLayoutView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (a1 + *(unsigned __int8 *)(v5 + 80) + ((*(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t initializeWithCopy for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  *(void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithCopy for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  *(void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t initializeWithTake for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  *(void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  *(void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollableLayoutView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v11 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  unint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for _ScrollableLayoutView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  size_t v13 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v14 = ((v13 + v11) & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1877C4464);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          if (v7 >= a2)
          {
            double v25 = *(void (**)(void))(v6 + 56);
            v25();
          }
          else if (v13)
          {
            unsigned int v24 = ~v7 + a2;
            bzero(a1, v13);
            *(_DWORD *)a1 = v24;
          }
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13 + v11] & ~v11;
          double v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

void *type metadata accessor for ScrollableItemLayoutComputer()
{
  return &unk_1ED454430;
}

uint64_t destroy for ScrollableLayoutViewAdaptor()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScrollableLayoutViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollableLayoutViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ScrollableLayoutViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutViewAdaptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableLayoutViewAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata completion function for ScrollableLayoutState.Value()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScrollableLayoutState.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 39) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v8 = (_DWORD *)(((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v9 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v8 = *v9;
    unsigned int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v10 = *v11;
    unsigned int v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
    size_t v13 = (_OWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
    long long v14 = v13[2];
    long long v15 = v13[3];
    long long v16 = v13[5];
    v12[4] = v13[4];
    v12[5] = v16;
    v12[2] = v14;
    v12[3] = v15;
    long long v17 = v13[1];
    *unsigned int v12 = *v13;
    v12[1] = v17;
    unsigned int v18 = (void *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFFFF8);
    int v19 = (void *)(((unint64_t)v13 + 103) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v18 = *v19;
    unsigned int v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v20 = *v21;
    unint64_t v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    double v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v24 = v23[1];
    *unint64_t v22 = *v23;
    v22[1] = v24;
    *(_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ScrollableLayoutState.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  uint64_t v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[1];
  _OWORD *v11 = *v12;
  v11[1] = v13;
  long long v15 = v12[4];
  long long v14 = v12[5];
  long long v16 = v12[3];
  v11[2] = v12[2];
  v11[3] = v16;
  v11[4] = v15;
  v11[5] = v14;
  long long v17 = (void *)(((unint64_t)v11 + 103) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v18 = (void *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFFFF8);
  *long long v17 = *v18;
  int v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v19 = *v20;
  int v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = v22[1];
  *int v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)(((unint64_t)v21 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(void *)(v11 + 24) = *(void *)(v12 + 24);
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  *(void *)(v11 + 40) = *(void *)(v12 + 40);
  *(void *)(v11 + 48) = *(void *)(v12 + 48);
  *(void *)(v11 + 56) = *(void *)(v12 + 56);
  *(void *)(v11 + 64) = *(void *)(v12 + 64);
  *(void *)(v11 + 72) = *(void *)(v12 + 72);
  *(void *)(v11 + 80) = *(void *)(v12 + 80);
  *(void *)(v11 + 88) = *(void *)(v12 + 88);
  v11 += 103;
  v12 += 103;
  unint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v11 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v12 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v13;
  v13 += 15;
  *(void *)unint64_t v14 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v16 = (void *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v16 = *(void *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v16[1] = *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  v16[2] = *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
  v16[3] = *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v17 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v18 = (void *)(((v13 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *long long v17 = *v18;
  v17[1] = v18[1];
  return a1;
}

uint64_t initializeWithTake for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[1];
  _OWORD *v11 = *v12;
  v11[1] = v13;
  long long v15 = v12[4];
  long long v14 = v12[5];
  long long v16 = v12[3];
  v11[2] = v12[2];
  v11[3] = v16;
  v11[4] = v15;
  v11[5] = v14;
  long long v17 = (void *)(((unint64_t)v11 + 103) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v18 = (void *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFFFF8);
  *long long v17 = *v18;
  int v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v19 = *v20;
  int v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = v22[1];
  *int v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)(((unint64_t)v21 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (void *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v11 = *v12;
  *(void *)(v11 + 8) = v12[1];
  *(void *)(v11 + 16) = v12[2];
  *(void *)(v11 + 24) = v12[3];
  *(void *)(v11 + 32) = v12[4];
  *(void *)(v11 + 40) = v12[5];
  *(void *)(v11 + 48) = v12[6];
  *(void *)(v11 + 56) = v12[7];
  *(void *)(v11 + 64) = v12[8];
  *(void *)(v11 + 72) = v12[9];
  *(void *)(v11 + 80) = v12[10];
  *(void *)(v11 + 88) = v12[11];
  v11 += 103;
  long long v13 = (void *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v11 & 0xFFFFFFFFFFFFFFF8) = *v13;
  unint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v14 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  v15 += 15;
  *(void *)unint64_t v14 = v16;
  swift_bridgeObjectRelease();
  long long v17 = (void *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v17 = *(void *)(v15 & 0xFFFFFFFFFFFFFFF8);
  v17[1] = *(void *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
  _OWORD v17[2] = *(void *)((v15 & 0xFFFFFFFFFFFFFFF8) + 16);
  _OWORD v17[3] = *(void *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v18 = (void *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  int v19 = (void *)(((v15 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutState.Value(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((((((((((((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 39) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877C5154);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((((((((unint64_t)a1 + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                     + 103) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    long long v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for ScrollableLayoutState.Value(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((((((((((((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v9 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v13)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v10) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v18 = (void *)(((((((((unint64_t)a1 + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                + 11) & 0xFFFFFFFFFFFFFFF8)
                              + 103) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = (a2 - 1);
              }
              *unint64_t v18 = v19;
            }
            else
            {
              long long v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v17(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((((((((((v8 + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 103) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v11 = a3 - v9 + 1;
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((((((((((((v8 + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 103) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v15 = v14;
  else {
    int v15 = 1;
  }
  if (((((((((((((((v8 + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 103) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v16 = ~v9 + a2;
    bzero(a1, v10);
    *a1 = v16;
  }
  switch(v13)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v15;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v15;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1877C53C0);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = v15;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for ScrollableLayoutState()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  BOOL v8 = v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0;
  if (v8
    && (uint64_t v9 = v7 + 3,
        ((((((((((((((v7 + 3 + ((v6 + 48) & ~v6)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    uint64_t v10 = AssociatedTypeWitness;
    *a1 = *a2;
    unsigned int v11 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v12 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v11 = *v12;
    int v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v13 = *v14;
    unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
    *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 + 4);
    long long v17 = *(void **)(v16 + 8);
    *(void *)(v15 + 8) = v17;
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
    uint64_t v18 = (v15 + v6 + 32) & ~v6;
    uint64_t v19 = (v16 + v6 + 32) & ~v6;
    unsigned int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    id v21 = v17;
    swift_bridgeObjectRetain();
    v20(v18, v19, v10);
    unint64_t v22 = (_DWORD *)((v9 + v18) & 0xFFFFFFFFFFFFFFFCLL);
    long long v23 = (_DWORD *)((v9 + v19) & 0xFFFFFFFFFFFFFFFCLL);
    *unint64_t v22 = *v23;
    unint64_t v24 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = ((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v24 = *(_DWORD *)v25;
    *(void *)(v24 + 8) = *(void *)(v25 + 8);
    uint64_t v26 = (void *)((v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (void *)((v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    char v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v28 = *v29;
    uint64_t v30 = (_OWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (_OWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    uint64_t v32 = (_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v33 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    *(_OWORD *)(((unint64_t)v32 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v33 + 39) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v35 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (_DWORD *)(v35 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for ScrollableLayoutState(uint64_t a1)
{
  unint64_t v1 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))((v1 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  double v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  unint64_t v7 = ((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  uint64_t v9 = *(void **)(v8 + 8);
  *(void *)(v7 + 8) = v9;
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  int v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = v11 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 32 + v7) & ~v14;
  uint64_t v16 = (v14 + 32 + v8) & ~v14;
  id v17 = v9;
  swift_bridgeObjectRetain();
  v12(v15, v16, AssociatedTypeWitness);
  uint64_t v18 = *(void *)(v13 + 48) + 3;
  uint64_t v19 = (_DWORD *)((v18 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v20 = (_DWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  long long v23 = (void *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v23 = *v24;
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = *v26;
  uint64_t v27 = (_OWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v28 = (_OWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  uint64_t v29 = (_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  *(_OWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *assignWithCopy for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  double v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v3;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v5;
  unint64_t v7 = ((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  uint64_t v9 = *(void **)(v8 + 8);
  uint64_t v10 = *(void **)(v7 + 8);
  *(void *)(v7 + 8) = v9;
  id v11 = v9;

  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 32 + v7) & ~v15;
  uint64_t v17 = (v15 + 32 + v8) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v16, v17, AssociatedTypeWitness);
  uint64_t v18 = *(void *)(v14 + 40) + 3;
  uint64_t v19 = (_DWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v20 = (_DWORD *)((v18 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v23 = (void *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v23 = *v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  v26 += 15;
  *unint64_t v25 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v28 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *char v28 = *(void *)(v26 & 0xFFFFFFFFFFFFFFF8);
  v28[1] = *(void *)((v26 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v29 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)(((v26 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  _OWORD v29[2] = v30[2];
  v29[3] = v30[3];
  long long v31 = (void *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (void *)(((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFF8);
  *long long v31 = *v32;
  v31[1] = v32[1];
  return a1;
}

_DWORD *initializeWithTake for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  double v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  unint64_t v7 = (_OWORD *)(((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v7 + v13 + 32) & ~v13;
  uint64_t v15 = ((unint64_t)v8 + v13 + 32) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v12 + 32) + 3;
  uint64_t v17 = (_DWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v17 = *v18;
  uint64_t v19 = (_OWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v20 = (_OWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  unint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v21 = *v22;
  long long v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v23 = *v24;
  unint64_t v25 = (_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = *v26;
  uint64_t v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  *(_OWORD *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  double v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v3;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v5;
  unint64_t v7 = ((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  long long v9 = *(void **)(v7 + 8);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);

  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32 + v7) & ~v13;
  uint64_t v15 = (v13 + 32 + v8) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v12 + 24) + 3;
  uint64_t v17 = (_DWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v19 = *(_DWORD *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  swift_bridgeObjectRelease();
  unint64_t v21 = (void *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v21 = *v22;
  swift_bridgeObjectRelease();
  long long v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)v24;
  v24 += 15;
  *long long v23 = v25;
  swift_bridgeObjectRelease();
  unint64_t v26 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
  v26[1] = *(void *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v27 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v28 = (void *)(((v24 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  v27[2] = v28[2];
  v27[3] = v28[3];
  long long v29 = (void *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  *long long v29 = *v30;
  v29[1] = v30[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutState(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v10 = ((((((((((((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v9 + 48) & ~v9) + 3) & 0xFFFFFFFFFFFFFFFCLL)
                    + 11) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v11 = v10 & 0xFFFFFFF8;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = a2 - v8 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v10);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877C617CLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v10);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  unint64_t v18 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0x80000000) != 0)
  {
    unint64_t v20 = *(uint64_t (**)(unint64_t))(v6 + 48);
    return v20((v18 + v9 + 32) & ~v9);
  }
  else
  {
    unint64_t v19 = *(void *)(v18 + 8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
}

void storeEnumTagSinglePayload for ScrollableLayoutState(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((((((((((((*(void *)(v6 + 64) + ((v8 + 48) & ~v8) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v9 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v13)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)((char *)a1 + v10) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            int v17 = (void *)(((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
              v18(((unint64_t)v17 + v8 + 32) & ~v8, a2);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              _OWORD v17[2] = 0;
              _OWORD v17[3] = 0;
              *int v17 = a2 ^ 0x80000000;
              v17[1] = 0;
            }
            else
            {
              v17[1] = (a2 - 1);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((((((((((*(_DWORD *)(v6 + 64) + ((v8 + 48) & ~v8) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v11 = a3 - v9 + 1;
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((((((((((((*(_DWORD *)(v6 + 64) + ((v8 + 48) & ~v8) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v15 = v14;
  else {
    int v15 = 1;
  }
  if (((((((((((((((*(_DWORD *)(v6 + 64) + ((v8 + 48) & ~v8) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v16 = ~v9 + a2;
    bzero(a1, v10);
    *a1 = v16;
  }
  switch(v13)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v15;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v15;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1877C63F8);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = v15;
      break;
    default:
      return;
  }
}

unint64_t lazy protocol witness table accessor for type AnyDynamicItem and conformance AnyDynamicItem()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyDynamicItem and conformance AnyDynamicItem;
  if (!lazy protocol witness table cache variable for type AnyDynamicItem and conformance AnyDynamicItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyDynamicItem and conformance AnyDynamicItem);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ScrollableLayoutState<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877C6498()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScrollableLayoutState.updateValue()()
{
  return closure #1 in ScrollableLayoutState.updateValue()();
}

uint64_t sub_1877C6568()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

double partial apply for closure #2 in ScrollableLayoutState.updateValue()(uint64_t a1)
{
  return closure #2 in ScrollableLayoutState.updateValue()(a1, *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_OWORD *)(v1 + 40), *(void *)(v1 + 56));
}

uint64_t outlined init with copy of _ScrollableLayoutItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of _ScrollableLayoutItem(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of _ScrollableLayoutProxy(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ScrollableLayoutState.TemplateView()
{
  return swift_getGenericMetadata();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  unsigned int v7 = a1;
  unint64_t v8 = HIDWORD(a1);
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  uint64_t v10 = v9;
  uint64_t v31 = v9;
  uint64_t v32 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  *(void *)&long long v30 = __PAIR64__(v8, v7);
  unsigned int v11 = (void *)*a4;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v19 = (void *)*a4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 40 * v13;
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined init with take of OptionalBinaryInteger(&v30, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  unint64_t v19 = (void *)*a4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v10);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (unint64_t *)((char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, double))(v28 + 16))(v27, v25);
  specialized _NativeDictionary._insert(at:key:value:)(v13, a2, *v27, v19);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unsigned int v5 = a3;
  unint64_t v8 = HIDWORD(a3);
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  uint64_t v15 = v9;
  uint64_t v16 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  *(void *)&long long v14 = __PAIR64__(v8, v5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v14, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, void *a13, double (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  return specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, a3, *a4, a4[2], a5, a6, *(void *)a7, *(void *)(a7 + 8), *(void *)(a7 + 16), *(unsigned __int8 *)(a7 + 24) | ((unint64_t)*(unsigned int *)(a7 + 28) << 32), a8, a9, a10, a11, a12 & 1, a13, a14);
}

uint64_t specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, _OWORD *a4@<X6>, uint64_t a5@<X7>, unsigned char *a6@<X8>, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, void, void, unint64_t))
{
  long long v13 = a4[5];
  v19[4] = a4[4];
  v19[5] = v13;
  long long v14 = a4[7];
  v19[6] = a4[6];
  v19[7] = v14;
  long long v15 = a4[1];
  v19[0] = *a4;
  v19[1] = v15;
  long long v16 = a4[3];
  v19[2] = a4[2];
  v19[3] = v16;
  uint64_t Value = AGGraphGetValue();
  uint64_t result = a8(a1, a2, a3, v19, a5, *(void *)Value, *(void *)(Value + 8), *(unsigned __int8 *)(Value + 16) | ((unint64_t)*(unsigned int *)(Value + 20) << 32));
  *a6 = result;
  return result;
}

uint64_t specialized closure #2 in LazySubviewPrefetcher.step(info:)@<X0>(SwiftUI::_LazyLayout_PrefetchResult *a1@<X8>)
{
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  swift_retain();
  SwiftUI::_LazyLayout_PrefetchResult v2 = LazyLayoutViewCache.prefetchOutputs()();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, unsigned char *a6@<X8>, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  long long v12 = *(_OWORD *)(a4 + 80);
  v23[4] = *(_OWORD *)(a4 + 64);
  v23[5] = v12;
  v23[6] = *(_OWORD *)(a4 + 96);
  uint64_t v24 = *(void *)(a4 + 112);
  long long v13 = *(_OWORD *)(a4 + 16);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v13;
  long long v14 = *(_OWORD *)(a4 + 48);
  id v23[2] = *(_OWORD *)(a4 + 32);
  v23[3] = v14;
  uint64_t Value = AGGraphGetValue();
  uint64_t v16 = *(void *)Value;
  uint64_t v17 = *(void *)(Value + 8);
  uint64_t v18 = *(void *)(Value + 16);
  unsigned __int8 v19 = *(unsigned char *)(Value + 24);
  uint64_t v20 = *(unsigned int *)(Value + 28);
  swift_bridgeObjectRetain();
  LOBYTE(a5) = a8(a1, a2, a3, v23, a5, v16, v17, v18, v19 | (unint64_t)(v20 << 32));
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = a5;
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v7 = a2 + 56;
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v28 = a1;
  uint64_t v8 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v6;
  uint64_t v11 = (uint64_t *)(a3 + 16);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_24:
    outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(a2 + 48) + 48 * v16, (uint64_t)v27);
    v26[0] = v27[0];
    v26[1] = v27[1];
    v26[2] = v27[2];
    swift_beginAccess();
    uint64_t v20 = *v11;
    if (*(void *)(*v11 + 16) && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v22 & 1) != 0))
    {
      uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
      swift_endAccess();
      if (*(void *)(v23 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(a4);
        if (v24)
        {
          unint64_t v25 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v25);
        }
      }
    }
    else
    {
      swift_endAccess();
    }
    uint64_t result = outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
  }
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v17 >= v12) {
    goto LABEL_29;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v17);
  ++v14;
  if (v18) {
    goto LABEL_23;
  }
  int64_t v14 = v17 + 1;
  if (v17 + 1 >= v12) {
    goto LABEL_29;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v14);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v14 = v17 + 2;
  if (v17 + 2 >= v12) {
    goto LABEL_29;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v14);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v14 = v17 + 3;
  if (v17 + 3 >= v12) {
    goto LABEL_29;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v14);
  if (v18)
  {
LABEL_23:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_24;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v12)
  {
LABEL_29:
    swift_release();
    return v28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized ScrollableLayoutState.TemplateView.view.setter(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = &v11[-v6];
  int v8 = *v1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v4 + 16))(&v11[-v6], a1, AssociatedTypeWitness, v5);
  uint64_t v13 = AssociatedTypeWitness;
  int v14 = v8;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)_s14AttributeGraph0A0V8setValueySbxFSbSPyxGXEfU_TA_0, (uint64_t)v12, AssociatedTypeWitness, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v9);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t _s14AttributeGraph0A0V8setValueySbxFSbSPyxGXEfU_TA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ScrollableItemIdentifier()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ScrollableItemGeometry()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(uint64_t a1)
{
  return closure #1 in ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(a1);
}

uint64_t partial apply for closure #1 in ScrollableLayoutViewAdaptor.updatedItems()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in ScrollableLayoutViewAdaptor.updatedItems()(a1, v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6], a2, v2[7]);
}

uint64_t type metadata accessor for AnyViewVisitor()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for ScrollableCollection?()
{
  if (!lazy cache variable for type metadata for ScrollableCollection?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?);
    }
  }
}

void type metadata accessor for [Scrollable]()
{
  if (!lazy cache variable for type metadata for [Scrollable])
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable]);
    }
  }
}

void partial apply for closure #1 in PropertiesTransform.updateValue()()
{
}

uint64_t specialized closure #1 in FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(uint64_t a1, BOOL *a2, uint64_t *a3, char a4, uint64_t a5, char **a6, uint64_t a7, void (*a8)(uint64_t), double a9, double a10, double a11)
{
  if (a4) {
    double v18 = a10;
  }
  else {
    double v18 = a9;
  }
  if (a4) {
    double v19 = a9;
  }
  else {
    double v19 = a10;
  }
  uint64_t v20 = _ProposedSize.init(_:)();
  long long v37 = a3;
  double v21 = (a9 + a11) * (double)*a3;
  if (a4) {
    double v22 = 0.0;
  }
  else {
    double v22 = (a9 + a11) * (double)*a3;
  }
  if (a4) {
    double v23 = v21;
  }
  else {
    double v23 = 0.0;
  }
  uint64_t v24 = *(void *)(a5 + 16);
  a8(v20);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  v45.origin.x = v22;
  v45.origin.y = v23;
  v45.size.width = v18;
  v45.size.height = v19;
  UnitPoint.in(_:)(v45);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v25 = LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  uint64_t result = swift_unownedRetainStrong();
  if (result)
  {
    int v27 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v25 + 188) = v27;
    *(_DWORD *)(v25 + 196) = 0;
    uint64_t v28 = *a6;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28);
      *a6 = v28;
    }
    unint64_t v31 = *((void *)v28 + 2);
    unint64_t v30 = *((void *)v28 + 3);
    if (v31 >= v30 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v31 + 1;
    uint64_t v32 = &v28[72 * v31];
    *((void *)v32 + 4) = v25;
    *((void *)v32 + 5) = v24;
    v32[48] = v38;
    *((void *)v32 + 7) = v39;
    v32[64] = v40;
    *((void *)v32 + 9) = v41;
    *((void *)v32 + 10) = v42;
    *((void *)v32 + 11) = v43;
    *((void *)v32 + 12) = v44;
    *a6 = v28;
    uint64_t result = swift_release();
    uint64_t v33 = *v37 + 1;
    if (!__OFADD__(*v37, 1))
    {
      *a2 = v33 == a7;
      *long long v37 = v33;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(uint64_t a1)
{
}

void type metadata accessor for TextSelection?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1877C7AB0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

void type metadata accessor for AnyAccessibilityPropertiesEntry?()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?);
    }
  }
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t result)
{
  uint64_t v1 = *(char **)(result + 16);
  SwiftUI::_LazyLayout_PrefetchResult v2 = (uint64_t *)*((void *)v1 + 2);
  if (v2)
  {
    uint64_t v3 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_22;
    }
    while (1)
    {
      *(void *)(v3 + 16) = v1;
      if (*((void *)v1 + 2))
      {
        uint64_t v4 = 0;
        double v5 = (char *)v2 - 1;
        uint64_t v6 = 32;
        SwiftUI::_LazyLayout_PrefetchResult v2 = &lazy cache variable for type metadata for PlatformItem.PrimaryContent?;
        while (1)
        {
          outlined init with copy of PlatformItem((uint64_t)&v1[v6], (uint64_t)v17);
          outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v18, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v20, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v21) != 1)
          {
            id v7 = v18[0];
            if (v18[0])
            {
              outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v18, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
              outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v15, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
              if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v16) == 1 || !v19)
              {
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v18, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v14) != 1)
                {
                  unint64_t v8 = v19;
                  id v9 = v7;

                  id v19 = v7;
                }
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v18, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v12) != 1)
                {

                  v18[0] = 0;
                }
              }
            }
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 16) = v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
            *(void *)(v3 + 16) = v1;
          }
          if ((unint64_t)v4 >= *((void *)v1 + 2)) {
            break;
          }
          outlined assign with copy of PlatformItem((uint64_t)v17, (uint64_t)&v1[v6]);
          uint64_t result = outlined destroy of PlatformItem((uint64_t)v17);
          if (v5 == v4) {
            return result;
          }
          uint64_t v1 = *(char **)(v3 + 16);
          ++v4;
          v6 += 336;
          if ((unint64_t)v4 >= *((void *)v1 + 2)) {
            goto LABEL_21;
          }
        }
        __break(1u);
      }
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    }
  }
  return result;
}

uint64_t specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned char *a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v28 = v10;
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC860];
  int64_t v12 = (void **)(v10 + 16);
  uint64_t v35 = a1;
  int v33 = 0;
  char v34 = 1;
  char v32 = 3;
  uint64_t result = swift_allocObject();
  uint64_t v14 = result;
  *(void *)(result + 16) = v11;
  uint64_t v15 = (void *)(result + 16);
  int64_t v16 = a4 >> 1;
  uint64_t v17 = (a4 >> 1) - 1;
  if (a4 >> 1 == 1)
  {
LABEL_6:
    BOOL v19 = __OFADD__(a2, v17);
    uint64_t v21 = a2 + v17;
    if (v19)
    {
      __break(1u);
    }
    else
    {
      uint64_t v30 = a1;
      uint64_t v31 = v21;
      MEMORY[0x1F4188790](result);
      uint64_t v22 = outlined init with copy of _ViewList_Node(a3 + 16, (uint64_t)v29);
      MEMORY[0x1F4188790](v22);
      swift_bridgeObjectRetain();
      char v23 = _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v29);
      swift_bridgeObjectRelease();
      *a5 = v23 & 1;
      swift_beginAccess();
      a3 = *(void *)(v14 + 16);
      if (!*(void *)(a3 + 16))
      {
LABEL_12:
        swift_beginAccess();
        uint64_t v27 = *(void *)(v28 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
        return v27;
      }
      swift_beginAccess();
      uint64_t v11 = *v12;
      swift_bridgeObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_9:
        uint64_t v24 = MEMORY[0x1E4FBC860];
        unint64_t v26 = v11[2];
        unint64_t v25 = v11[3];
        if (v26 >= v25 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v11);
        }
        v11[2] = v26 + 1;
        v11[v26 + 4] = a3;
        *int64_t v12 = v11;
        *uint64_t v15 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    goto LABEL_9;
  }
  if (!v16)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v18 = a2 % v16;
  if (!(a2 % v16)) {
    goto LABEL_6;
  }
  BOOL v19 = __OFSUB__(v16, v18);
  uint64_t v20 = v16 - v18;
  if (v19) {
    goto LABEL_16;
  }
  BOOL v19 = __OFADD__(a2, v20);
  a2 += v20;
  if (!v19) {
    goto LABEL_6;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, double (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v22 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  if (!*(void *)(*(void *)(a2 + 16) + 16)) {
    goto LABEL_10;
  }
  char v23 = (unsigned char *)(a5 + 16);
  uint64_t v24 = (uint64_t *)(a10 + 16);
  swift_beginAccess();
  if (*v23)
  {
    uint64_t result = swift_beginAccess();
    *char v23 = 0;
  }
  else
  {
    swift_beginAccess();
    uint64_t v35 = a3;
    uint64_t v26 = *v24;
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    double v28 = a14(v27, v26, a4, a6, a7, a8, a9 & 0xFFFFFFFF00000001);
    double v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(double *)(a11 + 16) = v30 + v28 + *(double *)(a11 + 16);
    swift_beginAccess();
    char v31 = *v24 == 0;
    if (*v24) {
      uint64_t v32 = *(void *)&v30;
    }
    else {
      uint64_t v32 = 0;
    }
    swift_beginAccess();
    uint64_t v33 = v32;
    a3 = v35;
    EstimationCache.add(length:spacing:count:)(v33, v31, 1, v28);
    uint64_t result = swift_endAccess();
  }
  if (!__OFADD__(*a13, a3))
  {
    *a13 += a3;
    swift_beginAccess();
    swift_beginAccess();
    swapSubviews(_:_:)(v24, v22);
    swift_endAccess();
    swift_endAccess();
LABEL_10:
    char HasDeadlinePassed = AGGraphHasDeadlinePassed();
    uint64_t result = swift_beginAccess();
    *(unsigned char *)(a1 + 16) = HasDeadlinePassed;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(uint64_t result, unsigned char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11 = result;
  if (*(unsigned char *)(result + 93) & 1) != 0 || (*(unsigned char *)(result + 94))
  {
    if (!*(void *)(*a3 + 16))
    {
      uint64_t v12 = result + 16;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if (static UserDefaultKeyedFeature.isEnabled.getter())
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Log.LazyLayoutPrefetch.log);
        outlined init with copy of _LazyLayout_Subview(v11, (uint64_t)v35);
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = swift_slowAlloc();
          uint64_t v17 = swift_slowAlloc();
          uint64_t v34 = v17;
          *(_DWORD *)uint64_t v16 = 136446466;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v16 + 12) = 2082;
          _ViewList_ID.canonicalID.getter();
          uint64_t v18 = _ViewList_ID.Canonical.description.getter();
          unint64_t v20 = v19;
          swift_release();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of _LazyLayout_Subview((uint64_t)v35);
          _os_log_impl(&dword_1872C6000, v14, v15, "%{public}s prefetch %{public}s", (uint8_t *)v16, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v17, -1, -1);
          uint64_t v21 = v16;
          uint64_t v12 = v11 + 16;
          MEMORY[0x18C119C60](v21, -1, -1);
        }
        else
        {

          outlined destroy of _LazyLayout_Subview((uint64_t)v35);
        }
      }
      _ProposedSize.init(_:in:by:)();
      uint64_t v31 = ProposedViewSize.init(_:)();
      char v33 = v32;
      LazyLayoutViewCache.item(data:)(v12);
      LOBYTE(v35[0]) = v33 & 1;
      LazyLayoutCacheItem.beginPrefetching(at:)(v31, v33 & 1);
      uint64_t result = swift_release();
    }
LABEL_17:
    *a2 = 1;
    return result;
  }
  outlined init with copy of _LazyLayout_Subview(result, (uint64_t)v35);
  uint64_t v23 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v23;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, (char *)v23);
    uint64_t v23 = result;
    *a3 = result;
  }
  unint64_t v25 = *(void *)(v23 + 16);
  unint64_t v24 = *(void *)(v23 + 24);
  if (v25 >= v24 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, (char *)v23);
    uint64_t v23 = result;
    *a3 = result;
  }
  *(void *)(v23 + 16) = v25 + 1;
  uint64_t v26 = (_OWORD *)(v23 + 96 * v25);
  long long v27 = v35[1];
  v26[2] = v35[0];
  _OWORD v26[3] = v27;
  long long v28 = v35[2];
  long long v29 = v35[3];
  long long v30 = v36[0];
  *(_OWORD *)((char *)v26 + 111) = *(_OWORD *)((char *)v36 + 15);
  v26[5] = v29;
  v26[6] = v30;
  void v26[4] = v28;
  if (*(void *)(*a3 + 16) == a4) {
    goto LABEL_17;
  }
  return result;
}

uint64_t specialized LazySubviewPlacements.logDefaultPlacement(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.scroll.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return outlined destroy of ScrollableCollection?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = a1;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, a3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1872C6000, v12, v13, "%s: Placing default subviews %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v16, -1, -1);
    MEMORY[0x18C119C60](v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
}

uint64_t specialized LazySubviewPlacements.logTranslation(_:reason:)(char a1, double a2, double a3)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.scroll.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return outlined destroy of ScrollableCollection?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = 0xD000000000000013;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v21 = v19;
    *(_DWORD *)uint64_t v15 = 134218498;
    double v20 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    double v20 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    if (a1)
    {
      if (a1 == 1)
      {
        uint64_t v14 = 0xD00000000000001CLL;
        unint64_t v16 = 0x8000000188328AE0;
      }
      else
      {
        unint64_t v16 = 0x8000000188328AC0;
      }
    }
    else
    {
      unint64_t v16 = 0x8000000188328B00;
    }
    double v20 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v21));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1872C6000, v12, v13, "Adjusting content offset by %f, %f for reason: %s.", (uint8_t *)v15, 0x20u);
    uint64_t v17 = v19;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v17, -1, -1);
    MEMORY[0x18C119C60](v15, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;

  type metadata accessor for (translation: CGSize, scale: CGSize)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v18 - v7;
  static Log.scroll.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return outlined destroy of Logger?((uint64_t)v8);
  }
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = 0xD000000000000013;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v21 = v19;
    *(_DWORD *)uint64_t v15 = 134218498;
    double v20 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    double v20 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    if (a1)
    {
      if (a1 == 1)
      {
        uint64_t v14 = 0xD00000000000001CLL;
        unint64_t v16 = 0x8000000188328AE0;
      }
      else
      {
        unint64_t v16 = 0x8000000188328AC0;
      }
    }
    else
    {
      unint64_t v16 = 0x8000000188328B00;
    }
    double v20 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v21));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1872C6000, v12, v13, "Adjusting content offset by %f, %f for reason: %s.", (uint8_t *)v15, 0x20u);
    uint64_t v17 = v19;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v17, -1, -1);
    MEMORY[0x18C119C60](v15, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
}

unint64_t lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

uint64_t partial apply for specialized closure #2 in LazySubviewPrefetcher.step(info:)@<X0>(SwiftUI::_LazyLayout_PrefetchResult *a1@<X8>)
{
  return specialized closure #2 in LazySubviewPrefetcher.step(info:)(a1);
}

void type metadata accessor for Scrollable?()
{
  if (!lazy cache variable for type metadata for Scrollable?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Scrollable?);
    }
  }
}

uint64_t sub_1877CB650()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(uint64_t a1, BOOL *a2)
{
  return partial apply for specialized closure #1 in FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment);
}

{
  return partial apply for specialized closure #1 in FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment);
}

uint64_t outlined retain of PositionState(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of _ViewList_ID??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, unsigned char *a2)
{
  return partial apply for specialized closure #1 in FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment);
}

{
  return partial apply for specialized closure #1 in FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment);
}

unint64_t lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t sub_1877CB89C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(uint64_t a1, BOOL *a2, void (*a3)(uint64_t))
{
  double v5 = *(uint64_t **)(v3 + 16);
  double v6 = *(double *)(v3 + 24);
  char v7 = *(unsigned char *)(v3 + 32);
  double v8 = *(double *)(v3 + 40);
  double v9 = *(double *)(v3 + 48);
  uint64_t v11 = *(void *)(v3 + 56);
  uint64_t v10 = *(char ***)(v3 + 64);
  uint64_t v12 = *(void *)(v3 + 80);
  long long v13 = *(_OWORD *)(v11 + 16);
  v15[0] = *(_OWORD *)v11;
  v15[1] = v13;
  v15[2] = *(_OWORD *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 48);
  return specialized closure #1 in FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(a1, a2, v5, v7, (uint64_t)v15, v10, v12, a3, v6, v8, v9);
}

uint64_t partial apply for specialized closure #1 in FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, unsigned char *a2, void (*a3)(uint64_t))
{
  double v5 = *(double *)(v3 + 16);
  char v6 = *(unsigned char *)(v3 + 24);
  double v7 = *(double *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(void *)(v3 + 48);
  uint64_t v10 = *(uint64_t **)(v3 + 56);
  long long v11 = *(_OWORD *)(v9 + 16);
  v13[0] = *(_OWORD *)v9;
  v13[1] = v11;
  v13[2] = *(_OWORD *)(v9 + 32);
  uint64_t v14 = *(void *)(v9 + 48);
  return specialized closure #1 in FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(a1, a2, v6, v8, (uint64_t)v13, v10, a3, v5, v7);
}

uint64_t outlined init with copy of PlatformItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with copy of PlatformItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PlatformItem(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)((uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, void, void, unint64_t))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:), a1);
}

{
  return partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)((uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, void, void, unint64_t))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:), a1);
}

{
  return partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)((uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:), a1);
}

{
  return partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)((uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:), a1);
}

uint64_t partial apply for specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(uint64_t a1, unsigned char *a2)
{
  return partial apply for specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(a1, a2, 0xD000000000000010, 0x8000000188328BB0);
}

{
  return partial apply for specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(a1, a2, 0xD000000000000010, 0x8000000188328C80);
}

{
  return partial apply for specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(a1, a2, 0x69724748797A614CLL, 0xEF74756F79614C64);
}

{
  return partial apply for specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(a1, a2, 0x69724756797A614CLL, 0xEF74756F79614C64);
}

void type metadata accessor for StackPlacement<LazyVGridLayout>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined release of _LazyLayout_Section(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(uint64_t a1, BOOL *a2)
{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:));
}

{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:));
}

{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:));
}

{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:));
}

uint64_t partial apply for specialized closure #3 in StackPlacement.placeSection(_:from:)(uint64_t a1)
{
  return specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:)(*(void *)(v1 + 24), a1, 2);
}

{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:)(*(void *)(v1 + 24), a1, 2);
}

{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:)(*(void *)(v1 + 24), a1, 2);
}

{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:)(*(void *)(v1 + 24), a1, 2);
}

uint64_t sub_1877CBC04()
{
  return swift_deallocObject();
}

uint64_t sub_1877CBC14()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1877CBC50()
{
  return swift_deallocObject();
}

uint64_t sub_1877CBC60()
{
  return swift_deallocObject();
}

uint64_t sub_1877CBC70()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, void, void, unint64_t)@<X1>, unsigned char *a3@<X8>)
{
  return specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)(*(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 48), *(void *)(v3 + 56), *(_OWORD **)(v3 + 64), *(void *)(v3 + 72), a3, a1, a2);
}

uint64_t partial apply for specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4)
{
  return specialized closure #1 in LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(a1, a2, *(uint64_t **)(v4 + 16), **(void **)(v4 + 24), *(unsigned __int8 *)(v4 + 32), a3, a4);
}

uint64_t partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(uint64_t a1, BOOL *a2, uint64_t (*a3)(void, uint64_t, uint64_t))
{
  uint64_t result = a3(*(void *)(v3 + 24), a1, 1);
  *a2 = (*(unsigned char *)(a1 + 93) & 1) == 0;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t result = a3(*(void *)(v3 + 24), a1, 1);
  *a2 = (*(unsigned char *)(a1 + 93) & 1) == 0;
  return result;
}

uint64_t sub_1877CBDFC()
{
  return swift_deallocObject();
}

uint64_t sub_1877CBE0C()
{
  return swift_deallocObject();
}

uint64_t outlined release of PlatformItem.PrimaryContent(uint64_t a1)
{
  SwiftUI::_LazyLayout_PrefetchResult v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 32);
  double v20 = *(void **)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 104);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v12 = *(_OWORD *)(a1 + 136);
  long long v13 = *(_OWORD *)(a1 + 120);
  long long v10 = *(_OWORD *)(a1 + 168);
  long long v11 = *(_OWORD *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void **)(a1 + 192);

  outlined consume of Image.Resolved?(v20, v19, v18, v17, v16, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((unint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10,
    *((uint64_t *)&v10 + 1),
    v7,
    v8);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout;
  if (!lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout;
  if (!lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout;
  if (!lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyHGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t outlined release of LazyLayoutComputer<LazyHGridLayout>.Engine(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of StackPlacement<LazyHGridLayout>(uint64_t a1)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1877CC2F4()
{
  return swift_deallocObject();
}

void type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?(uint64_t a1)
{
}

void type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)()
{
  if (!lazy cache variable for type metadata for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>))
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PlacementProperties<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>));
    }
  }
}

uint64_t outlined init with copy of StackPlacement<LazyHGridLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of PlacementProperties<LazyHGridLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PlacementProperties<LazyHGridLayout>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout;
  if (!lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout;
  if (!lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout;
  if (!lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyVGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t)@<X1>, unsigned char *a3@<X8>)
{
  return specialized closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)(*(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), a3, a1, a2);
}

uint64_t outlined retain of _LazyStack_Cache<LazyHGridLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of StackPlacement<LazyVGridLayout>(uint64_t a1)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(uint64_t a1, BOOL *a2)
{
  return closure #1 in LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(a1, a2, *(void *)(v2 + 16), *(uint64_t ***)(v2 + 24), *(void *)(v2 + 32), *(uint64_t **)(v2 + 40), *(uint64_t **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_1877CC9A0()
{
  return swift_deallocObject();
}

void type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?(uint64_t a1)
{
}

void type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)()
{
  if (!lazy cache variable for type metadata for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>))
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PlacementProperties<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>));
    }
  }
}

uint64_t outlined init with copy of StackPlacement<LazyVGridLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2, double (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  return specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, *(void *)(v3 + 16), *(uint64_t **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void **)(v3 + 80), *(unsigned char *)(v3 + 88), *(void **)(v3 + 96), a3);
}

uint64_t outlined release of _LazyStack_Cache<LazyHGridLayout>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe(uint64_t result)
{
  if (result != 1) {
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
  }
  return result;
}

void type metadata accessor for UIView?()
{
  if (!lazy cache variable for type metadata for UIView?)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIView?);
    }
  }
}

uint64_t sub_1877CCDB0()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(uint64_t a1)
{
}

void type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(uint64_t a1)
{
}

unint64_t type metadata accessor for NSObject & PlatformAccessibilityElementProtocol()
{
  unint64_t result = lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol;
  if (!lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol);
  }
  return result;
}

uint64_t partial apply for specialized implicit closure #1 in PlatformViewChild.updateValue()()
{
  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000005CLL, 0x8000000188328DC0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000084, 0x8000000188328E70);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000005ALL, 0x8000000188328F00);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000076, 0x8000000188328F60);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000007CLL, 0x8000000188328FE0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000082, 0x8000000188329060);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000008CLL, 0x80000001883290F0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000086, 0x8000000188329180);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000062, 0x8000000188329210);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000008CLL, 0x8000000188329280);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000005BLL, 0x8000000188329310);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000083, 0x8000000188329370);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000034, 0x8000000188329400);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000004ELL, 0x8000000188329440);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000085, 0x8000000188329490);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000068, 0x8000000188329520);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000004DLL, 0x8000000188329590);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000008ELL, 0x80000001883295E0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000068, 0x8000000188329670);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000006FLL, 0x80000001883296E0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000007FLL, 0x8000000188329750);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000007CLL, 0x80000001883297D0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000005DLL, 0x8000000188329850);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000005ELL, 0x80000001883298B0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000088, 0x8000000188329910);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD00000000000007FLL, 0x80000001883299A0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000048, 0x8000000188329A20);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16), 0xD000000000000080, 0x8000000188329A70);
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 72))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    uint64_t v7 = a2[4];
    uint64_t v19 = a2[3];
    uint64_t v8 = a2[5];
    uint64_t v9 = a2[6];
    uint64_t v10 = a2[8];
    uint64_t v11 = *((unsigned __int8 *)a2 + 72);
    long long v12 = (objc_class *)type metadata accessor for Coordinator();
    uint64_t v13 = a2[7];
    long long v14 = objc_allocWithZone(v12);
    v14[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_isUpdating] = 0;
    long long v15 = &v14[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration];
    *(void *)long long v15 = v4;
    *((void *)v15 + 1) = v5;
    *((void *)v15 + 2) = v6;
    *((void *)v15 + 3) = v19;
    *((void *)v15 + 4) = v7;
    *((void *)v15 + 5) = v8;
    *((void *)v15 + 6) = v9;
    *((void *)v15 + 7) = v13;
    *((void *)v15 + 8) = v10;
    v15[72] = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<HoverEffect?>.Content(v10, v11);
    v20.receiver = v14;
    v20.super_class = v12;
    id v16 = objc_msgSendSuper2(&v20, sel_init);
    uint64_t v17 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v16;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  objc_super v16;

  if (!*(void *)(a1 + 72))
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    uint64_t v5 = (void *)a2[2];
    uint64_t v6 = *((unsigned char *)a2 + 24);
    uint64_t v8 = a2[4];
    uint64_t v7 = a2[5];
    uint64_t v9 = (objc_class *)type metadata accessor for BridgedColorPicker.Coordinator();
    uint64_t v10 = (char *)objc_allocWithZone(v9);
    uint64_t v11 = &v10[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent];
    *(void *)uint64_t v11 = v3;
    *((void *)v11 + 1) = v4;
    *((void *)v11 + 2) = v5;
    v11[24] = v6;
    *((void *)v11 + 4) = v8;
    *((void *)v11 + 5) = v7;
    v16.receiver = v10;
    v16.super_class = v9;
    swift_retain();
    swift_retain();
    long long v12 = v5;
    swift_bridgeObjectRetain();
    uint64_t v13 = objc_msgSendSuper2(&v16, sel_init);
    long long v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v13;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  objc_class *v8;
  char *v9;
  char *v10;
  id v11;
  void *v12;
  objc_super v14;

  if (!*(void *)(a1 + 72))
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    uint64_t v6 = a2[3];
    uint64_t v7 = *((unsigned char *)a2 + 32);
    uint64_t v8 = (objc_class *)type metadata accessor for SegmentedControlCoordinator();
    uint64_t v9 = (char *)objc_allocWithZone(v8);
    uint64_t v10 = &v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration];
    *(void *)uint64_t v10 = v3;
    *((void *)v10 + 1) = v4;
    *((void *)v10 + 2) = v5;
    *((void *)v10 + 3) = v6;
    v10[32] = v7;
    *(void *)&v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_itemChanges] = MEMORY[0x1E4FBC860];
    v14.receiver = v9;
    v14.super_class = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v11 = objc_msgSendSuper2(&v14, sel_init);
    long long v12 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v11;
  }
  return *(void *)AGGraphGetValue();
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence);
    }
  }
}

uint64_t sub_1877CE12C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78));
  uint64_t v6 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80);
  uint64_t result = MEMORY[0x18C119DF0](v6);
  if (result)
  {
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v8);
    uint64_t result = swift_unknownObjectRelease();
    if (v10)
    {
      id v11 = objc_msgSend(v1, sel_traitCollection);
      long long v12 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x68));
      swift_beginAccess();
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v31 = v5;
      int v15 = *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0x70));
      id v16 = (char *)v2 + *(void *)((*v4 & *v2) + 0x90);
      uint64_t v17 = *(void *)v16;
      char v30 = a1;
      char v18 = v16[8];
      int v19 = *((_DWORD *)v16 + 3);
      objc_super v20 = (objc_class *)type metadata accessor for EnvironmentWrapper();
      uint64_t v21 = (char *)objc_allocWithZone(v20);
      uint64_t v22 = &v21[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
      *(void *)uint64_t v22 = v13;
      *((void *)v22 + 1) = v14;
      *(_DWORD *)&v21[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v15;
      uint64_t v23 = &v21[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
      *(void *)uint64_t v23 = v17;
      v23[8] = v18;
      *((_DWORD *)v23 + 3) = v19;
      v32.receiver = v21;
      v32.super_class = v20;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      id v24 = objc_msgSendSuper2(&v32, sel_init);
      MEMORY[0x1F4188790](v24);
      unint64_t v25 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
      swift_release();
      swift_release();
      swift_release();

      uint64_t v26 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = v25;
      *(void *)(v27 + 32) = v31;
      *(unsigned char *)(v27 + 40) = v30 & 1;
      swift_retain();
      id v28 = v25;
      id v29 = v31;
      static Update.enqueueAction(_:)();

      swift_release();
      return swift_release();
    }
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    }
  }
}

uint64_t _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&type metadata for OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
  }
  return result;
}

void partial apply for specialized closure #1 in closure #1 in ScrollActionDispatcher.updateValue()(unsigned char *a1@<X8>)
{
  *a1 = **(unsigned char **)(v1 + 24);
}

unint64_t lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>;
  if (!lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&type metadata for OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>);
  }
  return result;
}

uint64_t outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(uint64_t a1)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&type metadata for OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #2 in ScrollActionDispatcher.updateValue()()
{
  return implicit closure #6 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(*(void *)(v0 + 16));
}

uint64_t sub_1877CF1B0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:)()
{
  return closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence);
    }
  }
}

uint64_t outlined init with copy of PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of PlatformItem.SelectionContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PlatformButtonActionTransform(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for UIView?();
    type metadata accessor for NSObject(255, a3);
    uint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  int v9 = *(_DWORD *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  long long v11 = v3[1];
  v14[0] = *v3;
  v14[1] = v11;
  v14[2] = v3[2];
  AGGraphClearUpdate();
  long long v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
  uint64_t result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  long long v11;
  void *v12;
  uint64_t result;
  _OWORD v14[2];
  char v15;

  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  int v9 = *(_DWORD *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  long long v11 = *(_OWORD *)(v3 + 16);
  v14[0] = *(_OWORD *)v3;
  v14[1] = v11;
  int v15 = *(unsigned char *)(v3 + 32);
  AGGraphClearUpdate();
  long long v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
  uint64_t result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  long long v11;
  void *v12;
  uint64_t result;
  _OWORD v14[2];
  char v15;

  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  int v9 = *(_DWORD *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  long long v11 = *(_OWORD *)(v3 + 16);
  v14[0] = *(_OWORD *)v3;
  v14[1] = v11;
  int v15 = *(unsigned char *)(v3 + 32);
  AGGraphClearUpdate();
  long long v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
  uint64_t result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

{
  uint64_t v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  long long v11;
  void *v12;
  uint64_t result;
  _OWORD v14[3];

  uint64_t v3 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  int v9 = *(_DWORD *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  long long v11 = v3[1];
  v14[0] = *v3;
  v14[1] = v11;
  v14[2] = v3[2];
  AGGraphClearUpdate();
  long long v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v14, v4, v5, v6, v7, v8, v9, v10);
  uint64_t result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence);
    }
  }
}

id specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v4 - 8);
  char v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SystemSegmentItem();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  int v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v12 = (void **)((char *)&v45 - v11);
  uint64_t v13 = (void *)a1[5];
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v16 = a1[3];
  int v18 = *((unsigned __int8 *)a1 + 32);
  long long v53 = (char *)a2;
  int64_t v19 = *(void *)(a2 + 16);
  if (!v19)
  {
    swift_retain();
    id v40 = v13;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v16, v18);
    char v39 = v18;
    uint64_t v38 = v16;
    goto LABEL_25;
  }
  uint64_t v45 = v14;
  swift_retain();
  uint64_t v50 = v13;
  id v20 = v13;
  uint64_t v49 = v15;
  swift_retain();
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  int v46 = v18;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v16, v18);
  uint64_t v83 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  uint64_t v21 = (uint64_t)&v53[(*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)];
  long long v53 = v9 + 64;
  uint64_t v22 = *(void *)(v7 + 72);
  uint64_t v52 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v23 = (uint64_t)v51;
  do
  {
    outlined init with copy of ScrollableCollection?(v21, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    id v24 = *v12;
    if (*v12)
    {
      *((void *)&v82 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      *(void *)&long long v81 = v24;
    }
    else
    {
      long long v82 = 0u;
      long long v81 = 0u;
    }
    outlined init with copy of ScrollableCollection?((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    if (*((void *)&v82 + 1))
    {
      outlined init with take of Any(&v81, &v54);
      id v25 = v24;
      goto LABEL_18;
    }
    uint64_t v26 = MEMORY[0x1E4F41550];
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v53, (uint64_t)v67, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v67, (uint64_t)&v68, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v26);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v68) == 1)
    {
      id v27 = v24;
    }
    else
    {
      if (v80)
      {
        id v28 = v24;
        outlined retain of Image.Resolved?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        swift_unknownObjectRetain();
        self;
        uint64_t v29 = swift_dynamicCastObjCClassUnconditional();
        outlined init with copy of ScrollableCollection?((uint64_t)v9, v23, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (v29)
        {
          outlined retain of Image.Resolved?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          outlined destroy of ScrollableCollection?(v23, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_16:
          uint64_t v66 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
          *(void *)&long long v65 = v29;
          outlined init with take of Any(&v65, &v54);
          goto LABEL_17;
        }
      }
      else
      {
        id v30 = v24;
        outlined retain of Image.Resolved?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        outlined init with copy of ScrollableCollection?((uint64_t)v9, v23, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      }
      id v31 = v68;
      char v32 = v69;
      *(void *)&long long v54 = v68;
      BYTE8(v54) = v69;
      long long v55 = v70;
      uint64_t v56 = v71;
      char v57 = v72;
      long long v58 = v73;
      char v59 = v74;
      long long v60 = v75;
      long long v61 = v76;
      char v62 = v77;
      char v63 = v78;
      __int16 v64 = v79;
      uint64_t v33 = *((void *)v51 + 6);
      outlined copy of GraphicsImage.Contents?(v68, v69);
      uint64_t v34 = v33;
      uint64_t v23 = (uint64_t)v51;
      uint64_t v29 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v34);
      outlined retain of Image.Resolved?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      outlined consume of GraphicsImage.Contents?(v31, v32);
      outlined destroy of ScrollableCollection?(v23, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v29) {
        goto LABEL_16;
      }
    }
    *((void *)&v55 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
LABEL_17:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v81, (unint64_t *)&lazy cache variable for type metadata for Any?, v52, MEMORY[0x1E4FBB718]);
LABEL_18:
    outlined destroy of ScrollableCollection?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    outlined destroy of ScrollableCollection?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    uint64_t v35 = v83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1);
      uint64_t v35 = v83;
    }
    unint64_t v37 = *(void *)(v35 + 16);
    unint64_t v36 = *(void *)(v35 + 24);
    if (v37 >= v36 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1);
      uint64_t v35 = v83;
    }
    *(void *)(v35 + 16) = v37 + 1;
    outlined init with take of Any(&v54, (_OWORD *)(v35 + 32 * v37 + 32));
    v21 += v22;
    --v19;
  }
  while (v19);
  uint64_t v13 = v50;
  uint64_t v38 = v47;
  uint64_t v17 = v48;
  char v39 = v46;
LABEL_25:
  id v41 = objc_allocWithZone((Class)type metadata accessor for SystemSegmentedControl.UISegmentedControl());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v43 = objc_msgSend(v41, sel_initWithItems_, isa);

  objc_msgSend(v43, sel_addTarget_action_forControlEvents_, v13, sel_selectionChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v38, v39);

  return v43;
}

uint64_t outlined copy of PasteHelper?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of PasteHelper?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyTuplePhase and conformance EmptyTuplePhase()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase;
  if (!lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase;
  if (!lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase;
  if (!lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventID and conformance EventID()
{
  unint64_t result = lazy protocol witness table cache variable for type EventID and conformance EventID;
  if (!lazy protocol witness table cache variable for type EventID and conformance EventID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventID and conformance EventID);
  }
  return result;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence);
    }
  }
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

void type metadata accessor for Binding<UIColor>()
{
  if (!lazy cache variable for type metadata for Binding<UIColor>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<UIColor>);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence);
    }
  }
}

uint64_t outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 112);
  char v13 = *(unsigned char *)(a1 + 120);
  char v14 = *(unsigned char *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v16 = *(void **)(a1 + 176);
  outlined copy of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v10, v13);
  outlined copy of Environment<Bool>.Content(v15, v14);
  swift_retain();
  id v11 = v16;
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine;
  if (!lazy protocol witness table cache variable for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollViewResponderFilter.updateValue()(uint64_t *a1)
{
  return closure #1 in ScrollViewResponderFilter.updateValue()(a1, v1);
}

uint64_t lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<UInt32>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TemplateViewPhase and conformance TemplateViewPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type TemplateViewPhase and conformance TemplateViewPhase;
  if (!lazy protocol witness table cache variable for type TemplateViewPhase and conformance TemplateViewPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemplateViewPhase and conformance TemplateViewPhase);
  }
  return result;
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init(type:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

uint64_t sub_1877D1BB4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:)(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F410B078](a1, a2, *(void *)(v2 + 16));
}

void *type metadata accessor for TemplateViewPhase()
{
  return &unk_1ED4256C8;
}

void *type metadata accessor for ScrollableItemLayoutComputer._LayoutEngine()
{
  return &unk_1ED4543B0;
}

uint64_t type metadata completion function for AnyViewVisitor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyViewVisitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 32;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    unint64_t v19 = (v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v11 + v18) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
    *(void *)(v19 + 8) = v21;
    *(void *)(v19 + 24) = *(void *)(v20 + 24);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AnyViewVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((*(void *)(v4 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));

  return swift_release();
}

uint64_t initializeWithCopy for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  char v17 = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = v17;
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 8) = v17;
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  return a1;
}

uint64_t initializeWithTake for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  unint64_t v15 = (_OWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  return a1;
}

uint64_t assignWithTake for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_release();
  uint64_t v17 = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 8) = v17;
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyViewVisitor(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v14 = a2 - v10;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877D24B8);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v10 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((v12 + v23) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  if ((v24 + 1) >= 2) {
    return v24;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for AnyViewVisitor(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              unint64_t v24 = *(void (**)(void))(v6 + 56);
              v24();
            }
            else
            {
              unint64_t v25 = (unint64_t)&a1[v13] & ~v11;
              if (v10 == v12)
              {
                uint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
                v26(v25);
              }
              else
              {
                id v27 = (_OWORD *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0x7FFFFFFE)
                {
                  double result = 0.0;
                  *id v27 = 0u;
                  v27[1] = 0u;
                  *(_DWORD *)id v27 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *(void *)id v27 = a2;
                }
              }
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v16 = a3 - v12;
    if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v21 = v20;
  }
  else {
    int v21 = 1;
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    unsigned int v22 = ~v12 + a2;
    bzero(a1, ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x1877D2778);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollableItemGeometry(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollableItemGeometry(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

uint64_t destroy for ScrollableLayoutState.TemplateView(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ScrollableLayoutState.TemplateView(void *a1, void *a2)
{
  *a1 = *a2;
  char v3 = (void *)a2[1];
  uint64_t v4 = a2[2];
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = a2[3];
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollableLayoutState.TemplateView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for ScrollableLayoutState.TemplateView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutState.TemplateView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableLayoutState.TemplateView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ScrollableItemGeometry<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ScrollableItemIdentifier<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877D2A08()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, a3, a4, (uint64_t)&type metadata for InjectKeyModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(uint64_t a1)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence);
    }
  }
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  long long v6 = static RepresentableContextValues.current;
  long long v7 = xmmword_1EB2E8DA0;
  char v8 = byte_1EB2E8DB0;
  uint64_t v18 = *(void *)(a1 + 8);
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v18;
  *(void *)&xmmword_1EB2E8DA0 = v3;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v4;
  byte_1EB2E8DB0 = v5;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  uint64_t v9 = outlined consume of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  unsigned int v10 = *a2;
  if (v5 == 1)
  {
    MEMORY[0x1F4188790](v9);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    swift_retain();
    id v11 = v10;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  }
  else
  {
    swift_retain();
    id v12 = v10;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v3, v4, 0);
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v13 = static RepresentableContextValues.current;
  long long v14 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v6;
  xmmword_1EB2E8DA0 = v7;
  char v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v8;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined retain of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v9 = *(void *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 144);
  unsigned int v10 = *(unsigned __int8 *)(a1 + 160);
  uint64_t v11 = *(void *)(a1 + 152);
  id v12 = *(void **)(a1 + 168);
  outlined copy of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v6);
  outlined copy of Environment<EnvironmentValues>.Content(v9, v8, v7);
  outlined copy of Environment<HoverEffect?>.Content(v11, v10);
  id v4 = v12;
  return a1;
}

uint64_t outlined release of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a1 + 128);
  char v6 = *(unsigned char *)(a1 + 144);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 152);
  uint64_t v11 = *(void **)(a1 + 168);
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  outlined consume of Environment<EnvironmentValues>.Content(v8, v7, v6);
  outlined consume of Environment<AnyShapeStyle?>.Content(v10, v9);

  return a1;
}

uint64_t outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a1 + 128);
  char v6 = *(unsigned char *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 152);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 160);
  outlined copy of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of Environment<EnvironmentValues>.Content(v8, v7, v6);
  outlined copy of Environment<HoverEffect?>.Content(v10, v9);
  return a1;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

uint64_t outlined release of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a1 + 128);
  char v6 = *(unsigned char *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 152);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 160);
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  outlined consume of Environment<EnvironmentValues>.Content(v8, v7, v6);
  outlined consume of Environment<AnyShapeStyle?>.Content(v10, v9);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(uint64_t a1)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>)
  {
    type metadata accessor for External<UInt32>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
    }
  }
}

uint64_t sub_1877D5148()
{
  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    unint64_t v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    if (v1 != 2)
    {
      if (v1 == 1)
      {
LABEL_6:
        swift_release();
        goto LABEL_7;
      }
      if (v1) {
        goto LABEL_7;
      }
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_6;
  }
LABEL_7:

  return swift_deallocObject();
}

void type metadata accessor for (value: AccessibilityScrollableContextModifier, changed: Bool)()
{
  if (!lazy cache variable for type metadata for (value: AccessibilityScrollableContextModifier, changed: Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: AccessibilityScrollableContextModifier, changed: Bool));
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence);
    }
  }
}

uint64_t outlined copy of TabSidebarAccessoryViewConfiguration?(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of PlatformItemCollection.Storage(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  id v6 = v5;
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);

  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>(uint64_t a1)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t (*a1)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(_OWORD **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v10 = *(unsigned int *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 72);
  long long v12 = v4[1];
  v16[0] = *v4;
  v16[1] = v12;
  v16[2] = v4[2];
  AGGraphClearUpdate();
  uint64_t v13 = a1(v16, v5, v6, v7, v8, v9, v10, v11);
  uint64_t result = AGGraphSetUpdate();
  *a2 = v13;
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence);
    }
  }
}

void type metadata accessor for WeakBox<UITextField>()
{
  if (!lazy cache variable for type metadata for WeakBox<UITextField>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITextField);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UITextField>);
    }
  }
}

uint64_t outlined destroy of PlatformTextFieldCoordinator.FieldStorage(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

uint64_t outlined destroy of TextField<_TextFieldStyleLabel>(uint64_t a1)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for ((_:))?(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for (_:)(255, a3, a4);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence);
    }
  }
}

uint64_t objectdestroy_310Tm()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  swift_retain();
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  swift_release();
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for ((_:))?(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    type metadata accessor for (_:)(255, a3, a4);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?)(uint64_t *a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  unint64_t v5 = *a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1)
{
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence);
    }
  }
}

uint64_t closure #1 in RepresentableContextValues.environment.getterpartial apply@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in RepresentableContextValues.environment.getter(a1);
}

uint64_t IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t), unint64_t a8)
{
  type metadata accessor for IntelligenceCollectionCoordinator();
  static IntelligenceCollectionCoordinator.shared.getter();
  uint64_t v16 = IntelligenceCollectionCoordinator.createCollector(remoteContextWrapper:)();
  swift_release();
  collect #1 <A>(into:) in IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(v16, v8, a1, a2, a3, a4, a6, a7, a8);

  return swift_release();
}

uint64_t collect #1 <A>(into:) in IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), unint64_t a9)
{
  if (!CGRectIsEmpty(*(CGRect *)&a3)) {
    IntelligenceSupportProviding<>.collectContent(in:root:fragmentCollector:)(a2, a8, a9, a1, a3, a4, a5, a6);
  }
  type metadata accessor for IntelligenceCollectionCoordinator();
  static IntelligenceCollectionCoordinator.shared.getter();
  IntelligenceCollectionCoordinator.finishCollection(_:)();

  return swift_release();
}

uint64_t IntelligenceSupportProviding<>.collectContent(in:root:fragmentCollector:)(void *a1, void (*a2)(uint64_t, uint64_t), unint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  unint64_t v25 = a3;
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  unsigned int v17 = (char *)&v24 - v16;
  uint64_t v18 = type metadata accessor for IntelligenceElement();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  int v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ViewRendererHost.scrapeContent()();
  v26[0] = v26[1];
  id v22 = a1;
  swift_retain();
  IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)((unint64_t *)v26, v22, a2, v25, a4, v17, a5, a6, a7, a8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1) {
    return outlined destroy of Any?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  IntelligenceFragmentCollector.collect(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>, CGFloat a7@<D0>, CGFloat a8@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>)
{
  id v113 = a2;
  uint64_t v114 = a5;
  v111 = a3;
  unint64_t v112 = a4;
  uint64_t v16 = type metadata accessor for IntelligenceElement.Content();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  v97 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v19 - 8);
  v96 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v95 - v22;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v95 - v25;
  uint64_t v27 = type metadata accessor for IntelligenceElement();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  id v30 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  v109 = (char *)&v95 - v32;
  MEMORY[0x1F4188790](v33);
  v104 = (char *)&v95 - v34;
  MEMORY[0x1F4188790](v35);
  v108 = (char *)&v95 - v36;
  MEMORY[0x1F4188790](v37);
  v103 = (char *)&v95 - v38;
  MEMORY[0x1F4188790](v39);
  id v41 = (char *)&v95 - v40;
  unint64_t v42 = *a1;
  unint64_t v105 = a1[1];
  *(void *)&long long v115 = v42;
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v43 = result;
  }
  else
  {
    uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
  }
  uint64_t v110 = v28;
  v101 = a6;
  v100 = v41;
  uint64_t v99 = v16;
  uint64_t v98 = v17;
  v102 = v30;
  if (v43)
  {
    uint64_t v45 = v115;
    if (v43 < 1)
    {
LABEL_44:
      __break(1u);
      return result;
    }
    uint64_t v46 = 0;
    unint64_t v106 = v115 & 0xC000000000000001;
    uint64_t v107 = v43;
    uint64_t v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    uint64_t v48 = (void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v49 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      if (v106)
      {
        uint64_t v50 = MEMORY[0x18C117680](v46, v45);
      }
      else
      {
        uint64_t v50 = *(void *)(v45 + 8 * v46 + 32);
        swift_retain();
      }
      id v51 = v113;
      uint64_t v52 = v114;
      swift_retain();
      IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(v50, v51, v111, v112, v52, (uint64_t)v26, a7, a8, a9, a10);
      if ((*v47)(v26, 1, v27) == 1)
      {
        outlined destroy of Any?((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
      }
      else
      {
        long long v53 = *v48;
        long long v54 = v103;
        (*v48)(v103, v26, v27);
        v53(v108, v54, v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
        }
        unint64_t v56 = *((void *)v49 + 2);
        unint64_t v55 = *((void *)v49 + 3);
        if (v56 >= v55 >> 1) {
          uint64_t v49 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1, v49);
        }
        *((void *)v49 + 2) = v56 + 1;
        v53(&v49[((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))+ *(void *)(v110 + 72) * v56], v108, v27);
      }
      ++v46;
      uint64_t v45 = v115;
    }
    while (v107 != v46);
  }
  else
  {
    uint64_t v49 = (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  unint64_t v57 = v105;
  v108 = *(char **)(v105 + 16);
  if (v108)
  {
    long long v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
    char v59 = (void (**)(char *, char *, uint64_t))(v110 + 32);
    swift_bridgeObjectRetain();
    long long v60 = 0;
    long long v61 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      long long v115 = *(_OWORD *)(v57 + 16 * (void)v60 + 32);
      long long v116 = v115;
      id v62 = v113;
      uint64_t v63 = v114;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(&v116, v62, v111, v112, v63, a7, a8, a9, a10);
      if ((*v58)(v23, 1, v27) == 1)
      {
        outlined destroy of Any?((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
      }
      else
      {
        __int16 v64 = *v59;
        long long v65 = v104;
        (*v59)(v104, v23, v27);
        v64(v109, v65, v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v61 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v61 + 2) + 1, 1, v61);
        }
        unint64_t v67 = *((void *)v61 + 2);
        unint64_t v66 = *((void *)v61 + 3);
        if (v67 >= v66 >> 1) {
          long long v61 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, v61);
        }
        *((void *)v61 + 2) = v67 + 1;
        v64(&v61[((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))+ *(void *)(v110 + 72) * v67], v109, v27);
        unint64_t v57 = v105;
      }
      ++v60;
    }
    while (v108 != v60);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v61 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v68 = *((void *)v61 + 2);
  uint64_t v69 = *((void *)v49 + 2);
  BOOL v70 = __OFADD__(v68, v69);
  uint64_t v71 = v68 + v69;
  char v72 = v102;
  if (v70)
  {
    __break(1u);
    goto LABEL_44;
  }
  *(void *)&long long v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71 & ~(v71 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v73 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v73);
  uint64_t v74 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v75 = *(void *)(v116 + 16);
  if (v75 <= 1)
  {
    uint64_t v89 = v110;
    if (v75)
    {
      uint64_t v91 = (uint64_t)v96;
      (*(void (**)(char *, unint64_t, uint64_t))(v110 + 16))(v96, v116 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80)), v27);
      v92 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56);
      v92(v91, 0, 1, v27);
    }
    else
    {
      v92 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56);
      uint64_t v91 = (uint64_t)v96;
      v92((uint64_t)v96, 1, 1, v27);
    }
    v90 = v101;
    v93 = v100;

    swift_release();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v91, 1, v27) == 1)
    {
      outlined destroy of Any?(v91, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
      return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v92)(v90, 1, 1, v27);
    }
    v94 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
    v94(v93, v91, v27);
    v94(v90, (uint64_t)v93, v27);
  }
  else
  {
    CGFloat x = *MEMORY[0x1E4F1DB20];
    CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
    uint64_t v81 = v116 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
    uint64_t v82 = *(void *)(v110 + 72);
    uint64_t v83 = (void (**)(char *, uint64_t))(v110 + 8);
    swift_bridgeObjectRetain();
    do
    {
      v80(v72, v81, v27);
      IntelligenceElement.boundingBox.getter();
      v119.origin.CGFloat x = v84;
      v119.origin.CGFloat y = v85;
      v119.size.CGFloat width = v86;
      v119.size.CGFloat height = v87;
      v117.origin.CGFloat x = x;
      v117.origin.CGFloat y = y;
      v117.size.CGFloat width = width;
      v117.size.CGFloat height = height;
      CGRect v118 = CGRectUnion(v117, v119);
      CGFloat x = v118.origin.x;
      CGFloat y = v118.origin.y;
      CGFloat width = v118.size.width;
      CGFloat height = v118.size.height;
      (*v83)(v72, v27);
      v81 += v82;
      --v75;
    }
    while (v75);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v98 + 104))(v97, *MEMORY[0x1E4FB0B68], v99);
    v88 = v100;
    IntelligenceElement.init(boundingBox:content:subelements:)();

    swift_release();
    uint64_t v89 = v110;
    v90 = v101;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v101, v88, v27);
  }
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v90, 0, 1, v27);
}

uint64_t IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, CGFloat height@<D0>, CGFloat width@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>)
{
  unint64_t v205 = a4;
  v204 = a3;
  CGFloat v193 = a10;
  CGFloat v192 = a9;
  uint64_t v190 = a6;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceUserActivity?, MEMORY[0x1E4FB0BC0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8);
  v175 = (char *)&v174 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  v176 = (char *)&v174 - v19;
  uint64_t v189 = type metadata accessor for IntelligenceCollectionRequest();
  uint64_t v177 = *(void *)(v189 - 8);
  MEMORY[0x1F4188790](v189);
  v188 = (char *)&v174 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FB0BB0];
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for CollectionOfOne<IntelligenceElement>, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBBB08]);
  MEMORY[0x1F4188790](v22 - 8);
  v184 = (char *)&v174 - v23;
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceElement?, v21, v15);
  MEMORY[0x1F4188790](v24 - 8);
  v181 = (char *)&v174 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  v191 = (char *)&v174 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v194 = (uint64_t)&v174 - v29;
  MEMORY[0x1F4188790](v30);
  IsEmptdouble y = (uint64_t)&v174 - v31;
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v174 - v34;
  uint64_t v36 = type metadata accessor for IntelligenceElement();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  v186 = (char *)&v174 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  v187 = (char *)&v174 - v40;
  MEMORY[0x1F4188790](v41);
  v183 = (char *)&v174 - v42;
  MEMORY[0x1F4188790](v43);
  v197 = (char *)&v174 - v44;
  MEMORY[0x1F4188790](v45);
  v195 = (void (**)(char *, char *, uint64_t))((char *)&v174 - v46);
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (char *)&v174 - v48;
  MEMORY[0x1F4188790](v50);
  v180 = (char *)&v174 - v51;
  unsigned int v52 = *(_DWORD *)(a1 + 20);
  unint64_t v53 = *(void *)(a1 + 24);
  uint64_t v54 = *(void *)(a1 + 32);
  uint64_t v55 = *(void *)(a1 + 40);
  uint64_t v56 = *(void *)(a1 + 48);
  uint64_t v57 = *(void *)(a1 + 56);
  uint64_t v58 = *(void *)(a1 + 64);
  uint64_t v59 = *(void *)(a1 + 72);
  uint64_t v60 = *(void *)(a1 + 80);
  LODWORD(v179) = *(_DWORD *)(a1 + 16);
  unint64_t v207 = __PAIR64__(v52, v179);
  unsigned int v178 = v52;
  unint64_t v208 = v53;
  uint64_t v209 = v54;
  uint64_t v210 = v55;
  uint64_t v211 = v56;
  uint64_t v212 = v57;
  uint64_t v213 = v58;
  uint64_t v214 = v59;
  uint64_t v215 = v60;
  outlined copy of ScrapeableContent.Content(v53);
  swift_retain();
  id v61 = a2;
  swift_retain();
  IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)((uint64_t)&v207, v61, v204, v205, a5, (uint64_t)v35, height, width, v192, v193);
  id v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  uint64_t v202 = v37 + 48;
  v201 = v62;
  if (v62((uint64_t)v35, 1, v36) != 1)
  {
    v198 = v61;
    uint64_t v185 = a1;
    uint64_t v203 = a5;
    uint64_t v196 = v37;
    long long v65 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
    v182 = v49;
    uint64_t v200 = v37 + 32;
    v199 = v65;
    v65(v49, (uint64_t)v35, v36);
    if (v53 == 0x9000000000000008)
    {
      v206 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v207 = __PAIR64__(v178, v179);
      unint64_t v208 = 0x9000000000000008;
      uint64_t v209 = v54;
      uint64_t v210 = v55;
      uint64_t v211 = v56;
      uint64_t v212 = v57;
      uint64_t v213 = v58;
      uint64_t v214 = v59;
      uint64_t v215 = v60;
      outlined copy of ScrapeableContent.Content(0x9000000000000008);
      swift_retain();
      IsEmptdouble y = (uint64_t)&v207;
      unint64_t v66 = v198;
      double v68 = ScrapeableContent.Item.boundingBox(in:)(v198, v67, v205);
      CGFloat v70 = v69;
      CGFloat v72 = v71;
      CGFloat v74 = v73;
      outlined consume of ScrapeableContent.Content(0x9000000000000008);
      swift_release();
      v216.origin.double x = v68;
      v216.origin.double y = v70;
      v216.size.CGFloat width = v72;
      v216.size.CGFloat height = v74;
      v223.origin.double x = height;
      v223.origin.double y = width;
      v223.size.CGFloat width = v192;
      v223.size.CGFloat height = v193;
      CGRect v217 = CGRectIntersection(v216, v223);
      double x = v217.origin.x;
      double y = v217.origin.y;
      CGFloat width = v217.size.width;
      CGFloat height = v217.size.height;
      uint64_t v77 = v185;
      swift_beginAccess();
      unint64_t v78 = *(void *)(v77 + 88);
      if (v78 >> 62) {
        goto LABEL_85;
      }
      uint64_t v79 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
LABEL_6:
      uint64_t v80 = (uint64_t)v191;
      if (!v79)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        v100 = v206;
        goto LABEL_44;
      }
      unint64_t v81 = v79 - 1;
      if (!__OFSUB__(v79, 1))
      {
        v197 = (char *)(v78 & 0xC000000000000001);
        *(void *)&CGFloat v192 = v78 & 0xFFFFFFFFFFFFFF8;
        unint64_t v179 = v78 + 32;
        v195 = (void (**)(char *, char *, uint64_t))(v196 + 16);
        *(void *)&CGFloat v193 = v196 + 8;
        uint64_t v82 = (void (**)(char *, uint64_t))(v177 + 8);
        do
        {
          if (v197)
          {
            uint64_t v83 = MEMORY[0x18C117680](v81, v78);
            IsEmptdouble y = v203;
          }
          else
          {
            IsEmptdouble y = v203;
            if ((v81 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              swift_bridgeObjectRetain();
              uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
              goto LABEL_6;
            }
            if (v81 >= *(void *)(*(void *)&v192 + 16)) {
              goto LABEL_84;
            }
            uint64_t v83 = *(void *)(v179 + 8 * v81);
            swift_retain();
          }
          id v84 = v66;
          swift_retain();
          uint64_t v85 = swift_retain();
          uint64_t v86 = v194;
          IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(v85, v84, v204, v205, IsEmpty, x, y, width, height);
          outlined init with copy of Any?(v86, v80, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for IntelligenceElement?);
          if (v201(v80, 1, v36) == 1)
          {
            outlined destroy of Any?(v80, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
          }
          else
          {
            CGFloat v87 = v183;
            v199(v183, v80, v36);
            uint64_t v88 = (uint64_t)v184;
            (*v195)(v184, v87, v36);
            specialized Array.replaceSubrange<A>(_:with:)(0, 0, v88);
            (**(void (***)(char *, uint64_t))&v193)(v87, v36);
          }
          double x = specialized static IntelligenceElement._updatedUncoveredVisibleRect(_:for:in:)(v83, v84, x, y, width, height, (uint64_t)v204, v205);
          double y = v89;
          CGFloat width = v90;
          CGFloat height = v91;
          IntelligenceFragmentCollector.context.getter();
          __swift_project_boxed_opaque_existential_1(&v207, v210);
          v92 = v188;
          dispatch thunk of IntelligenceCollectionContext.request.getter();
          IsEmptdouble y = IntelligenceCollectionRequest.includeVisibleElementsOnly.getter();
          (*v82)(v92, v189);
          if (IsEmpty)
          {
            v218.origin.double x = x;
            v218.origin.double y = y;
            v218.size.CGFloat width = width;
            v218.size.CGFloat height = height;
            IsEmptdouble y = CGRectIsEmpty(v218);
            swift_release();
            outlined destroy of Any?(v194, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v207);
            uint64_t v80 = (uint64_t)v191;
            if ((IsEmpty & 1) != 0 || !v81) {
              goto LABEL_41;
            }
          }
          else
          {
            outlined destroy of Any?(v194, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v207);
            uint64_t v80 = (uint64_t)v191;
            if (!v81) {
              goto LABEL_41;
            }
          }
        }
        while (!__OFSUB__(v81--, 1));
      }
      __break(1u);
    }
    uint64_t v94 = v185;
    swift_beginAccess();
    unint64_t v95 = *(void *)(v94 + 88);
    if (v95 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v96 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
    }
    unint64_t v66 = v198;
    double v97 = v193;
    double v98 = v192;
    if (v96)
    {
      if (v96 < 1)
      {
        __break(1u);
        JUMPOUT(0x1877DB30CLL);
      }
      uint64_t v99 = 0;
      v100 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        if ((v95 & 0xC000000000000001) != 0)
        {
          uint64_t v101 = MEMORY[0x18C117680](v99, v95);
        }
        else
        {
          uint64_t v101 = *(void *)(v95 + 8 * v99 + 32);
          swift_retain();
        }
        id v102 = v66;
        uint64_t v103 = v203;
        swift_retain();
        IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(v101, v102, v204, v205, v103, height, width, v98, v97);
        if (v201(IsEmpty, 1, v36) == 1)
        {
          outlined destroy of Any?(IsEmpty, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
          unint64_t v66 = v198;
        }
        else
        {
          v104 = v195;
          unint64_t v105 = v199;
          v199((char *)v195, IsEmpty, v36);
          v105(v197, (uint64_t)v104, v36);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v100 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v100 + 2) + 1, 1, v100);
          }
          unint64_t v66 = v198;
          unint64_t v107 = *((void *)v100 + 2);
          unint64_t v106 = *((void *)v100 + 3);
          if (v107 >= v106 >> 1) {
            v100 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1, v100);
          }
          *((void *)v100 + 2) = v107 + 1;
          v199(&v100[((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80))+ *(void *)(v196 + 72) * v107], (uint64_t)v197, v36);
        }
        ++v99;
      }
      while (v96 != v99);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v100 = (char *)MEMORY[0x1E4FBC860];
    }
LABEL_44:
    uint64_t v108 = *((void *)v100 + 2);
    uint64_t v37 = v196;
    v109 = v187;
    if (v108)
    {
      uint64_t v110 = *(void (**)(char *, char *, uint64_t))(v196 + 16);
      unint64_t v111 = (*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80);
      v110(v187, &v100[v111], v36);
      if (*((void *)v100 + 2) == 1)
      {
        unint64_t v112 = *(void *)(v185 + 24);
        switch(v112 >> 60)
        {
          case 3uLL:
            unint64_t v205 = *(void *)(v185 + 24);
            swift_retain();
            swift_bridgeObjectRelease();
            IntelligenceElement.appEntityIdentifier.getter();
            if (v113)
            {
              uint64_t v64 = v190;
              uint64_t v37 = v196;
              uint64_t v114 = v182;
            }
            else
            {
              uint64_t v114 = v182;
              IntelligenceElement.appEntityIdentifier.getter();
              uint64_t v64 = v190;
              uint64_t v37 = v196;
            }
            IntelligenceElement.appEntityIdentifier.setter();
            goto LABEL_72;
          case 4uLL:
            unint64_t v205 = *(void *)(v185 + 24);
            swift_retain();
            swift_bridgeObjectRelease();
            IntelligenceElement.appIntentIdentifier.getter();
            if (v115)
            {
              uint64_t v64 = v190;
              uint64_t v37 = v196;
              uint64_t v114 = v182;
            }
            else
            {
              uint64_t v114 = v182;
              IntelligenceElement.appIntentIdentifier.getter();
              uint64_t v64 = v190;
              uint64_t v37 = v196;
            }
            IntelligenceElement.appIntentIdentifier.setter();
            goto LABEL_72;
          case 5uLL:
            swift_retain();
            IntelligenceElement.accessibilityLabel.getter();
            uint64_t v117 = v116;
            swift_bridgeObjectRelease();
            if (v117) {
              goto LABEL_55;
            }
            unint64_t v205 = v112;
            swift_bridgeObjectRelease();
            uint64_t v114 = v182;
            IntelligenceElement.accessibilityLabel.getter();
            IntelligenceElement.accessibilityLabel.setter();
            goto LABEL_82;
          case 6uLL:
            swift_retain();
            uint64_t v118 = IntelligenceElement.appIntentsPayload.getter();
            unint64_t v120 = v119;
            outlined consume of Data?(v118, v119);
            if (v120 >> 60 != 15
              || (uint64_t v121 = *(void *)(IntelligenceElement.appIntentsPayloadDebugDescription.getter() + 16),
                  swift_bridgeObjectRelease(),
                  v121))
            {
LABEL_55:
              outlined consume of ScrapeableContent.Content(v112);
              goto LABEL_56;
            }
            unint64_t v205 = v112;
            swift_bridgeObjectRelease();
            v153 = v182;
            uint64_t v154 = IntelligenceElement.subelements.getter();
            v155 = (void (*)(unint64_t *, void))IntelligenceElement.subelements.modify();
            specialized Array.append<A>(contentsOf:)(v154);
            v155(&v207, 0);
            uint64_t v114 = v153;
            uint64_t v156 = IntelligenceElement.subelements.getter();
            IntelligenceElement.boundingBox.getter();
            CGFloat v158 = v157;
            CGFloat v160 = v159;
            CGFloat v162 = v161;
            CGFloat v164 = v163;
            uint64_t v165 = *(void *)(v156 + 16);
            if (v165)
            {
              unint64_t v166 = v156 + v111;
              uint64_t v167 = *(void *)(v196 + 72);
              v168 = (void (**)(char *, uint64_t))(v196 + 8);
              swift_bridgeObjectRetain();
              v169 = v186;
              do
              {
                v110(v169, (char *)v166, v36);
                IntelligenceElement.boundingBox.getter();
                v225.origin.double x = v170;
                v225.origin.double y = v171;
                v225.size.CGFloat width = v172;
                v225.size.CGFloat height = v173;
                v221.origin.double x = v158;
                v221.origin.double y = v160;
                v221.size.CGFloat width = v162;
                v221.size.CGFloat height = v164;
                CGRect v222 = CGRectUnion(v221, v225);
                CGFloat v158 = v222.origin.x;
                CGFloat v160 = v222.origin.y;
                CGFloat v162 = v222.size.width;
                CGFloat v164 = v222.size.height;
                (*v168)(v169, v36);
                v166 += v167;
                --v165;
              }
              while (v165);
              swift_bridgeObjectRelease_n();
              uint64_t v114 = v182;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            unint64_t v66 = v198;
            IntelligenceElement.boundingBox.setter();
            IntelligenceElement.appIntentsPayload.getter();
            IntelligenceElement.appIntentsPayload.setter();
            IntelligenceElement.appIntentsPayloadDebugDescription.getter();
            IntelligenceElement.appIntentsPayloadDebugDescription.setter();
LABEL_82:
            swift_release();
            uint64_t v64 = v190;
            uint64_t v37 = v196;
LABEL_73:

            swift_release();
            outlined consume of ScrapeableContent.Content(v205);
            (*(void (**)(char *, uint64_t))(v37 + 8))(v114, v36);
            v144 = v187;
            break;
          case 8uLL:
            unint64_t v205 = *(void *)(v185 + 24);
            swift_retain();
            swift_bridgeObjectRelease();
            uint64_t v146 = (uint64_t)v175;
            IntelligenceElement.userActivity.getter();
            uint64_t v147 = type metadata accessor for IntelligenceUserActivity();
            uint64_t v148 = *(void *)(v147 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147) == 1)
            {
              uint64_t v114 = v182;
              IntelligenceElement.userActivity.getter();
              outlined destroy of Any?(v146, (uint64_t)&lazy cache variable for type metadata for IntelligenceUserActivity?, MEMORY[0x1E4FB0BC0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
              uint64_t v64 = v190;
              uint64_t v37 = v196;
            }
            else
            {
              v149 = v176;
              (*(void (**)(char *, uint64_t, uint64_t))(v148 + 32))(v176, v146, v147);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v149, 0, 1, v147);
              uint64_t v64 = v190;
              uint64_t v37 = v196;
              uint64_t v114 = v182;
            }
            IntelligenceElement.userActivity.setter();
LABEL_72:
            swift_release();
            goto LABEL_73;
          default:
            goto LABEL_56;
        }
        goto LABEL_74;
      }
LABEL_56:
      uint64_t v37 = v196;
      (*(void (**)(char *, uint64_t))(v196 + 8))(v109, v36);
    }
    swift_bridgeObjectRetain();
    v122 = (void (*)(unint64_t *, void))IntelligenceElement.subelements.modify();
    specialized Array.append<A>(contentsOf:)((uint64_t)v100);
    v122(&v207, 0);
    IntelligenceElement.boundingBox.getter();
    CGFloat v124 = v123;
    CGFloat v126 = v125;
    CGFloat v128 = v127;
    CGFloat v130 = v129;
    if (v108)
    {
      uint64_t v131 = v37 + 16;
      v132 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      v133 = &v100[(*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)];
      uint64_t v134 = *(void *)(v37 + 72);
      swift_bridgeObjectRetain();
      v135 = v186;
      do
      {
        v132(v135, v133, v36);
        IntelligenceElement.boundingBox.getter();
        v224.origin.double x = v136;
        v224.origin.double y = v137;
        v224.size.CGFloat width = v138;
        v224.size.CGFloat height = v139;
        v219.origin.double x = v124;
        v219.origin.double y = v126;
        v219.size.CGFloat width = v128;
        v219.size.CGFloat height = v130;
        CGRect v220 = CGRectUnion(v219, v224);
        CGFloat v124 = v220.origin.x;
        CGFloat v126 = v220.origin.y;
        CGFloat v128 = v220.size.width;
        CGFloat v130 = v220.size.height;
        (*(void (**)(char *, uint64_t))(v131 - 8))(v135, v36);
        v133 += v134;
        --v108;
      }
      while (v108);
      swift_bridgeObjectRelease_n();
      uint64_t v37 = v196;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v140 = v182;
    IntelligenceElement.boundingBox.setter();
    v141 = v186;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v186, v140, v36);
    uint64_t v63 = (uint64_t)v181;
    IntelligenceElement.pruned()();
    swift_release();

    swift_release();
    v142 = *(void (**)(char *, uint64_t))(v37 + 8);
    v142(v141, v36);
    v142(v140, v36);
    unsigned int v143 = v201(v63, 1, v36);
    v144 = (char *)v63;
    uint64_t v64 = v190;
    if (v143 == 1) {
      goto LABEL_63;
    }
LABEL_74:
    v150 = v180;
    v151 = (void (*)(uint64_t, char *, uint64_t))v199;
    v199(v180, (uint64_t)v144, v36);
    v151(v64, v150, v36);
    uint64_t v145 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v64, v145, 1, v36);
  }
  swift_release();

  swift_release();
  uint64_t v63 = (uint64_t)v35;
  uint64_t v64 = v190;
LABEL_63:
  outlined destroy of Any?(v63, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
  uint64_t v145 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v64, v145, 1, v36);
}

double ScrapeableContent.Item.boundingBox(in:)(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *v3;
  int v7 = v3[1];
  unint64_t v8 = *((void *)v3 + 1);
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  uint64_t v11 = *((void *)v3 + 4);
  uint64_t v12 = *((void *)v3 + 5);
  uint64_t v13 = *((void *)v3 + 6);
  uint64_t v14 = *((void *)v3 + 7);
  uint64_t v15 = *((void *)v3 + 8);
  if (v8 >> 60 != 2) {
    goto LABEL_5;
  }
  swift_unknownObjectRetain();
  self;
  uint64_t v16 = (void *)swift_dynamicCastObjCClass();
  if (!v16)
  {
    swift_unknownObjectRelease();
LABEL_5:
    uint64_t ObjectType = swift_getObjectType();
    ScrapeableContent.Item.size.getter();
    v25[0] = v6;
    v25[1] = v7;
    unint64_t v26 = v8;
    uint64_t v27 = v9;
    uint64_t v28 = v10;
    uint64_t v29 = v11;
    uint64_t v30 = v12;
    uint64_t v31 = v13;
    uint64_t v32 = v14;
    uint64_t v33 = v15;
    return IntelligenceSupportProviding<>.convert(_:from:)(0.0, 0.0, v22, v23, (uint64_t)v25, ObjectType, v21, a3);
  }
  uint64_t v17 = v16;
  objc_msgSend(v16, sel_bounds);
  objc_msgSend(a1, sel_convertPoint_fromCoordinateSpace_, v17);
  double v19 = v18;
  objc_msgSend(v17, sel_bounds);
  CGRectGetWidth(v34);
  objc_msgSend(v17, sel_bounds);
  CGRectGetHeight(v35);
  swift_unknownObjectRelease();
  return v19;
}

uint64_t IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, CGFloat a7@<D0>, CGFloat a8@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>)
{
  uint64_t v139 = a4;
  v122 = a3;
  uint64_t v135 = a6;
  CGFloat v136 = a2;
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceUserActivity?, MEMORY[0x1E4FB0BC0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8);
  unint64_t v120 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v121 = (char *)&v117 - v20;
  uint64_t v21 = type metadata accessor for IntelligenceCollectionRequest.UserActivityCollectionOption();
  uint64_t v124 = *(void *)(v21 - 8);
  *(void *)&long long v125 = v21;
  MEMORY[0x1F4188790](v21);
  double v123 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceElement.Content?, MEMORY[0x1E4FB0BA0], v16);
  MEMORY[0x1F4188790](v23 - 8);
  v132 = (void (**)(uint64_t, uint64_t))((char *)&v117 - v24);
  uint64_t v25 = type metadata accessor for IntelligenceElement.Content();
  uint64_t v133 = *(void *)(v25 - 8);
  uint64_t v134 = v25;
  MEMORY[0x1F4188790](v25);
  double v127 = (char *)&v117 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  CGFloat v130 = (char *)&v117 - v28;
  uint64_t v29 = type metadata accessor for IntelligenceCollectionRequest();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v117 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  CGRect v35 = (char *)&v117 - v34;
  uint64_t v36 = type metadata accessor for IntelligenceElement();
  uint64_t v137 = *(void *)(v36 - 8);
  uint64_t v138 = v36;
  MEMORY[0x1F4188790](v36);
  CGFloat v126 = (char *)&v117 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v38);
  CGFloat v128 = (char *)&v117 - v39;
  long long v40 = *(_OWORD *)(a1 + 48);
  long long v154 = *(_OWORD *)(a1 + 32);
  long long v155 = v40;
  uint64_t v156 = *(void *)(a1 + 64);
  long long v41 = *(_OWORD *)(a1 + 16);
  long long v152 = *(_OWORD *)a1;
  long long v153 = v41;
  uint64_t v140 = a5;
  IntelligenceFragmentCollector.context.getter();
  __swift_project_boxed_opaque_existential_1(&v147, *((uint64_t *)&v148 + 1));
  uint64_t v42 = v29;
  dispatch thunk of IntelligenceCollectionContext.request.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  long long v149 = v154;
  long long v150 = v155;
  uint64_t v151 = v156;
  long long v147 = v152;
  long long v148 = v153;
  uint64_t v43 = v136;
  v157.origin.double x = ScrapeableContent.Item.boundingBox(in:)(v136, v44, v139);
  v160.origin.double x = a7;
  v160.origin.double y = a8;
  v160.size.CGFloat width = a9;
  v160.size.CGFloat height = a10;
  CGRect v158 = CGRectIntersection(v157, v160);
  LOBYTE(a1) = CGRectIsEmpty(v158);
  uint64_t v131 = v30;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v35, v29);
  if (a1)
  {
    char v45 = IntelligenceCollectionRequest.includeVisibleElementsOnly.getter();
    uint64_t v46 = *(void (**)(char *, uint64_t))(v30 + 8);
    v46(v32, v42);
    if (v45)
    {
      outlined release of ScrapeableContent.Item((uint64_t)&v152);

      swift_release();
      v46(v35, v42);
      uint64_t v47 = v135;
      uint64_t v48 = v137;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v47, 1, 1, v138);
    }
    uint64_t v129 = v42;
    uint64_t v49 = (uint64_t)v35;
  }
  else
  {
    uint64_t v49 = (uint64_t)v35;
    uint64_t v46 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v129 = v42;
    v46(v32, v42);
  }
  uint64_t v48 = v137;
  unint64_t v50 = *((void *)&v152 + 1);
  *(void *)&long long v147 = *((void *)&v152 + 1);
  uint64_t ObjectType = swift_getObjectType();
  outlined copy of ScrapeableContent.Content(v50);
  id v51 = v43;
  uint64_t v52 = v140;
  swift_retain();
  unint64_t v53 = (void (*)(void, void, void))v132;
  IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)((unint64_t *)&v147, v51, v52, (uint64_t)v132, a7, a8, a9, a10);
  uint64_t v55 = v133;
  uint64_t v54 = v134;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v133 + 48))(v53, 1, v134) == 1)
  {
    outlined release of ScrapeableContent.Item((uint64_t)&v152);

    swift_release();
    v46((char *)v49, v129);
    outlined destroy of Any?((uint64_t)v53, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement.Content?, MEMORY[0x1E4FB0BA0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
    uint64_t v47 = v135;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v47, 1, 1, v138);
  }
  CGFloat v136 = v51;
  uint64_t v117 = (void (*)(uint64_t, uint64_t))v46;
  unint64_t v119 = v50;
  unint64_t v57 = v50 >> 60;
  uint64_t v58 = v130;
  (*(void (**)(char *, void, uint64_t))(v55 + 32))(v130, v53, v54);
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v127, v58, v54);
  uint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t v60 = v126;
  IntelligenceElement.init(boundingBox:content:subelements:)();
  id v61 = *(void (***)(uint64_t, uint64_t))(v48 + 32);
  id v62 = v128;
  uint64_t v63 = v60;
  uint64_t v64 = v138;
  double v127 = (char *)(v48 + 32);
  v132 = v61;
  ((void (*)(char *, char *, uint64_t))v61)(v128, v63, v138);
  uint64_t v65 = v49;
  switch(v57)
  {
    case 1uLL:
    case 2uLL:
    case 7uLL:
      unint64_t v66 = v119;
      goto LABEL_12;
    case 3uLL:
      swift_retain();
      outlined release of ScrapeableContent.Item((uint64_t)&v152);
      swift_bridgeObjectRetain();
      uint64_t ObjectType = v49;
      uint64_t v68 = v48;
      if ((IntelligenceCollectionRequest.includeAppIntents.getter() & 1) == 0) {
        goto LABEL_35;
      }
      IntelligenceElement.appEntityIdentifier.setter();
      goto LABEL_36;
    case 4uLL:
      swift_retain();
      outlined release of ScrapeableContent.Item((uint64_t)&v152);
      swift_bridgeObjectRetain();
      uint64_t ObjectType = v49;
      uint64_t v68 = v48;
      if (IntelligenceCollectionRequest.includeAppIntents.getter()) {
        IntelligenceElement.appIntentIdentifier.setter();
      }
      else {
LABEL_35:
      }
        swift_bridgeObjectRelease();
LABEL_36:
      uint64_t v67 = v135;
      uint64_t v103 = v129;

      swift_release();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v130, v134);
      v117(ObjectType, v103);
      outlined consume of ScrapeableContent.Content(v119);
      goto LABEL_53;
    case 5uLL:
      unint64_t v69 = v119 & 0xFFFFFFFFFFFFFFFLL;
      swift_retain();
      outlined release of ScrapeableContent.Item((uint64_t)&v152);
      uint64_t v70 = *(void *)(v69 + 24);
      double v71 = *(char **)(v69 + 32);
      long long v125 = *(_OWORD *)(v69 + 40);
      CGFloat v126 = v71;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v139 = v70;
      swift_retain();
      uint64_t v68 = v48;
      if (IntelligenceCollectionRequest.includeAccessibilityProperties.getter())
      {
        uint64_t v72 = swift_bridgeObjectRetain();
        specialized AccessibilityProperties.subscript.getter(v72, (uint64_t)v146);
        swift_bridgeObjectRelease_n();
        uint64_t v73 = v146[0];
        uint64_t v74 = v129;
        if (v146[0])
        {
          int64_t v75 = *(void *)(v146[0] + 16);
          if (v75)
          {
            uint64_t ObjectType = v65;
            v142[0] = v59;
            swift_retain();
            swift_retain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75, 0);
            uint64_t v59 = v142[0];
            uint64_t v124 = v73;
            uint64_t v76 = v73 + 56;
            do
            {
              uint64_t v77 = *(void *)(v76 - 24);
              uint64_t v78 = *(void *)(v76 - 16);
              char v79 = *(unsigned char *)(v76 - 8);
              *(void *)&long long v147 = v139;
              *((void *)&v147 + 1) = v126;
              long long v143 = v125;
              uint64_t v141 = 0;
              outlined copy of Text.Storage(v77, v78, v79);
              swift_bridgeObjectRetain();
              uint64_t v80 = Text.resolveString(in:with:idiom:)();
              uint64_t v82 = v81;
              outlined consume of Text.Storage(v77, v78, v79);
              swift_bridgeObjectRelease();
              v142[0] = v59;
              unint64_t v84 = *(void *)(v59 + 16);
              unint64_t v83 = *(void *)(v59 + 24);
              if (v84 >= v83 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v84 + 1, 1);
                uint64_t v59 = v142[0];
              }
              *(void *)(v59 + 16) = v84 + 1;
              uint64_t v85 = v59 + 16 * v84;
              *(void *)(v85 + 32) = v80;
              *(void *)(v85 + 40) = v82;
              v76 += 32;
              --v75;
            }
            while (v75);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            uint64_t v68 = v137;
            uint64_t v64 = v138;
            uint64_t v74 = v129;
            uint64_t v65 = ObjectType;
            uint64_t v54 = v134;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          *(void *)&long long v147 = v59;
          type metadata accessor for [String](0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [String] and conformance [A]();
          BidirectionalCollection<>.joined(separator:)();
          swift_bridgeObjectRelease();
          id v62 = v128;
        }
        IntelligenceElement.accessibilityLabel.setter();
        v104 = v136;
      }
      else
      {
        swift_bridgeObjectRelease();
        v104 = v136;
        uint64_t v74 = v129;
      }

      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v130, v54);
      v117(v65, v74);
      outlined consume of ScrapeableContent.Content(v119);
      uint64_t v67 = v135;
      goto LABEL_53;
    case 6uLL:
      unint64_t v86 = v119;
      outlined init with copy of Any((v119 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v146);
      swift_retain();
      char v87 = IntelligenceCollectionRequest.includeAppIntents.getter();
      uint64_t v68 = v48;
      uint64_t v88 = v129;
      if (v87)
      {
        outlined init with copy of Any((uint64_t)v146, (uint64_t)v142);
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for IntelligenceAppIntentsPayloadProviding);
        if (swift_dynamicCast())
        {
          outlined init with take of OptionalBinaryInteger(&v143, (uint64_t)&v147);
          __swift_project_boxed_opaque_existential_1(&v147, *((uint64_t *)&v148 + 1));
          dispatch thunk of IntelligenceAppIntentsPayloadProviding.intelligenceAppIntentsPayload()();
          IntelligenceElement.appIntentsPayload.setter();
          if (IntelligenceCollectionRequest.includeAppIntentsPayloadDebugDescription.getter())
          {
            __swift_project_boxed_opaque_existential_1(&v147, *((uint64_t *)&v148 + 1));
            dispatch thunk of IntelligenceAppIntentsPayloadProviding.intelligenceAppIntentsPayloadDebugDescription()();
            IntelligenceElement.appIntentsPayloadDebugDescription.setter();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
          uint64_t v54 = v134;
          unint64_t v86 = v119;
        }
        else
        {
          uint64_t v145 = 0;
          long long v143 = 0u;
          long long v144 = 0u;
          outlined destroy of Any?((uint64_t)&v143, (uint64_t)&lazy cache variable for type metadata for IntelligenceAppIntentsPayloadProviding?, (uint64_t)&lazy cache variable for type metadata for IntelligenceAppIntentsPayloadProviding, MEMORY[0x1E4FB0C30], (uint64_t (*)(void))type metadata accessor for IntelligenceAppIntentsPayloadProviding?);
        }
      }
      outlined init with copy of Any((uint64_t)v146, (uint64_t)v142);
      type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for IntelligenceSubelementProviding);
      if (swift_dynamicCast())
      {
        outlined init with take of OptionalBinaryInteger(&v147, (uint64_t)&v143);
        long long v149 = v154;
        long long v150 = v155;
        uint64_t v151 = v156;
        long long v147 = v152;
        long long v148 = v153;
        ScrapeableContent.Item.size.getter();
        CGFloat v106 = v105;
        CGFloat v108 = v107;
        long long v149 = v154;
        long long v150 = v155;
        uint64_t v151 = v156;
        long long v147 = v152;
        long long v148 = v153;
        uint64_t v109 = v139;
        v159.origin.double x = IntelligenceSupportProviding<>.convert(_:to:)(a7, a8, a9, a10, (uint64_t)&v147, ObjectType, v110, v139);
        v161.origin.double x = 0.0;
        v161.origin.double y = 0.0;
        v161.size.CGFloat width = v106;
        v161.size.CGFloat height = v108;
        CGRectIntersection(v159, v161);
        __swift_project_boxed_opaque_existential_1(&v143, *((uint64_t *)&v144 + 1));
        dispatch thunk of IntelligenceSubelementProviding.intelligenceSubelements(in:bounds:)();
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t ObjectType = v65;
        uint64_t v129 = v88;
        MEMORY[0x1F4188790](KeyPath);
        unint64_t v112 = v136;
        uint64_t v113 = v122;
        *(&v117 - 4) = (void (*)(uint64_t, uint64_t))v136;
        *(&v117 - 3) = v113;
        *(&v117 - 2) = (void (*)(uint64_t, uint64_t))v109;
        *(&v117 - 1) = (void (*)(uint64_t, uint64_t))&v152;
        uint64_t v114 = Array<A>.recursiveMap<A>(_:transform:)();
        swift_bridgeObjectRelease();
        outlined release of ScrapeableContent.Item((uint64_t)&v152);
        swift_release();
        uint64_t v115 = (void (*)(long long *, void))IntelligenceElement.subelements.modify();
        specialized Array.append<A>(contentsOf:)(v114);
        v115(&v147, 0);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v130, v134);
        v117(ObjectType, v129);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
        unint64_t v116 = v119;
      }
      else
      {
        *(void *)&long long v149 = 0;
        long long v147 = 0u;
        long long v148 = 0u;

        swift_release();
        outlined release of ScrapeableContent.Item((uint64_t)&v152);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v130, v54);
        v117(v65, v88);
        outlined destroy of Any?((uint64_t)&v147, (uint64_t)&lazy cache variable for type metadata for IntelligenceSubelementProviding?, (uint64_t)&lazy cache variable for type metadata for IntelligenceSubelementProviding, MEMORY[0x1E4FB0C20], (uint64_t (*)(void))type metadata accessor for IntelligenceAppIntentsPayloadProviding?);
        unint64_t v116 = v86;
      }
      outlined consume of ScrapeableContent.Content(v116);
      goto LABEL_45;
    case 8uLL:
      unint64_t v89 = v119 & 0xFFFFFFFFFFFFFFFLL;
      swift_retain();
      outlined release of ScrapeableContent.Item((uint64_t)&v152);
      id v90 = *(id *)(v89 + 16);
      uint64_t v91 = v49;
      v92 = v123;
      IntelligenceCollectionRequest.userActivities.getter();
      uint64_t v93 = v124;
      uint64_t v94 = v125;
      uint64_t v68 = v48;
      if ((*(unsigned int (**)(char *, void))(v124 + 88))(v92, v125) == *MEMORY[0x1E4FB0BD8])
      {
        uint64_t ObjectType = v91;
        (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v94);
        uint64_t v95 = (uint64_t)v121;
        uint64_t v96 = v128;
        IntelligenceElement.userActivity.getter();
        uint64_t v97 = type metadata accessor for IntelligenceUserActivity();
        uint64_t v98 = *(void *)(v97 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v95, 1, v97) == 1)
        {
          outlined destroy of Any?(v95, (uint64_t)&lazy cache variable for type metadata for IntelligenceUserActivity?, MEMORY[0x1E4FB0BC0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
          id v99 = v90;
          v100 = v120;
          IntelligenceUserActivity.init(userActivity:)();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v100, 0, 1, v97);
          IntelligenceElement.userActivity.setter();

          swift_release();
        }
        else
        {

          swift_release();
          outlined destroy of Any?(v95, (uint64_t)&lazy cache variable for type metadata for IntelligenceUserActivity?, MEMORY[0x1E4FB0BC0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
        }
        (*(void (**)(char *, uint64_t))(v55 + 8))(v130, v134);
        v117(ObjectType, v129);
        outlined consume of ScrapeableContent.Content(v119);
        uint64_t v67 = v135;
        ((void (*)(uint64_t, char *, uint64_t))v132)(v135, v96, v64);
      }
      else
      {

        swift_release();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v130, v134);
        v117(v91, v129);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v94);
        outlined consume of ScrapeableContent.Content(v119);
        uint64_t v67 = v135;
        id v62 = v128;
LABEL_53:
        ((void (*)(uint64_t, char *, uint64_t))v132)(v67, v62, v64);
      }
LABEL_54:
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v67, 0, 1, v64);
      break;
    case 9uLL:
      uint64_t v68 = v48;
      if (v119 == 0x9000000000000000)
      {

        swift_release();
        outlined release of ScrapeableContent.Item((uint64_t)&v152);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v130, v54);
        v117(v65, v129);
LABEL_45:
        uint64_t v67 = v135;
      }
      else
      {
        uint64_t v101 = v65;
        uint64_t v67 = v135;
        uint64_t v102 = v129;

        swift_release();
        outlined release of ScrapeableContent.Item((uint64_t)&v152);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v130, v54);
        v117(v101, v102);
      }
      goto LABEL_53;
    default:
      unint64_t v66 = v119;
LABEL_12:
      swift_retain();

      swift_release();
      outlined release of ScrapeableContent.Item((uint64_t)&v152);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v130, v54);
      v117(v49, v129);
      outlined consume of ScrapeableContent.Content(v66);
      uint64_t v67 = v135;
      uint64_t v68 = v48;
      ((void (*)(uint64_t, char *, uint64_t))v132)(v135, v62, v64);
      goto LABEL_54;
  }
  return result;
}

uint64_t IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v123 = a4;
  uint64_t v124 = a3;
  id v120 = a2;
  uint64_t v13 = type metadata accessor for IntelligenceFragment.RemoteContext();
  *(void *)&long long v118 = *(void *)(v13 - 8);
  *((void *)&v118 + 1) = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v117 = (char *)&v105 - v17;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceImage?, MEMORY[0x1E4FB0A30], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v115 = (char *)&v105 - v20;
  type metadata accessor for IntelligenceElement?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, MEMORY[0x1E4F413C8], v18);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v105 - v22;
  uint64_t v24 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceCollectionRequest.TextOptions?, MEMORY[0x1E4FB0C18], v18);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v113 = (char *)&v105 - v28;
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for IntelligenceElement.Text.Editable?, MEMORY[0x1E4FB0B28], v18);
  MEMORY[0x1F4188790](v29 - 8);
  unint64_t v112 = (char *)&v105 - v30;
  type metadata accessor for IntelligenceElement?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], v18);
  MEMORY[0x1F4188790](v31 - 8);
  uint64_t v33 = (char *)&v105 - v32;
  uint64_t v116 = type metadata accessor for AttributedString();
  uint64_t v114 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116);
  uint64_t v110 = (char *)&v105 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)&v105 - v36;
  MEMORY[0x1F4188790](v38);
  unint64_t v111 = (char *)&v105 - v39;
  uint64_t v40 = type metadata accessor for IntelligenceCollectionRequest();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v43 = (char *)&v105 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for IntelligenceElement.Content();
  uint64_t v121 = *(void *)(v44 - 8);
  uint64_t v122 = v44;
  MEMORY[0x1F4188790](v44);
  MEMORY[0x1F4188790](v45);
  unint64_t v119 = (char *)&v105 - v47;
  unint64_t v48 = *a1;
  switch(v48 >> 60)
  {
    case 1uLL:
      uint64_t v61 = *(void *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      *((void *)&v118 + 1) = *(void *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      swift_retain();
      swift_retain();
      *(void *)&long long v118 = v61;
      swift_retain();
      unint64_t v109 = v48;
      IntelligenceFragmentCollector.context.getter();
      __swift_project_boxed_opaque_existential_1(&v139, *((uint64_t *)&v140 + 1));
      dispatch thunk of IntelligenceCollectionContext.request.getter();
      char v62 = IntelligenceCollectionRequest.includeElements.getter();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      if ((v62 & 1) == 0) {
        goto LABEL_21;
      }
      long long v63 = v118;
      long long v139 = v118;
      char v64 = EnvironmentValues.shouldRedactContent.getter();
      uint64_t v52 = v119;
      if (v64) {
        goto LABEL_21;
      }
      long long v139 = v63;
      uint64_t v86 = type metadata accessor for Text.Style();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v23, 1, 1, v86);
      swift_retain();
      swift_retain();
      default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
      ImageResolutionContext.init(environment:textStyle:transaction:)();
      Image.resolve(in:)();
      outlined destroy of ImageResolutionContext((uint64_t)v26, MEMORY[0x1E4F40970]);
      long long v146 = v136;
      long long v147 = v137;
      v148[0] = v138[0];
      *(_DWORD *)((char *)v148 + 15) = *(_DWORD *)((char *)v138 + 15);
      v145[0] = v134;
      v145[1] = v135;
      long long v143 = v132;
      long long v144 = v133;
      long long v139 = v128;
      long long v140 = v129;
      long long v141 = v130;
      long long v142 = v131;
      if (*((void *)&v135 + 1) >> 1 != 0xFFFFFFFFLL)
      {
        long long v128 = *(_OWORD *)((char *)v145 + 8);
        *(void *)&long long v129 = *((void *)&v135 + 1);
        *((void *)&v129 + 1) = v146;
        uint64_t v87 = AccessibilityImageLabel.text.getter();
        uint64_t v89 = v88;
        long long v128 = v63;
        char v91 = v90 & 1;
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        uint64_t v125 = 0;
        Text.resolveString(in:with:idiom:)();
        outlined consume of Text.Storage(v87, v89, v91);
        swift_bridgeObjectRelease();
      }
      uint64_t v92 = type metadata accessor for IntelligenceImage();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v115, 1, 1, v92);
      IntelligenceElement.Image.init(name:textDescription:image:)();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      outlined release of Image.Resolved((uint64_t)&v139);
      uint64_t v51 = v121;
      uint64_t v50 = v122;
      (*(void (**)(char *, void, uint64_t))(v121 + 104))(v52, *MEMORY[0x1E4FB0B78], v122);
      unint64_t v84 = v109;
      goto LABEL_31;
    case 2uLL:
      uint64_t v65 = *(void **)((v48 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      swift_unknownObjectRetain_n();
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = 0;
      }
      if (v66)
      {
        unint64_t v109 = v48;
        IntelligenceFragmentCollector.context.getter();
        __swift_project_boxed_opaque_existential_1(&v139, *((uint64_t *)&v140 + 1));
        uint64_t v67 = v117;
        dispatch thunk of IntelligenceCollectionContext.createRemoteContext(description:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
        id v68 = v120;
        objc_msgSend(v66, sel_convertRect_fromCoordinateSpace_, v120, a5, a6, a7, a8);
        double v70 = v69;
        double v72 = v71;
        double v74 = v73;
        double v76 = v75;
        long long v77 = v118;
        (*(void (**)(char *, char *, void))(v118 + 16))(v15, v67, *((void *)&v118 + 1));
        id v78 = objc_allocWithZone((Class)type metadata accessor for UIIntelligenceCollectionRemoteContextWrapper());
        char v79 = (void *)UIIntelligenceCollectionRemoteContextWrapper.init(remoteContext:)();
        objc_msgSend(v66, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v79, v70, v72, v74, v76);

        swift_unknownObjectRelease_n();
        swift_release();
        uint64_t v80 = v119;
        (*(void (**)(char *, char *, void))(v77 + 32))(v119, v67, *((void *)&v77 + 1));
        uint64_t v82 = v121;
        uint64_t v81 = v122;
        (*(void (**)(char *, void, uint64_t))(v121 + 104))(v80, *MEMORY[0x1E4FB0B80], v122);
        outlined consume of ScrapeableContent.Content(v109);
        uint64_t v83 = v123;
        (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v123, v80, v81);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v83, 0, 1, v81);
      }
      swift_unknownObjectRelease_n();

      swift_release();
LABEL_24:
      unint64_t v85 = v48;
      goto LABEL_25;
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:

      swift_release();
      outlined consume of ScrapeableContent.Content(v48);
      uint64_t v50 = v122;
      uint64_t v49 = v123;
      uint64_t v51 = v121;
      goto LABEL_3;
    case 7uLL:

      swift_release();
      if (*(double *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 0x10) < 0.001) {
        goto LABEL_24;
      }
      uint64_t v51 = v121;
      uint64_t v50 = v122;
      uint64_t v52 = v119;
      (*(void (**)(char *, void, uint64_t))(v121 + 104))(v119, *MEMORY[0x1E4FB0B68], v122);
      unint64_t v84 = v48;
LABEL_31:
      outlined consume of ScrapeableContent.Content(v84);
      unint64_t v53 = 0;
      goto LABEL_32;
    case 9uLL:
      if (v48 == 0x9000000000000000)
      {

        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v123, 1, 1, v122);
      }
      uint64_t v50 = v122;
      uint64_t v49 = v123;
      uint64_t v51 = v121;

      swift_release();
LABEL_3:
      uint64_t v52 = v119;
      (*(void (**)(char *, void, uint64_t))(v51 + 104))(v119, *MEMORY[0x1E4FB0B68], v50);
      unint64_t v53 = 0;
      goto LABEL_4;
    default:
      uint64_t v56 = *(char **)(v48 + 48);
      uint64_t v55 = *(void *)(v48 + 56);
      uint64_t v57 = *(void *)(v48 + 64);
      uint64_t v117 = v46;
      *(void *)&long long v118 = v57;
      swift_retain();
      swift_retain();
      *((void *)&v118 + 1) = v55;
      swift_retain();
      unint64_t v109 = v48;
      IntelligenceFragmentCollector.context.getter();
      __swift_project_boxed_opaque_existential_1(&v139, *((uint64_t *)&v140 + 1));
      dispatch thunk of IntelligenceCollectionContext.request.getter();
      char v58 = IntelligenceCollectionRequest.includeElements.getter();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      if ((v58 & 1) == 0 || (uint64_t v59 = ResolvedStyledText.storage.getter()) == 0)
      {
LABEL_21:
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_22;
      }
      uint64_t v60 = (void *)v59;
      *(void *)&long long v139 = *((void *)&v118 + 1);
      *((void *)&v139 + 1) = v118;
      if (EnvironmentValues.shouldRedactContent.getter())
      {
        swift_release();
        swift_release();
        swift_release();

LABEL_22:
        swift_release();
        unint64_t v85 = v109;
LABEL_25:
        outlined consume of ScrapeableContent.Content(v85);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v123, 1, 1, v122);
      }
      uint64_t v115 = v56;
      swift_getKeyPath();
      type metadata accessor for IntelligenceElement.Text.Attributes();
      lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes and conformance IntelligenceElement.Text.Attributes, MEMORY[0x1E4FB0B20]);
      id v93 = v60;
      AttributedString.init<A>(_:including:)();
      id v108 = v93;
      uint64_t v94 = v114;
      uint64_t v95 = v116;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v33, 0, 1, v116);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v33, 1, v95) == 1)
      {
        outlined destroy of Any?((uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
        id v96 = v93;
        uint64_t v97 = v111;
        AttributedString.init(_:)();
        unint64_t v53 = 0;
        uint64_t v52 = v119;
      }
      else
      {
        CGFloat v106 = *(void (**)(void))(v94 + 32);
        ((void (*)(char *, char *, uint64_t))v106)(v37, v33, v95);
        uint64_t v107 = *MEMORY[0x1E4FB06F8];
        id v101 = objc_msgSend(v93, sel_length);
        uint64_t v102 = swift_allocObject();
        *(void *)(v102 + 16) = v37;
        uint64_t v103 = swift_allocObject();
        *(void *)(v103 + 16) = partial apply for closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:);
        *(void *)(v103 + 24) = v102;
        *(void *)&long long v141 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        *((void *)&v141 + 1) = v103;
        *(void *)&long long v139 = MEMORY[0x1E4F143A8];
        *((void *)&v139 + 1) = 1107296256;
        *(void *)&long long v140 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        *((void *)&v140 + 1) = &block_descriptor_2;
        v104 = _Block_copy(&v139);
        swift_retain();
        swift_release();
        objc_msgSend(v93, sel_enumerateAttribute_inRange_options_usingBlock_, v107, 0, v101, 0, v104);
        _Block_release(v104);
        LOBYTE(v101) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (v101)
        {
          __break(1u);
          JUMPOUT(0x1877DD9B8);
        }
        uint64_t v97 = v111;
        v106();
        unint64_t v53 = partial apply for closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:);
        uint64_t v52 = v119;
        uint64_t v94 = v114;
      }
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v110, v97, v95);
      uint64_t v98 = type metadata accessor for IntelligenceElement.Text.Editable();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v112, 1, 1, v98);
      uint64_t v99 = type metadata accessor for IntelligenceCollectionRequest.TextOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v113, 1, 1, v99);
      v100 = v117;
      IntelligenceElement.Text.init(attributedText:editable:textOptions:)();
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v97, v116);
      uint64_t v51 = v121;
      uint64_t v50 = v122;
      (*(void (**)(char *, void, uint64_t))(v121 + 104))(v100, *MEMORY[0x1E4FB0B70], v122);
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v52, v100, v50);
      outlined consume of ScrapeableContent.Content(v109);
LABEL_32:
      uint64_t v49 = v123;
LABEL_4:
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v49, v52, v50);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v49, 0, 1, v50);
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v53);
  }
}

double IntelligenceSupportProviding<>.convert(_:to:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v13 = a1;
  double v14 = a2;
  double v15 = a3;
  double v16 = a4;
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  char v12 = 2;
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  ViewGraph.transform.getter();
  swift_release();
  CGRect.convert(to:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v9);
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  char v12 = 2;
  CGRect.convert(from:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v9);
  return v13;
}

void closure #2 in IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(double *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v7 = *a1;
  double v8 = a1[1];
  double v9 = a1[2];
  double v10 = a1[3];
  uint64_t ObjectType = swift_getObjectType();
  *(double *)a4 = IntelligenceSupportProviding<>.convert(_:from:)(v7, v8, v9, v10, a3, ObjectType, v12, a2);
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = v14;
  *(void *)(a4 + 24) = v15;
}

double IntelligenceSupportProviding<>.convert(_:from:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v15 = a1;
  double v16 = a2;
  double v17 = a3;
  double v18 = a4;
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  char v14 = 2;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v11);
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  char v14 = 2;
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  ViewGraph.transform.getter();
  swift_release();
  CGRect.convert(from:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v11);
  return v15;
}

uint64_t closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[2] = a3;
  uint64_t v29 = a5;
  v28[1] = a2;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  double v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntelligenceElement?(0, &lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)v28 - v11;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  double v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v28 - v19;
  uint64_t v21 = MEMORY[0x1E4FBC840] + 8;
  outlined init with copy of Any?(a1, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [String]);
  if (!v33) {
    return outlined destroy of Any?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v21, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [String]);
  }
  type metadata accessor for UIFont();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v23 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, v6);
    lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
    {

      return outlined destroy of Any?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t)type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IntelligenceElement?);
    }
    else
    {
      outlined init with take of Range<AttributedString.Index>((uint64_t)v12, (uint64_t)v20);
      outlined init with copy of Range<AttributedString.Index>((uint64_t)v20, (uint64_t)v17);
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      v28[-2] = v25;
      swift_getKeyPath();
      objc_msgSend(v23, sel_pointSize);
      uint64_t v30 = v26;
      char v31 = 0;
      lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      uint64_t v27 = (void (*)(unsigned char *, void))AttributedString.subscript.modify();
      lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes.FontSizeAttribute and conformance IntelligenceElement.Text.Attributes.FontSizeAttribute, MEMORY[0x1E4FB0AF8]);
      AttributedSubstring.subscript.setter();
      v27(v32, 0);

      outlined destroy of ImageResolutionContext((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      return outlined destroy of ImageResolutionContext((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    }
  }
  return result;
}

uint64_t key path index equality operator for (KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void type metadata accessor for IntelligenceElement?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t outlined copy of ScrapeableContent.Content(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

CGFloat specialized static IntelligenceElement._updatedUncoveredVisibleRect(_:for:in:)(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8)
{
  unint64_t v95 = *(void *)(a1 + 24);
  outlined copy of ScrapeableContent.Content(v95);
  swift_retain();
  double v15 = ScrapeableContent.Item.boundingBox(in:)(a2, v14, a8);
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  outlined consume of ScrapeableContent.Content(v95);
  swift_release();
  v96.origin.double x = a3;
  v96.origin.double y = a4;
  v96.size.CGFloat width = a5;
  v96.size.CGFloat height = a6;
  v127.origin.double x = v15;
  v127.origin.double y = v17;
  v127.size.CGFloat width = v19;
  v127.size.CGFloat height = v21;
  if (!CGRectIntersectsRect(v96, v127)) {
    return a3;
  }
  v97.origin.double x = v15;
  v97.origin.double y = v17;
  v97.size.CGFloat width = v19;
  v97.size.CGFloat height = v21;
  CGFloat MaxY = CGRectGetMaxY(v97);
  v98.size.CGFloat height = a6;
  CGFloat v90 = a6;
  CGFloat v23 = a3;
  double v24 = MaxY + 1.0;
  v98.origin.double x = v23;
  v98.origin.double y = a4;
  v98.size.CGFloat width = a5;
  double v77 = CGRectGetMaxY(v98);
  double v78 = v24;
  BOOL v25 = v77 > v24;
  BOOL v26 = v77 > v24;
  CGFloat v27 = 0.0;
  CGFloat v91 = 0.0;
  double rect = a5;
  double v28 = 0.0;
  double v29 = 0.0;
  CGFloat v30 = a4;
  CGFloat v31 = v23;
  CGFloat v89 = v21;
  if (!v25)
  {
    v99.origin.double x = v15;
    v99.origin.double y = v17;
    v99.size.CGFloat width = v19;
    v99.size.CGFloat height = v21;
    double v32 = v19;
    double v33 = v17;
    double v34 = v15;
    double MinY = CGRectGetMinY(v99);
    v100.origin.double x = v23;
    v100.origin.double y = v30;
    v100.size.CGFloat width = a5;
    v100.size.CGFloat height = v90;
    double v36 = MinY - CGRectGetMinY(v100);
    double v15 = v34;
    CGFloat v17 = v33;
    CGFloat v19 = v32;
    CGFloat v21 = v89;
    double v29 = 0.0;
    if (v36 >= 0.0) {
      double v29 = v36;
    }
    CGFloat v91 = v23;
    double v28 = v30;
    CGFloat v27 = a5;
  }
  CGFloat v79 = v28;
  CGFloat v81 = v29;
  CGFloat v86 = v27;
  v101.origin.double x = v15;
  v101.origin.double y = v17;
  v101.size.CGFloat width = v19;
  v101.size.CGFloat height = v21;
  CGFloat v37 = v21;
  CGFloat v38 = v17;
  CGFloat v39 = v15;
  CGFloat v40 = CGRectGetMinY(v101) + -1.0;
  v102.origin.double x = v31;
  v102.origin.double y = v30;
  v102.size.CGFloat width = a5;
  v102.size.CGFloat height = v90;
  double v83 = v19;
  double v84 = v39;
  CGFloat v94 = v30;
  if (v40 <= CGRectGetMinY(v102))
  {
    v103.origin.double x = v31;
    v103.origin.double y = v30;
    v103.size.CGFloat width = a5;
    v103.size.CGFloat height = v90;
    double v88 = CGRectGetMaxY(v103);
    v104.origin.double x = v39;
    v104.origin.double y = v38;
    v104.size.CGFloat width = v19;
    v104.size.CGFloat height = v37;
    double v46 = v88 - CGRectGetMaxY(v104);
    if (v46 < 0.0) {
      double v47 = 0.0;
    }
    else {
      double v47 = v46;
    }
    v105.origin.double x = v31;
    v105.origin.double y = v30;
    v105.size.CGFloat width = a5;
    v105.size.CGFloat height = v90;
    double v48 = CGRectGetMaxY(v105) - v47;
    CGFloat v42 = v38;
    CGFloat v87 = v47;
    CGFloat v85 = v48;
    if (v77 <= v78)
    {
      CGFloat v43 = v31;
      v106.origin.double x = v31;
      v106.origin.double y = v48;
      v106.size.CGFloat width = rect;
      v106.size.CGFloat height = v47;
      double Width = CGRectGetWidth(v106);
      v107.origin.double x = v31;
      v107.origin.double y = v48;
      v107.size.CGFloat width = rect;
      v107.size.CGFloat height = v47;
      double v50 = Width * CGRectGetHeight(v107);
      v108.origin.double x = v91;
      v108.origin.double y = v79;
      v108.size.CGFloat width = v86;
      v108.size.CGFloat height = v81;
      double v51 = CGRectGetWidth(v108);
      v109.origin.double x = v91;
      v109.origin.double y = v79;
      v109.size.CGFloat width = v86;
      v109.size.CGFloat height = v81;
      BOOL v52 = v51 * CGRectGetHeight(v109) + 1.0 < v50;
      CGFloat v19 = v83;
      CGFloat v41 = v84;
      CGFloat v37 = v89;
      a5 = rect;
      BOOL v26 = 0;
      if (v52)
      {
        CGFloat v91 = v31;
        CGFloat v86 = rect;
      }
      else
      {
        CGFloat v85 = v79;
        CGFloat v87 = v81;
      }
    }
    else
    {
      BOOL v26 = 0;
      CGFloat v43 = v31;
      CGFloat v91 = v31;
      a5 = rect;
      CGFloat v86 = rect;
      CGFloat v41 = v84;
      CGFloat v37 = v89;
    }
  }
  else
  {
    CGFloat v85 = v79;
    CGFloat v87 = v81;
    CGFloat v41 = v39;
    CGFloat v42 = v38;
    CGFloat v43 = v31;
  }
  v110.origin.double x = v41;
  v110.origin.double y = v42;
  v110.size.CGFloat width = v19;
  v110.size.CGFloat height = v37;
  CGFloat v53 = v19;
  CGFloat v54 = v42;
  CGFloat v55 = v41;
  CGFloat v56 = CGRectGetMaxX(v110) + 1.0;
  v111.origin.double x = v43;
  v111.origin.double y = v94;
  v111.size.CGFloat width = a5;
  v111.size.CGFloat height = v90;
  if (CGRectGetMaxX(v111) <= v56)
  {
    v112.origin.double x = v55;
    v112.origin.double y = v54;
    v112.size.CGFloat width = v53;
    v112.size.CGFloat height = v37;
    double MinX = CGRectGetMinX(v112);
    v113.origin.double x = v43;
    v113.origin.double y = v94;
    v113.size.CGFloat width = a5;
    v113.size.CGFloat height = v90;
    double v62 = MinX - CGRectGetMinX(v113);
    if (v62 < 0.0) {
      double v63 = 0.0;
    }
    else {
      double v63 = v62;
    }
    CGFloat v58 = v54;
    CGFloat v60 = v37;
    CGFloat v82 = v63;
    if (v26)
    {
      BOOL v26 = 0;
      CGFloat v91 = v43;
      CGFloat v85 = v94;
      CGFloat v87 = v90;
      CGFloat v59 = v83;
      CGFloat v57 = v84;
      double v44 = v43;
    }
    else
    {
      v114.origin.double x = v43;
      v114.origin.double y = v94;
      v114.size.CGFloat width = v63;
      v114.size.CGFloat height = v90;
      double v64 = CGRectGetWidth(v114);
      v115.origin.double x = v43;
      v115.origin.double y = v94;
      v115.size.CGFloat width = v63;
      v115.size.CGFloat height = v90;
      double v80 = v64 * CGRectGetHeight(v115);
      v116.origin.double x = v91;
      v116.origin.double y = v85;
      v116.size.CGFloat width = v86;
      v116.size.CGFloat height = v87;
      double v65 = CGRectGetWidth(v116);
      v117.origin.double x = v91;
      v117.origin.double y = v85;
      v117.size.CGFloat width = v86;
      v117.size.CGFloat height = v87;
      double v66 = v65 * CGRectGetHeight(v117) + 1.0;
      CGFloat v59 = v83;
      CGFloat v57 = v84;
      double v44 = v43;
      BOOL v26 = 0;
      if (v66 >= v80)
      {
        CGFloat v82 = v86;
      }
      else
      {
        CGFloat v91 = v43;
        CGFloat v85 = v94;
        CGFloat v87 = v90;
      }
    }
  }
  else
  {
    CGFloat v82 = v86;
    CGFloat v57 = v55;
    CGFloat v58 = v54;
    CGFloat v59 = v53;
    CGFloat v60 = v37;
    double v44 = v43;
  }
  v118.origin.double x = v57;
  v118.origin.double y = v58;
  v118.size.CGFloat width = v59;
  v118.size.CGFloat height = v60;
  CGFloat v67 = v59;
  CGFloat v68 = v58;
  CGFloat v69 = v57;
  CGFloat v70 = CGRectGetMinX(v118) + -1.0;
  v119.origin.double x = v44;
  v119.origin.double y = v94;
  v119.size.CGFloat width = rect;
  v119.size.CGFloat height = v90;
  if (v70 <= CGRectGetMinX(v119))
  {
    v120.origin.double x = v44;
    v120.origin.double y = v94;
    v120.size.CGFloat width = rect;
    v120.size.CGFloat height = v90;
    double MaxX = CGRectGetMaxX(v120);
    v121.origin.double x = v69;
    v121.origin.double y = v68;
    v121.size.CGFloat width = v67;
    v121.size.CGFloat height = v89;
    double v72 = MaxX - CGRectGetMaxX(v121);
    if (v72 < 0.0) {
      double v73 = 0.0;
    }
    else {
      double v73 = v72;
    }
    v122.origin.double x = v44;
    v122.origin.double y = v94;
    v122.size.CGFloat width = rect;
    v122.size.CGFloat height = v90;
    double v74 = CGRectGetMaxX(v122);
    double v44 = v74 - v73;
    if (!v26)
    {
      v123.origin.double x = v74 - v73;
      v123.origin.double y = v94;
      v123.size.CGFloat width = v73;
      v123.size.CGFloat height = v90;
      double v75 = CGRectGetWidth(v123);
      v124.origin.double x = v44;
      v124.origin.double y = v94;
      v124.size.CGFloat width = v73;
      v124.size.CGFloat height = v90;
      double recta = v75 * CGRectGetHeight(v124);
      v125.origin.double x = v91;
      v125.origin.double y = v85;
      v125.size.CGFloat width = v82;
      v125.size.CGFloat height = v87;
      double v76 = CGRectGetWidth(v125);
      v126.origin.double x = v91;
      v126.origin.double y = v85;
      v126.size.CGFloat width = v82;
      v126.size.CGFloat height = v87;
      if (v76 * CGRectGetHeight(v126) + 1.0 >= recta) {
        return v91;
      }
    }
  }
  else if (!v26)
  {
    return v91;
  }
  return v44;
}

uint64_t outlined release of ScrapeableContent.Item(uint64_t a1)
{
  return a1;
}

uint64_t sub_1877DE96C@<X0>(void *a1@<X8>)
{
  uint64_t result = IntelligenceElement.boundingBox.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t sub_1877DE99C()
{
  return IntelligenceElement.boundingBox.setter();
}

void partial apply for closure #2 in IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  closure #2 in IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    type metadata accessor for [String](255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t sub_1877DEA64@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.intelligence.getter();
  uint64_t result = type metadata accessor for IntelligenceElement.Text.Attributes();
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1877DEADC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_1877DEAF4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

void type metadata accessor for [String](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t type metadata accessor for UIFont()
{
  unint64_t result = lazy cache variable for type metadata for UIFont;
  if (!lazy cache variable for type metadata for UIFont)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  }
  return result;
}

uint64_t outlined init with take of Range<AttributedString.Index>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<AttributedString.Index>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Range<AttributedString.Index>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<AttributedString.Index>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1877DEC60()
{
  return IntelligenceElement.Text.Attributes.intelligenceFontSize.getter();
}

uint64_t sub_1877DEC84()
{
  return lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes.FontSizeAttribute and conformance IntelligenceElement.Text.Attributes.FontSizeAttribute, MEMORY[0x1E4FB0AF8]);
}

uint64_t sub_1877DECCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes.FontSizeAttribute and conformance IntelligenceElement.Text.Attributes.FontSizeAttribute, MEMORY[0x1E4FB0AF8]);

  return MEMORY[0x1F41650A8](v2, v3);
}

uint64_t sub_1877DED40()
{
  return 8;
}

uint64_t sub_1877DED4C()
{
  return swift_release();
}

uint64_t sub_1877DED54(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1877DED64()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_1877DEDA8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t outlined destroy of ImageResolutionContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>()
{
  if (!lazy cache variable for type metadata for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>)
  {
    type metadata accessor for IntelligenceElement.Text.Attributes();
    type metadata accessor for IntelligenceElement.Text.Attributes.FontSizeAttribute();
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>);
    }
  }
}

void MenuBarExtra.init(isInserted:content:label:)()
{
}

void MenuBarExtra.init(content:label:)()
{
}

void MenuBarExtra.body.getter()
{
}

void MenuBarExtra<>.init(_:isInserted:content:)()
{
}

void MenuBarExtra<>.init<A>(_:isInserted:content:)()
{
}

void MenuBarExtra<>.init(_:content:)()
{
}

void MenuBarExtra<>.init<A>(_:content:)()
{
}

void MenuBarExtra<>.init(_:image:isInserted:content:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init<A>(_:image:isInserted:content:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:systemImage:isInserted:content:)()
{
}

void MenuBarExtra<>.init<A>(_:systemImage:isInserted:content:)()
{
}

void MenuBarExtra<>.init(_:image:content:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:systemImage:content:)()
{
}

void MenuBarExtra<>.init<A>(_:systemImage:content:)()
{
}

uint64_t associated type witness table accessor for Scene.Body : Scene in MenuBarExtra<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for MenuBarExtra()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MenuBarExtra(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = ((((v6 + v9) & ~v9) + v11) & 0xFFFFFFFFFFFFFFF8) + 26;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)v4 + v10) & v17;
    unint64_t v19 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v18, v19, v7);
    *(unsigned char *)(v18 + v11) = *(unsigned char *)(v19 + v11);
    unint64_t v20 = (v19 + v11) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v21 = *(unsigned __int8 *)(v20 + 25);
    if (v21 >= 2) {
      unsigned int v21 = *(_DWORD *)(v20 + 8) + 2;
    }
    unint64_t v22 = (v18 + v11) & 0xFFFFFFFFFFFFFFF8;
    if (v21 == 1)
    {
      *(void *)(v22 + 8) = *(void *)(v20 + 8);
      *(void *)(v22 + 16) = *(void *)(v20 + 16);
      *(unsigned char *)(v22 + 24) = *(unsigned char *)(v20 + 24);
      *(unsigned char *)(v22 + 25) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)(v22 + 8) = *(unsigned char *)(v20 + 8);
      *(void *)(v22 + 16) = *(void *)(v20 + 16);
      *(unsigned char *)(v22 + 25) = 0;
    }
  }
  swift_retain();
  return v4;
}

uint64_t destroy for MenuBarExtra(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v9 = (v8 + *(void *)(v7 + 56)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (_DWORD *)(v9 + 8);
  unsigned int v11 = *(unsigned __int8 *)(v9 + 25);
  if (v11 >= 2) {
    unsigned int v11 = *v10 + 2;
  }
  if (v11 == 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48);
  unint64_t v15 = v14 + v12;
  unint64_t v16 = v14 + v13;
  *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
  unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v18 = *(unsigned __int8 *)(v17 + 25);
  if (v18 >= 2) {
    unsigned int v18 = *(_DWORD *)(v17 + 8) + 2;
  }
  unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v18 == 1)
  {
    *(void *)(v19 + 8) = *(void *)(v17 + 8);
    *(void *)(v19 + 16) = *(void *)(v17 + 16);
    *(unsigned char *)(v19 + 24) = *(unsigned char *)(v17 + 24);
    swift_retain();
    char v20 = 1;
  }
  else
  {
    char v20 = 0;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v17 + 8);
    *(void *)(v19 + 16) = *(void *)(v17 + 16);
  }
  swift_retain();
  *(unsigned char *)(v19 + 25) = v20;
  return a1;
}

uint64_t assignWithCopy for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40);
  unint64_t v15 = v14 + v12;
  unint64_t v16 = v14 + v13;
  *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  if (v17 != v18)
  {
    unint64_t v19 = v17 + 8;
    unsigned int v20 = *(unsigned __int8 *)(v17 + 25);
    if (v20 >= 2) {
      unsigned int v20 = *(_DWORD *)v19 + 2;
    }
    unint64_t v21 = v18 + 8;
    if (v20 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v22 = *(unsigned __int8 *)(v21 + 17);
    if (v22 >= 2) {
      unsigned int v22 = *(_DWORD *)v21 + 2;
    }
    if (v22 == 1)
    {
      *(void *)unint64_t v19 = *(void *)v21;
      *(void *)(v19 + 8) = *(void *)(v21 + 8);
      *(unsigned char *)(v19 + 16) = *(unsigned char *)(v21 + 16);
      *(unsigned char *)(v19 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v19 = *(unsigned char *)v21;
      *(void *)(v19 + 8) = *(void *)(v21 + 8);
      *(unsigned char *)(v19 + 17) = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32);
  unint64_t v15 = v14 + v12;
  unint64_t v16 = v14 + v13;
  *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v20 = *(unsigned __int8 *)(v18 + 25);
  if (v20 >= 2) {
    unsigned int v20 = *(_DWORD *)v19 + 2;
  }
  unint64_t v21 = v17 + 8;
  if (v20 == 1)
  {
    long long v22 = *(_OWORD *)v19;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v19 + 16);
  }
  else
  {
    LOBYTE(v20) = 0;
    long long v22 = *(_OWORD *)v19;
  }
  *(_OWORD *)unint64_t v21 = v22;
  *(unsigned char *)(v21 + 17) = v20;
  return a1;
}

uint64_t assignWithTake for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24);
  unint64_t v15 = v14 + v12;
  unint64_t v16 = v14 + v13;
  *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  if (v17 != v18)
  {
    unint64_t v19 = v17 + 8;
    unsigned int v20 = *(unsigned __int8 *)(v17 + 25);
    if (v20 >= 2) {
      unsigned int v20 = *(_DWORD *)v19 + 2;
    }
    unint64_t v21 = v18 + 8;
    if (v20 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v22 = *(unsigned __int8 *)(v21 + 17);
    if (v22 >= 2) {
      unsigned int v22 = *(_DWORD *)v21 + 2;
    }
    if (v22 == 1)
    {
      long long v23 = *(_OWORD *)v21;
      *(unsigned char *)(v19 + 16) = *(unsigned char *)(v21 + 16);
      *(_OWORD *)unint64_t v19 = v23;
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
    }
    *(unsigned char *)(v19 + 17) = v24;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuBarExtra(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  if (v11 < a2)
  {
    unint64_t v13 = (((v12 & ~v9) + v10) & 0xFFFFFFFFFFFFFFF8) + 26;
    unsigned int v14 = (a2 - v11 + 0xFFFF) >> (8 * v13);
    if (v13 <= 3) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v13);
        if (!*((unsigned char *)a1 + v13)) {
          break;
        }
        goto LABEL_23;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v13);
        if (*(unsigned __int16 *)((char *)a1 + v13)) {
          goto LABEL_23;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877DFC30);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v13);
        if (!v17) {
          break;
        }
LABEL_23:
        int v18 = (v17 - 1) << (8 * v13);
        if (v13 <= 3)
        {
          int v19 = *a1;
        }
        else
        {
          int v18 = 0;
          int v19 = *(_DWORD *)a1;
        }
        return v11 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (v6 == v11) {
    return (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v21 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(v21 + v10);
  if (v22 >= 2) {
    return ((v22 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for MenuBarExtra(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  unint64_t v14 = (((v13 & ~v10) + v11) & 0xFFFFFFFFFFFFFFF8) + 26;
  char v15 = 8 * v14;
  if (v12 >= a3)
  {
    int v19 = 0;
    if (v12 >= a2)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v7 == v12)
            {
              long long v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v10;
              if (v9 == v12)
              {
                BOOL v25 = *(void (**)(unint64_t))(v8 + 56);
                v25(v24);
              }
              else
              {
                *(unsigned char *)(v24 + v11) = a2 + 1;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = (a3 - v12 + 0xFFFF) >> v15;
    if (v14 <= 3) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    if (v12 >= a2) {
      goto LABEL_19;
    }
  }
  unsigned int v20 = ~v12 + a2;
  unsigned int v21 = v20 >> v15;
  bzero(a1, (((v13 & ~v10) + v11) & 0xFFFFFFFFFFFFFFF8) + 26);
  if (v14 <= 3) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = 1;
  }
  if (v14 > 3) {
    *(_DWORD *)a1 = v20;
  }
  else {
    *(_WORD *)a1 = v20;
  }
  switch(v19)
  {
    case 1:
      a1[v14] = v22;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v22;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x1877DFEE4);
    case 4:
      *(_DWORD *)&a1[v14] = v22;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for MenuBarExtra()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_1877DFF24()
{
  return &protocol witness table for _EmptyScene;
}

uint64_t destroy for MenuBarExtraConfiguration()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuBarExtraConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuBarExtraConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

uint64_t assignWithTake for MenuBarExtraConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuBarExtraConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuBarExtraConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MenuBarExtraConfiguration()
{
  return &type metadata for MenuBarExtraConfiguration;
}

void MenuBarExtra<>.init<A>(_:image:content:)()
{
}

uint64_t PlaybackButton.Configuration.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Configuration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys, (uint64_t)&unk_1ED417AE8, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for ClosedRange<Date>();
  _sSNy10Foundation4DateVGSNyxGSesSeRzrlWlTm_0(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    LOBYTE(v15) = 1;
    type metadata accessor for PlaybackButton.State(0);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton.State and conformance PlaybackButton.State, (void (*)(uint64_t))type metadata accessor for PlaybackButton.State);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = *(unsigned char *)(v3 + v10[7]);
    char v19 = 3;
    lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v15 = *(_OWORD *)(v3 + v10[9]);
    char v19 = 5;
    lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = (long long *)(v3 + v10[10]);
    char v12 = *((unsigned char *)v11 + 16);
    uint64_t v13 = *((void *)v11 + 5);
    long long v15 = *v11;
    char v16 = v12;
    long long v17 = *(long long *)((char *)v11 + 24);
    uint64_t v18 = v13;
    char v19 = 6;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PlaybackButton.Configuration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v6 - 8);
  CGFloat v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Configuration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys, (uint64_t)&unk_1ED417AE8, MEMORY[0x1E4FBBDC0]);
  uint64_t v38 = v8;
  uint64_t v36 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = &v13[v14[6]];
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  CGFloat v41 = v14;
  CGFloat v42 = (uint64_t *)v15;
  uint64_t v16 = v14[7];
  v13[v16] = 0;
  uint64_t v17 = v14[8];
  CGFloat v43 = v13;
  v13[v17] = 0;
  uint64_t v18 = a1[3];
  CGFloat v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();
  CGFloat v39 = v10;
  uint64_t v19 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v44 = v16;
    uint64_t v34 = v17;
    uint64_t v20 = v36;
    type metadata accessor for ClosedRange<Date>();
    LOBYTE(v45) = 0;
    _sSNy10Foundation4DateVGSNyxGSesSeRzrlWlTm_0(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v21 = (uint64_t)v37;
    uint64_t v22 = v38;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v23 = (uint64_t)v43;
    outlined init with take of PlaybackButton.State(v21, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    LOBYTE(v45) = 1;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton.State and conformance PlaybackButton.State, (void (*)(uint64_t))type metadata accessor for PlaybackButton.State);
    uint64_t v24 = (uint64_t)v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BOOL v25 = v41;
    outlined init with take of PlaybackButton.State(v24, v23 + v41[5], type metadata accessor for PlaybackButton.State);
    LOBYTE(v45) = 2;
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    CGFloat v27 = v42;
    *CGFloat v42 = v26;
    v27[1] = v28;
    char v49 = 3;
    lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v23 + v44) = v45;
    LOBYTE(v45) = 4;
    *(unsigned char *)(v23 + v34) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v49 = 5;
    lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v23 + v25[9]) = v45;
    char v49 = 6;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v22);
    char v29 = v46;
    uint64_t v30 = v48;
    uint64_t v31 = v23 + v25[10];
    *(_OWORD *)uint64_t v31 = v45;
    *(unsigned char *)(v31 + 16) = v29;
    *(_OWORD *)(v31 + 24) = v47;
    *(void *)(v31 + 40) = v30;
    outlined init with copy of PlaybackButton.State(v23, v35, type metadata accessor for PlaybackButton.Configuration);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return outlined destroy of ClosedRange<Date>?(v23, type metadata accessor for PlaybackButton.Configuration);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.Configuration.CodingKeys()
{
  uint64_t result = 0x6C61767265746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6574617473;
      break;
    case 2:
      uint64_t result = 0x6D496D6574737973;
      break;
    case 3:
      uint64_t result = 0x6573616870;
      break;
    case 4:
      uint64_t result = 0x6573736572507369;
      break;
    case 5:
      uint64_t result = 0x6E656D6E67696C61;
      break;
    case 6:
      uint64_t result = 0x6E6F69746361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.Configuration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlaybackButton.Configuration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Configuration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Configuration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton.Configuration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackButton.Configuration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton.Configuration(void *a1)
{
  return PlaybackButton.Configuration.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.State.CodingKeys()
{
  uint64_t v1 = 0x676E6979616C70;
  if (*v0 != 1) {
    uint64_t v1 = 0x646573756170;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x646579616C706E75;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.State.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlaybackButton.State.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.State.PausedCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.State.PausedCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.PausedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.PausedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.PlayingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.PlayingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.UnplayedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.UnplayedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PlaybackButton.State.encode(to:)(void *a1)
{
  unint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys, (uint64_t)&unk_1ED417F28, MEMORY[0x1E4FBBDE0]);
  uint64_t v36 = v3;
  uint64_t v34 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v35 = (char *)&v28 - v4;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  CGFloat v37 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys, (uint64_t)&unk_1ED417FB8, v2);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v31 = (char *)&v28 - v8;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.UnplayedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys, (uint64_t)&unk_1ED417FD8, v2);
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys, (uint64_t)&unk_1ED417E98, v2);
  uint64_t v16 = v15;
  uint64_t v40 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v28 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of PlaybackButton.State(v39, (uint64_t)v14, type metadata accessor for PlaybackButton.State);
  uint64_t v19 = v38;
  uint64_t v20 = v5;
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v14, 2, v5);
  if (v21)
  {
    if (v21 == 1)
    {
      char v41 = 0;
      lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    }
    else
    {
      char v42 = 1;
      lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();
      CGFloat v27 = v31;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v33);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v18, v16);
  }
  else
  {
    uint64_t v22 = v34;
    uint64_t v23 = v19;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v37, v14, v20);
    char v43 = 2;
    lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();
    uint64_t v24 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
    uint64_t v25 = v36;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v25);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v37, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v18, v16);
  }
}

uint64_t PlaybackButton.State.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys, (uint64_t)&unk_1ED417F28, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  MEMORY[0x1F4188790](v4);
  double v50 = (char *)&v38 - v6;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys, (uint64_t)&unk_1ED417FB8, v3);
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  MEMORY[0x1F4188790](v7);
  long long v47 = (char *)&v38 - v8;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.UnplayedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys, (uint64_t)&unk_1ED417FD8, v3);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  MEMORY[0x1F4188790](v9);
  char v49 = (char *)&v38 - v10;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys, (uint64_t)&unk_1ED417E98, v3);
  uint64_t v12 = v11;
  uint64_t v48 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v38 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();
  int v21 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    goto LABEL_9;
  }
  uint64_t v39 = v17;
  uint64_t v23 = v49;
  uint64_t v22 = v50;
  double v51 = a1;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    CGFloat v27 = v14;
    uint64_t v29 = v28;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, MEMORY[0x1E4FBBA88]);
    *uint64_t v29 = v15;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v29, *MEMORY[0x1E4FBBA70], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v12);
    a1 = v51;
LABEL_9:
    uint64_t v30 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v30);
  }
  if (*(unsigned char *)(v24 + 32))
  {
    if (*(unsigned char *)(v24 + 32) == 1)
    {
      char v53 = 1;
      lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();
      uint64_t v25 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
      uint64_t v32 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v20, 2, 2, v32);
    }
    else
    {
      char v49 = (char *)v24;
      char v54 = 2;
      lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = type metadata accessor for Date();
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
      uint64_t v35 = (uint64_t)v39;
      uint64_t v36 = v44;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v37 = v48;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v35, 0, 2, v34);
      outlined init with take of PlaybackButton.State(v35, (uint64_t)v20, type metadata accessor for PlaybackButton.State);
    }
  }
  else
  {
    char v52 = 0;
    lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v41);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
    uint64_t v33 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v20, 1, 2, v33);
  }
  outlined init with take of PlaybackButton.State((uint64_t)v20, v46, type metadata accessor for PlaybackButton.State);
  uint64_t v30 = (uint64_t)v51;
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton.State@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackButton.State.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton.State(void *a1)
{
  return PlaybackButton.State.encode(to:)(a1);
}

Swift::Void __swiftcall PlaybackButton.Phase.toggle()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v0)
  {
    if (*v0 != 2) {
      return;
    }
    char v5 = 3;
  }
  else
  {
    char v5 = 1;
  }
  *unint64_t v0 = v5;
  LOBYTE(v18) = v5;
  uint64_t v6 = String.init<A>(describing:)();
  unint64_t v8 = v7;
  static Log.archivedPlaybackButton.getter();
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = v1;
    uint64_t v12 = v6;
    uint64_t v13 = (uint8_t *)v11;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1872C6000, v9, v10, "Transitioning state to %s from button tap.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v14, -1, -1);
    MEMORY[0x18C119C60](v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v16);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t PlaybackButton.Phase.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PendingPauseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys, (uint64_t)&unk_1ED417DE8, MEMORY[0x1E4FBBDE0]);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v30 = (char *)&v23 - v5;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys, (uint64_t)&unk_1ED417DA8, v3);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  MEMORY[0x1F4188790](v6);
  CGFloat v27 = (char *)&v23 - v7;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PendingPlayCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys, (uint64_t)&unk_1ED417DC8, v3);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v24 = (char *)&v23 - v9;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys, (uint64_t)&unk_1ED417D88, v3);
  uint64_t v11 = v10;
  uint64_t v23 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v23 - v12;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys, (uint64_t)&unk_1ED417CF8, v3);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v23 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v33)
  {
    case 1:
      char v35 = 1;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();
      uint64_t v19 = v24;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v25;
      uint64_t v20 = v26;
      goto LABEL_6;
    case 2:
      char v36 = 2;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();
      uint64_t v19 = v27;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v28;
      uint64_t v20 = v29;
      goto LABEL_6;
    case 3:
      char v37 = 3;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();
      uint64_t v19 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v31;
      uint64_t v20 = v32;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
      break;
    default:
      char v34 = 0;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v11);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.Phase.CodingKeys()
{
  uint64_t result = 0x646573756170;
  switch(*v0)
  {
    case 1:
    case 3:
      uint64_t result = 0x50676E69646E6570;
      break;
    case 2:
      uint64_t result = 0x676E6979616C70;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.Phase.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlaybackButton.Phase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PausedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PausedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PendingPauseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PendingPauseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PendingPlayCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PendingPlayCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PlayingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PlayingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton.Phase@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized PlaybackButton.Phase.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton.Phase(void *a1)
{
  return PlaybackButton.Phase.encode(to:)(a1, *v1);
}

uint64_t PlaybackButton.init(interval:state:systemImage:alignment:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v32 = a10;
  uint64_t v17 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a9 = swift_getKeyPath();
  *(void *)(a9 + 8) = 0;
  *(_WORD *)(a9 + 16) = 0;
  *(void *)(a9 + 24) = swift_getKeyPath();
  *(unsigned char *)(a9 + 32) = 0;
  *(void *)(a9 + 40) = swift_getKeyPath();
  *(unsigned char *)(a9 + 48) = 0;
  outlined init with copy of PlaybackButton.State(a1, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  outlined init with take of PlaybackButton.State(a2, (uint64_t)v19, type metadata accessor for PlaybackButton.State);
  outlined destroy of ClosedRange<Date>?(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = a9 + *(int *)(type metadata accessor for PlaybackButton(0) + 28);
  outlined init with take of PlaybackButton.State((uint64_t)v22, v24, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  uint64_t v25 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t result = outlined init with take of PlaybackButton.State((uint64_t)v19, v24 + v25[5], type metadata accessor for PlaybackButton.State);
  CGFloat v27 = (void *)(v24 + v25[6]);
  *CGFloat v27 = a3;
  v27[1] = a4;
  *(unsigned char *)(v24 + v25[7]) = 0;
  *(unsigned char *)(v24 + v25[8]) = 0;
  uint64_t v28 = (void *)(v24 + v25[9]);
  *uint64_t v28 = a5;
  v28[1] = a6;
  uint64_t v29 = v24 + v25[10];
  *(void *)uint64_t v29 = KeyPath;
  *(void *)(v29 + 8) = 0;
  *(unsigned char *)(v29 + 16) = 0;
  uint64_t v30 = v34;
  *(void *)(v29 + 24) = v33;
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  return result;
}

uint64_t PlaybackButton.init(interval:state:playSystemImage:pauseSystemImage:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v13 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  *(void *)a7 = swift_getKeyPath();
  *(void *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = swift_getKeyPath();
  *(unsigned char *)(a7 + 32) = 0;
  *(void *)(a7 + 40) = swift_getKeyPath();
  *(unsigned char *)(a7 + 48) = 0;
  outlined init with copy of PlaybackButton.State(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 0, 1, v19);
  outlined init with copy of PlaybackButton.State(a2, (uint64_t)v15, type metadata accessor for PlaybackButton.State);
  uint64_t v20 = static Alignment.center.getter();
  uint64_t v22 = v21;
  outlined destroy of ClosedRange<Date>?(a2, type metadata accessor for PlaybackButton.State);
  outlined destroy of ClosedRange<Date>?(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = a7 + *(int *)(type metadata accessor for PlaybackButton(0) + 28);
  outlined init with take of PlaybackButton.State((uint64_t)v18, v24, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  uint64_t v25 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t result = outlined init with take of PlaybackButton.State((uint64_t)v15, v24 + v25[5], type metadata accessor for PlaybackButton.State);
  CGFloat v27 = (void *)(v24 + v25[6]);
  *CGFloat v27 = a3;
  v27[1] = a4;
  *(unsigned char *)(v24 + v25[7]) = 0;
  *(unsigned char *)(v24 + v25[8]) = 0;
  uint64_t v28 = (uint64_t *)(v24 + v25[9]);
  *uint64_t v28 = v20;
  v28[1] = v22;
  uint64_t v29 = v24 + v25[10];
  *(void *)uint64_t v29 = KeyPath;
  *(void *)(v29 + 8) = 0;
  *(unsigned char *)(v29 + 16) = 0;
  uint64_t v30 = v32;
  *(void *)(v29 + 24) = v31;
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = a8;
  return result;
}

double PlaybackButton.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for PlaybackButton(0);
  outlined init with copy of PlaybackButton.State(v1 + *(int *)(v10 + 28), (uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v11 = *(void *)v1;
  uint64_t v12 = *(void *)(v1 + 8);
  uint64_t v13 = *(unsigned __int8 *)(v1 + 16);
  int v14 = *(unsigned __int8 *)(v1 + 17);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(void *)v1, v12, v13, *(unsigned char *)(v1 + 17));
  specialized Environment.wrappedValue.getter(v11, v12, v13 | (v14 << 8), (uint64_t)v35);
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v11, v12, v13, v14);
  uint64_t v15 = v35[0];
  uint64_t v33 = v35[1];
  int v32 = v36;
  uint64_t v16 = *(void *)(v1 + 24);
  LOBYTE(v13) = *(unsigned char *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v16, v13);
  LOBYTE(v11) = specialized Environment.wrappedValue.getter(v16, v13);
  outlined consume of Environment<Bool>.Content(v16, v13);
  uint64_t v17 = *(void *)(v1 + 40);
  char v18 = *(unsigned char *)(v1 + 48);
  outlined copy of Environment<Bool>.Content(v17, v18);
  double v19 = specialized Environment.wrappedValue.getter(v17, v18);
  outlined consume of Environment<Bool>.Content(v17, v18);
  outlined init with copy of PlaybackButton.State((uint64_t)&v9[*(int *)(v7 + 28)], (uint64_t)v5, type metadata accessor for PlaybackButton.State);
  *(unsigned char *)a1 = specialized PlaybackButton.Phase.init(_:)((uint64_t)v5);
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = (int *)type metadata accessor for ResolvedPlaybackButton(0);
  outlined init with copy of PlaybackButton.State((uint64_t)v9, a1 + v20[5], type metadata accessor for PlaybackButton.Configuration);
  uint64_t v21 = &v9[*(int *)(v7 + 48)];
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *((void *)v21 + 1);
  char v24 = v21[16];
  uint64_t v25 = *((void *)v21 + 5);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)(v21 + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v22, v23, v24);
  id v26 = *(id *)&v34[0];
  swift_retain();
  outlined destroy of ClosedRange<Date>?((uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v27 = a1 + v20[6];
  *(void *)uint64_t v27 = v22;
  *(void *)(v27 + 8) = v23;
  *(unsigned char *)(v27 + 16) = v24;
  double result = v34[0];
  *(_OWORD *)(v27 + 24) = *(_OWORD *)v34;
  *(void *)(v27 + 40) = v25;
  uint64_t v29 = a1 + v20[7];
  uint64_t v30 = v33;
  *(void *)uint64_t v29 = v15;
  *(void *)(v29 + 8) = v30;
  *(unsigned char *)(v29 + 16) = v32;
  *(unsigned char *)(a1 + v20[9]) = v11;
  *(double *)(a1 + v20[8]) = v19;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, (void (*)(uint64_t))type metadata accessor for PlaybackButton);

  return MEMORY[0x1F41003C0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, (void (*)(uint64_t))type metadata accessor for PlaybackButton);

  return MEMORY[0x1F41003C8](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlaybackButton()
{
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

int *PlaybackButton.archivedBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v2 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResolvedPlaybackButton(0);
  uint64_t v6 = (int *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v1 + *(int *)(type metadata accessor for PlaybackButton(0) + 28);
  uint64_t v44 = type metadata accessor for PlaybackButton.Configuration;
  outlined init with copy of PlaybackButton.State(v49, (uint64_t)v12, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v14 = *(void *)v1;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v15 = *(unsigned __int8 *)(v1 + 16);
  int v16 = *(unsigned __int8 *)(v1 + 17);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(void *)v1, v13, v15, *(unsigned char *)(v1 + 17));
  specialized Environment.wrappedValue.getter(v14, v13, v15 | (v16 << 8), (uint64_t)&v52);
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v14, v13, v15, v16);
  uint64_t v47 = v53;
  uint64_t v48 = v52;
  int v46 = v54;
  uint64_t v17 = *(void *)(v1 + 24);
  LOBYTE(v15) = *(unsigned char *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v17, v15);
  int v45 = specialized Environment.wrappedValue.getter(v17, v15);
  outlined consume of Environment<Bool>.Content(v17, v15);
  uint64_t v18 = *(void *)(v1 + 40);
  LOBYTE(v15) = *(unsigned char *)(v1 + 48);
  outlined copy of Environment<Bool>.Content(v18, v15);
  double v19 = specialized Environment.wrappedValue.getter(v18, v15);
  outlined consume of Environment<Bool>.Content(v18, v15);
  outlined init with copy of PlaybackButton.State((uint64_t)&v12[*(int *)(v10 + 28)], (uint64_t)v4, type metadata accessor for PlaybackButton.State);
  *uint64_t v8 = specialized PlaybackButton.Phase.init(_:)((uint64_t)v4);
  *((void *)v8 + 1) = 0;
  uint64_t v20 = v44;
  outlined init with copy of PlaybackButton.State((uint64_t)v12, (uint64_t)&v8[v6[7]], v44);
  uint64_t v21 = &v12[*(int *)(v10 + 48)];
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *((void *)v21 + 1);
  LOBYTE(v16) = v21[16];
  uint64_t v24 = *((void *)v21 + 5);
  long long v51 = *(_OWORD *)(v21 + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v22, v23, v16);
  id v25 = (id)v51;
  swift_retain();
  outlined destroy of ClosedRange<Date>?((uint64_t)v12, type metadata accessor for PlaybackButton.Configuration);
  id v26 = &v8[v6[8]];
  *(void *)id v26 = v22;
  *((void *)v26 + 1) = v23;
  v26[16] = v16;
  *(_OWORD *)(v26 + 24) = v51;
  *((void *)v26 + 5) = v24;
  uint64_t v27 = &v8[v6[9]];
  uint64_t v28 = v47;
  *(void *)uint64_t v27 = v48;
  *((void *)v27 + 1) = v28;
  v27[16] = v46;
  v8[v6[11]] = v45;
  *(double *)&v8[v6[10]] = v19;
  uint64_t v29 = v50;
  outlined init with take of PlaybackButton.State((uint64_t)v8, v50, type metadata accessor for ResolvedPlaybackButton);
  type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>, type metadata accessor for ResolvedPlaybackButton, type metadata accessor for ArchivablePlaybackButtonViewModifier, MEMORY[0x1E4F3FBA0]);
  uint64_t v31 = v29 + *(int *)(v30 + 36);
  outlined init with copy of PlaybackButton.State(v49, v31, v20);
  uint64_t v32 = *(void *)v1;
  uint64_t v33 = *(void *)(v1 + 8);
  uint64_t v34 = *(unsigned __int8 *)(v1 + 16);
  int v35 = *(unsigned __int8 *)(v1 + 17);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(void *)v1, v33, v34, *(unsigned char *)(v1 + 17));
  specialized Environment.wrappedValue.getter(v32, v33, v34 | (v35 << 8), (uint64_t)&v52);
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v32, v33, v34, v35);
  uint64_t v36 = v52;
  uint64_t v37 = v53;
  LOBYTE(v24) = v54;
  uint64_t v38 = *(void *)(v1 + 24);
  LOBYTE(v33) = *(unsigned char *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v38, v33);
  LOBYTE(v34) = specialized Environment.wrappedValue.getter(v38, v33);
  outlined consume of Environment<Bool>.Content(v38, v33);
  uint64_t v39 = *(void *)(v1 + 40);
  char v40 = *(unsigned char *)(v1 + 48);
  outlined copy of Environment<Bool>.Content(v39, v40);
  double v41 = specialized Environment.wrappedValue.getter(v39, v40);
  outlined consume of Environment<Bool>.Content(v39, v40);
  double result = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  uint64_t v43 = v31 + result[5];
  *(void *)uint64_t v43 = v36;
  *(void *)(v43 + 8) = v37;
  *(unsigned char *)(v43 + 16) = v24;
  *(unsigned char *)(v31 + result[6]) = v34;
  *(double *)(v31 + result[7]) = v41;
  return result;
}

double ArchivablePlaybackButtonViewModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PlaybackButton.State(v2, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v11 = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  uint64_t v12 = v2 + v11[5];
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  int v28 = *(unsigned __int8 *)(v2 + v11[6]);
  char v15 = *(unsigned char *)(v12 + 16);
  uint64_t v16 = *(void *)(v2 + v11[7]);
  outlined init with copy of PlaybackButton.State((uint64_t)&v10[*(int *)(v8 + 28)], (uint64_t)v6, type metadata accessor for PlaybackButton.State);
  *(unsigned char *)a1 = specialized PlaybackButton.Phase.init(_:)((uint64_t)v6);
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = (int *)type metadata accessor for ResolvedPlaybackButton(0);
  outlined init with copy of PlaybackButton.State((uint64_t)v10, a1 + v17[5], type metadata accessor for PlaybackButton.Configuration);
  uint64_t v18 = &v10[*(int *)(v8 + 48)];
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *((void *)v18 + 1);
  char v21 = v18[16];
  uint64_t v22 = *((void *)v18 + 5);
  long long v29 = *(_OWORD *)(v18 + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v19, v20, v21);
  id v23 = (id)v29;
  swift_retain();
  outlined destroy of ClosedRange<Date>?((uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v24 = a1 + v17[6];
  *(void *)uint64_t v24 = v19;
  *(void *)(v24 + 8) = v20;
  *(unsigned char *)(v24 + 16) = v21;
  double result = *(double *)&v29;
  *(_OWORD *)(v24 + 24) = v29;
  *(void *)(v24 + 40) = v22;
  uint64_t v26 = a1 + v17[7];
  *(void *)uint64_t v26 = v13;
  *(void *)(v26 + 8) = v14;
  *(unsigned char *)(v26 + 16) = v15;
  *(unsigned char *)(a1 + v17[9]) = v28;
  *(void *)(a1 + v17[8]) = v16;
  return result;
}

uint64_t ArchivablePlaybackButtonViewModifier.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivablePlaybackButtonViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys, (uint64_t)&unk_1ED461B40, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for PlaybackButton.Configuration(0);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton.Configuration and conformance PlaybackButton.Configuration, (void (*)(uint64_t))type metadata accessor for PlaybackButton.Configuration);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
    uint64_t v11 = (long long *)(v3 + v10[5]);
    char v12 = *((unsigned char *)v11 + 16);
    long long v14 = *v11;
    char v15 = v12;
    char v16 = 1;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = *(unsigned char *)(v3 + v10[6]);
    char v16 = 2;
    lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v10[7]);
    char v16 = 3;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ArchivablePlaybackButtonViewModifier.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v21 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivablePlaybackButtonViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys, (uint64_t)&unk_1ED461B40, MEMORY[0x1E4FBBDC0]);
  uint64_t v20 = v5;
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();
  uint64_t v22 = v7;
  uint64_t v11 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v18;
  uint64_t v12 = v19;
  LOBYTE(v24) = 0;
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton.Configuration and conformance PlaybackButton.Configuration, (void (*)(uint64_t))type metadata accessor for PlaybackButton.Configuration);
  uint64_t v14 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of PlaybackButton.State(v21, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  char v26 = 1;
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v15 = v25;
  char v16 = &v10[v8[5]];
  *(_OWORD *)char v16 = v24;
  v16[16] = v15;
  char v26 = 2;
  lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10[v8[6]] = v24;
  char v26 = 3;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v14);
  *(void *)&v10[v8[7]] = v24;
  outlined init with copy of PlaybackButton.State((uint64_t)v10, v12, type metadata accessor for ArchivablePlaybackButtonViewModifier);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of ClosedRange<Date>?((uint64_t)v10, type metadata accessor for ArchivablePlaybackButtonViewModifier);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  unint64_t result = 0x72756769666E6F63;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656C797473;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x61657241706174;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivablePlaybackButtonViewModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivablePlaybackButtonViewModifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivablePlaybackButtonViewModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivablePlaybackButtonViewModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivablePlaybackButtonViewModifier@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivablePlaybackButtonViewModifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivablePlaybackButtonViewModifier(void *a1)
{
  return ArchivablePlaybackButtonViewModifier.encode(to:)(a1);
}

uint64_t closure #1 in ResolvedPlaybackButton.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResolvedPlaybackButton(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 8);
  LOBYTE(v28) = *(unsigned char *)a1;
  *((void *)&v28 + 1) = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(0, &lazy cache variable for type metadata for State<PlaybackButton.Phase>, (uint64_t)&type metadata for PlaybackButton.Phase, MEMORY[0x1E4F41580]);
  swift_retain();
  State.wrappedValue.getter();
  PlaybackButton.Phase.toggle()();
  LOBYTE(v28) = v27;
  if (v9)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
  }
  uint64_t v10 = (long long *)(a1 + *(int *)(v2 + 24));
  long long v11 = v10[1];
  long long v28 = *v10;
  long long v29 = v11;
  long long v30 = v10[2];
  type metadata accessor for MainActor();
  uint64_t v12 = static Semantics.v7.getter();
  MEMORY[0x1F4188790](v12);
  static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
  static Log.archivedPlaybackButton.getter();
  outlined init with copy of PlaybackButton.State(a1, (uint64_t)v4, type metadata accessor for ResolvedPlaybackButton);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = v16;
    uint64_t v25 = v5;
    *(_DWORD *)char v15 = 136315138;
    uint64_t v23 = v15 + 4;
    id v17 = objc_msgSend(*(id *)&v4[*(int *)(v2 + 20)+ 24+ (uint64_t)*(int *)(type metadata accessor for PlaybackButton.Configuration(0) + 40)], sel_debugDescription);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v24 = v8;
    uint64_t v19 = v6;
    unint64_t v21 = v20;

    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ClosedRange<Date>?((uint64_t)v4, type metadata accessor for ResolvedPlaybackButton);
    _os_log_impl(&dword_1872C6000, v13, v14, "Executed LNAction %s from playback button tap.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v16, -1, -1);
    MEMORY[0x18C119C60](v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v25);
  }
  else
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v4, type metadata accessor for ResolvedPlaybackButton);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t closure #2 in ResolvedPlaybackButton.body.getter@<X0>(int a1@<W0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v45 = a1;
  uint64_t v46 = a3;
  uint64_t v4 = type metadata accessor for ResolvedPlaybackButtonContent(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ResolvedPlaybackButton(0);
  uint64_t v9 = (uint64_t *)&a2[*(int *)(v8 + 28)];
  uint64_t v10 = *v9;
  uint64_t v43 = v9[1];
  uint64_t v44 = v10;
  int v42 = *((unsigned __int8 *)v9 + 16);
  uint64_t v37 = v8;
  uint64_t v11 = (uint64_t)&a2[*(int *)(v8 + 20)];
  uint64_t v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v13 = v12[6];
  uint64_t v40 = v11 + v12[5];
  uint64_t v14 = *(void *)(v11 + v13 + 8);
  uint64_t v41 = *(void *)(v11 + v13);
  uint64_t v15 = *((void *)a2 + 1);
  char v48 = *a2;
  uint64_t v49 = v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(0, &lazy cache variable for type metadata for State<PlaybackButton.Phase>, (uint64_t)&type metadata for PlaybackButton.Phase, MEMORY[0x1E4F41580]);
  swift_bridgeObjectRetain();
  State.wrappedValue.getter();
  int v38 = v50;
  uint64_t v16 = (uint64_t *)(v11 + v12[9]);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = v11 + v12[10];
  uint64_t v20 = *(void *)(v19 + 8);
  uint64_t v39 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 16);
  uint64_t v22 = *(void *)(v19 + 40);
  uint64_t v23 = (uint64_t)&v7[*(int *)(v5 + 28)];
  long long v47 = *(_OWORD *)(v19 + 24);
  uint64_t v24 = v11;
  uint64_t v25 = v20;
  outlined init with copy of PlaybackButton.State(v24, v23, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  outlined init with copy of PlaybackButton.State(v40, v23 + v12[5], type metadata accessor for PlaybackButton.State);
  uint64_t v26 = (void *)(v23 + v12[6]);
  *uint64_t v26 = v41;
  v26[1] = v14;
  *(unsigned char *)(v23 + v12[7]) = v38;
  *(unsigned char *)(v23 + v12[8]) = v45;
  uint64_t v27 = (void *)(v23 + v12[9]);
  *uint64_t v27 = v17;
  v27[1] = v18;
  uint64_t v28 = v23 + v12[10];
  uint64_t v29 = v39;
  *(void *)uint64_t v28 = v39;
  *(void *)(v28 + 8) = v25;
  *(unsigned char *)(v28 + 16) = v21;
  *(_OWORD *)(v28 + 24) = v47;
  *(void *)(v28 + 40) = v22;
  uint64_t v30 = v43;
  *(void *)uint64_t v7 = v44;
  *((void *)v7 + 1) = v30;
  LOBYTE(v30) = v42;
  v7[16] = v42;
  double v31 = 0.0;
  if ((v30 & 0xFE) == 4) {
    double v31 = (28.0 - *(double *)&a2[*(int *)(v37 + 32)]) * 0.5;
  }
  uint64_t v32 = v46;
  outlined init with copy of PlaybackButton.State((uint64_t)v7, v46, type metadata accessor for ResolvedPlaybackButtonContent);
  type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>();
  uint64_t v34 = v32 + *(int *)(v33 + 36);
  *(double *)uint64_t v34 = v31;
  *(unsigned char *)(v34 + 8) = 0;
  *(void *)(v34 + 16) = 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(v29, v25, v21);
  id v35 = (id)v47;
  swift_retain();
  return outlined destroy of ClosedRange<Date>?((uint64_t)v7, type metadata accessor for ResolvedPlaybackButtonContent);
}

uint64_t closure #3 in ResolvedPlaybackButton.body.getter()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t EnvironmentValues.playbackButtonProgressVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1ED461578, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1ED461578, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.playbackButtonProgressVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1ED461578, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedPlaybackButton()
{
  type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>();
  uint64_t v0 = MEMORY[0x1E4F3F3F0];
  type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F411E8]);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>> and conformance ButtonBehavior<A>, (void (*)(uint64_t))type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>);
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, v0);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedPlaybackButton@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v2);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  outlined init with copy of PlaybackButton.State(v11, (uint64_t)&v18 - v9, type metadata accessor for ResolvedPlaybackButton);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  outlined init with take of PlaybackButton.State((uint64_t)v10, v13 + v12, type metadata accessor for ResolvedPlaybackButton);
  uint64_t v14 = v19;
  outlined init with copy of PlaybackButton.State(v19, (uint64_t)v7, type metadata accessor for ResolvedPlaybackButton);
  uint64_t v15 = swift_allocObject();
  outlined init with take of PlaybackButton.State((uint64_t)v7, v15 + v12, type metadata accessor for ResolvedPlaybackButton);
  uint64_t result = swift_getKeyPath();
  char v17 = *(unsigned char *)(v14 + *(int *)(a1 + 36));
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = partial apply for closure #1 in ResolvedPlaybackButton.body.getter;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = partial apply for closure #2 in ResolvedPlaybackButton.body.getter;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = closure #3 in ResolvedPlaybackButton.body.getter;
  *(void *)(a2 + 72) = 0;
  *(_WORD *)(a2 + 80) = 2;
  *(unsigned char *)(a2 + 82) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = result;
  *(unsigned char *)(a2 + 104) = v17;
  return result;
}

uint64_t ResolvedPlaybackButtonContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PillPlaybackButtonStyleBody();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CirclePlaybackButtonStyleBody();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v27 - v16;
  char v18 = *((unsigned char *)v1 + 16);
  if ((v18 & 0xFE) == 4)
  {
    uint64_t v19 = type metadata accessor for ResolvedPlaybackButtonContent(0);
    outlined init with copy of PlaybackButton.State((uint64_t)v1 + *(int *)(v19 + 20), (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
    *(void *)uint64_t v14 = swift_getKeyPath();
    v14[8] = 0;
    outlined init with take of PlaybackButton.State((uint64_t)v11, (uint64_t)&v14[*(int *)(v12 + 20)], type metadata accessor for PlaybackButton.Configuration);
    outlined init with take of PlaybackButton.State((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CirclePlaybackButtonStyleBody);
    outlined init with copy of PlaybackButton.State((uint64_t)v17, a1, (uint64_t (*)(void))type metadata accessor for CirclePlaybackButtonStyleBody);
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for CirclePlaybackButtonStyleBody;
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    uint64_t v23 = *v1;
    uint64_t v22 = v1[1];
    uint64_t v24 = type metadata accessor for ResolvedPlaybackButtonContent(0);
    outlined init with copy of PlaybackButton.State((uint64_t)v1 + *(int *)(v24 + 20), (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
    *(void *)uint64_t v5 = swift_getKeyPath();
    v5[8] = 0;
    outlined init with take of PlaybackButton.State((uint64_t)v11, (uint64_t)&v5[*(int *)(v3 + 20)], type metadata accessor for PlaybackButton.Configuration);
    uint64_t v25 = &v5[*(int *)(v3 + 24)];
    *uint64_t v25 = v23;
    *((void *)v25 + 1) = v22;
    v25[16] = v18;
    outlined init with take of PlaybackButton.State((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
    outlined init with copy of PlaybackButton.State((uint64_t)v8, a1, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for PillPlaybackButtonStyleBody;
    uint64_t v21 = (uint64_t)v8;
  }
  return outlined destroy of ClosedRange<Date>?(v21, (uint64_t (*)(void))v20);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedPlaybackButtonContent()
{
  type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(0);
  lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedCont();
    BOOL v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t View.playbackButtonTapArea(_:)()
{
  return swift_release();
}

double EnvironmentValues.playbackButtonTapArea.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1ED442FD8, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1ED442FD8, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.playbackButtonTapArea.setter()
{
  type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1ED442FD8, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.playbackButtonProgress(_:)()
{
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance PlaybackButtonTapAreaKey(void *a1@<X8>)
{
  *a1 = 0x4049000000000000;
}

uint64_t key path getter for EnvironmentValues.appIntentExecutor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.appIntentExecutor.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.appIntentExecutor : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(a1, a2, a3, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedCont);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(a1, a2, a3, type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(void))
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double key path getter for EnvironmentValues.playbackButtonStyle : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, (uint64_t)&type metadata for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.PlaybackButtonStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, (uint64_t)&type metadata for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.PlaybackButtonStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.playbackButtonStyle : EnvironmentValues()
{
  return EnvironmentValues.playbackButtonStyle.setter();
}

uint64_t specialized static PlaybackButton.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (PlaybackButton.State, PlaybackButton.State)();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of PlaybackButton.State(a1, (uint64_t)v13, type metadata accessor for PlaybackButton.State);
  outlined init with copy of PlaybackButton.State(a2, v15, type metadata accessor for PlaybackButton.State);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v17 = v16(v13, 2, v4);
  if (!v17)
  {
    outlined init with copy of PlaybackButton.State((uint64_t)v13, (uint64_t)v10, type metadata accessor for PlaybackButton.State);
    if (!v16((char *)v15, 2, v4))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      char v21 = static Date.== infix(_:_:)();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v7, v4);
      v22(v10, v4);
      uint64_t v19 = type metadata accessor for PlaybackButton.State;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    int v18 = v16((char *)v15, 2, v4);
    uint64_t v19 = type metadata accessor for PlaybackButton.State;
    if (v18 == 1) {
      goto LABEL_8;
    }
LABEL_9:
    char v21 = 0;
    uint64_t v19 = (uint64_t (*)(void))type metadata accessor for (PlaybackButton.State, PlaybackButton.State);
    goto LABEL_11;
  }
  int v20 = v16((char *)v15, 2, v4);
  uint64_t v19 = type metadata accessor for PlaybackButton.State;
  if (v20 != 2) {
    goto LABEL_9;
  }
LABEL_8:
  char v21 = 1;
LABEL_11:
  outlined destroy of ClosedRange<Date>?((uint64_t)v13, v19);
  return v21 & 1;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for PlaybackButton.State(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackButton.State);
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

void type metadata accessor for ClosedRange<Date>?(uint64_t a1)
{
}

uint64_t sub_1877E5D20()
{
  return EnvironmentValues.playbackButtonStyle.setter();
}

uint64_t sub_1877E5D60@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.playbackButtonProgressVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1877E5D9C()
{
  return EnvironmentValues.playbackButtonProgressVisibility.setter();
}

void sub_1877E5DC4(double *a1@<X8>)
{
  *a1 = EnvironmentValues.playbackButtonTapArea.getter();
}

uint64_t sub_1877E5E00()
{
  return EnvironmentValues.playbackButtonTapArea.setter();
}

uint64_t outlined init with copy of PlaybackButton.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1877E5E90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.appIntentExecutor.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t type metadata accessor for PlaybackButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackButton);
}

uint64_t outlined init with take of PlaybackButton.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ClosedRange<Date>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized PlaybackButton.Configuration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D496D6574737973 && a2 == 0xEB00000000656761 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6573616870 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6573736572507369 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized PlaybackButton.State.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646579616C706E75 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6979616C70 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646573756170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized PlaybackButton.Phase.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (PlaybackButton.State, PlaybackButton.State)();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v24 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v3 + 56))((char *)&v24 - v15, 2, 2, v2, v14);
  uint64_t v17 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of PlaybackButton.State(a1, (uint64_t)v9, type metadata accessor for PlaybackButton.State);
  outlined init with copy of PlaybackButton.State((uint64_t)v16, v17, type metadata accessor for PlaybackButton.State);
  int v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v19 = v18(v9, 2, v2);
  if (v19)
  {
    if (v19 == 1)
    {
      if (v18((char *)v17, 2, v2) != 1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (v18((char *)v17, 2, v2) == 2)
    {
LABEL_8:
      outlined destroy of ClosedRange<Date>?((uint64_t)v9, type metadata accessor for PlaybackButton.State);
      uint64_t v20 = 2;
      goto LABEL_13;
    }
LABEL_9:
    outlined destroy of ClosedRange<Date>?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for (PlaybackButton.State, PlaybackButton.State));
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  outlined init with copy of PlaybackButton.State((uint64_t)v9, (uint64_t)v12, type metadata accessor for PlaybackButton.State);
  if (v18((char *)v17, 2, v2))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v17, v2);
  char v21 = static Date.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v5, v2);
  v22(v12, v2);
  outlined destroy of ClosedRange<Date>?((uint64_t)v9, type metadata accessor for PlaybackButton.State);
  if (v21) {
    uint64_t v20 = 2;
  }
  else {
    uint64_t v20 = 0;
  }
LABEL_13:
  outlined destroy of ClosedRange<Date>?(a1, type metadata accessor for PlaybackButton.State);
  outlined destroy of ClosedRange<Date>?((uint64_t)v16, type metadata accessor for PlaybackButton.State);
  return v20;
}

uint64_t type metadata accessor for ResolvedPlaybackButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedPlaybackButton);
}

uint64_t type metadata accessor for ArchivablePlaybackButtonViewModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivablePlaybackButtonViewModifier);
}

uint64_t associated type witness table accessor for View.Body : View in PlaybackButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in PlaybackButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for PlaybackButton(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, (void (*)(uint64_t))type metadata accessor for PlaybackButton);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackButton(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 17);
    unsigned __int8 v10 = *(unsigned char *)(a2 + 16);
    outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(void *)a2, v8, v10, v9);
    uint64_t *v4 = v7;
    v4[1] = v8;
    *((unsigned char *)v4 + 16) = v10;
    *((unsigned char *)v4 + 17) = v9;
    uint64_t v11 = *(void *)(a2 + 24);
    LOBYTE(v8) = *(unsigned char *)(a2 + 32);
    outlined copy of Environment<Bool>.Content(v11, v8);
    v4[3] = v11;
    *((unsigned char *)v4 + 32) = v8;
    uint64_t v12 = *(void *)(a2 + 40);
    LOBYTE(v8) = *(unsigned char *)(a2 + 48);
    outlined copy of Environment<Bool>.Content(v12, v8);
    v4[5] = v12;
    *((unsigned char *)v4 + 48) = v8;
    uint64_t v13 = *(int *)(a3 + 28);
    double v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)(a2 + v13);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = type metadata accessor for Date();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v14, v15, v21);
      v22(&v14[*(int *)(v17 + 36)], &v15[*(int *)(v17 + 36)], v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
    }
    uint64_t v23 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v24 = v23[5];
    uint64_t v25 = &v14[v24];
    uint64_t v26 = &v15[v24];
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 2, v27))
    {
      uint64_t v29 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 2, v27);
    }
    uint64_t v30 = v23[6];
    double v31 = &v14[v30];
    uint64_t v32 = &v15[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)double v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    v14[v23[7]] = v15[v23[7]];
    v14[v23[8]] = v15[v23[8]];
    *(_OWORD *)&v14[v23[9]] = *(_OWORD *)&v15[v23[9]];
    uint64_t v34 = v23[10];
    id v35 = &v14[v34];
    uint64_t v36 = &v15[v34];
    uint64_t v37 = *(void *)&v15[v34];
    uint64_t v38 = *(void *)&v15[v34 + 8];
    char v39 = v36[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v37, v38, v39);
    *(void *)id v35 = v37;
    *((void *)v35 + 1) = v38;
    v35[16] = v39;
    uint64_t v40 = *((void *)v36 + 5);
    long long v41 = *(_OWORD *)(v36 + 24);
    *(_OWORD *)(v35 + 24) = v41;
    *((void *)v35 + 5) = v40;
    id v42 = (id)v41;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PlaybackButton(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  uint64_t v9 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v10 = v4 + *(int *)(v9 + 20);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(void *)a2, v7, v9, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  uint64_t v10 = *(void *)(a2 + 24);
  LOBYTE(v7) = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<Bool>.Content(v10, v7);
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v11 = *(void *)(a2 + 40);
  LOBYTE(v7) = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<Bool>.Content(v11, v7);
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = v7;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  double v14 = (char *)(a2 + v12);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    v20(v13, v14, v19);
    v20(&v13[*(int *)(v16 + 36)], &v14[*(int *)(v16 + 36)], v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  uint64_t v21 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v22 = v21[5];
  uint64_t v23 = &v13[v22];
  uint64_t v24 = &v14[v22];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 2, v25))
  {
    uint64_t v27 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 2, v25);
  }
  uint64_t v28 = v21[6];
  uint64_t v29 = &v13[v28];
  uint64_t v30 = &v14[v28];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  v13[v21[7]] = v14[v21[7]];
  v13[v21[8]] = v14[v21[8]];
  *(_OWORD *)&v13[v21[9]] = *(_OWORD *)&v14[v21[9]];
  uint64_t v32 = v21[10];
  uint64_t v33 = &v13[v32];
  uint64_t v34 = &v14[v32];
  uint64_t v35 = *(void *)&v14[v32];
  uint64_t v36 = *(void *)&v14[v32 + 8];
  char v37 = v34[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v35, v36, v37);
  *(void *)uint64_t v33 = v35;
  *((void *)v33 + 1) = v36;
  v33[16] = v37;
  uint64_t v38 = *((void *)v34 + 5);
  long long v39 = *(_OWORD *)(v34 + 24);
  *(_OWORD *)(v33 + 24) = v39;
  *((void *)v33 + 5) = v38;
  id v40 = (id)v39;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(void *)a2, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v10, v11, v13, v12);
  uint64_t v14 = *(void *)(a2 + 24);
  LOBYTE(v7) = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<Bool>.Content(v14, v7);
  uint64_t v15 = *(void *)(a1 + 24);
  char v16 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Environment<Bool>.Content(v15, v16);
  uint64_t v17 = *(void *)(a2 + 40);
  LOBYTE(v7) = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<Bool>.Content(v17, v7);
  uint64_t v18 = *(void *)(a1 + 40);
  char v19 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 48) = v7;
  outlined consume of Environment<Bool>.Content(v18, v19);
  uint64_t v20 = *(int *)(a3 + 28);
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v7) = v26(v21, 1, v23);
  int v27 = v26(v22, 1, v24);
  if (v7)
  {
    if (!v27)
    {
      uint64_t v28 = type metadata accessor for Date();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v21, v22, v28);
      v29(&v21[*(int *)(v24 + 36)], &v22[*(int *)(v24 + 36)], v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v21, v22, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v61 = type metadata accessor for Date();
  double v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 24);
  v62(v21, v22, v61);
  v62(&v21[*(int *)(v24 + 36)], &v22[*(int *)(v24 + 36)], v61);
LABEL_7:
  uint64_t v31 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v32 = v31[5];
  uint64_t v33 = &v21[v32];
  double v63 = v22;
  uint64_t v34 = &v22[v32];
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v35 - 8);
  char v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 2, v35);
  int v39 = v37(v34, 2, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    uint64_t v40 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 2, v35);
LABEL_13:
  uint64_t v41 = v31[6];
  id v42 = &v21[v41];
  uint64_t v43 = &v63[v41];
  *(void *)id v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[v31[7]] = v63[v31[7]];
  v21[v31[8]] = v63[v31[8]];
  uint64_t v44 = v31[9];
  int v45 = &v21[v44];
  uint64_t v46 = &v63[v44];
  *(void *)int v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  uint64_t v47 = v31[10];
  char v48 = &v21[v47];
  uint64_t v49 = &v63[v47];
  uint64_t v50 = *(void *)&v63[v47];
  uint64_t v51 = *(void *)&v63[v47 + 8];
  char v52 = v63[v47 + 16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v50, v51, v52);
  uint64_t v53 = *(void *)v48;
  uint64_t v54 = *((void *)v48 + 1);
  char v55 = v48[16];
  *(void *)char v48 = v50;
  *((void *)v48 + 1) = v51;
  v48[16] = v52;
  outlined consume of Environment<AppIntentExecutor?>.Content(v53, v54, v55);
  CGFloat v56 = (void *)*((void *)v49 + 3);
  CGFloat v57 = (void *)*((void *)v48 + 3);
  *((void *)v48 + 3) = v56;
  id v58 = v56;

  uint64_t v59 = *((void *)v49 + 5);
  *((void *)v48 + 4) = *((void *)v49 + 4);
  *((void *)v48 + 5) = v59;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)(a2 + v4);
  uint64_t v6 = (char *)(a1 + v4);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v6, v5, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    char v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v6, v5, v11);
    v12(&v6[*(int *)(v8 + 36)], &v5[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v6[v14];
  char v16 = &v5[v14];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    uint64_t v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  *(_OWORD *)&v6[v13[6]] = *(_OWORD *)&v5[v13[6]];
  v6[v13[7]] = v5[v13[7]];
  v6[v13[8]] = v5[v13[8]];
  *(_OWORD *)&v6[v13[9]] = *(_OWORD *)&v5[v13[9]];
  uint64_t v20 = v13[10];
  uint64_t v21 = &v6[v20];
  uint64_t v22 = &v5[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

uint64_t assignWithTake for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v7;
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v8, v9, v11, v10);
  char v12 = *(unsigned char *)(a2 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  char v14 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  char v15 = *(unsigned char *)(a2 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  char v17 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v15;
  outlined consume of Environment<Bool>.Content(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)(v21 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v19, 1, v21);
  int v26 = v24(v20, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      uint64_t v27 = type metadata accessor for Date();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
      v28(v19, v20, v27);
      v28(&v19[*(int *)(v22 + 36)], &v20[*(int *)(v22 + 36)], v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v19, v20, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 40);
  v54(v19, v20, v53);
  v54(&v19[*(int *)(v22 + 36)], &v20[*(int *)(v22 + 36)], v53);
LABEL_7:
  uint64_t v30 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v31 = v30[5];
  uint64_t v32 = &v19[v31];
  char v55 = v20;
  uint64_t v33 = &v20[v31];
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 2, v34);
  int v38 = v36(v33, 2, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v32, v33, v34);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    uint64_t v39 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 2, v34);
LABEL_13:
  uint64_t v40 = v30[6];
  uint64_t v41 = &v19[v40];
  id v42 = &v55[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  v19[v30[7]] = v55[v30[7]];
  v19[v30[8]] = v55[v30[8]];
  *(_OWORD *)&v19[v30[9]] = *(_OWORD *)&v55[v30[9]];
  uint64_t v45 = v30[10];
  uint64_t v46 = &v19[v45];
  uint64_t v47 = &v55[v45];
  LOBYTE(v45) = v55[v45 + 16];
  uint64_t v48 = *(void *)v46;
  uint64_t v49 = *((void *)v46 + 1);
  char v50 = v46[16];
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  v46[16] = v45;
  outlined consume of Environment<AppIntentExecutor?>.Content(v48, v49, v50);
  uint64_t v51 = (void *)*((void *)v46 + 3);
  *((void *)v46 + 3) = *((void *)v47 + 3);

  *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877E7C40);
}

uint64_t sub_1877E7C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877E7CFC);
}

uint64_t sub_1877E7CFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 17) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PlaybackButton()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackButton.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for PlaybackButton.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v2);
  if (!result)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for PlaybackButton.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for PlaybackButton.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for PlaybackButton.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for PlaybackButton.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877E857C);
}

uint64_t sub_1877E857C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877E85FC);
}

uint64_t sub_1877E85FC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for PlaybackButton.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for PlaybackButton.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t type metadata completion function for PlaybackButton.State()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1877E87D0()
{
  return lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ResolvedPlaybackButton and conformance ResolvedPlaybackButton, (void (*)(uint64_t))type metadata accessor for ResolvedPlaybackButton);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>, type metadata accessor for ResolvedPlaybackButton, type metadata accessor for ArchivablePlaybackButtonViewModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ResolvedPlaybackButton and conformance ResolvedPlaybackButton, (void (*)(uint64_t))type metadata accessor for ResolvedPlaybackButton);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1877E8938(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_1877E8954(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E4F3F3F0], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ArchivablePlaybackButtonViewModifier(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for ClosedRange<Date>();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v4, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v4, a2, v12);
      v13(&v4[*(int *)(v8 + 36)], (uint64_t *)((char *)a2 + *(int *)(v8 + 36)), v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    char v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v15 = v14[5];
    uint64_t v16 = &v4[v15];
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 2, v18))
    {
      uint64_t v20 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
    }
    uint64_t v21 = v14[6];
    uint64_t v22 = &v4[v21];
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *(void *)uint64_t v22 = *v23;
    *((void *)v22 + 1) = v24;
    v4[v14[7]] = *((unsigned char *)a2 + v14[7]);
    v4[v14[8]] = *((unsigned char *)a2 + v14[8]);
    *(_OWORD *)&v4[v14[9]] = *(_OWORD *)((char *)a2 + v14[9]);
    uint64_t v25 = v14[10];
    int v26 = &v4[v25];
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(uint64_t *)((char *)a2 + v25);
    uint64_t v29 = *(uint64_t *)((char *)a2 + v25 + 8);
    char v30 = *((unsigned char *)a2 + v25 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v28, v29, v30);
    *(void *)int v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = v30;
    uint64_t v31 = *((void *)v27 + 5);
    long long v32 = *(_OWORD *)(v27 + 24);
    *(_OWORD *)(v26 + 24) = v32;
    *((void *)v26 + 5) = v31;
    uint64_t v33 = a3[5];
    uint64_t v34 = a3[6];
    uint64_t v35 = &v4[v33];
    uint64_t v36 = (char *)a2 + v33;
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
    v4[v34] = *((unsigned char *)a2 + v34);
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    id v37 = (id)v32;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ArchivablePlaybackButtonViewModifier(uint64_t a1)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v3 = v2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2))
  {
    uint64_t v4 = type metadata accessor for Date();
    int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    v5(a1, v4);
    v5(a1 + *(int *)(v3 + 36), v4);
  }
  uint64_t v6 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v7 = a1 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 2, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(v6 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));

  return swift_release();
}

char *initializeWithCopy for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v13 = v12[5];
  char v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 2, v16))
  {
    uint64_t v18 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 2, v16);
  }
  uint64_t v19 = v12[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  a1[v12[7]] = a2[v12[7]];
  a1[v12[8]] = a2[v12[8]];
  *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
  uint64_t v23 = v12[10];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)&a2[v23];
  uint64_t v27 = *(void *)&a2[v23 + 8];
  char v28 = a2[v23 + 16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v26, v27, v28);
  *(void *)uint64_t v24 = v26;
  *((void *)v24 + 1) = v27;
  v24[16] = v28;
  uint64_t v29 = *((void *)v25 + 5);
  long long v30 = *(_OWORD *)(v25 + 24);
  *(_OWORD *)(v24 + 24) = v30;
  *((void *)v24 + 5) = v29;
  uint64_t v31 = a3[5];
  uint64_t v32 = a3[6];
  uint64_t v33 = &a1[v31];
  uint64_t v34 = &a2[v31];
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  v33[16] = v34[16];
  a1[v32] = a2[v32];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  id v35 = (id)v30;
  swift_retain();
  return a1;
}

char *assignWithCopy for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v5);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      v12(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24);
  v49(a1, a2, v48);
  v49(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v48);
LABEL_7:
  char v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 2, v18);
  int v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  uint64_t v24 = v14[6];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v14[7]] = a2[v14[7]];
  a1[v14[8]] = a2[v14[8]];
  uint64_t v27 = v14[9];
  char v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)char v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = v14[10];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)&a2[v30];
  uint64_t v34 = *(void *)&a2[v30 + 8];
  char v35 = a2[v30 + 16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)uint64_t v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  uint64_t v39 = (void *)*((void *)v32 + 3);
  uint64_t v40 = (void *)*((void *)v31 + 3);
  *((void *)v31 + 3) = v39;
  id v41 = v39;

  uint64_t v42 = *((void *)v32 + 5);
  *((void *)v31 + 4) = *((void *)v32 + 4);
  *((void *)v31 + 5) = v42;
  swift_retain();
  swift_release();
  uint64_t v43 = a3[5];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  long long v46 = *(_OWORD *)v45;
  v44[16] = v45[16];
  *(_OWORD *)uint64_t v44 = v46;
  a1[a3[6]] = a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *initializeWithTake for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v13 = v12[5];
  char v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 2, v16))
  {
    uint64_t v18 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 2, v16);
  }
  *(_OWORD *)&a1[v12[6]] = *(_OWORD *)&a2[v12[6]];
  a1[v12[7]] = a2[v12[7]];
  a1[v12[8]] = a2[v12[8]];
  *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
  uint64_t v19 = v12[10];
  uint64_t v20 = &a1[v19];
  int v21 = &a2[v19];
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  uint64_t v23 = a3[5];
  uint64_t v24 = a3[6];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  v25[16] = v26[16];
  a1[v24] = a2[v24];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v5);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      v12(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v41 = type metadata accessor for Date();
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 40);
  v42(a1, a2, v41);
  v42(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v41);
LABEL_7:
  char v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 2, v18);
  int v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  uint64_t v24 = v14[6];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  a1[v14[7]] = a2[v14[7]];
  a1[v14[8]] = a2[v14[8]];
  *(_OWORD *)&a1[v14[9]] = *(_OWORD *)&a2[v14[9]];
  uint64_t v29 = v14[10];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  LOBYTE(v29) = a2[v29 + 16];
  uint64_t v32 = *(void *)v30;
  uint64_t v33 = *((void *)v30 + 1);
  char v34 = v30[16];
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  v30[16] = v29;
  outlined consume of Environment<AppIntentExecutor?>.Content(v32, v33, v34);
  char v35 = (void *)*((void *)v30 + 3);
  *((void *)v30 + 3) = *((void *)v31 + 3);

  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  swift_release();
  uint64_t v36 = a3[5];
  uint64_t v37 = a3[6];
  char v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  *(_OWORD *)char v38 = *(_OWORD *)v39;
  v38[16] = v39[16];
  a1[v37] = a2[v37];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivablePlaybackButtonViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877E9D54);
}

uint64_t sub_1877E9D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ArchivablePlaybackButtonViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877E9E24);
}

uint64_t sub_1877E9E24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for ArchivablePlaybackButtonViewModifier()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ResolvedPlaybackButton(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    type metadata accessor for ClosedRange<Date>();
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v9, 1, v11))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v8, v9, v16);
      v17(&v8[*(int *)(v11 + 36)], &v9[*(int *)(v11 + 36)], v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    uint64_t v18 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v19 = v18[5];
    uint64_t v20 = &v8[v19];
    int v21 = &v9[v19];
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 2, v22))
    {
      uint64_t v24 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
    }
    uint64_t v25 = v18[6];
    uint64_t v26 = &v8[v25];
    uint64_t v27 = &v9[v25];
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)uint64_t v26 = *(void *)v27;
    *((void *)v26 + 1) = v28;
    v8[v18[7]] = v9[v18[7]];
    v8[v18[8]] = v9[v18[8]];
    *(_OWORD *)&v8[v18[9]] = *(_OWORD *)&v9[v18[9]];
    uint64_t v29 = v18[10];
    uint64_t v30 = &v8[v29];
    uint64_t v31 = &v9[v29];
    uint64_t v32 = *(void *)&v9[v29];
    uint64_t v33 = *(void *)&v9[v29 + 8];
    char v34 = v31[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v32, v33, v34);
    *(void *)uint64_t v30 = v32;
    *((void *)v30 + 1) = v33;
    v30[16] = v34;
    uint64_t v35 = *((void *)v31 + 5);
    long long v36 = *(_OWORD *)(v31 + 24);
    *(_OWORD *)(v30 + 24) = v36;
    *((void *)v30 + 5) = v35;
    uint64_t v37 = a3[6];
    char v38 = (char *)v4 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = *(void *)((char *)a2 + v37);
    uint64_t v41 = *(void *)((char *)a2 + v37 + 8);
    LOBYTE(v30) = *((unsigned char *)a2 + v37 + 16);
    id v42 = (id)v36;
    swift_retain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v40, v41, (char)v30);
    *(void *)char v38 = v40;
    *((void *)v38 + 1) = v41;
    v38[16] = (char)v30;
    uint64_t v43 = *((void *)v39 + 5);
    long long v44 = *(_OWORD *)(v39 + 24);
    *(_OWORD *)(v38 + 24) = v44;
    *((void *)v38 + 5) = v43;
    uint64_t v45 = a3[7];
    uint64_t v46 = a3[8];
    uint64_t v47 = (char *)v4 + v45;
    uint64_t v48 = (char *)a2 + v45;
    *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    v47[16] = v48[16];
    *(void *)((char *)v4 + v46) = *(void *)((char *)a2 + v46);
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    id v49 = (id)v44;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ResolvedPlaybackButton(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  uint64_t v9 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v10 = v4 + *(int *)(v9 + 20);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));

  swift_release();
  uint64_t v14 = a1 + *(int *)(a2 + 24);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v7, v8, v14);
    v15(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  uint64_t v16 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 2, v20))
  {
    uint64_t v22 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 2, v20);
  }
  uint64_t v23 = v16[6];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = v26;
  v7[v16[7]] = v8[v16[7]];
  v7[v16[8]] = v8[v16[8]];
  *(_OWORD *)&v7[v16[9]] = *(_OWORD *)&v8[v16[9]];
  uint64_t v27 = v16[10];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  uint64_t v30 = *(void *)&v8[v27];
  uint64_t v31 = *(void *)&v8[v27 + 8];
  char v32 = v29[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v30, v31, v32);
  *(void *)uint64_t v28 = v30;
  *((void *)v28 + 1) = v31;
  unsigned char v28[16] = v32;
  uint64_t v33 = *((void *)v29 + 5);
  long long v34 = *(_OWORD *)(v29 + 24);
  *(_OWORD *)(v28 + 24) = v34;
  *((void *)v28 + 5) = v33;
  uint64_t v35 = a3[6];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = *(void *)(a2 + v35);
  uint64_t v39 = *(void *)(a2 + v35 + 8);
  LOBYTE(v28) = *(unsigned char *)(a2 + v35 + 16);
  id v40 = (id)v34;
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v38, v39, (char)v28);
  *(void *)uint64_t v36 = v38;
  *(void *)(v36 + 8) = v39;
  *(unsigned char *)(v36 + 16) = (_BYTE)v28;
  uint64_t v41 = *(void *)(v37 + 40);
  long long v42 = *(_OWORD *)(v37 + 24);
  *(_OWORD *)(v36 + 24) = v42;
  *(void *)(v36 + 40) = v41;
  uint64_t v43 = a3[7];
  uint64_t v44 = a3[8];
  uint64_t v45 = a1 + v43;
  uint64_t v46 = a2 + v43;
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(unsigned char *)(v45 + 16) = *(unsigned char *)(v46 + 16);
  *(void *)(a1 + v44) = *(void *)(a2 + v44);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  id v47 = (id)v42;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  CGFloat v67 = a3;
  uint64_t v68 = a2;
  uint64_t v6 = a3[5];
  uint64_t v69 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1, v9);
  int v14 = v12(v8, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      v16(v7, v8, v15);
      v16(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v65 = type metadata accessor for Date();
  double v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24);
  v66(v7, v8, v65);
  v66(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v65);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 2, v22);
  int v26 = v24(v21, 2, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    uint64_t v27 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
LABEL_13:
  uint64_t v28 = v18[6];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v18[7]] = v8[v18[7]];
  v7[v18[8]] = v8[v18[8]];
  uint64_t v31 = v18[9];
  char v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  *(void *)char v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  uint64_t v34 = v18[10];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  uint64_t v37 = *(void *)&v8[v34];
  uint64_t v38 = *(void *)&v8[v34 + 8];
  char v39 = v36[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v37, v38, v39);
  uint64_t v40 = *(void *)v35;
  uint64_t v41 = *((void *)v35 + 1);
  char v42 = v35[16];
  *(void *)uint64_t v35 = v37;
  *((void *)v35 + 1) = v38;
  v35[16] = v39;
  outlined consume of Environment<AppIntentExecutor?>.Content(v40, v41, v42);
  uint64_t v43 = (void *)*((void *)v36 + 3);
  uint64_t v44 = (void *)*((void *)v35 + 3);
  *((void *)v35 + 3) = v43;
  id v45 = v43;

  uint64_t v46 = *((void *)v36 + 5);
  *((void *)v35 + 4) = *((void *)v36 + 4);
  *((void *)v35 + 5) = v46;
  swift_retain();
  swift_release();
  uint64_t v47 = v67[6];
  uint64_t v48 = v69 + v47;
  id v49 = (void *)(v68 + v47);
  uint64_t v50 = *(void *)(v68 + v47);
  uint64_t v51 = *(void *)(v68 + v47 + 8);
  char v52 = *(unsigned char *)(v68 + v47 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(v50, v51, v52);
  uint64_t v53 = *(void *)v48;
  uint64_t v54 = *(void *)(v48 + 8);
  char v55 = *(unsigned char *)(v48 + 16);
  *(void *)uint64_t v48 = v50;
  *(void *)(v48 + 8) = v51;
  *(unsigned char *)(v48 + 16) = v52;
  outlined consume of Environment<AppIntentExecutor?>.Content(v53, v54, v55);
  CGFloat v56 = (void *)v49[3];
  CGFloat v57 = *(void **)(v48 + 24);
  *(void *)(v48 + 24) = v56;
  id v58 = v56;

  uint64_t v59 = v49[5];
  *(void *)(v48 + 32) = v49[4];
  *(void *)(v48 + 40) = v59;
  swift_retain();
  swift_release();
  uint64_t v60 = v67[7];
  uint64_t v61 = v69 + v60;
  double v62 = (long long *)(v68 + v60);
  long long v63 = *v62;
  *(unsigned char *)(v61 + 16) = *((unsigned char *)v62 + 16);
  *(_OWORD *)uint64_t v61 = v63;
  *(void *)(v69 + v67[8]) = *(void *)(v68 + v67[8]);
  *(unsigned char *)(v69 + v67[9]) = *(unsigned char *)(v68 + v67[9]);
  return v69;
}

_OWORD *initializeWithTake for ResolvedPlaybackButton(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    int v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v7, v8, v13);
    v14(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  uint64_t v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
  {
    uint64_t v21 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
  }
  *(_OWORD *)&v7[v15[6]] = *(_OWORD *)&v8[v15[6]];
  v7[v15[7]] = v8[v15[7]];
  v7[v15[8]] = v8[v15[8]];
  *(_OWORD *)&v7[v15[9]] = *(_OWORD *)&v8[v15[9]];
  uint64_t v22 = v15[10];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  uint64_t v26 = a3[6];
  uint64_t v27 = a3[7];
  uint64_t v28 = (_OWORD *)((char *)a1 + v26);
  uint64_t v29 = (_OWORD *)((char *)a2 + v26);
  long long v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  v28[2] = v29[2];
  uint64_t v31 = (char *)a1 + v27;
  char v32 = (char *)a2 + v27;
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  v31[16] = v32[16];
  uint64_t v33 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  return a1;
}

uint64_t assignWithTake for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v55 = a3;
  uint64_t v56 = a1;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v54 = a2;
  uint64_t v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1, v9);
  int v14 = v12(v8, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(v7, v8, v15);
      v16(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 40);
  v53(v7, v8, v52);
  v53(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v52);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 2, v22);
  int v26 = v24(v21, 2, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    uint64_t v27 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
LABEL_13:
  uint64_t v28 = v18[6];
  uint64_t v29 = &v7[v28];
  long long v30 = &v8[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v7[v18[7]] = v8[v18[7]];
  v7[v18[8]] = v8[v18[8]];
  *(_OWORD *)&v7[v18[9]] = *(_OWORD *)&v8[v18[9]];
  uint64_t v33 = v18[10];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = &v8[v33];
  LOBYTE(v33) = v8[v33 + 16];
  uint64_t v36 = *(void *)v34;
  uint64_t v37 = *((void *)v34 + 1);
  char v38 = v34[16];
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  v34[16] = v33;
  outlined consume of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  char v39 = (void *)*((void *)v34 + 3);
  *((void *)v34 + 3) = *((void *)v35 + 3);

  *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
  swift_release();
  uint64_t v40 = v55[6];
  uint64_t v41 = v56 + v40;
  uint64_t v42 = v54 + v40;
  LOBYTE(v40) = *(unsigned char *)(v54 + v40 + 16);
  uint64_t v43 = *(void *)v41;
  uint64_t v44 = *(void *)(v41 + 8);
  char v45 = *(unsigned char *)(v41 + 16);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(unsigned char *)(v41 + 16) = v40;
  outlined consume of Environment<AppIntentExecutor?>.Content(v43, v44, v45);
  uint64_t v46 = *(void **)(v41 + 24);
  *(void *)(v41 + 24) = *(void *)(v42 + 24);

  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  swift_release();
  uint64_t v47 = v55[7];
  uint64_t v48 = v55[8];
  uint64_t v49 = v56 + v47;
  uint64_t v50 = v54 + v47;
  *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
  *(unsigned char *)(v49 + 16) = *(unsigned char *)(v50 + 16);
  *(void *)(v56 + v48) = *(void *)(v54 + v48);
  *(unsigned char *)(v56 + v55[9]) = *(unsigned char *)(v54 + v55[9]);
  return v56;
}

uint64_t getEnumTagSinglePayload for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877EB478);
}

uint64_t sub_1877EB478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877EB554);
}

uint64_t sub_1877EB554(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedPlaybackButton()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for PlaybackButton.Configuration(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for ClosedRange<Date>();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v4, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = type metadata accessor for Date();
      int v13 = *(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v4, a2, v12);
      v13(&v4[*(int *)(v8 + 36)], (uint64_t *)((char *)a2 + *(int *)(v8 + 36)), v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    uint64_t v14 = a3[5];
    uint64_t v15 = &v4[v14];
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
    {
      uint64_t v19 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
    }
    uint64_t v20 = a3[6];
    uint64_t v21 = a3[7];
    uint64_t v22 = &v4[v20];
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *(void *)uint64_t v22 = *v23;
    *((void *)v22 + 1) = v24;
    v4[v21] = *((unsigned char *)a2 + v21);
    uint64_t v25 = a3[9];
    v4[a3[8]] = *((unsigned char *)a2 + a3[8]);
    *(_OWORD *)&v4[v25] = *(_OWORD *)((char *)a2 + v25);
    uint64_t v26 = a3[10];
    uint64_t v27 = &v4[v26];
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    uint64_t v30 = *((void *)v28 + 1);
    char v31 = v28[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v29, v30, v31);
    *(void *)uint64_t v27 = v29;
    *((void *)v27 + 1) = v30;
    v27[16] = v31;
    uint64_t v32 = *((void *)v28 + 5);
    long long v33 = *(_OWORD *)(v28 + 24);
    *(_OWORD *)(v27 + 24) = v33;
    *((void *)v27 + 5) = v32;
    id v34 = (id)v33;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PlaybackButton.Configuration(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v5 = v4;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(a1, v6);
    v7(a1 + *(int *)(v5 + 36), v6);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 2, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + *(int *)(a2 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));

  return swift_release();
}

char *initializeWithCopy for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v12 = a3[5];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 2, v15))
  {
    uint64_t v17 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
  }
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  a1[v19] = a2[v19];
  uint64_t v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_OWORD *)&a1[v23] = *(_OWORD *)&a2[v23];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)&a2[v24];
  uint64_t v28 = *((void *)v26 + 1);
  char v29 = v26[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v27, v28, v29);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = v29;
  uint64_t v30 = *((void *)v26 + 5);
  long long v31 = *(_OWORD *)(v26 + 24);
  *(_OWORD *)(v25 + 24) = v31;
  *((void *)v25 + 5) = v30;
  id v32 = (id)v31;
  swift_retain();
  return a1;
}

char *assignWithCopy for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      uint64_t v12 = type metadata accessor for Date();
      int v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v44 = type metadata accessor for Date();
  char v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 24);
  v45(a1, a2, v44);
  v45(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v44);
LABEL_7:
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 2, v18);
  int v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  uint64_t v24 = a3[6];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  char v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = a3[10];
  long long v31 = &a1[v30];
  id v32 = &a2[v30];
  uint64_t v33 = *(void *)&a2[v30];
  uint64_t v34 = *((void *)v32 + 1);
  char v35 = v32[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)long long v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  char v39 = (void *)*((void *)v32 + 3);
  uint64_t v40 = (void *)*((void *)v31 + 3);
  *((void *)v31 + 3) = v39;
  id v41 = v39;

  uint64_t v42 = *((void *)v32 + 5);
  *((void *)v31 + 4) = *((void *)v32 + 4);
  *((void *)v31 + 5) = v42;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    int v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v12 = a3[5];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 2, v15))
  {
    uint64_t v17 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
  }
  uint64_t v18 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v18] = a2[v18];
  uint64_t v19 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  uint64_t v20 = a3[10];
  int v21 = &a1[v20];
  int v22 = &a2[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)int v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

char *assignWithTake for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      uint64_t v12 = type metadata accessor for Date();
      int v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 40);
  v40(a1, a2, v39);
  v40(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v39);
LABEL_7:
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 2, v18);
  int v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  uint64_t v24 = a3[6];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v29] = a2[v29];
  uint64_t v30 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  long long v31 = &a1[v30];
  id v32 = &a2[v30];
  char v33 = v32[16];
  uint64_t v34 = *(void *)&a1[v30];
  uint64_t v35 = *(void *)&a1[v30 + 8];
  char v36 = a1[v30 + 16];
  *(_OWORD *)long long v31 = *(_OWORD *)v32;
  v31[16] = v33;
  outlined consume of Environment<AppIntentExecutor?>.Content(v34, v35, v36);
  uint64_t v37 = (void *)*((void *)v31 + 3);
  *((void *)v31 + 3) = *((void *)v32 + 3);

  *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877EC8BC);
}

uint64_t sub_1877EC8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ClosedRange<Date>?(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for PlaybackButton.State(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 24);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877EC9E8);
}

uint64_t sub_1877EC9E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ClosedRange<Date>?(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for PlaybackButton.State(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 24) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PlaybackButton.Configuration()
{
  type metadata accessor for ClosedRange<Date>?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PlaybackButton.State(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PlaybackButton.State.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877ECCC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlaybackButton.State.CodingKeys()
{
  return &unk_1ED417E98;
}

void *type metadata accessor for PlaybackButton.State.UnplayedCodingKeys()
{
  return &unk_1ED417FD8;
}

void *type metadata accessor for PlaybackButton.State.PlayingCodingKeys()
{
  return &unk_1ED417FB8;
}

unsigned char *storeEnumTagSinglePayload for PlaybackButton.State.PausedCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1877ECDB4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for PlaybackButton.State.PausedCodingKeys()
{
  return &unk_1ED417F28;
}

uint64_t instantiation function for generic protocol witness table for ArchivablePlaybackButtonViewModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
  a1[2] = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
  uint64_t result = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivablePlaybackButtonViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedPlaybackButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in ResolvedPlaybackButton.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for ResolvedPlaybackButton(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in ResolvedPlaybackButton.body.getter(v2);
}

uint64_t partial apply for closure #2 in ResolvedPlaybackButton.body.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResolvedPlaybackButton(0) - 8);
  unsigned int v6 = (char *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return closure #2 in ResolvedPlaybackButton.body.getter(a1, v6, a2);
}

uint64_t type metadata accessor for ResolvedPlaybackButtonContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedPlaybackButtonContent);
}

void type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>)
  {
    type metadata accessor for ResolvedPlaybackButtonContent(255);
    type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, MEMORY[0x1E4F41820], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

void type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>()
{
  if (!lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ButtonBehavior();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ResolvedPlaybackButtonContent and conformance ResolvedPlaybackButtonContent, (void (*)(uint64_t))type metadata accessor for ResolvedPlaybackButtonContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility;
  if (!lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility;
  if (!lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment;
  if (!lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment;
  if (!lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction;
  if (!lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction;
  if (!lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction);
  }
  return result;
}

uint64_t _sSNy10Foundation4DateVGSNyxGSesSeRzrlWlTm_0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>();
    lazy protocol witness table accessor for type Date and conformance Date(a2, MEMORY[0x1E4F27928]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (PlaybackButton.State, PlaybackButton.State)()
{
  if (!lazy cache variable for type metadata for (PlaybackButton.State, PlaybackButton.State))
  {
    type metadata accessor for PlaybackButton.State(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PlaybackButton.State, PlaybackButton.State));
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1ED442FD8, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1ED461578, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, (uint64_t)&type metadata for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.PlaybackButtonStyleKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for PlaybackButtonProgressVisibilityKey()
{
  return &unk_1ED461578;
}

void *type metadata accessor for PlaybackButtonTapAreaKey()
{
  return &unk_1ED442FD8;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.Configuration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PlaybackButton.Configuration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877EDD34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlaybackButton.Configuration.CodingKeys()
{
  return &unk_1ED417AE8;
}

void *type metadata accessor for ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  return &unk_1ED461B40;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    uint64_t v3 = v12 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v5 = *(int *)(a3 + 20);
    unsigned int v6 = (char *)(a1 + v5);
    BOOL v7 = (char *)a2 + v5;
    type metadata accessor for ClosedRange<Date>();
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      v14(v6, v7, v13);
      v14(&v6[*(int *)(v9 + 36)], &v7[*(int *)(v9 + 36)], v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    uint64_t v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v16 = v15[5];
    uint64_t v17 = &v6[v16];
    uint64_t v18 = &v7[v16];
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
    {
      uint64_t v21 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
    }
    uint64_t v22 = v15[6];
    uint64_t v23 = &v6[v22];
    uint64_t v24 = &v7[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    v6[v15[7]] = v7[v15[7]];
    v6[v15[8]] = v7[v15[8]];
    *(_OWORD *)&v6[v15[9]] = *(_OWORD *)&v7[v15[9]];
    uint64_t v26 = v15[10];
    uint64_t v27 = &v6[v26];
    uint64_t v28 = &v7[v26];
    uint64_t v29 = *(void *)&v7[v26];
    uint64_t v30 = *(void *)&v7[v26 + 8];
    char v31 = v28[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v29, v30, v31);
    *(void *)uint64_t v27 = v29;
    *((void *)v27 + 1) = v30;
    v27[16] = v31;
    uint64_t v32 = *((void *)v28 + 5);
    long long v33 = *(_OWORD *)(v28 + 24);
    *(_OWORD *)(v27 + 24) = v33;
    *((void *)v27 + 5) = v32;
    id v34 = (id)v33;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v4 = v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    uint64_t v5 = type metadata accessor for Date();
    unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v6(v2, v5);
    v6(v2 + *(int *)(v4 + 36), v5);
  }
  uint64_t v7 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v8 = v2 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 2, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v2 + *(int *)(v7 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)(a1 + v4);
  unsigned int v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v5, v6, v11);
    v12(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  uint64_t v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &v6[v14];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    uint64_t v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  uint64_t v20 = v13[6];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = v23;
  v5[v13[7]] = v6[v13[7]];
  v5[v13[8]] = v6[v13[8]];
  *(_OWORD *)&v5[v13[9]] = *(_OWORD *)&v6[v13[9]];
  uint64_t v24 = v13[10];
  uint64_t v25 = &v5[v24];
  uint64_t v26 = &v6[v24];
  uint64_t v27 = *(void *)&v6[v24];
  uint64_t v28 = *(void *)&v6[v24 + 8];
  char v29 = v26[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v27, v28, v29);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = v29;
  uint64_t v30 = *((void *)v26 + 5);
  long long v31 = *(_OWORD *)(v26 + 24);
  *(_OWORD *)(v25 + 24) = v31;
  *((void *)v25 + 5) = v30;
  id v32 = (id)v31;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedPlaybackButtonContent(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v3 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v3;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)(a1 + v4);
  unsigned int v6 = (char *)a2 + v4;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v5, 1, v7);
  int v12 = v10(v6, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = type metadata accessor for Date();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      v14(v5, v6, v13);
      v14(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 24);
  v47(v5, v6, v46);
  v47(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v46);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 2, v20);
  int v24 = v22(v19, 2, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 2, v20);
LABEL_13:
  uint64_t v26 = v16[6];
  uint64_t v27 = &v5[v26];
  uint64_t v28 = &v6[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[v16[7]] = v6[v16[7]];
  v5[v16[8]] = v6[v16[8]];
  uint64_t v29 = v16[9];
  uint64_t v30 = &v5[v29];
  long long v31 = &v6[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  uint64_t v32 = v16[10];
  long long v33 = &v5[v32];
  id v34 = &v6[v32];
  uint64_t v35 = *(void *)&v6[v32];
  uint64_t v36 = *(void *)&v6[v32 + 8];
  char v37 = v34[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v35, v36, v37);
  uint64_t v38 = *(void *)v33;
  uint64_t v39 = *((void *)v33 + 1);
  char v40 = v33[16];
  *(void *)long long v33 = v35;
  *((void *)v33 + 1) = v36;
  v33[16] = v37;
  outlined consume of Environment<AppIntentExecutor?>.Content(v38, v39, v40);
  id v41 = (void *)*((void *)v34 + 3);
  uint64_t v42 = (void *)*((void *)v33 + 3);
  *((void *)v33 + 3) = v41;
  id v43 = v41;

  uint64_t v44 = *((void *)v34 + 5);
  *((void *)v33 + 4) = *((void *)v34 + 4);
  *((void *)v33 + 5) = v44;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)(a1 + v4);
  unsigned int v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v5, v6, v11);
    v12(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  uint64_t v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &v6[v14];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    uint64_t v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  *(_OWORD *)&v5[v13[6]] = *(_OWORD *)&v6[v13[6]];
  v5[v13[7]] = v6[v13[7]];
  v5[v13[8]] = v6[v13[8]];
  *(_OWORD *)&v5[v13[9]] = *(_OWORD *)&v6[v13[9]];
  uint64_t v20 = v13[10];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

uint64_t assignWithTake for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)(a1 + v3);
  uint64_t v5 = (char *)(a2 + v3);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v4, 1, v6);
  int v11 = v9(v5, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(v4, v5, v12);
      v13(&v4[*(int *)(v7 + 36)], &v5[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v4, v5, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 40);
  v39(v4, v5, v38);
  v39(&v4[*(int *)(v7 + 36)], &v5[*(int *)(v7 + 36)], v38);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = &v4[v16];
  uint64_t v18 = &v5[v16];
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 2, v19);
  int v23 = v21(v18, 2, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
LABEL_13:
  uint64_t v25 = v15[6];
  uint64_t v26 = &v4[v25];
  uint64_t v27 = &v5[v25];
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v4[v15[7]] = v5[v15[7]];
  v4[v15[8]] = v5[v15[8]];
  *(_OWORD *)&v4[v15[9]] = *(_OWORD *)&v5[v15[9]];
  uint64_t v30 = v15[10];
  long long v31 = &v4[v30];
  uint64_t v32 = &v5[v30];
  LOBYTE(v30) = v5[v30 + 16];
  uint64_t v33 = *(void *)v31;
  uint64_t v34 = *((void *)v31 + 1);
  char v35 = v31[16];
  *(_OWORD *)long long v31 = *(_OWORD *)v32;
  v31[16] = v30;
  outlined consume of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
  uint64_t v36 = (void *)*((void *)v31 + 3);
  *((void *)v31 + 3) = *((void *)v32 + 3);

  *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877EEF60);
}

uint64_t sub_1877EEF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
      int v4 = 5;
    }
    else {
      int v4 = *(unsigned __int8 *)(a1 + 16);
    }
    unsigned int v5 = v4 - 5;
    if (*(unsigned __int8 *)(a1 + 16) >= 3u) {
      return v5;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = type metadata accessor for PlaybackButton.Configuration(0);
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877EF028);
}

uint64_t sub_1877EF028(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 250)
  {
    *(unsigned char *)(result + 16) = a2 + 5;
  }
  else
  {
    uint64_t v7 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedPlaybackButtonContent()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackButton.Phase()
{
  return &type metadata for PlaybackButton.Phase;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>> and conformance ButtonBehavior<A>, (void (*)(uint64_t))type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E4F3F3F0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedPlaybackButtonContent()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, Color>, (void (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1)
{
}

void type metadata accessor for ClosedRange<Date>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>()
{
  if (!lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>(255);
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AppearanceAnimationView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>();
    lazy protocol witness table accessor for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, Color>, (void (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>()
{
  if (!lazy cache variable for type metadata for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase();
    unint64_t v0 = type metadata accessor for IDView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, MEMORY[0x1E4F3FE38], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>, type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, MEMORY[0x1E4F3FE38], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
    }
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(uint64_t a1)
{
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>)
  {
    type metadata accessor for ClosedRange<Date>?(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>(uint64_t a1)
{
}

void type metadata accessor for StrokeShapeView<Circle._Inset, Color, EmptyView>()
{
  if (!lazy cache variable for type metadata for StrokeShapeView<Circle._Inset, Color, EmptyView>)
  {
    lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
    unint64_t v0 = type metadata accessor for StrokeShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<Circle._Inset, Color, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, MEMORY[0x1E4F3FE38], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(255, &lazy cache variable for type metadata for _AnimationModifier<PlaybackButton.Phase>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase, (uint64_t)&type metadata for PlaybackButton.Phase, MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>(uint64_t a1)
{
}

void type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>()
{
  if (!lazy cache variable for type metadata for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>)
  {
    type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, MEMORY[0x1E4F41598], MEMORY[0x1E4F3F8B0]);
    lazy protocol witness table accessor for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>();
    unint64_t v0 = type metadata accessor for StrokeShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>;
  if (!lazy protocol witness table cache variable for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>)
  {
    type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, MEMORY[0x1E4F41598], MEMORY[0x1E4F3F8B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?)
  {
    type metadata accessor for ClosedRange<Date>?(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?);
    }
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(uint64_t a1)
{
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ProgressViewSchedule(255);
    a3(255);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, (void (*)(uint64_t))type metadata accessor for ProgressViewSchedule);
    unint64_t v5 = type metadata accessor for TimelineView();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>(255);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>);
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>))
  {
    uint64_t v0 = MEMORY[0x1E4F3F6A0];
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>);
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, v0, MEMORY[0x1E4F3FBA0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>));
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    unint64_t v3 = type metadata accessor for ModifiedContent();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for _ShapeView<Circle, Color>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ShapeView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(255, &lazy cache variable for type metadata for _AnimationModifier<PlaybackButton.Phase>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase, (uint64_t)&type metadata for PlaybackButton.Phase, MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E20]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F40578]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<Text, Text>, Text>)
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Text, Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41420], MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<Text, Text>, Text>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _BackgroundModifier<TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>(255);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for (@thick Any.Type, DecodingError.Context)(255, a3, a4, a5);
    unint64_t v6 = type metadata accessor for TupleView();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1)
{
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>()
{
  if (!lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>();
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for AppearanceAnimationView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    lazy protocol witness table accessor for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized PlaybackButton.Phase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646573756170 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x50676E69646E6570 && a2 == 0xEB0000000079616CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E6979616C70 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x50676E69646E6570 && a2 == 0xEC00000065737561)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized PlaybackButton.Phase.init(from:)(void *a1)
{
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PendingPauseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys, (uint64_t)&unk_1ED417DE8, MEMORY[0x1E4FBBDC0]);
  uint64_t v41 = v3;
  uint64_t v36 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v40 = (char *)&v29 - v4;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys, (uint64_t)&unk_1ED417DA8, v2);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v38 = (char *)&v29 - v6;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PendingPlayCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys, (uint64_t)&unk_1ED417DC8, v2);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  MEMORY[0x1F4188790](v7);
  char v37 = (char *)&v29 - v8;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys, (uint64_t)&unk_1ED417D88, v2);
  uint64_t v10 = v9;
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v29 - v11;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys, (uint64_t)&unk_1ED417CF8, v2);
  uint64_t v14 = v13;
  uint64_t v39 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();
  uint64_t v17 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    goto LABEL_10;
  }
  uint64_t v42 = v12;
  uint64_t v30 = v10;
  uint64_t v18 = v40;
  uint64_t v19 = v41;
  uint64_t v20 = v39;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, MEMORY[0x1E4FBBA88]);
    *uint64_t v27 = &type metadata for PlaybackButton.Phase;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v27, *MEMORY[0x1E4FBBA70], v10);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v14);
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v10;
  }
  uint64_t v22 = *(unsigned __int8 *)(v21 + 32);
  uint64_t v29 = v22;
  switch(v22)
  {
    case 1:
      char v44 = 1;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();
      int v23 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v32;
      uint64_t v24 = v33;
      goto LABEL_8;
    case 2:
      char v45 = 2;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();
      int v23 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v34;
      uint64_t v24 = v35;
      goto LABEL_8;
    case 3:
      char v46 = 3;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v19);
      goto LABEL_12;
    default:
      char v43 = 0;
      lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();
      int v23 = v42;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v30;
      uint64_t v25 = v31;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
LABEL_12:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v14);
      uint64_t v10 = v29;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      break;
  }
  return v10;
}

uint64_t specialized ArchivablePlaybackButtonViewModifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000188329B20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61657241706174 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ArchivablePlaybackButtonViewModifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877F2BCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlaybackButton.Phase.CodingKeys()
{
  return &unk_1ED417CF8;
}

void *type metadata accessor for PlaybackButton.Phase.PausedCodingKeys()
{
  return &unk_1ED417D88;
}

void *type metadata accessor for PlaybackButton.Phase.PendingPlayCodingKeys()
{
  return &unk_1ED417DC8;
}

void *type metadata accessor for PlaybackButton.Phase.PlayingCodingKeys()
{
  return &unk_1ED417DA8;
}

void *type metadata accessor for PlaybackButton.Phase.PendingPauseCodingKeys()
{
  return &unk_1ED417DE8;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody>, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type CirclePlaybackButtonStyleBody and conformance CirclePlaybackButtonStyleBody, (void (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PillPlaybackButtonStyleBody and conformance PillPlaybackButtonStyleBody, (void (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void static ListRowPlatterColorTraitKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.listRowPlatterColor(_:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

ValueMetadata *type metadata accessor for ListRowPlatterColorTraitKey()
{
  return &type metadata for ListRowPlatterColorTraitKey;
}

uint64_t sub_1877F3164()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<ListRowPlatterColorTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListRowPlatterColorTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListRowPlatterColorTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ListRowPlatterColorTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void static ShouldExpandAllTraitKey.defaultValue.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t ExpansionState.description.getter()
{
  uint64_t v1 = 0x65736C6166;
  if (*v0 != 1) {
    uint64_t v1 = 7104878;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1702195828;
  }
}

BOOL static ExpansionState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ExpansionState.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ExpansionState.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ExpansionState and conformance ExpansionState()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpansionState and conformance ExpansionState;
  if (!lazy protocol witness table cache variable for type ExpansionState and conformance ExpansionState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpansionState and conformance ExpansionState);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpansionState()
{
  uint64_t v1 = 0x65736C6166;
  if (*v0 != 1) {
    uint64_t v1 = 7104878;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1702195828;
  }
}

ValueMetadata *type metadata accessor for ShouldExpandAllTraitKey()
{
  return &type metadata for ShouldExpandAllTraitKey;
}

unsigned char *storeEnumTagSinglePayload for ExpansionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877F34E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpansionState()
{
  return &type metadata for ExpansionState;
}

uint64_t BalancedNavigationSplitViewStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  unsigned __int8 v8 = *((unsigned char *)a1 + 48);
  *(void *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v7;
  *(_WORD *)(a2 + 80) = v8;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t ColumnsFormStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static HorizontalAlignment.formDetailLeading.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t associated type witness table accessor for FormStyle.Body : View in ColumnsFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for FormStyle.makeBody(configuration:) in conformance ColumnsFormStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static HorizontalAlignment.formDetailLeading.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

ValueMetadata *type metadata accessor for ColumnsFormStyle()
{
  return &type metadata for ColumnsFormStyle;
}

_UNKNOWN **sub_1877F3650()
{
  return &protocol witness table for FormVStack<A>;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance ColumnsFormStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext();

  return specialized static FormStyleContext.accepts<A>(_:at:)(a4, a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance ColumnsFormStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

unint64_t instantiation function for generic protocol witness table for ColumnsFormStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext;
  if (!lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext;
  if (!lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext);
  }
  return result;
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in ColumnarLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t result = static HorizontalAlignment.formDetailLeading.getter();
  *(void *)a1 = 0x3FF0000000000000;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = result;
  *(void *)(a1 + 80) = closure #3 in closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:);
  *(void *)(a1 + 88) = 0;
  return result;
}

uint64_t closure #3 in closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:)()
{
  uint64_t v0 = static HorizontalAlignment.trailing.getter();
  return MEMORY[0x18C10E990](v0);
}

double protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance ColumnarLabeledContentStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.firstTextBaseline.getter();
  closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:)((uint64_t)v13);
  double result = *(double *)v13;
  uint64_t v4 = v13[1];
  char v5 = v14;
  uint64_t v6 = v15;
  char v7 = v16;
  uint64_t v8 = v17;
  char v9 = v18;
  uint64_t v10 = v20;
  long long v11 = v21;
  long long v12 = v19;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 80) = v12;
  *(void *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 104) = v11;
  return result;
}

uint64_t sub_1877F39E4()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>);
}

void type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>();
    lazy protocol witness table accessor for type HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>);
    }
  }
}

void type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>()
{
  if (!lazy cache variable for type metadata for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>)
  {
    type metadata accessor for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>);
    }
  }
}

void type metadata accessor for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)()
{
  if (!lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content))
  {
    type metadata accessor for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>();
    type metadata accessor for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content));
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<LayoutPriorityTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E4F40980], MEMORY[0x1E4F40978], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>)
  {
    type metadata accessor for _TraitWritingModifier<LayoutPriorityTraitKey>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>, MEMORY[0x1E4F415E0], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<LayoutPriorityTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void View.textSelection<A>(_:)()
{
  type metadata accessor for TextSelectabilityModifier();

  JUMPOUT(0x18C113660);
}

uint64_t type metadata accessor for TextSelectabilityModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1877F3E38()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TextSelectabilityModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextSelectabilityModifier._makeInputs(modifier:inputs:)(a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

_UNKNOWN **base witness table accessor for ViewModifier in TextSelectabilityModifier<A>()
{
  return &protocol witness table for TextSelectabilityModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextSelectabilityModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for TextSelectabilityModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextSelectabilityModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for TextSelectabilityModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextSelectabilityModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t specialized static TextSelectabilityModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _GraphInputs.textSelectionRepresentation.setter();
}

unint64_t lazy protocol witness table accessor for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation;
  if (!lazy protocol witness table cache variable for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation);
  }
  return result;
}

uint64_t static LazyPageTabViewStyle._makeView<A>(value:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LazyPageTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v2 = type metadata accessor for LazyPageTabView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void *initializeBufferWithCopyOfBuffer for LazyPageTabView(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  size_t v12 = v9 + v11;
  if ((v11 | v8) <= 7
    && ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v9 + v11) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64) <= 0x18)
  {
    char v16 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = ~v8;
    if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
    {
      uint64_t v25 = *(void *)(a3 + 16);
      int v19 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v16 + v8 + 8) & ~v8);
      uint64_t v5 = v25;
      uint64_t v18 = ~v11;
      if (v19)
      {
LABEL_14:
        memcpy(__dst, __src, v9);
LABEL_17:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)__dst + v12) & v18, ((unint64_t)__src + v12) & v18, v6);
        return __dst;
      }
    }
    else
    {
      uint64_t v17 = *v16;
      if ((unint64_t)*v16 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      uint64_t v18 = ~v11;
      if (v17 != -1) {
        goto LABEL_14;
      }
    }
    *__dst = *__src;
    uint64_t v20 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v16;
    uint64_t v26 = ((unint64_t)v20 + v8 + 8) & v27;
    uint64_t v21 = ((unint64_t)v16 + v8 + 8) & v27;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v23 = v5;
    swift_retain();
    swift_retain();
    v22(v26, v21, v23);
    goto LABEL_17;
  }
  uint64_t v15 = *__src;
  *__dst = *__src;
  __dst = (void *)(v15 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16)));
  swift_retain();
  return __dst;
}

void *initializeWithTake for LazyPageTabView(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  size_t v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *__dst = *__src;
    uint64_t v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return __dst;
}

void *assignWithTake for LazyPageTabView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  size_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    size_t v21 = ((v9 + 16) & ~v9) + v10;
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v19 = v16(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v5 = a1;
    int v15 = v16(((unint64_t)v13 + v9 + 8) & ~v9, v8, v6);
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    size_t v11 = v21;
    if (!v19)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *v4;
        swift_release();
        *size_t v12 = *v13;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v12 + v9 + 8) & v24, ((unint64_t)v13 + v9 + 8) & v24, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v9 + 8) & v24, v6);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *v4;
    *size_t v12 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v12 + v9 + 8) & v24, ((unint64_t)v13 + v9 + 8) & v24, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, v4, v11);
LABEL_12:
  uint64_t v17 = *(void *)(*(void *)(v3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 40))(((unint64_t)v5 + v11 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v4 + v11 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return v5;
}

uint64_t getEnumTagSinglePayload for LazyPageTabView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v12;
  int v15 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v16 = (v14 & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      if (v7 >= v10)
      {
        uint64_t v26 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v28 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v26 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v27 = *v26;
          if (v27 >= 0xFFFFFFFF) {
            LODWORD(v27) = -1;
          }
          unsigned int v28 = v27 + 1;
        }
        if (v28 >= 2) {
          return v28 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v24 = ((unint64_t)a1 + v14) & ~v12;
        uint64_t v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
        return v25(v24, v10, v8);
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v13 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for LazyPageTabView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  unsigned int v13 = v8 - 1;
  if (v10 <= v8 - 1) {
    unsigned int v14 = v8 - 1;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  size_t v15 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v16 = v15 + v12;
  size_t v17 = ((v15 + v12) & ~v12) + *(void *)(v9 + 64);
  BOOL v18 = a3 >= v14;
  unsigned int v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 <= 3)
    {
      unsigned int v24 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v24))
      {
        int v20 = 4;
      }
      else if (v24 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v24 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v21 = ~v14 + a2;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (v17)
      {
        int v25 = v21 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v17] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v22;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v17] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v12;
  switch(v20)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x1877F4F34);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v13 >= v10)
        {
          if (v13 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v33 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v36 = a2 + 1;
                  v35(((unint64_t)v33 + v11 + 8) & ~v11, v36);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v34 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v34 = a2;
                  }
                  *uint64_t v33 = v34;
                }
              }
            }
            else
            {
              if (v15 <= 3) {
                int v31 = ~(-1 << (8 * v15));
              }
              else {
                int v31 = -1;
              }
              if (v15)
              {
                int v29 = v31 & (a2 - v8);
                if (v15 <= 3) {
                  int v32 = v15;
                }
                else {
                  int v32 = 4;
                }
                bzero(a1, v15);
                switch(v32)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)a1 = v29;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)a1 = v29;
                    a1[2] = BYTE2(v29);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)a1 = v29;
                    break;
                  default:
LABEL_52:
                    *a1 = v29;
                    break;
                }
              }
            }
          }
          else
          {
            if (v15 <= 3) {
              int v28 = ~(-1 << (8 * v15));
            }
            else {
              int v28 = -1;
            }
            if (v15)
            {
              int v29 = v28 & (a2 - v8);
              if (v15 <= 3) {
                int v30 = v15;
              }
              else {
                int v30 = 4;
              }
              bzero(a1, v15);
              switch(v30)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v26 = (unint64_t)&a1[v16] & v23;
          unint64_t v27 = *(void (**)(unint64_t))(v9 + 56);
          v27(v26);
        }
      }
      return;
  }
}

uint64_t sub_1877F4F7C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v6 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = type metadata accessor for LazyPageTabView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  uint64_t v4 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v4 + 32), v1);
  }
  (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(v3 + *(int *)(v2 + 52));
  return swift_deallocObject();
}

uint64_t assignWithTake for LazyPageTabModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyPageTabModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyPageTabModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1877F5204()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877F5430()
{
  swift_release();

  return swift_deallocObject();
}

BOOL static AccessibilityAdjustmentDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityAdjustmentDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AccessibilityAdjustmentDirection.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityAdjustableAction()
{
  return 4096;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityAdjustableAction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 2)
  {
    BOOL v4 = (v2 & 1) == 0;
    return v3 != 2 && ((v4 ^ v3) & 1) != 0;
  }
  return v3 == 2;
}

uint64_t View.accessibilityAdjustableAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v12 = 2;
  unint64_t v10 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  return View.accessibilityAction<A>(_:label:image:_:)((uint64_t)&v12, 0, 0, 0, 0, 0, a1, a2, a5, a3, (uint64_t)&type metadata for AccessibilityAdjustableAction, a4, v10);
}

unint64_t lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityAdjustableAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v10 = 2;
  unint64_t v8 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  return ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)((uint64_t)&v10, 0, 0, 0, 0, 0, a1, a2, a4, a3, (uint64_t)&type metadata for AccessibilityAdjustableAction, v8);
}

unint64_t lazy protocol witness table accessor for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection;
  if (!lazy protocol witness table cache variable for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityAdjustmentDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877F5804);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAdjustmentDirection()
{
  return &type metadata for AccessibilityAdjustmentDirection;
}

uint64_t getEnumTagSinglePayload for AccessibilityAdjustableAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessibilityAdjustableAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877F59B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAdjustableAction()
{
  return &type metadata for AccessibilityAdjustableAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAdjustableAction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized AccessibilityAdjustableAction.matches<A>(_:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return swift_dynamicCast();
}

unint64_t AccessibilityTextContentType.platformValue.getter()
{
  unint64_t v1 = *v0;
  uint64_t v2 = (id *)MEMORY[0x1E4FB24F8];
  switch(*v0)
  {
    case 1:
      goto LABEL_8;
    case 2:
      uint64_t v2 = (id *)MEMORY[0x1E4FB2500];
      goto LABEL_8;
    case 3:
      uint64_t v2 = (id *)MEMORY[0x1E4FB2508];
      goto LABEL_8;
    case 4:
      uint64_t v2 = (id *)MEMORY[0x1E4FB2510];
      goto LABEL_8;
    case 5:
      uint64_t v2 = (id *)MEMORY[0x1E4FB2518];
      goto LABEL_8;
    case 6:
      uint64_t v2 = (id *)MEMORY[0x1E4FB2520];
      goto LABEL_8;
    case 7:
      uint64_t v2 = (id *)MEMORY[0x1E4FB2528];
LABEL_8:
      unint64_t v1 = (unint64_t)*v2;
      id v3 = *v2;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t Text.accessibilityTextContentType(_:)(char *a1)
{
  char v1 = *a1;
  type metadata accessor for AccessibilityTextModifier();
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = v1;
  *(_WORD *)(v2 + 17) = 519;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.accessibilityHeading(_:)(char a1)
{
  type metadata accessor for AccessibilityTextModifier();
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = 8;
  *(unsigned char *)(v2 + 17) = a1;
  *(unsigned char *)(v2 + 18) = 2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v8 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  type metadata accessor for AccessibilityTextModifier();
  uint64_t v9 = swift_allocObject();
  *(_WORD *)(v9 + 16) = 1800;
  *(unsigned char *)(v9 + 18) = 2;
  *(void *)(v9 + 24) = a1;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3 & 1;
  *(void *)(v9 + 48) = a4;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.modified(with:)();
  swift_release();
  return v10;
}

uint64_t Text.accessibilityLabel(_:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  uint64_t v6 = Text.accessibilityLabel(_:)(v0, v1, v3 & 1, v5);
  outlined consume of Text.Storage(v0, v2, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t Text.accessibilityLabel<A>(_:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v10 = Text.accessibilityLabel(_:)(v4, v5, v7 & 1, v9);
  outlined consume of Text.Storage(v4, v6, v8);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t View.accessibilityTextContentType(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B28], (uint64_t)&v4, 1, a2, MEMORY[0x1E4F40B28], a3);
}

uint64_t View.accessibilityHeading(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B48], (uint64_t)&v4, 1, a2, MEMORY[0x1E4F40B48], a3);
}

uint64_t ModifiedContent<>.accessibilityTextContentType(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B28], (uint64_t)&v4, 1, a2, a3);
}

uint64_t ModifiedContent<>.accessibilityHeading(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B48], (uint64_t)&v4, 1, a2, a3);
}

uint64_t assignWithCopy for AccessibilityTextLayoutProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(unsigned char *)(a1 + 27) = *((unsigned char *)a2 + 27);
  *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 15);
  *(void *)(a1 + 136) = a2[17];
  *(_OWORD *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityTextLayoutProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityTextLayoutProperties()
{
  return &type metadata for AccessibilityTextLayoutProperties;
}

void *PlatformItemList.Item.accessibilityEffectiveText.getter()
{
  uint64_t v1 = *(void *)(v0 + 528);
  if (!v1)
  {
    if (one-time initialization token for configuredForPlatform != -1) {
      swift_once();
    }
    uint64_t v2 = static EnvironmentValues.configuredForPlatform;
    uint64_t v3 = unk_1EB3084E0;
    long long v5 = *(void **)v0;
    swift_retain();
    swift_retain();
    if (!v5) {
      goto LABEL_17;
    }
LABEL_11:
    uint64_t v12 = v2;
    uint64_t v13 = v3;
    id v7 = v5;
    if (static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)()) {

    }
    else {
    goto LABEL_7;
    }
  }
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 544);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!v12 || (int v4 = v13, swift_bridgeObjectRelease(), v4 == 3))
  {
    long long v5 = *(void **)v0;
    if (*(void *)v0) {
      goto LABEL_11;
    }
  }
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  swift_retain();
  swift_retain();
  long long v5 = (void *)static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v5)
  {
LABEL_14:
    long long v8 = *(void **)v0;
    if (*(void *)v0)
    {
      uint64_t v11 = *(void **)v0;
      uint64_t v12 = v2;
      uint64_t v13 = v3;
      id v9 = v8;
      if (static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)())
      {
        swift_release();
        swift_release();

        return v11;
      }
      swift_release();
      swift_release();

      return 0;
    }
LABEL_17:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_7:
  swift_release();
  swift_release();
  return v5;
}

uint64_t PlatformItem.accessibilityResolvedAttributedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void **)(v0 + 328);
  if (!v1
    || (v11[0] = *(id *)(v0 + 320),
        v11[1] = v2,
        (uint64_t result = PlatformItem.AccessibilityContent.resolvedAttributedLabel.getter()) == 0))
  {
    outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v11) != 1)
    {
      id v4 = v11[0];
      if (v11[0])
      {
        if (v1)
        {
          id v5 = v11[0];
          swift_bridgeObjectRetain();
          uint64_t v6 = AGGraphClearUpdate();
          MEMORY[0x1F4188790](v6);
          static Update.ensure<A>(_:)();
          AGGraphSetUpdate();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v7 = one-time initialization token for configuredForPlatform;
          id v8 = v11[0];
          if (v7 != -1) {
            swift_once();
          }
          swift_retain();
          swift_retain();
        }
        id v9 = v4;
        if (static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)())
        {

          swift_release();
          swift_release();
          return (uint64_t)v4;
        }

        swift_release();
        swift_release();
      }
    }
    return 0;
  }
  return result;
}

id PlatformItem.accessibilityEffectiveText.getter()
{
  if (*(void *)(v0 + 320))
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = AGGraphClearUpdate();
    MEMORY[0x1F4188790](v1);
    static Update.ensure<A>(_:)();
    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    uint64_t v2 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v8);
    swift_bridgeObjectRelease();
    if (v8)
    {
      int v3 = v9;
      swift_bridgeObjectRelease();
      if (v3 != 3) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (one-time initialization token for configuredForPlatform != -1) {
      swift_once();
    }
    swift_retain();
    swift_retain();
  }
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v8) == 1 || (id v4 = v8) == 0)
  {
LABEL_12:
    id v4 = (id)PlatformItem.accessibilityResolvedAttributedLabel.getter();
LABEL_13:
    swift_release();
    swift_release();
    return v4;
  }
  id v5 = v8;
  if ((static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)() & 1) == 0)
  {

    goto LABEL_13;
  }

  swift_release();
  swift_release();
  return v4;
}

uint64_t one-time initialization function for comma()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v1 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v2 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  LOBYTE(ObjCClassFromMetadata) = v6;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static Text.Accessibility.comma = v3;
  unk_1EB308110 = v5;
  byte_1EB308118 = ObjCClassFromMetadata & 1;
  qword_1EB308120 = v8;
  return result;
}

uint64_t specialized AccessibilityNode.withLayoutManager<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = specialized AccessibilityNode.viewResponder<A>(ofType:)();
  long long v9 = 0uLL;
  if (result)
  {
    AccessibilityNode.attachment.getter((uint64_t *)&v41);

    uint64_t v10 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v10, (uint64_t)v38);
    swift_bridgeObjectRelease_n();
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v38, (uint64_t)v39, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v39, (uint64_t)v40, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v40) == 1
      || (outlined init with take of AccessibilityTextLayoutProperties((uint64_t)v40, (uint64_t)v36),
          getEnumTag for AccessibilityTextLayoutProperties((uint64_t)v36) == 1))
    {
      uint64_t result = swift_release();
      char v11 = 1;
      long long v12 = 0uLL;
      long long v9 = 0uLL;
    }
    else
    {
      long long v47 = v36[6];
      long long v48 = v36[7];
      long long v49 = v36[8];
      char v50 = v37;
      long long v43 = v36[2];
      long long v44 = v36[3];
      long long v45 = v36[4];
      long long v46 = v36[5];
      long long v41 = v36[0];
      long long v42 = v36[1];
      long long v33 = 0u;
      long long v34 = 0u;
      char v35 = 6;
      v53[0] = 1;
      *(void *)&long long v25 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      BYTE8(v25) = 2;
      StyledTextResponder.addContentPath(to:kind:in:observer:)();
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      v51[0] = v33;
      v51[1] = v34;
      char v52 = v35;
      outlined init with take of Path.Storage((uint64_t)v51, (uint64_t)v53);
      outlined retain of Path.Storage((uint64_t)v53, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      Path.boundingRect.getter();
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;
      outlined retain of Path.Storage((uint64_t)v51, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      long long v29 = v47;
      long long v30 = v48;
      long long v31 = v49;
      char v32 = v50;
      long long v25 = v43;
      long long v26 = v44;
      long long v27 = v45;
      long long v28 = v46;
      long long v23 = v41;
      long long v24 = v42;
      TextLayoutProperties.minScaleFactor.getter();
      _sSo15NSLayoutManagerC7SwiftUIE4with_12drawingScale4size16layoutProperties_xSo18NSAttributedStringC_12CoreGraphics7CGFloatVSo6CGSizeVAC010TextLayoutJ0VxAB_So15NSTextContainerCtXEtlFZSo6CGRectVSg_TBm503_s7c28UI17AccessibilityNodeC17withr15ManageryxSgSo18kl8C_AESo08a8G0C_So15st4CSo6U25VtXEtlFAeI_AKtXEfU_AM_TG5AbrTxSgRi_zRi0_zlyATIsgggyr_ATTf1nnnnc_n0vcwxy27C14resolvedBounds2in3forSo6u7VSgSo18kl22C_So8_NSRangeVtFAISo15ab6C_So15sT9CAHtXEfU_So8_NSRangeVTf1nnnncn_nTf4nnnnxn_n(a1, (uint64_t)&v41, a2, a3, (uint64_t)&v23, v18, v20, v14, v16);
      long long v21 = v24;
      long long v22 = v23;
      char v11 = v25;
      swift_release();
      outlined retain of Path.Storage((uint64_t)v51, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      uint64_t result = (uint64_t)outlined release of AccessibilityTextLayoutProperties?(v39);
      long long v12 = v21;
      long long v9 = v22;
    }
  }
  else
  {
    char v11 = 1;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a4 = v9;
  *(_OWORD *)(a4 + 16) = v12;
  *(unsigned char *)(a4 + 32) = v11;
  return result;
}

uint64_t closure #1 in NSAttributedString.hasAccessibilityLinks.getter(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  if (*(void *)(result + 24))
  {
    *a5 = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t specialized AccessibilityGeometryStorage.viewResponder<A>(ofType:)()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v4 = 0;
  while (1)
  {
    outlined init with copy of WeakBox<ViewResponder>(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    if (swift_weakLoadStrong()) {
      break;
    }
    swift_bridgeObjectRetain();
LABEL_4:
    outlined destroy of WeakBox<ViewResponder>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    swift_bridgeObjectRelease();
    ++v4;
    v3 += 8;
    if (v2 == v4) {
      goto LABEL_9;
    }
  }
  type metadata accessor for StyledTextResponder();
  if (!swift_dynamicCastClass())
  {
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_4;
  }
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  swift_release();
  if (v2 == v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v4 >= *(void *)(v1 + 16))
  {
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of WeakBox<ViewResponder>(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  if (!swift_weakLoadStrong())
  {
LABEL_18:
    uint64_t result = outlined destroy of WeakBox<ViewResponder>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    __break(1u);
    return result;
  }
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  uint64_t v5 = v7;
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized AccessibilityNode.viewResponder<A>(ofType:)()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  uint64_t v4 = v2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v15 = v2 + 32;
  uint64_t v16 = v2;
  while (1)
  {
    uint64_t v5 = v3 - 1;
    if (v3 - 1 >= *(void *)(v2 + 16))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v6 = v4 + 40 * v5;
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 128);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9) {
        break;
      }
    }
LABEL_5:
    --v3;
    if (!v5) {
      goto LABEL_16;
    }
  }
  uint64_t v10 = v8 + 32;
  id v17 = *(id *)(v6 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  while (1)
  {
    outlined init with copy of WeakBox<ViewResponder>(v10, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    if (swift_weakLoadStrong()) {
      break;
    }
    swift_bridgeObjectRetain();
LABEL_11:
    outlined destroy of WeakBox<ViewResponder>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    swift_bridgeObjectRelease();
    ++v11;
    v10 += 8;
    if (v9 == v11) {
      goto LABEL_4;
    }
  }
  type metadata accessor for StyledTextResponder();
  if (!swift_dynamicCastClass())
  {
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_11;
  }
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  swift_release();
  if (v9 == v11)
  {
LABEL_4:
    uint64_t v2 = v16;
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v15;
    goto LABEL_5;
  }
  if (v11 >= *(void *)(v8 + 16)) {
    goto LABEL_27;
  }
  outlined init with copy of WeakBox<ViewResponder>(v10, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  if (!swift_weakLoadStrong())
  {
LABEL_31:
    uint64_t result = outlined destroy of WeakBox<ViewResponder>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    __break(1u);
    return result;
  }
  if (!swift_dynamicCastClass())
  {
LABEL_30:
    swift_release();
    goto LABEL_31;
  }
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v5 >= *(void *)(v16 + 16))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!*(void *)(v6 + 16)) {
    goto LABEL_29;
  }
  id v14 = *(id *)(v6 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized AccessibilityGeometryStorage.viewResponder<A>(ofType:)();
  swift_release();

  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t partial apply for closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter(a1);
}

uint64_t specialized static Text.Accessibility.playback(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WeakBox<ViewResponder>(a1, (uint64_t)v4, type metadata accessor for PlaybackButton.State);
  uint64_t v5 = type metadata accessor for Date();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 2, v5))
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    outlined destroy of WeakBox<ViewResponder>((uint64_t)v4, type metadata accessor for PlaybackButton.State);
  }
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v7 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = objc_msgSend(v7, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t *outlined release of AccessibilityTextLayoutProperties?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of AccessibilityTextLayoutProperties?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = a15;
  if (a15 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of WeakBox<ViewResponder>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of WeakBox<ViewResponder>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getterpartial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25UIKitSearchBarCoordinatorC0G5Token33_9E78780A6F2626BA9019200B48F4A36BLLVG_So08UISearchJ0Cs5NeverOTg503_s7d4UI25fghi27C20updateTokensIfNeeded33_9klmnopq28BLL_6tokens08platformH0ySo08r13E0C_SayAA8AnyJ103VGAA22PlatformItemCollectionVSgtFSo0tV0CAC0dV0AELLVcfu0_32f4ab76087b16d1a59a180d4ecf7049ccAsQTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 96);
    do
    {
      uint64_t v5 = *v4;
      v4 += 9;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

id UIKitSearchBarAdaptor.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  type metadata accessor for UIKitSearchBar();
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  swift_unknownObjectWeakAssign();
  objc_msgSend(v2, sel_setDelegate_, v1);
  id v3 = objc_msgSend(v2, sel_searchTextField);
  objc_msgSend(v3, sel_setDelegate_, v1);

  id v4 = objc_msgSend(v2, sel_searchTextField);
  objc_msgSend(v4, sel_addTarget_action_forControlEvents_, v1, sel_primaryActionTriggered_, 0x2000);

  return v2;
}

void UIKitSearchBarAdaptor.updateUIView(_:context:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v12 = *(void **)(a2 + 40);
  uint64_t v13 = outlined init with copy of PlatformItemList.Item(v3, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  if (v11 == 1)
  {
    uint64_t v17 = (uint64_t)&v17;
    MEMORY[0x1F4188790](v13);
    *(&v17 - 2) = __ROR8__(v10, 32);
    swift_retain();
    id v14 = v12;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v9, 1);
    id v15 = v14;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v9, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v9, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v9, 1);

    uint64_t v10 = v19;
    uint64_t v9 = v20;
  }
  else
  {
    uint64_t v19 = v10;
    uint64_t v20 = v9;
    id v16 = v12;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v9, 0);
  }
  v18[0] = v10;
  v18[1] = v9;
  UIKitSearchBarCoordinator.updateSearchBar(_:to:in:)(a1, (uint64_t)v8, v18);
  swift_release();
  swift_release();
  outlined destroy of PlatformItemList.Item((uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  UIKitSearchBarCoordinator.updateIsFirstResponder(_:to:)((uint64_t)a1, v3);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitSearchBarAdaptor(uint64_t a1)
{
  return UIKitSearchBarAdaptor.makeUIView(context:)(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitSearchBarAdaptor@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0)), sel_init);
  *a1 = result;
  return result;
}

void protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance UIKitSearchBarAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(v3 + *(int *)(a3 + 20)) & 1) == 0)
  {
    id v4 = (void (*)(uint64_t *, void))_LayoutTraits.idealSize.modify();
    *uint64_t v5 = 0x4070000000000000;
    v4(&v6, 0);
  }
}

uint64_t UIKitSearchBarCoordinator.RepresentedToken.__deallocating_deinit()
{
  outlined destroy of AnyToken(v0 + 16);
  outlined destroy of PlatformItemList.Item(v0+ OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UIKitSearchBarCoordinator.RepresentedToken()
{
  outlined init with copy of AnyHashable(*v0 + 48, (uint64_t)v3);
  uint64_t v1 = AnyHashable.description.getter();
  outlined destroy of AnyHashable((uint64_t)v3);
  return v1;
}

double UIKitSearchBarCoordinator.SearchToken.init(representedToken:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  double v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1
     + OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem;
  uint64_t v9 = *(void **)(a1
                + OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem);
  if (v9)
  {
    id v10 = objc_msgSend(v9, sel_string, v5);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    *(void *)&long long v23 = v11;
    *((void *)&v23 + 1) = v13;
    outlined init with copy of PlatformItemList.Item(v8, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    swift_bridgeObjectRetain();
    id v14 = (void *)PlatformItemList.Item.image.getter();
    outlined destroy of PlatformItemList.Item((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    *(void *)&v24[0] = v14;
    outlined init with copy of AnyHashable(a1 + 48, (uint64_t)v24 + 8);
    id v15 = v14;
    id v16 = (void *)MEMORY[0x18C115780](v11, v13);
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(self, sel_tokenWithIcon_text_, v15, v16);

    id v25 = v17;
    id v18 = v17;
    objc_msgSend(v18, sel_setRepresentedObject_, a1);

    swift_release();
    long long v19 = v24[2];
    *(_OWORD *)(a2 + 32) = v24[1];
    *(_OWORD *)(a2 + 48) = v19;
    *(void *)(a2 + 64) = v25;
    long long v20 = v24[0];
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v20;
  }
  else
  {
    swift_release();
    *(void *)(a2 + 64) = 0;
    *(void *)&long long v20 = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v20;
}

double UIKitSearchBarCoordinator.SearchToken.init(platformToken:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  double v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_representedObject, v5))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v21, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Any?);
  if (!v23)
  {

    outlined destroy of AccessibilityValueStorage?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Any?);
LABEL_11:
    *(void *)(a2 + 64) = 0;
    *(void *)&long long v17 = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return *(double *)&v17;
  }
  type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:

    goto LABEL_11;
  }
  uint64_t v8 = v20;
  uint64_t v9 = v20
     + OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem;
  id v10 = *(void **)(v20
                 + OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem);
  if (!v10)
  {
    swift_release();
    goto LABEL_10;
  }
  id v11 = objc_msgSend(v10, sel_string);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  *(void *)&long long v24 = v12;
  *((void *)&v24 + 1) = v14;
  outlined init with copy of PlatformItemList.Item(v9, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  uint64_t v15 = PlatformItemList.Item.image.getter();
  outlined destroy of PlatformItemList.Item((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *(void *)&v25[0] = v15;
  outlined init with copy of AnyHashable(v8 + 48, (uint64_t)v25 + 8);
  swift_release();
  *(void *)(a2 + 64) = a1;
  long long v16 = v25[2];
  *(_OWORD *)(a2 + 32) = v25[1];
  *(_OWORD *)(a2 + 48) = v16;
  long long v17 = v25[0];
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v17;
  return *(double *)&v17;
}

uint64_t UIKitSearchBarCoordinator.resolvedScopes.getter()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v15);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  v12[0] = xmmword_18834BB90;
  memset(&v12[1], 0, 48);
  char v13 = 0;
  __n128 v10 = 0uLL;
  uint64_t v11 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v14, v12, &v10, 0, 0, (uint64_t)v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v4 + 77) = v5;
  type metadata accessor for SearchFieldConfiguration?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
  outlined init with take of SearchFieldConfiguration((uint64_t)v4, v7 + v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  return v7;
}

uint64_t UIKitSearchBarCoordinator.updateTextSelectionIfNeeded(_:selection:)(void *a1)
{
  type metadata accessor for (TextSelection?, VersionSeed)();
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v40 - v11;
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  MEMORY[0x18C113DA0]();
  int v13 = *(_DWORD *)&v6[*(int *)(v4 + 56)];
  outlined init with take of SearchFieldConfiguration((uint64_t)v6, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  uint64_t v14 = type metadata accessor for TextSelection(0);
  char v15 = 1;
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v9, 1, v14);
  long long v17 = (uint64_t (*)(void))type metadata accessor for TextSelection?;
  if (v16 == 1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    uint64_t v18 = TextSelection.range.getter();
    unint64_t v19 = v20;
    char v15 = v21 & 1;
    long long v17 = type metadata accessor for TextSelection;
  }
  outlined destroy of PlatformItemList.Item((uint64_t)v9, v17);
  int v22 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_expectedSelectionVersion);
  if (v13 != -1 && v22 != -1 && v13 == v22)
  {
    id v26 = objc_msgSend(a1, sel_searchTextField);
    uint64_t v27 = UITextField.uiSelectedRange.getter();
    uint64_t v29 = v28;
    char v31 = v30;

    if (v15)
    {
      if (v31) {
        return outlined destroy of PlatformItemList.Item((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      }
    }
    else if ((v31 & 1) == 0 && !((v27 ^ (unint64_t)v18) >> 14) && (v29 ^ v19) < 0x4000)
    {
      return outlined destroy of PlatformItemList.Item((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    }
    id v32 = objc_msgSend(a1, sel_searchTextField);
    id v33 = objc_msgSend(v32, sel_text);
    if (v33)
    {
      long long v34 = v33;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      if (v15)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        v40[2] = v18;
        v40[3] = v19;
        v40[0] = v35;
        v40[1] = v37;
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v38 = _NSRange.init<A, B>(_:in:)();
        objc_msgSend(v32, sel_setSelectionRange_, v38, v39);
      }
    }
    else
    {
    }
  }
  return outlined destroy of PlatformItemList.Item((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TextSelection?);
}

double closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9 = a4 & 1;
  uint64_t v10 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyToken(a2, (uint64_t)v18);
  PlatformItemCollection.subscript.getter(a1, a3, v9, (uint64_t)v12);
  type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
  uint64_t v13 = swift_allocObject();
  long long v14 = v18[3];
  *(_OWORD *)(v13 + 48) = v18[2];
  *(_OWORD *)(v13 + 64) = v14;
  *(void *)(v13 + 80) = v19;
  long long v15 = v18[1];
  *(_OWORD *)(v13 + 16) = v18[0];
  *(_OWORD *)(v13 + 32) = v15;
  outlined init with take of SearchFieldConfiguration((uint64_t)v12, v13+ OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  return UIKitSearchBarCoordinator.SearchToken.init(representedToken:)(v13, a5);
}

uint64_t closure #1 in UIKitSearchBarCoordinator.primaryActionTriggered(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (unsigned __int8 *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (unsigned __int8 *)&v14 - v6;
  uint64_t v8 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8);
  if (!result)
  {
    outlined init with copy of PlatformItemList.Item(v12, (uint64_t)v11, type metadata accessor for SearchFieldConfiguration);
    type metadata accessor for Binding<SearchFieldState>(0);
    MEMORY[0x18C113DA0]();
    outlined init with copy of PlatformItemList.Item((uint64_t)v7, (uint64_t)v4, type metadata accessor for SearchFieldState);
    if (*v4 != 2) {
      unsigned __int8 *v4 = 0;
    }
    if ((specialized static SearchFieldState.== infix(_:_:)(v7, v4) & 1) == 0) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of PlatformItemList.Item((uint64_t)v4, type metadata accessor for SearchFieldState);
    outlined destroy of PlatformItemList.Item((uint64_t)v7, type metadata accessor for SearchFieldState);
    return outlined destroy of PlatformItemList.Item((uint64_t)v11, type metadata accessor for SearchFieldConfiguration);
  }
  return result;
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBar(_:textDidChange:)(char *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v8 - 8);
  double v62 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v64 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v65 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v60 = (char *)&v58 - v13;
  uint64_t v59 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v59);
  uint64_t v69 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v58 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v68 = (uint64_t)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v67 = (uint64_t)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t *)&a1[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText];
  uint64_t v61 = a2;
  *uint64_t v18 = a2;
  v18[1] = (uint64_t)a3;
  swift_bridgeObjectRelease();
  long long v63 = a3;
  swift_bridgeObjectRetain();
  id v19 = objc_msgSend(a4, sel_searchTextField);
  id v20 = objc_msgSend(v19, sel_tokens);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v22 = result;
  }
  else
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v66 = v10;
  double v72 = a1;
  if (v22)
  {
    if (v22 < 1)
    {
      __break(1u);
      __break(1u);
      return result;
    }
    uint64_t v24 = 0;
    id v25 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v21 & 0xC000000000000001) != 0) {
        id v26 = (id)MEMORY[0x18C117680](v24, v21);
      }
      else {
        id v26 = *(id *)(v21 + 8 * v24 + 32);
      }
      UIKitSearchBarCoordinator.SearchToken.init(platformToken:)(v26, (uint64_t)&v80);
      if (*((void *)&v80 + 1))
      {
        long long v76 = v82;
        long long v77 = v83;
        uint64_t v78 = v84;
        long long v75 = v81;
        long long v74 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25);
        }
        unint64_t v28 = *((void *)v25 + 2);
        unint64_t v27 = *((void *)v25 + 3);
        if (v28 >= v27 >> 1) {
          id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v25);
        }
        *((void *)v25 + 2) = v28 + 1;
        uint64_t v29 = &v25[72 * v28];
        *((_OWORD *)v29 + 2) = v74;
        long long v30 = v75;
        long long v31 = v76;
        long long v32 = v77;
        *((void *)v29 + 12) = v78;
        *((_OWORD *)v29 + 4) = v31;
        *((_OWORD *)v29 + 5) = v32;
        *((_OWORD *)v29 + 3) = v30;
      }
      else
      {
        outlined destroy of AccessibilityValueStorage?((uint64_t)&v80, &lazy cache variable for type metadata for UIKitSearchBarCoordinator.SearchToken?);
      }
      ++v24;
    }
    while (v22 != v24);
    swift_bridgeObjectRelease();
    a1 = v72;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v25 = (char *)MEMORY[0x1E4FBC860];
  }
  *(void *)&a1[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldTokens] = v25;
  swift_bridgeObjectRelease();
  if (!v22)
  {
    long long v34 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  long long v34 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    if ((v21 & 0xC000000000000001) != 0) {
      id v35 = (id)MEMORY[0x18C117680](v33, v21);
    }
    else {
      id v35 = *(id *)(v21 + 8 * v33 + 32);
    }
    uint64_t v36 = v35;
    if (objc_msgSend(v35, sel_representedObject))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v79, 0, sizeof(v79));
    }
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v79, (uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for Any?);
    if (*((void *)&v75 + 1))
    {
      type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
      if (swift_dynamicCast())
      {
        outlined init with copy of AnyToken(v73 + 16, (uint64_t)&v80);

        swift_release();
        if (!*((void *)&v81 + 1)) {
          goto LABEL_21;
        }
        goto LABEL_35;
      }
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for Any?);
    }
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;

    if (!*((void *)&v81 + 1))
    {
LABEL_21:
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v80, &lazy cache variable for type metadata for AnyToken?);
      goto LABEL_22;
    }
LABEL_35:
    long long v76 = v82;
    long long v77 = v83;
    uint64_t v78 = v84;
    long long v75 = v81;
    long long v74 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34);
    }
    unint64_t v38 = *((void *)v34 + 2);
    unint64_t v37 = *((void *)v34 + 3);
    if (v38 >= v37 >> 1) {
      long long v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v38 + 1;
    uint64_t v39 = &v34[72 * v38];
    *((_OWORD *)v39 + 2) = v74;
    long long v40 = v75;
    long long v41 = v76;
    long long v42 = v77;
    *((void *)v39 + 12) = v78;
    *((_OWORD *)v39 + 4) = v41;
    *((_OWORD *)v39 + 5) = v42;
    *((_OWORD *)v39 + 3) = v40;
LABEL_22:
    ++v33;
  }
  while (v22 != v33);
  swift_bridgeObjectRelease();
  a1 = v72;
LABEL_42:
  swift_bridgeObjectRelease();
  uint64_t v43 = (uint64_t)&a1[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration];
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v43, 1, v71)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v44 = v43;
  uint64_t v45 = v67;
  outlined init with copy of PlatformItemList.Item(v44, v67, type metadata accessor for SearchFieldConfiguration);
  outlined init with copy of PlatformItemList.Item(v45, v68, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  long long v46 = v69;
  MEMORY[0x18C113DA0](v58);
  double v72 = &v46[*(int *)(v59 + 36)];
  uint64_t v47 = v64;
  long long v48 = *(void (**)(char *))(v64 + 16);
  long long v49 = v60;
  uint64_t v50 = v66;
  v48(v60);
  uint64_t v51 = v62;
  ((void (*)(char *, char *, uint64_t))v48)(v62, v49, v50);
  v52._countAndFlagsBits = v61;
  v52._object = v63;
  SearchAttributedString.update(tokens:text:)((Swift::OpaquePointer)v34, v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v47 + 8);
  v53(v49, v50);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v49, v51, v50);
  uint64_t v54 = v65;
  char v55 = v72;
  ((void (*)(char *, char *, uint64_t))v48)(v65, v72, v50);
  (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v55, v49, v50);
  uint64_t v56 = (uint64_t)v69;
  SearchFieldState.textDidChange(from:)();
  v53(v49, v50);
  v53(v54, v50);
  uint64_t v57 = v68;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of PlatformItemList.Item(v56, type metadata accessor for SearchFieldState);
  outlined destroy of PlatformItemList.Item(v57, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  return outlined destroy of PlatformItemList.Item(v67, type metadata accessor for SearchFieldConfiguration);
}

Swift::Void __swiftcall UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(UISearchBar *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate;
  if (MEMORY[0x18C119DF0](v4))
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v2, ObjectType, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    char v7 = 1;
  }
  id v8 = [(UISearchBar *)a1 traitCollection];
  id v9 = objc_msgSend(v8, sel_horizontalSizeClass);

  id v10 = [(UISearchBar *)a1 traitCollection];
  id v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v9;
  *(void *)(v13 + 32) = v11;
  *(unsigned char *)(v13 + 40) = v7 & 1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();

  swift_release();
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v32 = a2;
  uint64_t v7 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v30[-v11];
  type metadata accessor for SearchFieldConfiguration?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  id v19 = &v30[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = a1 + 16;
  swift_beginAccess();
  uint64_t v21 = MEMORY[0x18C119DF0](v20);
  if (!v21)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    goto LABEL_9;
  }
  uint64_t v22 = (void *)v21;
  int v31 = a4;
  uint64_t v23 = v21 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of PlatformItemList.Item(v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);

  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_9:
    unint64_t v27 = (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?;
    uint64_t v28 = (uint64_t)v15;
    return outlined destroy of PlatformItemList.Item(v28, v27);
  }
  outlined init with take of SearchFieldConfiguration((uint64_t)v15, (uint64_t)v19, type metadata accessor for SearchFieldConfiguration);
  swift_beginAccess();
  uint64_t v24 = (unsigned char *)MEMORY[0x18C119DF0](v20);
  if (v24)
  {
    unsigned __int8 v25 = v24[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement];

    type metadata accessor for Binding<SearchFieldState>(0);
    MEMORY[0x18C113DA0]();
    outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v9, type metadata accessor for SearchFieldState);
    uint64_t v26 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)(v32, a3, v25);
    if (v26 != 2) {
      v9[1] = v26 & 1;
    }
    if (v31) {
      uint64_t v26 = static Animation.default.getter();
    }
    MEMORY[0x1F4188790](v26);
    *(void *)&v30[-16] = v9;
    withAnimation<A>(_:_:)();
    swift_release();
    if ((specialized static SearchFieldState.== infix(_:_:)(v12, v9) & 1) == 0) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of PlatformItemList.Item((uint64_t)v9, type metadata accessor for SearchFieldState);
    outlined destroy of PlatformItemList.Item((uint64_t)v12, type metadata accessor for SearchFieldState);
  }
  unint64_t v27 = type metadata accessor for SearchFieldConfiguration;
  uint64_t v28 = (uint64_t)v19;
  return outlined destroy of PlatformItemList.Item(v28, v27);
}

void closure #1 in closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(unsigned char *a1)
{
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    int v5 = a1[2];
    outlined init with copy of PlatformItemList.Item((uint64_t)a1, (uint64_t)v4, type metadata accessor for SearchFieldState);
    if (v5 == 2)
    {
      int v5 = v4[3];
      outlined destroy of PlatformItemList.Item((uint64_t)v4, type metadata accessor for SearchFieldState);
      if (v5 == 2)
      {
        char v6 = 0;
LABEL_7:
        *a1 = v6;
        a1[*(int *)(v2 + 40)] = 1;
        return;
      }
    }
    else
    {
      outlined destroy of PlatformItemList.Item((uint64_t)v4, type metadata accessor for SearchFieldState);
    }
    char v6 = v5 & 1;
    goto LABEL_7;
  }
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)(uint64_t a1, char a2)
{
  type metadata accessor for SearchFieldConfiguration?(0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x18C119DF0](a1 + 16);
  if (!v11)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_6;
  }
  uint64_t v12 = (void *)v11;
  uint64_t v13 = v11 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of PlatformItemList.Item(v13, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);

  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_6:
    uint64_t v15 = (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?;
    uint64_t v16 = (uint64_t)v6;
    return outlined destroy of PlatformItemList.Item(v16, v15);
  }
  uint64_t v14 = outlined init with take of SearchFieldConfiguration((uint64_t)v6, (uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
  if (a2) {
    uint64_t v14 = static Animation.default.getter();
  }
  MEMORY[0x1F4188790](v14);
  *(void *)&v18[-16] = v10;
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v15 = type metadata accessor for SearchFieldConfiguration;
  uint64_t v16 = (uint64_t)v10;
  return outlined destroy of PlatformItemList.Item(v16, v15);
}

uint64_t closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  uint64_t v0 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (unsigned __int8 *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (unsigned __int8 *)v7 - v4;
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x18C113DA0]();
  outlined init with copy of PlatformItemList.Item((uint64_t)v5, (uint64_t)v2, type metadata accessor for SearchFieldState);
  SearchFieldState.endEditing()();
  if ((specialized static SearchFieldState.== infix(_:_:)(v5, v2) & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of PlatformItemList.Item((uint64_t)v2, type metadata accessor for SearchFieldState);
  return outlined destroy of PlatformItemList.Item((uint64_t)v5, type metadata accessor for SearchFieldState);
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(uint64_t a1)
{
  type metadata accessor for SearchFieldConfiguration?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x18C119DF0](a1 + 16);
  if (!v9)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  uint64_t v10 = (void *)v9;
  uint64_t v11 = v9 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of PlatformItemList.Item(v11, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);

  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    uint64_t v13 = (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?;
    uint64_t v14 = (uint64_t)v4;
    return outlined destroy of PlatformItemList.Item(v14, v13);
  }
  uint64_t v12 = outlined init with take of SearchFieldConfiguration((uint64_t)v4, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  MEMORY[0x1F4188790](v12);
  *(void *)&v16[-16] = v8;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v13 = type metadata accessor for SearchFieldConfiguration;
  uint64_t v14 = (uint64_t)v8;
  return outlined destroy of PlatformItemList.Item(v14, v13);
}

uint64_t closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(uint64_t a1)
{
  uint64_t v45 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v2 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v37 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v36 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (unsigned __int8 *)&v36 - v17;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v38 = a1;
  MEMORY[0x18C113DA0]();
  uint64_t v39 = v18;
  uint64_t v19 = (uint64_t)v18;
  uint64_t v20 = v44;
  outlined init with copy of PlatformItemList.Item(v19, (uint64_t)v15, type metadata accessor for SearchFieldState);
  *uint64_t v15 = 2;
  AttributedString.init(stringLiteral:)();
  uint64_t v41 = v11;
  uint64_t v21 = &v15[*(int *)(v11 + 36)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v7, v21, v5);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v20 + 24);
  long long v40 = v10;
  uint64_t v43 = v5;
  v22(v21, v10, v5);
  long long v42 = v7;
  AttributedString.characters.getter();
  uint64_t v23 = AttributedString.CharacterView._count.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v25 = v45;
  v24(v4, v45);
  AttributedString.characters.getter();
  uint64_t v26 = AttributedString.CharacterView._count.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v4, v25);
  uint64_t v28 = v26 - v23;
  if (__OFSUB__(v26, v23))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v28 < 0)
  {
    BOOL v29 = __OFSUB__(0, v28);
    uint64_t v28 = v23 - v26;
    if (v29) {
      goto LABEL_19;
    }
  }
  if (v28 != 1 || v26 < 1 || *v15 == 2) {
    goto LABEL_11;
  }
  int v30 = v15[2];
  uint64_t v31 = v37;
  outlined init with copy of PlatformItemList.Item((uint64_t)v15, v37, type metadata accessor for SearchFieldState);
  if (v30 == 2)
  {
    int v32 = *(unsigned __int8 *)(v31 + 3);
    outlined destroy of PlatformItemList.Item(v31, type metadata accessor for SearchFieldState);
    if (v32 == 2 || (v32 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of PlatformItemList.Item(v31, type metadata accessor for SearchFieldState);
    if ((v30 & 1) == 0) {
      goto LABEL_11;
    }
  }
  *uint64_t v15 = 1;
LABEL_11:
  uint64_t v33 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v34 = v43;
  v33(v40, v43);
  v33(v42, v34);
  if ((v15[8] & 1) == 0)
  {
    *((_DWORD *)v15 + 1) = 0;
    v15[8] = 1;
  }
  v15[*(int *)(v41 + 40)] = 0;
  id v35 = v39;
  if ((specialized static SearchFieldState.== infix(_:_:)(v39, (unsigned __int8 *)v15) & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of PlatformItemList.Item((uint64_t)v15, type metadata accessor for SearchFieldState);
  return outlined destroy of PlatformItemList.Item((uint64_t)v35, type metadata accessor for SearchFieldState);
}

void specialized UIKitSearchScopeCoordinating<>.onChange(selectedScope:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes);
    uint64_t v4 = *(void *)(v3 + 16);
  }
  if ((a1 & 0x8000000000000000) == 0 && v4 > a1)
  {
    uint64_t v5 = type metadata accessor for PlatformItemList.Item();
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v6 = v5 - 8;
    unint64_t v8 = v3
       + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + *(void *)(v7 + 72) * a1;
    unint64_t v9 = *(void *)(v8 + 408);
    if (v9 >= 2)
    {
      v21[1] = v21;
      char v10 = *(unsigned char *)(v8 + 464);
      uint64_t v12 = *(void *)(v8 + 448);
      uint64_t v11 = *(void *)(v8 + 456);
      uint64_t v14 = *(void *)(v8 + 432);
      uint64_t v13 = *(void *)(v8 + 440);
      uint64_t v16 = *(void *)(v8 + 416);
      uint64_t v15 = *(void *)(v8 + 424);
      uint64_t v17 = *(void *)(v8 + 400);
      MEMORY[0x1F4188790](v6);
      MEMORY[0x1F4188790](v18);
      LOBYTE(v19) = v10;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v17, v9, v16, v15, v14, v13, v12, v11, v19, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      outlined copy of AppIntentExecutor?(v9);
      static Update.dispatchImmediately<A>(_:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
      LOBYTE(v20) = v10;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v17, v9, v16, v15, v14, v13, v12, v11, v20, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    }
  }
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarShouldClear(_:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_clearAction);
  if (v3)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v3);
  }
  *a2 = v3 == 0;
  return result;
}

Swift::Void __swiftcall UIKitSearchBarCoordinator.textFieldDidChangeSelection(_:)(UITextField *a1)
{
  uint64_t v2 = v1;
  long long v74 = a1;
  type metadata accessor for TextSelection?(0);
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v69 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v70 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v71 = (uint64_t *)((char *)&v65 - v6);
  uint64_t v7 = type metadata accessor for TextSelection(0);
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TextSelection?, VersionSeed)();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v16);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v65 - v21;
  uint64_t v75 = v2;
  uint64_t v23 = v2 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_selection;
  swift_beginAccess();
  uint64_t v24 = v23;
  uint64_t v25 = v18;
  outlined init with copy of PlatformItemList.Item(v24, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17) == 1)
  {
    outlined destroy of PlatformItemList.Item((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
    uint64_t v26 = v75;
    goto LABEL_17;
  }
  uint64_t v27 = (uint64_t)v9;
  uint64_t v67 = v19;
  uint64_t v66 = v25;
  uint64_t v68 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of SearchFieldConfiguration((uint64_t)v15, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
  MEMORY[0x18C113DA0](v17);
  uint64_t v29 = v72;
  uint64_t v28 = v73;
  uint64_t v30 = (uint64_t)v22;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v12, 1, v73))
  {
    uint64_t v32 = v29;
    outlined init with copy of PlatformItemList.Item((uint64_t)v12, v27, type metadata accessor for TextSelection);
    outlined destroy of PlatformItemList.Item((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for (TextSelection?, VersionSeed));
    uint64_t v33 = TextSelection.range.getter();
    unint64_t v35 = v34;
    char v37 = v36;
    outlined destroy of PlatformItemList.Item(v27, type metadata accessor for TextSelection);
    uint64_t v38 = UITextField.uiSelectedRange.getter();
    if (v37)
    {
      uint64_t v26 = v75;
      uint64_t v29 = v32;
      if (v40) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v26 = v75;
      uint64_t v29 = v32;
      if ((v40 & 1) == 0 && !((v38 ^ (unint64_t)v33) >> 14) && (v39 ^ v35) < 0x4000) {
        goto LABEL_10;
      }
    }
LABEL_12:
    uint64_t v42 = UITextField.uiSelectedRange.getter();
    if (v44)
    {
      uint64_t v46 = 1;
      uint64_t v45 = (uint64_t)v71;
    }
    else
    {
      uint64_t v45 = (uint64_t)v71;
      *uint64_t v71 = v42;
      *(void *)(v45 + 8) = v43;
      type metadata accessor for TextSelection.Indices(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = 0;
      *(unsigned char *)(v45 + *(int *)(v28 + 20)) = 0;
    }
    uint64_t v47 = v69;
    uint64_t v48 = (uint64_t)v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v45, v46, 1, v28);
    int v49 = *(_DWORD *)(v26 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_expectedSelectionVersion) + 1;
    *(_DWORD *)(v26 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_expectedSelectionVersion) = v49;
    uint64_t v50 = v68;
    outlined init with copy of PlatformItemList.Item(v30, v68, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
    outlined init with copy of PlatformItemList.Item(v45, v48, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    unint64_t v51 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    unint64_t v52 = (v67 + *(unsigned __int8 *)(v47 + 80) + v51) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    uint64_t v53 = v4 + v52 + 3;
    uint64_t v54 = v30;
    unint64_t v55 = v53 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v56 = swift_allocObject();
    outlined init with take of SearchFieldConfiguration(v50, v56 + v51, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
    outlined init with take of SearchFieldConfiguration(v48, v56 + v52, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    *(_DWORD *)(v56 + v55) = v49;
    static Update.enqueueAction(_:)();
    swift_release();
    outlined destroy of PlatformItemList.Item(v45, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    uint64_t v41 = v54;
    goto LABEL_16;
  }
  outlined destroy of PlatformItemList.Item((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for (TextSelection?, VersionSeed));
  UITextField.uiSelectedRange.getter();
  uint64_t v26 = v75;
  if ((v31 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v41 = (uint64_t)v22;
LABEL_16:
  outlined destroy of PlatformItemList.Item(v41, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
LABEL_17:
  uint64_t v57 = MEMORY[0x18C119DF0](v26 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_searchBar);
  if (v57)
  {
    uint64_t v58 = (void *)v57;
    uint64_t v59 = UIKitSearchBarCoordinator.resolvedScopes.getter();
    UIKitSearchBarCoordinator.resolvedTokenScopes.getter();
    uint64_t v61 = v60;
    unsigned __int8 v63 = v62;
    outlined init with take of PlatformItem.PrimaryContent?(v26 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
    id v64 = v58;
    outlined retain of BoundInputsView?(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined copy of BoundInputsView?);
    specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(v64, v59, 1, v61, v63, (uint64_t)v76, v26, (uint64_t)v64);

    outlined consume of PlatformItemCollection?(v61, v63);
    outlined consume of PlatformItemCollection?(v59, 1u);
    outlined retain of BoundInputsView?(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined consume of BoundInputsView?);
  }
}

uint64_t closure #2 in UIKitSearchBarCoordinator.textFieldDidChangeSelection(_:)(uint64_t a1, uint64_t a2, int a3)
{
  type metadata accessor for (TextSelection?, VersionSeed)();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(int *)(v8 + 56);
  outlined init with copy of PlatformItemList.Item(a2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  *(_DWORD *)&v7[v9] = a3;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of PlatformItemList.Item((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for (TextSelection?, VersionSeed));
}

uint64_t UIKitSearchBarCoordinator.__ivar_destroyer()
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_clearAction));
  outlined destroy of PlatformItemList.Item(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BoundInputsView?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 8), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 16), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 24), *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 32));
  outlined destroy of PlatformItemList.Item(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_selection, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  outlined destroy of weak FallbackResponderProvider?(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate);
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix + 8);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix + 16);

  return outlined consume of Text.Suffix.Storage(v1, v2, v3);
}

uint64_t ObjC metadata update function for UIKitSearchBarCoordinator()
{
  return type metadata accessor for UIKitSearchBarCoordinator(0);
}

void type metadata accessor for SearchFieldConfiguration?(uint64_t a1)
{
}

uint64_t ObjC metadata update function for UIKitSearchBarCoordinator.RepresentedToken()
{
  return type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
}

uint64_t type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchBarCoordinator.RepresentedToken);
}

uint64_t type metadata completion function for UIKitSearchBarCoordinator.RepresentedToken()
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for UIKitSearchBarCoordinator.SearchToken(uint64_t a1)
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  uint64_t v2 = *(void **)(a1 + 64);
}

uint64_t initializeWithCopy for UIKitSearchBarCoordinator.SearchToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  uint64_t v11 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v11;
  id v12 = v11;
  return a1;
}

void *assignWithCopy for UIKitSearchBarCoordinator.SearchToken(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;

  __swift_assign_boxed_opaque_existential_1(a1 + 3, a2 + 3);
  long long v7 = (void *)a2[8];
  uint64_t v8 = (void *)a1[8];
  a1[8] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for UIKitSearchBarCoordinator.SearchToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  long long v7 = *(void **)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;

  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSearchBarCoordinator.SearchToken(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitSearchBarCoordinator.SearchToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitSearchBarCoordinator.SearchToken()
{
  return &type metadata for UIKitSearchBarCoordinator.SearchToken;
}

uint64_t specialized static UIKitSearchBarCoordinator.SearchToken.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4 = MEMORY[0x18C1174E0](a1 + 24, a2 + 24);
  outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a1, (uint64_t)v17);
  outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a2, (uint64_t)v15);
  if ((v4 & 1) == 0)
  {
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
LABEL_14:
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a1, (uint64_t)v14);
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a2, (uint64_t)v13);
LABEL_15:
    char v11 = 0;
    goto LABEL_16;
  }
  id v5 = v18;
  id v6 = v16;
  if (!v18)
  {
    id v10 = v16;
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
    if (!v6)
    {
      outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a1, (uint64_t)v14);
      outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a2, (uint64_t)v13);
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  if (!v16)
  {
    id v10 = v18;
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
LABEL_13:

    goto LABEL_14;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
  id v7 = v6;
  id v8 = v5;
  char v9 = static NSObject.== infix(_:_:)();
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);

  outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a1, (uint64_t)v14);
  outlined init with copy of UIKitSearchBarCoordinator.SearchToken(a2, (uint64_t)v13);
  if ((v9 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  if (v14[0] == v13[0] && v14[1] == v13[1]) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
LABEL_16:
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v14);
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v13);
  return v11 & 1;
}

uint64_t outlined init with copy of UIKitSearchBarCoordinator.SearchToken(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of UIKitSearchBarCoordinator.SearchToken(uint64_t a1)
{
  return a1;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(unsigned char *__return_ptr, uint64_t, _OWORD *))
{
  void (*v21)(unsigned char *__return_ptr, uint64_t, _OWORD *);

  uint64_t v21 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 32;
    id v6 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of AnyToken(v5, (uint64_t)&v16[8]);
      uint64_t v18 = v4;
      v19[2] = *(_OWORD *)&v16[40];
      v19[3] = *(_OWORD *)&v16[56];
      uint64_t v20 = v17;
      v19[0] = *(_OWORD *)&v16[8];
      v19[1] = *(_OWORD *)&v16[24];
      v21(v16, v4, v19);
      outlined destroy of PlatformItemList.Item((uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: AnyToken));
      if (*(void *)&v16[8])
      {
        long long v13 = *(_OWORD *)&v16[32];
        long long v14 = *(_OWORD *)&v16[48];
        uint64_t v15 = *(void *)&v16[64];
        long long v11 = *(_OWORD *)v16;
        long long v12 = *(_OWORD *)&v16[16];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
        }
        unint64_t v8 = *((void *)v6 + 2);
        unint64_t v7 = *((void *)v6 + 3);
        if (v8 >= v7 >> 1) {
          id v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
        }
        *((void *)v6 + 2) = v8 + 1;
        char v9 = &v6[72 * v8];
        *((_OWORD *)v9 + 2) = v11;
        *((void *)v9 + 12) = v15;
        *((_OWORD *)v9 + 4) = v13;
        *((_OWORD *)v9 + 5) = v14;
        *((_OWORD *)v9 + 3) = v12;
      }
      else
      {
        outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for UIKitSearchBarCoordinator.SearchToken?);
      }
      ++v4;
      v5 += 72;
    }
    while (v2 != v4);
  }
  else
  {
    id v6 = (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized UIKitSearchBarCoordinator.primaryActionTriggered(_:)(uint64_t result)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating) & 1) == 0)
  {
    MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v2);
    uint64_t result = static Update.dispatchImmediately<A>(_:)();
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission);
    if (v3)
    {
      MEMORY[0x1F4188790](result);
      MEMORY[0x1F4188790](v4);
      swift_retain();
      static Update.dispatchImmediately<A>(_:)();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
    }
  }
  return result;
}

uint64_t specialized UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate;
  if (MEMORY[0x18C119DF0](v2))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = v5 & 1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();

  return swift_release();
}

uint64_t specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v87 = a8;
  uint64_t v88 = a2;
  uint64_t v93 = a7;
  int v89 = a3;
  id v91 = a1;
  int v10 = ~a5;
  uint64_t v92 = (void *)a6;
  outlined init with take of PlatformItem.PrimaryContent?(a6, (uint64_t)v101, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
  v85[1] = v101[5];
  v85[2] = v101[7];
  v85[3] = v101[10];
  id v86 = (id)v101[4];
  uint64_t v11 = type metadata accessor for PlatformItemList.Item();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  *(void *)&long long v98 = (char *)v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v95 = (uint64_t)v85 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (id *)((char *)v85 - v17);
  MEMORY[0x1F4188790](v19);
  CGRect v97 = (char *)v85 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (id *)((char *)v85 - v22);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (id *)((char *)v85 - v25);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v27 - 8);
  CGFloat v90 = (char *)v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  char v31 = (char *)v85 - v30;
  uint64_t v99 = v12;
  CGRect v96 = v23;
  if (!v10) {
    goto LABEL_4;
  }
  outlined copy of PlatformItemCollection.Storage(a4, a5 & 1);
  specialized Collection.first.getter(a4, a5 & 1, (uint64_t)v31);
  outlined consume of PlatformItemCollection?(a4, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v11) == 1)
  {
    outlined destroy of PlatformItemList.Item((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
LABEL_4:
    CGFloat v94 = 0;
    uint64_t v32 = (uint64_t)v97;
    goto LABEL_5;
  }
  v85[0] = v11;
  uint64_t v36 = *((void *)v31 + 77);
  swift_bridgeObjectRetain();
  uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (!v36)
  {
    CGFloat v94 = 0;
    uint64_t v32 = (uint64_t)v97;
    uint64_t v11 = v85[0];
LABEL_5:
    uint64_t v33 = (uint64_t)v90;
    unsigned __int8 v34 = v89;
    if ((_BYTE)v89 == 0xFF)
    {
LABEL_42:
      uint64_t v47 = 0;
      uint64_t v54 = v94;
      goto LABEL_43;
    }
    goto LABEL_6;
  }
  uint64_t v38 = MEMORY[0x1E4FBC860];
  v103[0] = MEMORY[0x1E4FBC860];
  uint64_t v32 = (uint64_t)v97;
  CGFloat v94 = *(id **)(v36 + 16);
  if (v94)
  {
    unint64_t v39 = 0;
    uint64_t v40 = MEMORY[0x1E4FBC860];
    while (v39 < *(void *)(v36 + 16))
    {
      uint64_t v41 = v12;
      unint64_t v42 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v43 = *(void *)(v41 + 72);
      outlined init with copy of PlatformItemList.Item(v36 + v42 + v43 * v39, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (*v26)
      {

        outlined init with take of SearchFieldConfiguration((uint64_t)v26, v98, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1);
        }
        uint64_t v40 = v103[0];
        unint64_t v45 = *(void *)(v103[0] + 16);
        unint64_t v44 = *(void *)(v103[0] + 24);
        if (v45 >= v44 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
          uint64_t v40 = v103[0];
        }
        *(void *)(v40 + 16) = v45 + 1;
        uint64_t result = outlined init with take of SearchFieldConfiguration(v98, v40 + v42 + v45 * v43, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        uint64_t v23 = v96;
        uint64_t v32 = (uint64_t)v97;
      }
      else
      {
        uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        uint64_t v32 = (uint64_t)v97;
      }
      uint64_t v12 = v99;
      if (v94 == (id *)++v39)
      {
        uint64_t v38 = v103[0];
        unsigned __int8 v34 = v89;
        goto LABEL_38;
      }
    }
    __break(1u);
    goto LABEL_84;
  }
  unsigned __int8 v34 = v89;
LABEL_38:
  swift_bridgeObjectRelease();
  if (*(void *)(v38 + 16))
  {
    CGFloat v94 = (id *)v38;
  }
  else
  {
    swift_release();
    CGFloat v94 = 0;
  }
  uint64_t v11 = v85[0];
  uint64_t v33 = (uint64_t)v90;
  if (v34 == 0xFF) {
    goto LABEL_42;
  }
LABEL_6:
  uint64_t v35 = v88;
  outlined copy of PlatformItemCollection.Storage(v88, v34 & 1);
  specialized Collection.first.getter(v35, v34 & 1, v33);
  outlined consume of PlatformItemCollection?(v35, v34);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v33, 1, v11) == 1)
  {
    outlined destroy of PlatformItemList.Item(v33, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    goto LABEL_42;
  }
  uint64_t v46 = *(void *)(v33 + 616);
  swift_bridgeObjectRetain();
  uint64_t result = outlined destroy of PlatformItemList.Item(v33, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (!v46) {
    goto LABEL_42;
  }
  uint64_t v47 = MEMORY[0x1E4FBC860];
  v103[0] = MEMORY[0x1E4FBC860];
  uint64_t v48 = *(void *)(v46 + 16);
  if (!v48)
  {
LABEL_34:
    uint64_t v54 = v94;
    swift_bridgeObjectRelease();
    if (!*(void *)(v47 + 16))
    {
      swift_release();
      uint64_t v47 = 0;
    }
LABEL_43:
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v92, (uint64_t)v103, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
    if (v103[0])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      uint64_t v55 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes;
      uint64_t v56 = v93;
      if (*(void *)(*(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) + 16))
      {
        objc_msgSend(v91, sel_setScopeButtonTitles_, 0);
        *(void *)(v56 + v55) = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRelease();
      }
      uint64_t v57 = v92;
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v92, (uint64_t)v102, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
      if (v102[0])
      {
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v57, (uint64_t)v100, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        id v58 = v86;
        UIKitSearchBar.updateCustomScopeBarView(_:)((uint64_t)v100);
        outlined retain of BoundInputsView?(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined consume of BoundInputsView?);
      }
LABEL_82:
      uint64_t v80 = *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar);
      uint64_t v81 = *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 8);
      uint64_t v82 = *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 16);
      uint64_t v83 = *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 24);
      uint64_t v84 = *(void **)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 32);
      uint64_t v99 = *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 48);
      long long v98 = *(_OWORD *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 64);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v57, v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
      outlined retain of BoundInputsView?(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined copy of BoundInputsView?);
      return outlined consume of BoundInputsView?(v80, v81, v82, v83, v84);
    }
    if (v54)
    {
      uint64_t v59 = (char *)v54;
      CGRect v96 = v54;
    }
    else
    {
      if (!v47) {
        goto LABEL_45;
      }
      swift_bridgeObjectRetain();
      uint64_t v59 = (char *)v47;
      CGRect v96 = (id *)v47;
    }
    uint64_t v60 = *((void *)v59 + 2);
    uint64_t v95 = v47;
    CGFloat v90 = v59;
    if (v60)
    {
      uint64_t v61 = (uint64_t)&v59[(*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)];
      *(void *)&long long v98 = *(void *)(v12 + 72);
      CGFloat v94 = v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unsigned __int8 v62 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v63 = v60;
      do
      {
        outlined init with copy of PlatformItemList.Item(v61, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (*v18)
        {
          uint64_t v64 = v60;
          id v65 = objc_msgSend(*v18, sel_string);
          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v68 = v67;

          outlined destroy of PlatformItemList.Item((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned __int8 v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v62 + 2) + 1, 1, v62);
          }
          unint64_t v70 = *((void *)v62 + 2);
          unint64_t v69 = *((void *)v62 + 3);
          if (v70 >= v69 >> 1) {
            unsigned __int8 v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v62);
          }
          *((void *)v62 + 2) = v70 + 1;
          uint64_t v71 = &v62[16 * v70];
          *((void *)v71 + 4) = v66;
          *((void *)v71 + 5) = v68;
          uint64_t v60 = v64;
        }
        else
        {
          outlined destroy of PlatformItemList.Item((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        }
        v61 += v98;
        --v63;
      }
      while (v63);
      swift_bridgeObjectRelease();
      uint64_t v32 = (uint64_t)v97;
      uint64_t v54 = v94;
      uint64_t v47 = v95;
    }
    else
    {
      swift_bridgeObjectRetain();
      unsigned __int8 v62 = (char *)MEMORY[0x1E4FBC860];
    }
    id v72 = objc_msgSend(v91, sel_scopeButtonTitles);
    uint64_t v57 = v92;
    if (v72
      && (uint64_t v73 = v72,
          long long v74 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v73,
          LOBYTE(v73) = specialized static Array<A>.== infix(_:_:)(v62, v74),
          uint64_t v47 = v95,
          swift_bridgeObjectRelease(),
          (v73 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      if (!v60) {
        goto LABEL_68;
      }
    }
    else
    {
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v91, sel_setScopeButtonTitles_, isa);

      if (!v60)
      {
LABEL_68:
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_80:
          if (v54)
          {
            *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes) = v54;
            swift_bridgeObjectRelease();
          }
          goto LABEL_82;
        }
LABEL_79:
        *(void *)(v93 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) = v47;
        swift_bridgeObjectRelease();
        goto LABEL_80;
      }
    }
    uint64_t v76 = 0;
    uint64_t v77 = (uint64_t)&v90[(*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80)];
    uint64_t v78 = *(void *)(v99 + 72);
    do
    {
      outlined init with copy of PlatformItemList.Item(v77, v32, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      int v79 = *(unsigned __int8 *)(v32 + 634);
      if (v79 == 3)
      {
        outlined destroy of PlatformItemList.Item(v32, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      }
      else
      {
        outlined destroy of PlatformItemList.Item(v32, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (!v79)
        {
          swift_bridgeObjectRelease();
          objc_msgSend(v91, sel_setSelectedScopeButtonIndex_, v76);
          goto LABEL_78;
        }
      }
      ++v76;
      v77 += v78;
    }
    while (v60 != v76);
    swift_bridgeObjectRelease();
LABEL_78:
    uint64_t v47 = v95;
    if (!v95) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  unint64_t v49 = 0;
  while (v49 < *(void *)(v46 + 16))
  {
    unint64_t v50 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v51 = *(void *)(v12 + 72);
    outlined init with copy of PlatformItemList.Item(v46 + v50 + v51 * v49, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (*v23)
    {

      outlined init with take of SearchFieldConfiguration((uint64_t)v23, v95, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1);
      }
      uint64_t v47 = v103[0];
      unint64_t v53 = *(void *)(v103[0] + 16);
      unint64_t v52 = *(void *)(v103[0] + 24);
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        uint64_t v47 = v103[0];
      }
      *(void *)(v47 + 16) = v53 + 1;
      uint64_t result = outlined init with take of SearchFieldConfiguration(v95, v47 + v50 + v53 * v51, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v12 = v99;
      uint64_t v23 = v96;
    }
    else
    {
      uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    }
    if (v48 == ++v49)
    {
      uint64_t v47 = v103[0];
      uint64_t v32 = (uint64_t)v97;
      goto LABEL_34;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

void type metadata accessor for PlatformItemList.Item?(uint64_t a1)
{
}

uint64_t outlined retain of BoundInputsView(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t outlined consume of PlatformItemCollection.Storage(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for Binding<PlatformSearchPopoverAnchor?>?(uint64_t a1)
{
}

void type metadata accessor for Binding<PlatformSearchPopoverAnchor?>()
{
  if (!lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined assign with take of Binding<(TextSelection?, VersionSeed)>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>);
  }
  return result;
}

double partial apply for closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)(a1, a2, *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), a3);
}

uint64_t outlined init with copy of AnyToken(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for (offset: Int, element: AnyToken)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: AnyToken))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AnyToken));
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuffixKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuffixKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined copy of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of AnyToken(uint64_t a1)
{
  return a1;
}

uint64_t sub_1877FD040()
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v2 = v1 - 8;
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  type metadata accessor for TextSelection?(0);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v3 + *(int *)(v2 + 40);
  uint64_t v8 = type metadata accessor for TextSelection(0);
  char v9 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
  if (!v9(v7, 1, v8))
  {
    type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
    }
  }
  if (!v9(v0 + v6, 1, v8))
  {
    type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v6, v11);
    }
  }

  return swift_deallocObject();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t partial apply for closure #2 in UIKitSearchBarCoordinator.textFieldDidChangeSelection(_:)()
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  type metadata accessor for TextSelection?(0);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int v7 = *(_DWORD *)(v0 + ((*(void *)(v5 + 64) + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL));

  return closure #2 in UIKitSearchBarCoordinator.textFieldDidChangeSelection(_:)(v0 + v2, v0 + v6, v7);
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarShouldClear(_:)@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in UIKitSearchBarCoordinator.searchBarShouldClear(_:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_1877FD43C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)()
{
  return closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(v0);
}

uint64_t partial apply for closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)()
{
  return closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(*(void *)(v0 + 16));
}

uint64_t sub_1877FD498()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  return closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  return closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)();
}

uint64_t sub_1877FD4F8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)()
{
  return closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)()
{
  closure #1 in closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(*(unsigned char **)(v0 + 16));
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBar(_:textDidChange:)()
{
  return closure #1 in UIKitSearchBarCoordinator.searchBar(_:textDidChange:)(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.primaryActionTriggered(_:)()
{
  return closure #1 in UIKitSearchBarCoordinator.primaryActionTriggered(_:)(*(void *)(v0 + 16));
}

uint64_t partial apply for specialized closure #1 in SubmitTriggerSource.updateTriggersIfNeeded()()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t *))(v0 + 16);
  uint64_t v3 = 4;
  return v1(&v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t *);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(uint64_t *))(v0 + 16);
  uint64_t v3 = 1;
  return v1(&v3);
}

void *initializeBufferWithCopyOfBuffer for UIKitSearchBarAdaptor(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    unint64_t v6 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v8 = *(int *)(v7 + 32);
    char v9 = (char *)v6 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *char v9 = *((unsigned char *)a2 + v8);
    v9[1] = *((unsigned char *)a2 + v8 + 1);
    *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
    v9[8] = *((unsigned char *)a2 + v8 + 8);
    *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
    uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v12 = v11[9];
    uint64_t v33 = &v9[v12];
    uint64_t v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v33, v13, v14);
    v9[v11[10]] = v10[v11[10]];
    uint64_t v16 = v11[11];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    uint64_t v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
    uint64_t v20 = v19[6];
    uint64_t v21 = (char *)v6 + v20;
    uint64_t v22 = (char *)a2 + v20;
    int v23 = v22[8];
    if (v23 == 255)
    {
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
    }
    else
    {
      char v24 = v23 & 1;
      uint64_t v25 = *(void *)v22;
      outlined copy of PlatformItemCollection.Storage(*(void *)v22, v23 & 1);
      *(void *)uint64_t v21 = v25;
      v21[8] = v24;
    }
    *((unsigned char *)v6 + v19[7]) = *((unsigned char *)a2 + v19[7]);
    uint64_t v26 = v19[8];
    uint64_t v27 = (char *)v6 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = *(void *)((char *)a2 + v26);
    uint64_t v30 = *(void *)((char *)a2 + v26 + 8);
    char v31 = *((unsigned char *)a2 + v26 + 16);
    outlined copy of Text.Storage(v29, v30, v31);
    *(void *)uint64_t v27 = v29;
    *((void *)v27 + 1) = v30;
    v27[16] = v31;
    *((void *)v27 + 3) = *((void *)v28 + 3);
    *((unsigned char *)v6 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return v6;
}

void *assignWithCopy for UIKitSearchBarAdaptor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  char v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  v8[2] = *((unsigned char *)a2 + v7 + 2);
  v8[3] = *((unsigned char *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  unsigned char v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = *((unsigned __int8 *)a1 + v19 + 8);
  int v23 = *((unsigned __int8 *)a2 + v19 + 8);
  if (v22 == 255)
  {
    if (v23 == 255)
    {
      uint64_t v25 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v21[8];
      *(void *)uint64_t v20 = v25;
    }
    else
    {
      char v30 = v23 & 1;
      uint64_t v31 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(v31, v23 & 1);
      *(void *)uint64_t v20 = v31;
      *(unsigned char *)(v20 + 8) = v30;
    }
  }
  else if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
    char v24 = v21[8];
    *(void *)uint64_t v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = v24;
  }
  else
  {
    char v26 = v23 & 1;
    uint64_t v27 = *(void *)v21;
    outlined copy of PlatformItemCollection.Storage(v27, v23 & 1);
    uint64_t v28 = *(void *)v20;
    char v29 = *(unsigned char *)(v20 + 8);
    *(void *)uint64_t v20 = v27;
    *(unsigned char *)(v20 + 8) = v26;
    outlined consume of PlatformItemCollection.Storage(v28, v29);
  }
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v32 = v18[8];
  uint64_t v33 = (char *)a1 + v32;
  unsigned __int8 v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)((char *)a2 + v32);
  uint64_t v36 = *(void *)((char *)a2 + v32 + 8);
  char v37 = *((unsigned char *)a2 + v32 + 16);
  outlined copy of Text.Storage(v35, v36, v37);
  uint64_t v38 = *(void *)v33;
  uint64_t v39 = *((void *)v33 + 1);
  char v40 = v33[16];
  *(void *)uint64_t v33 = v35;
  *((void *)v33 + 1) = v36;
  v33[16] = v37;
  outlined consume of Text.Storage(v38, v39, v40);
  *((void *)v33 + 3) = *((void *)v34 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t outlined destroy of PlatformItemCollection(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for UIKitSearchBarAdaptor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v8 = *(int *)(v7 + 32);
  char v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *char v9 = *((unsigned char *)a2 + v8);
  v9[1] = *((unsigned char *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((unsigned char *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  uint64_t v16 = v11[11];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v20 = v19[6];
  uint64_t v21 = (char *)a1 + v20;
  int v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *((unsigned char *)a1 + v19[7]) = *((unsigned char *)a2 + v19[7]);
  uint64_t v23 = v19[8];
  char v24 = (_OWORD *)((char *)a1 + v23);
  uint64_t v25 = (_OWORD *)((char *)a2 + v23);
  long long v26 = v25[1];
  *char v24 = *v25;
  v24[1] = v26;
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for UIKitSearchBarAdaptor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  char v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  unsigned char v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = *((unsigned __int8 *)a1 + v19 + 8);
  if (v22 != 255)
  {
    int v23 = v21[8];
    if (v23 != 255)
    {
      uint64_t v24 = *(void *)v20;
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v23 & 1;
      outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v20);
  }
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v21[8];
LABEL_6:
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v25 = v18[8];
  long long v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  LOBYTE(v25) = *((unsigned char *)a2 + v25 + 16);
  uint64_t v28 = *(void *)v26;
  uint64_t v29 = *((void *)v26 + 1);
  char v30 = v26[16];
  *(_OWORD *)long long v26 = *(_OWORD *)v27;
  v26[16] = v25;
  outlined consume of Text.Storage(v28, v29, v30);
  *((void *)v26 + 3) = *((void *)v27 + 3);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSearchBarAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1877FDDB0);
}

uint64_t sub_1877FDDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return v10 - 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for UIKitSearchBarAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877FDE80);
}

uint64_t sub_1877FDE80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UIKitSearchBarAdaptor.Location(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877FE008);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitSearchBarAdaptor.Location()
{
  return &type metadata for UIKitSearchBarAdaptor.Location;
}

unint64_t lazy protocol witness table accessor for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location;
  if (!lazy protocol witness table cache variable for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location);
  }
  return result;
}

uint64_t closure #1 in _DisabledPickerContent._identifiedView.getter(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _DisabledPickerContent();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v12 - v7;
  int v9 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v12 - v7, a2, v4, v6);
  if (v9 == 1) {
    char v10 = v8[*(int *)(v4 + 36)] ^ 1;
  }
  else {
    char v10 = 0;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *a1 = v10 & 1;
  return result;
}

uint64_t sub_1877FE1B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for _DisabledPickerContent() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _DisabledPickerContent._identifiedView.getter(unsigned char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for _DisabledPickerContent() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in _DisabledPickerContent._identifiedView.getter(a1, v4);
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in _DisabledPickerContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _DisabledPickerContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _DisabledPickerContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for _DisabledPickerContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t assignWithCopy for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t sub_1877FE5F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _RowVisitationContext.deleteInteraction.getter@<X0>(void *a1@<X8>)
{
  return ViewTraitCollection.deleteInteraction.getter(a1);
}

uint64_t _RowVisitationContext.wantsClippedBackground.getter()
{
  type metadata accessor for DeleteInteraction?(0, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v6 - v1;
  _RowVisitationContext.moveInteraction.getter((uint64_t)&v6 - v1);
  uint64_t v3 = type metadata accessor for MoveInteraction();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of DeleteInteraction?((uint64_t)v2, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
    return 0;
  }
  else
  {
    uint64_t v4 = v2[16];
    outlined destroy of MoveInteraction((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  }
  return v4;
}

Swift::Bool __swiftcall _RowVisitationContext.canHandleDropInsert(items:)(Swift::OpaquePointer items)
{
  uint64_t v2 = ViewTraitCollection.insertInteraction(for:)(0);
  uint64_t v3 = v2;
  char v4 = 0;
  if (!v2) {
    goto LABEL_20;
  }
  if (v2 == 1)
  {
LABEL_21:
    LOBYTE(v8) = v4;
    return (char)v8;
  }
  uint64_t v16 = *(void *)(v2 + 16);
  if (!v16)
  {
    char v4 = 0;
LABEL_20:
    outlined consume of OnInsertInteraction?(v3);
    goto LABEL_21;
  }
  type metadata accessor for UTType();
  uint64_t v15 = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (!((unint64_t)items._rawValue >> 62))
  {
    uint64_t v6 = *(void *)(((unint64_t)items._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_10;
    }
LABEL_5:
    ++v5;
    swift_bridgeObjectRelease();
    if (v5 == v16)
    {
      uint64_t v3 = v15;
      swift_bridgeObjectRelease();
      char v4 = 0;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_5;
  }
LABEL_10:
  uint64_t v7 = 4;
  while (1)
  {
    id v8 = ((unint64_t)items._rawValue & 0xC000000000000001) != 0
       ? (id)MEMORY[0x18C117680](v7 - 4, items._rawValue)
       : *((id *)items._rawValue + v7);
    int v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1)) {
      break;
    }
    uint64_t v11 = UTType.identifier.getter();
    uint64_t v12 = (void *)MEMORY[0x18C115780](v11);
    swift_bridgeObjectRelease();
    unsigned int v13 = objc_msgSend(v9, sel_hasItemConformingToTypeIdentifier_, v12);

    if (v13)
    {
      uint64_t v3 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v4 = 1;
      goto LABEL_20;
    }
    ++v7;
    if (v10 == v6) {
      goto LABEL_5;
    }
  }
  __break(1u);
  return (char)v8;
}

uint64_t _RowVisitationContext.dynamicContentOffset.getter()
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t _RowVisitationContext.hasSwipeActions.getter()
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t sub_1877FEB00()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()(uint64_t a1, void *a2)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()(a1, a2, *(uint64_t (**)(uint64_t, void))(v2 + 16));
}

uint64_t outlined consume of OnInsertInteraction?(uint64_t result)
{
  if (result != 1) {
    return outlined consume of PasteHelper?(result);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _RowVisitationContext(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v2 = *(void *)(v33 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  int v32 = *(_DWORD *)(v29 + 80);
  uint64_t v27 = v2 + v32;
  uint64_t v4 = *(void *)(v29 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v26 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = (v27 & ~(unint64_t)v32) + v4 + v6;
  uint64_t v8 = *(void *)(v5 + 64) + 7;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v28 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v11 = *(void *)(v9 + 64);
  }
  else {
    size_t v11 = *(void *)(v9 + 64) + 1;
  }
  int v12 = *(_DWORD *)(v33 + 80) | v32;
  unsigned int v13 = v10 | v6 | v12 & 0xF8;
  if (((v10 + ((v8 + (v7 & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + v11 + 3 > 0x18
    || ((*(_DWORD *)(v9 + 80) | v6 | v12) & 0x100000) != 0
    || v13 > 7)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v17 = v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v33 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(((unint64_t)a1 + v27) & ~(unint64_t)v32, ((unint64_t)a2 + v27) & ~(unint64_t)v32, v30);
    unint64_t v18 = ((unint64_t)a1 + v7) & ~(unint64_t)v6;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v18, ((unint64_t)a2 + v7) & ~(unint64_t)v6, v26);
    uint64_t v19 = (void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)((v8 + (((unint64_t)a2 + v7) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    uint64_t v21 = (char *)(((unint64_t)v19 + v10 + 8) & ~v10);
    int v22 = (const void *)(((unint64_t)v20 + v10 + 8) & ~v10);
    int v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    if (v23(v22, 1, v28))
    {
      memcpy(v21, v22, v11);
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v9 + 16))(v21, v22, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v21, 0, 1, v28);
    }
    uint64_t v24 = &v21[v11];
    *uint64_t v24 = *((unsigned char *)v22 + v11);
    v24[1] = *((unsigned char *)v22 + v11 + 1);
    v24[2] = *((unsigned char *)v22 + v11 + 2);
    return a1;
  }
  return (uint64_t *)v17;
}

uint64_t assignWithCopy for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))((v6 + v10 + a1) & ~v10, (v6 + v10 + a2) & ~v10, v7);
  uint64_t v11 = *(void *)(v9 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((v6 + v10) & ~v10) + v11 + v15;
  uint64_t v17 = (v16 + a1) & ~v15;
  uint64_t v18 = (v16 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v17, v18, v12);
  uint64_t v19 = *(void *)(v14 + 40) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (char *)(((unint64_t)v20 + v24 + 8) & ~v24);
  uint64_t v26 = (char *)(((unint64_t)v21 + v24 + 8) & ~v24);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v20) = v27(v25, 1, v22);
  int v28 = v27(v26, 1, v22);
  if (v20)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v25, v26, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      goto LABEL_12;
    }
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v25, v26, v22);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  if (v29) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = v30 + 1;
  }
  memcpy(v25, v26, v31);
LABEL_12:
  if (*(_DWORD *)(v23 + 84)) {
    uint64_t v32 = *(void *)(v23 + 64);
  }
  else {
    uint64_t v32 = *(void *)(v23 + 64) + 1;
  }
  uint64_t v33 = &v25[v32];
  unsigned __int8 v34 = &v26[v32];
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  v33[2] = v34[2];
  return a1;
}

uint64_t initializeWithTake for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v6 + v10 + a1) & ~v10, (v6 + v10 + a2) & ~v10, v7);
  uint64_t v11 = *(void *)(v9 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((v6 + v10) & ~v10) + v11 + v15;
  uint64_t v17 = (v16 + a1) & ~v15;
  uint64_t v18 = (v16 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v17, v18, v12);
  uint64_t v19 = *(void *)(v14 + 32) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (char *)(((unint64_t)v20 + v24 + 8) & ~v24);
  uint64_t v26 = (char *)(((unint64_t)v21 + v24 + 8) & ~v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22))
  {
    int v27 = *(_DWORD *)(v23 + 84);
    size_t v28 = *(void *)(v23 + 64);
    if (v27) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v28 + 1;
    }
    memcpy(v25, v26, v29);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v26, v22);
    size_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
    uint64_t v30 = v23 + 56;
    v31(v25, 0, 1, v22);
    int v27 = *(_DWORD *)(v30 + 28);
    size_t v28 = *(void *)(v30 + 8);
  }
  if (v27) {
    size_t v32 = v28;
  }
  else {
    size_t v32 = v28 + 1;
  }
  uint64_t v33 = &v25[v32];
  unsigned __int8 v34 = &v26[v32];
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  v33[2] = v34[2];
  return a1;
}

uint64_t assignWithTake for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))((v6 + v10 + a1) & ~v10, (v6 + v10 + a2) & ~v10, v7);
  uint64_t v11 = *(void *)(v9 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 40;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((v6 + v10) & ~v10) + v11 + v15;
  uint64_t v17 = (v16 + a1) & ~v15;
  uint64_t v18 = (v16 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v17, v18, v12);
  uint64_t v19 = *(void *)(v14 + 24) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (char *)(((unint64_t)v20 + v24 + 8) & ~v24);
  uint64_t v26 = (char *)(((unint64_t)v21 + v24 + 8) & ~v24);
  int v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v20) = v27(v25, 1, v22);
  int v28 = v27(v26, 1, v22);
  if (v20)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v26, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      goto LABEL_12;
    }
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v25, v26, v22);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  if (v29) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = v30 + 1;
  }
  memcpy(v25, v26, v31);
LABEL_12:
  if (*(_DWORD *)(v23 + 84)) {
    uint64_t v32 = *(void *)(v23 + 64);
  }
  else {
    uint64_t v32 = *(void *)(v23 + 64) + 1;
  }
  uint64_t v33 = &v25[v32];
  unsigned __int8 v34 = &v26[v32];
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  v33[2] = v34[2];
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListContentVisitor(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v60 = v2;
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v57 = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v57 - 8);
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned int *)(v4 + 84);
  if (v6 <= v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  if (v7 > v12) {
    unsigned int v12 = v7;
  }
  if (v12 <= 0x7FFFFFFF) {
    int v13 = 0x7FFFFFFF;
  }
  else {
    int v13 = v12;
  }
  int v14 = *(_DWORD *)(v4 + 80);
  uint64_t v15 = *(void *)(v2 + 64) + v14;
  unint64_t v16 = (v15 & ~(unint64_t)v14) + *(void *)(v4 + 64);
  int v17 = *(_DWORD *)(v9 + 80);
  uint64_t v18 = v17 + 8;
  if (v11) {
    uint64_t v19 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v8 - 8) + 64) + 1;
  }
  size_t v20 = ((v17 + 8 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v17)
      + v19
      + 3;
  uint64_t v21 = (*(unsigned char *)(v2 + 80) | v14);
  if ((v21 | (unint64_t)v17) <= 7
    && ((*(_DWORD *)(v60 + 80) | v14 | v17) & 0x100000) == 0
    && ((v20 + v21) & ~v21) + v16 <= 0x18)
  {
    uint64_t v26 = v3;
    unint64_t v27 = ~(unint64_t)v14;
    uint64_t v55 = v15;
    uint64_t v53 = v8;
    size_t v51 = v19;
    unint64_t v52 = ~(unint64_t)v17;
    if (v7 == v13)
    {
      int v28 = a2;
      uint64_t v25 = a1;
      if (v26 >= v6)
      {
        uint64_t v30 = AssociatedTypeWitness;
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v60 + 48))(a2, v26, AssociatedTypeWitness))
        {
LABEL_34:
          unint64_t v54 = v27;
          unint64_t v31 = ((unint64_t)v28 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_37;
        }
      }
      else
      {
        int v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v15) & v27, v6, v57);
        uint64_t v30 = AssociatedTypeWitness;
        if (!v29) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v54 = ~(unint64_t)v14;
      int v28 = a2;
      uint64_t v25 = a1;
      unint64_t v31 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 0x80000000) != 0)
      {
        uint64_t v30 = AssociatedTypeWitness;
        if (v11 < 2
          || (*(unsigned int (**)(unint64_t))(v10 + 48))((v18 + ((v31 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v17) < 2)
        {
LABEL_37:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v60 + 16))(v25, v28, v30);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v25 + v55) & v54, ((unint64_t)v28 + v55) & v54, v57);
          unint64_t v36 = ((unint64_t)v25 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v37 = *(void *)(v31 + 24);
          *(void *)(v36 + 24) = v37;
          *(void *)(v36 + 32) = *(void *)(v31 + 32);
          (**(void (***)(unint64_t, unint64_t))(v37 - 8))(v36, v31);
          *(void *)(v36 + 40) = *(void *)(v31 + 40);
          *(_DWORD *)(v36 + 48) = *(_DWORD *)(v31 + 48);
          *(_DWORD *)(v36 + 52) = *(_DWORD *)(v31 + 52);
          *(void *)(v36 + 56) = *(void *)(v31 + 56);
          *(void *)(v36 + 64) = *(void *)(v31 + 64);
          *(void *)(v36 + 72) = *(void *)(v31 + 72);
          uint64_t v38 = *(void **)(v31 + 80);
          *(void *)(v36 + 80) = v38;
          uint64_t v39 = (void *)((v36 + 95) & 0xFFFFFFFFFFFFFFF8);
          char v40 = (void *)((v31 + 95) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v39 = *v40;
          unint64_t v50 = (char *)(((unint64_t)v39 + v18) & v52);
          uint64_t v41 = (char *)(((unint64_t)v40 + v18) & v52);
          unint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
          swift_retain();
          swift_bridgeObjectRetain();
          id v43 = v38;
          swift_bridgeObjectRetain();
          if (v42(v41, 1, v53))
          {
            memcpy(v50, v41, v51);
            size_t v44 = v51;
            int v28 = a2;
            uint64_t v25 = a1;
            uint64_t v33 = v60;
            uint64_t v34 = v57;
            uint64_t v35 = ~v21;
            unint64_t v27 = v54;
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v50, v41, v53);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v50, 0, 1, v53);
            int v28 = a2;
            uint64_t v25 = a1;
            uint64_t v33 = v60;
            uint64_t v34 = v57;
            uint64_t v35 = ~v21;
            unint64_t v27 = v54;
            size_t v44 = v51;
          }
          unint64_t v45 = &v50[v44];
          uint64_t v46 = &v41[v44];
          *unint64_t v45 = *v46;
          v45[1] = v46[1];
          v45[2] = v46[2];
          uint64_t v30 = AssociatedTypeWitness;
          goto LABEL_41;
        }
        memcpy(a1, a2, v20);
        uint64_t v33 = v60;
        uint64_t v34 = v57;
        unint64_t v27 = v54;
LABEL_32:
        uint64_t v35 = ~v21;
LABEL_41:
        unint64_t v47 = ((unint64_t)v25 + v21 + v20) & v35;
        unint64_t v48 = ((unint64_t)v28 + v21 + v20) & v35;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 16))(v47, v48, v30);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v55 + v47) & v27, (v55 + v48) & v27, v34);
        return v25;
      }
      unint64_t v32 = *(void *)(v31 + 24);
      if (v32 >= 0xFFFFFFFF) {
        LODWORD(v32) = -1;
      }
      uint64_t v30 = AssociatedTypeWitness;
      unint64_t v27 = ~(unint64_t)v14;
      if (v32 == -1) {
        goto LABEL_34;
      }
    }
    memcpy(v25, v28, v20);
    uint64_t v33 = v60;
    uint64_t v34 = v57;
    goto LABEL_32;
  }
  uint64_t v24 = *a2;
  *a1 = *a2;
  uint64_t v25 = (uint64_t *)(v24
                  + (((v21 | v17) & 0xF8 ^ 0x1F8) & ((v21 | v17) + 16)));
  swift_retain();
  return v25;
}

uint64_t destroy for ListContentVisitor(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v36 = v1;
  uint64_t v2 = *(unsigned int *)(v1 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(v35 - 8);
  uint64_t v37 = v3;
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  if (v4 <= v2) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = *(_DWORD *)(v3 + 84);
  }
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v29 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v5 > v9) {
    unsigned int v9 = v5;
  }
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = v9;
  }
  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v12 = *(_DWORD *)(v3 + 80);
  uint64_t v34 = ~v12;
  uint64_t v13 = v11 + v12;
  uint64_t v14 = ((v11 + v12) & ~v12) + *(void *)(v3 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = *(void *)(*(void *)(v29 - 8) + 64);
  int v32 = *(_DWORD *)(v37 + 80);
  uint64_t v33 = ~v15;
  if (v5 != v10)
  {
    uint64_t v17 = a1;
    unint64_t v19 = (a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v21 = AssociatedTypeWitness;
      if (v8 >= 2)
      {
        uint64_t v22 = v15 + 8;
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((v15 + 8 + ((v19 + 95) & 0xFFFFFFFFFFFFFFF8)) & v33, v8, v29) >= 2)goto LABEL_26; {
      }
        }
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v19 + 24);
    if (v20 >= 0xFFFFFFFF) {
      LODWORD(v20) = -1;
    }
    int v18 = v20 + 1;
    goto LABEL_18;
  }
  uint64_t v17 = a1;
  if (v2 < v4)
  {
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))((v13 + a1) & v34, v4, v35);
LABEL_18:
    uint64_t v21 = AssociatedTypeWitness;
    if (v18)
    {
LABEL_19:
      uint64_t v22 = v15 + 8;
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  uint64_t v21 = AssociatedTypeWitness;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(a1, v2, AssociatedTypeWitness)) {
    goto LABEL_19;
  }
LABEL_21:
  unint64_t v19 = (v17 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_24:
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v17, v21);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))((v13 + v17) & v34, v35);
  __swift_destroy_boxed_opaque_existential_1(v19);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v22 = v15 + 8;
  unint64_t v23 = (v15 + 8 + ((v19 + 95) & 0xFFFFFFFFFFFFFFF8)) & v33;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v23, 1, v29)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v23, v29);
  }
LABEL_26:
  if (v8) {
    uint64_t v25 = v17;
  }
  else {
    uint64_t v25 = v17 + 1;
  }
  uint64_t v24 = *(unsigned __int8 *)(v36 + 80) | v32;
  unint64_t v26 = (v25 + v16 + v24 + ((v22 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & v33) + 3) & ~v24;
  (*(void (**)(unint64_t, uint64_t))(v36 + 8))(v26, v21);
  unint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t))(v37 + 8);

  return v27((v13 + v26) & v34, v35);
}

void *initializeWithCopy for ListContentVisitor(void *a1, const void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v56 = v3;
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v55 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v55 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  if (v7 <= v4) {
    unsigned int v8 = v4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v47 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v47 - 8);
  uint64_t v10 = v9;
  unsigned int v50 = *(_DWORD *)(v9 + 84);
  unsigned int v11 = v50 - 1;
  if (!v50) {
    unsigned int v11 = 0;
  }
  if (v8 > v11) {
    unsigned int v11 = v8;
  }
  if (v11 <= 0x7FFFFFFF) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(void *)(v3 + 64);
  uint64_t v14 = *(_DWORD *)(v5 + 80);
  uint64_t v54 = ~v14;
  uint64_t v15 = v13 + v14;
  uint64_t v16 = ((v13 + v14) & ~v14) + *(void *)(v5 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = v17 + 8;
  unint64_t v49 = (v17 + 8 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  size_t v52 = *(void *)(*(void *)(v47 - 8) + 64);
  int v48 = *(_DWORD *)(v6 + 80);
  if (v8 == v12)
  {
    unint64_t v19 = a2;
    uint64_t v20 = ~v17;
    if (v4 >= v7) {
      int v21 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v56 + 48))(a2, v4, v57);
    }
    else {
      int v21 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a2 + v15) & v54, v7, v55);
    }
    uint64_t v24 = a1;
    if (v21)
    {
LABEL_21:
      unsigned int v25 = v50;
      uint64_t v26 = 3;
      if (!v50) {
        uint64_t v26 = 4;
      }
      size_t v27 = v52;
      unint64_t v28 = v49;
      memcpy(v24, v19, v26 + v52 + v49);
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  unint64_t v19 = a2;
  unint64_t v22 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v20 = ~v17;
    unint64_t v23 = *(void *)(v22 + 24);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    uint64_t v24 = a1;
    if (v23 != -1) {
      goto LABEL_21;
    }
LABEL_18:
    unint64_t v22 = ((unint64_t)v19 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_28;
  }
  uint64_t v24 = a1;
  if (v50 >= 2)
  {
    uint64_t v20 = ~v17;
    if ((*(unsigned int (**)(unint64_t))(v9 + 48))((v18 + ((v22 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v17) >= 2)
    {
      unint64_t v28 = v49;
      size_t v27 = v52;
      memcpy(a1, a2, v52 + v49 + 3);
      unsigned int v25 = v50;
LABEL_24:
      unsigned __int8 v29 = v48;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v20 = ~v17;
  }
LABEL_28:
  (*(void (**)(void *, const void *, uint64_t))(v56 + 16))(v24, v19, v57);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v24 + v15) & v54, ((unint64_t)v19 + v15) & v54, v55);
  unint64_t v30 = ((unint64_t)v24 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)(v22 + 24);
  *(void *)(v30 + 24) = v31;
  *(void *)(v30 + 32) = *(void *)(v22 + 32);
  (**(void (***)(unint64_t, unint64_t))(v31 - 8))(v30, v22);
  *(void *)(v30 + 40) = *(void *)(v22 + 40);
  *(_DWORD *)(v30 + 48) = *(_DWORD *)(v22 + 48);
  *(_DWORD *)(v30 + 52) = *(_DWORD *)(v22 + 52);
  *(void *)(v30 + 56) = *(void *)(v22 + 56);
  *(void *)(v30 + 64) = *(void *)(v22 + 64);
  *(void *)(v30 + 72) = *(void *)(v22 + 72);
  int v32 = *(void **)(v22 + 80);
  *(void *)(v30 + 80) = v32;
  uint64_t v33 = (void *)((v30 + 95) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)((v22 + 95) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v33 = *v34;
  uint64_t v35 = (char *)(((unint64_t)v33 + v18) & v20);
  uint64_t v36 = (const void *)(((unint64_t)v34 + v18) & v20);
  uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  id v38 = v32;
  swift_bridgeObjectRetain();
  if (v37(v36, 1, v47))
  {
    unsigned int v25 = v50;
    if (v50) {
      size_t v39 = v52;
    }
    else {
      size_t v39 = v52 + 1;
    }
    memcpy(v35, v36, v39);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v10 + 16))(v35, v36, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v47);
    unsigned int v25 = v50;
    if (v50) {
      size_t v39 = v52;
    }
    else {
      size_t v39 = v52 + 1;
    }
  }
  unint64_t v19 = a2;
  unsigned __int8 v29 = v48;
  unint64_t v28 = v49;
  char v40 = &v35[v39];
  *char v40 = *((unsigned char *)v36 + v39);
  v40[1] = *((unsigned char *)v36 + v39 + 1);
  v40[2] = *((unsigned char *)v36 + v39 + 2);
  uint64_t v24 = a1;
  size_t v27 = v52;
LABEL_37:
  uint64_t v41 = 3;
  if (!v25) {
    uint64_t v41 = 4;
  }
  uint64_t v42 = *(unsigned __int8 *)(v56 + 80) | v29;
  unint64_t v43 = v41 + v27 + v42 + v28;
  unint64_t v44 = ((unint64_t)v24 + v43) & ~v42;
  unint64_t v45 = ((unint64_t)v19 + v43) & ~v42;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 16))(v44, v45, v57);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v15 + v44) & v54, (v15 + v45) & v54, v55);
  return v24;
}

void *assignWithCopy for ListContentVisitor(void *a1, const void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v82 = v2;
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v81 = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v81 - 8);
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned int *)(v4 + 84);
  if (v6 <= v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v73 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v73 - 8);
  uint64_t v9 = v8;
  unsigned int v78 = *(_DWORD *)(v8 + 84);
  unsigned int v10 = v78 - 1;
  if (!v78) {
    unsigned int v10 = 0;
  }
  if (v7 > v10) {
    unsigned int v10 = v7;
  }
  if (v10 <= 0x7FFFFFFF) {
    int v11 = 0x7FFFFFFF;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v13 = *(_DWORD *)(v4 + 80);
  uint64_t v80 = ~v13;
  uint64_t v14 = v12 + v13;
  uint64_t v15 = ((v12 + v13) & ~v13) + *(void *)(v4 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = ~v16;
  uint64_t v18 = v16 + 8;
  unint64_t v75 = (v16 + 8 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  size_t v74 = *(void *)(*(void *)(v73 - 8) + 64);
  int v76 = *(_DWORD *)(v5 + 80);
  if (v7 == v11)
  {
    unint64_t v19 = a1;
    if (v3 >= v6) {
      int v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 48))(a1, v3, AssociatedTypeWitness);
    }
    else {
      int v20 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a1 + v14) & v80, v6, v81);
    }
    unint64_t v23 = a2;
    if (v20)
    {
      if (v3 < v6)
      {
        int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v80, v6, v81);
        goto LABEL_24;
      }
      if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v82 + 48))(a2, v3, AssociatedTypeWitness)) {
        goto LABEL_58;
      }
LABEL_50:
      unsigned int v40 = v78;
      uint64_t v51 = 3;
      if (!v78) {
        uint64_t v51 = 4;
      }
      size_t v42 = v74;
      unint64_t v41 = v75;
      memcpy(v19, v23, v51 + v74 + v75);
      goto LABEL_53;
    }
    if (v3 >= v6) {
      int v43 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v82 + 48))(a2, v3, AssociatedTypeWitness);
    }
    else {
      int v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v80, v6, v81);
    }
    if (v43)
    {
LABEL_48:
      (*(void (**)(void *, uint64_t))(v82 + 8))(v19, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v19 + v14) & v80, v81);
      uint64_t v48 = (uint64_t)v19 + v15 + 7;
      uint64_t v49 = v17;
      unint64_t v50 = v48 & 0xFFFFFFFFFFFFFFF8;
      __swift_destroy_boxed_opaque_existential_1(v48 & 0xFFFFFFFFFFFFFFF8);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v18 + ((v50 + 95) & 0xFFFFFFFFFFFFFFF8)) & v49, 1, v73))(*(void (**)(unint64_t, uint64_t))(v9 + 8))((v18 + ((v50 + 95) & 0xFFFFFFFFFFFFFFF8)) & v49, v73); {
      goto LABEL_50;
      }
    }
LABEL_29:
    (*(void (**)(void *, const void *, uint64_t))(v82 + 24))(v19, v23, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)v19 + v14) & v80, ((unint64_t)v23 + v14) & v80, v81);
    uint64_t v28 = v17;
    unint64_t v29 = ((unint64_t)v19 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = ((unint64_t)v23 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_assign_boxed_opaque_existential_1((uint64_t *)v29, (uint64_t *)v30);
    *(void *)(v29 + 40) = *(void *)(v30 + 40);
    swift_retain();
    swift_release();
    *(_DWORD *)(v29 + 48) = *(_DWORD *)(v30 + 48);
    *(_DWORD *)(v29 + 52) = *(_DWORD *)(v30 + 52);
    *(void *)(v29 + 56) = *(void *)(v30 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v29 + 64) = *(void *)(v30 + 64);
    *(void *)(v29 + 72) = *(void *)(v30 + 72);
    uint64_t v31 = *(void **)(v29 + 80);
    int v32 = *(void **)(v30 + 80);
    *(void *)(v29 + 80) = v32;
    id v33 = v32;

    uint64_t v34 = (void *)((v29 + 95) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (void *)((v30 + 95) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v36 = (char *)(((unint64_t)v34 + v18) & v28);
    uint64_t v37 = (char *)(((unint64_t)v35 + v18) & v28);
    id v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
    LODWORD(v29) = v38(v36, 1, v73);
    int v39 = v38(v37, 1, v73);
    if (v29)
    {
      unsigned int v40 = v78;
      size_t v42 = v74;
      unint64_t v41 = v75;
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v36, v37, v73);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v36, 0, 1, v73);
LABEL_42:
        unint64_t v23 = a2;
        if (v40) {
          size_t v45 = v42;
        }
        else {
          size_t v45 = v42 + 1;
        }
        uint64_t v46 = &v36[v45];
        uint64_t v47 = &v37[v45];
        *uint64_t v46 = *v47;
        v46[1] = v47[1];
        v46[2] = v47[2];
LABEL_53:
        unsigned __int8 v52 = v76;
        goto LABEL_54;
      }
    }
    else
    {
      unsigned int v40 = v78;
      size_t v42 = v74;
      unint64_t v41 = v75;
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v36, v37, v73);
        goto LABEL_42;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v36, v73);
    }
    if (v40) {
      size_t v44 = v42;
    }
    else {
      size_t v44 = v42 + 1;
    }
    memcpy(v36, v37, v44);
    goto LABEL_42;
  }
  unint64_t v19 = a1;
  unint64_t v21 = ((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0x80000000) == 0)
  {
    unint64_t v22 = *(void *)(v21 + 24);
    unint64_t v23 = a2;
    unint64_t v24 = *(void *)((((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    int v25 = v24 + 1;
    if (v22 <= 0xFFFFFFFE)
    {
LABEL_24:
      if (!v25) {
        goto LABEL_58;
      }
      goto LABEL_50;
    }
    if (v24 != -1) {
      goto LABEL_48;
    }
    goto LABEL_29;
  }
  unint64_t v23 = a2;
  if (v78 < 2) {
    goto LABEL_29;
  }
  uint64_t v26 = *(uint64_t (**)(unint64_t, void, uint64_t))(v8 + 48);
  unsigned int v72 = v26((v18 + ((v21 + 95) & 0xFFFFFFFFFFFFFFF8)) & v17, v78, v73);
  unsigned int v27 = v26((v18 + (((((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & v17, v78, v73);
  if (v72 < 2)
  {
    unint64_t v23 = a2;
    if (v27 >= 2) {
      goto LABEL_48;
    }
    goto LABEL_29;
  }
  unint64_t v23 = a2;
  if (v27 >= 2) {
    goto LABEL_50;
  }
LABEL_58:
  (*(void (**)(void *, const void *, uint64_t))(v82 + 16))(v19, v23, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v19 + v14) & v80, ((unint64_t)v23 + v14) & v80, v81);
  uint64_t v59 = v17;
  unint64_t v60 = ((unint64_t)v19 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v61 = ((unint64_t)v23 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v62 = *(void *)(v61 + 24);
  *(void *)(v60 + 24) = v62;
  *(void *)(v60 + 32) = *(void *)(v61 + 32);
  (**(void (***)(unint64_t, unint64_t))(v62 - 8))(v60, v61);
  *(void *)(v60 + 40) = *(void *)(v61 + 40);
  *(_DWORD *)(v60 + 48) = *(_DWORD *)(v61 + 48);
  *(_DWORD *)(v60 + 52) = *(_DWORD *)(v61 + 52);
  *(void *)(v60 + 56) = *(void *)(v61 + 56);
  *(void *)(v60 + 64) = *(void *)(v61 + 64);
  *(void *)(v60 + 72) = *(void *)(v61 + 72);
  uint64_t v63 = *(void **)(v61 + 80);
  *(void *)(v60 + 80) = v63;
  uint64_t v64 = (void *)((v60 + 95) & 0xFFFFFFFFFFFFFFF8);
  id v65 = (void *)((v61 + 95) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v64 = *v65;
  uint64_t v66 = (char *)(((unint64_t)v64 + v18) & v59);
  uint64_t v67 = (const void *)(((unint64_t)v65 + v18) & v59);
  uint64_t v68 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  id v69 = v63;
  swift_bridgeObjectRetain();
  if (v68(v67, 1, v73))
  {
    unsigned int v40 = v78;
    size_t v42 = v74;
    if (v78) {
      size_t v70 = v74;
    }
    else {
      size_t v70 = v74 + 1;
    }
    memcpy(v66, v67, v70);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v9 + 16))(v66, v67, v73);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v73);
    unsigned int v40 = v78;
    size_t v42 = v74;
    if (v78) {
      size_t v70 = v74;
    }
    else {
      size_t v70 = v74 + 1;
    }
  }
  unsigned __int8 v52 = v76;
  unint64_t v19 = a1;
  unint64_t v23 = a2;
  unint64_t v41 = v75;
  uint64_t v71 = &v66[v70];
  *uint64_t v71 = *((unsigned char *)v67 + v70);
  v71[1] = *((unsigned char *)v67 + v70 + 1);
  v71[2] = *((unsigned char *)v67 + v70 + 2);
LABEL_54:
  uint64_t v53 = 3;
  if (!v40) {
    uint64_t v53 = 4;
  }
  uint64_t v54 = *(unsigned __int8 *)(v82 + 80) | v52;
  size_t v55 = v53 + v42 + v54 + v41;
  unint64_t v56 = ((unint64_t)v19 + v55) & ~v54;
  unint64_t v57 = ((unint64_t)v23 + v55) & ~v54;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v82 + 24))(v56, v57, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))((v14 + v56) & v80, (v14 + v57) & v80, v81);
  return v19;
}

void *initializeWithTake for ListContentVisitor(void *a1, const void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v55 = v2;
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v54 - 8);
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned int *)(v4 + 84);
  if (v6 <= v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v45 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v45 - 8);
  uint64_t v9 = v8;
  unsigned int v51 = *(_DWORD *)(v8 + 84);
  unsigned int v10 = v51 - 1;
  if (!v51) {
    unsigned int v10 = 0;
  }
  if (v7 > v10) {
    unsigned int v10 = v7;
  }
  if (v10 <= 0x7FFFFFFF) {
    int v11 = 0x7FFFFFFF;
  }
  else {
    int v11 = v10;
  }
  int v12 = *(_DWORD *)(v4 + 80);
  unint64_t v53 = ~(unint64_t)v12;
  uint64_t v13 = *(void *)(v2 + 64) + v12;
  unint64_t v14 = (v13 & v53) + *(void *)(v4 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = v15 + 8;
  unint64_t v50 = (v15 + 8 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  size_t v52 = *(void *)(*(void *)(v45 - 8) + 64);
  uint64_t v44 = ~v15;
  if (v7 != v11)
  {
    int v46 = *(_DWORD *)(v5 + 80);
    uint64_t v17 = a2;
    unint64_t v21 = ((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v20 = AssociatedTypeWitness;
      unint64_t v19 = a1;
      if (v51 >= 2
        && (*(unsigned int (**)(unint64_t))(v8 + 48))((v16 + ((v21 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15) >= 2)
      {
        unint64_t v26 = v50;
        size_t v25 = v52;
        memcpy(a1, a2, v52 + v50 + 3);
        unsigned int v23 = v51;
        LOBYTE(v12) = v46;
        goto LABEL_35;
      }
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v21 + 24);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    uint64_t v20 = AssociatedTypeWitness;
    unint64_t v19 = a1;
    int v12 = *(_DWORD *)(v5 + 80);
    if (v22 != -1) {
      goto LABEL_19;
    }
LABEL_23:
    LOBYTE(v46) = v12;
    unint64_t v21 = ((unint64_t)v17 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
    (*(void (**)(void *, const void *, uint64_t))(v55 + 32))(v19, v17, v20);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v19 + v13) & v53, ((unint64_t)v17 + v13) & v53, v54);
    unint64_t v27 = ((unint64_t)v19 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v28 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)unint64_t v27 = *(_OWORD *)v21;
    *(_OWORD *)(v27 + 16) = v28;
    long long v30 = *(_OWORD *)(v21 + 48);
    long long v29 = *(_OWORD *)(v21 + 64);
    long long v31 = *(_OWORD *)(v21 + 32);
    *(void *)(v27 + 80) = *(void *)(v21 + 80);
    *(_OWORD *)(v27 + 48) = v30;
    *(_OWORD *)(v27 + 64) = v29;
    *(_OWORD *)(v27 + 32) = v31;
    int v32 = (void *)((v27 + 95) & 0xFFFFFFFFFFFFFFF8);
    id v33 = (void *)((v21 + 95) & 0xFFFFFFFFFFFFFFF8);
    *int v32 = *v33;
    uint64_t v34 = (char *)(((unint64_t)v32 + v16) & v44);
    uint64_t v35 = (const void *)(((unint64_t)v33 + v16) & v44);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v35, 1, v45))
    {
      unsigned int v23 = v51;
      if (v51) {
        size_t v36 = v52;
      }
      else {
        size_t v36 = v52 + 1;
      }
      memcpy(v34, v35, v36);
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v9 + 32))(v34, v35, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v45);
      unsigned int v23 = v51;
      if (v51) {
        size_t v36 = v52;
      }
      else {
        size_t v36 = v52 + 1;
      }
    }
    LOBYTE(v12) = v46;
    uint64_t v37 = &v34[v36];
    *uint64_t v37 = *((unsigned char *)v35 + v36);
    v37[1] = *((unsigned char *)v35 + v36 + 1);
    v37[2] = *((unsigned char *)v35 + v36 + 2);
    unint64_t v26 = v50;
    size_t v25 = v52;
    goto LABEL_35;
  }
  uint64_t v17 = a2;
  if (v3 >= v6)
  {
    uint64_t v20 = AssociatedTypeWitness;
    unint64_t v19 = a1;
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(a2, v3, AssociatedTypeWitness)) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  int v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v13) & v53, v6, v54);
  uint64_t v20 = AssociatedTypeWitness;
  unint64_t v19 = a1;
  if (!v18) {
    goto LABEL_23;
  }
LABEL_19:
  unsigned int v23 = v51;
  uint64_t v24 = 3;
  if (!v51) {
    uint64_t v24 = 4;
  }
  size_t v25 = v52;
  unint64_t v26 = v50;
  memcpy(v19, v17, v24 + v52 + v50);
LABEL_35:
  uint64_t v38 = 3;
  if (!v23) {
    uint64_t v38 = 4;
  }
  uint64_t v39 = *(unsigned __int8 *)(v55 + 80) | v12;
  unint64_t v40 = v38 + v25 + v39 + v26;
  unint64_t v41 = ((unint64_t)v19 + v40) & ~v39;
  unint64_t v42 = ((unint64_t)v17 + v40) & ~v39;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v55 + 32))(v41, v42, v20);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((v13 + v41) & v53, (v13 + v42) & v53, v54);
  return v19;
}

void *assignWithTake for ListContentVisitor(void *a1, const void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v83 = v2;
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v82 = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v82 - 8);
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned int *)(v4 + 84);
  if (v6 <= v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v74 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v74 - 8);
  uint64_t v9 = v8;
  unsigned int v78 = *(_DWORD *)(v8 + 84);
  unsigned int v10 = v78 - 1;
  if (!v78) {
    unsigned int v10 = 0;
  }
  if (v7 > v10) {
    unsigned int v10 = v7;
  }
  if (v10 <= 0x7FFFFFFF) {
    int v11 = 0x7FFFFFFF;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v13 = *(_DWORD *)(v4 + 80);
  uint64_t v81 = ~v13;
  uint64_t v14 = v12 + v13;
  uint64_t v15 = ((v12 + v13) & ~v13) + *(void *)(v4 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = ~v16;
  uint64_t v18 = v16 + 8;
  unint64_t v76 = (v16 + 8 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  size_t v75 = *(void *)(*(void *)(v74 - 8) + 64);
  int v77 = *(_DWORD *)(v5 + 80);
  if (v7 == v11)
  {
    unint64_t v19 = a1;
    if (v3 >= v6) {
      int v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v83 + 48))(a1, v3, AssociatedTypeWitness);
    }
    else {
      int v20 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a1 + v14) & v81, v6, v82);
    }
    unsigned int v23 = a2;
    if (v20)
    {
      if (v3 >= v6)
      {
        if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v83 + 48))(a2, v3, AssociatedTypeWitness)) {
          goto LABEL_50;
        }
        goto LABEL_46;
      }
      int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v81, v6, v82);
      goto LABEL_24;
    }
    if (v3 >= v6) {
      int v43 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v83 + 48))(a2, v3, AssociatedTypeWitness);
    }
    else {
      int v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v81, v6, v82);
    }
    if (v43) {
      goto LABEL_44;
    }
    goto LABEL_29;
  }
  unint64_t v19 = a1;
  unint64_t v21 = ((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0x80000000) == 0)
  {
    unint64_t v22 = *(void *)(v21 + 24);
    unsigned int v23 = a2;
    unint64_t v24 = *(void *)((((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    int v25 = v24 + 1;
    if (v22 <= 0xFFFFFFFE)
    {
LABEL_24:
      if (!v25) {
        goto LABEL_50;
      }
      goto LABEL_46;
    }
    if (v24 != -1)
    {
LABEL_44:
      (*(void (**)(void *, uint64_t))(v83 + 8))(v19, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v19 + v14) & v81, v82);
      uint64_t v46 = v17;
      unint64_t v47 = ((unint64_t)v19 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
      __swift_destroy_boxed_opaque_existential_1(v47);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      unint64_t v48 = (v18 + ((v47 + 95) & 0xFFFFFFFFFFFFFFF8)) & v46;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v48, 1, v74)) {
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v48, v74);
      }
      goto LABEL_46;
    }
LABEL_29:
    (*(void (**)(void *, const void *, uint64_t))(v83 + 40))(v19, v23, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)v19 + v14) & v81, ((unint64_t)v23 + v14) & v81, v82);
    uint64_t v29 = (uint64_t)v19 + v15 + 7;
    uint64_t v30 = v17;
    unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = ((unint64_t)v23 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_destroy_boxed_opaque_existential_1(v29 & 0xFFFFFFFFFFFFFFF8);
    long long v33 = *(_OWORD *)v32;
    long long v34 = *(_OWORD *)(v32 + 16);
    *(void *)(v31 + 32) = *(void *)(v32 + 32);
    *(_OWORD *)unint64_t v31 = v33;
    *(_OWORD *)(v31 + 16) = v34;
    *(void *)(v31 + 40) = *(void *)(v32 + 40);
    swift_release();
    *(_DWORD *)(v31 + 48) = *(_DWORD *)(v32 + 48);
    *(_DWORD *)(v31 + 52) = *(_DWORD *)(v32 + 52);
    *(void *)(v31 + 56) = *(void *)(v32 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v31 + 64) = *(void *)(v32 + 64);
    *(void *)(v31 + 72) = *(void *)(v32 + 72);
    uint64_t v35 = *(void **)(v31 + 80);
    *(void *)(v31 + 80) = *(void *)(v32 + 80);

    size_t v36 = (void *)((v31 + 95) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = (void *)((v32 + 95) & 0xFFFFFFFFFFFFFFF8);
    *size_t v36 = *v37;
    swift_bridgeObjectRelease();
    uint64_t v38 = (char *)(((unint64_t)v36 + v18) & v30);
    uint64_t v39 = (char *)(((unint64_t)v37 + v18) & v30);
    unint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
    LODWORD(v36) = v40(v38, 1, v74);
    int v41 = v40(v39, 1, v74);
    if (v36)
    {
      size_t v42 = v75;
      if (!v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v74);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v74);
LABEL_60:
        unint64_t v19 = a1;
        unsigned int v23 = a2;
        unsigned int v44 = v78;
LABEL_61:
        if (v44) {
          size_t v64 = v42;
        }
        else {
          size_t v64 = v42 + 1;
        }
        id v65 = &v38[v64];
        uint64_t v66 = &v39[v64];
        *id v65 = *v66;
        v65[1] = v66[1];
        v65[2] = v66[2];
        unint64_t v50 = v76;
        unsigned __int8 v51 = v77;
        goto LABEL_65;
      }
    }
    else
    {
      size_t v42 = v75;
      if (!v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v38, v39, v74);
        goto LABEL_60;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v38, v74);
    }
    unsigned int v44 = v78;
    if (v78) {
      size_t v45 = v42;
    }
    else {
      size_t v45 = v42 + 1;
    }
    memcpy(v38, v39, v45);
    unint64_t v19 = a1;
    unsigned int v23 = a2;
    goto LABEL_61;
  }
  unsigned int v23 = a2;
  if (v78 < 2) {
    goto LABEL_29;
  }
  unint64_t v26 = *(uint64_t (**)(unint64_t, void, uint64_t))(v8 + 48);
  uint64_t v27 = ~v16;
  unsigned int v73 = v26((v18 + ((v21 + 95) & 0xFFFFFFFFFFFFFFF8)) & v17, v78, v74);
  unsigned int v28 = v26((v18 + (((((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & v27, v78, v74);
  if (v73 < 2)
  {
    unint64_t v19 = a1;
    unsigned int v23 = a2;
    uint64_t v17 = v27;
    if (v28 >= 2) {
      goto LABEL_44;
    }
    goto LABEL_29;
  }
  unint64_t v19 = a1;
  unsigned int v23 = a2;
  uint64_t v17 = v27;
  if (v28 < 2)
  {
LABEL_50:
    (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v19, v23, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v19 + v14) & v81, ((unint64_t)v23 + v14) & v81, v82);
    unint64_t v52 = ((unint64_t)v19 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v53 = ((unint64_t)v23 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v54 = *(_OWORD *)(v53 + 16);
    *(_OWORD *)unint64_t v52 = *(_OWORD *)v53;
    *(_OWORD *)(v52 + 16) = v54;
    long long v56 = *(_OWORD *)(v53 + 48);
    long long v55 = *(_OWORD *)(v53 + 64);
    long long v57 = *(_OWORD *)(v53 + 32);
    *(void *)(v52 + 80) = *(void *)(v53 + 80);
    *(_OWORD *)(v52 + 48) = v56;
    *(_OWORD *)(v52 + 64) = v55;
    *(_OWORD *)(v52 + 32) = v57;
    id v58 = (void *)((v52 + 95) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v59 = (void *)((v53 + 95) & 0xFFFFFFFFFFFFFFF8);
    *id v58 = *v59;
    unint64_t v60 = (char *)(((unint64_t)v58 + v18) & v17);
    unint64_t v61 = (const void *)(((unint64_t)v59 + v18) & v17);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v61, 1, v74))
    {
      unsigned int v44 = v78;
      size_t v42 = v75;
      if (v78) {
        size_t v62 = v75;
      }
      else {
        size_t v62 = v75 + 1;
      }
      memcpy(v60, v61, v62);
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v9 + 32))(v60, v61, v74);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v60, 0, 1, v74);
      unsigned int v44 = v78;
      size_t v42 = v75;
      if (v78) {
        size_t v62 = v75;
      }
      else {
        size_t v62 = v75 + 1;
      }
    }
    unint64_t v50 = v76;
    unsigned __int8 v51 = v77;
    uint64_t v63 = &v60[v62];
    *uint64_t v63 = *((unsigned char *)v61 + v62);
    v63[1] = *((unsigned char *)v61 + v62 + 1);
    v63[2] = *((unsigned char *)v61 + v62 + 2);
    goto LABEL_65;
  }
LABEL_46:
  unsigned int v44 = v78;
  uint64_t v49 = 3;
  if (!v78) {
    uint64_t v49 = 4;
  }
  size_t v42 = v75;
  unint64_t v50 = v76;
  memcpy(v19, v23, v49 + v75 + v76);
  unsigned __int8 v51 = v77;
LABEL_65:
  uint64_t v67 = 3;
  if (!v44) {
    uint64_t v67 = 4;
  }
  uint64_t v68 = *(unsigned __int8 *)(v83 + 80) | v51;
  size_t v69 = v67 + v42 + v68 + v50;
  unint64_t v70 = ((unint64_t)v19 + v69) & ~v68;
  unint64_t v71 = ((unint64_t)v23 + v69) & ~v68;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v83 + 40))(v70, v71, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))((v14 + v70) & v81, (v14 + v71) & v81, v82);
  return v19;
}

uint64_t getEnumTagSinglePayload for ListContentVisitor(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v7 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFF) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = v11;
  }
  if (v7 <= v12 - 1) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = v7;
  }
  uint64_t v14 = *(void *)(v2 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  if (v9) {
    uint64_t v16 = 3;
  }
  else {
    uint64_t v16 = 4;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(_DWORD *)(v5 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = ((v14 + v17) & ~v17) + *(void *)(v5 + 64);
  uint64_t v20 = *(unsigned __int8 *)(v2 + 80) | v17;
  unint64_t v21 = v16
      + *(void *)(v8 + 64)
      + v20
      + ((v15 + 8 + ((((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
  uint64_t v22 = v2;
  if (a2 <= v13) {
    goto LABEL_38;
  }
  unint64_t v23 = (v21 & ~v20) + v19;
  char v24 = 8 * v23;
  if (v23 <= 3)
  {
    unsigned int v26 = ((a2 - v13 + ~(-1 << v24)) >> v24) + 1;
    if (HIWORD(v26))
    {
      int v25 = *(_DWORD *)((char *)a1 + v23);
      uint64_t v22 = v2;
      if (!v25) {
        goto LABEL_38;
      }
      goto LABEL_28;
    }
    if (v26 > 0xFF)
    {
      int v25 = *(unsigned __int16 *)((char *)a1 + v23);
      uint64_t v22 = v2;
      if (!*(unsigned __int16 *)((char *)a1 + v23)) {
        goto LABEL_38;
      }
      goto LABEL_28;
    }
    uint64_t v22 = v2;
    if (v26 < 2)
    {
LABEL_38:
      if (v12 - 1 < v7)
      {
        unint64_t v30 = ((unint64_t)a1 + v21) & ~v20;
        if (v3 >= v6)
        {
          unint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 48);
          uint64_t v32 = v3;
          uint64_t v33 = AssociatedTypeWitness;
        }
        else
        {
          unint64_t v30 = (v18 + v30) & ~v17;
          unint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
          uint64_t v32 = v6;
          uint64_t v33 = v4;
        }
        return v31(v30, v32, v33);
      }
      if (v7 != v12)
      {
        unint64_t v35 = ((unint64_t)a1 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 0x80000000) != 0)
        {
          if (v9 >= 2)
          {
            unsigned int v38 = (*(uint64_t (**)(unint64_t))(v8 + 48))((v15 + 8 + ((v35 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
            if (v38 >= 2)
            {
              BOOL v39 = v38 != 1;
              uint64_t result = v38 - 2;
              if (result != 0 && v39) {
                return result;
              }
            }
          }
        }
        else
        {
          unint64_t v36 = *(void *)(v35 + 24);
          if (v36 >= 0xFFFFFFFF) {
            LODWORD(v36) = -1;
          }
          unsigned int v37 = v36 + 1;
          uint64_t result = v37 - 1;
          if (v37 > 1) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  int v25 = *((unsigned __int8 *)a1 + v23);
  if (!*((unsigned char *)a1 + v23)) {
    goto LABEL_38;
  }
LABEL_28:
  int v27 = (v25 - 1) << v24;
  if (v23 > 3) {
    int v27 = 0;
  }
  if (v23)
  {
    if (v23 <= 3) {
      int v28 = (v21 & ~v20) + v19;
    }
    else {
      int v28 = 4;
    }
    switch(v28)
    {
      case 2:
        int v29 = *a1;
        break;
      case 3:
        int v29 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v29 = *(_DWORD *)a1;
        break;
      default:
        int v29 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v29 = 0;
  }
  return v13 + (v29 | v27) + 1;
}

void storeEnumTagSinglePayload for ListContentVisitor(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v57 = v6;
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v4) {
    unsigned int v8 = v4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  int v9 = 0;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  unsigned int v13 = v12 - 1;
  if (!v12) {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 64);
  if (v8 <= v13) {
    unsigned int v16 = v13;
  }
  else {
    unsigned int v16 = v8;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  unsigned int v18 = v17 - 1;
  if (v8 <= v17 - 1) {
    unsigned int v19 = v17 - 1;
  }
  else {
    unsigned int v19 = v8;
  }
  uint64_t v20 = *(_DWORD *)(v6 + 80);
  uint64_t v21 = *(void *)(v3 + 64) + v20;
  size_t v22 = (v21 & ~v20) + *(void *)(v6 + 64);
  uint64_t v23 = v14 + 8;
  if (v12) {
    uint64_t v24 = v15;
  }
  else {
    uint64_t v24 = v15 + 1;
  }
  size_t v25 = v24 + ((v14 + 8 + ((((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
  uint64_t v26 = *(unsigned __int8 *)(v3 + 80) | *(_DWORD *)(v6 + 80);
  uint64_t v27 = v25 + v26 + 3;
  size_t v28 = (v27 & ~v26) + v22;
  if (a3 > v19)
  {
    if (v28 <= 3)
    {
      unsigned int v29 = ((a3 - v19 + ~(-1 << (8 * v28))) >> (8 * v28)) + 1;
      if (HIWORD(v29))
      {
        int v9 = 4;
      }
      else if (v29 >= 0x100)
      {
        int v9 = 2;
      }
      else
      {
        int v9 = v29 > 1;
      }
    }
    else
    {
      int v9 = 1;
    }
  }
  if (v19 < a2)
  {
    unsigned int v30 = ~v19 + a2;
    if (v28 < 4)
    {
      int v31 = (v30 >> (8 * v28)) + 1;
      if (v28)
      {
        int v33 = v30 & ~(-1 << (8 * v28));
        bzero(a1, (v27 & ~v26) + v22);
        if (v28 == 3)
        {
          *(_WORD *)a1 = v33;
          a1[2] = BYTE2(v33);
        }
        else if (v28 == 2)
        {
          *(_WORD *)a1 = v33;
        }
        else
        {
          *a1 = v33;
        }
      }
    }
    else
    {
      bzero(a1, (v27 & ~v26) + v22);
      *(_DWORD *)a1 = v30;
      int v31 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v28] = v31;
        return;
      case 2:
        *(_WORD *)&a1[v28] = v31;
        return;
      case 3:
        goto LABEL_104;
      case 4:
        *(_DWORD *)&a1[v28] = v31;
        return;
      default:
        return;
    }
  }
  uint64_t v32 = ~v14;
  switch(v9)
  {
    case 1:
      a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 2:
      *(_WORD *)&a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 3:
LABEL_104:
      __break(1u);
      JUMPOUT(0x187803268);
    case 4:
      *(_DWORD *)&a1[v28] = 0;
      goto LABEL_37;
    default:
LABEL_37:
      if (a2)
      {
LABEL_38:
        if (v18 >= v8)
        {
          unsigned int v38 = v25 + 3;
          if (v18 >= a2)
          {
            if (a2 + 1 <= v17)
            {
              if (a2 != -1)
              {
                if (v8 == v17)
                {
                  if (v22)
                  {
                    if (v22 <= 3) {
                      int v49 = ~(-1 << (8 * v22));
                    }
                    else {
                      int v49 = -1;
                    }
                    int v50 = v49 & (a2 - v8);
                    bzero(a1, v22);
                    *(_DWORD *)a1 = v50;
                  }
                }
                else
                {
                  unint64_t v51 = (unint64_t)&a1[v22 + 7] & 0xFFFFFFFFFFFFFFF8;
                  if ((v16 & 0x80000000) != 0)
                  {
                    if (v12 >= 2)
                    {
                      unint64_t v52 = *(void (**)(unint64_t, void))(v11 + 56);
                      v52((v23 + ((v51 + 95) & 0xFFFFFFFFFFFFFFF8)) & v32, a2 + 2);
                    }
                  }
                  else if (((a2 + 1) & 0x80000000) != 0)
                  {
                    *(_OWORD *)(v51 + 72) = 0u;
                    *(_OWORD *)(v51 + 56) = 0u;
                    *(_OWORD *)(v51 + 40) = 0u;
                    *(_OWORD *)(v51 + 24) = 0u;
                    *(_OWORD *)(v51 + 8) = 0u;
                    *(void *)unint64_t v51 = a2 - 0x7FFFFFFF;
                  }
                  else
                  {
                    *(void *)(v51 + 24) = a2;
                  }
                }
              }
            }
            else
            {
              if (v38 <= 3) {
                int v47 = ~(-1 << (8 * v38));
              }
              else {
                int v47 = -1;
              }
              if (v25 != -3)
              {
                int v40 = v47 & (a2 - v17);
                if (v38 <= 3) {
                  int v48 = v25 + 3;
                }
                else {
                  int v48 = 4;
                }
                bzero(a1, (v25 + 3));
                switch(v48)
                {
                  case 2:
LABEL_90:
                    *(_WORD *)a1 = v40;
                    break;
                  case 3:
LABEL_91:
                    *(_WORD *)a1 = v40;
                    a1[2] = BYTE2(v40);
                    break;
                  case 4:
LABEL_92:
                    *(_DWORD *)a1 = v40;
                    break;
                  default:
LABEL_71:
                    *a1 = v40;
                    break;
                }
              }
            }
          }
          else
          {
            if (v38 <= 3) {
              int v39 = ~(-1 << (8 * v38));
            }
            else {
              int v39 = -1;
            }
            if (v25 != -3)
            {
              int v40 = v39 & (a2 - v17);
              if (v38 <= 3) {
                int v41 = v25 + 3;
              }
              else {
                int v41 = 4;
              }
              bzero(a1, (v25 + 3));
              switch(v41)
              {
                case 2:
                  goto LABEL_90;
                case 3:
                  goto LABEL_91;
                case 4:
                  goto LABEL_92;
                default:
                  goto LABEL_71;
              }
            }
          }
        }
        else
        {
          long long v34 = (unsigned char *)((unint64_t)&a1[v27] & ~v26);
          if (a2 <= v8)
          {
            if (v4 >= v7)
            {
              int v43 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
              unint64_t v42 = (unint64_t)&a1[v27] & ~v26;
              uint64_t v44 = a2;
              uint64_t v45 = v4;
              uint64_t v46 = AssociatedTypeWitness;
            }
            else
            {
              unint64_t v42 = (unint64_t)&v34[v21] & ~v20;
              int v43 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
              uint64_t v44 = a2;
              uint64_t v45 = v7;
              uint64_t v46 = v5;
            }
            v43(v42, v44, v45, v46);
          }
          else
          {
            if (v22 <= 3) {
              int v35 = ~(-1 << (8 * v22));
            }
            else {
              int v35 = -1;
            }
            if (v22)
            {
              int v36 = v35 & (~v8 + a2);
              if (v22 <= 3) {
                int v37 = v22;
              }
              else {
                int v37 = 4;
              }
              bzero(v34, v22);
              switch(v37)
              {
                case 2:
                  *(_WORD *)long long v34 = v36;
                  break;
                case 3:
                  *(_WORD *)long long v34 = v36;
                  v34[2] = BYTE2(v36);
                  break;
                case 4:
                  *(_DWORD *)long long v34 = v36;
                  break;
                default:
                  *long long v34 = v36;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(unsigned __int16 a1)
{
  char v1 = a1;
  uint64_t v2 = a1 >> 14;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = 0x646E756F626E75;
  switch(v2)
  {
    case 1:
    case 2:
      if (v1)
      {
        if (v1 == 1) {
          uint64_t v4 = 0x6F43656C62756F64;
        }
        else {
          uint64_t v4 = 7105633;
        }
        if (v1 == 1) {
          unint64_t v3 = 0xEC0000006E6D756CLL;
        }
        else {
          unint64_t v3 = 0xE300000000000000;
        }
      }
      else
      {
        uint64_t v4 = 0x6E4F6C6961746564;
        unint64_t v3 = 0xEA0000000000796CLL;
      }
      break;
    case 3:
      break;
    default:
      uint64_t v4 = String.init<A>(describing:)();
      unint64_t v3 = v5;
      break;
  }
  unint64_t v6 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  return swift_bridgeObjectRelease();
}

UISplitViewControllerDisplayMode __swiftcall UISplitViewControllerVisibilityEngine.displayModeForExpanding(proposed:)(UISplitViewControllerDisplayMode proposed)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double Width;
  double v21;
  double v22;
  uint64_t v23;
  unsigned int v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  id v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  double v40;
  __int16 v41;
  UISplitViewControllerDisplayMode v42;
  unsigned __int8 v43;
  unsigned int v44;
  UISplitViewControllerDisplayMode v45;
  unsigned int v46;
  __int16 v47;
  uint64_t v49;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;

  UISplitViewControllerDisplayMode v2 = proposed;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  __int16 v5 = *((_WORD *)v1 + 8);
  __int16 v6 = *((_WORD *)v1 + 9);
  unsigned int v8 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[3];
  uint64_t v7 = v1[4];
  int v9 = v1[5];
  unint64_t v51 = *((unsigned char *)v1 + 56);
  if ((unint64_t)v8 >= 2)
  {
    uint64_t v10 = self;
    swift_retain();
    uint64_t v11 = objc_msgSend(v10, sel_mainScreen);
    objc_msgSend(v11, sel_bounds);
    unsigned int v13 = v12;
    uint64_t v15 = v14;
    unsigned int v17 = v16;
    unsigned int v19 = v18;

    v56.origin.double x = v13;
    v56.origin.double y = v15;
    v56.size.CGFloat width = v17;
    v56.size.CGFloat height = v19;
    double Width = CGRectGetWidth(v56);
    v57.origin.double x = v13;
    v57.origin.double y = v15;
    v57.size.CGFloat width = v17;
    v57.size.CGFloat height = v19;
    if (CGRectGetHeight(v57) >= Width) {
      uint64_t v21 = 1194.0;
    }
    else {
      uint64_t v21 = 1024.0;
    }
    v58.origin.double x = v13;
    v58.origin.double y = v15;
    v58.size.CGFloat width = v17;
    v58.size.CGFloat height = v19;
    size_t v22 = CGRectGetWidth(v58);
    unint64_t v52 = v3;
    unint64_t v53 = v4;
    long long v54 = v5;
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?((uint64_t)v8, v7, v9);
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    int v49 = v23;
    MEMORY[0x18C113DA0](&v55);
    uint64_t v24 = (unsigned __int16)v55 >> 14;
    if (v24 < 2 || v24 == 3 && (unsigned __int16)v55 == 49152)
    {
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?((uint64_t)v8, v7, v9);
      size_t v25 = 16640;
    }
    else
    {
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?((uint64_t)v8, v7, v9);
      size_t v25 = -32512;
    }
    LOWORD(v55) = v25 | (v22 >= v21);
    if ((unint64_t)(proposed - 2) > 4) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = qword_1883595C8[proposed - 2];
    }
    AnyNavigationSplitVisibility.Kind.adoptingVisibleLeadingColumnCount(_:)(v26, (__int16 *)&v52);
    uint64_t v27 = (unsigned __int16)v52 >> 14;
    if (v27 == 2 || v27 == 1)
    {
      size_t v28 = v52;
      unsigned int v29 = BYTE1(v52) & 1;
    }
    else
    {
      unsigned int v30 = objc_msgSend(v10, sel_mainScreen);
      objc_msgSend(v30, sel_bounds);
      uint64_t v32 = v31;
      long long v34 = v33;
      int v36 = v35;
      unsigned int v38 = v37;

      v59.origin.double x = v32;
      v59.origin.double y = v34;
      v59.size.CGFloat width = v36;
      v59.size.CGFloat height = v38;
      int v39 = CGRectGetWidth(v59);
      v60.origin.double x = v32;
      v60.origin.double y = v34;
      v60.size.CGFloat width = v36;
      v60.size.CGFloat height = v38;
      if (CGRectGetHeight(v60) >= v39) {
        int v40 = 1194.0;
      }
      else {
        int v40 = 1024.0;
      }
      v61.origin.double x = v32;
      v61.origin.double y = v34;
      v61.size.CGFloat width = v36;
      v61.size.CGFloat height = v38;
      size_t v28 = CGRectGetWidth(v61) >= v40;
      LOBYTE(v29) = 1;
    }
    LOBYTE(v55) = v28;
    BYTE1(v55) = v29;
    v8(&v52, &v55);
    int v41 = v52;
    if ((v52 & 0xFF00) != 0x200)
    {
      unint64_t v52 = v3;
      unint64_t v53 = v4;
      long long v54 = v5;
      swift_retain();
      swift_retain();
      outlined copy of NavigationEventHandlers?((uint64_t)v8, v7, v9);
      MEMORY[0x18C113DA0](&v55, v49);
      uint64_t v46 = (unsigned __int16)v55 >> 14;
      if (v46 < 2 || v46 == 3 && (unsigned __int16)v55 == 49152)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v8, v7, v9);
        int v47 = 0x4000;
      }
      else
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v8, v7, v9);
        int v47 = 0x8000;
      }
      int v43 = v51;
      LOWORD(v52) = v41 & 0x1FF | v47;
      unint64_t v42 = proposed;
      return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)(v42, 0, v43);
    }
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
    UISplitViewControllerDisplayMode v2 = proposed;
  }
  if ((v6 & 0xFF00) == 0x200)
  {
    unint64_t v52 = v3;
    unint64_t v53 = v4;
    long long v54 = v5;
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18C113DA0](&v55);
    LOWORD(v52) = v55;
    unint64_t v42 = v2;
    int v43 = v51;
    return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)(v42, 0, v43);
  }
  unint64_t v52 = v3;
  unint64_t v53 = v4;
  long long v54 = v5;
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?((uint64_t)v8, v7, v9);
  type metadata accessor for Binding<AnyNavigationSplitVisibility>();
  MEMORY[0x18C113DA0](&v55);
  uint64_t v44 = (unsigned __int16)v55 >> 14;
  if (v44 < 2 || v44 == 3 && (unsigned __int16)v55 == 49152) {
    uint64_t v45 = UISplitViewControllerDisplayModeOneBesideSecondary;
  }
  else {
    uint64_t v45 = UISplitViewControllerDisplayModeTwoBesideSecondary;
  }
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?((uint64_t)v8, v7, v9);
  if (!(_BYTE)v6) {
    return 1;
  }
  if (v6 == 1) {
    return 2;
  }
  return v45;
}

uint64_t NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:)@<X0>(void *a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, __int16 *a5@<X8>)
{
  __int16 v11 = *v5;
  int v12 = v5[1];
  id v13 = objc_msgSend(a1, sel_preferredDisplayMode);
  uint64_t v14 = self;
  char v15 = a4 & 1;
  if (a2)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a1;
    *(unsigned char *)(v16 + 24) = v11;
    *(unsigned char *)(v16 + 25) = v12;
    *(unsigned char *)(v16 + 26) = a3;
    *(unsigned char *)(v16 + 27) = v15;
    int v33 = partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:);
    uint64_t v34 = v16;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v30 = 1107296256;
    int v31 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v32 = &block_descriptor_9;
    unsigned int v17 = _Block_copy(&aBlock);
    id v18 = a1;
    swift_release();
    objc_msgSend(v14, sel_animateWithDuration_animations_, v17, 0.5);
    _Block_release(v17);
    unsigned int v19 = 0;
  }
  else
  {
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a1;
    *(unsigned char *)(v20 + 24) = v11;
    *(unsigned char *)(v20 + 25) = v12;
    *(unsigned char *)(v20 + 26) = a3;
    *(unsigned char *)(v20 + 27) = v15;
    uint64_t v21 = swift_allocObject();
    unsigned int v19 = partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:);
    *(void *)(v21 + 16) = partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:);
    *(void *)(v21 + 24) = v20;
    int v33 = partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v34 = v21;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v30 = 1107296256;
    int v31 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v32 = &block_descriptor_3;
    size_t v22 = _Block_copy(&aBlock);
    id v23 = a1;
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_performWithoutAnimation_, v22);
    _Block_release(v22);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      return result;
    }
  }
  id v26 = objc_msgSend(a1, sel_preferredDisplayMode);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v19);
  if (v12) {
    __int16 v27 = 256;
  }
  else {
    __int16 v27 = 0;
  }
  __int16 v28 = v27 | v11;
  if (v26 == v13) {
    __int16 v28 = 512;
  }
  *a5 = v28;
  return result;
}

unint64_t UISplitViewControllerVisibilityEngine.description.getter()
{
  unint64_t v1 = 0xD00000000000001DLL;
  if (*(void *)(v0 + 24) <= 1uLL)
  {
    __int16 v2 = *(_WORD *)(v0 + 18);
    if ((v2 & 0xFF00) == 0x200)
    {
      _StringGuts.grow(_:)(32);
      uint64_t v7 = 0;
      unint64_t v8 = 0xE000000000000000;
      v3._countAndFlagsBits = 0xD00000000000001ELL;
      v3._object = (void *)0x8000000188329CA0;
      String.append(_:)(v3);
      type metadata accessor for Binding<AnyNavigationSplitVisibility>();
      MEMORY[0x18C113DA0](&v6);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v6);
      return v7;
    }
    else
    {
      _StringGuts.grow(_:)(31);
      v4._object = (void *)0x8000000188329CC0;
      v4._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v4);
      LOWORD(v7) = v2 & 0x1FF;
      _print_unlocked<A, B>(_:_:)();
      return 0;
    }
  }
  return v1;
}

uint64_t AnyNavigationSplitVisibility.description.getter()
{
  uint64_t result = 0x646E756F626E75;
  switch((unsigned __int16)*v0 >> 14)
  {
    case 1:
    case 2:
      if (*v0)
      {
        if (*v0 == 1) {
          uint64_t result = 0x6F43656C62756F64;
        }
        else {
          uint64_t result = 7105633;
        }
      }
      else
      {
        uint64_t result = 0x6E4F6C6961746564;
      }
      break;
    case 3:
      return result;
    default:
      uint64_t result = String.init<A>(describing:)();
      break;
  }
  return result;
}

uint64_t sub_187803E20()
{
  return swift_deallocObject();
}

uint64_t sub_187803E5C()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:)()
{
  if (*(unsigned char *)(v0 + 24))
  {
    if (*(unsigned char *)(v0 + 24) == 1)
    {
      uint64_t v1 = 2;
    }
    else if (*(unsigned char *)(v0 + 27))
    {
      uint64_t v1 = 4;
    }
    else
    {
      uint64_t v1 = 2;
    }
  }
  else
  {
    uint64_t v1 = 1;
  }
  return objc_msgSend(*(id *)(v0 + 16), sel_setPreferredDisplayMode_, v1);
}

uint64_t sub_187803EB0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187803EE8()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)()
{
  closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

void partial apply for closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)()
{
  closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t destroy for UISplitViewControllerVisibilityEngine(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_release();
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    if (v3 == 1) {
      return result;
    }
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 40))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for UISplitViewControllerVisibilityEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  __int16 v5 = (_OWORD *)(a1 + 24);
  unsigned __int16 v6 = (_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  if (v7)
  {
    if (v7 == 1)
    {
      long long v8 = v6[1];
      *__int16 v5 = *v6;
      *(_OWORD *)(a1 + 40) = v8;
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v9;
    swift_retain();
  }
  else
  {
    *__int16 v5 = *v6;
  }
  uint64_t v10 = *(void *)(a2 + 40);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
LABEL_9:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for UISplitViewControllerVisibilityEngine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  __int16 v5 = (long long *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  uint64_t v7 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v4 == 1)
  {
    if (v6)
    {
      if (v6 == 1)
      {
        long long v8 = *v7;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_25:
        *__int16 v5 = v8;
        goto LABEL_26;
      }
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = v11;
      swift_retain();
    }
    else
    {
      *__int16 v5 = *v7;
    }
    uint64_t v12 = *(void *)(a2 + 40);
    if (!v12)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      goto LABEL_26;
    }
LABEL_22:
    uint64_t v15 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v15;
    swift_retain();
    goto LABEL_26;
  }
  if (v6 != 1)
  {
    if (v4)
    {
      if (v6)
      {
        uint64_t v10 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = v10;
        swift_retain();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    else if (v6)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = v13;
      swift_retain();
      goto LABEL_18;
    }
    *__int16 v5 = *v7;
LABEL_18:
    __int16 v5 = (long long *)(a1 + 40);
    uint64_t v12 = *(void *)(a2 + 40);
    if (*(void *)(a1 + 40))
    {
      if (v12)
      {
        uint64_t v14 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = v12;
        *(void *)(a1 + 48) = v14;
        swift_retain();
        swift_release();
        goto LABEL_26;
      }
      swift_release();
    }
    else if (v12)
    {
      goto LABEL_22;
    }
    long long v8 = *(_OWORD *)(a2 + 40);
    goto LABEL_25;
  }
  outlined destroy of NavigationEventHandlers(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 40);
  *__int16 v5 = *v7;
  *(_OWORD *)(a1 + 40) = v9;
LABEL_26:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t outlined destroy of NavigationEventHandlers(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for UISplitViewControllerVisibilityEngine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  __int16 v5 = (_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v7 = (_OWORD *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  if (v6 == 1) {
    goto LABEL_4;
  }
  if (v4 != 1)
  {
    if (v6)
    {
      if (v4)
      {
        uint64_t v10 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v4;
        *(void *)(a1 + 32) = v10;
        swift_release();
        goto LABEL_13;
      }
      swift_release();
    }
    else if (v4)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v11;
      goto LABEL_13;
    }
    *uint64_t v7 = *v5;
LABEL_13:
    uint64_t v12 = *(void *)(a2 + 40);
    if (*(void *)(a1 + 40))
    {
      if (v12)
      {
        uint64_t v13 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = v12;
        *(void *)(a1 + 48) = v13;
        swift_release();
        goto LABEL_5;
      }
      swift_release();
    }
    else if (v12)
    {
      uint64_t v14 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v14;
      goto LABEL_5;
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_5;
  }
  outlined destroy of NavigationEventHandlers(a1 + 24);
LABEL_4:
  long long v8 = *(_OWORD *)(a2 + 40);
  *uint64_t v7 = *v5;
  *(_OWORD *)(a1 + 40) = v8;
LABEL_5:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for UISplitViewControllerVisibilityEngine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UISplitViewControllerVisibilityEngine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UISplitViewControllerVisibilityEngine()
{
  return &type metadata for UISplitViewControllerVisibilityEngine;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_Sis5NeverOTg503_s7d4UI24f61ViewCoordinator_PhoneC27dismissPresentationIfNeededyyFSiAA0C5G54Ocfu_33_88b05e132e72830fd289708f1134f08dAFSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = TabEntry.presentationCount.getter();
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 272;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v4, sel__uip_tabElement);

      if (v7)
      {
        MEMORY[0x18C115B40]();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t SystemTabView.BodyContent.clientSidebarVisibility.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 17);
  outlined copy of Environment<Binding<Visibility>?>.Content(v1, v2, v3, v4);
  uint64_t v5 = specialized Environment.wrappedValue.getter(v1, v2, v3 | (v4 << 8));
  outlined consume of Environment<Binding<Visibility>?>.Content(v1, v2, v3, v4);
  return v5;
}

double SystemTabView.BodyContent.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v55 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  *(void *)&long long v53 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v11 = *(void *)(v10 + 16);
  type metadata accessor for Binding();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v49 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v49 - v15, v3 + *(int *)(a1 + 48), v12, v14);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v52 = v3 + 88;
  outlined init with copy of _VariadicView_Children(v3 + 88, (uint64_t)&v70);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v11;
  *(void *)(v18 + 24) = v17;
  long long v19 = v71;
  *(_OWORD *)(v18 + 32) = v70;
  *(_OWORD *)(v18 + 48) = v19;
  *(_OWORD *)(v18 + 64) = v72;
  *(void *)(v18 + 80) = v73;
  uint64_t v57 = v11;
  uint64_t v58 = v17;
  uint64_t v59 = partial apply for implicit closure #2 in implicit closure #1 in SystemTabView.BodyContent.body.getter;
  uint64_t v60 = v18;
  type metadata accessor for Binding<Int?>();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>), (uint64_t)v56, MEMORY[0x1E4FBC248], v20, v21, (uint64_t)&v66);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v22 = v55;
  swift_release();
  uint64_t v23 = v66;
  uint64_t v24 = v67;
  uint64_t v25 = v68;
  int v54 = v69;
  int v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v49(v9, v3, a1);
  if (v24)
  {
    uint64_t v50 = v25;
    uint64_t v51 = v23;
  }
  else
  {
    uint64_t v26 = MEMORY[0x1E4FBB960];
    type metadata accessor for Int?(0, (unint64_t *)&lazy cache variable for type metadata for State<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    outlined init with copy of _VariadicView_Children((uint64_t)(v9 + 88), (uint64_t)v63);
    type metadata accessor for ChildIndexProjection();
    uint64_t v27 = swift_allocObject();
    long long v28 = *(_OWORD *)&v63[16];
    *(_OWORD *)(v27 + 16) = *(_OWORD *)v63;
    *(_OWORD *)(v27 + 32) = v28;
    *(_OWORD *)(v27 + 48) = v64;
    *(void *)(v27 + 64) = v65;
    uint64_t v51 = specialized Binding.projecting<A>(_:)(v27);
    uint64_t v50 = v29;
    int v54 = v30;
    swift_release();
    outlined destroy of Binding<AnyHashable>((uint64_t)&v70, (uint64_t)&lazy cache variable for type metadata for Binding<AnyHashable>, v26, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for Int?);
  }
  int v31 = *(void (**)(char *, uint64_t))(v22 + 8);
  v31(v9, a1);
  uint64_t v32 = SystemTabView.BodyContent.clientSidebarVisibility.getter();
  uint64_t v34 = v33;
  char v36 = v35;
  uint64_t v37 = v53;
  v49((char *)v53, v3, a1);
  if (v34)
  {
    v31((char *)v37, a1);
    uint64_t v55 = v32;
    uint64_t v38 = v34;
  }
  else
  {
    uint64_t v39 = *(void *)(v37 + 80);
    v63[0] = *(unsigned char *)(v37 + 72);
    *(void *)&v63[8] = v39;
    type metadata accessor for Int?(0, &lazy cache variable for type metadata for State<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    v31((char *)v37, a1);
    uint64_t v38 = *((void *)&v70 + 1);
    uint64_t v55 = v70;
    char v36 = v71;
  }
  outlined init with copy of _VariadicView_Children(v52, (uint64_t)&v70);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v66 = 0;
  uint64_t v41 = v51;
  swift_retain();
  swift_retain();
  BindingOperations.NilCoalescing.init(defaultValue:)();
  long long v53 = *(_OWORD *)v63;
  *(void *)uint64_t v63 = KeyPath;
  *(_OWORD *)&v63[8] = v53;
  uint64_t v61 = v50;
  char v62 = v54 & 1;
  swift_retain();
  swift_getAtKeyPath();
  if ((_BYTE)v67) {
    uint64_t v42 = v53;
  }
  else {
    uint64_t v42 = v66;
  }
  type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>();
  lazy protocol witness table accessor for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>(&lazy protocol witness table cache variable for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>, (void (*)(uint64_t))type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>);
  uint64_t v43 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release_n();
  swift_release_n();
  uint64_t v44 = swift_getKeyPath();
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = swift_getKeyPath();
  *(void *)a2 = v44;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v45;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = v46;
  *(unsigned char *)(a2 + 56) = 0;
  long long v47 = v71;
  *(_OWORD *)(a2 + 64) = v70;
  *(_OWORD *)(a2 + 80) = v47;
  double result = *(double *)&v72;
  *(_OWORD *)(a2 + 96) = v72;
  *(void *)(a2 + 112) = v73;
  *(void *)(a2 + 120) = v41;
  *(void *)(a2 + 128) = v43;
  *(void *)(a2 + 136) = v42;
  *(void *)(a2 + 144) = v55;
  *(void *)(a2 + 152) = v38;
  *(unsigned char *)(a2 + 160) = v36;
  *(unsigned char *)(a2 + 161) = 2;
  *(void *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 176) = -1;
  return result;
}

uint64_t default argument 0 of SystemTabView.BodyContent.init(clientSidebarVisibility:children:selection:)()
{
  return swift_getKeyPath();
}

uint64_t SystemTabView.BodyContent.init(clientSidebarVisibility:children:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 17) = HIBYTE(a3) & 1;
  uint64_t v9 = a6 + 24;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v14, v9);
  *(void *)(a6 + 64) = 0;
  outlined destroy of AnyHashable((uint64_t)v14);
  *(unsigned char *)(a6 + 72) = 0;
  *(void *)(a6 + 80) = 0;
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 88) = *(_OWORD *)a4;
  *(_OWORD *)(a6 + 104) = v10;
  *(_OWORD *)(a6 + 120) = *(_OWORD *)(a4 + 32);
  *(void *)(a6 + 136) = *(void *)(a4 + 48);
  uint64_t v11 = a6 + *(int *)(type metadata accessor for SystemTabView.BodyContent() + 48);
  type metadata accessor for Binding();
  uint64_t v12 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a5, v12);
}

Swift::Void __swiftcall TabViewCoordinator_Phone.cacheChild(_:childID:for:)(UIViewController *_, Swift::String childID, Swift::String a3)
{
  uint64_t v4 = v3;
  object = a3._object;
  uint64_t countAndFlagsBits = a3._countAndFlagsBits;
  uint64_t v7 = childID._object;
  uint64_t v8 = childID._countAndFlagsBits;
  uint64_t v44 = _;
  type metadata accessor for Binding<TabViewCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v39 - v10;
  static Log.tabView.getter();
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of Binding<AnyHashable>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  }
  else
  {
    uint64_t v43 = v8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    double v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v42 = countAndFlagsBits;
      uint64_t v17 = v16;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v47 = v40;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v41 = v4;
      swift_bridgeObjectRetain();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, (unint64_t)v7, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, (unint64_t)object, &v47);
      uint64_t v4 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v14, v15, "Caching child id %s in group id %s", (uint8_t *)v17, 0x16u);
      uint64_t v18 = v40;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v18, -1, -1);
      uint64_t v19 = v17;
      uint64_t countAndFlagsBits = v42;
      MEMORY[0x18C119C60](v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    uint64_t v8 = v43;
  }
  uint64_t v20 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_groupHostCache);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t v22 = *(void *)(*v20 + 16);
  swift_bridgeObjectRetain();
  if (v22 && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object), (v24 & 1) != 0))
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v21 + 56) + 32 * v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v29 = v25[2];
    uint64_t v28 = v25[3];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
    uint64_t v29 = v30;
    uint64_t v28 = v31;
    swift_bridgeObjectRelease();
    uint64_t v26 = 10;
  }
  uint64_t v47 = v26;
  uint64_t v48 = v27;
  uint64_t v49 = v29;
  uint64_t v50 = v28;
  swift_endAccess();
  uint64_t v32 = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  uint64_t v33 = v44;
  if (v26 <= v32) {
    TabItemGroup.HostCache.removeOldestKey()();
  }
  specialized OrderedDictionary.subscript.setter(v33, v8, (uint64_t)v7);
  uint64_t v34 = v47;
  uint64_t v35 = v48;
  uint64_t v36 = v49;
  uint64_t v37 = v50;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = *v20;
  *uint64_t v20 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v35, v36, v37, countAndFlagsBits, (uint64_t)object, isUniquelyReferenced_nonNull_native);
  *uint64_t v20 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
}

void TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = MEMORY[0x18C119DF0](v4 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_popoverBridge);
  if (v7)
  {
    uint64_t v8 = (char *)v7;
    if (a3) {
      swift_unknownObjectWeakAssign();
    }
    swift_unknownObjectWeakAssign();
    PreferenceValues.init()();
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_nextPopoverSeed;
    int v11 = *(_DWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_nextPopoverSeed);
    *(void *)(v9 + 16) = a1;
    uint64_t v15 = v9;
    LODWORD(v16) = v11;
    swift_bridgeObjectRetain();
    PreferenceValues.modifyValue<A>(for:transform:)();
    swift_release();
    ++*(_DWORD *)(v4 + v10);
    uint64_t v12 = (void *)MEMORY[0x18C119DF0](&v8[direct field offset for UIKitInspectorV3Bridge.presenterOverride]);
    if (v12
      && (uint64_t v13 = v12,
          id v14 = objc_msgSend(v12, sel_parentViewController, partial apply for closure #1 in TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:), v15, v16), v14, v13, v14))
    {
      specialized UIKitInspectorV3Bridge.preferencesDidChange(_:)(v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)&v8[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences] = v17;

      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall TabViewCoordinator_Phone.dismissPresentationIfNeeded()()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_Sis5NeverOTg503_s7d4UI24f61ViewCoordinator_PhoneC27dismissPresentationIfNeededyyFSiAA0C5G54Ocfu_33_88b05e132e72830fd289708f1134f08dAFSiTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 8 * v3 + 32);
      BOOL v6 = __OFADD__(v4, v5);
      v4 += v5;
      if (v6)
      {
        __break(1u);
        return;
      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_9;
    }
    if (v4 >= 2) {
      MEMORY[0x18C112B90](0xD00000000000008FLL, 0x8000000188329ED0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_9:
    TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(MEMORY[0x1E4FBC860], 0, 0);
  }
}

Swift::Void __swiftcall TabViewCoordinator_Phone.tabBarController(_:didSelect:)(UITabBarController *_, UIViewController *didSelect)
{
  type metadata accessor for Binding<TabViewCustomization>?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v47 - v6;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  double v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_lastSelection;
  uint64_t v15 = (UIViewController *)MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_lastSelection, v11);
  if (v15)
  {
    uint64_t v16 = v15;

    if (v16 == didSelect)
    {
      type metadata accessor for UIHostingController<TabItem.RootView>();
      uint64_t v17 = swift_dynamicCastClass();
      if (v17)
      {
        uint64_t v18 = (void *)v17;
        uint64_t v51 = didSelect;
        id v52 = v18;
        id v19 = objc_msgSend(v18, sel_childViewControllers);
        uint64_t v50 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v20 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v21 != 1) {
          goto LABEL_16;
        }
        uint64_t v22 = (UIViewController *)objc_msgSend(v52, sel_childViewControllers);
        uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v23 & 0xC000000000000001) != 0)
        {
          char v24 = (UIViewController *)MEMORY[0x18C117680](0, v23);
        }
        else
        {
          if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_33;
          }
          char v24 = (UIViewController *)*(id *)(v23 + 32);
        }
        uint64_t v22 = v24;
        swift_bridgeObjectRelease();
        self;
        uint64_t v25 = (void *)swift_dynamicCastObjCClass();
        if (!v25)
        {
LABEL_15:

LABEL_16:
          uint64_t v27 = (UIViewController *)objc_msgSend(v52, sel_contentScrollView);
          if (!v27)
          {
            uint64_t v22 = v51;
            goto LABEL_20;
          }
          uint64_t v22 = v27;
          [(UIViewController *)v27 contentOffset];
          double v29 = v28;
          [(UIViewController *)v22 adjustedContentInset];
          -[UIViewController setContentOffset:animated:](v22, sel_setContentOffset_animated_, 1, v29, -v30);
LABEL_18:

LABEL_20:
          goto LABEL_21;
        }
        id v49 = v25;
        id v26 = objc_msgSend(v25, sel_viewControllers);
        unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v23 = v48;
        if (!(v48 >> 62))
        {
          uint64_t v50 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_13;
        }
LABEL_33:
        uint64_t v46 = v23 & 0xFFFFFFFFFFFFFF8;
        if (v23 < 0) {
          uint64_t v46 = v23;
        }
        uint64_t v50 = v46;
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_13:
        swift_bridgeObjectRelease();
        if (v50 >= 2)
        {

          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }
  }
LABEL_21:
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex + 8) == 1)
  {
    uint64_t v31 = (UIViewController *)MEMORY[0x18C119DF0](v14);
    if (!v31 || (uint64_t v32 = v31, v31, v32 != didSelect))
    {
      uint64_t v33 = v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState;
      swift_beginAccess();
      outlined init with copy of Binding<TabViewCustomization>?(v33, (uint64_t)v7, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
      {
        outlined destroy of Binding<AnyHashable>((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t)type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
      }
      else
      {
        uint64_t v34 = outlined init with take of Binding<SearchFieldState>((uint64_t)v7, (uint64_t)v13);
        MEMORY[0x1F4188790](v34);
        *(&v47 - 2) = (uint64_t)v13;
        MEMORY[0x1F4188790](v35);
        *(&v47 - 2) = (uint64_t)partial apply for closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:);
        *(&v47 - 1) = v36;
        static Update.dispatchImmediately<A>(_:)();
        _s7SwiftUI16SearchFieldStateVWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
      }
    }
  }
  uint64_t v37 = (void **)(v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache);
  swift_beginAccess();
  uint64_t v38 = *v37;
  swift_bridgeObjectRetain();
  v54.value._rawuint64_t Value = v38;
  Swift::Int_optional v53 = TabViewCoordinator_Phone.updatedSelection(didSelect:viewController:selectionCache:)(_, didSelect, v54);
  Swift::Int value = v53.value;
  Swift::Bool is_nil = v53.is_nil;
  swift_bridgeObjectRelease();
  if (!is_nil)
  {
    uint64_t v41 = v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selected;
    uint64_t v42 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selected);
    uint64_t v43 = *(void *)(v41 + 8);
    uint64_t v44 = *(void *)(v41 + 16);
    uint64_t v45 = (void *)swift_allocObject();
    v45[2] = v42;
    v45[3] = v43;
    v45[4] = v44;
    v45[5] = value;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_unknownObjectWeakAssign();
}

uint64_t closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)()
{
  uint64_t v0 = type metadata accessor for SearchFieldState(0);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x18C113DA0]();
  unsigned __int8 v4 = v3[2];
  unsigned __int8 v5 = v3[3];
  _s7SwiftUI16SearchFieldStateVWOhTm_0((uint64_t)v3, type metadata accessor for SearchFieldState);
  *uint64_t v3 = 2;
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_currentTraitCollection);
  id v8 = objc_msgSend(v7, sel_horizontalSizeClass);

  id v9 = objc_msgSend(v6, sel_currentTraitCollection);
  id v10 = objc_msgSend(v9, sel_userInterfaceIdiom);

  char v11 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v8, (uint64_t)v10, 2u);
  v3[1] = (v11 == 2) | v11 & 1;
  *((_WORD *)v3 + 1) = 2;
  *((_DWORD *)v3 + 1) = 0;
  v3[8] = 1;
  AttributedString.init()();
  v3[*(int *)(v1 + 48)] = 0;
  uint64_t v12 = &v3[*(int *)(v1 + 52)];
  *(_DWORD *)uint64_t v12 = 0;
  long long v12[4] = 0;
  SearchFieldState.hasSuggestions.setter(v4);
  SearchFieldState.hasCustomAccessory.setter(v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return _s7SwiftUI16SearchFieldStateVWOhTm_0((uint64_t)v3, type metadata accessor for SearchFieldState);
}

Swift::Void __swiftcall TabViewCoordinator_Phone.tabBarControllerDidEndEditing(_:)(UITabBarController *a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for Binding<TabViewCustomization>?(0, &lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = &v23[-v6];
  type metadata accessor for Binding<TabViewCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], v4);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = &v23[-v9];
  static Log.tabView.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of Binding<AnyHashable>((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1872C6000, v13, v14, "tabBarControllerDidEndEditing", v15, 2u);
      MEMORY[0x18C119C60](v15, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v16 = [(UITabBarController *)a1 viewControllers];
  if (v16)
  {
    uint64_t v17 = v16;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v18 = MEMORY[0x1E4FBC860];
  }
  unint64_t v19 = specialized Sequence.compactMap<A>(_:)(v18);
  swift_bridgeObjectRelease();
  if (v19 >> 62)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
    swift_bridgeObjectRetain();
    unint64_t v20 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
    unint64_t v20 = v19;
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization;
  swift_beginAccess();
  outlined init with copy of Binding<TabViewCustomization>?(v21, (uint64_t)v7, &lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  uint64_t v22 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache);
  swift_bridgeObjectRetain();
  TabViewCoordinator_Phone.mayHaveCustomizedTabBarVisibility(of:customization:tabCache:)(v20, (uint64_t)v7, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Binding<AnyHashable>((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t closure #2 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)()
{
  return swift_release();
}

Class @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:itemsForBeginning:tab:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v10 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache];
  swift_bridgeObjectRetain();
  id v11 = a3;
  id v12 = a4;
  swift_unknownObjectRetain();
  id v13 = a6;
  os_log_type_t v14 = a1;
  TabViewCoordinator_Phone.dragSessionItems(for:tabCache:)(v13, v10);

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v15.super.isa;
}

id @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)(char *a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache];
  swift_bridgeObjectRetain();
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  NSArray v15 = a1;
  id v16 = TabViewCoordinator_Phone.swipeActionsConfiguration(for:edge:tabCache:)(v14, a6, v11);

  swift_bridgeObjectRelease();

  return v16;
}

void TabViewCoordinator_Phone.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();
  outlined consume of TabSidebarConfiguration?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 8), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 16), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 24), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 32), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 40), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 48), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 56), *(_WORD *)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 64));
  uint64_t v1 = MEMORY[0x1E4FBB718];
  outlined destroy of Binding<AnyHashable>(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  swift_unknownObjectWeakDestroy();
  outlined destroy of Binding<AnyHashable>(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t)type metadata accessor for Binding<SearchFieldState>, v1, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabDropTarget);
}

uint64_t ObjC metadata update function for TabViewCoordinator_Phone()
{
  return type metadata accessor for TabViewCoordinator_Phone();
}

uint64_t type metadata accessor for TabViewCoordinator_Phone()
{
  uint64_t result = type metadata singleton initialization cache for TabViewCoordinator_Phone;
  if (!type metadata singleton initialization cache for TabViewCoordinator_Phone) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TabViewCoordinator_Phone()
{
  type metadata accessor for Binding<TabViewCustomization>?(319, &lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<TabViewCustomization>?(319, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void outlined consume of TabSidebarConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a3 != 1)
  {
    outlined consume of Binding<NavigationSplitViewColumn>?(a2, a3);
    outlined consume of TabSidebarAccessoryViewConfiguration?(a5);
    outlined consume of PlatformItemCollection?(a8, a9);
  }
}

uint64_t outlined consume of TabSidebarAccessoryViewConfiguration?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of Binding<AnyHashable>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UITab and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type _UITab and conformance NSObject;
  if (!lazy protocol witness table cache variable for type _UITab and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for _UITab);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UITab and conformance NSObject);
  }
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = (void *)v4[1];
  swift_retain();
  swift_retain();
  unint64_t v10 = specialized OrderedSet._find(_:)(a2, a3, v8, v9);
  char v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) == 0)
  {
    if (!a1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v10, v14);
      swift_bridgeObjectRelease();
      id v16 = (id)specialized ContiguousArray.remove(at:)(v10);
      goto LABEL_12;
    }
    uint64_t v15 = v4[2];
    id v16 = a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    v4[2] = v15;
    if ((result & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
    }
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(void *)(v15 + 16))
    {
      objc_storeStrong((id *)(v15 + 8 * v10 + 32), a1);
LABEL_10:
      specialized ContiguousArray._endMutation()();

LABEL_12:
      goto LABEL_13;
    }
    __break(1u);
    return result;
  }
  if (a1)
  {
    id v18 = a1;
    specialized OrderedSet._appendNew(_:in:)(a2, a3);
    id v16 = v18;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_10;
  }
LABEL_13:

  return swift_bridgeObjectRelease();
}

uint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v8 = v2[1];
  uint64_t v6 = v2 + 1;
  uint64_t v7 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
    uint64_t v7 = *v6;
  }
  unint64_t v11 = *(void *)(v7 + 16);
  unint64_t v10 = *(void *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
    uint64_t v7 = *v6;
  }
  *(void *)(v7 + 16) = v11 + 1;
  unint64_t v12 = v7 + 16 * v11;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  v3[1] = v7;
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v14 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (MEMORY[0x18C10AD40](*(void *)(v14 + 16) & 0x3FLL) >= v13)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v15 = *v3;
      if (!result)
      {
        if (!v15)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v15 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v3 = v15;
      }
      if (v15) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v13 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()();
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  uint64_t v1 = *v0;
  Swift::Int v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v6 = MEMORY[0x18C10AD70](v4);
  if (v3 <= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v2, v7, 0, v3);
LABEL_11:
  uint64_t result = swift_release();
  *unint64_t v0 = v5;
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x18C10AD70](*(void *)(a1 + 16));
  uint64_t v9 = 0;
  if (a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = MEMORY[0x18C10AD80]();
    specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (void *)(v9 + 16));
  }
  return v9;
}

Swift::Int specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(Swift::Int result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      uint64_t v5 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedSet._reserveCapacity(_:persistent:)(uint64_t result, char a2)
{
  if (result < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v3 = v2;
  int64_t v5 = result;
  Swift::Int v8 = v2[1];
  uint64_t v6 = v2 + 1;
  Swift::Int v7 = v8;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if (isUniquelyReferenced_nonNull_native && (unint64_t)v5 <= *(void *)(v7 + 24) >> 1)
  {
    uint64_t v10 = *v3;
    if (*v3) {
      goto LABEL_5;
    }
  }
  else
  {
    if (*(void *)(v7 + 16) <= v5) {
      int64_t v15 = v5;
    }
    else {
      int64_t v15 = *(void *)(v7 + 16);
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 0);
    Swift::Int v7 = *v6;
    uint64_t v10 = *v3;
    if (*v3)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v11 = *(void *)(v10 + 16) & 0x3FLL;
      uint64_t v12 = MEMORY[0x18C10AD70](v5);
      uint64_t v13 = v12;
      if (a2)
      {
        uint64_t v14 = v12;
        if (v11 >= v12) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v14 = *(void *)(v10 + 24) & 0x3FLL;
        if (v11 >= v13) {
          goto LABEL_20;
        }
      }
LABEL_16:
      if (v14 <= v13) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v14;
      }
      goto LABEL_30;
    }
  }
  uint64_t v16 = MEMORY[0x18C10AD70](v5);
  uint64_t v13 = v16;
  uint64_t v11 = 0;
  if (a2) {
    uint64_t v14 = v16;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v16 > 0) {
    goto LABEL_16;
  }
LABEL_20:
  if (v14 <= v13) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = v14;
  }
  uint64_t result = MEMORY[0x18C10AD70](*(void *)(v7 + 16));
  if (result <= v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = result;
  }
  if (v19 < v11)
  {
    if (v14 <= v19) {
      uint64_t v17 = v19;
    }
    else {
      uint64_t v17 = v14;
    }
LABEL_30:
    uint64_t v20 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v7, v17, 0, v14);
    uint64_t result = swift_release();
    *uint64_t v3 = v20;
    return result;
  }
  if (!v10 || (uint64_t result = swift_isUniquelyReferenced_native(), result))
  {
    uint64_t v21 = *v3;
    if (*v3) {
      goto LABEL_35;
    }
LABEL_39:
    if (!v14) {
      return result;
    }
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = *v3;
  if (!*v3)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  uint64_t v21 = _HashTable.copy()();
  uint64_t result = swift_release();
  *uint64_t v3 = v21;
  if (!v21) {
    goto LABEL_39;
  }
LABEL_35:
  uint64_t result = swift_beginAccess();
  if ((*(void *)(v21 + 24) & 0x3FLL) != v14) {
    *(void *)(v21 + 24) = *(void *)(v21 + 24) & 0xFFFFFFFFFFFFFFC0 | v14 & 0x3F;
  }
  return result;
}

unint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[1] + 16);
  uint64_t v5 = *v2;
  if (!*v2)
  {
    if (v4) {
      return specialized ContiguousArray.remove(at:)(a1);
    }
    goto LABEL_15;
  }
  swift_beginAccess();
  if ((*(void *)(v5 + 16) & 0x3FLL) == (*(void *)(v5 + 24) & 0x3FLL))
  {
    if (!v4) {
      goto LABEL_15;
    }
  }
  else if (v4 <= static _HashTable.minimumCapacity(forScale:)())
  {
LABEL_15:
    uint64_t v10 = specialized ContiguousArray.remove(at:)(a1);
    specialized OrderedSet._regenerateHashTable()();
    return v10;
  }
  unint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v8 = *v2;
  if (!result)
  {
    if (!v8) {
      goto LABEL_20;
    }
    uint64_t v8 = _HashTable.copy()();
    unint64_t result = swift_release();
    *uint64_t v2 = v8;
  }
  if (v8)
  {
    swift_retain();
    unint64_t result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, (void *)(v8 + 16), v8 + 32, (uint64_t)v2);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v9 = v2[1];
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v9, (void *)(v8 + 16));
      swift_release();
      swift_release();
      return specialized ContiguousArray.remove(at:)(a1);
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      uint64_t v8 = v3 + 8 * a1;
      uint64_t v9 = *(void *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(void *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
  }
  uint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[16 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((void *)v3 + 2) = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v15 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  _HashTable.BucketIterator.advance()();
  if (v15)
  {
    uint64_t v7 = a1;
    uint64_t v8 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
    while (1)
    {
      unint64_t result = _HashTable.BucketIterator.currentValue.getter();
      if (v10)
      {
LABEL_20:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (result >= *(void *)(*(void *)(a4 + 8) + 16)) {
        goto LABEL_18;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v11 = Hasher._finalize()();
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v12 = 1 << *a2;
      if (__OFSUB__(v12, 1)) {
        goto LABEL_19;
      }
      uint64_t v13 = (v12 - 1) & v11;
      if (v6 >= v8) {
        break;
      }
      if (v13 < v8) {
        goto LABEL_12;
      }
LABEL_13:
      _HashTable.BucketIterator.currentValue.getter();
      _HashTable.UnsafeHandle.subscript.setter();
      uint64_t v6 = v7;
LABEL_3:
      _HashTable.BucketIterator.advance()();
      uint64_t v7 = a1;
    }
    if (v13 < v8) {
      goto LABEL_3;
    }
LABEL_12:
    if (v6 < v13) {
      goto LABEL_3;
    }
    goto LABEL_13;
  }

  return _HashTable.UnsafeHandle.subscript.setter();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v5 >= 1)
  {
    unint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = v8 - v5;
    if ((uint64_t)v8 < v5) {
      ++v9;
    }
    if (a1 < v9 >> 1)
    {
      if (MEMORY[0x18C10AD40](*a4 & 0x3FLL) / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v8 < a1)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        if (a1)
        {
          swift_retain();
          uint64_t v10 = 0;
          while (1)
          {
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            Hasher._finalize()();
            if (__OFSUB__(1 << *a4, 1)) {
              break;
            }
            if (_HashTable.UnsafeHandle._startIterator(bucket:)())
            {
              while (1)
              {
                uint64_t v11 = _HashTable.BucketIterator.currentValue.getter();
                if ((v12 & 1) == 0 && v11 == v10) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
              }
            }
            if (__OFADD__(v10, v5)) {
              goto LABEL_58;
            }
            ++v10;
            _HashTable.BucketIterator.currentValue.setter();
            swift_bridgeObjectRelease();
            if (v10 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        goto LABEL_20;
      }
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v18 = _HashTable.BucketIterator.currentValue.getter();
      if ((v19 & 1) != 0 || v18 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        uint64_t v13 = a4[1];
        if (__OFSUB__(v13 >> 6, v5))
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v14 = 1 << *a4;
        BOOL v15 = __OFSUB__(v14, 1);
        uint64_t v16 = v14 - 1;
        if (v15)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        uint64_t v17 = (v16 & (((v13 >> 6) - v5) >> 63)) + (v13 >> 6) - v5;
        if (v17 < v16) {
          uint64_t v16 = 0;
        }
        a4[1] = a4[1] & 0x3FLL | ((v17 - v16) << 6);
        return;
      }
      if (!__OFADD__(v18, v5))
      {
        _HashTable.BucketIterator.currentValue.setter();
        goto LABEL_32;
      }
      __break(1u);
LABEL_38:
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v20 = _HashTable.BucketIterator.currentValue.getter();
      if ((v21 & 1) == 0 && v20 >= v4)
      {
        if (__OFSUB__(v20, v5))
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
      return;
    }
    uint64_t v4 = a2;
    if (__OFSUB__(v8, a2))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if ((uint64_t)(v8 - a2) >= MEMORY[0x18C10AD40](*a4 & 0x3FLL) / 3) {
      goto LABEL_38;
    }
    if ((uint64_t)v8 < v4)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v4 < 0)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v8 != v4)
    {
      if (v8 <= v4)
      {
LABEL_70:
        __break(1u);
        return;
      }
      swift_retain();
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._finalize()();
        if (__OFSUB__(1 << *a4, 1)) {
          goto LABEL_60;
        }
        if (_HashTable.UnsafeHandle._startIterator(bucket:)())
        {
          while (1)
          {
            uint64_t v22 = _HashTable.BucketIterator.currentValue.getter();
            if ((v23 & 1) == 0 && v22 == v4) {
              break;
            }
            _HashTable.BucketIterator.advance()();
          }
        }
        if (__OFSUB__(v4, v5)) {
          goto LABEL_61;
        }
        ++v4;
        _HashTable.BucketIterator.currentValue.setter();
        swift_bridgeObjectRelease();
        if (v4 == v8)
        {
          swift_release();
          return;
        }
      }
    }
  }
}

id specialized TabViewCoordinator_Phone.init(selected:sidebarConfiguration:customization:tabs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v38 = a4[1];
  uint64_t v39 = *a4;
  long long v37 = *((_OWORD *)a4 + 1);
  uint64_t v36 = a4[4];
  long long v35 = *(_OWORD *)(a4 + 5);
  uint64_t v34 = a4[7];
  char v40 = *((unsigned char *)a4 + 66);
  __int16 v33 = *((_WORD *)a4 + 32);
  *(void *)&v7[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache] = 0;
  *(void *)&v7[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache] = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)&v7[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_viewControllers] = MEMORY[0x1E4FBC860];
  uint64_t v13 = OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_groupHostCache;
  uint64_t v14 = v7;
  *(void *)&v7[v13] = specialized Dictionary.init(dictionaryLiteral:)(v12);
  *(void *)&v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabIdentifiers] = v12;
  swift_unknownObjectWeakInit();
  BOOL v15 = &v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration];
  *(void *)BOOL v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 1;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 51) = 0u;
  v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_isUIKitSidebarVisible] = 0;
  uint64_t v16 = &v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization];
  uint64_t v32 = (uint64_t)&v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization];
  type metadata accessor for Binding<TabViewCustomization>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_nextPopoverSeed] = 1;
  uint64_t v18 = &v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState];
  type metadata accessor for Binding<SearchFieldState>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = &v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex];
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  *(void *)&v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabDropTarget] = 0;
  char v21 = &v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selected];
  *(void *)char v21 = a1;
  *((void *)v21 + 1) = a2;
  *((void *)v21 + 2) = a3;
  uint64_t v22 = *(void *)v15;
  uint64_t v23 = *((void *)v15 + 1);
  uint64_t v24 = *((void *)v15 + 2);
  uint64_t v25 = *((void *)v15 + 4);
  uint64_t v30 = *((void *)v15 + 5);
  uint64_t v31 = *((void *)v15 + 3);
  uint64_t v26 = *((void *)v15 + 6);
  uint64_t v27 = *((void *)v15 + 7);
  LOWORD(v13) = *((_WORD *)v15 + 32);
  *(void *)BOOL v15 = v39;
  *((void *)v15 + 1) = v38;
  *((_OWORD *)v15 + 1) = v37;
  *((void *)v15 + 4) = v36;
  *(_OWORD *)(v15 + 40) = v35;
  *((void *)v15 + 7) = v34;
  *((_WORD *)v15 + 32) = v33;
  v15[66] = v40;
  swift_retain();
  swift_retain();
  outlined consume of TabSidebarConfiguration?(v22, v23, v24, v31, v25, v30, v26, v27, v13);
  swift_beginAccess();
  outlined assign with copy of Binding<TabViewCustomization>?(a5, v32);
  swift_endAccess();
  *(void *)&v14[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabs] = a6;

  v44.receiver = v14;
  v44.super_class = ObjectType;
  id v28 = objc_msgSendSuper2(&v44, sel_init);
  outlined destroy of Binding<AnyHashable>(a5, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  return v28;
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0) {
    specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E4FBC860]);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = (void **)(a1 + 48); ; i += 3)
  {
    uint64_t v6 = (uint64_t)*(i - 2);
    uint64_t v5 = (uint64_t)*(i - 1);
    uint64_t v7 = *i;
    swift_bridgeObjectRetain();
    id v8 = v7;
    uint64_t result = specialized OrderedSet._find(_:)(v6, v5, 0, v2);
    if ((v10 & 1) == 0) {
      break;
    }
    specialized OrderedSet._appendNew(_:in:)(v6, v5);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized TabViewCoordinator_Phone.didUseChild(_:childID:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_groupHostCache);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (!*(void *)(*v9 + 16)) {
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  uint64_t v13 = (uint64_t *)(*(void *)(v10 + 56) + 32 * v11);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = (void *)v13[2];
  uint64_t v17 = v13[3];
  uint64_t v27 = v15;
  uint64_t v28 = v17;
  swift_endAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t result = specialized OrderedSet._find(_:)(a1, a2, v15, v16);
  if ((v19 & 1) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(v17 + 16))
    {
      id v20 = *(id *)(v17 + 8 * result + 32);
      swift_bridgeObjectRelease();
      int64_t v21 = specialized OrderedSet._find(_:)(a1, a2, v15, v16);
      if ((v23 & 1) == 0)
      {
        unint64_t v24 = v21;
        specialized OrderedSet._removeExistingMember(at:in:)(v21, v22);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      specialized OrderedDictionary.subscript.setter(v20, a1, a2);
      uint64_t v15 = v27;
      uint64_t v17 = v28;
      goto LABEL_12;
    }
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *v9;
  *uint64_t v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, v15, (uint64_t)v16, v17, a3, a4, isUniquelyReferenced_nonNull_native);
  *uint64_t v9 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  return swift_release();
}

void specialized TabViewCoordinator_Phone._uip_tabBarController(_:dropSessionDidUpdate:withDestinationTab:)(void *a1)
{
  uint64_t v2 = a1;
  if (a1)
  {
    self;
    uint64_t v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      id v23 = (id)v3;
      id v4 = v2;
      id v5 = objc_msgSend(v23, sel__identifier);
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v2 = v7;

      goto LABEL_7;
    }
    uint64_t v6 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v23 = 0;
LABEL_7:
  uint64_t v8 = OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabDropTarget;
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabDropTarget);
  if (v9)
  {
    id v10 = objc_msgSend(v9, sel__identifier);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v2)
    {
      if (v13)
      {
        if (v6 != v11 || v2 != v13)
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v16 = v23;
          if (v15) {
            goto LABEL_27;
          }
          goto LABEL_20;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_26:
        uint64_t v16 = v23;
        goto LABEL_27;
      }
    }
    else if (!v13)
    {
      goto LABEL_26;
    }
  }
  else if (!v2)
  {
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v23;
LABEL_20:
  uint64_t v17 = *(void **)(v1 + v8);
  if (v17)
  {
    uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache);
    swift_bridgeObjectRetain();
    id v19 = v17;
    TabViewCoordinator_Phone.updateTargeting(_:for:tabCache:)(0, v19, v18);

    swift_bridgeObjectRelease();
    uint64_t v16 = v23;
  }
  if (v16)
  {
    uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache);
    swift_bridgeObjectRetain();
    id v21 = v23;
    TabViewCoordinator_Phone.updateTargeting(_:for:tabCache:)(1, v21, v20);

    swift_bridgeObjectRelease();
    uint64_t v16 = v23;
  }
  uint64_t v22 = *(void **)(v1 + v8);
  *(void *)(v1 + v8) = v16;
  uint64_t v16 = v22;
LABEL_27:
}

uint64_t specialized TabViewCoordinator_Phone._tabElementGroup(_:didSelect:)(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  specialized TabViewCoordinator_Phone.updatedSelection(didSelect:element:selectionCache:)(a1, v4);
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selected;
    uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selected);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = v11;
    _OWORD v14[3] = v12;
    v14[4] = v13;
    v14[5] = v6;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

id specialized TabViewCoordinator_Phone._tabBarController(_:sidebarVisibilityDidChange:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Binding<TabViewCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v19 - v5;
  static Log.tabView.getter();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = &selRef_showsMenuAsPrimaryAction;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Binding<AnyHashable>((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  }
  else
  {
    id v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      v19[2] = objc_msgSend(v10, sel__isVisible);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1872C6000, v11, v12, "tabBarController: sidebarVisibilityDidChange:\nisVisible:%{BOOL}d", v13, 8u);
      uint64_t v14 = v13;
      uint64_t v9 = &selRef_showsMenuAsPrimaryAction;
      MEMORY[0x18C119C60](v14, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  id result = [a1 v9[132]];
  unint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 16);
  if (v16 >= 2)
  {
    if (result) {
      char v17 = 1;
    }
    else {
      char v17 = 2;
    }
    uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 8);
    char v20 = v17;
    outlined copy of Binding<NavigationSplitViewColumn>?(v18, v16);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    return (id)swift_release_n();
  }
  return result;
}

void type metadata accessor for Binding<TabViewCustomization>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t partial apply for closure #1 in TabViewCoordinator_Phone._tabElementGroup(_:didSelect:)()
{
  return closure #2 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)();
}

uint64_t outlined init with copy of Binding<TabViewCustomization>?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Binding<TabViewCustomization>?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)()
{
  return closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)();
}

void type metadata accessor for UIHostingController<TabItem.RootView>()
{
  if (!lazy cache variable for type metadata for UIHostingController<TabItem.RootView>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>);
    }
  }
}

uint64_t type metadata accessor for SystemTabView.BodyContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SystemTabView.BodyContent()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for SystemTabView.BodyContent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  int v9 = v6 & 0x100000;
  if (v7 <= 7 && v9 == 0 && (v8 & (v7 + 144)) + ((v7 + 16) & ~v7) + *(void *)(v5 + 64) <= 0x18)
  {
    uint64_t v42 = *(void *)(a3 + 16);
    uint64_t __n = ((v7 + 16) & ~v7) + *(void *)(v5 + 64);
    uint64_t v13 = *(void *)a2;
    uint64_t v14 = *(void *)(a2 + 8);
    char v15 = *(unsigned char *)(a2 + 17);
    uint64_t v16 = *(unsigned __int8 *)(a2 + 16);
    int v41 = *(_DWORD *)(v5 + 84);
    outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v14, v16, v15);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(unsigned char *)(a1 + 16) = v16;
    *(unsigned char *)(a1 + 17) = v15;
    char v17 = (void *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = (void *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = v18[3];
    _OWORD v17[3] = v19;
    v17[4] = v18[4];
    (**(void (***)(void *, void *))(v19 - 8))(v17, v18);
    v17[5] = v18[5];
    unint64_t v20 = ((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v20 = *(unsigned char *)v21;
    *(void *)(v20 + 8) = *(void *)(v21 + 8);
    uint64_t v22 = (void *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    id v23 = (void *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = v23[3];
    v22[3] = v24;
    void v22[4] = v23[4];
    uint64_t v25 = **(void (***)(void *, void *, uint64_t))(v24 - 8);
    swift_retain();
    swift_retain();
    v25(v22, v23, v24);
    uint64_t v26 = (void *)v23[5];
    v22[5] = v26;
    v22[6] = v23[6];
    uint64_t v27 = (void *)(v8 & ((unint64_t)v22 + 63));
    uint64_t v28 = (void *)(v8 & ((unint64_t)v23 + 63));
    double v29 = (uint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    id v30 = v26;
    swift_bridgeObjectRetain();
    if (v41 < 0)
    {
      uint64_t v32 = v42;
      int v34 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v29 + v7 + 8) & ~v7);
      uint64_t v33 = ~v7;
      if (v34)
      {
LABEL_14:
        memcpy(v27, v28, __n);
        return a1;
      }
    }
    else
    {
      uint64_t v31 = *v29;
      if ((unint64_t)*v29 >= 0xFFFFFFFF) {
        LODWORD(v31) = -1;
      }
      uint64_t v32 = v42;
      uint64_t v33 = ~v7;
      if (v31 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v27 = *v28;
    long long v35 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v35 = *v29;
    uint64_t v36 = ((unint64_t)v35 + v7 + 8) & v33;
    uint64_t v37 = ((unint64_t)v29 + v7 + 8) & v33;
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v38(v36, v37, v32);
    return a1;
  }
  uint64_t v12 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = v12 + (v8 & (v7 + 16));
  swift_retain();
  return a1;
}

uint64_t outlined copy of Environment<Binding<Visibility>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for SystemTabView.BodyContent(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  unint64_t v4 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);
  swift_release();
  swift_release();
  unint64_t v5 = (((v4 + 55) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v5);

  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v5 + (v9 | 7) + 56) & ~(v9 | 7);
  uint64_t v11 = ~v9;
  uint64_t v12 = (uint64_t *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v9 + 8) & v11);
    uint64_t v8 = v16;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v13 = *v12;
  if ((unint64_t)*v12 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  uint64_t result = (v13 + 1);
  if (v13 == -1)
  {
LABEL_7:
    uint64_t v17 = v8;
    swift_release();
    swift_release();
    char v15 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v15(((unint64_t)v12 + v9 + 8) & v11, v6);
  }
  return result;
}

uint64_t initializeWithCopy for SystemTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v7, v9, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  uint64_t v10 = (void *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[3];
  v10[3] = v12;
  v10[4] = v11[4];
  (**(void (***)(void *, void *))(v12 - 8))(v10, v11);
  v10[5] = v11[5];
  unint64_t v13 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  char v15 = (void *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[3];
  _OWORD v15[3] = v17;
  v15[4] = v16[4];
  uint64_t v18 = **(void (***)(void *, void *, uint64_t))(v17 - 8);
  swift_retain();
  swift_retain();
  v18(v15, v16, v17);
  uint64_t v19 = (void *)v16[5];
  v15[5] = v19;
  v15[6] = v16[6];
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int *)(v21 + 84);
  uint64_t v23 = *(_DWORD *)(v21 + 80);
  unint64_t v24 = *(_DWORD *)(v21 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (void *)(((unint64_t)v15 + v23 + 56) & v24);
  uint64_t v26 = (void *)(((unint64_t)v16 + v23 + 56) & v24);
  uint64_t v27 = ~v23;
  uint64_t v35 = *(void *)(v21 + 64);
  uint64_t v28 = (uint64_t *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v29 = v19;
  swift_bridgeObjectRetain();
  if ((v22 & 0x80000000) == 0)
  {
    uint64_t v30 = *v28;
    if ((unint64_t)*v28 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    if (v30 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v25 = *v26;
    uint64_t v31 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v31 = *v28;
    uint64_t v32 = ((unint64_t)v31 + v23 + 8) & v27;
    uint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 16);
    swift_retain();
    swift_retain();
    v33(v32, ((unint64_t)v28 + v23 + 8) & v27, v20);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(((unint64_t)v28 + v23 + 8) & v27, v22, v20))goto LABEL_7; {
LABEL_5:
  }
  memcpy(v25, v26, ((v23 + 16) & ~v23) + v35);
  return a1;
}

uint64_t assignWithCopy for SystemTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  outlined consume of Environment<Binding<Visibility>?>.Content(v10, v11, v13, v12);
  unint64_t v14 = (uint64_t *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  char v15 = (uint64_t *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v14, v15);
  v14[5] = v15[5];
  swift_retain();
  swift_release();
  unint64_t v16 = ((unint64_t)v14 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_retain();
  swift_release();
  uint64_t v18 = (uint64_t *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (uint64_t *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v18, v19);
  uint64_t v20 = (void *)v19[5];
  uint64_t v21 = (void *)v18[5];
  v18[5] = (uint64_t)v20;
  id v22 = v20;

  v18[6] = v19[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int *)(v24 + 84);
  uint64_t v26 = *(_DWORD *)(v24 + 80);
  unint64_t v27 = *(_DWORD *)(v24 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (void *)(((unint64_t)v18 + v26 + 56) & v27);
  id v29 = (void *)(((unint64_t)v19 + v26 + 56) & v27);
  uint64_t v30 = ~v26;
  size_t v31 = ((v26 + 16) & ~v26) + *(void *)(v24 + 64);
  uint64_t v32 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v39 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v48 = ((v26 + 16) & ~v26) + *(void *)(v24 + 64);
    int v40 = v39(((unint64_t)v32 + v26 + 8) & ~v26, v25, v23);
    int v41 = v39;
    int v47 = v40;
    uint64_t v33 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = ~v26;
    int v35 = v41(((unint64_t)v33 + v26 + 8) & ~v26, v25, v23);
    size_t v31 = v48;
    if (!v47)
    {
LABEL_5:
      if (!v35)
      {
        *uint64_t v28 = *v29;
        swift_retain();
        swift_release();
        *uint64_t v32 = *v33;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 24))(((unint64_t)v32 + v26 + 8) & v30, ((unint64_t)v33 + v26 + 8) & v30, v23);
        return a1;
      }
      size_t v36 = v31;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v24 + 8))(((unint64_t)v32 + v26 + 8) & v30, v23);
      uint64_t v37 = v28;
      uint64_t v38 = v29;
      size_t v31 = v36;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v33 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = *v33;
    if (*v33 >= 0xFFFFFFFFuLL) {
      LODWORD(v34) = -1;
    }
    int v35 = v34 + 1;
    if (*v32 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v35)
  {
    *uint64_t v28 = *v29;
    *uint64_t v32 = *v33;
    uint64_t v42 = v30;
    uint64_t v43 = ((unint64_t)v32 + v26 + 8) & v30;
    uint64_t v44 = ((unint64_t)v33 + v26 + 8) & v42;
    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
    swift_retain();
    swift_retain();
    v45(v43, v44, v23);
    return a1;
  }
  uint64_t v37 = v28;
  uint64_t v38 = v29;
LABEL_10:
  memcpy(v37, v38, v31);
  return a1;
}

uint64_t initializeWithTake for SystemTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  unint64_t v4 = (_OWORD *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (long long *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = *v5;
  long long v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  _OWORD *v4 = v6;
  char v8 = (_OWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)(((unint64_t)v5 + 55) & 0xFFFFFFFFFFFFFFF8);
  *char v8 = *v9;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  long long v13 = *(_OWORD *)(v11 + 16);
  long long v14 = *(_OWORD *)(v11 + 32);
  *(void *)(v10 + 48) = *(void *)(v11 + 48);
  *(_OWORD *)(v10 + 16) = v13;
  *(_OWORD *)(v10 + 32) = v14;
  *(_OWORD *)unint64_t v10 = v12;
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  unint64_t v18 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (char *)((v17 + 56 + v10) & v18);
  uint64_t v20 = (void *)((v17 + 56 + v11) & v18);
  uint64_t v21 = ~v17;
  uint64_t v22 = *(void *)(v16 + 64);
  uint64_t v23 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v16 + 84) & 0x80000000) == 0)
  {
    uint64_t v24 = *v23;
    if ((unint64_t)*v23 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    if (v24 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v19 = *v20;
    unint64_t v25 = (unint64_t)(v19 + 15);
    *(void *)(v25 & 0xFFFFFFFFFFFFFFF8) = *v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((v17 + 8 + (v25 & 0xFFFFFFFFFFFFFFF8)) & v21, ((unint64_t)v23 + v17 + 8) & v21, v15);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v16 + 48))(((unint64_t)v23 + v17 + 8) & v21)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v19, v20, ((v17 + 16) & ~v17) + v22);
  return a1;
}

uint64_t assignWithTake for SystemTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v7;
  outlined consume of Environment<Binding<Visibility>?>.Content(v8, v9, v11, v10);
  unint64_t v12 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v12);
  long long v14 = *(_OWORD *)v13;
  long long v15 = *(_OWORD *)(v13 + 16);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(_OWORD *)unint64_t v12 = v14;
  *(_OWORD *)(v12 + 16) = v15;
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  swift_release();
  unint64_t v16 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_release();
  unint64_t v18 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v18);
  long long v20 = *(_OWORD *)v19;
  long long v21 = *(_OWORD *)(v19 + 16);
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  *(_OWORD *)unint64_t v18 = v20;
  *(_OWORD *)(v18 + 16) = v21;
  uint64_t v22 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = *(void *)(v19 + 40);

  *(void *)(v18 + 48) = *(void *)(v19 + 48);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int *)(v24 + 84);
  uint64_t v26 = *(_DWORD *)(v24 + 80);
  unint64_t v27 = *(_DWORD *)(v24 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (void *)((v26 + 56 + v18) & v27);
  id v29 = (void *)((v26 + 56 + v19) & v27);
  uint64_t v30 = ~v26;
  size_t v31 = ((v26 + 16) & ~v26) + *(void *)(v24 + 64);
  uint64_t v32 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v39 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v44 = ((v26 + 16) & ~v26) + *(void *)(*(void *)(v23 - 8) + 64);
    int v40 = v39(((unint64_t)v32 + v26 + 8) & ~v26, v25, v23);
    int v41 = v39;
    int v43 = v40;
    uint64_t v33 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = ~v26;
    int v35 = v41(((unint64_t)v33 + v26 + 8) & ~v26, v25, v23);
    size_t v31 = v44;
    if (!v43)
    {
LABEL_5:
      if (!v35)
      {
        *uint64_t v28 = *v29;
        swift_release();
        *uint64_t v32 = *v33;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 40))(((unint64_t)v32 + v26 + 8) & v30, ((unint64_t)v33 + v26 + 8) & v30, v23);
        return a1;
      }
      size_t v36 = v31;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v24 + 8))(((unint64_t)v32 + v26 + 8) & v30, v23);
      uint64_t v37 = v28;
      uint64_t v38 = v29;
      size_t v31 = v36;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v33 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = *v33;
    if (*v33 >= 0xFFFFFFFFuLL) {
      LODWORD(v34) = -1;
    }
    int v35 = v34 + 1;
    if (*v32 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v35)
  {
    *uint64_t v28 = *v29;
    *uint64_t v32 = *v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)v32 + v26 + 8) & v30, ((unint64_t)v33 + v26 + 8) & v30, v23);
    return a1;
  }
  uint64_t v37 = v28;
  uint64_t v38 = v29;
LABEL_10:
  memcpy(v37, v38, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemTabView.BodyContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84) <= 0x7FFFFFFFu) {
    int v4 = 0x7FFFFFFF;
  }
  else {
    int v4 = *(_DWORD *)(v3 + 84);
  }
  unsigned int v5 = v4 - 1;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v5;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = v6 | 7;
  if (a2 <= v8) {
    goto LABEL_26;
  }
  uint64_t v10 = ((v6 + 16) & ~v6) + v7 + ((v6 + 144) & ~v9);
  char v11 = 8 * (((v6 + 16) & ~(_BYTE)v6) + v7 + ((v6 - 112) & ~(_BYTE)v9));
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v8 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_26:
      unint64_t v16 = ((unint64_t)a1 + 25) & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v3 + 48))((v6
                                                                     + ((((((((v16 + 55) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                         + v9
                                                                         + 56) & ~v9)
                                                                       + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 8) & ~v6);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v17 = *(void *)(v16 + 24);
        if (v17 >= 0xFFFFFFFF) {
          LODWORD(v17) = -1;
        }
        return (v17 + 1);
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_26;
  }
LABEL_18:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for SystemTabView.BodyContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  unsigned int v7 = v6 - 1;
  if (v6 - 1 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v6 - 1;
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  size_t v11 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v12 = v11 + ((v9 + 144) & ~(v9 | 7));
  if (a3 > v8)
  {
    if (v12 <= 3)
    {
      unsigned int v16 = ((a3 - v8 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v12 < 4)
    {
      int v15 = (v14 >> (8 * (v11 + ((v9 - 112) & ~(v9 | 7))))) + 1;
      if (v12)
      {
        int v17 = v14 & ~(-1 << (8 * (v11 + ((v9 - 112) & ~(v9 | 7)))));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v12] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v15;
        return;
      case 3:
        goto LABEL_67;
      case 4:
        *(_DWORD *)&a1[v12] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_67:
      __break(1u);
      JUMPOUT(0x18780A9BCLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v18 = (unint64_t)(a1 + 25) & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v10 = v9 | 7;
          unint64_t v19 = (((((v18 + 55) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v10 + 56) & ~v10;
          if (v7 >= a2)
          {
            if (a2 + 1 <= v6)
            {
              if (a2 != -1)
              {
                uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v5 + 56);
                uint64_t v26 = a2 + 1;
                v25((v9 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9, v26);
              }
            }
            else
            {
              if (v11 <= 3) {
                int v23 = ~(-1 << (8 * v11));
              }
              else {
                int v23 = -1;
              }
              if (v11)
              {
                int v21 = v23 & (a2 - v6);
                if (v11 <= 3) {
                  int v24 = v11;
                }
                else {
                  int v24 = 4;
                }
                bzero((void *)((((((v18 + 55) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v10 + 56) & ~v10), v11);
                switch(v24)
                {
                  case 2:
LABEL_65:
                    *(_WORD *)unint64_t v19 = v21;
                    break;
                  case 3:
LABEL_64:
                    *(_WORD *)unint64_t v19 = v21;
                    *(unsigned char *)(v19 + 2) = BYTE2(v21);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unint64_t v19 = v21;
                    break;
                  default:
LABEL_52:
                    *(unsigned char *)unint64_t v19 = v21;
                    break;
                }
              }
            }
          }
          else
          {
            if (v11 <= 3) {
              int v20 = ~(-1 << (8 * v11));
            }
            else {
              int v20 = -1;
            }
            if (v11)
            {
              int v21 = v20 & (a2 - v6);
              if (v11 <= 3) {
                int v22 = v11;
              }
              else {
                int v22 = 4;
              }
              bzero((void *)((((((v18 + 55) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v10 + 56) & ~v10), v11);
              switch(v22)
              {
                case 2:
                  goto LABEL_65;
                case 3:
                  goto LABEL_64;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v18 + 40) = 0;
          *(_OWORD *)(v18 + 24) = 0u;
          *(_OWORD *)(v18 + 8) = 0u;
          *(void *)unint64_t v18 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)(v18 + 24) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in SystemTabView<A>.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18780AA48()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

uint64_t outlined assign with copy of Binding<TabViewCustomization>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TabViewCustomization>?(0, &lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>)@<X0>(uint64_t a1@<X8>)
{
  return thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>)(*(uint64_t (**)(void))(v1 + 32), a1);
}

void type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>()
{
  if (!lazy cache variable for type metadata for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>)
  {
    type metadata accessor for WritableKeyPath<Int?, Int?>();
    type metadata accessor for Int?(255, &lazy cache variable for type metadata for BindingOperations.NilCoalescing<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F3FEC8]);
    lazy protocol witness table accessor for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>((unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>, (void (*)(uint64_t))type metadata accessor for WritableKeyPath<Int?, Int?>);
    lazy protocol witness table accessor for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>();
    unint64_t v0 = type metadata accessor for ComposedProjection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>);
    }
  }
}

void type metadata accessor for WritableKeyPath<Int?, Int?>()
{
  if (!lazy cache variable for type metadata for WritableKeyPath<Int?, Int?>)
  {
    type metadata accessor for Int?(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for WritableKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<Int?, Int?>);
    }
  }
}

void type metadata accessor for Int?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>;
  if (!lazy protocol witness table cache variable for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>)
  {
    type metadata accessor for Int?(255, &lazy cache variable for type metadata for BindingOperations.NilCoalescing<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F3FEC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>);
  }
  return result;
}

uint64_t sub_18780ADF0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in SystemTabView.BodyContent.body.getter()
{
  return _VariadicView_Children.tagIndex<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type AdaptableTabView and conformance AdaptableTabView()
{
  unint64_t result = lazy protocol witness table cache variable for type AdaptableTabView and conformance AdaptableTabView;
  if (!lazy protocol witness table cache variable for type AdaptableTabView and conformance AdaptableTabView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptableTabView and conformance AdaptableTabView);
  }
  return result;
}

id CellHostingView.__allocating_init(rootView:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  id v5 = specialized CellHostingView.init(rootView:)();
  (*(void (**)(uint64_t))(*(void *)(*((void *)v2 + 202) - 8) + 8))(a1);
  return v5;
}

void @objc CellHostingView.init(coder:)()
{
}

uint64_t sub_18780AF90(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

uint64_t @objc CellHostingView._accessibilityIsSwiftUIHostingCellView.getter()
{
  return 1;
}

id specialized CellHostingView.init(rootView:)()
{
  id v0 = (id)specialized UIItemHostingView.init(rootView:)();
  _UIHostingView.isHiddenForReuse.setter(1);

  return v0;
}

void specialized CellHostingView.init(coder:)()
{
}

void *type metadata accessor for CellViewGraph()
{
  return &unk_1ED4796E8;
}

double UIImage.resolveNamedImage(in:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7UIColorCs5NeverOTg50121_s7SwiftUI13GraphicsImageVAAE012makePlatformD024fixedSymbolConfiguration16flattenMaskColor13colorResolverSo7UIImageCSgSb_v31AA0F8ItemListV0P0V0dlN0VSgtFSo7D9CSiXEfU0_0G2UI0lyZ0V0Y0V0j5ColorR0VAL17EnvironmentValuesVAL0iJ0VTf1cn_nTf4ngnd_n(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_19;
  }
  uint64_t v3 = result;
  double result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    double result = specialized ContiguousArray.reserveCapacity(_:)();
    if (a2 < v3 || v2 < 0) {
      goto LABEL_20;
    }
    while (a2 != v3)
    {
      swift_retain();
      swift_retain();
      if (ShapeStyle.fallbackColor(in:level:)())
      {
        dispatch thunk of AnyColorBox.resolve(in:)();
        id v5 = (void *)Color.Resolved.cgColor.getter();
        swift_release();
        swift_release();
        swift_release();
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v5);
      }
      else
      {
        swift_release();
        swift_release();
        if (v3)
        {
          if (v3 == 1) {
            id v6 = objc_msgSend(self, sel_secondaryLabelColor);
          }
          else {
            id v6 = objc_msgSend(self, sel_tertiaryLabelColor);
          }
        }
        else
        {
          id v6 = objc_msgSend(self, sel_labelColor);
        }
        id v7 = v6;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      double result = specialized ContiguousArray._endMutation()();
      if (a2 == ++v3) {
        return v8;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_18780B274()
{
  return swift_deallocObject();
}

uint64_t sub_18780B284()
{
  return swift_deallocObject();
}

Swift::Void __swiftcall EnvironmentValues.configureForPlatform(traitCollection:)(UITraitCollection_optional traitCollection)
{
  Class isa = traitCollection.value.super.isa;
  uint64_t v3 = *v1;
  uint64_t v4 = one-time initialization token for configuredForPlatform;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static EnvironmentValues.configuredForPlatform;
  if (!v3)
  {
    if (static EnvironmentValues.configuredForPlatform) {
      goto LABEL_12;
    }
LABEL_9:
    if (!isa) {
      return;
    }
    EnvironmentValues.plist.setter();
    goto LABEL_16;
  }
  swift_release();
  if (v5) {
    BOOL v6 = v3 == v5;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    goto LABEL_9;
  }
LABEL_12:
  if (!(*v1 | (unint64_t)isa))
  {
    swift_retain();
    EnvironmentValues.plist.setter();
    return;
  }
LABEL_16:

  EnvironmentValues._configureForPlatform(traitCollection:)(isa);
}

uint64_t View.allowsWindowActivationEvents(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

void EnvironmentValues.allowsWindowActivationEvents.getter()
{
}

void View.acceptsActivatingEvents(_:)()
{
}

void EnvironmentValues.acceptsActivatingEvents.getter()
{
}

void sub_18780B404()
{
}

void sub_18780B42C()
{
}

uint64_t initializeWithCopy for TouchEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TouchEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for TouchEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for TouchEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TouchEvent()
{
  return &type metadata for TouchEvent;
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance TouchEvent(double a1, double a2)
{
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*protocol witness for SpatialEventType.globalLocation.modify in conformance TouchEvent())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for SpatialEventType.location.setter in conformance TouchEvent(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*protocol witness for SpatialEventType.location.modify in conformance TouchEvent())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for SpatialEventType.radius.getter in conformance TouchEvent()
{
  return *(double *)(v0 + 56);
}

double protocol witness for PanEventType.translation.getter in conformance TouchEvent()
{
  return *(double *)(v0 + 24);
}

double protocol witness for PanEventType.globalTranslation.getter in conformance TouchEvent()
{
  return *(double *)(v0 + 40);
}

void protocol witness for TouchTypeProviding.touchType.getter in conformance TouchEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 104);
}

uint64_t protocol witness for ModifiersEventType.modifiers.getter in conformance TouchEvent()
{
  return *(void *)(v0 + 80);
}

uint64_t protocol witness for ModifiersEventType.modifiers.setter in conformance TouchEvent(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t (*protocol witness for ModifiersEventType.modifiers.modify in conformance TouchEvent())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for EventType.phase.getter in conformance TouchEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

double protocol witness for EventType.timestamp.getter in conformance TouchEvent@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance TouchEvent@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance TouchEvent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance TouchEvent())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for EventType.init(_:) in conformance TouchEvent@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 56) = v8;
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v10;
    double result = *(double *)&v11;
    *(_OWORD *)(a1 + 88) = v11;
    *(unsigned char *)(a1 + 104) = v12;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(unsigned char *)(a1 + 104) = 0;
  }
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance TouchEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();

  return MEMORY[0x1F40FFB78](a1, a2, v4);
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance TouchEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();

  return MEMORY[0x1F40FFB70](a1, a2, v4);
}

unint64_t type metadata accessor for EventType()
{
  unint64_t result = lazy cache variable for type metadata for EventType;
  if (!lazy cache variable for type metadata for EventType)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
  return result;
}

BOOL specialized static TouchEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(double *)a1 == *(double *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    float64x2_t v5 = *(float64x2_t *)(a1 + 24);
    float64x2_t v6 = *(float64x2_t *)(a1 + 56);
    float64x2_t v7 = *(float64x2_t *)(a1 + 40);
    v8.f64[0] = *(float64_t *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 80);
    float64_t v11 = *(double *)(a1 + 88);
    double v10 = *(double *)(a1 + 96);
    int v12 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v13 = *(void *)(a2 + 16);
    float64x2_t v14 = *(float64x2_t *)(a2 + 24);
    float64x2_t v15 = *(float64x2_t *)(a2 + 56);
    float64x2_t v16 = *(float64x2_t *)(a2 + 40);
    v17.f64[0] = *(float64_t *)(a2 + 72);
    double v18 = *(double *)(a2 + 96);
    if (v4)
    {
      if (v13)
      {
        BOOL result = 0;
        v8.f64[1] = v11;
        v17.f64[1] = *(float64_t *)(a2 + 88);
        if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v5, v14), (int32x4_t)vceqq_f64(v7, v16)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v6, v15), (int32x4_t)vceqq_f64(v8, v17)))), 7uLL))) & 1) == 0|| v10 != v18|| v4 != v13)
        {
          return result;
        }
LABEL_15:
        if (v9 == *(void *)(a2 + 80)) {
          return v12 == *(unsigned __int8 *)(a2 + 104);
        }
        return result;
      }
      swift_retain();
LABEL_12:
      swift_release();
      return 0;
    }
    if (v13) {
      goto LABEL_12;
    }
    BOOL result = 0;
    v8.f64[1] = v11;
    v17.f64[1] = *(float64_t *)(a2 + 88);
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)), (int32x4_t)vceqq_f64(v7, v16)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v6, v15), (int32x4_t)vceqq_f64(v8, v17)))), 7uLL))) & 1) != 0&& v10 == v18)
    {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t outlined copy of ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if ((a9 & 0xC00000) == 0x400000)
  {
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a6, a7);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ScrollViewBehavior(uint64_t a1)
{
  outlined consume of ScrollViewBehavior.Phase(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16));

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if ((a9 & 0xC00000) == 0x400000)
  {
    outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a6, a7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  int v13 = *(unsigned __int8 *)(a2 + 66);
  int v14 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v14 | (v13 << 16));
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 66) = v13;
  *(_WORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v22 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  int v23 = *(unsigned __int8 *)(a2 + 66);
  int v11 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11 | (v23 << 16));
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  int v20 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_WORD *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 66) = v23;
  outlined consume of ScrollViewBehavior.Phase(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 66);
  __int16 v5 = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  int v14 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_WORD *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 66) = v4;
  outlined consume of ScrollViewBehavior.Phase(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior()
{
  return &type metadata for ScrollViewBehavior;
}

double _ScrollLayout.init(_:)@<D0>(_OWORD *a1@<X8>)
{
  swift_beginAccess();
  swift_beginAccess();
  CGSize.inset(by:)();
  _ScrollLayout.init(contentOffset:size:visibleRect:)();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return result;
}

CGFloat ScrollViewBehavior.overflowContentOffset(_:node:)(uint64_t a1, double a2, double a3)
{
  double v7 = *(double *)(a1 + 336);
  double v8 = *(double *)(a1 + 344);
  swift_beginAccess();
  CGSize.inset(by:)();
  double v10 = v7 - v9;
  CGSize.inset(by:)();
  double v12 = v8 - v11;
  if (v10 < 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = v10;
  }
  if (v12 < 0.0) {
    double v14 = 0.0;
  }
  else {
    double v14 = v12;
  }
  CGPoint v15 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v13));
  double v16 = v15.x - a2;
  double v17 = v15.y - a3;
  unsigned int v18 = (*(unsigned __int8 *)(v3 + 66) << 16) & 0xFFC1FFFF;
  if (v18)
  {
    if (v13 > 0.0) {
      goto LABEL_9;
    }
LABEL_34:
    if (!*(unsigned char *)(a1 + 249)) {
      double v16 = 0.0;
    }
    if (v14 > 0.0) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  CGSize.inset(by:)();
  double v44 = v43;
  double v16 = specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:)(v16, v45);
  double v17 = specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:)(v17, v44);
  if (v13 <= 0.0) {
    goto LABEL_34;
  }
LABEL_9:
  if (v14 <= 0.0)
  {
LABEL_10:
    if (!*(unsigned char *)(a1 + 248)) {
      double v17 = 0.0;
    }
  }
LABEL_12:
  uint64_t v19 = *(char **)(v3 + 72);
  uint64_t v20 = *((void *)v19 + 2);
  if (!v20) {
    return v15.x - v16;
  }
  uint64_t v47 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_44:
  }
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
  unint64_t v21 = 0;
  uint64_t v22 = v19 + 32;
  while (1)
  {
    if (v20 == v21)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= *((void *)v19 + 2)) {
      goto LABEL_42;
    }
    uint64_t v23 = *(void *)v22;
    double v25 = *((double *)v22 + 1);
    double v24 = *((double *)v22 + 2);
    int v26 = *((_DWORD *)v22 + 6);
    swift_unownedRetainStrong();
    swift_beginAccess();
    int v27 = *(_DWORD *)(v23 + 148);
    swift_unownedRetain();
    swift_release();
    if (v26 != v27) {
      break;
    }
LABEL_22:
    swift_unownedRetainStrong();
    swift_release();
    swift_unownedRetainStrong();
    double v29 = *(double *)(v23 + 336);
    double v30 = *(double *)(v23 + 344);
    swift_beginAccess();
    CGSize.inset(by:)();
    double v32 = v29 - v31;
    CGSize.inset(by:)();
    double v34 = v33;
    swift_release();
    if (v32 < 0.0) {
      double v35 = 0.0;
    }
    else {
      double v35 = v32;
    }
    if (v30 - v34 < 0.0) {
      double v36 = 0.0;
    }
    else {
      double v36 = v30 - v34;
    }
    CGPoint v37 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v36, *(unint64_t *)&v35));
    swift_unownedRetainStrong();
    swift_beginAccess();
    double v38 = *(double *)(v23 + 64);
    double v39 = *(double *)(v23 + 72);
    swift_release();
    if (v38 != v37.x || v39 != v37.y)
    {
      swift_unownedRetainStrong();
      ScrollViewNode.bindingSafeOffset(_:)(v37.x, v37.y);
      CGPoint v48 = v37;
      double v49 = v41;
      double v50 = v42;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      ScrollViewNode.commitScrollTransaction(_:value:)(&v48, v41, v42);
      swift_release();
    }
    ++v21;
    double v16 = v16 - (v25 - v37.x);
    double v17 = v17 - (v24 - v37.y);
    swift_unownedRelease();
    v22 += 32;
    if (v20 == v21) {
      goto LABEL_39;
    }
  }
  if (!v18)
  {
    swift_unownedRetainStrong();
    swift_beginAccess();
    int v28 = *(_DWORD *)(v23 + 148);
    swift_release();
    swift_unownedRetainStrong();
    swift_beginAccess();
    double v25 = *(double *)(v23 + 64);
    double v24 = *(double *)(v23 + 72);
    swift_release();
    swift_unownedRetain();
    if (v21 >= *((void *)v19 + 2)) {
      goto LABEL_43;
    }
    *(void *)uint64_t v22 = v23;
    *((double *)v22 + 1) = v25;
    *((double *)v22 + 2) = v24;
    *((_DWORD *)v22 + 6) = v28;
    swift_unownedRelease();
    goto LABEL_22;
  }
  swift_unownedRelease();
LABEL_39:
  *(void *)(v47 + 72) = v19;
  return v15.x - v16;
}

uint64_t ScrollViewBehavior.dispatchPhase(_:node:)(uint64_t result, uint64_t a2)
{
  double v4 = *(double *)result;
  double v3 = *(double *)(result + 8);
  double v5 = *(double *)(result + 16);
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v8 = *(void *)(result + 32);
  uint64_t v7 = *(void *)(result + 40);
  double v9 = v2;
  switch(*(unsigned char *)(result + 48))
  {
    case 1:
      double v11 = *(double *)v2;
      double v12 = *((double *)v2 + 1);
      uint64_t v13 = *((void *)v2 + 3);
      uint64_t v68 = *((void *)v2 + 2);
      uint64_t v14 = *((void *)v2 + 4);
      double v15 = *((double *)v2 + 5);
      unsigned int v16 = *((unsigned __int16 *)v2 + 32) | (*((unsigned __int8 *)v2 + 66) << 16);
      if (!(*((unsigned __int8 *)v9 + 66) >> 6))
      {
        double v35 = v11;
        double v36 = v12;
        __int16 v37 = v16 & 1;
        int v38 = (v16 >> 8) & 1;
        int v39 = HIWORD(v16) & 1;
        if (v6 < 0) {
          double v40 = *(double *)result;
        }
        else {
          double v40 = *(double *)(result + 8);
        }
        if (v6 < 0) {
          double v41 = *(double *)(result + 8);
        }
        else {
          double v41 = *(double *)(result + 16);
        }
        double v42 = v35 - (v40 - *((double *)v9 + 4));
        double v43 = v36 - (v41 - v15);
        if (v6 < 0) {
          double v44 = 0.0;
        }
        else {
          double v44 = *(double *)(result + 32);
        }
        if (v6 < 0) {
          double v45 = 0.0;
        }
        else {
          double v45 = *(double *)(result + 40);
        }
        if (v6 < 0) {
          double v46 = *(double *)(result + 8);
        }
        else {
          double v46 = *(double *)(result + 16);
        }
        if (v6 < 0) {
          double v47 = *(double *)result;
        }
        else {
          double v47 = *(double *)(result + 8);
        }
        uint64_t v48 = v68;
        goto LABEL_57;
      }
      double v70 = *(double *)(result + 16);
      if (*((unsigned __int8 *)v9 + 66) >> 6 == 1 && v15 != 0.0)
      {
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v62 = v17;
        uint64_t v65 = *(void *)&v11;
        uint64_t v66 = *((void *)v9 + 7);
        uint64_t v63 = *(void *)&v12;
        uint64_t v64 = v14;
        uint64_t v18 = swift_allocObject();
        *(double *)(v18 + 16) = v15;
        *(void *)(v18 + 24) = v17;
        uint64_t v19 = v18;
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
        *(void *)(v20 + 24) = v19;
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
        *(void *)(v21 + 24) = v20;
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
        *(void *)(v22 + 24) = v21;
        *(unsigned char *)(v22 + 32) = 0;
        swift_retain_n();
        outlined copy of ScrollViewBehavior.Phase(v65, v63, v68, v13, v64, *(uint64_t *)&v15, v62, v66, v16);
        outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*(void *)&v15, v62);
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of ScrollViewBehavior.Phase(v65, v63, v68, v13, v64, *(uint64_t *)&v15, v62, v66, v16);
        swift_release();
      }
      swift_bridgeObjectRelease();
      uint64_t v23 = (char *)MEMORY[0x1E4FBC860];
      *((void *)v9 + 9) = MEMORY[0x1E4FBC860];
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong) {
        goto LABEL_45;
      }
      uint64_t v25 = Strong;
      while (1)
      {
        swift_beginAccess();
        if (*(unsigned char *)(v25 + 297) != 1) {
          break;
        }
        swift_retain();
        ScrollViewNode.resetBehavior(completed:)(0);
        swift_beginAccess();
        uint64_t v26 = *(void *)(v25 + 64);
        uint64_t v27 = *(void *)(v25 + 72);
        swift_beginAccess();
        int v28 = *(_DWORD *)(v25 + 148);
        swift_unownedRetain();
        swift_unownedRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
        }
        unint64_t v30 = *((void *)v23 + 2);
        unint64_t v29 = *((void *)v23 + 3);
        if (v30 >= v29 >> 1) {
          uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v23);
        }
        *((void *)v23 + 2) = v30 + 1;
        double v31 = &v23[32 * v30];
        *((void *)v31 + 4) = v25;
        *((void *)v31 + 5) = v26;
        *((void *)v31 + 6) = v27;
        *((_DWORD *)v31 + 14) = v28;
        uint64_t v32 = swift_weakLoadStrong();
        swift_release();
        swift_unownedRelease();
        swift_release();
        uint64_t v25 = v32;
        if (!v32) {
          goto LABEL_45;
        }
      }
      swift_release();
LABEL_45:
      *((void *)v9 + 9) = v23;
      swift_beginAccess();
      double v49 = ScrollViewNode.removeRubberBanding(_:)((void (*)(double, double))specialized static ScrollViewSupport.removeRubberBandingFromResidue(_:range:), *(double *)(a2 + 64), *(double *)(a2 + 72));
      int v39 = 0;
      int v38 = 0;
      __int16 v37 = 0;
      double v51 = v4;
      double v44 = 0.0;
      if (v6 >= 0) {
        double v51 = 0.0;
      }
      double v42 = v49 - v51;
      if (v6 < 0) {
        double v52 = v3;
      }
      else {
        double v52 = 0.0;
      }
      double v43 = v50 - v52;
      if (v6 < 0) {
        double v47 = v4;
      }
      else {
        double v47 = v3;
      }
      if (v6 < 0) {
        double v46 = v3;
      }
      else {
        double v46 = v70;
      }
      uint64_t v48 = *(void *)(a2 + 64);
      uint64_t v13 = *(void *)(a2 + 72);
      double v45 = 0.0;
LABEL_57:
      if ((*(void *)&v47 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int v38 = 1;
      }
      if ((*(void *)&v46 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        __int16 v37 = 1;
      }
      if (v38) {
        __int16 v53 = 256;
      }
      else {
        __int16 v53 = 0;
      }
      __int16 v54 = v53 | v37;
      BOOL v55 = v39 != 0;
      outlined consume of ScrollViewBehavior.Phase(*(void *)v9, *((void *)v9 + 1), *((void *)v9 + 2), *((void *)v9 + 3), *((void *)v9 + 4), *((void *)v9 + 5), *((void *)v9 + 6), *((void *)v9 + 7), *((unsigned __int16 *)v9 + 32) | (*((unsigned __int8 *)v9 + 66) << 16));
      *(double *)double v9 = v42;
      *((double *)v9 + 1) = v43;
      *((void *)v9 + 2) = v48;
      *((void *)v9 + 3) = v13;
      *((double *)v9 + 4) = v47;
      *((double *)v9 + 5) = v46;
      *((double *)v9 + 6) = v44;
      *((double *)v9 + 7) = v45;
      *((unsigned char *)v9 + 66) = v55;
      *((_WORD *)v9 + 32) = v54;
      ++*((_DWORD *)v9 + 17);
      if ((v6 & 0x8000000000000000) == 0)
      {
        double v42 = ScrollViewBehavior.overflowContentOffset(_:node:)(a2, v42, v43);
        double v43 = v56;
      }
      ScrollViewNode.bindingSafeOffset(_:)(v42, v43);
      double v72 = v42;
      double v73 = v43;
      double v74 = v57;
      uint64_t v75 = *(void *)&v58;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      return ScrollViewNode.commitScrollTransaction(_:value:)(&v72, v57, v58);
    case 2:
      double v72 = *(double *)result;
      double v73 = v3;
      double v74 = v5;
      goto LABEL_20;
    case 3:
      goto LABEL_5;
    default:
      if ((unint64_t)v6 >> 2 == 0xFFFFFFFF)
      {
        if (((*((unsigned __int8 *)v2 + 66) << 16) & 0xFFC1FFFF) == 0)
        {
          double result = swift_beginAccess();
          if (*(unsigned char *)(a2 + 296) == 1)
          {
LABEL_5:
            double v72 = 0.0;
            double v73 = 0.0;
            double v74 = 0.0;
            uint64_t v75 = 0x3FFFFFFFCLL;
            long long v76 = 0uLL;
            return ScrollViewBehavior.stopDragging(value:node:)((uint64_t)&v72, a2);
          }
        }
      }
      else
      {
        unsigned __int16 v33 = *((unsigned __int8 *)v2 + 66);
        if (!(v33 >> 6))
        {
          double v71 = *(double *)(result + 16);
          long long v67 = v2[1];
          long long v69 = *v2;
          int v34 = *((unsigned __int16 *)v2 + 32);
          double result = swift_beginAccess();
          if (*(unsigned char *)(a2 + 296) == 1)
          {
            double v72 = v4;
            double v73 = v3;
            double v74 = v71;
LABEL_20:
            uint64_t v75 = v6;
            *(void *)&long long v76 = v8;
            *((void *)&v76 + 1) = v7;
            return ScrollViewBehavior.stopDragging(value:node:)((uint64_t)&v72, a2);
          }
          unsigned int v59 = v34 & 0xFF00FFFF | (v33 << 16);
          if (v6 < 0) {
            double v60 = v4;
          }
          else {
            double v60 = v3;
          }
          double v61 = v71;
          if (v6 < 0) {
            double v61 = v3;
          }
          *uint64_t v2 = v69;
          v2[1] = v67;
          *((double *)v2 + 4) = v60;
          *((double *)v2 + 5) = v61;
          *((void *)v2 + 6) = v8 & ~(v6 >> 63);
          *((void *)v2 + 7) = v7 & ~(v6 >> 63);
          *((_WORD *)v2 + 32) = v59 & 0x101;
          *((unsigned char *)v2 + 66) = (v59 & 0x1010101) >> 16;
          ++*((_DWORD *)v2 + 17);
        }
      }
      return result;
  }
}

uint64_t ScrollViewBehavior.stopDragging(value:node:)(uint64_t result, uint64_t a2)
{
  if (!(*(unsigned __int8 *)(v2 + 66) >> 6))
  {
    double v4 = *(double *)v2;
    double v5 = *(double *)(v2 + 48);
    double v45 = *(double *)(v2 + 40);
    double v46 = *(double *)(v2 + 32);
    unint64_t v6 = *(void *)(v2 + 56);
    int v7 = *(unsigned __int16 *)(v2 + 64) | (*(unsigned __int8 *)(v2 + 66) << 16);
    double v9 = *(double *)(result + 32);
    double v8 = *(double *)(result + 40);
    uint64_t v10 = *(void *)(result + 24);
    double v43 = *(double *)(v2 + 8);
    double v44 = *(double *)v2;
    double v47 = *(double *)(v2 + 16);
    double v42 = *(double *)(v2 + 24);
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (v10 < 0)
    {
      double v9 = 0.0;
      double v8 = 0.0;
    }
    if (v11 == 0x3FFFFFFFCLL) {
      double v12 = *(double *)(v2 + 48);
    }
    else {
      double v12 = v9;
    }
    if (v11 == 0x3FFFFFFFCLL) {
      double v13 = *(double *)(v2 + 56);
    }
    else {
      double v13 = v8;
    }
    uint64_t v14 = *(void (**)(uint64_t, double, double, double, double, double, double, double, double))(a2 + 368);
    swift_beginAccess();
    swift_retain();
    uint64_t v15 = CGSize.inset(by:)();
    v14(v15, v44, v43, v47, v42, v12, v13, v16, v17);
    char v19 = v18;
    swift_release();
    if (v19)
    {
      int v38 = *(_DWORD *)(v2 + 68);
      uint64_t v39 = *(void *)(v2 + 72);
      CGFloat v48 = v4;
      double v49 = v43;
      double v50 = v47;
      double v51 = v42;
      unint64_t v34 = v6;
      double v52 = v46;
      double v53 = v45;
      double v54 = v5;
      unint64_t v55 = v6;
      BYTE2(v56) = BYTE2(v7);
      LOWORD(v56) = v7;
      HIDWORD(v56) = v38;
      uint64_t v57 = v39;
      swift_beginAccess();
      ScrollViewBehavior.estimatedDeceleration(from:node:)();
      CGFloat v31 = 0.0;
      double v32 = v46;
      double v33 = v45;
      double v35 = v43;
      double v36 = v47;
      double v37 = v42;
      CGFloat v30 = 0.0;
    }
    else
    {
      double v20 = *(double *)(a2 + 336);
      double v21 = *(double *)(a2 + 344);
      CGSize.inset(by:)();
      double v23 = v20 - v22;
      CGSize.inset(by:)();
      if (v23 < 0.0) {
        double v25 = 0.0;
      }
      else {
        double v25 = v23;
      }
      if (v21 - v24 < 0.0) {
        double v26 = 0.0;
      }
      else {
        double v26 = v21 - v24;
      }
      CGPoint v29 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v26, *(unint64_t *)&v25));
      CGFloat y = v29.y;
      CGFloat x = v29.x;
      CGFloat v30 = v29.x;
      CGFloat v31 = v29.y;
      double v33 = v45;
      double v32 = v46;
      unint64_t v34 = v6;
      double v36 = v47;
      double v35 = v43;
      double v37 = v42;
    }
    *(double *)uint64_t v2 = v4;
    *(double *)(v2 + 8) = v35;
    *(double *)(v2 + 16) = v36;
    *(double *)(v2 + 24) = v37;
    *(double *)(v2 + 32) = v32;
    *(double *)(v2 + 40) = v33;
    *(double *)(v2 + 48) = v5;
    *(void *)(v2 + 56) = v34;
    *(_WORD *)(v2 + 64) = v7 & 0x101;
    *(unsigned char *)(v2 + 66) = (v7 & 0x1000101 | 0x10000u) >> 16;
    ScrollViewNode.bindingSafeOffset(_:)(x, y);
    CGFloat v48 = v30;
    double v49 = v31;
    *(void *)&double v50 = v19 & 1;
    double v51 = v40;
    double v52 = v41;
    double v53 = -v12;
    double v54 = -v13;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    unint64_t v55 = 0x8000000000000000;
    return ScrollViewNode.commitScrollTransaction(_:value:)(&v48, v40, v41);
  }
  return result;
}

uint64_t ScrollViewBehavior.estimatedDeceleration(from:node:)()
{
  if (!(*(unsigned __int8 *)(v0 + 66) >> 6)) {
    return swift_beginAccess();
  }
  if (*(unsigned __int8 *)(v0 + 66) >> 6 == 1 && (*(unsigned char *)(v0 + 16) & 1) != 0)
  {
    if (*(void *)(*(void *)(v0 + 56) + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    return swift_beginAccess();
  }
  return result;
}

uint64_t ScrollViewBehavior.updateDeceleration(node:target:velocity:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = (uint64_t *)v9;
  uint64_t v16 = a4 & 1;
  double v18 = *v9;
  double v17 = v9[1];
  uint64_t v20 = *((void *)v9 + 3);
  uint64_t v19 = *((void *)v9 + 4);
  uint64_t v22 = *((void *)v9 + 5);
  uint64_t v21 = *((void *)v9 + 6);
  uint64_t v23 = *((void *)v9 + 7);
  int v24 = *((unsigned __int8 *)v11 + 66) >> 6;
  if (v24 == 2)
  {
    uint64_t v25 = *(void *)&v18 | v11[2] | *(void *)&v17 | v20 | v19 | v22 | v21 | v23;
    if ((*((unsigned __int16 *)v11 + 32) | (*((unsigned __int8 *)v11 + 66) << 16)) == 0x800000 && v25 == 0)
    {
      if ((a4 & 1) != 0
        || ((uint64_t v27 = a6, swift_beginAccess(), a6 = v27, *(double *)(a1 + 64) == *(double *)&a2)
          ? (BOOL v28 = *(double *)(a1 + 72) == *(double *)&a3)
          : (BOOL v28 = 0),
            v28))
      {
        if ((a7 & 1) != 0 || ((a5 | a6) & 0x7FFFFFFFFFFFFFFFLL) == 0)
        {
          if (a8)
          {
            uint64_t v29 = swift_allocObject();
            *(void *)(v29 + 16) = a8;
            *(void *)(v29 + 24) = a9;
            uint64_t v30 = swift_allocObject();
            *(void *)(v30 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
            *(void *)(v30 + 24) = v29;
            uint64_t v31 = swift_allocObject();
            *(void *)(v31 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
            *(void *)(v31 + 24) = v30;
            uint64_t v32 = swift_allocObject();
            *(void *)(v32 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
            *(void *)(v32 + 24) = v31;
            *(unsigned char *)(v32 + 32) = 1;
            swift_retain_n();
            outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a8, a9);
            swift_retain();
            static Update.enqueueAction(_:)();
            swift_release_n();
            swift_release();
            swift_release();
          }
          return 0;
        }
      }
    }
    uint64_t v71 = a3;
    double v72 = *(double *)&a6;
    swift_beginAccess();
    double v10 = *(double *)(a1 + 64);
    double v41 = *(double *)(a1 + 72);
    swift_bridgeObjectRelease();
    double v42 = (char *)MEMORY[0x1E4FBC860];
    v11[9] = MEMORY[0x1E4FBC860];
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v44 = Strong;
      while (1)
      {
        swift_beginAccess();
        if (*(unsigned char *)(v44 + 297) != 1) {
          break;
        }
        swift_retain();
        ScrollViewNode.resetBehavior(completed:)(0);
        swift_beginAccess();
        uint64_t v45 = *(void *)(v44 + 64);
        uint64_t v46 = *(void *)(v44 + 72);
        swift_beginAccess();
        int v47 = *(_DWORD *)(v44 + 148);
        swift_unownedRetain();
        swift_unownedRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v42 + 2) + 1, 1, v42);
        }
        unint64_t v49 = *((void *)v42 + 2);
        unint64_t v48 = *((void *)v42 + 3);
        if (v49 >= v48 >> 1) {
          double v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v42);
        }
        *((void *)v42 + 2) = v49 + 1;
        double v50 = &v42[32 * v49];
        *((void *)v50 + 4) = v44;
        *((void *)v50 + 5) = v45;
        *((void *)v50 + 6) = v46;
        *((_DWORD *)v50 + 14) = v47;
        uint64_t v51 = swift_weakLoadStrong();
        swift_release();
        swift_unownedRelease();
        swift_release();
        uint64_t v44 = v51;
        if (!v51) {
          goto LABEL_33;
        }
      }
      swift_release();
    }
LABEL_33:
    v11[9] = (uint64_t)v42;
    double v52 = 0.0;
    double v53 = 0.0;
    a3 = v71;
LABEL_34:
    swift_beginAccess();
    double v63 = (1.0 - pow(*(long double *)(a1 + 240), 8.33333333)) / 0.00833333333;
    if (v63 > 1.0) {
      double v64 = v63;
    }
    else {
      double v64 = 1.0;
    }
    if (a7) {
      double v65 = v52;
    }
    else {
      double v65 = *(double *)&a5;
    }
    if (a7) {
      double v66 = v53;
    }
    else {
      double v66 = v72;
    }
    specialized Deceleration2D.init(time:offset:velocity:drag:bounceStiffness:bounceDrag:stoppedVelocity:)(0.0, v10, v41, v65, v66, v64, 100.0, 17.0, v55, v56, v57, v58, v59, v60, v61, v62, 0x4004000000000000);
    uint64_t v23 = v67;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unsigned __int8 v75 = 1;
    double v40 = *(double *)&a2;
    uint64_t v34 = a8;
    if (!a8) {
      goto LABEL_46;
    }
    goto LABEL_44;
  }
  if (v24 != 1)
  {
    double v72 = *(double *)&a6;
    *(void *)&double v52 = v21 ^ 0x8000000000000000;
    *(void *)&double v53 = v23 ^ 0x8000000000000000;
    double v10 = ScrollViewNode.removeRubberBanding(_:)((void (*)(double, double))specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:), v18, v17);
    double v41 = v54;
    goto LABEL_34;
  }
  unsigned __int8 v75 = v19 & 1;
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v22, v21);
  swift_bridgeObjectRetain();
  uint64_t v34 = a8;
  if (!a8) {
    goto LABEL_66;
  }
  if (!v22)
  {
    double v40 = *(double *)&a2;
LABEL_44:
    uint64_t v39 = a9;
    swift_retain();
    uint64_t v22 = 0;
    goto LABEL_45;
  }
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v22;
  *(void *)(v35 + 24) = v21;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
  *(void *)(v36 + 24) = v35;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
  *(void *)(v37 + 24) = v36;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
  *(void *)(v38 + 24) = v37;
  *(unsigned char *)(v38 + 32) = 0;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a8, a9);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v22, v21);
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release_n();
  swift_release();
  uint64_t v39 = a9;
  uint64_t v34 = a8;
  swift_release();
  double v40 = *(double *)&a2;
LABEL_45:
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v22, v21);
  uint64_t v22 = v34;
  uint64_t v21 = v39;
LABEL_46:
  if (v16) {
    goto LABEL_67;
  }
LABEL_47:
  if (*(void *)(v23 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_75;
  }
  double v10 = *(double *)(v23 + 128);
  uint64_t v34 = *(void *)(v23 + 136);
  if (*(double *)(v23 + 40) != v40 || (*(void *)(v23 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_78;
    }
    unint64_t v68 = *(void *)(v23 + 16);
    if (!v68) {
      goto LABEL_79;
    }
    goto LABEL_52;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    unint64_t v68 = *(void *)(v23 + 16);
    if (v68) {
      goto LABEL_56;
    }
LABEL_82:
    __break(1u);
    return result;
  }
  while (1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
    uint64_t v23 = result;
    unint64_t v68 = *(void *)(result + 16);
    if (!v68) {
      goto LABEL_82;
    }
LABEL_56:
    *(void *)(v23 + 88) = 0;
    *(unsigned char *)(v23 + 112) = 0;
    while (2)
    {
      if (v10 == *(double *)&a3 && (v34 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        if (v68 >= 2) {
          goto LABEL_70;
        }
        __break(1u);
LABEL_66:
        double v40 = *(double *)&a2;
        if (v16)
        {
LABEL_67:
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v70 = *(void *)(v23 + 16);
            if (v70)
            {
LABEL_69:
              *(void *)(v23 + 88) = 0;
              *(unsigned char *)(v23 + 112) = 0;
              if (v70 != 1)
              {
LABEL_70:
                *(void *)(v23 + 176) = 0;
                *(unsigned char *)(v23 + 200) = 0;
                goto LABEL_71;
              }
LABEL_77:
              __break(1u);
LABEL_78:
              uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
              unint64_t v68 = *(void *)(v23 + 16);
              if (!v68)
              {
LABEL_79:
                __break(1u);
                goto LABEL_80;
              }
LABEL_52:
              if ((*(unsigned char *)(v23 + 112) & 1) == 0)
              {
                *(void *)(v23 + 88) = 0x4059000000000000;
                *(double *)(v23 + 96) = v40;
                *(void *)(v23 + 56) = 0x4031000000000000;
              }
              continue;
            }
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
LABEL_75:
          uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
          uint64_t v70 = *(void *)(v23 + 16);
          if (v70) {
            goto LABEL_69;
          }
          goto LABEL_76;
        }
        goto LABEL_47;
      }
      break;
    }
    if (v68 >= 2) {
      break;
    }
LABEL_80:
    __break(1u);
  }
  if ((*(unsigned char *)(v23 + 200) & 1) == 0)
  {
    *(void *)(v23 + 176) = 0x4059000000000000;
    *(double *)(v23 + 184) = *(double *)&a3;
    *(void *)(v23 + 144) = 0x4031000000000000;
  }
LABEL_71:
  outlined consume of ScrollViewBehavior.Phase(*v11, v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], *((unsigned __int16 *)v11 + 32) | (*((unsigned __int8 *)v11 + 66) << 16));
  *(double *)unint64_t v11 = v40;
  v11[1] = a3;
  v11[2] = v16;
  v11[3] = v20;
  v11[4] = v75;
  v11[5] = v22;
  v11[6] = v21;
  v11[7] = v23;
  *((unsigned char *)v11 + 66) = 64;
  *((_WORD *)v11 + 32) = 0;
  ++*((_DWORD *)v11 + 17);
  return 1;
}

CGFloat ScrollViewNode.removeRubberBanding(_:)(void (*a1)(double, double), double a2, double a3)
{
  double v7 = *(double *)(v3 + 336);
  double v8 = *(double *)(v3 + 344);
  swift_beginAccess();
  CGSize.inset(by:)();
  double v10 = v7 - v9;
  CGSize.inset(by:)();
  if (v10 < 0.0) {
    double v12 = 0.0;
  }
  else {
    double v12 = v10;
  }
  if (v8 - v11 < 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = v8 - v11;
  }
  CGPoint v14 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v13, *(unint64_t *)&v12));
  uint64_t v15 = CGSize.inset(by:)();
  double v17 = v16;
  double v19 = ((double (*)(uint64_t, double, double))a1)(v15, v14.x - a2, v18);
  a1(v14.y - a3, v17);
  return v14.x - v19;
}

uint64_t ScrollViewBehavior.iterateDeceleration(node:time:offset:estimatedTarget:)(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (((*(unsigned __int16 *)(v6 + 64) | (*(unsigned __int8 *)(v6 + 66) << 16)) & 0xC00000) != 0x400000) {
    return 1;
  }
  uint64_t v7 = v6;
  int v53 = *(unsigned __int16 *)(v6 + 64) | (*(unsigned __int8 *)(v6 + 66) << 16);
  uint64_t v51 = *(void *)v6;
  uint64_t v52 = *(void *)(v6 + 8);
  uint64_t v55 = *(uint64_t *)(v6 + 24);
  uint64_t v56 = *(void *)(v6 + 16);
  uint64_t v11 = *(void *)(v6 + 40);
  uint64_t v13 = *(void *)(v6 + 48);
  uint64_t v12 = *(void *)(v6 + 56);
  double v14 = *a2 + -0.0166666667;
  double v15 = *a2 - *(double *)&v55;
  uint64_t v54 = *(void *)(v6 + 32);
  if (v54) {
    double v15 = 0.0166666667;
  }
  double v49 = v15;
  if ((v54 & 1) == 0) {
    double v14 = *(double *)(v6 + 24);
  }
  double v47 = v14;
  double v17 = *(double *)(a1 + 336);
  double v16 = *(double *)(a1 + 344);
  swift_beginAccess();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v11, v13);
  swift_bridgeObjectRetain();
  CGSize.inset(by:)();
  double v19 = v17 - v18;
  CGSize.inset(by:)();
  if (v19 < 0.0) {
    double v19 = 0.0;
  }
  if (v16 - v20 < 0.0) {
    double v21 = 0.0;
  }
  else {
    double v21 = v16 - v20;
  }
  uint64_t v22 = (char *)v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_39;
  }
  while (1)
  {
    if (*((void *)v22 + 2))
    {
      int v23 = ScalarDeceleration.iter(_:minValue:maxValue:)(0, 0, *(uint64_t *)&v19, 0, v49);
      if (*((void *)v22 + 2) >= 2uLL) {
        break;
      }
    }
    __break(1u);
LABEL_39:
    uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
  }
  int v24 = v23;
  uint64_t v48 = v12;
  uint64_t result = ScalarDeceleration.iter(_:minValue:maxValue:)(0, 0, *(uint64_t *)&v21, 0, v49);
  if (v24 & result)
  {
    if ((v56 & 1) == 0) {
      *(CGPoint *)a3 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v21, *(unint64_t *)&v19));
    }
    uint64_t v26 = *(void *)(v6 + 72);
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v50 = v13;
      swift_bridgeObjectRetain();
      BOOL v28 = (_DWORD *)(v26 + 56);
      do
      {
        uint64_t v29 = *((void *)v28 - 3);
        double v30 = *((double *)v28 - 2);
        double v31 = *((double *)v28 - 1);
        int v32 = *v28;
        swift_unownedRetainStrong();
        swift_beginAccess();
        int v33 = *(_DWORD *)(v29 + 148);
        swift_unownedRetain();
        swift_release();
        if (v33 == v32)
        {
          swift_unownedRetainStrong();
          ScrollViewNode.bindingSafeOffset(_:)(v30, v31);
          *(double *)uint64_t v57 = v30;
          *(double *)&v57[1] = v31;
          *(double *)&v57[2] = v34;
          *(double *)&v57[3] = v35;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          ScrollViewNode.commitScrollTransaction(_:value:)(v57, v34, v35);
          swift_release();
        }
        swift_unownedRelease();
        v28 += 8;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      uint64_t v13 = v50;
    }
    if (v11)
    {
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v11;
      *(void *)(v41 + 24) = v13;
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      *(void *)(v42 + 24) = v41;
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
      *(void *)(v43 + 24) = v42;
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      *(void *)(v44 + 24) = v43;
      *(unsigned char *)(v44 + 32) = 1;
      swift_retain();
      outlined copy of ScrollViewBehavior.Phase(v51, v52, v56, v55, v54, v11, v13, v48, v53);
      swift_retain();
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v11, v13);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of ScrollViewBehavior.Phase(v51, v52, v56, v55, v54, v11, v13, v48, v53);
      swift_release();
    }
    outlined consume of ScrollViewBehavior.Phase(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48), *(void *)(v7 + 56), *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16));
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(unsigned char *)(v7 + 66) = 0x80;
    *(_WORD *)(v7 + 64) = 0;
    ++*(_DWORD *)(v7 + 68);
    swift_bridgeObjectRelease();
    *(void *)(v7 + 72) = MEMORY[0x1E4FBC860];
    outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v11, v13);
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v56 & 1) == 0 || (a6) {
    goto LABEL_31;
  }
  if (*((void *)v22 + 2) >= 2uLL)
  {
    double v36 = fabs(*((double *)v22 + 6));
    double v37 = fabs(*((double *)v22 + 17));
    if (v36 < 50.0 && (v22[112] & 1) == 0)
    {
      *((void *)v22 + 12) = a4;
      *((double *)v22 + 11) = (v36 / -50.0 + 1.0) * 30.0;
      *((void *)v22 + 7) = 0x4024000000000000;
    }
    if (v37 < 50.0 && (v22[200] & 1) == 0)
    {
      *((void *)v22 + 23) = a5;
      *((double *)v22 + 22) = (v37 / -50.0 + 1.0) * 30.0;
      *((void *)v22 + 18) = 0x4024000000000000;
    }
LABEL_31:
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v11, v13);
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of ScrollViewBehavior.Phase(v51, v52, v56, v55, v54, v11, v13, v12, v53);
    *(void *)uint64_t v6 = v51;
    *(void *)(v6 + 8) = v52;
    *(void *)(v6 + 16) = v56 & 1;
    *(double *)(v6 + 24) = v47;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = v11;
    *(void *)(v6 + 48) = v13;
    *(void *)(v6 + 56) = v22;
    *(unsigned char *)(v6 + 66) = 64;
    *(_WORD *)(v6 + 64) = 0;
    ++*(_DWORD *)(v6 + 68);
    if (*((void *)v22 + 2) >= 2uLL)
    {
      CGFloat v38 = ScrollViewBehavior.overflowContentOffset(_:node:)(a1, *((double *)v22 + 5), *((double *)v22 + 16));
      uint64_t v40 = v39;
      outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v11, v13);
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      *(CGFloat *)a3 = v38;
      *(void *)(a3 + 8) = v40;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18780DD6C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(a1, *(uint64_t (**)(char *))(v1 + 16));
}

{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  double v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for specialized closure #1 in ScrollViewNode.dispatchAction<A>(_:_:)()
{
  return specialized closure #1 in ScrollViewNode.dispatchAction<A>(_:_:)(*(uint64_t (**)(char *))(v0 + 16), *(void *)(v0 + 24), (char *)(v0 + 32));
}

{
  uint64_t v0;
  uint64_t (*v1)(char *);
  char v3;

  uint64_t v1 = *(uint64_t (**)(char *))(v0 + 16);
  uint64_t v3 = *(unsigned char *)(v0 + 32);
  return v1(&v3);
}

uint64_t sub_18780DDC0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for ScrollViewBehavior.ContainerInfo()
{
  return swift_unownedRelease();
}

uint64_t initializeWithCopy for ScrollViewBehavior.ContainerInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = swift_unownedRetain();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior.ContainerInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = swift_unownedRetain();
  swift_unownedRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScrollViewBehavior.ContainerInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unownedRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.ContainerInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.ContainerInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.ContainerInfo()
{
  return &type metadata for ScrollViewBehavior.ContainerInfo;
}

uint64_t destroy for ScrollViewBehavior.Phase(uint64_t a1)
{
  return outlined consume of ScrollViewBehavior.Phase(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16));
}

uint64_t initializeWithCopy for ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  int v11 = *(unsigned __int8 *)(a2 + 66);
  int v13 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v13 | (v11 << 16));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 66) = v11;
  *(_WORD *)(a1 + 64) = v13;
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  int v22 = *(unsigned __int8 *)(a2 + 66);
  int v11 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11 | (v22 << 16));
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  int v20 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_WORD *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 66) = v22;
  outlined consume of ScrollViewBehavior.Phase(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 66);
  __int16 v4 = *(_WORD *)(a2 + 64);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  int v13 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_WORD *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 66) = v3;
  outlined consume of ScrollViewBehavior.Phase(v5, v7, v6, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.Phase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x1FFFFD && *(unsigned char *)(a1 + 67)) {
    return (*(_DWORD *)a1 + 2097150);
  }
  if ((((*(unsigned __int8 *)(a1 + 66) >> 6) | (4
                                               * ((*(unsigned __int16 *)(a1 + 64) >> 2) & 0x3F80 | (*(_WORD *)(a1 + 64) >> 1) | (((*(unsigned __int8 *)(a1 + 66) >> 1) & 0x1F) << 14)))) ^ 0x1FFFFFu) >= 0x1FFFFD)
    int v3 = -1;
  else {
    int v3 = ((*(unsigned __int8 *)(a1 + 66) >> 6) | (4
  }
                                                * ((*(unsigned __int16 *)(a1 + 64) >> 2) & 0x3F80 | (*(_WORD *)(a1 + 64) >> 1) | (((*(unsigned __int8 *)(a1 + 66) >> 1) & 0x1F) << 14)))) ^ 0x1FFFFF;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.Phase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1FFFFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 2097150;
    if (a3 >= 0x1FFFFE) {
      *(unsigned char *)(result + 67) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1FFFFE) {
      *(unsigned char *)(result + 67) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 2) & 0x7FFFF) - (a2 << 19);
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 66) = (v3 >> 13) & 0xFE;
      *(_WORD *)(result + 64) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollViewBehavior.Phase(uint64_t a1)
{
  if ((*(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16)) << 8 >> 8 >= 0) {
    return *(unsigned __int8 *)(a1 + 66) >> 6;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for ScrollViewBehavior.Phase(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 64);
  uint64_t result = a1 + 64;
  *(unsigned char *)(result + 2) = ((v2 | (*(unsigned __int8 *)(result + 2) << 16)) >> 16) & 0x3F;
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollViewBehavior.Phase(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    int v2 = *(unsigned __int16 *)(result + 64);
    result += 64;
    int v3 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0x1010101 | (a2 << 22);
    *(_WORD *)uint64_t result = v2 & 0x101;
    *(unsigned char *)(result + 2) = BYTE2(v3);
  }
  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    *(unsigned char *)(result + 66) = 0x80;
    *(_WORD *)(result + 64) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.Phase()
{
  return &type metadata for ScrollViewBehavior.Phase;
}

uint64_t destroy for ScrollViewBehavior.DecelerationState(uint64_t a1)
{
  if (*(void *)(a1 + 40)) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScrollViewBehavior.DecelerationState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior.DecelerationState(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 3);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  uint64_t v8 = (long long *)((char *)a2 + 40);
  uint64_t v7 = *((void *)a2 + 5);
  if (!*(void *)(a1 + 40))
  {
    if (v7)
    {
      uint64_t v10 = *((void *)a2 + 6);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v10;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *uint64_t v6 = *v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v9;
  swift_retain();
  swift_release();
LABEL_8:
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior.DecelerationState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  long long v4 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v5;
      *(void *)(a1 + 48) = v8;
      goto LABEL_8;
    }
LABEL_7:
    _OWORD *v4 = *v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  swift_release();
LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.DecelerationState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.DecelerationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.DecelerationState()
{
  return &type metadata for ScrollViewBehavior.DecelerationState;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.DragState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 67)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.DragState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 67) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 67) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.DragState()
{
  return &type metadata for ScrollViewBehavior.DragState;
}

char *initializeBufferWithCopyOfBuffer for CellConfiguration(char *a1, uint64_t *a2, int *a3)
{
  BOOL v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    BOOL v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UICellConfigurationState();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
      memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    uint64_t v11 = a3[6];
    v4[a3[5]] = *((unsigned char *)a2 + a3[5]);
    v4[v11] = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[8];
    v4[a3[7]] = *((unsigned char *)a2 + a3[7]);
    *(void *)&v4[v12] = *(uint64_t *)((char *)a2 + v12);
    uint64_t v13 = a3[9];
    long long v14 = &v4[v13];
    long long v15 = (char *)a2 + v13;
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)long long v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
    *((void *)v14 + 7) = *((void *)v15 + 7);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for CellConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UICellConfigurationState();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_release();
  swift_release();

  return swift_release();
}

char *initializeWithCopy for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UICellConfigurationState();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[9];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = v14;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *((void *)v12 + 7) = *((void *)v13 + 7);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UICellConfigurationState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v12 = a3[9];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_retain();
  swift_release();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_retain();
  swift_release();
  *((void *)v13 + 2) = *((void *)v14 + 2);
  swift_retain();
  swift_release();
  *((void *)v13 + 3) = *((void *)v14 + 3);
  *((void *)v13 + 4) = *((void *)v14 + 4);
  *((void *)v13 + 5) = *((void *)v14 + 5);
  *((void *)v13 + 6) = *((void *)v14 + 6);
  *((void *)v13 + 7) = *((void *)v14 + 7);
  return a1;
}

char *initializeWithTake for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UICellConfigurationState();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[9];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  long long v15 = *((_OWORD *)v13 + 3);
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  *((_OWORD *)v12 + 3) = v15;
  return a1;
}

char *assignWithTake for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UICellConfigurationState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[9];
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)&a1[v14] = *(void *)v16;
  swift_release();
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_release();
  *((void *)v15 + 2) = *((void *)v16 + 2);
  swift_release();
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *((void *)v15 + 7) = *((void *)v16 + 7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CellConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18780F1C0);
}

uint64_t sub_18780F1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CellConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18780F2B0);
}

void sub_18780F2B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
}

void type metadata completion function for CellConfiguration()
{
  type metadata accessor for UICellConfigurationState?(319, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t CellConfiguration.effectiveState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for UICellConfigurationState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for CellConfiguration() + 28));
  if (v11 == 2)
  {
    return outlined init with copy of UICellConfigurationState?(v2, a1);
  }
  else
  {
    outlined init with copy of UICellConfigurationState?(v2, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined destroy of UICellConfigurationState?((uint64_t)v6, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
    }
    else
    {
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v13(v10, v6, v7);
      if (v11)
      {
        UICellConfigurationState.isDisabled.setter();
      }
      else if (UICellConfigurationState.isHighlighted.getter())
      {
        UICellConfigurationState.isHighlighted.setter();
        UICellConfigurationState.isSelected.setter();
      }
      v13((char *)a1, v10, v7);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
}

uint64_t CellConfiguration.backgroundConfiguration()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v24[-v4];
  type metadata accessor for UICellConfigurationState?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v24[-v7];
  uint64_t v9 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  long long v15 = &v24[-v14];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v24[-v17];
  uint64_t v19 = (int *)type metadata accessor for CellConfiguration();
  int v20 = *(unsigned __int8 *)(v1 + v19[5]);
  if (v20 == 3)
  {
    static UIBackgroundConfiguration.listAccompaniedSidebarCell()();
  }
  else if (v20 == 1)
  {
    if (*(unsigned char *)(v1 + v19[6]) == 1) {
      static UIBackgroundConfiguration.listHeader()();
    }
    else {
      static UIBackgroundConfiguration.listCell()();
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v18, v15, v9);
  }
  else
  {
    if (*(void *)(v1 + v19[8]) > 2uLL)
    {
      MEMORY[0x1F4188790](v19);
      *(void *)&v24[-16] = v1;
      static Log.internalWarning(_:)();
    }
    static UIBackgroundConfiguration.listCell()();
  }
  uint64_t v21 = CellConfiguration.effectiveState.getter((uint64_t)v5);
  MEMORY[0x1F4188790](v21);
  *(void *)&v24[-16] = v18;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF5UIKit24UICellConfigurationStateV_s5NeverOAD012UIBackgroundE0VTg5((void (*)(char *))partial apply for closure #1 in CellConfiguration.backgroundConfiguration(), (uint64_t)v8);
  outlined destroy of UICellConfigurationState?((uint64_t)v5, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v12, v18, v9);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 32))(a1, v12, v9);
    outlined destroy of UICellConfigurationState?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v18, v9);
  }
  else
  {
    int v23 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
    v23(v12, v9);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 32))(a1, v8, v9);
    return ((uint64_t (*)(unsigned char *, uint64_t))v23)(v18, v9);
  }
}

uint64_t implicit closure #1 in CellConfiguration.backgroundConfiguration()()
{
  _StringGuts.grow(_:)(67);
  v0._object = (void *)0x8000000188329FF0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000041;
  String.append(_:)(v0);
  type metadata accessor for CellConfiguration();
  type metadata accessor for UITableViewStyle(0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t closure #1 in CellConfiguration.backgroundConfiguration()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UICellConfigurationState();
  v5[3] = v2;
  v5[4] = MEMORY[0x1E4FB0EF8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, a1, v2);
  UIBackgroundConfiguration.updated(for:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance CellConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for CellConfiguration();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static CellConfigurationKey.defaultValue);

  return outlined init with copy of CellConfiguration(v3, a1);
}

uint64_t EnvironmentValues.cellConfiguration.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.cellConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v3 - 8);
  outlined init with copy of CellConfiguration(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
  lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of CellConfiguration(a1);
}

uint64_t specialized CellConfiguration.Values.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v30 = type metadata accessor for UIListContentConfiguration.ImageProperties();
  uint64_t v4 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UIListContentConfiguration.TextProperties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UIListContentConfiguration.textProperties.getter();
  uint64_t v11 = UIListContentConfiguration.TextProperties.color.getter();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v31 = v7;
  uint64_t v29 = v12;
  v12(v10, v7);
  uint64_t v32 = v11;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
  uint64_t v13 = Color.init<A>(provider:)();
  swift_retain();
  UIListContentConfiguration.imageProperties.getter();
  uint64_t v14 = UIListContentConfiguration.ImageProperties.tintColor.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v30);
  if (v14)
  {
    uint64_t v32 = v14;
    uint64_t v15 = Color.init<A>(provider:)();
  }
  else
  {
    uint64_t v15 = 0;
  }
  swift_retain();
  UIListContentConfiguration.textProperties.getter();
  UIListContentConfiguration.TextProperties.font.getter();
  v29(v10, v31);
  uint64_t v16 = Font.init(_:)();
  swift_retain();
  UIListContentConfiguration.directionalLayoutMargins.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  UIListContentConfiguration.imageToTextPadding.getter();
  uint64_t v26 = v25;
  uint64_t v27 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a1, v27);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a2 = v13;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v18;
  a2[4] = v20;
  a2[5] = v22;
  a2[6] = v24;
  a2[7] = v26;
  return result;
}

uint64_t outlined init with copy of UICellConfigurationState?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UICellConfigurationState?(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CellConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<CellConfigurationKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CellConfigurationKey>);
    }
  }
}

uint64_t outlined destroy of CellConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #1 in CellConfiguration.backgroundConfiguration()()
{
  return implicit closure #1 in CellConfiguration.backgroundConfiguration()();
}

uint64_t partial apply for closure #1 in CellConfiguration.backgroundConfiguration()(uint64_t a1)
{
  return closure #1 in CellConfiguration.backgroundConfiguration()(a1);
}

ValueMetadata *type metadata accessor for CellConfigurationKey()
{
  return &type metadata for CellConfigurationKey;
}

uint64_t destroy for CellConfiguration.Values()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CellConfiguration.Values(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CellConfiguration.Values(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for CellConfiguration.Values(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CellConfiguration.Values(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CellConfiguration.Values(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CellConfiguration.Values()
{
  return &type metadata for CellConfiguration.Values;
}

uint64_t DefaultTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

uint64_t DefaultTextFieldStyle._Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v1, (uint64_t)v5);
  outlined init with copy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v5, a1);
  return outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>);
}

void type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>)
  {
    type metadata accessor for TextField<_TextFieldStyleLabel>(255, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    type metadata accessor for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>)
  {
    type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<PlatformItemListTextFieldStyle>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle);
    lazy protocol witness table accessor for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate;
  if (!lazy protocol witness table cache variable for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultTextFieldStyle._Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultTextFieldStyle._Body()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance DefaultTextFieldStyle._Body@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v1, (uint64_t)v5);
  outlined init with copy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v5, a1);
  return outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>);
}

unint64_t lazy protocol witness table accessor for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body;
  if (!lazy protocol witness table cache variable for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body)
  {
    type metadata accessor for DefaultTextFieldStyle._Body();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body);
  }
  return result;
}

uint64_t type metadata accessor for DefaultTextFieldStyle._Body()
{
  uint64_t result = type metadata singleton initialization cache for DefaultTextFieldStyle._Body;
  if (!type metadata singleton initialization cache for DefaultTextFieldStyle._Body) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for TextFieldStyle._body(configuration:) in conformance DefaultTextFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

ValueMetadata *type metadata accessor for DefaultTextFieldStyle()
{
  return &type metadata for DefaultTextFieldStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  if ((v6 & 0x20000) != 0)
  {
    a1 = v7 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    uint64_t v46 = v5;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      uint64_t v10 = a2[5];
      uint64_t v11 = a2[6];
      char v12 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v38 = a2[17];
    uint64_t v39 = a2[18];
    uint64_t v40 = a2[19];
    uint64_t v41 = a2[20];
    uint64_t v42 = a2[21];
    int v43 = *((_DWORD *)a2 + 44);
    char v44 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v38, v39, v40, v41, v42, v43, v44);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v38;
    *(void *)(a1 + 144) = v39;
    *(void *)(a1 + 152) = v40;
    *(void *)(a1 + 160) = v41;
    *(void *)(a1 + 168) = v42;
    *(_DWORD *)(a1 + 176) = v43;
    *(unsigned char *)(a1 + 180) = v44;
    uint64_t v22 = *(int *)(v46 + 56);
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v29;
      uint64_t v30 = *(int *)(v26 + 32);
      double v47 = (char *)v23 + v30;
      uint64_t v31 = (char *)v24 + v30;
      uint64_t v32 = type metadata accessor for TextSelection(0);
      uint64_t v45 = *(void *)(v32 - 8);
      int v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      swift_retain();
      swift_retain();
      if (v33(v31, 1, v32))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v47, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v47, v31, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v47, v31, *(void *)(*(void *)(v35 - 8) + 64));
        }
        v47[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v47, 0, 1, v32);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t destroy for DefaultTextFieldStyle._Body(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(_DWORD *)(a1 + 176), *(unsigned char *)(a1 + 180));
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v3 = a1 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v7 = v3 + *(int *)(v5 + 32);
    uint64_t v8 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
        return v10(v7, v9);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    char v9 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v36 = *(void *)(a2 + 136);
  uint64_t v37 = *(void *)(a2 + 144);
  uint64_t v38 = *(void *)(a2 + 152);
  uint64_t v39 = *(void *)(a2 + 160);
  uint64_t v40 = *(void *)(a2 + 168);
  int v41 = *(_DWORD *)(a2 + 176);
  char v43 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v17, v18, v36, v37, v38, v39, v40, v41, v43);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v38;
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(_DWORD *)(a1 + 176) = v41;
  *(unsigned char *)(a1 + 180) = v43;
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v20 = *(int *)(v19 + 56);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v27;
    uint64_t v28 = *(int *)(v24 + 32);
    char v44 = (char *)v21 + v28;
    uint64_t v29 = (char *)v22 + v28;
    uint64_t v30 = type metadata accessor for TextSelection(0);
    uint64_t v42 = *(void *)(v30 - 8);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_retain();
    swift_retain();
    if (v31(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v44, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v44, v29, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v44, v29, *(void *)(*(void *)(v33 - 8) + 64));
      }
      v44[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v30);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 48);
      char v9 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v16 = *(_OWORD *)(a2 + 56);
      _OWORD *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    char v15 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  uint64_t v21 = *(void *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = *(void *)(a2 + 120);
  uint64_t v25 = *(void *)(a2 + 128);
  uint64_t v73 = *(void *)(a2 + 136);
  uint64_t v74 = *(void *)(a2 + 144);
  uint64_t v75 = *(void *)(a2 + 152);
  uint64_t v76 = *(void *)(a2 + 160);
  uint64_t v77 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v80 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v73, v74, v75, v76, v77, __dsta, v80);
  uint64_t v26 = *(void *)(a1 + 72);
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v29 = *(void *)(a1 + 96);
  uint64_t v30 = *(void *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v33 = *(void *)(a1 + 128);
  long long v34 = *(_OWORD *)(a1 + 136);
  long long v35 = *(_OWORD *)(a1 + 152);
  uint64_t v36 = *(void *)(a1 + 168);
  int v37 = *(_DWORD *)(a1 + 176);
  char v38 = *(unsigned char *)(a1 + 180);
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v73;
  *(void *)(a1 + 144) = v74;
  *(void *)(a1 + 152) = v75;
  *(void *)(a1 + 160) = v76;
  *(void *)(a1 + 168) = v77;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v80;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v40 = *(int *)(v39 + 56);
  int v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v21) = v46(v41, 1, v43);
  int v47 = v46(v42, 1, v44);
  if (v21)
  {
    if (!v47)
    {
      *(void *)int v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v48 = *(int *)(v44 + 32);
      __dst = &v41[v48];
      uint64_t v81 = &v42[v48];
      uint64_t v49 = type metadata accessor for TextSelection(0);
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_retain();
      swift_retain();
      if (v51(v81, 1, v49))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v81, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(__dst, v81, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v81, *(void *)(*(void *)(v67 - 8) + 64));
        }
        __dst[*(int *)(v49 + 20)] = v81[*(int *)(v49 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      return a1;
    }
    goto LABEL_14;
  }
  if (v47)
  {
    outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v54 = *(void *)(*(void *)(v53 - 8) + 64);
    uint64_t v55 = v41;
    uint64_t v56 = v42;
LABEL_15:
    memcpy(v55, v56, v54);
    return a1;
  }
  *(void *)int v41 = *(void *)v42;
  swift_retain();
  swift_release();
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_retain();
  swift_release();
  uint64_t v57 = *(int *)(v44 + 32);
  long long v58 = &v41[v57];
  long long v59 = &v42[v57];
  uint64_t v60 = type metadata accessor for TextSelection(0);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (v63)
  {
    if (!v64)
    {
      uint64_t v65 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v58, v59, v66);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v58, v59, *(void *)(*(void *)(v65 - 8) + 64));
      }
      v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      return a1;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v58, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    size_t v54 = *(void *)(*(void *)(v69 - 8) + 64);
    uint64_t v55 = v58;
    uint64_t v56 = v59;
    goto LABEL_15;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v58, type metadata accessor for TextSelection.Indices);
    uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v58, v59, v72);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v71 - 8) + 64));
    }
  }
  v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
  return a1;
}

uint64_t outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v6 = *(int *)(v5 + 56);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = *(int *)(v10 + 32);
    char v15 = (char *)v7 + v14;
    long long v16 = (char *)v8 + v14;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5)
    {
      char v6 = *(unsigned char *)(a2 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      char v9 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 168);
  int v12 = *(_DWORD *)(a2 + 176);
  char v13 = *(unsigned char *)(a2 + 180);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 128);
  long long v22 = *(_OWORD *)(a1 + 136);
  long long v23 = *(_OWORD *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 168);
  int v25 = *(_DWORD *)(a1 + 176);
  char v26 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 176) = v12;
  *(unsigned char *)(a1 + 180) = v13;
  outlined consume of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v26);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v28 = *(int *)(v27 + 56);
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  long long v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v37;
      uint64_t v38 = *(int *)(v32 + 32);
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      uint64_t v41 = type metadata accessor for TextSelection(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v39, v40, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v39, v40, *(void *)(*(void *)(v58 - 8) + 64));
        }
        v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      return a1;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    uint64_t v46 = v29;
    int v47 = v30;
LABEL_13:
    memcpy(v46, v47, v45);
    return a1;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  swift_release();
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_release();
  uint64_t v48 = *(int *)(v32 + 32);
  uint64_t v49 = &v29[v48];
  uint64_t v50 = &v30[v48];
  uint64_t v51 = type metadata accessor for TextSelection(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      uint64_t v56 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v49, v50, v57);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
      }
      v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      return a1;
    }
    goto LABEL_22;
  }
  if (v55)
  {
    outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v49, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v45 = *(void *)(*(void *)(v60 - 8) + 64);
    uint64_t v46 = v49;
    int v47 = v50;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v49, type metadata accessor for TextSelection.Indices);
    uint64_t v62 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v49, v50, v63);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187812AD8);
}

uint64_t sub_187812AD8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187812B84);
}

uint64_t sub_187812B84(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for DefaultTextFieldStyle._Body()
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>)
  {
    type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
    type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<PlainTextFieldStyle>, (void (*)(void))lazy protocol witness table accessor for type PlainTextFieldStyle and conformance PlainTextFieldStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>);
    }
  }
}

void type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for TextFieldStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlainTextFieldStyle and conformance PlainTextFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainTextFieldStyle and conformance PlainTextFieldStyle;
  if (!lazy protocol witness table cache variable for type PlainTextFieldStyle and conformance PlainTextFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainTextFieldStyle and conformance PlainTextFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type TextField<_TextFieldStyleLabel> and conformance TextField<A>();
    lazy protocol witness table accessor for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextField<_TextFieldStyleLabel> and conformance TextField<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TextField<_TextFieldStyleLabel> and conformance TextField<A>;
  if (!lazy protocol witness table cache variable for type TextField<_TextFieldStyleLabel> and conformance TextField<A>)
  {
    type metadata accessor for TextField<_TextFieldStyleLabel>(255, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextField<_TextFieldStyleLabel> and conformance TextField<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t _NSSwiftAttributedStringStorage.attributedSubstring(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for AttributedSubstring();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v8 - 8);
  long long v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  double v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v5;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v30(v7, v2, v4, v14);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  uint64_t v17 = v4;
  Range<>.init<A>(_:in:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v29 = v16;
    outlined init with take of Range<AttributedString.Index>((uint64_t)v10, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    AttributedString.subscript.getter();
    AttributedString.init(_:)();
    uint64_t v19 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
    uint64_t v20 = (uint64_t *)(v2 + *(int *)(v19 + 20));
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = v20[2];
    uint64_t v24 = (objc_class *)type metadata accessor for NSSwiftAttributedString(0);
    int v25 = (char *)objc_allocWithZone(v24);
    char v26 = &v25[OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage];
    ((void (*)(char *, char *, uint64_t))v30)(&v25[OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage], v7, v17);
    uint64_t v27 = &v26[*(int *)(v19 + 20)];
    *(void *)uint64_t v27 = v21;
    *((void *)v27 + 1) = v22;
    *((void *)v27 + 2) = v23;
    v33.receiver = v25;
    v33.super_class = v24;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v28 = objc_msgSendSuper2(&v33, sel_init);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v17);
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    return (uint64_t)v28;
  }
  return result;
}

unint64_t _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a2;
  size_t v45 = (char *)a1;
  uint64_t v4 = type metadata accessor for AttributeContainer();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributedString.Runs();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  MEMORY[0x1F4188790](v6);
  int v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v46 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v35 - v22;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  uint64_t v47 = v3;
  v24(v13, v3, v10, v21);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) == 1)
  {
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else
  {
    outlined init with take of Range<AttributedString.Index>((uint64_t)v16, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    char v26 = v36;
    AttributedString.runs.getter();
    size_t v45 = v23;
    AttributedString.Runs.subscript.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v39);
    uint64_t v27 = v40;
    if (v40)
    {
      AttributedString.Runs.Run.range.getter();
      ((void (*)(char *, uint64_t, uint64_t))v24)(v13, v47, v10);
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      *uint64_t v27 = _NSRange.init<A, B>(_:in:)();
      v27[1] = v28;
    }
    uint64_t v29 = (uint64_t *)(v47 + *(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20));
    uint64_t v30 = v29[1];
    uint64_t v31 = v29[2];
    uint64_t v48 = *v29;
    uint64_t v49 = v30;
    uint64_t v50 = v31;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v32 = v37;
    objc_super v33 = v46;
    AttributedString.Runs.Run.attributes.getter();
    uint64_t v25 = RichTextAttributeResolver.nsAttributes(for:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v42);
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  }
  return v25;
}

uint64_t _NSSwiftAttributedStringStorage.attribute(_:at:effectiveRange:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6 = _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(a2, a3);
  if (*(void *)(v6 + 16))
  {
    id v7 = a1;
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if (v9)
    {
      outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v8, (uint64_t)a4);
    }
    else
    {
      *a4 = 0u;
      a4[1] = 0u;
    }
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }

  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftAttributedStringStorage.attribute(_:at:longestEffectiveRange:in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, NSRange *a3@<X2>, NSUInteger a4@<X3>, NSUInteger a5@<X4>, _OWORD *a6@<X8>)
{
  unint64_t v11 = _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(a2, (uint64_t *)a3);
  if (a3)
  {
    v17.location = a4;
    v17.length = a5;
    *a3 = NSIntersectionRange(*a3, v17);
  }
  if (*(void *)(v11 + 16))
  {
    id v12 = a1;
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    if (v14)
    {
      outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v13, (uint64_t)a6);
    }
    else
    {
      *a6 = 0u;
      a6[1] = 0u;
    }
  }
  else
  {
    *a6 = 0u;
    a6[1] = 0u;
  }

  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftAttributedStringStorage.isEqual(to:)(void *a1)
{
  uint64_t v2 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v38 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSwiftAttributedString(0);
  id v12 = a1;
  if (swift_dynamicCastClass())
  {
    id v13 = a1;
    char v14 = static AttributedString.== infix(_:_:)();

    return v14 & 1;
  }
  uint64_t v35 = v3;
  uint64_t v36 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v4;
  uint64_t v37 = v5;
  uint64_t v17 = v38;
  uint64_t v18 = v39;
  type metadata accessor for NSSwiftMutableAttributedString(0);
  uint64_t v19 = v12;
  uint64_t v20 = swift_dynamicCastClass();
  if (v20)
  {
    uint64_t v21 = v20 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
    char v22 = static AttributedString.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    AttributedString.characters.getter();
    id v23 = objc_msgSend(v12, sel_string);
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    LOBYTE(v23) = specialized Sequence<>.elementsEqual<A>(_:)(v24, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v16);
    if (v23)
    {
      char v41 = 1;
      id v27 = objc_msgSend(v12, sel_length);
      uint64_t v28 = v36;
      outlined init with copy of _NSSwiftAttributedStringStorage(v18, v36, type metadata accessor for _NSSwiftAttributedStringStorage);
      unint64_t v29 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      unint64_t v30 = (v35 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = swift_allocObject();
      outlined init with take of Range<AttributedString.Index>(v28, v31 + v29, type metadata accessor for _NSSwiftAttributedStringStorage);
      *(void *)(v31 + v30) = &v41;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = partial apply for closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:);
      *(void *)(v32 + 24) = v31;
      aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      aBlock[5] = v32;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      aBlock[3] = &block_descriptor_5;
      objc_super v33 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v19, sel_enumerateAttributesInRange_options_usingBlock_, 0, v27, 0, v33);
      _Block_release(v33);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
        return result;
      }
      char v22 = v41;
      swift_release();
    }
    else
    {
      char v22 = 0;
    }
  }
  return v22 & 1;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for AttributedString.Index();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  size_t v45 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v44 = (char *)&v39 - v9;
  uint64_t v10 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.CharacterView>();
  uint64_t v15 = v14 - 8;
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v19 = v11 + 16;
  uint64_t v40 = v20;
  ((void (*)(char *, uint64_t, uint64_t, double))v20)(v13, v2, v10, v16);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
  char v41 = v13;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v21 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v21 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v48 = a1;
  unint64_t v49 = a2;
  uint64_t v50 = 0;
  uint64_t v51 = v21;
  char v22 = &v18[*(int *)(v15 + 44)];
  id v23 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v42 = v19;
  uint64_t v43 = v23;
  uint64_t v46 = v6 + 16;
  uint64_t v24 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v39 = (void (**)(char *, uint64_t))(v19 - 8);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v26 = (uint64_t)v18;
    id v27 = v44;
    v43(v44, v22, v5);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
    uint64_t v28 = v45;
    dispatch thunk of Collection.endIndex.getter();
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v30 = *v24;
    (*v24)(v28, v5);
    v30(v27, v5);
    if (v29) {
      break;
    }
    uint64_t v31 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v33 = *v32;
    long long v34 = (void *)v32[1];
    swift_bridgeObjectRetain();
    v31(v47, 0);
    uint64_t v35 = v41;
    v40(v41, v26, v10);
    dispatch thunk of Collection.formIndex(after:)();
    (*v39)(v35, v10);
    Swift::String_optional v36 = String.Iterator.next()();
    object = v36.value._object;
    uint64_t v18 = (char *)v26;
    if (!v34) {
      goto LABEL_12;
    }
    if (!v36.value._object)
    {
      swift_bridgeObjectRelease();
      outlined destroy of Range<AttributedString.Index>?(v26, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.CharacterView>);
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v33 == v36.value._countAndFlagsBits && v36.value._object == v34)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined destroy of Range<AttributedString.Index>?(v26, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.CharacterView>);
        return 0;
      }
    }
  }
  object = String.Iterator.next()().value._object;
  uint64_t v18 = (char *)v26;
LABEL_12:
  swift_bridgeObjectRelease();
  outlined destroy of Range<AttributedString.Index>?((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.CharacterView>);
  if (!object) {
    return 1;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v73 = a6;
  uint64_t v74 = a4;
  uint64_t v76 = (char *)a3;
  uint64_t v77 = (char *)a5;
  uint64_t v75 = a2;
  uint64_t v62 = a1;
  uint64_t v6 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v6 - 8);
  v61[1] = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v70 = (uint64_t)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString.Runs();
  uint64_t v68 = *(void *)(v10 - 8);
  uint64_t v69 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v67 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttributedSubstring();
  uint64_t v64 = *(void *)(v12 - 8);
  uint64_t v65 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v63 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v66 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AttributedString();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  char v29 = (char *)v61 - v28;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)v61 - v31;
  double v34 = MEMORY[0x1F4188790](v33);
  Swift::String_optional v36 = (char *)v61 - v35;
  (*(void (**)(char *, char *, uint64_t, double))(v16 + 16))(v18, v77, v15, v34);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23) == 1)
  {
    uint64_t v37 = type metadata accessor for Range<AttributedString.Index>?;
    uint64_t v38 = (uint64_t)v21;
LABEL_13:
    uint64_t result = outlined destroy of Range<AttributedString.Index>?(v38, (uint64_t (*)(void))v37);
    uint64_t v60 = v74;
    *uint64_t v73 = 0;
    *uint64_t v60 = 1;
    return result;
  }
  uint64_t v76 = v26;
  uint64_t v39 = (uint64_t)v29;
  uint64_t v40 = (uint64_t)v32;
  char v41 = v71;
  outlined init with take of Range<AttributedString.Index>((uint64_t)v21, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
  uint64_t v42 = v63;
  AttributedString.subscript.getter();
  uint64_t v43 = v67;
  AttributedSubstring.runs.getter();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v42, v65);
  uint64_t v44 = v70;
  specialized Collection.first.getter(v70);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v69);
  uint64_t v45 = v66;
  uint64_t v46 = v72;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v44, 1, v72) == 1)
  {
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    uint64_t v37 = type metadata accessor for AttributedString.Runs.Run?;
    uint64_t v38 = v44;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v41, v44, v46);
  AttributedString.Runs.Run.range.getter();
  type metadata accessor for AttributedString.Index();
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v48 = v39;
  outlined init with copy of _NSSwiftAttributedStringStorage(v40, v39, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  uint64_t v77 = v36;
  uint64_t v49 = (uint64_t)v76;
  outlined init with copy of _NSSwiftAttributedStringStorage((uint64_t)v36, (uint64_t)v76, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  if ((v47 & 1) == 0)
  {
    outlined destroy of Range<AttributedString.Index>?(v49, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    outlined destroy of Range<AttributedString.Index>?(v48, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    outlined destroy of Range<AttributedString.Index>?(v40, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    goto LABEL_12;
  }
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Range<AttributedString.Index>?(v49, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  outlined destroy of Range<AttributedString.Index>?(v48, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  outlined destroy of Range<AttributedString.Index>?(v40, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  if ((v50 & 1) == 0)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v45 + 8))(v71, v72);
    uint64_t v37 = type metadata accessor for Range<AttributedString.Index>;
    uint64_t v38 = (uint64_t)v77;
    goto LABEL_13;
  }
  uint64_t v51 = v71;
  AttributedString.Runs.Run.attributes.getter();
  uint64_t v52 = Dictionary<>.init(_:)();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v52);
  swift_bridgeObjectRelease();
  id v53 = objc_allocWithZone(MEMORY[0x1E4F1C9E8]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v55 = objc_msgSend(v53, sel_initWithDictionary_, isa);

  if (*(void *)(v62 + 16))
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v62);
    Class v56 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned __int8 v57 = objc_msgSend(v55, sel_isEqualToDictionary_, v56);

    if ((v57 & 1) == 0)
    {
      uint64_t v58 = v74;
      *uint64_t v73 = 0;
      *uint64_t v58 = 1;
    }
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v72);
  return outlined destroy of Range<AttributedString.Index>?((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
}

uint64_t _NSSwiftAttributedStringStorage.remove(key:in:)(uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v91 = a2;
  uint64_t v92 = a3;
  uint64_t v82 = a1;
  uint64_t v81 = type metadata accessor for AttributeContainer();
  uint64_t v88 = *(char **)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  CGRect v101 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v74 = *(void (***)(char *, uint64_t))(v102 - 8);
  MEMORY[0x1F4188790](v102);
  CGRect v100 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v5 - 8);
  CGFloat v94 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v97 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v93 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  CGRect v96 = (char *)&v70 - v9;
  uint64_t v10 = type metadata accessor for AttributedString.Runs();
  uint64_t v99 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for AttributedSubstring();
  id v86 = *(void (***)(char *, uint64_t))(v87 - 8);
  MEMORY[0x1F4188790](v87);
  uint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  CGFloat v90 = v15;
  MEMORY[0x1F4188790](v15);
  int v89 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v72 = (uint64_t)&v70 - v18;
  uint64_t v19 = type metadata accessor for AttributedString();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  int v79 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v70 - v32;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v22, v98, v19, v31);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  Range<>.init<A>(_:in:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v27);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of Range<AttributedString.Index>((uint64_t)v25, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    uint64_t v35 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    uint64_t v71 = v33;
    uint64_t v80 = v27;
    uint64_t v78 = v35;
    AttributedString.subscript.getter();
    AttributedSubstring.runs.getter();
    v86[1](v14, v87);
    uint64_t v36 = v99;
    uint64_t v37 = *(void (***)(char *, uint64_t))(v99 + 16);
    uint64_t v38 = (uint64_t)v89;
    uint64_t v87 = v99 + 16;
    id v86 = v37;
    ((void (*)(char *, char *, uint64_t))v37)(v89, v12, v10);
    uint64_t v39 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
    uint64_t v40 = v96;
    uint64_t v91 = v39;
    dispatch thunk of Collection.startIndex.getter();
    char v41 = *(void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v99 = v36 + 8;
    CGFloat v85 = v41;
    v41(v12, v10);
    uint64_t v42 = v90;
    uint64_t v43 = v97;
    uint64_t v44 = v95;
    (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v38 + v90[9], v40, v95);
    uint64_t v45 = v72;
    outlined init with take of Range<AttributedString.Index>(v38, v72, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    uint64_t v46 = v45 + v42[9];
    char v47 = *(int **)(v43 + 16);
    v43 += 16;
    int v89 = (char *)(v43 - 8);
    CGFloat v90 = v47;
    uint64_t v84 = (void (**)(char *))(v74 + 2);
    uint64_t v92 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 7);
    uint64_t v83 = (unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 6);
    uint64_t v76 = (void (**)(char *, char *, uint64_t))(v74 + 4);
    uint64_t v75 = (void (**)(char *, uint64_t))(v88 + 8);
    ++v74;
    uint64_t v73 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v88 = v12;
    uint64_t v48 = v44;
    uint64_t v97 = v43;
    uint64_t v77 = v46;
    ((void (*)(char *, uint64_t, uint64_t))v47)(v40, v46, v44);
    while (1)
    {
      id v53 = v93;
      dispatch thunk of Collection.endIndex.getter();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
      uint64_t v54 = v45;
      char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = v10;
      unsigned __int8 v57 = *(void (**)(char *, uint64_t))v89;
      (*(void (**)(char *, uint64_t))v89)(v53, v48);
      v57(v40, v48);
      if (v55) {
        break;
      }
      uint64_t v58 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v59 = v94;
      uint64_t v60 = v102;
      (*v84)(v94);
      v58(v104, 0);
      uint64_t v61 = v88;
      uint64_t v62 = v54;
      ((void (*)(char *, uint64_t, uint64_t))v86)(v88, v54, v56);
      dispatch thunk of Collection.formIndex(after:)();
      v85(v61, v56);
      (*v92)(v59, 0, 1, v60);
      if ((*v83)(v59, 1, v60) == 1) {
        goto LABEL_12;
      }
      uint64_t v63 = v56;
      uint64_t v64 = v95;
      (*v76)(v100, v59, v60);
      AttributedString.Runs.Run.attributes.getter();
      uint64_t v65 = Dictionary<>.init(_:)();
      swift_bridgeObjectRetain();
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
      char v68 = v67;
      swift_bridgeObjectRelease();
      if (v68)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v103 = v65;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v65 = v103;
        }

        outlined init with take of Any((_OWORD *)(*(void *)(v65 + 56) + 32 * v66), v104);
        specialized _NativeDictionary._delete(at:)(v66, v65);
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v104, 0, sizeof(v104));
      }
      _ss11AnyHashableVSgWOhTm_1((uint64_t)v104, (unint64_t *)&lazy cache variable for type metadata for Any?, v73);
      uint64_t v49 = (uint64_t)v79;
      char v50 = v100;
      AttributedString.Runs.Run.range.getter();
      uint64_t v51 = v101;
      AttributeContainer.init(_:)();
      uint64_t v52 = (void (*)(_OWORD *, void))AttributedString.subscript.modify();
      AttributedSubstring.setAttributes(_:)();
      (*v75)(v51, v81);
      v52(v104, 0);
      outlined destroy of Range<AttributedString.Index>?(v49, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      (*v74)(v50, v102);
      uint64_t v48 = v64;
      uint64_t v40 = v96;
      uint64_t v10 = v63;
      uint64_t v45 = v62;
      ((void (*)(char *, uint64_t, uint64_t))v90)(v96, v77, v48);
    }
    uint64_t v62 = v54;
    (*v92)(v94, 1, 1, v102);
LABEL_12:
    outlined destroy of Range<AttributedString.Index>?(v62, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    return outlined destroy of Range<AttributedString.Index>?((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  }
  return result;
}

id NSSwiftAttributedString.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit(type metadata accessor for NSSwiftAttributedString);
}

uint64_t ObjC metadata update function for NSSwiftAttributedString()
{
  return type metadata accessor for NSSwiftAttributedString(0);
}

uint64_t type metadata accessor for NSSwiftAttributedString(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NSSwiftAttributedString);
}

uint64_t type metadata accessor for _NSSwiftAttributedStringStorage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _NSSwiftAttributedStringStorage);
}

void @objc NSSwiftAttributedString.init(itemProviderData:typeIdentifier:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t NSSwiftMutableAttributedString.length.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  uint64_t v51 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v43 = (char *)&v40 - v5;
  uint64_t v6 = type metadata accessor for AttributedString.Index();
  uint64_t v41 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v50 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v40 - v16;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v52 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v45 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v46 = (uint64_t)&v40 - v21;
  uint64_t v22 = v1 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
  swift_beginAccess();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v23(v17, v22, v11);
  AttributedString.startIndex.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v49 = v17;
  v24(v17, v11);
  uint64_t v44 = v22;
  uint64_t v25 = v22;
  uint64_t v26 = v50;
  uint64_t v42 = v12 + 16;
  uint64_t v40 = v23;
  v23(v14, v25, v11);
  AttributedString.endIndex.getter();
  uint64_t v47 = v11;
  v24(v14, v11);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v28 = v51;
    uint64_t v29 = v43;
    uint64_t v30 = &v43[*(int *)(v51 + 48)];
    uint64_t v31 = v41;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v32(v43, v10, v6);
    v32(v30, v26, v6);
    uint64_t v33 = v48;
    double v34 = &v48[*(int *)(v28 + 48)];
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v35(v48, v29, v6);
    v35(v34, v30, v6);
    uint64_t v36 = (uint64_t)v45;
    v32(v45, v33, v6);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
    v37(v34, v6);
    uint64_t v38 = &v33[*(int *)(v51 + 48)];
    v32(v33, v29, v6);
    v32(v38, v30, v6);
    v32((char *)(v36 + *(int *)(v52 + 36)), v38, v6);
    v37(v33, v6);
    outlined init with take of Range<AttributedString.Index>(v36, v46, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    v40(v49, v44, v47);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    _NSRange.init<A, B>(_:in:)();
    return v39;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t NSSwiftMutableAttributedString.attributes(at:longestEffectiveRange:in:)(uint64_t a1, NSRange *a2, NSUInteger a3, NSUInteger a4)
{
  uint64_t v9 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() == a1 || (uint64_t)objc_msgSend(v4, sel_length) < 1)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    return specialized Dictionary.init(dictionaryLiteral:)(v15);
  }
  else
  {
    uint64_t v12 = (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    outlined init with copy of _NSSwiftAttributedStringStorage(v12, (uint64_t)v11, type metadata accessor for _NSSwiftAttributedStringStorage);
    unint64_t v13 = _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(a1, (uint64_t *)a2);
    if (a2)
    {
      v18.location = a3;
      v18.length = a4;
      *a2 = NSIntersectionRange(*a2, v18);
    }
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v11, type metadata accessor for _NSSwiftAttributedStringStorage);
    return v13;
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.replaceCharacters(in:with:)(__C::_NSRange in, NSAttributedString with)
{
  Swift::Int length = in.length;
  Swift::Int location = in.location;
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != location)
  {
    Class isa = with.super.isa;
    id v22 = v2;
    uint64_t v17 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    uint64_t v21 = v6;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v17, v5);
    uint64_t v18 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    Swift::Int v23 = location;
    uint64_t v24 = v18;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) != 1)
    {
      outlined init with take of Range<AttributedString.Index>((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      type metadata accessor for _NSSwiftAttributedStringStorage(0);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      Class v19 = isa;
      RichTextAttributeResolver.swiftUIAttributedString(for:)(isa, (uint64_t)v8);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_beginAccess();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      AttributedString.replaceSubrange<A, B>(_:with:)();
      swift_endAccess();
      uint64_t v20 = (char *)[(objc_class *)v19 length];
      if (!__OFSUB__(v20, length))
      {
        objc_msgSend(v22, sel_edited_range_changeInLength_, 3, v23, length, &v20[-length]);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
        outlined destroy of Range<AttributedString.Index>?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.replaceCharacters(in:with:)(__C::_NSRange in, Swift::String with)
{
  Swift::String v24 = with;
  Swift::Int length = in.length;
  Swift::Int location = in.location;
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = NSNotFound.getter();
  Swift::Int v25 = location;
  if (v17 != location)
  {
    id v22 = v2;
    uint64_t v18 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v18, v5);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    Swift::Int v23 = length;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
    {
      __break(1u);
    }
    else
    {
      outlined init with take of Range<AttributedString.Index>((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      Swift::String v27 = v24;
      swift_beginAccess();
      Class v19 = (void (*)(char *, void))AttributedString.characters.modify();
      lazy protocol witness table accessor for type String and conformance String();
      AttributedString.CharacterView.replaceSubrange<A>(_:with:)();
      v19(v26, 0);
      swift_endAccess();
      swift_bridgeObjectRetain();
      uint64_t v20 = String.UTF16View.count.getter();
      swift_bridgeObjectRelease();
      objc_msgSend(v22, sel_edited_range_changeInLength_, 2, v25, v23, v20);
      outlined destroy of Range<AttributedString.Index>?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    }
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.setAttributes(_:range:)(Swift::OpaquePointer_optional _, __C::_NSRange range)
{
  Swift::Int location = range.location;
  uint64_t v3 = *(void *)&_.is_nil;
  rawuint64_t Value = _.value._rawValue;
  uint64_t v4 = type metadata accessor for AttributeContainer();
  uint64_t v30 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v29 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != v3)
  {
    uint64_t v26 = v2;
    uint64_t v27 = v4;
    uint64_t v18 = (uint64_t)v2 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = v3;
      outlined init with take of Range<AttributedString.Index>((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      type metadata accessor for _NSSwiftAttributedStringStorage(0);
      unint64_t v19 = (unint64_t)rawValue;
      if (rawValue)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        unint64_t v20 = v19;
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      }
      uint64_t v21 = v26;
      swift_bridgeObjectRetain();
      uint64_t v22 = v29;
      RichTextAttributeResolver.swiftUIAttributes(for:)(v20, v29);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      Swift::Int v23 = (void (*)(char *, void))AttributedString.subscript.modify();
      AttributedSubstring.setAttributes(_:)();
      v23(v32, 0);
      swift_endAccess();
      objc_msgSend(v21, sel_edited_range_changeInLength_, 1, v25, location, 0);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v22, v27);
      outlined destroy of Range<AttributedString.Index>?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    }
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.addAttributes(_:range:)(Swift::OpaquePointer _, __C::_NSRange range)
{
  Swift::Int length = range.length;
  Swift::Int location = range.location;
  rawuint64_t Value = _._rawValue;
  uint64_t v5 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v36 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributeContainer();
  uint64_t v40 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v39 = (uint64_t)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v41 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v35 = (uint64_t)&v29 - v21;
  if (NSNotFound.getter() != location)
  {
    uint64_t v30 = v7;
    id v31 = v2;
    uint64_t v22 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v22, v9);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    Swift::Int v32 = location;
    Swift::Int v33 = length;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v41) == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = v35;
      outlined init with take of Range<AttributedString.Index>((uint64_t)v15, v35, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      type metadata accessor for _NSSwiftAttributedStringStorage(0);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v24 = v39;
      RichTextAttributeResolver.swiftUIAttributes(for:)((uint64_t)rawValue, v39);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined init with copy of _NSSwiftAttributedStringStorage(v23, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      swift_beginAccess();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      uint64_t v25 = (void (*)(char *, void))AttributedString.subscript.modify();
      uint64_t v27 = v36;
      uint64_t v26 = v37;
      uint64_t v28 = v38;
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, *MEMORY[0x1E4F272C8], v38);
      AttributedSubstring.mergeAttributes(_:mergePolicy:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
      v25(v42, 0);
      outlined destroy of Range<AttributedString.Index>?((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      swift_endAccess();
      objc_msgSend(v31, sel_edited_range_changeInLength_, 1, v32, v33, 0);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v24, v30);
      outlined destroy of Range<AttributedString.Index>?(v23, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    }
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.insert(_:at:)(NSAttributedString _, Swift::Int at)
{
  Class isa = _.super.isa;
  uint64_t v33 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.Index?, MEMORY[0x1E4F27388], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for AttributedString.Index();
  uint64_t v32 = *(void *)(v10 - 8);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v27 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(v2, sel_string, v11);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::Int v31 = at;
  String.UTF16View.index(_:offsetBy:)();
  swift_bridgeObjectRelease();
  id v29 = v2;
  uint64_t v14 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
  swift_beginAccess();
  uint64_t v30 = v4;
  uint64_t v15 = v4;
  uint64_t v16 = v33;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v6, v14, v33);
  uint64_t v17 = (uint64_t)v6;
  uint64_t v26 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  AttributedString.Index.init<A>(_:within:)();
  uint64_t v18 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v10) == 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v20 = v27;
    uint64_t v25 = v10;
    v19(v27, v9, v10);
    type metadata accessor for _NSSwiftAttributedStringStorage(0);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    Class v21 = isa;
    RichTextAttributeResolver.swiftUIAttributedString(for:)(isa, v17);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_beginAccess();
    AttributedString.insert<A>(_:at:)();
    swift_endAccess();
    id v22 = [(objc_class *)v21 length];
    id v23 = [(objc_class *)v21 length];
    objc_msgSend(v29, sel_edited_range_changeInLength_, 3, v31, v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v17, v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v25);
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.append(_:)(NSAttributedString a1)
{
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(v1, sel_length, v5);
  swift_beginAccess();
  type metadata accessor for _NSSwiftAttributedStringStorage(0);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  RichTextAttributeResolver.swiftUIAttributedString(for:)(a1.super.isa, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_beginAccess();
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  AttributedString.append<A>(_:)();
  swift_endAccess();
  NSAttributedString.range.getter();
  uint64_t v9 = v8;
  NSAttributedString.range.getter();
  objc_msgSend(v1, sel_edited_range_changeInLength_, 3, v12, v9, v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.deleteCharacters(in:)(__C::_NSRange in)
{
  Swift::Int length = in.length;
  Swift::Int location = in.location;
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != location)
  {
    id v15 = objc_msgSend(v1, sel_length);
    id v20 = v1;
    id v21 = v15;
    uint64_t v16 = &v1[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v16, v3);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    Swift::Int v17 = length;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1)
    {
      outlined init with take of Range<AttributedString.Index>((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      swift_beginAccess();
      uint64_t v18 = (void (*)(char *, void))AttributedString.characters.modify();
      type metadata accessor for AttributedString.CharacterView();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
      type metadata accessor for EmptyCollection<Character>(0, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBBB60]);
      lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>();
      dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)();
      v18(v23, 0);
      swift_endAccess();
      if (!__OFSUB__(v17, v21))
      {
        objc_msgSend(v20, sel_edited_range_changeInLength_, 2, location, v17, v17 - (void)v21);
        outlined destroy of Range<AttributedString.Index>?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

NSAttributedString_optional __swiftcall NSSwiftMutableAttributedString._nsAttributedSubstring(from:)(__C::_NSRange from)
{
  __C::_NSRange v25 = from;
  uint64_t v2 = type metadata accessor for AttributedSubstring();
  MEMORY[0x1F4188790](v2 - 8);
  v24[1] = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  MEMORY[0x1F4188790](v24[0]);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  Swift::Int v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v1 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
    id v20 = 0;
  }
  else
  {
    outlined init with take of Range<AttributedString.Index>((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    outlined init with copy of _NSSwiftAttributedStringStorage(v18, (uint64_t)v5, type metadata accessor for _NSSwiftAttributedStringStorage);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    AttributedString.subscript.getter();
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v5, type metadata accessor for _NSSwiftAttributedStringStorage);
    AttributedString.init(_:)();
    uint64_t v21 = v18 + *(int *)(v24[0] + 20);
    uint64_t v22 = *(void *)(v21 + 16);
    long long v26 = *(_OWORD *)v21;
    uint64_t v27 = v22;
    id v20 = (objc_class *)RichTextAttributeResolver.nsAttributedString(for:)((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  }
  id v23 = v20;
  result.value.super.Class isa = v23;
  result.Swift::Bool is_nil = v19;
  return result;
}

void @objc NSSwiftAttributedString.init(html:options:documentAttributes:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3)
  {
    id v5 = a4;
    id v6 = a3;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(fileURL:options:documentAttributes:)()
{
  uint64_t v0 = type metadata accessor for URL();
  MEMORY[0x1F4188790](v0 - 8);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(data:options:documentAttributes:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(__contentsOfMarkdownFileAt:options:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  if (a5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v12, 1, v10);
  id v13 = a4;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(__markdown:options:baseURL:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v17 - v9;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = type metadata accessor for URL();
    uint64_t v16 = 0;
    uint64_t v15 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = 1;
  }
  (*v15)(v10, v16, 1, v14);
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(__markdownString:options:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - v8;
  if (a5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v12 = 0;
    id v11 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    id v11 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = 1;
  }
  (*v11)(v9, v12, 1, v10);
  id v13 = a4;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(attributedString:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NSSwiftMutableAttributedString.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit(type metadata accessor for NSSwiftMutableAttributedString);
}

id NSSwiftAttributedString.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t ObjC metadata update function for NSSwiftMutableAttributedString()
{
  return type metadata accessor for NSSwiftMutableAttributedString(0);
}

uint64_t type metadata accessor for NSSwiftMutableAttributedString(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NSSwiftMutableAttributedString);
}

uint64_t type metadata completion function for NSSwiftAttributedString()
{
  uint64_t result = type metadata accessor for _NSSwiftAttributedStringStorage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _NSSwiftAttributedStringStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    v9[2] = v10[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for _NSSwiftAttributedStringStorage(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = v9[1];
  swift_retain();
  swift_release();
  *(void *)(v8 + 16) = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_release();
  *(void *)(v8 + 8) = v9[1];
  swift_release();
  *(void *)(v8 + 16) = v9[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18781ACE4);
}

uint64_t sub_18781ACE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 16);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18781ADBC);
}

uint64_t sub_18781ADBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for _NSSwiftAttributedStringStorage()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for Range<AttributedString.Index>?(uint64_t a1)
{
}

uint64_t outlined destroy of Range<AttributedString.Index>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>;
  if (!lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>)
  {
    type metadata accessor for EmptyCollection<Character>(255, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBBB60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>);
  }
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  uint64_t v0 = static name in Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:);
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for static AttributedStringKey.runBoundaries.getter in conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  return MEMORY[0x1F40E4140]();
}

uint64_t protocol witness for static AttributedStringKey.inheritedByAddedText.getter in conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  return MEMORY[0x1F40E4150]();
}

uint64_t protocol witness for static AttributedStringKey.invalidationConditions.getter in conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  return MEMORY[0x1F40E4160]();
}

uint64_t outlined init with take of Range<AttributedString.Index>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (NSAttributedStringKey, Any)()
{
  if (!lazy cache variable for type metadata for (NSAttributedStringKey, Any))
  {
    type metadata accessor for NSAttributedStringKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any));
    }
  }
}

uint64_t specialized _NSSwiftAttributedStringStorage.enumerateAttributes(in:options:using:)(char *a1, uint64_t a2, void (**a3)(char *, char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v136 = a5;
  uint64_t v140 = a4;
  CGRect v116 = a3;
  uint64_t v132 = a2;
  long long v130 = a1;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v5 - 8);
  long long v133 = (char *)v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for AttributedString.Runs.Run();
  CGRect v109 = *(void (***)(char *, uint64_t))(v134 - 8);
  MEMORY[0x1F4188790](v134);
  CGRect v117 = (char *)v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  CGRect v122 = (char *)v108 - v9;
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v113 = v10;
  MEMORY[0x1F4188790](v10);
  CGRect v112 = (unsigned int (**)(void (**)(char *), uint64_t, uint64_t))((char *)v108
                                                                                      - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  CGRect v119 = (char *)v108 - v13;
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v14 - 8);
  CGRect v118 = (void (**)(char *))((char *)v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  CGRect v123 = (char *)v108 - v17;
  uint64_t v18 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v139 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  long long v135 = (char *)v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v138 = (char *)v108 - v21;
  uint64_t v137 = type metadata accessor for AttributedString.Runs();
  uint64_t v121 = *(void *)(v137 - 8);
  MEMORY[0x1F4188790](v137);
  CGRect v120 = (char *)v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AttributedSubstring();
  CGRect v115 = *(void (***)(char *, uint64_t))(v23 - 8);
  MEMORY[0x1F4188790](v23);
  __C::_NSRange v25 = (char *)v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<AttributedString.Runs>();
  MEMORY[0x1F4188790](v26 - 8);
  CGRect v111 = (char *)v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator();
  CGRect v114 = v28;
  MEMORY[0x1F4188790](v28);
  CGRect v110 = (char *)v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  CGRect v124 = (void (**)(void (**)(char *), uint64_t, uint64_t, uint64_t))((char *)v108 - v31);
  uint64_t v32 = type metadata accessor for AttributedString();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v36 - 8);
  uint64_t v38 = (char *)v108 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  long long v129 = (char *)v108 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v44 = MEMORY[0x1F4188790](v43);
  uint64_t v46 = (char *)v108 - v45;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  uint64_t v131 = v33 + 16;
  long long v128 = v47;
  ((void (*)(char *, uint64_t, uint64_t, double))v47)(v35, v140, v32, v44);
  uint64_t v48 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  long long v130 = v35;
  uint64_t v132 = v32;
  uint64_t v127 = v48;
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40) == 1)
  {
    uint64_t v49 = type metadata accessor for Range<AttributedString.Index>?;
    uint64_t v50 = (uint64_t)v38;
  }
  else
  {
    outlined init with take of Range<AttributedString.Index>((uint64_t)v38, (uint64_t)v46, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    uint64_t v51 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    v108[0] = v46;
    uint64_t v125 = v51;
    uint64_t v126 = v40;
    AttributedString.subscript.getter();
    uint64_t v52 = v120;
    AttributedSubstring.runs.getter();
    v115[1](v25, v23);
    uint64_t v53 = v137;
    uint64_t v54 = v52;
    if ((v116 & 2) != 0)
    {
      uint64_t v81 = v121;
      uint64_t v82 = v111;
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v111, v54, v137);
      uint64_t v83 = (uint64_t)v110;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v110, v82, v53);
      uint64_t v84 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
      CGFloat v85 = v138;
      CGRect v120 = (char *)v84;
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v53);
      id v86 = v114;
      uint64_t v87 = v139;
      (*(void (**)(uint64_t, char *, uint64_t))(v139 + 32))(v83 + *((int *)v114 + 9), v85, v18);
      uint64_t v88 = v124;
      outlined init with take of Range<AttributedString.Index>(v83, (uint64_t)v124, (uint64_t (*)(void))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator);
      uint64_t v89 = *((int *)v86 + 9);
      uint64_t v121 = *(void *)(v87 + 16);
      CGFloat v90 = (char *)v88 + v89;
      uint64_t v139 = v87 + 16;
      uint64_t v91 = (void (**)(char *, uint64_t))(v87 + 8);
      uint64_t v63 = v88;
      CGRect v118 = (void (**)(char *))(v109 + 2);
      CGRect v119 = (char *)(v109 + 7);
      CGRect v117 = (char *)(v109 + 6);
      CGRect v116 = (void (**)(char *, char *, uint64_t))(v109 + 4);
      CGRect v115 = (void (**)(char *, uint64_t))(v136 + 16);
      CGRect v114 = v109 + 1;
      uint64_t v113 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v92 = v135;
      while (1)
      {
        uint64_t v93 = v138;
        ((void (*)(char *, char *, uint64_t))v121)(v138, v90, v18);
        dispatch thunk of Collection.startIndex.getter();
        _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
        char v94 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v95 = *v91;
        (*v91)(v92, v18);
        v95(v93, v18);
        if (v94) {
          break;
        }
        _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
        dispatch thunk of BidirectionalCollection.formIndex(before:)();
        CGRect v96 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v97 = v123;
        uint64_t v98 = v134;
        (*v118)(v123);
        v96(v141, 0);
        (*(void (**)(char *, void, uint64_t, uint64_t))v119)(v97, 0, 1, v98);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v117)(v97, 1, v98) == 1) {
          goto LABEL_19;
        }
        uint64_t v99 = v122;
        (*v116)(v122, v97, v98);
        v141[0] = 0;
        AttributedString.Runs.Run.attributes.getter();
        Dictionary<>.init(_:)();
        AttributedString.Runs.Run.range.getter();
        v128(v130, v140, v132);
        uint64_t v100 = _NSRange.init<A, B>(_:in:)();
        uint64_t v102 = v101;
        type metadata accessor for NSAttributedStringKey(0);
        _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, Class, uint64_t, uint64_t, char *))(v136 + 16))(v136, isa, v100, v102, v141);
        swift_bridgeObjectRelease();

        (*v114)(v99, v98);
        if (v141[0] == 1)
        {
          CGRect v104 = (uint64_t (*)(void))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator;
          CGRect v105 = v124;
          goto LABEL_21;
        }
        uint64_t v63 = v124;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v119)(v123, 1, 1, v134);
LABEL_19:
      CGRect v106 = (uint64_t (*)(void))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator;
LABEL_20:
      CGRect v104 = v106;
      CGRect v105 = v63;
    }
    else
    {
      uint64_t v55 = v121;
      uint64_t v56 = *(void (***)(char *, uint64_t))(v121 + 16);
      uint64_t v57 = (uint64_t)v112;
      CGRect v116 = (void (**)(char *, char *, uint64_t))(v121 + 16);
      CGRect v115 = v56;
      ((void (*)(unsigned int (**)(void (**)(char *), uint64_t, uint64_t), char *, uint64_t))v56)(v112, v54, v137);
      uint64_t v58 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
      uint64_t v59 = v138;
      CGRect v123 = (char *)v58;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v60 = *(void (***)(char *, uint64_t))(v55 + 8);
      uint64_t v121 = v55 + 8;
      CGRect v114 = v60;
      ((void (*)(char *, uint64_t))v60)(v54, v53);
      uint64_t v61 = v113;
      uint64_t v62 = v139;
      (*(void (**)(uint64_t, char *, uint64_t))(v139 + 32))(v57 + *(int *)(v113 + 36), v59, v18);
      uint64_t v63 = (void (**)(void (**)(char *), uint64_t, uint64_t, uint64_t))v119;
      outlined init with take of Range<AttributedString.Index>(v57, (uint64_t)v119, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
      uint64_t v64 = (char *)v63 + *(int *)(v61 + 36);
      CGRect v122 = *(char **)(v62 + 16);
      uint64_t v139 = v62 + 16;
      uint64_t v65 = (void (**)(char *, uint64_t))(v62 + 8);
      uint64_t v113 = (uint64_t)(v109 + 2);
      CGRect v124 = (void (**)(void (**)(char *), uint64_t, uint64_t, uint64_t))(v109 + 7);
      CGRect v112 = (unsigned int (**)(void (**)(char *), uint64_t, uint64_t))(v109 + 6);
      CGRect v111 = (char *)(v109 + 4);
      CGRect v110 = (char *)(v136 + 16);
      ++v109;
      v108[1] = MEMORY[0x1E4FBC840] + 8;
      while (1)
      {
        unint64_t v66 = v138;
        ((void (*)(char *, char *, uint64_t))v122)(v138, v64, v18);
        char v67 = v135;
        uint64_t v68 = v137;
        dispatch thunk of Collection.endIndex.getter();
        _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
        char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v70 = *v65;
        (*v65)(v67, v18);
        v70(v66, v18);
        if (v69)
        {
          (*v124)(v118, 1, 1, v134);
LABEL_16:
          CGRect v106 = (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>;
          goto LABEL_20;
        }
        uint64_t v71 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v72 = v118;
        uint64_t v73 = v134;
        (*(void (**)(void))v113)(v118);
        v71(v141, 0);
        uint64_t v74 = v120;
        ((void (*)(char *, void (**)(void (**)(char *), uint64_t, uint64_t, uint64_t), uint64_t))v115)(v120, v63, v68);
        uint64_t v75 = v73;
        dispatch thunk of Collection.formIndex(after:)();
        ((void (*)(char *, uint64_t))v114)(v74, v68);
        (*v124)(v72, 0, 1, v73);
        if ((*v112)(v72, 1, v73) == 1) {
          goto LABEL_16;
        }
        uint64_t v76 = v117;
        (*(void (**)(char *, void (**)(char *), uint64_t))v111)(v117, v72, v73);
        v141[0] = 0;
        AttributedString.Runs.Run.attributes.getter();
        Dictionary<>.init(_:)();
        AttributedString.Runs.Run.range.getter();
        v128(v130, v140, v132);
        uint64_t v77 = _NSRange.init<A, B>(_:in:)();
        uint64_t v79 = v78;
        type metadata accessor for NSAttributedStringKey(0);
        _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
        Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, Class, uint64_t, uint64_t, char *))(v136 + 16))(v136, v80, v77, v79, v141);
        swift_bridgeObjectRelease();

        (*v109)(v76, v75);
        if (v141[0] == 1) {
          break;
        }
        uint64_t v63 = (void (**)(void (**)(char *), uint64_t, uint64_t, uint64_t))v119;
      }
      CGRect v104 = (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>;
      CGRect v105 = (void (**)(void (**)(char *), uint64_t, uint64_t, uint64_t))v119;
    }
LABEL_21:
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v105, v104);
    uint64_t v49 = type metadata accessor for Range<AttributedString.Index>;
    uint64_t v50 = v108[0];
  }
  return outlined destroy of Range<AttributedString.Index>?(v50, (uint64_t (*)(void))v49);
}

uint64_t specialized _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v212 = a6;
  uint64_t v188 = a4;
  uint64_t v210 = a3;
  unint64_t v208 = a2;
  uint64_t v202 = a1;
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for (AnyHashable?, Range<AttributedString.Index>)?, (uint64_t (*)(uint64_t))type metadata accessor for (AnyHashable?, Range<AttributedString.Index>), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v190 = (char *)&v177 - v8;
  type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator, MEMORY[0x1E4F27320]);
  CGFloat v193 = v9;
  uint64_t v177 = *((void *)v9 - 1);
  MEMORY[0x1F4188790](v9);
  CGFloat v192 = (char *)&v177 - v10;
  type metadata accessor for (AnyHashable?, Range<AttributedString.Index>)();
  uint64_t v211 = v11;
  uint64_t v191 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v194 = (uint64_t)&v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = type metadata accessor for AttributedString.Index();
  uint64_t v200 = *(void *)(v198 - 8);
  MEMORY[0x1F4188790](v198);
  v195 = (char *)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v199 = (char *)&v177 - v15;
  type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>, MEMORY[0x1E4F27330]);
  uint64_t v196 = v16;
  uint64_t v186 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  v184 = (char *)&v177 - v17;
  uint64_t v185 = type metadata accessor for AttributedString.Runs();
  uint64_t v183 = *(void *)(v185 - 8);
  MEMORY[0x1F4188790](v185);
  v181 = (char *)&v177 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for AttributedSubstring();
  uint64_t v19 = *(void *)(v182 - 8);
  MEMORY[0x1F4188790](v182);
  uint64_t v21 = (char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>, MEMORY[0x1E4FBBD30]);
  MEMORY[0x1F4188790](v22 - 8);
  unint64_t v179 = (char *)&v177 - v23;
  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator, MEMORY[0x1E4FBBD28]);
  uint64_t v180 = v24;
  MEMORY[0x1F4188790](v24);
  unsigned int v178 = (char *)&v177 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v197 = (uint64_t)&v177 - v27;
  uint64_t v28 = type metadata accessor for AttributedString();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v189 = (uint64_t)&v177 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  uint64_t v206 = (uint64_t)&v177 - v40;
  MEMORY[0x1F4188790](v41);
  uint64_t v213 = (uint64_t *)((char *)&v177 - v42);
  MEMORY[0x1F4188790](v43);
  uint64_t v45 = (char *)&v177 - v44;
  static name in Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  off_1E9018208 = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v209 = v29 + 16;
  unint64_t v205 = v47;
  v47(v31, a5, v28);
  uint64_t v48 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  unint64_t v208 = v31;
  uint64_t v210 = v28;
  uint64_t v204 = v48;
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36) == 1) {
    __break(1u);
  }
  outlined init with take of Range<AttributedString.Index>((uint64_t)v34, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  uint64_t v49 = _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
  v187 = v45;
  uint64_t v207 = v36;
  uint64_t v203 = v49;
  AttributedString.subscript.getter();
  uint64_t v50 = v181;
  AttributedSubstring.runs.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v182);
  lazy protocol witness table accessor for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)();
  uint64_t v51 = v184;
  AttributedString.Runs.subscript.getter();
  (*(void (**)(char *, uint64_t))(v183 + 8))(v50, v185);
  uint64_t v201 = a5;
  if ((v188 & 2) != 0)
  {
    uint64_t v106 = v186;
    CGRect v107 = v179;
    uint64_t v108 = v196;
    (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v179, v51, v196);
    uint64_t v109 = (uint64_t)v178;
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v178, v107, v108);
    uint64_t v110 = lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>);
    CGRect v111 = v199;
    dispatch thunk of Collection.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    uint64_t v112 = v180;
    uint64_t v113 = v200;
    (*(void (**)(uint64_t, char *, uint64_t))(v200 + 32))(v109 + *(int *)(v180 + 36), v111, v198);
    uint64_t v114 = v197;
    outlined init with take of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(v109, v197);
    uint64_t v115 = v114 + *(int *)(v112 + 36);
    CGFloat v193 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
    uint64_t v189 = a5 + 16;
    uint64_t v200 = v113 + 16;
    CGFloat v192 = (char *)(v113 + 8);
    uint64_t v190 = (char *)(v212 + 16);
    uint64_t v188 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v191 = v115;
    while (1)
    {
      CGRect v116 = v199;
      uint64_t v117 = v198;
      v193(v199, v115, v198);
      CGRect v118 = v195;
      dispatch thunk of Collection.startIndex.getter();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
      char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v120 = v114;
      uint64_t v121 = *(void (**)(char *, uint64_t))v192;
      (*(void (**)(char *, uint64_t))v192)(v118, v117);
      v121(v116, v117);
      if (v119) {
        break;
      }
      lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>);
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      uint64_t v122 = v110;
      CGRect v123 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v124 = v194;
      outlined init with copy of _NSSwiftAttributedStringStorage(v125, v194, (uint64_t (*)(void))type metadata accessor for (AnyHashable?, Range<AttributedString.Index>));
      v123(v227, 0);
      uint64_t v126 = v124 + *(int *)(v211 + 48);
      outlined init with take of AnyHashable?(v124, (uint64_t)v227);
      uint64_t v127 = (unsigned int (*)(void, void, void))v213;
      outlined init with take of Range<AttributedString.Index>(v126, (uint64_t)v213, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      char v214 = 0;
      uint64_t v128 = MEMORY[0x1E4FBB960];
      _sypSgWOcTm_0((uint64_t)v227, (uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      if (*((void *)&v222 + 1))
      {
        long long v224 = v221;
        long long v225 = v222;
        uint64_t v226 = v223;
        uint64_t v129 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
        uint64_t v130 = v201;
        uint64_t v131 = (uint64_t *)(v201 + *(int *)(v129 + 20));
        uint64_t v132 = v131[1];
        uint64_t v133 = v131[2];
        uint64_t v215 = *v131;
        uint64_t v216 = v132;
        uint64_t v217 = v133;
        uint64_t v220 = v128;
        uint64_t v219 = swift_allocObject();
        outlined init with copy of AnyHashable((uint64_t)&v224, v219 + 16);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        RichTextAttributeResolver.nsValueFromSwiftValue(nsKey:value:)(v202, (uint64_t)&v219, (uint64_t *)&v221);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v219);
        outlined init with copy of Any((uint64_t)&v221, (uint64_t)&v219);
        outlined init with copy of _NSSwiftAttributedStringStorage((uint64_t)v127, v206, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        v205(v208, v130, v210);
        uint64_t v134 = _NSRange.init<A, B>(_:in:)();
        uint64_t v136 = v135;
        uint64_t v137 = MEMORY[0x1E4FBC840] + 8;
        _sypSgWOcTm_0((uint64_t)&v219, (uint64_t)&v215, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        uint64_t v138 = v218;
        if (v218)
        {
          uint64_t v139 = __swift_project_boxed_opaque_existential_1(&v215, v218);
          uint64_t v140 = *(void *)(v138 - 8);
          double v141 = MEMORY[0x1F4188790](v139);
          long long v143 = (char *)&v177 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v140 + 16))(v143, v141);
          uint64_t v144 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v140 + 8))(v143, v138);
          uint64_t v127 = (unsigned int (*)(void, void, void))v213;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v215);
        }
        else
        {
          uint64_t v144 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v212 + 16))(v212, v144, v134, v136, &v214);
        swift_unknownObjectRelease();
        _ss11AnyHashableVSgWOhTm_1((uint64_t)&v219, (unint64_t *)&lazy cache variable for type metadata for Any?, v137);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v221);
        outlined destroy of AnyHashable((uint64_t)&v224);
        outlined destroy of Range<AttributedString.Index>?((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        _ss11AnyHashableVSgWOhTm_1((uint64_t)v227, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
        uint64_t v115 = v191;
      }
      else
      {
        _ss11AnyHashableVSgWOhTm_1((uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v128);
        uint64_t v145 = *(void *)(v189 + *(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20));
        uint64_t v146 = v201;
        if (*(void *)(v145 + 16)
          && (swift_bridgeObjectRetain(),
              specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v202),
              char v148 = v147,
              swift_bridgeObjectRelease(),
              (v148 & 1) != 0))
        {
          if (*(void *)(v145 + 16))
          {
            long long v149 = v202;
            unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v149);
            if (v151)
            {
              outlined init with copy of Any(*(void *)(v145 + 56) + 32 * v150, (uint64_t)&v224);
            }
            else
            {
              long long v225 = 0u;
              long long v224 = 0u;
            }
          }
          else
          {
            long long v225 = 0u;
            long long v224 = 0u;
          }
          outlined init with copy of _NSSwiftAttributedStringStorage((uint64_t)v127, v206, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          v205(v208, v146, v210);
          uint64_t v165 = _NSRange.init<A, B>(_:in:)();
          uint64_t v186 = v166;
          uint64_t v167 = MEMORY[0x1E4FBC840] + 8;
          _sypSgWOcTm_0((uint64_t)&v224, (uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
          uint64_t v168 = *((void *)&v222 + 1);
          if (*((void *)&v222 + 1))
          {
            v169 = __swift_project_boxed_opaque_existential_1(&v221, *((uint64_t *)&v222 + 1));
            uint64_t v170 = *(void *)(v168 - 8);
            double v171 = MEMORY[0x1F4188790](v169);
            CGFloat v173 = (char *)&v177 - ((v172 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, double))(v170 + 16))(v173, v171);
            uint64_t v174 = _bridgeAnythingToObjectiveC<A>(_:)();
            (*(void (**)(char *, uint64_t))(v170 + 8))(v173, v168);
            uint64_t v128 = MEMORY[0x1E4FBB960];
            uint64_t v127 = (unsigned int (*)(void, void, void))v213;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v221);
          }
          else
          {
            uint64_t v174 = 0;
          }
          uint64_t v115 = v191;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v212 + 16))(v212, v174, v165, v186, &v214);
          swift_unknownObjectRelease();
          _ss11AnyHashableVSgWOhTm_1((uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for Any?, v167);
          outlined destroy of Range<AttributedString.Index>?((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          _ss11AnyHashableVSgWOhTm_1((uint64_t)v227, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v128);
        }
        else
        {
          _sypSgWOcTm_0((uint64_t)v227, (uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v128);
          if (*((void *)&v225 + 1))
          {
            *((void *)&v222 + 1) = v128;
            uint64_t v152 = swift_allocObject();
            *(void *)&long long v221 = v152;
            long long v153 = v225;
            *(_OWORD *)(v152 + 16) = v224;
            *(_OWORD *)(v152 + 32) = v153;
            *(void *)(v152 + 48) = v226;
          }
          else
          {
            _ss11AnyHashableVSgWOhTm_1((uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v128);
            long long v221 = 0u;
            long long v222 = 0u;
          }
          outlined init with copy of _NSSwiftAttributedStringStorage((uint64_t)v127, v206, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          v205(v208, v146, v210);
          uint64_t v154 = _NSRange.init<A, B>(_:in:)();
          uint64_t v156 = v155;
          _sypSgWOcTm_0((uint64_t)&v221, (uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for Any?, v188);
          uint64_t v157 = *((void *)&v225 + 1);
          if (*((void *)&v225 + 1))
          {
            CGRect v158 = __swift_project_boxed_opaque_existential_1(&v224, *((uint64_t *)&v225 + 1));
            uint64_t v159 = *(void *)(v157 - 8);
            double v160 = MEMORY[0x1F4188790](v158);
            CGFloat v162 = (char *)&v177 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, double))(v159 + 16))(v162, v160);
            uint64_t v163 = _bridgeAnythingToObjectiveC<A>(_:)();
            CGFloat v164 = v162;
            uint64_t v128 = MEMORY[0x1E4FBB960];
            (*(void (**)(char *, uint64_t))(v159 + 8))(v164, v157);
            uint64_t v127 = (unsigned int (*)(void, void, void))v213;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
          }
          else
          {
            uint64_t v163 = 0;
          }
          uint64_t v115 = v191;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v212 + 16))(v212, v163, v154, v156, &v214);
          swift_unknownObjectRelease();
          outlined destroy of Range<AttributedString.Index>?((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          _ss11AnyHashableVSgWOhTm_1((uint64_t)v227, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v128);
          _ss11AnyHashableVSgWOhTm_1((uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        }
      }
      uint64_t v114 = v197;
      if (v214 == 1)
      {
        uint64_t v175 = v197;
        goto LABEL_61;
      }
      uint64_t v110 = v122;
    }
    uint64_t v175 = v120;
LABEL_61:
    outlined destroy of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(v175);
    uint64_t v105 = (uint64_t)v187;
  }
  else
  {
    uint64_t v52 = v196;
    MEMORY[0x18C109EB0](v196);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v51, v52);
    uint64_t v53 = (uint64_t)v190;
    AttributedString.Runs.AttributesSlice1.Iterator.next()();
    uint64_t v54 = *(void **)(v191 + 48);
    uint64_t v55 = v211;
    v191 += 48;
    uint64_t v213 = v54;
    unsigned int v56 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v54)(v53, 1, v211);
    uint64_t v57 = (uint64_t)v187;
    uint64_t v58 = v189;
    if (v56 != 1)
    {
      v199 = (char *)(a5 + 16);
      uint64_t v200 = v212 + 16;
      uint64_t v59 = MEMORY[0x1E4FBB960];
      uint64_t v198 = MEMORY[0x1E4FBC840] + 8;
      do
      {
        uint64_t v60 = v53 + *(int *)(v55 + 48);
        outlined init with take of AnyHashable?(v53, (uint64_t)v227);
        outlined init with take of Range<AttributedString.Index>(v60, v58, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        char v214 = 0;
        _sypSgWOcTm_0((uint64_t)v227, (uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
        if (*((void *)&v222 + 1))
        {
          long long v224 = v221;
          long long v225 = v222;
          uint64_t v226 = v223;
          uint64_t v61 = (uint64_t *)(a5 + *(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20));
          uint64_t v62 = v61[1];
          uint64_t v63 = v58;
          uint64_t v64 = v61[2];
          uint64_t v215 = *v61;
          uint64_t v216 = v62;
          uint64_t v217 = v64;
          uint64_t v220 = v59;
          uint64_t v219 = swift_allocObject();
          outlined init with copy of AnyHashable((uint64_t)&v224, v219 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          RichTextAttributeResolver.nsValueFromSwiftValue(nsKey:value:)(v202, (uint64_t)&v219, (uint64_t *)&v221);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v219);
          outlined init with copy of Any((uint64_t)&v221, (uint64_t)&v219);
          outlined init with copy of _NSSwiftAttributedStringStorage(v63, v206, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          v205(v208, a5, v210);
          uint64_t v65 = _NSRange.init<A, B>(_:in:)();
          uint64_t v67 = v66;
          uint64_t v68 = MEMORY[0x1E4FBC840] + 8;
          _sypSgWOcTm_0((uint64_t)&v219, (uint64_t)&v215, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
          uint64_t v69 = v218;
          if (v218)
          {
            uint64_t v70 = __swift_project_boxed_opaque_existential_1(&v215, v218);
            uint64_t v71 = *(void *)(v69 - 8);
            double v72 = MEMORY[0x1F4188790](v70);
            uint64_t v74 = (char *)&v177 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, double))(v71 + 16))(v74, v72);
            uint64_t v75 = _bridgeAnythingToObjectiveC<A>(_:)();
            (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v69);
            uint64_t v57 = (uint64_t)v187;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v215);
          }
          else
          {
            uint64_t v75 = 0;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v212 + 16))(v212, v75, v65, v67, &v214);
          swift_unknownObjectRelease();
          _ss11AnyHashableVSgWOhTm_1((uint64_t)&v219, (unint64_t *)&lazy cache variable for type metadata for Any?, v68);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v221);
          outlined destroy of AnyHashable((uint64_t)&v224);
          uint64_t v58 = v189;
          outlined destroy of Range<AttributedString.Index>?(v189, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          _ss11AnyHashableVSgWOhTm_1((uint64_t)v227, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
          a5 = v201;
          uint64_t v55 = v211;
          uint64_t v53 = (uint64_t)v190;
        }
        else
        {
          _ss11AnyHashableVSgWOhTm_1((uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
          uint64_t v76 = *(void *)&v199[*(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20)];
          if (*(void *)(v76 + 16)
            && (swift_bridgeObjectRetain(),
                specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v202),
                char v78 = v77,
                swift_bridgeObjectRelease(),
                (v78 & 1) != 0))
          {
            if (*(void *)(v76 + 16))
            {
              uint64_t v79 = v202;
              unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v79);
              if (v81)
              {
                outlined init with copy of Any(*(void *)(v76 + 56) + 32 * v80, (uint64_t)&v224);
              }
              else
              {
                long long v225 = 0u;
                long long v224 = 0u;
              }
            }
            else
            {
              long long v225 = 0u;
              long long v224 = 0u;
            }
            outlined init with copy of _NSSwiftAttributedStringStorage(v58, v206, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
            v205(v208, a5, v210);
            uint64_t v94 = _NSRange.init<A, B>(_:in:)();
            uint64_t v96 = v95;
            uint64_t v97 = MEMORY[0x1E4FBC840] + 8;
            _sypSgWOcTm_0((uint64_t)&v224, (uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
            uint64_t v98 = *((void *)&v222 + 1);
            if (*((void *)&v222 + 1))
            {
              uint64_t v99 = __swift_project_boxed_opaque_existential_1(&v221, *((uint64_t *)&v222 + 1));
              uint64_t v100 = *(void *)(v98 - 8);
              double v101 = MEMORY[0x1F4188790](v99);
              uint64_t v103 = (char *)&v177 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, double))(v100 + 16))(v103, v101);
              uint64_t v104 = _bridgeAnythingToObjectiveC<A>(_:)();
              (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v98);
              uint64_t v57 = (uint64_t)v187;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v221);
            }
            else
            {
              uint64_t v104 = 0;
            }
            uint64_t v55 = v211;
            uint64_t v53 = (uint64_t)v190;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v212 + 16))(v212, v104, v94, v96, &v214);
            swift_unknownObjectRelease();
            _ss11AnyHashableVSgWOhTm_1((uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for Any?, v97);
            uint64_t v58 = v189;
            outlined destroy of Range<AttributedString.Index>?(v189, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
            _ss11AnyHashableVSgWOhTm_1((uint64_t)v227, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
            a5 = v201;
          }
          else
          {
            _sypSgWOcTm_0((uint64_t)v227, (uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
            if (*((void *)&v225 + 1))
            {
              *((void *)&v222 + 1) = v59;
              uint64_t v82 = swift_allocObject();
              *(void *)&long long v221 = v82;
              long long v83 = v225;
              *(_OWORD *)(v82 + 16) = v224;
              *(_OWORD *)(v82 + 32) = v83;
              *(void *)(v82 + 48) = v226;
            }
            else
            {
              _ss11AnyHashableVSgWOhTm_1((uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
              long long v221 = 0u;
              long long v222 = 0u;
            }
            outlined init with copy of _NSSwiftAttributedStringStorage(v58, v206, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
            v205(v208, a5, v210);
            uint64_t v84 = _NSRange.init<A, B>(_:in:)();
            uint64_t v86 = v85;
            _sypSgWOcTm_0((uint64_t)&v221, (uint64_t)&v224, (unint64_t *)&lazy cache variable for type metadata for Any?, v198);
            uint64_t v87 = *((void *)&v225 + 1);
            if (*((void *)&v225 + 1))
            {
              uint64_t v88 = __swift_project_boxed_opaque_existential_1(&v224, *((uint64_t *)&v225 + 1));
              uint64_t v89 = *(void *)(v87 - 8);
              double v90 = MEMORY[0x1F4188790](v88);
              uint64_t v92 = (char *)&v177 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, double))(v89 + 16))(v92, v90);
              uint64_t v93 = _bridgeAnythingToObjectiveC<A>(_:)();
              (*(void (**)(char *, uint64_t))(v89 + 8))(v92, v87);
              uint64_t v57 = (uint64_t)v187;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
            }
            else
            {
              uint64_t v93 = 0;
            }
            uint64_t v53 = (uint64_t)v190;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v212 + 16))(v212, v93, v84, v86, &v214);
            swift_unknownObjectRelease();
            uint64_t v58 = v189;
            outlined destroy of Range<AttributedString.Index>?(v189, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
            _ss11AnyHashableVSgWOhTm_1((uint64_t)v227, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v59);
            _ss11AnyHashableVSgWOhTm_1((uint64_t)&v221, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
            uint64_t v55 = v211;
          }
        }
        if (v214 == 1) {
          break;
        }
        AttributedString.Runs.AttributesSlice1.Iterator.next()();
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v213)(v53, 1, v55) != 1);
    }
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v177 + 8))(v192, v193);
    uint64_t v105 = v57;
  }
  return outlined destroy of Range<AttributedString.Index>?(v105, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
}

void type metadata accessor for (AnyHashable?, Range<AttributedString.Index>)()
{
  if (!lazy cache variable for type metadata for (AnyHashable?, Range<AttributedString.Index>))
  {
    type metadata accessor for EmptyCollection<Character>(255, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    type metadata accessor for Range<AttributedString.Index>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable?, Range<AttributedString.Index>));
    }
  }
}

void type metadata accessor for EmptyCollection<Character>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:);
  if (!lazy protocol witness table cache variable for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:));
  }
  return result;
}

void type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)();
    unint64_t v7 = a3(a1, &unk_1ED45C4F0, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>, MEMORY[0x1E4F27330]);
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>, MEMORY[0x1E4F27330]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AnyHashable?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EmptyCollection<Character>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18781E728()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t outlined init with take of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator, MEMORY[0x1E4FBBD28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(uint64_t a1)
{
  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator, MEMORY[0x1E4FBBD28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ReversedCollection<AttributedString.Runs>()
{
  if (!lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>)
  {
    type metadata accessor for AttributedString.Runs();
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
    unint64_t v0 = type metadata accessor for ReversedCollection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>);
    }
  }
}

void type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator()
{
  if (!lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>.Iterator)
  {
    type metadata accessor for AttributedString.Runs();
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
    unint64_t v0 = type metadata accessor for ReversedCollection.Iterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>.Iterator);
    }
  }
}

uint64_t sub_18781E980()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(unsigned char **)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:)(a1, a2, a3, a4, v4 + v10, v11);
}

uint64_t sub_18781EB54()
{
  return swift_deallocObject();
}

void type metadata accessor for IndexingIterator<AttributedString.CharacterView>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>)
  {
    type metadata accessor for AttributedString.CharacterView();
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>);
    }
  }
}

void type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)()
{
  if (!lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index))
  {
    type metadata accessor for AttributedString.Index();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index));
    }
  }
}

void *type metadata accessor for Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  return &unk_1ED45C4F0;
}

uint64_t WindowGroup.init(id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for WindowGroup();
  *a4 = 0u;
  a4[1] = 0u;
  uint64_t v9 = (void *)((char *)a4 + v8[10]);
  *(void *)((char *)a4 + v8[11]) = 0;
  unint64_t v10 = (void *)((char *)a4 + v8[12]);
  *unint64_t v10 = 0;
  v10[1] = 0;
  *uint64_t v9 = a1;
  v9[1] = a2;
  a3();
  type metadata accessor for WindowGroupRootContent();

  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.init(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v13 = (int *)type metadata accessor for WindowGroup();
  uint64_t v14 = v13[10];
  *(uint64_t *)((char *)a8 + v13[11]) = 0;
  uint64_t v15 = (uint64_t *)((char *)a8 + v14);
  uint64_t v16 = (uint64_t *)((char *)a8 + v13[12]);
  *uint64_t v16 = 0;
  v16[1] = 0;
  Text.assertUnstyled(_:options:)();
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3 & 1;
  a8[3] = a4;
  *uint64_t v15 = a5;
  v15[1] = a6;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  uint64_t v17 = swift_bridgeObjectRetain();
  a7(v17);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  type metadata accessor for WindowGroupRootContent();

  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.init(_:id:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, void (*a3)(uint64_t)@<X6>, uint64_t *a4@<X8>)
{
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  char v12 = v11 & 1;

  return WindowGroup.init(_:id:content:)(v8, v9, v12, v10, a1, a2, a3, a4);
}

uint64_t WindowGroup.init<A>(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v12 = *(void *)(a6 - 8);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  uint64_t v16 = Text.init<A>(_:)();
  WindowGroup.init(_:id:content:)(v16, v18, v17 & 1, v19, a2, a3, v22, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
}

uint64_t WindowGroup.init(content:)@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for WindowGroup();
  *a2 = 0u;
  a2[1] = 0u;
  unint64_t v5 = (void *)((char *)a2 + v4[10]);
  *unint64_t v5 = 0;
  v5[1] = 0;
  *(void *)((char *)a2 + v4[11]) = 0;
  uint64_t v6 = (void *)((char *)a2 + v4[12]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  a1();
  type metadata accessor for WindowGroupRootContent();

  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  char v11 = (int *)type metadata accessor for WindowGroup();
  uint64_t v12 = (uint64_t *)((char *)a6 + v11[10]);
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(uint64_t *)((char *)a6 + v11[11]) = 0;
  double v13 = (uint64_t *)((char *)a6 + v11[12]);
  *double v13 = 0;
  v13[1] = 0;
  Text.assertUnstyled(_:options:)();
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3 & 1;
  a6[3] = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  uint64_t v14 = swift_bridgeObjectRetain();
  a5(v14);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  type metadata accessor for WindowGroupRootContent();

  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.init(_:content:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t *a2@<X8>)
{
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  char v8 = v7 & 1;

  return WindowGroup.init(_:content:)(v4, v5, v8, v6, a1, a2);
}

uint64_t WindowGroup.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11, v9);
  uint64_t v12 = Text.init<A>(_:)();
  WindowGroup.init(_:content:)(v12, v14, v13 & 1, v15, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
}

_OWORD *initializeBufferWithCopyOfBuffer for WindowGroup(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7 & 0xF8 | 7;
  uint64_t v9 = ~v8;
  if (*(void *)(v6 + 64) <= 0x10uLL) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  uint64_t v11 = v10 + 8;
  if ((v7 & 0x1000F8) != 0
    || ((((((v10 + 8 + (((v7 & 0xF8) + 39) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v13 + ((v8 + 16) & v9));
  }
  else
  {
    unint64_t v14 = *(void *)(a2 + 24);
    if (v14 < 0xFFFFFFFF)
    {
      long long v18 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v18;
    }
    else
    {
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = *(void *)(a2 + 8);
      char v17 = *(unsigned char *)(a2 + 16);
      uint64_t v37 = v5;
      outlined copy of Text.Storage(*(void *)a2, v16, v17);
      *(void *)uint64_t v4 = v15;
      *((void *)v4 + 1) = v16;
      *((unsigned char *)v4 + 16) = v17;
      *((void *)v4 + 3) = v14;
      swift_bridgeObjectRetain();
      uint64_t v5 = v37;
    }
    uint64_t v19 = (void *)(((unint64_t)v4 + 39) & v9);
    uint64_t v20 = (unsigned __int8 *)((a2 + 39) & v9);
    unsigned int v21 = v20[v10];
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v23 = v10;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *v20;
          goto LABEL_22;
        case 2:
          int v24 = *(unsigned __int16 *)v20;
          goto LABEL_22;
        case 3:
          int v24 = *(unsigned __int16 *)v20 | (v20[2] << 16);
          goto LABEL_22;
        case 4:
          int v24 = *(_DWORD *)v20;
LABEL_22:
          int v25 = (v24 | (v22 << (8 * v10))) + 2;
          unsigned int v21 = v24 + 2;
          if (v10 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 1)
    {
      uint64_t v26 = *((void *)v20 + 1);
      *uint64_t v19 = *(void *)v20;
      *(void *)((((unint64_t)v4 + 39) & v9) + 8) = v26;
      swift_retain();
      char v27 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(((unint64_t)v4 + 39) & v9, v20, v5);
      char v27 = 0;
    }
    *((unsigned char *)v19 + v10) = v27;
    uint64_t v28 = (void *)(((unint64_t)v19 + v11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)((unint64_t)&v20[v11] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    v28[1] = v29[1];
    uint64_t v30 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v31 = *v30;
    unint64_t v32 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = (unint64_t *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v34 = *v33;
    swift_bridgeObjectRetain();
    if (v34 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
      return v4;
    }
    unint64_t v35 = v33[1];
    *(void *)unint64_t v32 = v34;
    *(void *)(v32 + 8) = v35;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for WindowGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      char v15 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v14, v15);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v15;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      char v9 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v8, v9);
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = *(void *)(a1 + 8);
      char v12 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_8:
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80) & 0xF8;
  uint64_t v20 = v19 + 39;
  uint64_t v21 = v19 + 39 + a1;
  unint64_t v22 = ~v19 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = v21 & v22;
  unint64_t v24 = (v20 + a2) & v22;
  if (*(void *)(v18 + 64) <= 0x10uLL) {
    uint64_t v25 = 16;
  }
  else {
    uint64_t v25 = *(void *)(v18 + 64);
  }
  if (v23 != v24)
  {
    unsigned int v26 = *(unsigned __int8 *)(v23 + v25);
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v25 <= 3) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *(unsigned __int8 *)v23;
          goto LABEL_21;
        case 2:
          int v29 = *(unsigned __int16 *)v23;
          goto LABEL_21;
        case 3:
          int v29 = *(unsigned __int16 *)(v21 & v22) | (*(unsigned __int8 *)((v21 & v22) + 2) << 16);
          goto LABEL_21;
        case 4:
          int v29 = *(_DWORD *)v23;
LABEL_21:
          int v30 = (v29 | (v27 << (8 * v25))) + 2;
          unsigned int v26 = v29 + 2;
          if (v25 < 4) {
            unsigned int v26 = v30;
          }
          break;
        default:
          break;
      }
    }
    if (v26 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v23, v17);
    }
    unsigned int v31 = *(unsigned __int8 *)(v24 + v25);
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v25 <= 3) {
        uint64_t v33 = v25;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *(unsigned __int8 *)v24;
          goto LABEL_35;
        case 2:
          int v34 = *(unsigned __int16 *)v24;
          goto LABEL_35;
        case 3:
          int v34 = *(unsigned __int16 *)v24 | (*(unsigned __int8 *)(v24 + 2) << 16);
          goto LABEL_35;
        case 4:
          int v34 = *(_DWORD *)v24;
LABEL_35:
          int v35 = (v34 | (v32 << (8 * v25))) + 2;
          unsigned int v31 = v34 + 2;
          if (v25 < 4) {
            unsigned int v31 = v35;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 1)
    {
      uint64_t v36 = *(void *)(v24 + 8);
      *(void *)unint64_t v23 = *(void *)v24;
      *(void *)(v23 + 8) = v36;
      *(unsigned char *)(v23 + v25) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 16))(v23, v24, v17);
      *(unsigned char *)(v23 + v25) = 0;
    }
  }
  uint64_t v37 = (void *)(((v23 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = (void *)(((v24 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v39 = *v40;
  uint64_t v41 = (void *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (unint64_t *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v43 = *v42;
  if (*v41 < 0xFFFFFFFFuLL)
  {
    if (v43 >= 0xFFFFFFFF)
    {
      unint64_t v45 = v42[1];
      *uint64_t v41 = v43;
      v41[1] = v45;
      swift_retain();
      return a1;
    }
LABEL_46:
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    return a1;
  }
  if (v43 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_46;
  }
  unint64_t v44 = v42[1];
  *uint64_t v41 = v43;
  v41[1] = v44;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for WindowGroup(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v7 = v6 + 39;
  unint64_t v8 = (unint64_t)a1 + v6 + 39;
  unint64_t v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (_OWORD *)(v8 & v9);
  uint64_t v11 = (unsigned __int8 *)(((unint64_t)a2 + v7) & v9);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v13 = v11[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *v11;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)(((unint64_t)a2 + v7) & v9) | (*(unsigned __int8 *)((((unint64_t)a2 + v7) & v9)
                                                                                            + 2) << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)v11;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    *uint64_t v10 = *(_OWORD *)v11;
    char v18 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, unsigned __int8 *))(v5 + 32))(v10, v11);
    char v18 = 0;
  }
  *((unsigned char *)v10 + v12) = v18;
  uint64_t v19 = (_OWORD *)(((unint64_t)v10 + v12 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (_OWORD *)((unint64_t)&v11[v12 + 8] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (uint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = *v24;
  if ((unint64_t)*v24 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = v24[1];
    *(void *)unint64_t v23 = v25;
    *(void *)(v23 + 8) = v26;
  }
  return a1;
}

uint64_t assignWithTake for WindowGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(a2 + 24) >= 0xFFFFFFFFuLL)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  uint64_t v14 = v13 + 39;
  uint64_t v15 = v13 + 39 + a1;
  unint64_t v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = v15 & v16;
  unint64_t v18 = (v14 + a2) & v16;
  if (*(void *)(v12 + 64) <= 0x10uLL) {
    uint64_t v19 = 16;
  }
  else {
    uint64_t v19 = *(void *)(v12 + 64);
  }
  if (v17 != v18)
  {
    unsigned int v20 = *(unsigned __int8 *)(v17 + v19);
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *(unsigned __int8 *)v17;
          goto LABEL_19;
        case 2:
          int v23 = *(unsigned __int16 *)v17;
          goto LABEL_19;
        case 3:
          int v23 = *(unsigned __int16 *)(v15 & v16) | (*(unsigned __int8 *)((v15 & v16) + 2) << 16);
          goto LABEL_19;
        case 4:
          int v23 = *(_DWORD *)v17;
LABEL_19:
          int v24 = (v23 | (v21 << (8 * v19))) + 2;
          unsigned int v20 = v23 + 2;
          if (v19 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v17, v11);
    }
    unsigned int v25 = *(unsigned __int8 *)(v18 + v19);
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v27 = v19;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *(unsigned __int8 *)v18;
          goto LABEL_33;
        case 2:
          int v28 = *(unsigned __int16 *)v18;
          goto LABEL_33;
        case 3:
          int v28 = *(unsigned __int16 *)v18 | (*(unsigned __int8 *)(v18 + 2) << 16);
          goto LABEL_33;
        case 4:
          int v28 = *(_DWORD *)v18;
LABEL_33:
          int v29 = (v28 | (v26 << (8 * v19))) + 2;
          unsigned int v25 = v28 + 2;
          if (v19 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v25 == 1)
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
      char v30 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(v17, v18, v11);
      char v30 = 0;
    }
    *(unsigned char *)(v17 + v19) = v30;
  }
  unsigned int v31 = (void *)(((v17 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v32 = (void *)(((v18 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v33 = *v34;
  int v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = (unint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      unint64_t v39 = v36[1];
      void *v35 = v37;
      v35[1] = v39;
      return a1;
    }
LABEL_45:
    *(_OWORD *)int v35 = *(_OWORD *)v36;
    return a1;
  }
  if (v37 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_45;
  }
  unint64_t v38 = v36[1];
  void *v35 = v37;
  v35[1] = v38;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= 0x10) {
    unint64_t v4 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7FFFFFFF) {
    goto LABEL_23;
  }
  __int16 v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  unint64_t v6 = ((((((v4 + ((unsigned __int16)(v5 + 39) & (unsigned __int16)~v5 & 0x1F8) + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  uint64_t v7 = v6 & 0xFFFFFFF8;
  unsigned int v8 = a2 - 2147483645;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    int v9 = 4;
  }
  else {
    int v9 = 2;
  }
  if (v8 < 0x100) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 4)
  {
    int v11 = *(_DWORD *)(a1 + v6);
    if (v11) {
      goto LABEL_19;
    }
LABEL_23:
    unint64_t v14 = *(void *)(a1 + 24);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    if ((v14 + 1) >= 2) {
      return v14;
    }
    else {
      return 0;
    }
  }
  if (v10 != 2)
  {
    int v11 = *(unsigned __int8 *)(a1 + v6);
    if (v11) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  int v11 = *(unsigned __int16 *)(a1 + v6);
  if (!v11) {
    goto LABEL_23;
  }
LABEL_19:
  int v13 = v11 - 1;
  if (v7)
  {
    int v13 = 0;
    LODWORD(v7) = *(_DWORD *)a1;
  }
  return (v7 | v13) + 0x7FFFFFFF;
}

void storeEnumTagSinglePayload for WindowGroup(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  size_t v7 = ((((((v6
           + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 39) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
           + 8) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (a3 < 0x7FFFFFFF)
  {
    int v10 = 0;
  }
  else
  {
    unsigned int v8 = a3 - 2147483645;
    if (v7) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v10 = 1;
    }
    else {
      int v10 = v9;
    }
  }
  if (a2 > 0x7FFFFFFE)
  {
    if (v7) {
      int v11 = 1;
    }
    else {
      int v11 = a2 - 2147483646;
    }
    if (v7)
    {
      unsigned int v12 = a2 - 0x7FFFFFFF;
      bzero(a1, v7);
      *(_DWORD *)a1 = v12;
    }
    switch(v10)
    {
      case 1:
        a1[v7] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v11;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x1878202D8);
      case 4:
        *(_DWORD *)&a1[v7] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          *((void *)a1 + 3) = a2;
        break;
    }
  }
}

_UNKNOWN **sub_187820300()
{
  return &protocol witness table for WindowSceneList<A>;
}

void *initializeBufferWithCopyOfBuffer for WindowSceneList(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    int v11 = (char *)a2 + 7;
    unsigned int v12 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v13 = *v12;
    unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = *(void *)(v15 + 24);
    swift_retain();
    if (v16 < 0xFFFFFFFF)
    {
      long long v20 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v20;
    }
    else
    {
      uint64_t v17 = *(void *)v15;
      uint64_t v18 = *(void *)(v15 + 8);
      char v19 = *(unsigned char *)(v15 + 16);
      outlined copy of Text.Storage(*(void *)v15, v18, v19);
      *(void *)unint64_t v14 = v17;
      *(void *)(v14 + 8) = v18;
      *(unsigned char *)(v14 + 16) = v19;
      *(void *)(v14 + 24) = *(void *)(v15 + 24);
      swift_bridgeObjectRetain();
    }
    unsigned int v21 = (void *)((v14 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v21 = *v22;
    unint64_t v23 = v7 + 16;
    unint64_t v24 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v25 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
    }
    else
    {
      uint64_t v26 = *(void *)(v25 + 8);
      *(void *)unint64_t v24 = *(void *)v25;
      *(void *)(v24 + 8) = v26;
      swift_retain();
    }
    uint64_t v27 = (void *)(((unint64_t)v4 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v28 = (void *)((unint64_t)&v11[v23] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v28;
    v27[1] = v28[1];
    *(void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_retain();
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)(v10 + 24);
  if (*(void *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v18 = *(void *)v10;
      uint64_t v19 = *(void *)(v10 + 8);
      char v20 = *(unsigned char *)(v10 + 16);
      outlined copy of Text.Storage(*(void *)v10, v19, v20);
      *(void *)unint64_t v9 = v18;
      *(void *)(v9 + 8) = v19;
      *(unsigned char *)(v9 + 16) = v20;
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v12 = *(void *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      char v14 = *(unsigned char *)(v10 + 16);
      outlined copy of Text.Storage(*(void *)v10, v13, v14);
      uint64_t v15 = *(void *)v9;
      uint64_t v16 = *(void *)(v9 + 8);
      char v17 = *(unsigned char *)(v9 + 16);
      *(void *)unint64_t v9 = v12;
      *(void *)(v9 + 8) = v13;
      *(unsigned char *)(v9 + 16) = v14;
      outlined consume of Text.Storage(v15, v16, v17);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  long long v21 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v21;
LABEL_8:
  uint64_t v22 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  unint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (unint64_t *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v28 = v25[1];
      *unint64_t v24 = v26;
      v24[1] = v28;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
    goto LABEL_15;
  }
  if (v26 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v27 = v25[1];
  *unint64_t v24 = v26;
  v24[1] = v27;
  swift_retain();
  swift_release();
LABEL_15:
  unint64_t v29 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  char v30 = (void *)((a1 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v31 = (void *)((a2 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  *char v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = v10[1];
  *unint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(((unint64_t)v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = v15[1];
    *(void *)unint64_t v14 = v16;
    *(void *)(v14 + 8) = v17;
  }
  unint64_t v18 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v19 = (_OWORD *)((a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  char v20 = (_OWORD *)((a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  *(void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v10 + 24) >= 0xFFFFFFFFuLL)
    {
      char v11 = *(unsigned char *)(v10 + 16);
      uint64_t v12 = *(void *)v9;
      uint64_t v13 = *(void *)(v9 + 8);
      char v14 = *(unsigned char *)(v9 + 16);
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      *(unsigned char *)(v9 + 16) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  long long v15 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v15;
LABEL_6:
  uint64_t v16 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  unint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (unint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      unint64_t v22 = v19[1];
      *unint64_t v18 = v20;
      v18[1] = v22;
      goto LABEL_13;
    }
LABEL_12:
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    goto LABEL_13;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_12;
  }
  unint64_t v21 = v19[1];
  *unint64_t v18 = v20;
  v18[1] = v21;
  swift_release();
LABEL_13:
  unint64_t v23 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v24 = (void *)((a1 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (void *)((a2 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowSceneList(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187820BF4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for WindowSceneList(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187820E18);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for WindowGroupRootContent(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    uint64_t v14 = *((void *)a2 + 1);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for WindowGroupRootContent(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

unsigned __int8 *assignWithCopy for WindowGroupRootContent(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for WindowGroupRootContent(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for WindowGroupRootContent(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowGroupRootContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for WindowGroupRootContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187821934);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for WindowGroupRootContent(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t destroy for WindowSceneList.MakeList(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 32);
  if (v1 != 255) {
    return outlined consume of SceneID(*(void *)(result + 16), *(void *)(result + 24), v1 & 1);
  }
  return result;
}

uint64_t assignWithCopy for WindowSceneList.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v3 = a1 + 16;
  uint64_t v4 = (long long *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v5 == 255)
    {
      long long v7 = *v4;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)uint64_t v3 = v7;
    }
    else
    {
      char v14 = v5 & 1;
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      outlined copy of SceneID(v15, v16, v5 & 1);
      *(void *)(a1 + 16) = v15;
      *(void *)(a1 + 24) = v16;
      *(unsigned char *)(a1 + 32) = v14;
    }
  }
  else if (v5 == 255)
  {
    outlined destroy of SceneID(a1 + 16);
    char v6 = *((unsigned char *)v4 + 16);
    *(_OWORD *)uint64_t v3 = *v4;
    *(unsigned char *)(v3 + 16) = v6;
  }
  else
  {
    char v8 = v5 & 1;
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    outlined copy of SceneID(v9, v10, v5 & 1);
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    char v13 = *(unsigned char *)(a1 + 32);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(unsigned char *)(a1 + 32) = v8;
    outlined consume of SceneID(v11, v12, v13);
  }
  return a1;
}

uint64_t outlined destroy of SceneID(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for WindowSceneList.MakeList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = a2 + 16;
  int v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 32);
    if (v6 != 255)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
      *(unsigned char *)(a1 + 32) = v6 & 1;
      outlined consume of SceneID(v7, v8, v5 & 1);
      return a1;
    }
    outlined destroy of SceneID(a1 + 16);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(v4 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowSceneList.MakeList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowSceneList.MakeList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = ~(_BYTE)a2;
    }
  }
  return result;
}

uint64_t View.automationElement()(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for automation != -1) {
    swift_once();
  }
  uint64_t v5 = static AccessibilityChildBehavior.automation;
  return MEMORY[0x18C113660](&v5, a1, &type metadata for AccessibilityContainerModifier, a2);
}

void Scene.allowsAutomationElements(_:)()
{
}

uint64_t sub_187821D40()
{
  return swift_getWitnessTable();
}

uint64_t sub_187821DA4()
{
  return swift_getWitnessTable();
}

uint64_t TabForEach<>._identifiedView.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v6 = a1[3];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v37 = a1[2];
  uint64_t v38 = v6;
  uint64_t v10 = v37;
  uint64_t v39 = v8;
  uint64_t v40 = v7;
  uint64_t v26 = v8;
  uint64_t v27 = a2;
  uint64_t v41 = v9;
  uint64_t v28 = type metadata accessor for ForEach();
  uint64_t v11 = *(void *)(v28 - 8);
  double v12 = MEMORY[0x1F4188790](v28);
  char v14 = (char *)&v24 - v13;
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&v24 - v13, v4, v12);
  uint64_t v30 = v10;
  uint64_t v31 = v6;
  uint64_t v15 = v10;
  uint64_t v25 = v6;
  uint64_t v32 = a1[4];
  uint64_t v16 = v32;
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  uint64_t v35 = v9;
  uint64_t v17 = v27;
  uint64_t v36 = v27;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v15;
  _DWORD v19[3] = v6;
  _OWORD v19[4] = v16;
  v19[5] = v7;
  uint64_t v20 = v7;
  v19[6] = v9;
  v19[7] = v17;
  _OWORD v19[8] = KeyPath;
  uint64_t v21 = v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_retain();
  mapForEach<A, B, C, D>(_:transform:)((uint64_t)v14, (uint64_t)partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter, (uint64_t)v19, v15, v25, v21, AssociatedTypeWitness, v20, v9);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v28);
}

uint64_t sub_187822010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 56))(*(void *)(a3 + a2 - 32));
}

uint64_t sub_187822054()
{
  return 56;
}

__n128 sub_187822060(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_18782207C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter()
{
  return swift_getAtKeyPath();
}

uint64_t mapForEach<A, B, C, D>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v15[0] = a7;
  v15[1] = a4;
  v15[2] = a5;
  _OWORD v15[3] = a6;
  v15[4] = a8;
  v15[5] = a9;
  uint64_t v10 = type metadata accessor for ForEach();
  double v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)v15 - v12, a1, v11);
  swift_retain();
  return ForEach.init<A>(_:transform:)();
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> TabForEach<A, B, C, D>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TabForEach<>._identifiedView.getter(a1, *(void *)(a2 - 8), a3);
}

uint64_t TabForEach<>.init(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  v28[0] = a3;
  v28[1] = a4;
  uint64_t v29 = a8;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(*MEMORY[0x1E4FBC5F0] + v17 + 8);
  uint64_t v30 = v19;
  uint64_t v31 = v18;
  uint64_t v32 = v20;
  uint64_t v33 = v21;
  uint64_t v34 = a9;
  uint64_t v22 = type metadata accessor for ForEach();
  double v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)v28 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a1, a5, v23);
  uint64_t v30 = a2;
  ForEach.init(_:idGenerator:content:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  uint64_t v30 = a5;
  uint64_t v31 = v18;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v34 = a9;
  uint64_t v26 = type metadata accessor for ForEach();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v29, v25, v26);
}

uint64_t TabForEach<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v29 = a6;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a9;
  uint64_t v27 = a10;
  uint64_t v28 = a11;
  uint64_t v17 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t KeyPath = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v21 = type metadata accessor for ForEach();
  double v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v27 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a1, a4, v22);
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = v29;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = v27;
  uint64_t v39 = v28;
  uint64_t v40 = a12;
  uint64_t KeyPath = swift_getKeyPath();
  ForEach.init(_:idGenerator:content:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
  uint64_t KeyPath = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v25 = type metadata accessor for ForEach();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v32, v24, v25);
}

uint64_t key path getter for Identifiable.id : <A, B, C, D>A.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_1878226D4()
{
  return 64;
}

__n128 sub_1878226E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 TabForEach<>.init(_:content:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a3;
  _OWORD v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  type metadata accessor for Range<Int>();
  uint64_t v16 = v15;
  unint64_t v17 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v18 = MEMORY[0x1E4FBB560];
  uint64_t v19 = MEMORY[0x1E4FBB550];
  ForEach.init(_:idGenerator:content:)();
  v24[0] = v26;
  v24[1] = v27;
  void v24[2] = v28;
  uint64_t v25 = v29;
  *(void *)&long long v30 = v16;
  *((void *)&v30 + 1) = v19;
  v31.n128_u64[0] = a4;
  v31.n128_u64[1] = v17;
  *(void *)&long long v32 = v18;
  uint64_t v20 = type metadata accessor for ForEach();
  (*(void (**)(long long *, _OWORD *, uint64_t))(*(void *)(v20 - 8) + 32))(&v30, v24, v20);
  uint64_t v21 = v33;
  __n128 result = v31;
  long long v23 = v32;
  *(_OWORD *)a7 = v30;
  *(__n128 *)(a7 + 16) = result;
  *(_OWORD *)(a7 + 32) = v23;
  *(void *)(a7 + 48) = v21;
  return result;
}

uint64_t sub_18782285C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out D)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 48))(*a1);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> TabForEach<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> TabForEach<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 64);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> TabForEach<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for <> TabForEach<A, B, C, D>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TabForEach()
{
  uint64_t result = type metadata accessor for ForEach();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabForEach(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    double v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TabForEach(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  double v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  double v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  swift_retain();
  swift_release();
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  double v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v10 = *(void *)v9;
  swift_release();
  double v11 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabForEach(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878230D4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TabForEach(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1878232ECLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for TabForEach()
{
  return swift_getGenericMetadata();
}

uint64_t View.sensoryFeedback<A>(_:trigger:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v17 = a3;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FeedbackGenerator();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v16 - v13;
  long long v22 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  swift_weakInit();
  FeedbackGenerator.init(feedbackRequestContext:feedback:trigger:condition:implementation:)((uint64_t)&v19, (uint64_t *)&v22, (uint64_t)v10, 0, 0, (uint64_t)v20, a4, (uint64_t)v14);
  swift_getWitnessTable();
  View.platformSensoryFeedback<A>(_:)((uint64_t)v14, v17, v11, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t type metadata accessor for FeedbackGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FeedbackGenerator.init(feedbackRequestContext:feedback:trigger:condition:implementation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  outlined init with take of FeedbackRequestContext(a1, a8);
  *(void *)(a8 + 16) = v14;
  *(void *)(a8 + 24) = v15;
  uint64_t v16 = (int *)type metadata accessor for FeedbackGenerator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + v16[10], a3, a7);
  uint64_t v17 = (void *)(a8 + v16[11]);
  *uint64_t v17 = a4;
  v17[1] = a5;
  uint64_t v18 = a8 + v16[12];
  outlined init with copy of PlatformSensoryFeedback?(a6, v18);
  *(void *)(v18 + 40) = 0;
  return outlined destroy of LocationBasedSensoryFeedback?(a6, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
}

uint64_t View.sensoryFeedback<A>(_:trigger:condition:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v22 = a8;
  uint64_t v23 = a5;
  uint64_t v21 = a3;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FeedbackGenerator();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v20 - v17;
  long long v28 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a6);
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v25 = 0;
  swift_weakInit();
  swift_retain();
  FeedbackGenerator.init(feedbackRequestContext:feedback:trigger:condition:implementation:)((uint64_t)&v25, (uint64_t *)&v28, (uint64_t)v14, v21, a4, (uint64_t)v26, a6, (uint64_t)v18);
  swift_getWitnessTable();
  View.platformSensoryFeedback<A>(_:)((uint64_t)v18, v23, v15, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t View.sensoryFeedback<A>(trigger:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustomFeedbackGenerator();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a1, a5, v16);
  uint64_t v23 = 0;
  swift_weakInit();
  swift_retain();
  CustomFeedbackGenerator.init(feedbackRequestContext:trigger:feedback:)((uint64_t)&v23, (uint64_t)v13, a2, a3, a5, (uint64_t)v18);
  swift_getWitnessTable();
  View.platformSensoryFeedback<A>(_:)((uint64_t)v18, v21, v14, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for CustomFeedbackGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CustomFeedbackGenerator.init(feedbackRequestContext:trigger:feedback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  outlined init with take of FeedbackRequestContext(a1, a6);
  uint64_t v11 = (int *)type metadata accessor for CustomFeedbackGenerator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + v11[9], a2, a5);
  uint64_t v12 = (void *)(a6 + v11[10]);
  *uint64_t v12 = a3;
  v12[1] = a4;
  uint64_t v13 = a6 + v11[11];
  uint64_t v15 = 0x3FFFFFFFCLL;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>((uint64_t)&v15, v13, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  *(void *)(v13 + 56) = 0;
  return outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
}

uint64_t sub_187823B58(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA28FeedbackRequestContextWriter33_C9541C03AF81FECFD19A57A1BB81CE81LLVyAA0F9Generator33_E5C2FE5C277CCA85C518490456542950LLVyqd__GGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for FeedbackGenerator);
}

uint64_t sub_187823B84(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA28FeedbackRequestContextWriter33_C9541C03AF81FECFD19A57A1BB81CE81LLVyAA0F9Generator33_E5C2FE5C277CCA85C518490456542950LLVyqd__GGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for CustomFeedbackGenerator);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA28FeedbackRequestContextWriter33_C9541C03AF81FECFD19A57A1BB81CE81LLVyAA0F9Generator33_E5C2FE5C277CCA85C518490456542950LLVyqd__GGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for CustomFeedbackGenerator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for CustomFeedbackGenerator(uint64_t a1, uint64_t a2)
{
  swift_weakDestroy();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v8 = (void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >> 2 != 0xFFFFFFFFLL && v8[5]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 + 2));
  }

  return swift_release();
}

void *initializeWithCopy for CustomFeedbackGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_weakCopyInit();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)v16;
  swift_retain();
  if (v17 >> 2 == 0xFFFFFFFF)
  {
    long long v18 = *(_OWORD *)v16;
    long long v19 = *(_OWORD *)(v16 + 16);
    long long v20 = *(_OWORD *)(v16 + 32);
    *(void *)(v15 + 48) = *(void *)(v16 + 48);
    *(_OWORD *)(v15 + 16) = v19;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)unint64_t v15 = v18;
  }
  else
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    uint64_t v21 = (_OWORD *)(v15 + 16);
    uint64_t v22 = (long long *)(v16 + 16);
    uint64_t v23 = *(void *)(v16 + 40);
    if (v23)
    {
      *(void *)(v15 + 40) = v23;
      *(void *)(v15 + 48) = *(void *)(v16 + 48);
      (**(void (***)(_OWORD *, long long *))(v23 - 8))(v21, v22);
    }
    else
    {
      long long v24 = *v22;
      long long v25 = *(_OWORD *)(v16 + 32);
      *(void *)(v15 + 48) = *(void *)(v16 + 48);
      *uint64_t v21 = v24;
      *(_OWORD *)(v15 + 32) = v25;
    }
  }
  *(void *)(v15 + 56) = *(void *)(v16 + 56);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for CustomFeedbackGenerator(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_weakCopyAssign();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(void *)v15 >> 2 == 0xFFFFFFFFLL)
  {
    if (v17 == 0x3FFFFFFFCLL)
    {
      long long v18 = *(_OWORD *)v16;
      long long v19 = *(_OWORD *)(v16 + 16);
      long long v20 = *(_OWORD *)(v16 + 32);
      *(void *)(v15 + 48) = *(void *)(v16 + 48);
      *(_OWORD *)(v15 + 16) = v19;
      *(_OWORD *)(v15 + 32) = v20;
      *(_OWORD *)unint64_t v15 = v18;
    }
    else
    {
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
      long long v24 = (_OWORD *)(v15 + 16);
      long long v25 = (long long *)(v16 + 16);
      uint64_t v26 = *(void *)(v16 + 40);
      if (v26)
      {
        *(void *)(v15 + 40) = v26;
        *(void *)(v15 + 48) = *(void *)(v16 + 48);
        (**(void (***)(_OWORD *, long long *))(v26 - 8))(v24, v25);
      }
      else
      {
        long long v28 = *v25;
        long long v29 = *(_OWORD *)(v16 + 32);
        *(void *)(v15 + 48) = *(void *)(v16 + 48);
        *long long v24 = v28;
        *(_OWORD *)(v15 + 32) = v29;
      }
    }
  }
  else
  {
    if (v17 != 0x3FFFFFFFCLL)
    {
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
      uint64_t v27 = *(void *)(v16 + 40);
      if (*(void *)(v15 + 40))
      {
        if (v27)
        {
          __swift_assign_boxed_opaque_existential_1((uint64_t *)(v15 + 16), (uint64_t *)(v16 + 16));
          goto LABEL_16;
        }
        __swift_destroy_boxed_opaque_existential_1(v15 + 16);
      }
      else if (v27)
      {
        *(void *)(v15 + 40) = v27;
        *(void *)(v15 + 48) = *(void *)(v16 + 48);
        (**(void (***)(uint64_t, uint64_t))(v27 - 8))(v15 + 16, v16 + 16);
        goto LABEL_16;
      }
      long long v30 = *(_OWORD *)(v16 + 16);
      long long v31 = *(_OWORD *)(v16 + 32);
      *(void *)(v15 + 48) = *(void *)(v16 + 48);
      *(_OWORD *)(v15 + 16) = v30;
      *(_OWORD *)(v15 + 32) = v31;
      goto LABEL_16;
    }
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?));
    long long v22 = *(_OWORD *)(v16 + 16);
    long long v21 = *(_OWORD *)(v16 + 32);
    long long v23 = *(_OWORD *)v16;
    *(void *)(v15 + 48) = *(void *)(v16 + 48);
    *(_OWORD *)(v15 + 16) = v22;
    *(_OWORD *)(v15 + 32) = v21;
    *(_OWORD *)unint64_t v15 = v23;
  }
LABEL_16:
  *(void *)(v15 + 56) = *(void *)(v16 + 56);
  swift_retain();
  swift_release();
  return a1;
}

void type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)()
{
  if (!lazy cache variable for type metadata for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?))
  {
    type metadata accessor for IntelligenceAppIntentsPayloadProviding?(255, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?));
    }
  }
}

void *initializeWithTake for CustomFeedbackGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_weakTakeInit();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32) + 7;
  uint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (_OWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v15[2];
  long long v16 = v15[3];
  long long v18 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v18;
  v14[2] = v17;
  _OWORD v14[3] = v16;
  return a1;
}

void *assignWithTake for CustomFeedbackGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_weakTakeAssign();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  uint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v11 + v10;
  unint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v12 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 >> 2 == 0xFFFFFFFFLL)
  {
    long long v17 = *(_OWORD *)v16;
    long long v18 = *(_OWORD *)(v16 + 16);
    long long v19 = *(_OWORD *)(v16 + 32);
    *(void *)(v15 + 48) = *(void *)(v16 + 48);
    *(_OWORD *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 32) = v19;
    *(_OWORD *)unint64_t v15 = v17;
  }
  else if (*(void *)v16 >> 2 == 0xFFFFFFFFLL)
  {
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)(v15, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?));
    long long v21 = *(_OWORD *)(v16 + 16);
    long long v20 = *(_OWORD *)(v16 + 32);
    long long v22 = *(_OWORD *)v16;
    *(void *)(v15 + 48) = *(void *)(v16 + 48);
    *(_OWORD *)(v15 + 16) = v21;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)unint64_t v15 = v22;
  }
  else
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    if (*(void *)(v15 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(v15 + 16);
    }
    long long v23 = *(_OWORD *)(v16 + 16);
    long long v24 = *(_OWORD *)(v16 + 32);
    *(void *)(v15 + 48) = *(void *)(v16 + 48);
    *(_OWORD *)(v15 + 16) = v23;
    *(_OWORD *)(v15 + 32) = v24;
  }
  *(void *)(v15 + 56) = *(void *)(v16 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomFeedbackGenerator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 64;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878245D0);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 16) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for CustomFeedbackGenerator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 64;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 16] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              long long v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v22 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2 - 1;
              }
              *long long v21 = v22;
            }
            else
            {
              long long v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFC0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFC0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFC0)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 64);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1878247F0);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for FeedbackGenerator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomFeedbackGenerator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = v4 + ((unsigned __int16)((v3 & 0xF8) + 23) & (unsigned __int16)~(v3 & 0xF8) & 0x1F8);
  swift_retain();
  return v5;
}

uint64_t destroy for FeedbackGenerator(uint64_t a1, uint64_t a2)
{
  swift_weakDestroy();
  unint64_t v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  unsigned int v8 = (void *)((*(void *)(v6 + 56) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  unint64_t v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v9 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v9);
  }

  return swift_release();
}

void *initializeWithCopy for FeedbackGenerator(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 23;
  swift_weakCopyInit();
  unint64_t v7 = (_OWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v7 + v10 + 16) & ~v10;
  unint64_t v12 = (v10 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(uint64_t, unint64_t))(v8 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
    swift_retain();
  }
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)(v18 + 24);
  if (v19)
  {
    *(void *)(v17 + 24) = v19;
    *(void *)(v17 + 32) = *(void *)(v18 + 32);
    (**(void (***)(unint64_t, unint64_t))(v19 - 8))(v17, v18);
  }
  else
  {
    long long v20 = *(_OWORD *)v18;
    long long v21 = *(_OWORD *)(v18 + 16);
    *(void *)(v17 + 32) = *(void *)(v18 + 32);
    *(_OWORD *)unint64_t v17 = v20;
    *(_OWORD *)(v17 + 16) = v21;
  }
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for FeedbackGenerator(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_weakCopyAssign();
  unint64_t v6 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 40) + 7;
  unint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (unint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = *v15;
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v15[1];
      *unint64_t v14 = v16;
      v14[1] = v18;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v16 >= 0xFFFFFFFF)
    {
      unint64_t v17 = v15[1];
      *unint64_t v14 = v16;
      v14[1] = v17;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
LABEL_8:
  unint64_t v19 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)(v20 + 24);
  if (!*(void *)(v19 + 24))
  {
    if (v21)
    {
      *(void *)(v19 + 24) = v21;
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      (**(void (***)(unint64_t, unint64_t))(v21 - 8))(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8, v20);
      goto LABEL_15;
    }
LABEL_14:
    long long v23 = *(_OWORD *)v20;
    long long v24 = *(_OWORD *)(v20 + 16);
    *(void *)(v19 + 32) = *(void *)(v20 + 32);
    *(_OWORD *)unint64_t v19 = v23;
    *(_OWORD *)(v19 + 16) = v24;
    goto LABEL_15;
  }
  uint64_t v22 = (uint64_t *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (!v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1(v22, (uint64_t *)v20);
LABEL_15:
  *(void *)(v19 + 40) = *(void *)(v20 + 40);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for FeedbackGenerator(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 23;
  swift_weakTakeInit();
  unint64_t v7 = (_OWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v7 + v10 + 16) & ~v10;
  unint64_t v12 = (v10 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(uint64_t, unint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
  }
  unint64_t v17 = (_OWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (long long *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v19 = *v18;
  long long v20 = v18[2];
  v17[1] = v18[1];
  _OWORD v17[2] = v20;
  *unint64_t v17 = v19;
  return a1;
}

void *assignWithTake for FeedbackGenerator(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 23;
  swift_weakTakeAssign();
  unint64_t v7 = (_OWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v7 + v10 + 16) & ~v10;
  unint64_t v12 = (v10 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(uint64_t, unint64_t))(v8 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 24) + 7;
  unint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (unint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = *v15;
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v15[1];
      *unint64_t v14 = v16;
      v14[1] = v18;
      goto LABEL_8;
    }
  }
  else
  {
    if (v16 >= 0xFFFFFFFF)
    {
      unint64_t v17 = v15[1];
      *unint64_t v14 = v16;
      v14[1] = v17;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
LABEL_8:
  unint64_t v19 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v19 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v19);
  }
  unint64_t v20 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v21 = *(_OWORD *)v20;
  long long v22 = *(_OWORD *)(v20 + 16);
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  *(_OWORD *)unint64_t v19 = v21;
  *(_OWORD *)(v19 + 16) = v22;
  *(void *)(v19 + 40) = *(void *)(v20 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackGenerator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 32) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 48;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187825100);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  unint64_t v17 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 16) & ~v6);
  }
  uint64_t v18 = *v17 >> 2;
  if (v18 > 0x80000000) {
    return -(int)v18;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for FeedbackGenerator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 48;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            uint64_t v18 = (void *)((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(((unint64_t)v18 + v9 + 16) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = 4 * -a2;
              }
              *uint64_t v18 = v19;
              v18[1] = 0;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFD0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFD0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187825318);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FeedbackGenerator<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t FeedbackGenerator.implementation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  outlined init with copy of PlatformSensoryFeedback?(a1, (uint64_t)v6);
  if (*(void *)(v4 + 40)) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v6, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
  return outlined destroy of LocationBasedSensoryFeedback?(a1, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
}

void (*FeedbackGenerator.implementation.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  unsigned int v5 = malloc(0x80uLL);
  *a1 = v5;
  outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(v2 + *(int *)(a2 + 48), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for State<PlatformSensoryFeedback?>);
  type metadata accessor for State<PlatformSensoryFeedback?>();
  State.wrappedValue.getter();
  return FeedbackGenerator.implementation.modify;
}

void FeedbackGenerator.implementation.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 6);
  if (a2)
  {
    outlined init with copy of PlatformSensoryFeedback?((uint64_t)(*a1 + 6), (uint64_t)(v2 + 11));
    if (v2[5]) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)(v2 + 11), &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for State<PlatformSensoryFeedback?>);
    outlined destroy of LocationBasedSensoryFeedback?(v3, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
  }
  else
  {
    if (v2[5]) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of LocationBasedSensoryFeedback?(v3, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for State<PlatformSensoryFeedback?>);
  }

  free(v2);
}

uint64_t FeedbackGenerator.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v55 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v59 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for TaskPriority();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v49 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v10);
  unsigned int v11 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v47 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _TaskValueModifier<SensoryFeedback>();
  uint64_t v50 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v62 = (uint64_t)&v39 - v12;
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v40 = v5;
  uint64_t v14 = v13;
  uint64_t v44 = v13;
  uint64_t v54 = type metadata accessor for _ValueActionModifier2();
  uint64_t v56 = type metadata accessor for ModifiedContent();
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v60 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v48 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v52 = (char *)&v39 - v17;
  uint64_t v42 = v3;
  long long v69 = *(_OWORD *)(v3 + 16);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v46(v11, v3, a2);
  uint64_t v18 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v41 = v19 + v9;
  uint64_t v45 = v18 | 7;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v5;
  *(void *)(v20 + 24) = v14;
  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v43(v20 + v19, v11, a2);
  uint64_t v21 = v47;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = WitnessTable;
  lazy protocol witness table accessor for type SensoryFeedback and conformance SensoryFeedback();
  uint64_t v23 = (uint64_t)v49;
  static TaskPriority.userInitiated.getter();
  View.task<A>(id:priority:_:)((uint64_t)&v69, v23, (uint64_t)async function pointer to partial apply for closure #1 in FeedbackGenerator.body(content:), v20, v21, (uint64_t)&type metadata for SensoryFeedback, WitnessTable, v62);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v23, v53);
  uint64_t v24 = v42;
  uint64_t v25 = v55;
  uint64_t v26 = v59;
  uint64_t v27 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v59, v42 + *(int *)(a2 + 40), v40);
  v46(v11, v24, a2);
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v44;
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v29;
  v43(v28 + v19, v11, a2);
  uint64_t v67 = v39;
  uint64_t v68 = &protocol witness table for _TaskValueModifier<A>;
  uint64_t v30 = v50;
  uint64_t v31 = swift_getWitnessTable();
  long long v32 = v48;
  uint64_t v33 = v62;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v33, v30);
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v65 = v31;
  uint64_t v66 = v34;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = MEMORY[0x1E4F40ED8];
  uint64_t v35 = v57;
  swift_getWitnessTable();
  uint64_t v36 = v52;
  static ViewBuilder.buildExpression<A>(_:)(v32);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v60 + 8);
  v37(v32, v35);
  static ViewBuilder.buildExpression<A>(_:)(v36);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v35);
}

uint64_t closure #1 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  void v3[6] = a1;
  type metadata accessor for MainActor();
  v3[9] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in FeedbackGenerator.body(content:), v5, v4);
}

uint64_t closure #1 in FeedbackGenerator.body(content:)()
{
  uint64_t v14 = v0;
  swift_release();
  uint64_t v1 = type metadata accessor for FeedbackGenerator();
  uint64_t v3 = FeedbackGenerator.implementation.modify(v0 + 2, v1);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v2, *(void *)(v2 + 24));
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }
  v3((void **)v0 + 2, 0);
  uint64_t v6 = v0[6];
  outlined init with copy of FeedbackRequestContext(v6, (uint64_t)(v0 + 2));
  FeedbackRequestContext.implementation(type:)(*(void *)(v6 + 16), *(void *)(v6 + 24), (uint64_t)v13);
  outlined destroy of FeedbackRequestContext((uint64_t)(v0 + 2));
  FeedbackGenerator.implementation.setter((uint64_t)v13, v1);
  uint64_t v8 = FeedbackGenerator.implementation.modify(v0 + 2, v1);
  uint64_t v9 = *(void *)(v7 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(v7 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v7, *(void *)(v7 + 24));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  }
  v8((void **)v0 + 2, 0);
  unsigned int v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t closure #2 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v42 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v41 = (char *)v38 - v11;
  uint64_t v12 = type metadata accessor for FeedbackGenerator();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v38 - v14;
  uint64_t v17 = a3;
  uint64_t v18 = (uint64_t *)(a3 + *(int *)(v16 + 44));
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  if (*v18)
  {
    uint64_t v21 = (void *)swift_allocObject();
    void v21[2] = a4;
    v21[3] = a5;
    void v21[4] = v20;
    v21[5] = v19;
    long long v22 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@unowned Bool);
  }
  else
  {
    long long v22 = 0;
  }
  outlined copy of AppIntentExecutor?(v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v22);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v38[1] = v17;
  v23(v15, v17, v12);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v25 = v41;
  v24(v41, v39, a4);
  uint64_t v26 = v42;
  v24(v42, v40, a4);
  if (!v20)
  {
    long long v32 = *(void (**)(char *, uint64_t))(v8 + 8);
    v32(v26, a4);
    v32(v25, a4);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
LABEL_9:
    uint64_t v34 = FeedbackGenerator.implementation.modify(v43, v12);
    uint64_t v35 = *(void *)(v33 + 24);
    if (v35)
    {
      uint64_t v36 = *(void *)(v33 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v33, *(void *)(v33 + 24));
      (*(void (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
    }
    return ((uint64_t (*)(void *, void))v34)(v43, 0);
  }
  uint64_t v27 = *(uint64_t (**)(char *, char *))&v15[*(int *)(v12 + 44)];
  if (!v27)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v8 + 8);
    v37(v42, a4);
    v37(v25, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v28 = v42;
  char v29 = v27(v25, v42);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v28, a4);
  v30(v25, a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v29) {
    goto LABEL_9;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomFeedbackGenerator<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for SensoryFeedbackGeneratorModifier.feedbackRequestContext.setter in conformance FeedbackGenerator<A>(uint64_t a1)
{
  return outlined assign with take of FeedbackRequestContext(a1, v1);
}

void (*CustomFeedbackGenerator.state.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0xB0uLL);
  *a1 = v5;
  outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(v2 + *(int *)(a2 + 44), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
  type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(0);
  State.wrappedValue.getter();
  return CustomFeedbackGenerator.state.modify;
}

void CustomFeedbackGenerator.state.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 8);
  if (a2)
  {
    outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>((uint64_t)(*a1 + 8), (uint64_t)(v2 + 15), (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
    if (v2[7]) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)(v2 + 15), (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
    uint64_t v4 = v3;
    uint64_t v5 = type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?;
  }
  else
  {
    if (v2[7]) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)(v3, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
    uint64_t v5 = type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>;
    uint64_t v4 = (uint64_t)v2;
  }
  outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)(v4, (uint64_t (*)(void))v5);

  free(v2);
}

uint64_t CustomFeedbackGenerator.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v35 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v9 = v32;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v12;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for _ViewModifier_Content();
  uint64_t v33 = *(void *)(a2 + 24);
  uint64_t v34 = v13;
  uint64_t v36 = type metadata accessor for _ValueActionModifier2();
  uint64_t v37 = type metadata accessor for ModifiedContent();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v30 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v3 + *(int *)(a2 + 36), v8, v18);
  uint64_t v21 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v35, v3, a2);
  unint64_t v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v33;
  *(void *)(v23 + 16) = v8;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, v21, a2);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = v31;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v8);
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v42 = WitnessTable;
  uint64_t v43 = v27;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = MEMORY[0x1E4F40ED8];
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v38 + 8);
  v28(v16, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v28)(v20, v14);
}

uint64_t closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustomFeedbackGenerator();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + *(int *)(v6 + 40)))(v26, a1, a2);
  unint64_t v7 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v8 = a3 + *(int *)(v6 + 44);
  outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(v8, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
  type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(0);
  State.wrappedValue.getter();
  outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
  if ((v27 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL) {
    unint64_t v9 = 0x3FFFFFFFCLL;
  }
  else {
    unint64_t v9 = v27;
  }
  if ((v27 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v28;
  }
  outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (v9 >> 2 == 0xFFFFFFFF)
  {
    if (v11 == 0x3FFFFFFFCLL) {
      goto LABEL_24;
    }
  }
  else if (v11 != 0x3FFFFFFFCLL && specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(v9, v10, v7, v25))
  {
    goto LABEL_24;
  }
  uint64_t v13 = CustomFeedbackGenerator.state.modify(v26, v6);
  if (*v12 >> 2 != 0xFFFFFFFFLL)
  {
    uint64_t v14 = v12[5];
    if (v14)
    {
      uint64_t v15 = v12[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v12 + 2), v12[5]);
      (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
    }
  }
  v13((void **)v26, 0);
  if (v11 == 0x3FFFFFFFCLL)
  {
    v26[0] = 0x3FFFFFFFCLL;
    memset(&v26[1], 0, 48);
  }
  else
  {
    unint64_t v27 = v7;
    unint64_t v28 = v25;
    closure #1 in closure #1 in CustomFeedbackGenerator.body(content:)(v26, (uint64_t)&v26[2], (uint64_t *)&v27);
  }
  outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>((uint64_t)v26, (uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  if (*(void *)(v8 + 56)) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  uint64_t v17 = CustomFeedbackGenerator.state.modify(&v27, v6);
  if (*v16 >> 2 != 0xFFFFFFFFLL)
  {
    uint64_t v18 = v16[5];
    if (v18)
    {
      uint64_t v19 = v16[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v16 + 2), v16[5]);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    }
  }
  v17((void **)&v27, 0);
LABEL_24:
  uint64_t v21 = CustomFeedbackGenerator.state.modify(v26, v6);
  if (*v20 >> 2 != 0xFFFFFFFFLL)
  {
    uint64_t v22 = v20[5];
    if (v22)
    {
      uint64_t v23 = v20[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v20 + 2), v20[5]);
      (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
    }
  }
  return ((uint64_t (*)(uint64_t *, void))v21)(v26, 0);
}

uint64_t closure #1 in closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  *a1 = *a3;
  a1[1] = v5;
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_6;
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)result + 80))(&v10, v4, v5);
  if (!v11)
  {
    swift_release();
    uint64_t result = outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v10, &lazy cache variable for type metadata for LocationBasedSensoryFeedback?, (unint64_t *)&lazy cache variable for type metadata for LocationBasedSensoryFeedback);
    goto LABEL_6;
  }
  outlined init with take of OptionalBinaryInteger(&v10, (uint64_t)v12);
  int Attribute = AGWeakAttributeGetAttribute();
  int v8 = *MEMORY[0x1E4F4E7A0];
  swift_release();
  if (Attribute == v8)
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
LABEL_6:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  *(void *)(a2 + 24) = &type metadata for LocationBasedFeedbackAdaptor;
  *(void *)(a2 + 32) = &protocol witness table for LocationBasedFeedbackAdaptor;
  uint64_t v9 = swift_allocObject();
  *(void *)a2 = v9;
  uint64_t result = outlined init with take of OptionalBinaryInteger(v12, v9 + 24);
  *(_DWORD *)(v9 + 16) = Attribute;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CustomFeedbackGenerator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FeedbackGenerator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined assign with take of FeedbackRequestContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187826E2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for CustomFeedbackGenerator() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_weakDestroy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[11], v1);
  swift_release();
  uint64_t v4 = (void *)(v3 + v2[13]);
  if (*v4 >> 2 != 0xFFFFFFFFLL && v4[5]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v4 + 2));
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CustomFeedbackGenerator, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CustomFeedbackGenerator.body(content:));
}

void type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(uint64_t a1)
{
}

void type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?(uint64_t a1)
{
}

void type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_187827124()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocObject();
}

void type metadata accessor for _TaskValueModifier<SensoryFeedback>()
{
  if (!lazy cache variable for type metadata for _TaskValueModifier<SensoryFeedback>)
  {
    lazy protocol witness table accessor for type SensoryFeedback and conformance SensoryFeedback();
    unint64_t v0 = type metadata accessor for _TaskValueModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TaskValueModifier<SensoryFeedback>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback and conformance SensoryFeedback()
{
  unint64_t result = lazy protocol witness table cache variable for type SensoryFeedback and conformance SensoryFeedback;
  if (!lazy protocol witness table cache variable for type SensoryFeedback and conformance SensoryFeedback)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback and conformance SensoryFeedback);
  }
  return result;
}

uint64_t partial apply for closure #2 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FeedbackGenerator, closure #2 in FeedbackGenerator.body(content:));
}

uint64_t partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v9 = *(void *)(a3(0, v7, v8) - 8);
  uint64_t v10 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return a4(a1, a2, v10, v7, v8);
}

uint64_t sub_1878273E0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

void type metadata accessor for State<PlatformSensoryFeedback?>()
{
  if (!lazy cache variable for type metadata for State<PlatformSensoryFeedback?>)
  {
    type metadata accessor for IntelligenceAppIntentsPayloadProviding?(255, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<PlatformSensoryFeedback?>);
    }
  }
}

uint64_t outlined init with copy of PlatformSensoryFeedback?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of FeedbackRequestContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of FeedbackRequestContext(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of FeedbackRequestContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187827644()
{
  return swift_getWitnessTable();
}

uint64_t sub_187827778()
{
  return swift_getWitnessTable();
}

uint64_t outlined copy of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      uint64_t result = swift_retain();
      break;
    case 1:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t View.onDrop(of:isTargeted:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  _DWORD v19[3] = &type metadata for ItemProviderDropAction;
  _OWORD v19[4] = &protocol witness table for ItemProviderDropAction;
  uint64_t v17 = (void *)swift_allocObject();
  v19[0] = v17;
  _OWORD v17[2] = 0;
  _OWORD v17[3] = 0;
  v17[4] = partial apply for closure #1 in View.onDrop(of:isTargeted:perform:);
  v17[5] = v16;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, a1, a2, a3, a4, (uint64_t)v19, 0, 0, (uint64_t)v20);
  MEMORY[0x18C113660](v20, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v20);
}

{
  void *v16;
  void v18[5];
  unsigned char v19[40];

  uint64_t v18[3] = &type metadata for ItemProviderDropAction;
  _OWORD v18[4] = &protocol witness table for ItemProviderDropAction;
  uint64_t v16 = (void *)swift_allocObject();
  v18[0] = v16;
  v16[2] = 0;
  _OWORD v16[3] = 0;
  v16[4] = a5;
  v16[5] = a6;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, a1, a2, a3, a4, (uint64_t)v18, 0, 0, (uint64_t)v19);
  MEMORY[0x18C113660](v19, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v19);
}

uint64_t sub_187827AB0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined destroy of DropModifier(uint64_t a1)
{
  return a1;
}

uint64_t View.onDrop(of:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of TableColumnList(a2, (uint64_t)v10);
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  outlined destroy of DropDelegate?((uint64_t)&v7);
  outlined init with take of OptionalBinaryInteger(v10, (uint64_t)&v7);
  v11[0] = v7;
  v11[1] = v8;
  uint64_t v12 = v9;
  MEMORY[0x18C113660](v11, a3, &type metadata for DropModifier, a4);
  return outlined destroy of DropModifier((uint64_t)v11);
}

uint64_t outlined destroy of DropDelegate?(uint64_t a1)
{
  type metadata accessor for DropDelegate?(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate, (uint64_t)&protocol descriptor for DropDelegate, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.dropDestination<A>(for:action:isTargeted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  _OWORD v14[3] = 0;
  v14[4] = a4;
  v14[5] = a5;
  swift_retain();
  Binding.init(get:set:)();
  uint64_t v15 = v23[0];
  uint64_t v16 = v23[1];
  char v17 = v24;
  uint64_t v18 = static Transferable.readableContentTypes.getter();
  v22[3] = type metadata accessor for TransferableDropAction();
  void v22[4] = &protocol witness table for TransferableDropAction<A>;
  uint64_t v19 = (void *)swift_allocObject();
  v22[0] = v19;
  v19[2] = 0;
  _DWORD v19[3] = 0;
  _OWORD v19[4] = a2;
  void v19[5] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, v18, v15, v16, v17, (uint64_t)v22, 0, 0, (uint64_t)v23);
  MEMORY[0x18C113660](v23, a6, &type metadata for DropModifier, a8);
  swift_release();
  swift_release();
  return outlined destroy of DropModifier((uint64_t)v23);
}

uint64_t TransferableDropAction.init(action:)()
{
  return 0;
}

uint64_t type metadata accessor for TransferableDropAction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t objectdestroy_2Tm_0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t View.dropDestination<A>(for:isEnabled:action:isTargeted:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  _OWORD v15[3] = 0;
  v15[4] = a5;
  v15[5] = a6;
  swift_retain();
  Binding.init(get:set:)();
  uint64_t v16 = v24[0];
  uint64_t v17 = v24[1];
  char v18 = v25;
  uint64_t v19 = static Transferable.readableContentTypes.getter();
  v23[3] = type metadata accessor for TransferableDropAction();
  v23[4] = &protocol witness table for TransferableDropAction<A>;
  uint64_t v20 = (void *)swift_allocObject();
  v23[0] = v20;
  _OWORD v20[2] = 0;
  v20[3] = 0;
  v20[4] = a3;
  v20[5] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(a2, v19, v16, v17, v18, (uint64_t)v23, 0, 0, (uint64_t)v24);
  MEMORY[0x18C113660](v24, a7, &type metadata for DropModifier, a9);
  swift_release();
  swift_release();
  return outlined destroy of DropModifier((uint64_t)v24);
}

uint64_t sub_18782815C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t View.dropDestination<A>(for:isEnabled:action:isTargeted:dropProposal:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  char v18 = (void *)swift_allocObject();
  id v18[2] = 0;
  uint64_t v18[3] = 0;
  _OWORD v18[4] = a5;
  v18[5] = a6;
  swift_retain();
  Binding.init(get:set:)();
  uint64_t v19 = v27[0];
  uint64_t v20 = v27[1];
  char v21 = v28;
  uint64_t v22 = static Transferable.readableContentTypes.getter();
  _OWORD v26[3] = type metadata accessor for TransferableDropAction();
  void v26[4] = &protocol witness table for TransferableDropAction<A>;
  uint64_t v23 = (void *)swift_allocObject();
  v26[0] = v23;
  void v23[2] = 0;
  v23[3] = 0;
  v23[4] = a3;
  void v23[5] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(a2, v22, v19, v20, v21, (uint64_t)v26, a7, a8, (uint64_t)v27);
  MEMORY[0x18C113660](v27, a9, &type metadata for DropModifier, a11);
  swift_release();
  swift_release();
  return outlined destroy of DropModifier((uint64_t)v27);
}

uint64_t partial apply for closure #2 in View.dropDestination<A>(for:action:isTargeted:)(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 32))(*a1);
}

void View.listRowDropDestination<A>(for:action:)()
{
}

uint64_t View.onDrop<A>(of:delegate:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  outlined init with copy of TableColumnList(a2, (uint64_t)v18);
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  outlined destroy of DropDelegate?((uint64_t)&v13);
  outlined init with take of OptionalBinaryInteger(v18, (uint64_t)&v13);
  v16[0] = v13;
  v16[1] = v14;
  uint64_t v17 = v15;
  DropPreviewModifier.init(base:preview:)((uint64_t)v16, a3, a4, (uint64_t)v18);
  uint64_t v11 = type metadata accessor for DropPreviewModifier();
  swift_retain();
  MEMORY[0x18C113660](v18, a5, v11, a7);
  return (*(uint64_t (**)(long long *, uint64_t))(*(void *)(v11 - 8) + 8))(v18, v11);
}

double DropPreview.center.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t DropPreview.center.setter(uint64_t result, double a2, double a3)
{
  uint64_t v4 = (double *)(v3 + *(int *)(result + 40));
  double *v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*DropPreview.center.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t DropPreview.init(center:_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = type metadata accessor for DropPreview();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3 + *(int *)(v10 + 36), 1, 1, a2);
  uint64_t v12 = (double *)(a3 + *(int *)(v10 + 40));
  *uint64_t v12 = a4;
  v12[1] = a5;
  a1(v11);
  type metadata accessor for DropPreview.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for DropPreview()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DropPreview.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DropPreview.view()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for DropPreview.Storage();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void (**)(void))((char *)&v13 - v8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - v8, v3, v6, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*v9)();
    return swift_release();
  }
  else
  {
    uint64_t v12 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, void (**)(void), uint64_t))(v12 + 32))(a2, v9, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v5);
  }
}

double DefaultDragDropPreview.center.getter()
{
  id v1 = objc_msgSend(*v0, sel_target);
  objc_msgSend(v1, sel_center);
  double v3 = v2;

  return v3;
}

uint64_t protocol witness for DropAction.cleanupAction.setter in conformance ItemProviderDropAction(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v2);
  *double v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t protocol witness for DropAction.perform(_:_:) in conformance ItemProviderDropAction()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

Swift::Bool __swiftcall TransferableDropAction.perform(_:_:)(Swift::OpaquePointer a1, CGPoint a2)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v46 = v3;
  uint64_t v47 = v5;
  uint64_t v10 = v4;
  uint64_t v45 = v2;
  CGFloat y = a2.y;
  CGFloat x = a2.x;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v50 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v48 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = dispatch_group_create();
  uint64_t v53 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  uint64_t v20 = aBlock[0];
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v21 = v22;
    uint64_t v51 = v17;
    if (v22) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  LOBYTE(v22) = swift_bridgeObjectRetain();
  uint64_t v51 = v17;
  if (!v21) {
    goto LABEL_12;
  }
LABEL_3:
  if (v21 < 1)
  {
    __break(1u);
    return v22;
  }
  uint64_t v42 = v10;
  uint64_t v43 = v15;
  uint64_t v44 = v14;
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    uint64_t v23 = 0;
    do
    {
      MEMORY[0x18C117680](v23++, a1._rawValue);
      dispatch_group_enter(v19);
      char v24 = (void *)swift_allocObject();
      void v24[2] = v9;
      _OWORD v24[3] = v8;
      v24[4] = v19;
      v24[5] = v20;
      char v25 = v19;
      swift_retain();
      uint64_t v26 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();
      swift_unknownObjectRelease();

      swift_release();
    }
    while (v21 != v23);
  }
  else
  {
    uint64_t v27 = 0;
    do
    {
      char v28 = (void *)*((void *)a1._rawValue + v27++ + 4);
      id v29 = v28;
      dispatch_group_enter(v19);
      uint64_t v30 = (void *)swift_allocObject();
      _OWORD v30[2] = v9;
      v30[3] = v8;
      unsigned char v30[4] = v19;
      v30[5] = v20;
      uint64_t v31 = v19;
      swift_retain();
      uint64_t v32 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();

      swift_release();
    }
    while (v21 != v27);
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = v43;
  uint64_t v14 = v44;
  uint64_t v10 = v42;
LABEL_13:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v33 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v34 = (CGFloat *)swift_allocObject();
  *((void *)v34 + 2) = v9;
  *((void *)v34 + 3) = v8;
  uint64_t v36 = v45;
  uint64_t v35 = v46;
  *((void *)v34 + 4) = v45;
  *((void *)v34 + 5) = v35;
  uint64_t v37 = v47;
  *((void *)v34 + 6) = v10;
  *((void *)v34 + 7) = v37;
  *((void *)v34 + 8) = v20;
  v34[9] = x;
  v34[10] = y;
  aBlock[4] = partial apply for closure #2 in TransferableDropAction.perform(_:_:);
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6;
  uint64_t v38 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of AppIntentExecutor?(v36);
  swift_retain();
  uint64_t v39 = v48;
  static DispatchQoS.unspecified.getter();
  uint64_t v53 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type CGPoint and conformance CGPoint((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v40 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v38);
  swift_release();

  (*(void (**)(char *, uint64_t))(v15 + 8))(v40, v14);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v51);
  swift_release();
  LOBYTE(v22) = 1;
  return v22;
}

void closure #1 in TransferableDropAction.perform(_:_:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v32[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v32[-1] - v12;
  type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  uint64_t v14 = type metadata accessor for Result();
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (void **)((char *)&v32[-1] - v16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v32[-1] - v16, a1, v14, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v17;
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      id v22 = v19;
      id v23 = v19;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v32[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v26 = _typeName(_:qualified:)();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v28 = Error.localizedDescription.getter();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1872C6000, v21, v20, "Error loading %s: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v25, -1, -1);
      MEMORY[0x18C119C60](v24, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v8 + 32))(v13, v17, a4);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, a4);
    uint64_t v33 = a3;
    swift_retain();
    type metadata accessor for Array();
    type metadata accessor for AtomicBox();
    uint64_t v30 = (void (*)(uint64_t *, void))AtomicBox.wrappedValue.modify();
    Array.append(_:)();
    v30(v32, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, a4);
  }
  dispatch_group_leave(a2);
}

uint64_t closure #2 in TransferableDropAction.perform(_:_:)(uint64_t (*a1)(uint64_t), double a2, double a3, uint64_t a4, void (*a5)(uint64_t, double, double))
{
  type metadata accessor for Array();
  type metadata accessor for AtomicBox();
  AtomicBox.wrappedValue.getter();
  a5(v10, a2, a3);
  uint64_t result = swift_bridgeObjectRelease();
  if (a1) {
    return a1(result);
  }
  return result;
}

uint64_t protocol witness for DropAction.perform(_:_:) in conformance TransferableDropAction<A>(Swift::OpaquePointer a1, double a2, double a3)
{
  return 1;
}

double DropInfo.location.getter()
{
  return *((double *)__swift_project_boxed_opaque_existential_1(v0, v0[3]) + 2);
}

uint64_t DropInfo.localDragContexts.getter()
{
  id v1 = __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (!v2
    || (id v3 = objc_msgSend(v2, sel_localDragSession),
        swift_unknownObjectRelease(),
        !v3))
  {
    long long v7 = 0u;
    long long v8 = 0u;
LABEL_10:
    _sypSgWOhTm_0((uint64_t)&v7, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_1);
    return MEMORY[0x1E4FBC860];
  }
  id v4 = objc_msgSend(v3, sel_localContext);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Any?((uint64_t)v6, (uint64_t)&v7);
  if (!*((void *)&v8 + 1)) {
    goto LABEL_10;
  }
  _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for [Any], MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB320]);
  if (swift_dynamicCast()) {
    return *(void *)&v6[0];
  }
  return MEMORY[0x1E4FBC860];
}

Swift::Bool __swiftcall DropInfo.hasItemsConforming(to:)(Swift::OpaquePointer to)
{
  id v3 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    swift_getObjectType();
    Swift::Bool v5 = UIDropSession.hasItemsConforming(to:)(to);
    swift_unknownObjectRelease();
    LOBYTE(v4) = v5;
  }
  return v4;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (**v13)(char *, uint64_t, uint64_t);
  void (**v14)(char *, char *, uint64_t);
  char *v15;
  void *v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  Swift::Bool v23;
  void v25[2];
  void *v26;
  char *v27;
  uint64_t v28;
  char *v29;

  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  Swift::Bool v5 = (char *)v25 - v4;
  uint64_t v6 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v6);
  long long v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v29 = (char *)v25 - v11;
  uint64_t v12 = *((void *)to._rawValue + 2);
  if (v12)
  {
    uint64_t v26 = v1;
    uint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v28 = v10;
    uint64_t v14 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    swift_bridgeObjectRetain();
    v25[1] = to._rawValue;
    double v15 = (char *)to._rawValue + 40;
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v27 = v8;
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v13)(v5, 1, v6) == 1)
      {
        _sypSgWOhTm_0((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>);
      }
      else
      {
        uint64_t v17 = *v14;
        uint64_t v18 = v29;
        (*v14)(v29, v5, v6);
        v17(v8, v18, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v16 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        os_log_type_t v20 = v16[2];
        uint64_t v19 = v16[3];
        if (v20 >= v19 >> 1) {
          uint64_t v16 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v16, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        _OWORD v16[2] = v20 + 1;
        uint64_t v21 = (unint64_t)v16
            + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
            + *(void *)(v28 + 72) * v20;
        long long v8 = v27;
        v17((char *)v21, v27, v6);
      }
      v15 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    id v1 = v26;
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  id v22 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (MEMORY[0x18C119DF0](v22))
  {
    swift_getObjectType();
    id v23 = UIDropSession.hasItemsConforming(to:)((Swift::OpaquePointer)v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v23;
}

uint64_t DropInfo.itemProviders(for:)(uint64_t a1)
{
  id v3 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (!MEMORY[0x18C119DF0](v3)) {
    return MEMORY[0x1E4FBC860];
  }
  swift_getObjectType();
  uint64_t v4 = UIDropSession.itemProviders(for:)(a1);
  swift_unknownObjectRelease();
  return v4;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (**v13)(char *, uint64_t, uint64_t);
  void (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  void *v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void v25[2];
  void *v26;
  char *v27;
  uint64_t v28;
  char *v29;

  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  Swift::Bool v5 = (char *)v25 - v4;
  uint64_t v6 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v6);
  long long v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v29 = (char *)v25 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v26 = v1;
    uint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v28 = v10;
    uint64_t v14 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    swift_bridgeObjectRetain();
    v25[1] = a1;
    double v15 = a1 + 40;
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v27 = v8;
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v13)(v5, 1, v6) == 1)
      {
        _sypSgWOhTm_0((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>);
      }
      else
      {
        uint64_t v17 = *v14;
        uint64_t v18 = v29;
        (*v14)(v29, v5, v6);
        v17(v8, v18, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v16 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        os_log_type_t v20 = v16[2];
        uint64_t v19 = v16[3];
        if (v20 >= v19 >> 1) {
          uint64_t v16 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v16, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        _OWORD v16[2] = v20 + 1;
        uint64_t v21 = (unint64_t)v16
            + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
            + *(void *)(v28 + 72) * v20;
        long long v8 = v27;
        v17((char *)v21, v27, v6);
      }
      v15 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    id v1 = v26;
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  id v22 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (MEMORY[0x18C119DF0](v22))
  {
    swift_getObjectType();
    id v23 = UIDropSession.itemProviders(for:)((uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v23;
}

Swift::Void __swiftcall DropInfo.setDropTargetLocation(_:at:)(CGPoint_optional _, Swift::Int at)
{
  Swift::Bool is_nil = _.is_nil;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v5.Swift::Bool is_nil = is_nil;
  DropInfoAdaptor.setDropTargetLocation(_:at:)(v5, at);
}

Swift::Void __swiftcall DropInfo.setDropTargetTransform(_:at:)(CGAffineTransform_optional *_, Swift::Int at)
{
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  DropInfoAdaptor.setDropTargetTransform(_:at:)(_, at);
}

uint64_t DropDelegate.validateDrop(info:)()
{
  return 1;
}

void DropDelegate.dropUpdated(info:)(unsigned char *a1@<X8>)
{
}

{
  *a1 = 4;
}

uint64_t FunctionalDropDelegate.performDrop(info:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[4];
  if (v4)
  {
    uint64_t v5 = v2[3];
    LOBYTE(v19) = 0;
    outlined copy of Binding<NavigationSplitViewColumn>?(v5, v4);
    outlined copy of Binding<NavigationSplitViewColumn>?(v5, v4);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    swift_release_n();
    outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
  }
  uint64_t v6 = v2[2];
  long long v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (MEMORY[0x18C119DF0](v7))
  {
    swift_getObjectType();
    uint64_t v8 = UIDropSession.itemProviders(for:)(v6);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  outlined init with copy of DropInfo((uint64_t)a1, (uint64_t)&v19);
  uint64_t v9 = swift_allocObject();
  long long v10 = v20;
  *(_OWORD *)(v9 + 16) = v19;
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = v21;
  uint64_t v11 = (uint64_t)(v2 + 6);
  swift_beginAccess();
  uint64_t v13 = v2[9];
  uint64_t v12 = v2[10];
  __swift_mutable_project_boxed_opaque_existential_1(v11, v13);
  (*(void (**)(uint64_t (*)(void, void, void, void), uint64_t, uint64_t, uint64_t))(v12 + 16))(destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, v9, v13, v12);
  swift_endAccess();
  outlined init with copy of TableColumnList(v11, (uint64_t)&v19);
  uint64_t v14 = *((void *)&v20 + 1);
  uint64_t v15 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
  uint64_t v16 = (double *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v15 + 32))(v8, v14, v15, v16[2], v16[3]);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  return v17 & 1;
}

uint64_t FunctionalDropDelegate.dropUpdated(info:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  void (*v11)(uint64_t *__return_ptr, char *, uint64_t, double, double);
  void *v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  double *v16;
  uint64_t v17;

  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860], &lazy cache variable for type metadata for _ContiguousArrayStorage<DropProposal>, (uint64_t)&type metadata for DropProposal);
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  int64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5, &lazy cache variable for type metadata for _ContiguousArrayStorage<DropProposal>, (uint64_t)&type metadata for DropProposal);
    unint64_t v6 = *((void *)v5 + 3);
    int64_t v8 = v6 >> 1;
  }
  *((void *)v5 + 2) = v9;
  v5[v7 + 32] = 2;
  int64_t v10 = v7 + 2;
  if (v8 < v10) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v10, 1, v5, &lazy cache variable for type metadata for _ContiguousArrayStorage<DropProposal>, (uint64_t)&type metadata for DropProposal);
  }
  *((void *)v5 + 2) = v10;
  v5[v9 + 32] = 3;
  uint64_t v11 = *(void (**)(uint64_t *__return_ptr, char *, uint64_t, double, double))(v2 + 88);
  if (v11)
  {
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18C119DF0](v12))
    {
      swift_getObjectType();
      swift_retain();
      uint64_t v13 = UIDropSession.registeredContentTypes()();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_retain();
      uint64_t v13 = MEMORY[0x1E4FBC870];
    }
    uint64_t v16 = (double *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v11(&v17, v5, v13, v16[2], v16[3]);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = v17;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = 4;
  }
  *a2 = v15;
  return result;
}

SwiftUI::DropProposal __swiftcall DropProposal.init(operation:)(SwiftUI::DropProposal operation)
{
  *id v1 = *(unsigned char *)operation.operation;
  return operation;
}

uint64_t FunctionalDropDelegate.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v0[3], v0[4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 6));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0[11]);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DropDelegate.validateDrop(info:) in conformance FunctionalDropDelegate(void *a1)
{
  v2._rawuint64_t Value = *(void **)(*(void *)v1 + 16);
  id v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t result = MEMORY[0x18C119DF0](v3);
  if (result)
  {
    swift_getObjectType();
    Swift::Bool v5 = UIDropSession.hasItemsConforming(to:)(v2);
    swift_unknownObjectRelease();
    return v5;
  }
  return result;
}

uint64_t protocol witness for DropDelegate.performDrop(info:) in conformance FunctionalDropDelegate(void *a1)
{
  return FunctionalDropDelegate.performDrop(info:)(a1) & 1;
}

uint64_t protocol witness for DropDelegate.dropEntered(info:) in conformance FunctionalDropDelegate()
{
  return protocol witness for DropDelegate.dropEntered(info:) in conformance FunctionalDropDelegate();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  uint64_t v1 = *v0;
  Swift::OpaquePointer v2 = *(void *)(*v0 + 32);
  if (v2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)(v1 + 24), v2);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

uint64_t protocol witness for DropDelegate.dropUpdated(info:) in conformance FunctionalDropDelegate@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return FunctionalDropDelegate.dropUpdated(info:)(a1, a2);
}

uint64_t protocol witness for DropDelegate.dropExited(info:) in conformance FunctionalDropDelegate()
{
  return protocol witness for DropDelegate.dropEntered(info:) in conformance FunctionalDropDelegate();
}

BOOL static DropOperation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DropOperation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DropOperation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void DropProposal.operation.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t View.onDrop(of:isTargeted:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v49 = a2;
  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v19);
  uint64_t v52 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v51 = (char *)&v40 - v23;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    uint64_t v41 = a3;
    int v42 = a4;
    uint64_t v43 = a9;
    uint64_t v44 = a7;
    uint64_t v45 = a8;
    uint64_t v46 = v9;
    uint64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v50 = v22;
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v22 + 32);
    swift_bridgeObjectRetain();
    uint64_t v40 = a1;
    uint64_t v27 = a1 + 40;
    uint64_t v28 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v25)(v18, 1, v19) == 1)
      {
        _sypSgWOhTm_0((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>);
      }
      else
      {
        unint64_t v29 = *v26;
        uint64_t v30 = v51;
        (*v26)(v51, v18, v19);
        v29(v52, v30, v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        unint64_t v32 = *((void *)v28 + 2);
        unint64_t v31 = *((void *)v28 + 3);
        uint64_t v33 = v50;
        if (v32 >= v31 >> 1)
        {
          uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
          uint64_t v33 = v50;
          uint64_t v28 = (char *)v34;
        }
        *((void *)v28 + 2) = v32 + 1;
        v29(&v28[((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v32], v52, v19);
      }
      v27 += 16;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    a8 = v45;
    a7 = v44;
    LOBYTE(a4) = v42;
    a3 = v41;
  }
  else
  {
    uint64_t v28 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v48;
  *(void *)(v35 + 16) = v47;
  *(void *)(v35 + 24) = v36;
  v53[3] = &type metadata for ItemProviderDropAction;
  v53[4] = &protocol witness table for ItemProviderDropAction;
  uint64_t v37 = (void *)swift_allocObject();
  v53[0] = v37;
  v37[2] = 0;
  v37[3] = 0;
  v37[4] = partial apply for closure #1 in View.onDrop(of:isTargeted:perform:);
  v37[5] = v35;
  uint64_t v38 = v49;
  outlined copy of Binding<NavigationSplitViewColumn>?(v49, a3);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, (uint64_t)v28, v38, a3, a4, (uint64_t)v53, 0, 0, (uint64_t)v54);
  MEMORY[0x18C113660](v54, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v54);
}

{
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (**v25)(char *, uint64_t, uint64_t);
  void (**v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void v52[5];
  unsigned char v53[48];

  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a2;
  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v19);
  uint64_t v51 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v50 = (char *)&v39 - v23;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    uint64_t v40 = a3;
    uint64_t v41 = a4;
    int v42 = a9;
    uint64_t v43 = a7;
    uint64_t v44 = a8;
    uint64_t v45 = v9;
    uint64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v49 = v22;
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v22 + 32);
    swift_bridgeObjectRetain();
    uint64_t v39 = a1;
    uint64_t v27 = a1 + 40;
    uint64_t v28 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v25)(v18, 1, v19) == 1)
      {
        _sypSgWOhTm_0((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>);
      }
      else
      {
        unint64_t v29 = *v26;
        uint64_t v30 = v50;
        (*v26)(v50, v18, v19);
        v29(v51, v30, v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        unint64_t v32 = *((void *)v28 + 2);
        unint64_t v31 = *((void *)v28 + 3);
        uint64_t v33 = v49;
        if (v32 >= v31 >> 1)
        {
          uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
          uint64_t v33 = v49;
          uint64_t v28 = (char *)v34;
        }
        *((void *)v28 + 2) = v32 + 1;
        v29(&v28[((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v32], v51, v19);
      }
      v27 += 16;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    a8 = v44;
    a7 = v43;
    LOBYTE(a4) = v41;
    a3 = v40;
  }
  else
  {
    uint64_t v28 = (char *)MEMORY[0x1E4FBC860];
  }
  v52[3] = &type metadata for ItemProviderDropAction;
  v52[4] = &protocol witness table for ItemProviderDropAction;
  uint64_t v35 = (void *)swift_allocObject();
  v52[0] = v35;
  void v35[2] = 0;
  v35[3] = 0;
  uint64_t v36 = v47;
  _OWORD v35[4] = v46;
  v35[5] = v36;
  uint64_t v37 = v48;
  outlined copy of Binding<NavigationSplitViewColumn>?(v48, a3);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, (uint64_t)v28, v37, a3, a4, (uint64_t)v52, 0, 0, (uint64_t)v53);
  MEMORY[0x18C113660](v53, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v53);
}

uint64_t View.onDrop(of:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v29 - v12;
  uint64_t v14 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v14);
  uint64_t v37 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v36 = (char *)v29 - v18;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v30 = a2;
    uint64_t v31 = a5;
    uint64_t v32 = a3;
    uint64_t v33 = a4;
    uint64_t v34 = v5;
    uint64_t v35 = v17;
    uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v17 + 32);
    swift_bridgeObjectRetain();
    v29[1] = a1;
    uint64_t v22 = a1 + 40;
    uint64_t v23 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v20)(v13, 1, v14) == 1)
      {
        _sypSgWOhTm_0((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>);
      }
      else
      {
        uint64_t v24 = *v21;
        uint64_t v25 = v36;
        (*v21)(v36, v13, v14);
        v24(v37, v25, v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        unint64_t v27 = *((void *)v23 + 2);
        unint64_t v26 = *((void *)v23 + 3);
        if (v27 >= v26 >> 1) {
          uint64_t v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v23, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
        }
        *((void *)v23 + 2) = v27 + 1;
        v24(&v23[((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v27], v37, v14);
      }
      v22 += 16;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    a4 = v33;
    a3 = v32;
    a2 = v30;
  }
  outlined init with copy of TableColumnList(a2, (uint64_t)v41);
  swift_bridgeObjectRelease();
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  outlined destroy of DropDelegate?((uint64_t)&v38);
  outlined init with take of OptionalBinaryInteger(v41, (uint64_t)&v38);
  v42[0] = v38;
  v42[1] = v39;
  uint64_t v43 = v40;
  MEMORY[0x18C113660](v42, a3, &type metadata for DropModifier, a4);
  return outlined destroy of DropModifier((uint64_t)v42);
}

uint64_t partial apply for closure #1 in View.onDrop(of:isTargeted:perform:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  if (a3)
  {
    unint64_t v11 = a4[3];
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = a4[2];
  if (v12 <= v13) {
    uint64_t v14 = a4[2];
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  a5(0);
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 72);
  unint64_t v17 = (*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size_0(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v18[2] = v13;
  long long v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  uint64_t v22 = *(void *)(v21 - 8);
  if (a1)
  {
    if (v18 < a4
      || (unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),
          (char *)v18 + v23 >= (char *)a4 + v23 + *(void *)(v22 + 72) * v13))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

unint64_t lazy protocol witness table accessor for type DropOperation and conformance DropOperation()
{
  unint64_t result = lazy protocol witness table cache variable for type DropOperation and conformance DropOperation;
  if (!lazy protocol witness table cache variable for type DropOperation and conformance DropOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropOperation and conformance DropOperation);
  }
  return result;
}

uint64_t type metadata completion function for DropPreview()
{
  uint64_t result = type metadata accessor for DropPreview.Storage();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DropPreview(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = *(void *)(v6 + 64);
  }
  int v9 = *(_DWORD *)(v6 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = v8 + v9 + 1;
  if (*(_DWORD *)(v6 + 84)) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = v7 + 1;
  }
  int v13 = v9 & 0x100000;
  if (v10 > 7 || v13 != 0 || ((v12 + 7 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    void *v4 = *(void *)a2;
    uint64_t v4 = (void *)(v16 + ((v10 & 0xF8 ^ 0x1F8) & (v10 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v8];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v19 = v8;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v8 < 4) {
            goto LABEL_26;
          }
          goto LABEL_28;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_26;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_26;
          }
          goto LABEL_28;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_26:
          }
            unsigned int v17 = (v20 | (v18 << (8 * v8))) + 2;
          else {
LABEL_28:
          }
            unsigned int v17 = v20 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v21 = ~v10;
    if (v17 == 1)
    {
      uint64_t v22 = *((void *)a2 + 1);
      void *v4 = *(void *)a2;
      v4[1] = v22;
      swift_retain();
      char v23 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v23 = 0;
    }
    *((unsigned char *)v4 + v8) = v23;
    uint64_t v24 = (const void *)((unint64_t)&a2[v11] & v21);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v24, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v11) & v21), v24, v12);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 16))(((unint64_t)v4 + v11) & v21, v24, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(((unint64_t)v4 + v11) & v21, 0, 1, v5);
    }
    *(_OWORD *)((v12 + 7 + (((unint64_t)v4 + v11) & v21)) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v24 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for DropPreview(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a2 + 16) - 8);
  if (v6 == 1) {
    swift_release();
  }
  else {
    (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v3);
  }
  unint64_t v11 = (unint64_t)&a1[v5 + 1 + *(unsigned __int8 *)(v14 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v3);
  if (!result)
  {
    int v13 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);
    return v13(v11, v3);
  }
  return result;
}

void *initializeWithCopy for DropPreview(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = *(void *)(v6 + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    uint64_t v14 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v14;
    swift_retain();
    char v15 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v15 = 0;
  }
  *((unsigned char *)a1 + v8) = v15;
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = v8 + v16 + 1;
  unsigned int v18 = (void *)(((unint64_t)a1 + v17) & ~v16);
  uint64_t v19 = (const void *)((unint64_t)&a2[v17] & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
  {
    int v20 = *(_DWORD *)(v6 + 84);
    if (v20) {
      size_t v21 = v7;
    }
    else {
      size_t v21 = v7 + 1;
    }
    memcpy(v18, v19, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
    int v20 = *(_DWORD *)(v6 + 84);
  }
  if (v20) {
    unint64_t v22 = v7;
  }
  else {
    unint64_t v22 = v7 + 1;
  }
  *(_OWORD *)(((unint64_t)v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *assignWithCopy for DropPreview(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          if (v7 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          if (v7 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v7 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v11 = *(_DWORD *)a1;
          if (v7 < 4)
          {
LABEL_15:
            unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
            break;
          }
LABEL_19:
          if (v11 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v8 == 1) {
LABEL_17:
    }
      swift_release();
    else {
LABEL_20:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          if (v7 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          if (v7 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v7 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v15 = *(_DWORD *)a2;
          if (v7 < 4)
          {
LABEL_31:
            unsigned int v12 = (v15 | (v13 << (8 * v7))) + 2;
            break;
          }
LABEL_35:
          if (v15 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
LABEL_33:
      uint64_t v16 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v16;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  uint64_t v17 = v6;
  unint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = 16;
  if (v18 > 0x10) {
    uint64_t v19 = *(void *)(v6 + 64);
  }
  uint64_t v20 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = v19 + v20 + 1;
  unint64_t v22 = (void *)((unint64_t)&a1[v21] & ~v20);
  char v23 = (void *)((unint64_t)&a2[v21] & ~v20);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v25 = v24(v22, 1, v5);
  int v26 = v24(v23, 1, v5);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v22, v23, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v5);
      goto LABEL_50;
    }
    int v27 = *(_DWORD *)(v17 + 84);
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v22, v23, v5);
      goto LABEL_50;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v22, v5);
    int v27 = *(_DWORD *)(v17 + 84);
  }
  if (v27) {
    size_t v28 = v18;
  }
  else {
    size_t v28 = v18 + 1;
  }
  memcpy(v22, v23, v28);
LABEL_50:
  if (*(_DWORD *)(v17 + 84)) {
    unint64_t v29 = v18;
  }
  else {
    unint64_t v29 = v18 + 1;
  }
  uint64_t v30 = (void *)(((unint64_t)v22 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v23 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  return a1;
}

_OWORD *initializeWithTake for DropPreview(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = *(void *)(v6 + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v14 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    char v14 = 0;
  }
  *((unsigned char *)a1 + v8) = v14;
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = v8 + v15 + 1;
  uint64_t v17 = (void *)(((unint64_t)a1 + v16) & ~v15);
  unint64_t v18 = (const void *)((unint64_t)&a2[v16] & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5))
  {
    int v19 = *(_DWORD *)(v6 + 84);
    if (v19) {
      size_t v20 = v7;
    }
    else {
      size_t v20 = v7 + 1;
    }
    memcpy(v17, v18, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
    int v19 = *(_DWORD *)(v6 + 84);
  }
  if (v19) {
    unint64_t v21 = v7;
  }
  else {
    unint64_t v21 = v7 + 1;
  }
  *(_OWORD *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *assignWithTake for DropPreview(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          if (v7 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          if (v7 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v7 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v11 = *(_DWORD *)a1;
          if (v7 < 4)
          {
LABEL_15:
            unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
            break;
          }
LABEL_19:
          if (v11 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v8 == 1) {
LABEL_17:
    }
      swift_release();
    else {
LABEL_20:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          if (v7 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          if (v7 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v7 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v15 = *(_DWORD *)a2;
          if (v7 < 4)
          {
LABEL_31:
            unsigned int v12 = (v15 | (v13 << (8 * v7))) + 2;
            break;
          }
LABEL_35:
          if (v15 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
LABEL_33:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v16 = 1;
    }
    else
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v16 = 0;
    }
    a1[v7] = v16;
  }
  uint64_t v17 = v6;
  unint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = 16;
  if (v18 > 0x10) {
    uint64_t v19 = *(void *)(v6 + 64);
  }
  uint64_t v20 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = v19 + v20 + 1;
  unint64_t v22 = (void *)((unint64_t)&a1[v21] & ~v20);
  char v23 = (void *)((unint64_t)&a2[v21] & ~v20);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v25 = v24(v22, 1, v5);
  int v26 = v24(v23, 1, v5);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v22, v23, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v5);
      goto LABEL_51;
    }
    int v27 = *(_DWORD *)(v17 + 84);
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v22, v23, v5);
      goto LABEL_51;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v22, v5);
    int v27 = *(_DWORD *)(v17 + 84);
  }
  if (v27) {
    size_t v28 = v18;
  }
  else {
    size_t v28 = v18 + 1;
  }
  memcpy(v22, v23, v28);
LABEL_51:
  if (*(_DWORD *)(v17 + 84)) {
    unint64_t v29 = v18;
  }
  else {
    unint64_t v29 = v18 + 1;
  }
  uint64_t v30 = (void *)(((unint64_t)v22 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v23 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPreview(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v7 = *(_DWORD *)(v4 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v7) {
    unint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v10 = v5 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = v6 + v11 + 1;
  if (v9 < a2)
  {
    unint64_t v13 = ((v10 + (v12 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v14 = a2 - v9;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_31;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_31;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18782F34CLL);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_31:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          LODWORD(v15) = *a1;
        }
        return v9 + (v15 | v21) + 1;
      default:
        break;
    }
  }
  if (v8 > 0xFE)
  {
    unsigned int v23 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v12) & ~v11);
    if (v23 >= 2) {
      return v23 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v22 = *((unsigned __int8 *)a1 + v6);
    if (v22 >= 2) {
      return (v22 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for DropPreview(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = a1;
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  size_t v8 = *(void *)(v7 + 64);
  if (v8 <= 0x10) {
    uint64_t v9 = 16;
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  int v10 = *(_DWORD *)(v7 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= 0xFE) {
    unsigned int v12 = 254;
  }
  else {
    unsigned int v12 = v11;
  }
  unsigned int v13 = v9 + 1;
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = v9 + 1 + v14;
  if (!v10) {
    ++v8;
  }
  unint64_t v16 = ((v8 + (v15 & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v12 < a3)
  {
    unsigned int v17 = a3 - v12;
    if (((v8 + (v15 & ~v14) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v6 = v19;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v12)
  {
    if (((v8 + (v15 & ~v14) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v20 = a2 - v12;
    }
    else {
      int v20 = 1;
    }
    if (((v8 + (v15 & ~v14) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v21 = ~v12 + a2;
      bzero(a1, ((v8 + (v15 & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)unint64_t v5 = v21;
    }
    switch(v6)
    {
      case 1:
        v5[v16] = v20;
        return;
      case 2:
        *(_WORD *)&v5[v16] = v20;
        return;
      case 3:
        goto LABEL_69;
      case 4:
        *(_DWORD *)&v5[v16] = v20;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_69:
      __break(1u);
      JUMPOUT(0x18782F658);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        if (v11 > 0xFE)
        {
          unint64_t v5 = (char *)((unint64_t)&a1[v15] & ~v14);
          if (v11 >= a2)
          {
            uint64_t v27 = a2 + 1;
            size_t v28 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v29 = (unint64_t)&a1[v15] & ~v14;
            v28(v29, v27);
          }
          else
          {
            if (v8 <= 3) {
              int v22 = ~(-1 << (8 * v8));
            }
            else {
              int v22 = -1;
            }
            if (v8)
            {
              int v23 = v22 & (~v11 + a2);
              if (v8 <= 3) {
                int v24 = v8;
              }
              else {
                int v24 = 4;
              }
              bzero((void *)((unint64_t)&a1[v15] & ~v14), v8);
              switch(v24)
              {
                case 2:
LABEL_65:
                  *(_WORD *)unint64_t v5 = v23;
                  break;
                case 3:
LABEL_66:
                  *(_WORD *)unint64_t v5 = v23;
                  v5[2] = BYTE2(v23);
                  break;
                case 4:
LABEL_67:
                  *(_DWORD *)unint64_t v5 = v23;
                  break;
                default:
LABEL_61:
                  *unint64_t v5 = v23;
                  break;
              }
            }
          }
        }
        else if (a2 > 0xFE)
        {
          if (v13 <= 3) {
            int v25 = ~(-1 << (8 * v13));
          }
          else {
            int v25 = -1;
          }
          if (v9 != -1)
          {
            int v23 = v25 & (a2 - 255);
            if (v13 <= 3) {
              int v26 = v9 + 1;
            }
            else {
              int v26 = 4;
            }
            bzero(a1, v9 + 1);
            switch(v26)
            {
              case 2:
                goto LABEL_65;
              case 3:
                goto LABEL_66;
              case 4:
                goto LABEL_67;
              default:
                goto LABEL_61;
            }
          }
        }
        else
        {
          a1[v9] = -(char)a2;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for DefaultDragDropPreview()
{
  return &type metadata for DefaultDragDropPreview;
}

ValueMetadata *type metadata accessor for DropInfo()
{
  return &type metadata for DropInfo;
}

uint64_t dispatch thunk of DropDelegate.validateDrop(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DropDelegate.performDrop(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DropDelegate.dropEntered(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DropDelegate.dropUpdated(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DropDelegate.dropExited(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of DropDelegate_Private.dropAnimationCompleted()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DropDelegate_Private.dropConcluded(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DropDelegate_Private.dropEnded(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata accessor for FunctionalDropDelegate()
{
  return self;
}

ValueMetadata *type metadata accessor for DropOperation()
{
  return &type metadata for DropOperation;
}

unsigned char *storeEnumTagSinglePayload for DropOperation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18782F864);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DropProposal()
{
  return &type metadata for DropProposal;
}

uint64_t type metadata accessor for FilePromiseReceiver()
{
  return self;
}

uint64_t sub_18782F8C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_18782F924()
{
  return swift_getWitnessTable();
}

uint64_t sub_18782F98C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<DropOntoTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18782FAAC()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for DropPreview.Storage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *int v3 = *(void *)a2;
    int v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    uint64_t v14 = *((void *)a2 + 1);
    *int v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for DropPreview.Storage(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *initializeWithCopy for DropPreview.Storage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *assignWithCopy for DropPreview.Storage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for DropPreview.Storage(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for DropPreview.Storage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPreview.Storage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for DropPreview.Storage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187830738);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for DropPreview.Storage(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t destroy for TransferableDropAction(void *a1)
{
  if (*a1) {
    swift_release();
  }

  return swift_release();
}

void *initializeWithCopy for TransferableDropAction(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  return a1;
}

void *assignWithCopy for TransferableDropAction(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TransferableDropAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ItemProviderDropAction()
{
  return &type metadata for ItemProviderDropAction;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    a5(0);
    unsigned int v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size_0(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    void v13[2] = v11;
    _OWORD v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    unsigned int v13 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[2 * v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ContainerBackgroundHost(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

void type metadata accessor for DropDelegate?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ContainerBackgroundHost(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void partial apply for closure #1 in TransferableDropAction.perform(_:_:)(uint64_t a1)
{
  closure #1 in TransferableDropAction.perform(_:_:)(a1, *(NSObject **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_187832578()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TransferableDropAction.perform(_:_:)()
{
  return closure #2 in TransferableDropAction.perform(_:_:)(*(uint64_t (**)(uint64_t))(v0 + 32), *(double *)(v0 + 72), *(double *)(v0 + 80), *(void *)(v0 + 40), *(void (**)(uint64_t, double, double))(v0 + 48));
}

uint64_t lazy protocol witness table accessor for type CGPoint and conformance CGPoint(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_68Tm()
{
  swift_release();

  return swift_deallocObject();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void, uint64_t, uint64_t, uint64_t))
{
  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = *((void *)a4 + 3);
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = *((void *)a4 + 2);
  if (v11 <= v12) {
    uint64_t v13 = *((void *)a4 + 2);
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    a8(0, a5, a6, a7);
    int64_t v14 = (char *)swift_allocObject();
    int64_t v15 = _swift_stdlib_malloc_size_0(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 25;
    }
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * (v16 >> 3);
  }
  else
  {
    int64_t v14 = (char *)MEMORY[0x1E4FBC860];
  }
  int v17 = v14 + 32;
  char v18 = a4 + 32;
  if (v9)
  {
    if (v14 != a4 || v17 >= &v18[8 * v12]) {
      memmove(v17, v18, 8 * v12);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v17, v18, 8 * v12);
  }
  swift_bridgeObjectRelease();
  return v14;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, unint64_t *a6, uint64_t (*a7)(uint64_t, void *))
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = *((void *)a4 + 3);
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = *((void *)a4 + 2);
  if (v10 <= v11) {
    uint64_t v12 = *((void *)a4 + 2);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    type metadata accessor for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(0, a5, a6, a7);
    uint64_t v13 = (char *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size_0(v13);
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 96);
  }
  else
  {
    uint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v15 = v13 + 32;
  uint64_t v16 = a4 + 32;
  size_t v17 = 96 * v11;
  if (v8)
  {
    if (v13 != a4 || v15 >= &v16[v17]) {
      memmove(v15, v16, v17);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, v17);
  }
  swift_bridgeObjectRelease();
  return v13;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), uint64_t a6, uint64_t a7, void (*a8)(void, uint64_t, void, uint64_t))
{
  char v12 = (char)result;
  if (a3)
  {
    unint64_t v13 = a4[3];
    int64_t v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v14 = a2;
      }
    }
  }
  else
  {
    int64_t v14 = a2;
  }
  uint64_t v15 = a4[2];
  if (v14 <= v15) {
    uint64_t v16 = a4[2];
  }
  else {
    uint64_t v16 = v14;
  }
  if (v16)
  {
    a5(0);
    size_t v17 = (void *)swift_allocObject();
    int64_t v18 = _swift_stdlib_malloc_size_0(v17);
    uint64_t v19 = v18 - 32;
    if (v18 < 32) {
      uint64_t v19 = v18 - 1;
    }
    _OWORD v17[2] = v15;
    _OWORD v17[3] = 2 * (v19 >> 5);
  }
  else
  {
    size_t v17 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v12)
  {
    if (v17 != a4 || v17 + 4 >= &a4[4 * v15 + 4]) {
      memmove(v17 + 4, a4 + 4, 32 * v15);
    }
    a4[2] = 0;
  }
  else
  {
    a8(0, a6, MEMORY[0x1E4FBB1A0], a7);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v17;
}

void type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>)
  {
    type metadata accessor for ClosedRange<CGFloat>(255, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB010]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<[_LazyLayout_Subview]>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[_LazyLayout_Subview]>)
  {
    _sypSgMaTm_1(255, &lazy cache variable for type metadata for [_LazyLayout_Subview], (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[_LazyLayout_Subview]>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>)
  {
    _sypSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ListUpdate<Int, Int>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>)
  {
    type metadata accessor for ListUpdate<Int, Int>(255, (unint64_t *)&lazy cache variable for type metadata for ListUpdate<Int, Int>, (uint64_t (*)(void, void *))type metadata accessor for ListUpdate);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Int, Int)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (Int, Int));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CountingIndex<Int> and conformance CountingIndex<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>;
  if (!lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>)
  {
    type metadata accessor for _TraitWritingModifier<DropOntoTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4F3F718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>(255, a3, a4);
    unint64_t v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for _TraitWritingModifier<DropOntoTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4F3F718]);
    v9[0] = v6;
    v9[1] = v6;
    unint64_t v10 = lazy protocol witness table accessor for type CountingIndex<Int> and conformance CountingIndex<A>();
    unint64_t v11 = v10;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>)
  {
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(255, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>)
  {
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(255, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>);
    }
  }
}

void type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, String)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<UIKitProxyFocusItem>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitProxyFocusItem>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitProxyFocusItem>);
    }
  }
}

void type metadata accessor for WeakBox<DocumentViewController>(uint64_t a1)
{
}

void type metadata accessor for [UIAccessibilityLocationDescriptor]()
{
  if (!lazy cache variable for type metadata for [UIAccessibilityLocationDescriptor])
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIAccessibilityLocationDescriptor]);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityLinkElement>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLinkElement>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLinkElement>);
    }
  }
}

void type metadata accessor for WeakBox<UIGestureRecognizer>()
{
  if (!lazy cache variable for type metadata for WeakBox<UIGestureRecognizer>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIGestureRecognizer>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>)
  {
    type metadata accessor for (seed: Int, removeIndex: Int)(255, &lazy cache variable for type metadata for (seed: Int, removeIndex: Int));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<PresentationOptionsPreference?>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PresentationOptionsPreference?>)
  {
    _sypSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PresentationOptionsPreference?>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<EventBindingSource>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<EventBindingSource>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for EventBindingSource);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<EventBindingSource>);
    }
  }
}

uint64_t outlined init with copy of DropInfo(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18783555C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

void type metadata accessor for (key: String?, value: String)()
{
  if (!lazy cache variable for type metadata for (key: String?, value: String))
  {
    _sypSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String?, value: String));
    }
  }
}

void type metadata accessor for (String?, String)()
{
  if (!lazy cache variable for type metadata for (String?, String))
  {
    _sypSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String?, String));
    }
  }
}

void type metadata accessor for HitTestTrace<UIView>()
{
  if (!lazy cache variable for type metadata for HitTestTrace<UIView>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v0 = type metadata accessor for HitTestTrace();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<UIView>);
    }
  }
}

void type metadata accessor for HitTestTrace<ViewResponder>()
{
  if (!lazy cache variable for type metadata for HitTestTrace<ViewResponder>)
  {
    type metadata accessor for ViewResponder();
    unint64_t v0 = type metadata accessor for HitTestTrace();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ViewResponder>);
    }
  }
}

void type metadata accessor for AnimatedValueTrack<CGPoint><A>.VectorPath.Element()
{
  if (!lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.VectorPath.Element)
  {
    type metadata accessor for CGPoint(255);
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
    unint64_t v0 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.VectorPath.Element);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(tag: String, item: String)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: String, item: String)>)
  {
    type metadata accessor for (seed: Int, removeIndex: Int)(255, (unint64_t *)&lazy cache variable for type metadata for (tag: String, item: String));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: String, item: String)>);
    }
  }
}

void type metadata accessor for (seed: Int, removeIndex: Int)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (_Benchmark, [Double])()
{
  if (!lazy cache variable for type metadata for (_Benchmark, [Double]))
  {
    type metadata accessor for ContainerBackgroundHost(255, &lazy cache variable for type metadata for _Benchmark);
    _sypSgMaTm_1(255, &lazy cache variable for type metadata for [Double], MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB320]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_Benchmark, [Double]));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>)
  {
    _sypSgMaTm_1(255, &lazy cache variable for type metadata for WeakAttribute<SwipeActions.Value>, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4F4E730]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>)
  {
    type metadata accessor for ClosedRange<CGFloat>(255, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>);
    }
  }
}

void type metadata accessor for ClosedRange<CGFloat>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<String.Index>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>)
  {
    type metadata accessor for _TraitWritingModifier<DropOntoTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
    }
  }
}

void type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)()
{
  if (!lazy cache variable for type metadata for (index: Int, element: TabCustomizationID, id: TabCustomizationID))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TabCustomizationID, id: TabCustomizationID));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Int?>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Int?>)
  {
    _sypSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Int?>);
    }
  }
}

uint64_t View.invalidatableContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  MEMORY[0x18C113660](&KeyPath, a2, &type metadata for InvalidatableContentModifier, a3);
  return swift_release();
}

uint64_t one-time initialization function for pulsingAnimation()
{
  static Animation.timingCurve(_:_:_:_:duration:)();
  Animation.repeatForever(autoreverses:)();
  swift_release();
  uint64_t v0 = Animation.delay(_:)();
  uint64_t result = swift_release();
  static InvalidatableContentModifier.pulsingAnimation = v0;
  return result;
}

uint64_t InvalidatableContentModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v8);
  outlined consume of Environment<Bool>.Content(v3, v4);
  char v5 = v8;
  if ((v8 & 4) != 0)
  {
    if (one-time initialization token for pulsingAnimation != -1) {
      swift_once();
    }
    uint64_t result = swift_retain();
    long long v7 = xmmword_18835A560;
  }
  else
  {
    uint64_t result = 0;
    long long v7 = 0uLL;
  }
  *(_OWORD *)a1 = v7;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = (v5 & 4) == 0;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvalidatableContentModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.redactionReasons : EnvironmentValues@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.redactionReasons.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187835F20@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.redactionReasons.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.redactionReasons : EnvironmentValues()
{
  return EnvironmentValues.redactionReasons.setter();
}

uint64_t sub_187835F9C()
{
  return EnvironmentValues.redactionReasons.setter();
}

uint64_t sub_187835FD4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier;
  if (!lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier;
  if (!lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier;
  if (!lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidatableContentModifier()
{
  return &type metadata for InvalidatableContentModifier;
}

unint64_t instantiation function for generic protocol witness table for InvalidatableContentModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  a1[2] = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  unint64_t result = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InvalidatableContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>((unint64_t *)&lazy protocol witness table cache variable for type AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>> and conformance AppearanceAnimationView<A, B>, (void (*)(uint64_t))type metadata accessor for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>);
    lazy protocol witness table accessor for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>)
  {
    type metadata accessor for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>();
    type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>);
    }
  }
}

void type metadata accessor for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>()
{
  if (!lazy cache variable for type metadata for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>)
  {
    type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>();
    type metadata accessor for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>();
    lazy protocol witness table accessor for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AppearanceAnimationView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<InvalidatableContentModifier>)
  {
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<InvalidatableContentModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>)
  {
    type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>();
    lazy protocol witness table accessor for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized FixedSizeLazyLayout<>.sizeThatFits(proposedSize:subviews:context:cache:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(unsigned char *)(v7 + 8))
  {
    double v10 = 0.0;
    if (*MEMORY[0x1E4F4E7A0] != HIDWORD(a7))
    {
      uint64_t Value = (_OWORD *)AGGraphGetValue();
      long long v12 = Value[1];
      v18[0] = *Value;
      v18[1] = v12;
      double v10 = MEMORY[0x18C114450]();
    }
  }
  else
  {
    double v10 = *(double *)v7;
  }
  uint64_t v19 = 0;
  char v20 = 1;
  LOBYTE(v18[0]) = a2 & 1;
  uint64_t v13 = ProposedViewSize.subscript.getter();
  char v15 = v14;
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v18);
  if (v15) {
    double v16 = specialized getter of flexibleMinorLength #1 in FixedSizeLazyLayout<>.sizeThatFits(proposedSize:subviews:context:cache:)(&v19, (uint64_t)v18, specialized FixedSizeLazyLayout<>.resolveFlexibleMinorLength(subviews:subviewLength:));
  }
  else {
    double v16 = *(double *)&v13;
  }
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v18);
  if (v10 > 0.0 && v16 > 0.0)
  {
    uint64_t result = _ViewList_Node.estimatedCount(style:)();
    if (__OFSUB__(result, 1)) {
      __break(1u);
    }
    else {
      return ProposedViewSize.subscript.getter();
    }
  }
  return result;
}

{
  uint64_t v7;
  double v10;
  _OWORD *Value;
  long long v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  uint64_t result;
  _OWORD v19[8];
  uint64_t v20;
  char v21;

  if (*(unsigned char *)(v7 + 8))
  {
    double v10 = 0.0;
    if (*MEMORY[0x1E4F4E7A0] != HIDWORD(a7))
    {
      uint64_t Value = (_OWORD *)AGGraphGetValue();
      long long v12 = Value[1];
      v19[0] = *Value;
      v19[1] = v12;
      MEMORY[0x18C114450]();
      double v10 = v13;
    }
  }
  else
  {
    double v10 = *(double *)v7;
  }
  char v20 = 0;
  unsigned int v21 = 1;
  LOBYTE(v19[0]) = a2 & 1;
  *(double *)&char v14 = COERCE_DOUBLE(ProposedViewSize.subscript.getter());
  double v16 = v15;
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v19);
  if (v16) {
    size_t v17 = specialized getter of flexibleMinorLength #1 in FixedSizeLazyLayout<>.sizeThatFits(proposedSize:subviews:context:cache:)(&v20, (uint64_t)v19, specialized FixedSizeLazyLayout<>.resolveFlexibleMinorLength(subviews:subviewLength:));
  }
  else {
    size_t v17 = *(double *)&v14;
  }
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v19);
  if (v10 > 0.0 && v17 > 0.0)
  {
    uint64_t result = _ViewList_Node.estimatedCount(style:)();
    if (__OFSUB__(result, 1)) {
      __break(1u);
    }
    else {
      return ProposedViewSize.subscript.getter();
    }
  }
  return result;
}

unint64_t specialized FixedSizeLazyLayout<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, double (*a6)(uint64_t, double, double, double, double, double, double, double, double)@<X7>, uint64_t a7@<X8>, char a8)
{
  unint64_t v10 = result;
  if (a4)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a2 + 16) > result)
    {
      unint64_t v12 = a2 + 72 * result;
      char v13 = *(unsigned char *)(v12 + 48);
      uint64_t v14 = *(void *)(v12 + 56);
      char v15 = *(unsigned char *)(v12 + 64);
      *(void *)a7 = *(void *)(v12 + 40);
      *(unsigned char *)(a7 + 8) = v13;
      *(void *)(a7 + 16) = v14;
      *(unsigned char *)(a7 + 24) = v15;
      long long v16 = *(_OWORD *)(v12 + 72);
      long long v17 = *(_OWORD *)(v12 + 88);
LABEL_12:
      *(_OWORD *)(a7 + 32) = v16;
      *(_OWORD *)(a7 + 48) = v17;
      return result;
    }
    __break(1u);
  }
  else
  {
    unint64_t v20 = *(void *)(a5 + 280);
    unint64_t v21 = *(void *)(a5 + 288);
    char v22 = *(unsigned char *)(a5 + 296);
    long long v23 = *(_OWORD *)(a5 + 104);
    long long v24 = *(_OWORD *)(a5 + 136);
    long long v42 = *(_OWORD *)(a5 + 120);
    long long v43 = v24;
    long long v44 = *(_OWORD *)(a5 + 152);
    long long v25 = *(_OWORD *)(a5 + 72);
    long long v38 = *(_OWORD *)(a5 + 56);
    long long v39 = v25;
    long long v40 = *(_OWORD *)(a5 + 88);
    long long v41 = v23;
    if (v22) {
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v21, v20));
    }
    ScrollGeometry.visibleRect.getter();
    double v27 = v26;
    double v29 = v28;
    double v31 = v30;
    double v33 = v32;
    uint64_t v34 = swift_allocObject();
    long long v35 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v34 + 16) = *(_OWORD *)v8;
    *(_OWORD *)(v34 + 32) = v35;
    *(_OWORD *)(v34 + 48) = *(_OWORD *)(v8 + 32);
    *(void *)(v34 + 64) = *(void *)(v8 + 48);
    Array<A>.synthesizedPlacement(of:in:avoiding:distance:)(v10, a2, a6, a3, (uint64_t)&v38, v27, v29, v31, v33);
    uint64_t result = swift_release();
    if ((v42 & 1) == 0)
    {
      char v36 = BYTE8(v38);
      long long v37 = v39;
      long long v16 = v40;
      long long v17 = v41;
      *(void *)a7 = v38;
      *(unsigned char *)(a7 + 8) = v36 & 1;
      *(void *)(a7 + 16) = v37;
      *(unsigned char *)(a7 + 24) = BYTE8(v37) & 1;
      goto LABEL_12;
    }
    return Array<A>.externalPlacement(of:avoiding:in:)(v10, a8, a2, a7);
  }
  return result;
}

uint64_t specialized FixedSizeLazyLayout<>.boundingRect(at:subviews:context:cache:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t result = *(unsigned int *)(a2 + 12);
    double v7 = 0.0;
    if (result != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = AGGraphGetValue();
      uint64_t result = MEMORY[0x18C114450](Value, v9, v10, v11);
    }
  }
  else
  {
    double v7 = *(double *)v3;
  }
  double v12 = *(double *)(a2 + 40);
  if (v12 <= 0.0)
  {
    uint64_t v13 = 0;
    double v14 = 0.0;
    double v7 = 0.0;
LABEL_9:
    *(double *)a3 = v14;
    *(void *)(a3 + 8) = 0;
    *(double *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = v13;
    *(unsigned char *)(a3 + 32) = v12 <= 0.0;
    return result;
  }
  if (!__OFSUB__(v5, 1))
  {
    double v14 = v7 * (double)v5 + *(double *)(v3 + 24) * (double)(v5 - 1);
    uint64_t v13 = *(void *)(a2 + 40);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  double v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;

  uint64_t v5 = result;
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t result = *(unsigned int *)(a2 + 12);
    double v7 = 0.0;
    if (result != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = AGGraphGetValue();
      uint64_t result = MEMORY[0x18C114450](Value, v9, v10, v11);
    }
  }
  else
  {
    double v7 = *(double *)v3;
  }
  double v12 = *(double *)(a2 + 32);
  if (v12 <= 0.0)
  {
    uint64_t v13 = 0;
    double v14 = 0.0;
    double v7 = 0.0;
LABEL_9:
    *(void *)a3 = 0;
    *(double *)(a3 + 8) = v14;
    *(void *)(a3 + 16) = v13;
    *(double *)(a3 + 24) = v7;
    *(unsigned char *)(a3 + 32) = v12 <= 0.0;
    return result;
  }
  if (!__OFSUB__(v5, 1))
  {
    double v14 = v7 * (double)v5 + *(double *)(v3 + 24) * (double)(v5 - 1);
    uint64_t v13 = *(void *)(a2 + 32);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in FixedSizeLazyLayout<>.resolveFlexibleMinorLength(subviews:subviewLength:)(uint64_t a1, unsigned char *a2, char a3, double *a4)
{
  LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  _ProposedSize.init(_:)();
  uint64_t result = LayoutProxy.size(in:)();
  if ((a3 & 1) == 0) {
    double v8 = v9;
  }
  *a4 = v8;
  *a2 = 1;
  return result;
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, void, void, uint64_t, _BYTE))specialized FixedSizeLazyLayout<>.sizeThatFits(proposedSize:subviews:context:cache:));
}

void protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(v9, a2, 0x129uLL);
  long long v8 = v4[1];
  long long v10 = *v4;
  long long v11 = v8;
  long long v12 = v4[2];
  uint64_t v13 = *((void *)v4 + 6);
  specialized FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(a1, (uint64_t)v9, a3, a4);
}

void protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, const void *a2)
{
  memcpy(v5, a2, 0x129uLL);
  long long v4 = v2[1];
  long long v6 = *v2;
  long long v7 = v4;
  long long v8 = v2[2];
  uint64_t v9 = *((void *)v2 + 6);
  specialized FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(a1, (uint64_t)v5);
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyFixedSizeHStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v12 = v6[1];
  long long v15 = *v6;
  long long v16 = v12;
  long long v17 = v6[2];
  uint64_t v18 = *((void *)v6 + 6);
  return specialized FixedSizeLazyLayout<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:), a6, 0);
}

unint64_t protocol witness for LazyLayout.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:) in conformance LazyFixedSizeHStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v12 = v6[1];
  long long v15 = *v6;
  long long v16 = v12;
  long long v17 = v6[2];
  uint64_t v18 = *((void *)v6 + 6);
  return specialized FixedSizeLazyLayout<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:), a6, 0);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout(a3, a1, a2, (void (*)(void *__return_ptr, uint64_t, uint64_t, unsigned char *))specialized FixedSizeLazyLayout<>.boundingRect(at:subviews:context:cache:), a4);
}

void protocol witness for LazyLayout.pinnedViews.getter in conformance LazyFixedSizeHStackLayout(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyFixedSizeHStackLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyFixedSizeHStackLayout()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LazyFixedSizeHStack.init(width:alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2 & 1;
  *(void *)(a8 + 16) = a3;
  if (a5) {
    defaultSpacingValue.getter();
  }
  else {
    uint64_t v11 = a4;
  }
  *(void *)(a8 + 24) = v11;
  uint64_t v12 = a8 + *(int *)(type metadata accessor for LazyFixedSizeHStack() + 44);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32);

  return v13(v12, a6, a7);
}

uint64_t LazyFixedSizeHStack.init(width:alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(width:alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeHStack.init(width:alignment:spacing:content:));
}

uint64_t static LazyFixedSizeHStack._makeView(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  int v18 = *((_DWORD *)a2 + 20);
  LODWORD(v26) = *a1;
  type metadata accessor for LazyFixedSizeHStack();
  type metadata accessor for _GraphValue();
  long long v19 = *(_OWORD *)(a2 + 5);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v11 = a2[9];
  int v27 = v5;
  uint64_t v28 = v6;
  int v29 = v7;
  int v30 = v8;
  int v31 = v10;
  int v32 = v9;
  *(void *)&long long v33 = v19;
  LODWORD(v26) = _GraphValue.value.getter();
  HIDWORD(v26) = _GraphInputs.scrollPhaseState.getter();
  uint64_t v21 = type metadata accessor for _VariadicView.Tree();
  uint64_t View = type metadata accessor for LazyFixedSizeHStack.MakeView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v20, View, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  _GraphValue.init(_:)();
  uint64_t v25 = a4;
  uint64_t v26 = v16;
  int v27 = v5;
  uint64_t v28 = v6;
  int v29 = v7;
  int v30 = v8;
  int v31 = v10;
  int v32 = v9;
  long long v33 = v19;
  long long v34 = v17;
  uint64_t v35 = v11;
  int v36 = v18;
  long long v24 = &protocol witness table for LazyFixedSizeHStackLayout;
  swift_getWitnessTable();
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t type metadata accessor for LazyFixedSizeHStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeHStack<A>.MakeView@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeHStack<A>.MakeView(a1);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = type metadata accessor for _VariadicView.Tree();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance LazyFixedSizeHStack<A>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFixedSizeHStack.MakeView.value.getter(*v2, *(void *)(a1 + 16), (uint64_t (*)(void))type metadata accessor for LazyFixedSizeHStack, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t)&protocol witness table for LazyFixedSizeHStackLayout, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyFixedSizeHStack<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static LazyFixedSizeHStack._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyFixedSizeHStack<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyFixedSizeHStack<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance LazyFixedSizeHStack<A>()
{
}

uint64_t LazyFixedSizeHStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeHStack.init(width:alignment:spacing:content:));
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, void, void, uint64_t, _BYTE))specialized FixedSizeLazyLayout<>.sizeThatFits(proposedSize:subviews:context:cache:));
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, void, uint64_t, void, uint64_t, void, void, uint64_t, _BYTE))
{
  return a10(a1, a2 & 1, a3, a4 & 1, a5, *a6, a6[1], a8, a4 & 1);
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(v10, a2, 0x129uLL);
  long long v8 = v4[1];
  long long v11 = *v4;
  long long v12 = v8;
  long long v13 = v4[2];
  uint64_t v14 = *((void *)v4 + 6);
  return specialized FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(a1, (uint64_t)v10, a3, a4);
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, const void *a2)
{
  memcpy(v6, a2, 0x129uLL);
  long long v4 = v2[1];
  long long v7 = *v2;
  long long v8 = v4;
  long long v9 = v2[2];
  uint64_t v10 = *((void *)v2 + 6);
  return specialized FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(a1, (uint64_t)v6);
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyFixedSizeVStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v12 = v6[1];
  long long v15 = *v6;
  long long v16 = v12;
  long long v17 = v6[2];
  uint64_t v18 = *((void *)v6 + 6);
  return specialized FixedSizeLazyLayout<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:), a6, 1);
}

unint64_t protocol witness for LazyLayout.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:) in conformance LazyFixedSizeVStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v12 = v6[1];
  long long v15 = *v6;
  long long v16 = v12;
  long long v17 = v6[2];
  uint64_t v18 = *((void *)v6 + 6);
  return specialized FixedSizeLazyLayout<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:), a6, 1);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t v13 = a8();
  return specialized FixedSizeLazyLayout<>.firstIndex<A>(of:subviews:context:)(a1, a2, a3, a6, a4, v13);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyFixedSizeVStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout(a3, a1, a2, (void (*)(void *__return_ptr, uint64_t, uint64_t, unsigned char *))specialized FixedSizeLazyLayout<>.boundingRect(at:subviews:context:cache:), a4);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyFixedSizeHStackLayout@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, void (*a4)(void *__return_ptr, uint64_t, uint64_t, unsigned char *)@<X6>, uint64_t a5@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v10 = v5[1];
  long long v14 = *v5;
  long long v15 = v10;
  long long v16 = v5[2];
  uint64_t v17 = *((void *)v5 + 6);
  a4(v12, a2, a3, __dst);
  return outlined init with take of CGRect?((uint64_t)v12, a5);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyFixedSizeVStackLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyFixedSizeVStackLayout()
{
}

uint64_t LazyFixedSizeVStack.init(height:alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2 & 1;
  *(void *)(a8 + 16) = a3;
  if (a5) {
    defaultSpacingValue.getter();
  }
  else {
    uint64_t v11 = a4;
  }
  *(void *)(a8 + 24) = v11;
  uint64_t v12 = a8 + *(int *)(type metadata accessor for LazyFixedSizeVStack() + 44);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32);

  return v13(v12, a6, a7);
}

uint64_t LazyFixedSizeVStack.init(height:alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(width:alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeVStack.init(height:alignment:spacing:content:));
}

uint64_t LazyFixedSizeHStack.init(width:alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v13 = a3 & 1;
  double v14 = MEMORY[0x1F4188790](a1);
  long long v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = v14;
  v18();
  return a8(*(void *)&v17, 0, a1, a2, v13, v16, a6, a7);
}

uint64_t static LazyFixedSizeVStack._makeView(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  int v18 = *((_DWORD *)a2 + 20);
  LODWORD(v26) = *a1;
  type metadata accessor for LazyFixedSizeVStack();
  type metadata accessor for _GraphValue();
  long long v19 = *(_OWORD *)(a2 + 5);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v11 = a2[9];
  int v27 = v5;
  uint64_t v28 = v6;
  int v29 = v7;
  int v30 = v8;
  int v31 = v10;
  int v32 = v9;
  *(void *)&long long v33 = v19;
  LODWORD(v26) = _GraphValue.value.getter();
  HIDWORD(v26) = _GraphInputs.scrollPhaseState.getter();
  uint64_t v21 = type metadata accessor for _VariadicView.Tree();
  uint64_t View = type metadata accessor for LazyFixedSizeVStack.MakeView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v20, View, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  _GraphValue.init(_:)();
  uint64_t v25 = a4;
  uint64_t v26 = v16;
  int v27 = v5;
  uint64_t v28 = v6;
  int v29 = v7;
  int v30 = v8;
  int v31 = v10;
  int v32 = v9;
  long long v33 = v19;
  long long v34 = v17;
  uint64_t v35 = v11;
  int v36 = v18;
  long long v24 = &protocol witness table for LazyFixedSizeVStackLayout;
  swift_getWitnessTable();
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t LazyFixedSizeHStack.MakeView.view.getter@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t Value = AGGraphGetValue();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(a2, Value, v3);
}

uint64_t LazyFixedSizeHStack.MakeView.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  int v8 = HIDWORD(a1);
  uint64_t v39 = a6;
  uint64_t v38 = *(void *)(a2 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v37 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v11(0, v9);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v36 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  long long v17 = &v33[-v16];
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v33[-v19];
  MEMORY[0x1F4188790](v21);
  long long v23 = &v33[-v22];
  LazyFixedSizeHStack.MakeView.view.getter(a3, (uint64_t)&v33[-v22]);
  uint64_t v35 = *(void *)v23;
  int v34 = v23[8];
  long long v24 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
  v24(v23, v12);
  LazyFixedSizeHStack.MakeView.view.getter(a3, (uint64_t)v20);
  uint64_t v25 = *((void *)v20 + 2);
  v24(v20, v12);
  LazyFixedSizeHStack.MakeView.view.getter(a3, (uint64_t)v17);
  uint64_t v26 = *((void *)v17 + 3);
  v24(v17, v12);
  if (*MEMORY[0x1E4F4E7A0] == v8 || (uint64_t Value = (unsigned __int8 *)AGGraphGetValue(), v28 = *Value, v28 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    int v29 = &v42;
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v28) = v42;
  }
  else
  {
    int v29 = (uint64_t *)Value;
  }
  long long v30 = *(_OWORD *)(v29 + 1);
  int v31 = v36;
  uint64_t v42 = v35;
  char v43 = v34;
  uint64_t v44 = v25;
  uint64_t v45 = v26;
  char v46 = v28;
  long long v47 = v30;
  LazyFixedSizeHStack.MakeView.view.getter(a3, (uint64_t)v36);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v38 + 32))(v37, &v31[*(int *)(v12 + 44)], a2);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeVStack<A>.MakeView@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeHStack<A>.MakeView(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LazyFixedSizeVStack<A>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFixedSizeHStack.MakeView.value.getter(*v2, *(void *)(a1 + 16), (uint64_t (*)(void))type metadata accessor for LazyFixedSizeVStack, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t)&protocol witness table for LazyFixedSizeVStackLayout, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyFixedSizeVStack<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static LazyFixedSizeVStack._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyFixedSizeVStack<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyFixedSizeVStack<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance LazyFixedSizeVStack<A>()
{
}

uint64_t LazyFixedSizeVStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeVStack.init(height:alignment:spacing:content:));
}

uint64_t LazyFixedSizeHStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v13 = a3 & 1;
  double v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  return a8(0, 1, a1, a2, v13, v16, a6, a7);
}

uint64_t type metadata accessor for LazyFixedSizeHStack.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyFixedSizeVStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyFixedSizeVStack.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in LazyFixedSizeHStack<A>()
{
  return &protocol witness table for LazyFixedSizeHStack<A>;
}

_UNKNOWN **base witness table accessor for View in LazyFixedSizeVStack<A>()
{
  return &protocol witness table for LazyFixedSizeVStack<A>;
}

uint64_t type metadata completion function for LazyFixedSizeHStack()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 32) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    double v9 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v10 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    *double v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for LazyFixedSizeHStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v4 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithCopy for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = v4;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v5 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v4 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v4 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyFixedSizeHStack(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)(a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      return 0;
    }
  }
  int v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(unsigned char *)(a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v8) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for LazyFixedSizeHStack(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 32) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero((void *)a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          *(unsigned char *)(a1 + 2) = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *(unsigned char *)a1 = v16;
        }
      }
    }
    else
    {
      bzero((void *)a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        *(unsigned char *)(a1 + v9) = v14;
        return;
      case 2:
        *(_WORD *)(a1 + v9) = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)(a1 + v9) = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      *(unsigned char *)(a1 + v9) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)(a1 + v9) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187838D9CLL);
    case 4:
      *(_DWORD *)(a1 + v9) = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

ValueMetadata *type metadata accessor for LazyFixedSizeVStackLayout()
{
  return &type metadata for LazyFixedSizeVStackLayout;
}

uint64_t getEnumTagSinglePayload for LazyFixedSizeVStackLayout(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyFixedSizeVStackLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyFixedSizeHStackLayout()
{
  return &type metadata for LazyFixedSizeHStackLayout;
}

unint64_t instantiation function for generic protocol witness table for LazyFixedSizeHStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LazyFixedSizeVStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LazyFixedSizeVStack<A>.MakeView()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LazyFixedSizeHStack<A>.MakeView()
{
  return swift_getWitnessTable();
}

double specialized FixedSizeLazyLayout<>.resolveFlexibleMinorLength(subviews:subviewLength:)(uint64_t a1)
{
  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v3 = *(void *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  unsigned char v2[88];
  uint64_t v3;
  uint64_t v4;
  double v5;

  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v3 = *(void *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

double specialized getter of flexibleMinorLength #1 in FixedSizeLazyLayout<>.sizeThatFits(proposedSize:subviews:context:cache:)(unsigned char *a1, uint64_t a2, double (*a3)(uint64_t))
{
  if ((a1[8] & 1) == 0) {
    return *(double *)a1;
  }
  double v4 = a3(a2);
  swift_beginAccess();
  *(double *)a1 = v4;
  a1[8] = 0;
  return v4;
}

uint64_t specialized FixedSizeLazyLayout<>.firstIndex<A>(of:subviews:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6 = *(double *)(a3 + 32);
  double v7 = *(double *)(a3 + 40);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6)) {
    double v8 = v6;
  }
  else {
    double v8 = v7;
  }
  if (v8 <= 0.0) {
    return 0;
  }
  DragDropDefaultPreviewResponder.contentShapeKind.getter(&v10);
  return _LazyLayout_Subviews.firstIndex<A>(id:style:)();
}

uint64_t sub_187839300()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in FixedSizeLazyLayout<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return MEMORY[0x1F4101AD0](a5, a6, a7, a8, a1, a2, a3, a4);
}

uint64_t sub_187839318()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FixedSizeLazyLayout<>.resolveFlexibleMinorLength(subviews:subviewLength:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in FixedSizeLazyLayout<>.resolveFlexibleMinorLength(subviews:subviewLength:)(a1, a2, *(unsigned char *)(v2 + 24), *(double **)(v2 + 32));
}

uint64_t sub_18783938C()
{
  return swift_deallocObject();
}

uint64_t sub_1878393A4()
{
  return swift_deallocObject();
}

uint64_t ModalLink.isPresented.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + *(int *)(a2 + 56) + 8))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t ModalLink.$isPresented.getter()
{
  type metadata accessor for State<Bool>();
  State.projectedValue.getter();
  return v1;
}

uint64_t ModalLink.init(presenting:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ModalLink();
  uint64_t v9 = a4 + *(int *)(v8 + 56);
  *(unsigned char *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  uint64_t result = a3(v8, v10, v11, v12);
  int v14 = (void *)(a4 + *(int *)(v8 + 52));
  *int v14 = a1;
  v14[1] = a2;
  return result;
}

uint64_t type metadata accessor for ModalLink()
{
  return swift_getGenericMetadata();
}

uint64_t ModalLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  double v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v45 = type metadata accessor for Button();
  uint64_t v51 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  char v46 = (_WORD *)((char *)&v41 - v9);
  uint64_t v10 = *(void *)(a1 + 24);
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>();
  uint64_t v60 = v10;
  uint64_t v61 = v12;
  uint64_t v62 = v13;
  unint64_t v63 = v14;
  uint64_t v15 = v13;
  uint64_t v49 = type metadata accessor for SheetPresentationModifier();
  uint64_t v47 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  char v43 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v48 = (char *)&v41 - v19;
  uint64_t v20 = v2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v2, a1, v18);
  unint64_t v21 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  uint64_t v23 = v44;
  *((void *)v22 + 2) = v44;
  *((void *)v22 + 3) = v10;
  uint64_t v42 = v10;
  *((void *)v22 + 4) = v8;
  *((void *)v22 + 5) = v15;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v22[v21], v6, a1);
  uint64_t v53 = v23;
  uint64_t v54 = v10;
  uint64_t v55 = v8;
  uint64_t v56 = v15;
  uint64_t v24 = v20;
  uint64_t v57 = v20;
  uint64_t v25 = v46;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in ModalLink.body.getter, (uint64_t)v22, (void (*)(uint64_t))partial apply for closure #2 in ModalLink.body.getter, v46);
  uint64_t v26 = ModalLink.$isPresented.getter();
  uint64_t v28 = v27;
  LOBYTE(v4) = v29;
  long long v30 = (unint64_t *)(v24 + *(int *)(a1 + 52));
  unint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  uint64_t v33 = v45;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = v43;
  View.sheet<A>(isPresented:onDismiss:content:)(v26, v28, v4 & 1, 0, 0, v31, v32, v33, v42, WitnessTable, v15);
  swift_release();
  swift_release();
  (*(void (**)(_WORD *, uint64_t))(v51 + 8))(v25, v33);
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v58 = WitnessTable;
  uint64_t v59 = v36;
  uint64_t v37 = v47;
  swift_getWitnessTable();
  uint64_t v38 = v48;
  static ViewBuilder.buildExpression<A>(_:)(v35);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v50 + 8);
  v39(v35, v37);
  static ViewBuilder.buildExpression<A>(_:)(v38);
  return ((uint64_t (*)(char *, uint64_t))v39)(v38, v37);
}

void type metadata accessor for NullSheetAnchor<SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>)
  {
    unint64_t v0 = type metadata accessor for NullSheetAnchor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>;
  if (!lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>);
  }
  return result;
}

uint64_t sub_187839A48()
{
  long long v3 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = *(void *)(type metadata accessor for ModalLink() - 8);
  (*(void (**)(unint64_t))(*(void *)(v3 - 8) + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ModalLink.body.getter()
{
  type metadata accessor for ModalLink();
  uint64_t v0 = type metadata accessor for ModalLink();
  return ModalLink.isPresented.setter(1, v0);
}

uint64_t closure #2 in ModalLink.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #2 in ModalLink.body.getter()
{
  return closure #2 in ModalLink.body.getter(*(void *)(v0 + 48), *(void *)(v0 + 16));
}

__n128 ModalLink<>.init(_:presenting:)@<Q0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, unint64_t a4@<X7>, uint64_t a5@<X8>)
{
  *(void *)&long long v16 = MEMORY[0x1E4F41420];
  *((void *)&v16 + 1) = a3;
  uint64_t v17 = MEMORY[0x1E4F41418];
  v18.n128_u64[0] = a4;
  uint64_t v8 = type metadata accessor for ModalLink();
  uint64_t v9 = (char *)&v16 + *(int *)(v8 + 56);
  *uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)((uint64_t)&v16);
  uint64_t v10 = (void *)((char *)&v16 + *(int *)(v8 + 52));
  *uint64_t v10 = a1;
  v10[1] = a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v11 = v17;
  uint64_t v12 = v19;
  char v13 = v20;
  uint64_t v14 = v21;
  __n128 result = v18;
  *(_OWORD *)a5 = v16;
  *(unsigned char *)(a5 + 16) = v11;
  *(__n128 *)(a5 + 24) = result;
  *(void *)(a5 + 40) = v12;
  *(unsigned char *)(a5 + 48) = v13;
  *(void *)(a5 + 56) = v14;
  return result;
}

__n128 ModalLink<>.init<A>(_:presenting:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)&long long v20 = MEMORY[0x1E4F41420];
  *((void *)&v20 + 1) = a4;
  uint64_t v21 = MEMORY[0x1E4F41418];
  v22.n128_u64[0] = a6;
  uint64_t v12 = type metadata accessor for ModalLink();
  char v13 = (char *)&v20 + *(int *)(v12 + 56);
  *char v13 = 0;
  *((void *)v13 + 1) = 0;
  closure #1 in ModalLink<>.init<A>(_:presenting:)(a1, (uint64_t)&v20);
  uint64_t v14 = (void *)((char *)&v20 + *(int *)(v12 + 52));
  *uint64_t v14 = a2;
  v14[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  char v15 = v21;
  uint64_t v16 = v23;
  char v17 = v24;
  uint64_t v18 = v25;
  __n128 result = v22;
  *(_OWORD *)a7 = v20;
  *(unsigned char *)(a7 + 16) = v15;
  *(__n128 *)(a7 + 24) = result;
  *(void *)(a7 + 40) = v16;
  *(unsigned char *)(a7 + 48) = v17;
  *(void *)(a7 + 56) = v18;
  return result;
}

uint64_t closure #1 in ModalLink<>.init<A>(_:presenting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ModalLink<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ModalLink()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModalLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    char v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
    *(void *)(v13 + 8) = *(void *)(v14 + 8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ModalLink(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)(v9 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v10 + 8) = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModalLink(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18783A66CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ModalLink(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18783A874);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_18783A89C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for State<Bool>()
{
  if (!lazy cache variable for type metadata for State<Bool>)
  {
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>);
    }
  }
}

uint64_t Gesture.sequenced<A>(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return SequenceGesture.init(_:_:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t SequenceGesture.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for SequenceGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for SequenceGesture()
{
  return swift_getGenericMetadata();
}

uint64_t SequenceGesture.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SequenceGesture.first.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*SequenceGesture.first.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SequenceGesture.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SequenceGesture.second.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*SequenceGesture.second.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static SequenceGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v49 = a7;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v8 = *a1;
  long long v9 = a2[5];
  long long v94 = a2[4];
  long long v95 = v9;
  v96[0] = a2[6];
  *(_OWORD *)((char *)v96 + 12) = *(long long *)((char *)a2 + 108);
  long long v10 = a2[1];
  long long v90 = *a2;
  long long v91 = v10;
  long long v11 = a2[3];
  long long v92 = a2[2];
  long long v93 = v11;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  int v44 = v8;
  LODWORD(v76) = v8;
  uint64_t v45 = a4;
  uint64_t v50 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = type metadata accessor for SequenceGesture();
  uint64_t v42 = type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  long long v87 = v94;
  long long v88 = v95;
  *(_OWORD *)uint64_t v89 = v96[0];
  *(_OWORD *)&v89[12] = *(_OWORD *)((char *)v96 + 12);
  long long v83 = v90;
  long long v84 = v91;
  long long v85 = v92;
  long long v86 = v93;
  int v12 = v77;
  long long v80 = v94;
  long long v81 = v95;
  v82[0] = v96[0];
  *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)((char *)v96 + 12);
  long long v77 = v91;
  long long v78 = v92;
  long long v79 = v93;
  outlined retain of _GestureInputs((uint64_t)&v90);
  int v13 = _GestureInputs.events.getter();
  uint64_t v53 = *((void *)&v76 + 1);
  uint64_t v51 = v76;
  int v52 = v12;
  LODWORD(v77) = v12;
  uint64_t v14 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = type metadata accessor for _GestureOutputs();
  LODWORD(v76) = v13;
  DWORD1(v76) = _GestureOutputs.phase.getter();
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v63 = type metadata accessor for SequenceEvents();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<[EventID : EventType]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v76, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)&v62, v63, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  uint64_t v43 = 0;
  uint64_t v18 = _GestureInputs.events.setter();
  if ((v89[24] & 2) == 0) {
    *(_DWORD *)&v89[24] |= 2u;
  }
  MEMORY[0x1F4188790](v18);
  uint64_t v38 = v14;
  uint64_t v19 = v45;
  uint64_t v20 = v47;
  uint64_t v34 = v47;
  LODWORD(v76) = v44;
  _GraphValue.subscript.getter();
  long long v80 = v87;
  long long v81 = v88;
  v82[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)&v89[12];
  long long v76 = v83;
  long long v77 = v84;
  long long v78 = v85;
  long long v79 = v86;
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  unsigned int v21 = v69;
  int v44 = v69;
  unsigned int v22 = DWORD1(v69);
  uint64_t v23 = *((void *)&v69 + 1);
  uint64_t v40 = *((void *)&v69 + 1);
  int v24 = v70;
  int v41 = v70;
  LODWORD(v42) = DWORD1(v69);
  *(void *)&long long v76 = v51;
  *((void *)&v76 + 1) = v53;
  LODWORD(v77) = v52;
  LODWORD(v36) = _GestureOutputs.phase.getter();
  *(void *)&long long v76 = __PAIR64__(v22, v21);
  *((void *)&v76 + 1) = v23;
  LODWORD(v77) = v24;
  uint64_t v39 = swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  LODWORD(v23) = _GestureOutputs.phase.getter();
  long long v80 = v94;
  long long v81 = v95;
  v82[0] = v96[0];
  *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)((char *)v96 + 12);
  long long v76 = v90;
  long long v77 = v91;
  long long v78 = v92;
  long long v79 = v93;
  uint64_t v25 = _GestureInputs.resetSeed.getter();
  uint64_t v37 = &v35;
  *(void *)&long long v69 = __PAIR64__(v23, v36);
  *((void *)&v69 + 1) = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v26 = v50;
  uint64_t v27 = v38;
  *(void *)&long long v76 = v38;
  *((void *)&v76 + 1) = v19;
  *(void *)&long long v77 = v50;
  *((void *)&v77 + 1) = v20;
  uint64_t v36 = type metadata accessor for SequenceGesture.Value();
  v31[2] = type metadata accessor for GesturePhase();
  *(void *)&long long v76 = v27;
  *((void *)&v76 + 1) = v19;
  *(void *)&long long v77 = v26;
  *((void *)&v77 + 1) = v20;
  uint64_t v32 = type metadata accessor for SequencePhase();
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v28 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v69, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v31, v32, MEMORY[0x1E4FBC248], v28, MEMORY[0x1E4FBC278], v29);
  _GestureOutputs.init(phase:)();
  char v61 = 4;
  long long v73 = v94;
  long long v74 = v95;
  v75[0] = v96[0];
  *(_OWORD *)((char *)v75 + 12) = *(_OWORD *)((char *)v96 + 12);
  long long v69 = v90;
  long long v70 = v91;
  long long v71 = v92;
  long long v72 = v93;
  uint64_t v58 = v51;
  uint64_t v59 = v53;
  int v60 = v52;
  int v54 = v44;
  int v55 = v42;
  uint64_t v56 = v40;
  int v57 = v41;
  type metadata accessor for _GestureOutputs();
  LOBYTE(v76) = 1;
  _GestureOutputs.wrapDebugOutputs<A, B, C>(_:kind:properties:inputs:combiningOutputs:)();
  long long v80 = v87;
  long long v81 = v88;
  v82[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)&v89[12];
  long long v76 = v83;
  long long v77 = v84;
  long long v78 = v85;
  long long v79 = v86;
  outlined release of _GestureInputs((uint64_t)&v76);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static SequenceGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  long long v10[2] = type metadata accessor for SequenceGesture();
  v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t partial apply for closure #1 in static SequenceGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static SequenceGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined retain of _GestureInputs(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #2 in static SequenceGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for SequenceGesture();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  long long v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SequenceGesture<A, B>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static SequenceGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t static SequenceGesture.Value<>.== infix(_:_:)(void (*a1)(char *, char *), char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v81[1] = a8;
  uint64_t v92 = a7;
  uint64_t v96 = a1;
  uint64_t v97 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v81[0] = (char *)v81 - v13;
  uint64_t v84 = v14;
  uint64_t v15 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v83 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v87 = (char *)v81 - v16;
  uint64_t v95 = v15;
  uint64_t v94 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v82 = (char *)v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  long long v88 = (char *)v81 - v20;
  MEMORY[0x1F4188790](v21);
  long long v93 = (char *)v81 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v98 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v89 = (char *)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)v81 - v26;
  uint64_t v99 = a3;
  uint64_t v100 = a4;
  uint64_t v101 = a5;
  uint64_t v102 = a6;
  uint64_t v28 = type metadata accessor for SequenceGesture.Value();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  unint64_t v31 = (char *)v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)v81 - v33;
  uint64_t v35 = swift_getTupleTypeMetadata2();
  uint64_t v91 = *(void *)(v35 - 8);
  double v36 = MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)v81 - v37;
  uint64_t v40 = (char *)v81 + *(int *)(v39 + 48) - v37;
  uint64_t v90 = v29;
  int v41 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  ((void (*)(char *, void (*)(char *, char *), uint64_t, double))v41)((char *)v81 - v37, v96, v28, v36);
  v41(v40, v97, v28);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v97 = v38;
    v41(v34, v38, v28);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v67 = v98;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v27, v40, v23);
      char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v68 = *(void (**)(char *, uint64_t))(v67 + 8);
      v68(v27, v23);
      v68(v34, v23);
      uint64_t v64 = v90;
      uint64_t v38 = v97;
      goto LABEL_17;
    }
    unint64_t v31 = v34;
    uint64_t v38 = v97;
    uint64_t v65 = v98;
    goto LABEL_10;
  }
  v41(v31, v38, v28);
  uint64_t v42 = v95;
  uint64_t v43 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  int v44 = &v31[v43];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(&v31[v43], v42);
    uint64_t v65 = v98;
LABEL_10:
    uint64_t v66 = v91;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v31, v23);
    char v63 = 0;
    uint64_t v64 = v66;
    uint64_t v28 = v35;
    goto LABEL_17;
  }
  uint64_t v97 = &v40[v43];
  uint64_t v45 = v98;
  uint64_t v46 = v89;
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v89, v40, v23);
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
  v47(v93, v44, v42);
  uint64_t v48 = v88;
  v47(v88, v97, v42);
  uint64_t v49 = v46;
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v52 = v45 + 8;
  uint64_t v51 = v53;
  v53(v31, v23);
  if ((v50 & 1) == 0)
  {
    uint64_t v69 = v95;
    long long v70 = *(void (**)(char *, uint64_t))(v94 + 8);
    v70(v48, v95);
    v70(v93, v69);
    v51(v49, v23);
    char v63 = 0;
    uint64_t v64 = v90;
    goto LABEL_17;
  }
  uint64_t v96 = (void (*)(char *, char *))v51;
  uint64_t v97 = (char *)v23;
  uint64_t v98 = v52;
  int v54 = v87;
  int v55 = &v87[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  uint64_t v57 = v95;
  v56(v87, v93, v95);
  v56(v55, v48, v57);
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
  uint64_t v59 = v48;
  uint64_t v60 = v84;
  if (v58(v54, 1, v84) != 1)
  {
    long long v71 = v82;
    v56(v82, v54, v95);
    if (v58(v55, 1, v60) != 1)
    {
      uint64_t v75 = v85;
      long long v76 = v71;
      uint64_t v77 = v81[0];
      (*(void (**)(void, char *, uint64_t))(v85 + 32))(v81[0], v55, v60);
      LODWORD(v92) = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v78 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v78(v77, v60);
      uint64_t v79 = v95;
      long long v80 = *(void (**)(char *, uint64_t))(v94 + 8);
      v80(v88, v95);
      v80(v93, v79);
      v96(v89, v97);
      v78((uint64_t)v76, v60);
      v80(v54, v79);
      uint64_t v64 = v90;
      if (v92)
      {
        char v63 = 1;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    uint64_t v72 = v95;
    long long v73 = *(void (**)(char *, uint64_t))(v94 + 8);
    v73(v88, v95);
    v73(v93, v72);
    v96(v89, v97);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v71, v60);
LABEL_15:
    (*(void (**)(char *, uint64_t))(v83 + 8))(v87, TupleTypeMetadata2);
    uint64_t v64 = v90;
LABEL_16:
    char v63 = 0;
    goto LABEL_17;
  }
  uint64_t v61 = v95;
  uint64_t v62 = *(void (**)(char *, uint64_t))(v94 + 8);
  v62(v59, v95);
  v62(v93, v61);
  v96(v89, v97);
  if (v58(v55, 1, v60) != 1) {
    goto LABEL_15;
  }
  v62(v87, v61);
  char v63 = 1;
  uint64_t v64 = v90;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v28);
  return v63 & 1;
}

uint64_t SequenceEvents.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> SequenceGesture<A, B>.Value(void (*a1)(char *, char *), char *a2, uint64_t *a3, uint64_t a4)
{
  return static SequenceGesture.Value<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), *(void *)(a4 - 16));
}

unint64_t SequenceEvents.value.getter()
{
  uint64_t v0 = type metadata accessor for GesturePhase();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)&v6 - v2;
  SequenceEvents.phase.getter((uint64_t)&v6 - v2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (EnumCaseMultiPayload != 2) {
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  type metadata accessor for [EventID : EventType]();
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t SequencePhase.phase0.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t SequencePhase.phase1.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t SequencePhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

unint64_t protocol witness for Rule.value.getter in conformance SequenceEvents<A>@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SequenceEvents.value.getter();
  *a1 = result;
  return result;
}

uint64_t SequencePhase.updateValue()(void *a1)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for GesturePhase();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v80 = v4;
  uint64_t v81 = v5;
  MEMORY[0x1F4188790](v4);
  long long v73 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  long long v78 = (char *)v71 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v79 = (uint64_t)v71 - v10;
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[2];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v82 = (char *)v71 - v14;
  uint64_t v84 = v15;
  uint64_t v16 = type metadata accessor for GesturePhase();
  uint64_t v90 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v77 = (char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v71 - v19;
  MEMORY[0x1F4188790](v21);
  long long v76 = (char *)v71 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v71 - v24;
  uint64_t v91 = v12;
  uint64_t v92 = v3;
  uint64_t v93 = v11;
  uint64_t v94 = v2;
  uint64_t v83 = type metadata accessor for SequenceGesture.Value();
  uint64_t v26 = type metadata accessor for GesturePhase();
  uint64_t v87 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  long long v86 = (char *)v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v85 = (char *)v71 - v29;
  swift_getWitnessTable();
  long long v88 = a1;
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    uint64_t v72 = v26;
    v71[1] = v3;
    SequencePhase.phase0.getter((uint64_t)v25);
    uint64_t v75 = v16;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v32 = v89;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v33 = v90;
        uint64_t v35 = v25;
        uint64_t v36 = v75;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v20, v25, v75);
        uint64_t v38 = v85;
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v85, v20, v84);
        swift_storeEnumTagMultiPayload();
        uint64_t v51 = v72;
        goto LABEL_12;
      case 2:
        uint64_t v39 = v77;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v77, v25, v75);
        uint64_t v40 = v84;
        uint64_t v77 = *(char **)(v32 + 32);
        ((void (*)(char *, char *, uint64_t))v77)(v82, v39, v84);
        uint64_t v41 = v79;
        SequencePhase.phase1.getter(v79);
        uint64_t v42 = v80;
        int v43 = swift_getEnumCaseMultiPayload();
        uint64_t v35 = v25;
        uint64_t v38 = v85;
        int v44 = v78;
        switch(v43)
        {
          case 1:
            uint64_t v56 = v73;
            (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v73, v41, v42);
            uint64_t v57 = AssociatedTypeWitness;
            type metadata accessor for Optional();
            uint64_t v58 = &v38[*(int *)(swift_getTupleTypeMetadata2() + 48)];
            uint64_t v59 = *(void *)(v57 - 8);
            (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v56, v57);
            ((void (*)(char *, char *, uint64_t))v77)(v38, v82, v40);
            uint64_t v60 = v41;
            uint64_t v61 = v58;
            uint64_t v62 = v81;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v61, 0, 1, v57);
            swift_storeEnumTagMultiPayload();
            goto LABEL_16;
          case 2:
            char v63 = v73;
            (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v73, v41, v42);
            uint64_t v64 = AssociatedTypeWitness;
            type metadata accessor for Optional();
            uint64_t v65 = v40;
            uint64_t v60 = v41;
            uint64_t v66 = &v38[*(int *)(swift_getTupleTypeMetadata2() + 48)];
            uint64_t v67 = *(void *)(v64 - 8);
            (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v63, v64);
            ((void (*)(char *, char *, uint64_t))v77)(v38, v82, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v66, 0, 1, v64);
            uint64_t v62 = v81;
            swift_storeEnumTagMultiPayload();
LABEL_16:
            uint64_t v51 = v72;
            uint64_t v53 = v88;
            uint64_t v52 = (uint64_t)v86;
            break;
          case 3:
            (*(void (**)(char *, uint64_t))(v32 + 8))(v82, v40);
            uint64_t v60 = v41;
            uint64_t v51 = v72;
            uint64_t v53 = v88;
            uint64_t v52 = (uint64_t)v86;
            uint64_t v62 = v81;
            break;
          default:
            (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v78, v41, v42);
            uint64_t v45 = AssociatedTypeWitness;
            uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
            int v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, AssociatedTypeWitness);
            type metadata accessor for Optional();
            TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
            uint64_t v49 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
            char v50 = v44;
            uint64_t v51 = v72;
            uint64_t v52 = (uint64_t)v86;
            if (v47 == 1)
            {
              ((void (*)(char *, char *, uint64_t))v77)(v38, v82, v40);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v49, 1, 1, v45);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v38[*(int *)(TupleTypeMetadata2 + 48)], v50, v45);
              ((void (*)(char *, char *, uint64_t))v77)(v38, v82, v40);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v49, 0, 1, v45);
            }
            swift_storeEnumTagMultiPayload();
            uint64_t v53 = v88;
            uint64_t v42 = v80;
            uint64_t v62 = v81;
            uint64_t v60 = v79;
            break;
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v42);
        uint64_t v36 = v75;
        uint64_t v54 = v87;
        uint64_t v33 = v90;
        goto LABEL_21;
      case 3:
        uint64_t v35 = v25;
        uint64_t v38 = v85;
        uint64_t v51 = v72;
        swift_storeEnumTagMultiPayload();
        uint64_t v36 = v75;
        uint64_t v54 = v87;
        uint64_t v53 = v88;
        uint64_t v33 = v90;
        goto LABEL_13;
      default:
        uint64_t v33 = v90;
        uint64_t v34 = v76;
        uint64_t v35 = v25;
        uint64_t v36 = v75;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v76, v25, v75);
        uint64_t v37 = v84;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v84) == 1)
        {
          uint64_t v38 = v85;
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v85, 1, 1);
        }
        else
        {
          uint64_t v38 = v85;
          (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v85, v34, v37);
          uint64_t v55 = v83;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t))(*(void *)(v55 - 8) + 56))(v38, 0, 1);
        }
        uint64_t v51 = v72;
LABEL_12:
        swift_storeEnumTagMultiPayload();
        uint64_t v54 = v87;
        uint64_t v53 = v88;
LABEL_13:
        uint64_t v52 = (uint64_t)v86;
LABEL_21:
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v36);
        uint64_t v68 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 16))(v52, v38, v51);
        MEMORY[0x1F4188790](v68);
        v71[-2] = v53;
        v71[-1] = swift_getWitnessTable();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v52, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v71[-4], v51, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v69);
        long long v70 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v70(v52, v51);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v70)(v38, v51);
        break;
    }
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance SequencePhase<A, B>()
{
  return MEMORY[0x1F40FFCE8]();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance SequencePhase<A, B>()
{
  return SequencePhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance SequencePhase<A, B>()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance SequencePhase<A, B>(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance SequencePhase<A, B>())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance SequencePhase<A, B>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SequenceGesture.Value();
  uint64_t v2 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t type metadata accessor for SequenceEvents()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in static SequenceGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #2 in static SequenceGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for SequenceGesture.Value()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SequencePhase()
{
  return swift_getGenericMetadata();
}

uint64_t outlined release of _GestureInputs(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t base witness table accessor for Gesture in SequenceGesture<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SequenceGesture<A, B>()
{
  return MEMORY[0x1E4F418F0];
}

uint64_t getEnumTagSinglePayload for SequenceGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for SequenceGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18783D544);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for SequenceGesture.Value()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SequenceGesture.Value(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  size_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8;
  size_t v10 = v5 + v8;
  size_t v11 = (v5 + v9) & ~v9;
  if (*(_DWORD *)(v7 + 84)) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  if (v11 + v12 <= v5) {
    size_t v13 = v5;
  }
  else {
    size_t v13 = v11 + v12;
  }
  int v14 = *(_DWORD *)(v4 + 80) | v8;
  uint64_t v15 = (*(unsigned char *)(v4 + 80) | v8);
  int v16 = v14 & 0x100000;
  if (v15 > 7 || v16 != 0 || v13 + 1 > 0x18)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v19 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    uint64_t v27 = v6;
    unsigned int v20 = a2[v13];
    if (v20 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_25;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_25;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_25;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_25:
          int v23 = (v22 | ((v20 - 2) << (8 * v13))) + 2;
          unsigned int v24 = v22 + 2;
          if (v13 >= 4) {
            unsigned int v20 = v24;
          }
          else {
            unsigned int v20 = v23;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
    if (v20 == 1)
    {
      uint64_t v25 = (const void *)((unint64_t)&a2[v10] & ~v9);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v25, 1, v27))
      {
        memcpy((void *)(((unint64_t)a1 + v10) & ~v9), v25, v12);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v7 + 16))(((unint64_t)a1 + v10) & ~v9, v25, v27);
        (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v7 + 56))(((unint64_t)a1 + v10) & ~v9, 0, 1, v27);
      }
      *((unsigned char *)a1 + v13) = 1;
    }
    else
    {
      *((unsigned char *)a1 + v13) = 0;
    }
  }
  return a1;
}

uint64_t destroy for SequenceGesture.Value(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v4 + v7;
  uint64_t v19 = v6;
  uint64_t v9 = *(void *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84)) {
    ++v9;
  }
  unint64_t v10 = v9 + ((v4 + v7) & ~v7);
  if (v10 <= v4) {
    unint64_t v10 = v4;
  }
  unsigned int v11 = a1[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a1;
        goto LABEL_14;
      case 2:
        int v13 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v13 = *(_DWORD *)a1;
LABEL_14:
        int v14 = (v13 | ((v11 - 2) << (8 * v10))) + 2;
        unsigned int v15 = v13 + 2;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  if (v11 == 1)
  {
    unint64_t v17 = (unint64_t)&a1[v8] & ~v7;
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v5);
    if (!result)
    {
      unsigned int v18 = *(uint64_t (**)(unint64_t, uint64_t))(v19 + 8);
      return v18(v17, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for SequenceGesture.Value(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  size_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v8;
  size_t v10 = *(void *)(v7 + 64);
  if (!*(_DWORD *)(v7 + 84)) {
    ++v10;
  }
  size_t __n = v10;
  if (((v5 + v8) & ~v8) + v10 <= v5) {
    size_t v11 = v5;
  }
  else {
    size_t v11 = ((v5 + v8) & ~v8) + v10;
  }
  unsigned int v12 = a2[v11];
  if (v12 < 2)
  {
    uint64_t v14 = a1;
  }
  else
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    uint64_t v14 = a1;
    switch(v13)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_16;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_16:
        int v16 = (v15 | ((v12 - 2) << (8 * v11))) + 2;
        unsigned int v17 = v15 + 2;
        if (v11 >= 4) {
          unsigned int v12 = v17;
        }
        else {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v4 + 16))(v14, a2, AssociatedTypeWitness);
  if (v12 == 1)
  {
    unsigned int v18 = (const void *)((unint64_t)&a2[v9] & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
    {
      memcpy((void *)((v9 + v14) & ~v8), v18, __n);
      char v19 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 16))((v9 + v14) & ~v8, v18, v6);
      char v19 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))((v9 + v14) & ~v8, 0, 1, v6);
    }
  }
  else
  {
    char v19 = 0;
  }
  *(unsigned char *)(v14 + v11) = v19;
  return v14;
}

unsigned __int8 *assignWithCopy for SequenceGesture.Value(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = v6 + v9;
    size_t v11 = *(void *)(v8 + 64);
    if (!*(_DWORD *)(v8 + 84)) {
      ++v11;
    }
    size_t __n = v11;
    size_t v12 = ((v6 + v9) & ~v9) + v11;
    if (v12 > v6) {
      size_t v6 = v12;
    }
    unsigned int v13 = a1[v6];
    if (v13 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          goto LABEL_15;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_15;
        case 4:
          int v15 = *(_DWORD *)a1;
LABEL_15:
          int v16 = (v15 | ((v13 - 2) << (8 * v6))) + 2;
          unsigned int v17 = v15 + 2;
          if (v6 >= 4) {
            unsigned int v13 = v17;
          }
          else {
            unsigned int v13 = v16;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v18 = ~v9;
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    if (v13 == 1
      && !(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))((unint64_t)&a1[v10] & v18, 1, v7))
    {
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&a1[v10] & v18, v7);
    }
    unsigned int v19 = a2[v6];
    if (v19 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v20 = v6;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_30;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_30;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_30;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_30:
          int v22 = (v21 | ((v19 - 2) << (8 * v6))) + 2;
          unsigned int v23 = v21 + 2;
          if (v6 >= 4) {
            unsigned int v19 = v23;
          }
          else {
            unsigned int v19 = v22;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v19 == 1)
    {
      unsigned int v24 = (const void *)((unint64_t)&a2[v10] & v18);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v24, 1, v7))
      {
        memcpy((void *)((unint64_t)&a1[v10] & v18), v24, __n);
        char v25 = 1;
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v8 + 16))((unint64_t)&a1[v10] & v18, v24, v7);
        char v25 = 1;
        (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v8 + 56))((unint64_t)&a1[v10] & v18, 0, 1, v7);
      }
    }
    else
    {
      char v25 = 0;
    }
    a1[v6] = v25;
  }
  return a1;
}

uint64_t initializeWithTake for SequenceGesture.Value(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  size_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v8;
  size_t v10 = *(void *)(v7 + 64);
  if (!*(_DWORD *)(v7 + 84)) {
    ++v10;
  }
  size_t __n = v10;
  if (((v5 + v8) & ~v8) + v10 <= v5) {
    size_t v11 = v5;
  }
  else {
    size_t v11 = ((v5 + v8) & ~v8) + v10;
  }
  unsigned int v12 = a2[v11];
  if (v12 < 2)
  {
    uint64_t v14 = a1;
  }
  else
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    uint64_t v14 = a1;
    switch(v13)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_16;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_16:
        int v16 = (v15 | ((v12 - 2) << (8 * v11))) + 2;
        unsigned int v17 = v15 + 2;
        if (v11 >= 4) {
          unsigned int v12 = v17;
        }
        else {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v4 + 32))(v14, a2, AssociatedTypeWitness);
  if (v12 == 1)
  {
    uint64_t v18 = (const void *)((unint64_t)&a2[v9] & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
    {
      memcpy((void *)((v9 + v14) & ~v8), v18, __n);
      char v19 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 32))((v9 + v14) & ~v8, v18, v6);
      char v19 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))((v9 + v14) & ~v8, 0, 1, v6);
    }
  }
  else
  {
    char v19 = 0;
  }
  *(unsigned char *)(v14 + v11) = v19;
  return v14;
}

unsigned __int8 *assignWithTake for SequenceGesture.Value(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = v6 + v9;
    size_t v11 = *(void *)(v8 + 64);
    if (!*(_DWORD *)(v8 + 84)) {
      ++v11;
    }
    size_t __n = v11;
    size_t v12 = ((v6 + v9) & ~v9) + v11;
    if (v12 > v6) {
      size_t v6 = v12;
    }
    unsigned int v13 = a1[v6];
    if (v13 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          goto LABEL_15;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_15;
        case 4:
          int v15 = *(_DWORD *)a1;
LABEL_15:
          int v16 = (v15 | ((v13 - 2) << (8 * v6))) + 2;
          unsigned int v17 = v15 + 2;
          if (v6 >= 4) {
            unsigned int v13 = v17;
          }
          else {
            unsigned int v13 = v16;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v18 = ~v9;
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    if (v13 == 1
      && !(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))((unint64_t)&a1[v10] & v18, 1, v7))
    {
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&a1[v10] & v18, v7);
    }
    unsigned int v19 = a2[v6];
    if (v19 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v20 = v6;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_30;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_30;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_30;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_30:
          int v22 = (v21 | ((v19 - 2) << (8 * v6))) + 2;
          unsigned int v23 = v21 + 2;
          if (v6 >= 4) {
            unsigned int v19 = v23;
          }
          else {
            unsigned int v19 = v22;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v19 == 1)
    {
      unsigned int v24 = (const void *)((unint64_t)&a2[v10] & v18);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v24, 1, v7))
      {
        memcpy((void *)((unint64_t)&a1[v10] & v18), v24, __n);
        char v25 = 1;
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v8 + 32))((unint64_t)&a1[v10] & v18, v24, v7);
        char v25 = 1;
        (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v8 + 56))((unint64_t)&a1[v10] & v18, 0, 1, v7);
      }
    }
    else
    {
      char v25 = 0;
    }
    a1[v6] = v25;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SequenceGesture.Value(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 + ((v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v6 + ((v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_26;
  }
  unint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v12 < 2)
    {
LABEL_26:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 2) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_26;
  }
LABEL_18:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 255;
}

void storeEnumTagSinglePayload for SequenceGesture.Value(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v8 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v8 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v9 = v8 + ((v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  if (v9 <= v6) {
    unint64_t v9 = v6;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v12 = a2 - 255;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x18783ECB0);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for SequenceGesture.Value(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v3 + 84)) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  unint64_t v5 = v4 + ((v2 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  if (v5 <= v2) {
    unint64_t v5 = v2;
  }
  uint64_t result = a1[v5];
  if (result >= 2)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_15;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v9 = (v8 | ((result - 2) << (8 * v5))) + 2;
        unsigned int v10 = v8 + 2;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for SequenceGesture.Value(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 + ((v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) <= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = v6 + ((v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  }
  if (a2 > 1)
  {
    if (v7 <= 3) {
      char v8 = ((a2 - 2) >> (8 * v7)) + 2;
    }
    else {
      char v8 = 2;
    }
    if (v7 <= 3) {
      int v9 = (a2 - 2) & ~(-1 << (8 * v7));
    }
    else {
      int v9 = a2 - 2;
    }
    a1[v7] = v8;
    if (v7 >= 4) {
      int v10 = 4;
    }
    else {
      int v10 = v7;
    }
    bzero(a1, v7);
    switch(v10)
    {
      case 2:
        *(_WORD *)a1 = v9;
        break;
      case 3:
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
        break;
      case 4:
        *(_DWORD *)a1 = v9;
        break;
      default:
        *a1 = v9;
        break;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t base witness table accessor for StatefulRule in SequencePhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SequencePhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SequenceEvents<A>()
{
  return swift_getWitnessTable();
}

void static SheetBehavior.navigationSplitViewForm.getter()
{
}

void View.sheetBehavior(_:)()
{
}

ValueMetadata *type metadata accessor for SheetBehavior()
{
  return &type metadata for SheetBehavior;
}

uint64_t sub_18783F07C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unsigned char *storeEnumTagSinglePayload for SheetBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18783F150);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SheetBehavior.Role()
{
  return &type metadata for SheetBehavior.Role;
}

unint64_t lazy protocol witness table accessor for type [SheetBehavior.Role] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SheetBehavior.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SheetBehavior.Role] and conformance [A])
  {
    type metadata accessor for [SheetBehavior.Role]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SheetBehavior.Role] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [SheetBehavior.Role]()
{
  if (!lazy cache variable for type metadata for [SheetBehavior.Role])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SheetBehavior.Role]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SheetBehavior.Role and conformance SheetBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type SheetBehavior.Role and conformance SheetBehavior.Role;
  if (!lazy protocol witness table cache variable for type SheetBehavior.Role and conformance SheetBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SheetBehavior.Role and conformance SheetBehavior.Role);
  }
  return result;
}

void static SheetBehavior.sheet.getter()
{
}

void static SheetBehavior.form.getter()
{
}

void __swiftcall PrototypePrintingCommands.init()()
{
}

void PrototypePrintingCommands.body.getter()
{
}

uint64_t associated type witness table accessor for Commands.Body : Commands in PrototypePrintingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PrototypePrintingCommands()
{
  return &type metadata for PrototypePrintingCommands;
}

_UNKNOWN **sub_18783F308()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t initializeWithCopy for WheelEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for WheelEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for WheelEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WheelEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WheelEvent()
{
  return &type metadata for WheelEvent;
}

double protocol witness for EventType.init(_:) in conformance WheelEvent@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    double result = v3;
    *(double *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)&double result = 1;
    *(_OWORD *)(a1 + 16) = xmmword_18834FC50;
  }
  return result;
}

BOOL specialized static WheelEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  double v5 = *(double *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v4)
  {
    if (!v6) {
      return v5 == *(double *)(a2 + 24);
    }
    goto LABEL_13;
  }
  if (!v6)
  {
    swift_retain();
LABEL_13:
    swift_release();
    return 0;
  }
  if (v4 == v6) {
    return v5 == *(double *)(a2 + 24);
  }
  return 0;
}

void *initializeBufferWithCopyOfBuffer for CustomHoverEffectModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || (((((v6 & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    unint64_t v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    char v13 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = v13;
    uint64_t v14 = *(void *)(v11 + 24);
    char v15 = *(unsigned char *)(v11 + 32);
    outlined copy of Environment<Bool>.Content(v14, v15);
    *(void *)(v10 + 24) = v14;
    *(unsigned char *)(v10 + 32) = v15;
    *(unsigned char *)(v10 + 33) = *(unsigned char *)(v11 + 33);
    unint64_t v16 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v11 + 41) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)v17;
    *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
    *(void *)unint64_t v16 = v18;
    unint64_t v19 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v11 + 57) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
    *(void *)unint64_t v19 = v21;
    *(unsigned char *)(v19 + 9) = *(unsigned char *)(v20 + 9);
    *(void *)((v19 + 17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v20 + 17) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithTake for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v9;
  char v10 = *(unsigned char *)(v8 + 32);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(unsigned char *)(v7 + 32) = v10;
  *(unsigned char *)(v7 + 33) = *(unsigned char *)(v8 + 33);
  unint64_t v11 = (v7 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 41) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = v13;
  unint64_t v14 = (v7 + 57) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 57) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v11) = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v11;
  *(unsigned char *)(v14 + 9) = *(unsigned char *)(v15 + 9);
  *(void *)((v14 + 17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v7) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  *(void *)(v9 + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v9 + 16) = v7;
  outlined consume of Environment<Bool>.Content(v11, v12);
  char v13 = *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v9 + 24);
  char v15 = *(unsigned char *)(v9 + 32);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(unsigned char *)(v9 + 32) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  *(unsigned char *)(v9 + 33) = *(unsigned char *)(v10 + 33);
  unint64_t v16 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = v18;
  unint64_t v19 = (v9 + 57) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 9) = *(unsigned char *)(v20 + 9);
  *(void *)((v19 + 17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v20 + 17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomHoverEffectModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18783FAE0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_21:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *((unsigned __int8 *)a1 + v6);
  if (v17 >= 2) {
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for CustomHoverEffectModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = (((((v9 & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_39;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0xFE)
            {
              a1[v9] = a2 + 1;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if ((((((v9 & 0xFFFFFFF8) + 57) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if ((((((v9 & 0xFFFFFFF8) + 57) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if ((((((v9 & 0xFFFFFFF8) + 57) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, (((((v9 & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18783FCD0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

void protocol witness for static Rule.initialValue.getter in conformance CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(_WORD *)(a1 + 24) = 2;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomHoverEffectPrimitiveViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t key path setter for EnvironmentValues.hoverEffectState : EnvironmentValues()
{
  return EnvironmentValues.hoverEffectState.setter();
}

uint64_t sub_18783FDE0()
{
  return EnvironmentValues.hoverEffectState.setter();
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomHoverEffectPrimitiveViewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 44 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v11 = *(_OWORD *)((char *)v10 + 28);
    long long v12 = v10[1];
    int v13 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v13 = *v10;
    v13[1] = v12;
    *(_OWORD *)((char *)v13 + 28) = v11;
  }
  return v4;
}

uint64_t initializeWithTake for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 28);
  long long v10 = v8[1];
  *int v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 28) = v9;
  return a1;
}

uint64_t assignWithTake for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  char v9 = *(unsigned char *)(v8 + 24);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = v9;
  char v10 = *(unsigned char *)(v8 + 40);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(unsigned char *)(v7 + 40) = v10;
  *(unsigned char *)(v7 + 41) = *(unsigned char *)(v8 + 41);
  *(unsigned char *)(v7 + 42) = *(unsigned char *)(v8 + 42);
  *(unsigned char *)(v7 + 43) = *(unsigned char *)(v8 + 43);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2 && *((unsigned char *)a1 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 44)) {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v9 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v9 >= 2) {
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 44;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0xFE)
      {
        unint64_t v14 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
        if (a2 > 0xFE)
        {
          double result = 0.0;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_OWORD *)(v14 + 8) = 0u;
          *(_DWORD *)(v14 + 40) = 0;
          *(void *)unint64_t v14 = a2 - 255;
        }
        else
        {
          *(unsigned char *)(v14 + 8) = a2 + 1;
        }
      }
      else
      {
        int v13 = *(void (**)(void))(v6 + 56);
        v13();
      }
    }
  }
  else
  {
    unsigned int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
  return result;
}

uint64_t sub_187840288()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in CustomHoverEffectPrimitiveViewModifier<A>()
{
  return &protocol witness table for CustomHoverEffectPrimitiveViewModifier<A>;
}

uint64_t sub_187840374()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t AnyNavigationLinkPresentedValue.view<A>(basedOn:applying:apparentPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  long long v12 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v12;
  uint64_t v15 = v7;
  long long v16 = *(_OWORD *)(a1 + 40);
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  char v19 = v10;
  uint64_t v20 = v11;
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 168))(v14, a2, a3, a4, a6, a7);
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 208) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 240), a1);
  return v2;
}

uint64_t AnyNavigationLinkPresentedValue.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a3, a3);
}

uint64_t AnyNavigationLinkPresentedValue.validateSelection<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 160))(a1, a3, a4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyNavigationLinkPresentedValue()
{
  uint64_t v1 = *v0;
  uint64_t v2 = Hasher.init(_seed:)();
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 96))(v4, v2);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyNavigationLinkPresentedValue()
{
  (*(void (**)(void *__return_ptr))(**(void **)v0 + 96))(v2);
  AnyHashable.hash(into:)();
  return outlined destroy of AnyHashable((uint64_t)v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyNavigationLinkPresentedValue()
{
  uint64_t v1 = *v0;
  uint64_t v2 = Hasher.init(_seed:)();
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 96))(v4, v2);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v4);
  return Hasher._finalize()();
}

void AnyNavigationLinkPresentedValueStorageBase.presentedType.getter()
{
}

void AnyNavigationLinkPresentedValueStorageBase.description.getter()
{
}

void AnyNavigationLinkPresentedValueStorageBase.hashableRepresentation.getter()
{
}

void AnyNavigationLinkPresentedValueStorageBase.presentationAction.getter()
{
}

void AnyNavigationLinkPresentedValueStorageBase.presentationInListAction.getter()
{
}

void AnyNavigationLinkPresentedValueStorageBase.as<A>(_:)()
{
}

void AnyNavigationLinkPresentedValueStorageBase.append(to:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.isSelected<A>(in:)()
{
}

void AnyNavigationLinkPresentedValueStorageBase.validateSelection<A>(in:)()
{
}

void AnyNavigationLinkPresentedValueStorageBase.view<A>(basedOn:applying:apparentPosition:)()
{
}

void AnyNavigationLinkPresentedValueStorageBase.matches(_:)()
{
}

void AnyNavigationLinkPresentedValueStorageBase.isOn(_:)()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyNavigationLinkPresentedValue()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

unint64_t AnyNavigationLinkPresentedValueStorage.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  int v5 = (char *)&v8 - v4;
  unint64_t v8 = 0;
  unint64_t v9 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v8 = 0xD000000000000021;
  unint64_t v9 = 0x800000018832A8D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + *(void *)(*(void *)v1 + 224), v2);
  v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t AnyNavigationLinkPresentedValueStorage.hashableRepresentation.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - v5, (uint64_t)v1 + *(void *)(v2 + 224), v3, v4);
  return AnyHashable.init<A>(_:)();
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentationAction.getter@<X0>(uint64_t a1@<X8>)
{
  return AnyNavigationLinkPresentedValueStorage.presentationAction.getter(1, a1);
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentationInListAction.getter@<X0>(uint64_t a1@<X8>)
{
  return AnyNavigationLinkPresentedValueStorage.presentationAction.getter(3, a1);
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentationAction.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 224);
  uint64_t v7 = *(void *)(*v2 + 208);
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = *(void *)(v5 + 216);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(boxed_opaque_existential_1, v6, v7);
  *(unsigned char *)(a2 + 56) = a1;
  return result;
}

uint64_t AnyNavigationLinkPresentedValueStorage.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)v3 + 208);
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v13 - v10, v3 + *(void *)(v8 + 224), v6, v7);
  int v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v11 ^ 1u, 1, a2);
}

uint64_t AnyNavigationLinkPresentedValueStorage.append(to:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  double v7 = (char *)v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - v6, (uint64_t)v1 + *(void *)(v2 + 224), v3, v5);
  AnyNavigationPath.append<A>(_:)((uint64_t)v7, v3, *(void *)(v2 + 216));
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AnyNavigationLinkPresentedValueStorage.append(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 208);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  long long v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v14 - v11, (uint64_t)v3 + *(void *)(v7 + 224), v8, v10);
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  type metadata accessor for Binding<AnyNavigationPath>();
  MEMORY[0x18C113DA0](&v18);
  AnyNavigationPath.append<A>(_:)((uint64_t)v12, v8, *(void *)(v7 + 216));
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v15 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AnyNavigationLinkPresentedValueStorage.validateSelection<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a3;
  v24[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *(void *)(v5 + 208);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 224)], v10, v16);
  char v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    uint64_t v22 = type metadata accessor for SelectionManagerBox();
    if ((SelectionManagerBox.isSelected(_:)(v18, v22) & 1) == 0) {
      SelectionManagerBox.select(_:)((uint64_t)v18, v22);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t AnyNavigationLinkPresentedValueStorage.view<A>(basedOn:applying:apparentPosition:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(*(void *)v6 + 208);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v27 - v14;
  uint64_t v17 = v16;
  uint64_t v19 = *(void *)(v18 + 32);
  uint64_t v20 = *(void *)(v18 + 56);
  uint64_t v21 = *(void *)(v18 + 64);
  char v22 = *(unsigned char *)(v18 + 72);
  uint64_t v23 = *(void *)(v18 + 80);
  long long v24 = *(_OWORD *)(v18 + 16);
  v27[0] = *(_OWORD *)v18;
  v27[1] = v24;
  uint64_t v28 = v19;
  long long v29 = *(_OWORD *)(v18 + 40);
  uint64_t v30 = v20;
  uint64_t v31 = v21;
  char v32 = v22;
  uint64_t v33 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v6 + *(void *)(v17 + 224), v12);
  uint64_t v25 = ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)((uint64_t)v15, a4, a2, a3, v12, a5, a6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v25;
}

uint64_t AnyNavigationLinkPresentedValueStorage.isOn(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 208);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v10 - v7, (uint64_t)v1 + *(void *)(v3 + 224), v4, v6);
  LOBYTE(v2) = AnyNavigationPath.contains<A>(_:)((uint64_t)v8, v2, v4, *(void *)(v3 + 216));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v2 & 1;
}

uint64_t AnyNavigationLinkPresentedValueStorage.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 208) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 224));
}

uint64_t type metadata completion function for AnyNavigationLinkCodablePresentedValueStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t AnyNavigationLinkCodablePresentedValueStorage.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - v4;
  unint64_t v8 = 0;
  unint64_t v9 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v8 = 0xD000000000000021;
  unint64_t v9 = 0x800000018832A8D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + *(void *)(*(void *)v1 + 240), v2);
  v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.hashableRepresentation.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - v5, (uint64_t)v1 + *(void *)(v2 + 240), v3, v4);
  return AnyHashable.init<A>(_:)();
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.presentationAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 240);
  uint64_t v6 = *(void *)(*v1 + 208);
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v4 + 216);
  *(void *)(a1 + 48) = *(void *)(v3 + 232);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v5, v6);
  *(unsigned char *)(a1 + 56) = 2;
  return result;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.presentationInListAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 240);
  uint64_t v5 = *(void *)(*v1 + 208);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(v3 + 232);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
  *(unsigned char *)(a1 + 56) = 3;
  return result;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)v3 + 208);
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v13 - v10, v3 + *(void *)(v8 + 240), v6, v7);
  int v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v11 ^ 1u, 1, a2);
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.append(to:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[26];
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  double v7 = (char *)v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - v6, (uint64_t)v1 + v2[30], v3, v5);
  AnyNavigationPath.append<A>(_:)((uint64_t)v7, v3, v2[27], v2[28], v2[29]);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.append(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v7 = *v3;
  uint64_t v8 = (*v3)[26];
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v14 - v11, (uint64_t)v3 + v7[30], v8, v10);
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  type metadata accessor for Binding<AnyNavigationPath>();
  MEMORY[0x18C113DA0](&v18);
  AnyNavigationPath.append<A>(_:)((uint64_t)v12, v8, v7[27], v7[28], v7[29]);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v15 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.isSelected<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[0] = a3;
  v25[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = *(void *)(v5 + 208);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 240)], v10, v16);
  int v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    uint64_t v22 = type metadata accessor for SelectionManagerBox();
    char v23 = SelectionManagerBox.isSelected(_:)(v18, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.validateSelection<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a3;
  v24[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *(void *)(v5 + 208);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 240)], v10, v16);
  char v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    uint64_t v22 = type metadata accessor for SelectionManagerBox();
    if ((SelectionManagerBox.isSelected(_:)(v18, v22) & 1) == 0) {
      SelectionManagerBox.select(_:)((uint64_t)v18, v22);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.view<A>(basedOn:applying:apparentPosition:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(*(void *)v6 + 208);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v27 - v14;
  uint64_t v17 = v16;
  uint64_t v19 = *(void *)(v18 + 32);
  uint64_t v20 = *(void *)(v18 + 56);
  uint64_t v21 = *(void *)(v18 + 64);
  char v22 = *(unsigned char *)(v18 + 72);
  uint64_t v23 = *(void *)(v18 + 80);
  long long v24 = *(_OWORD *)(v18 + 16);
  v27[0] = *(_OWORD *)v18;
  v27[1] = v24;
  uint64_t v28 = v19;
  long long v29 = *(_OWORD *)(v18 + 40);
  uint64_t v30 = v20;
  uint64_t v31 = v21;
  char v32 = v22;
  uint64_t v33 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v6 + *(void *)(v17 + 240), v12);
  uint64_t v25 = ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)((uint64_t)v15, a4, a2, a3, v12, a5, a6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v25;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.matches(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 208);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v12(v9, &v1[*(void *)(v2 + 240)], v3);
    v12(v6, (char *)(v11 + *(void *)(*(void *)v11 + 240)), v3);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v6, v3);
    v14(v9, v3);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.isOn(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 208);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v10 - v7, (uint64_t)v1 + *(void *)(v3 + 240), v4, v6);
  LOBYTE(v2) = AnyNavigationPath.contains<A>(_:)((uint64_t)v8, v2, v4, *(void *)(v3 + 232));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v2 & 1;
}

id AnyNavigationLinkCodablePresentedValueStorage.userActivityForOpeningScene(id:)(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 208);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v15 - v11, (uint64_t)v3 + *(void *)(v7 + 240), v8, v10);
  id v13 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow<A>(id:value:)(a1, a2, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v13;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 208) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 240));
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 208) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 240));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyNavigationLinkCodablePresentedValueStorage()
{
  return swift_getGenericMetadata();
}

BOOL specialized AnyNavigationLinkPresentedValue.canBeSelected<A>(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))() == a2;
}

void type metadata accessor for Binding<AnyNavigationPath>()
{
  if (!lazy cache variable for type metadata for Binding<AnyNavigationPath>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue;
  if (!lazy protocol witness table cache variable for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue);
  }
  return result;
}

uint64_t destroy for NavigationStackViewSource(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 40);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (v2 == 1)
  {
    swift_release();
    unint64_t result = *(void *)(v1 + 16);
    if (result != 1)
    {
      return swift_release();
    }
  }
  else if (!v2)
  {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t assignWithCopy for NavigationStackViewSource(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release();
      if (*(void *)(a1 + 16) != 1) {
        swift_release();
      }
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 2);
      swift_retain();
      if (v7 == 1)
      {
        *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
      }
      else
      {
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        swift_retain();
      }
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release();
      if (*(void *)(a1 + 16) != 1) {
        swift_release();
      }
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTag for NavigationStackViewSource(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationStackViewSource(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationStackViewSource()
{
  return &type metadata for NavigationStackViewSource;
}

void NavigationStackViewSource.hash(into:)()
{
  void (*v2)(_OWORD *__return_ptr, uint64_t);
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  long long v6;
  long long v7;
  uint64_t v8;
  char v9;

  outlined init with copy of NavigationStackViewSource(v0, (uint64_t)&v6);
  if (!v9)
  {
    v4[0] = v6;
    v4[1] = v7;
    unsigned int v5 = v8;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v4);
    return;
  }
  if (v9 != 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  *(_OWORD *)uint64_t v1 = v6;
  *(_OWORD *)&v1[16] = v7;
  Hasher._combine(_:)(2uLL);
  if (!*(void *)v1)
  {
    Hasher._combine(_:)(0);
    if (*(void *)&v1[16] == 1) {
      goto LABEL_5;
    }
LABEL_9:
    v4[0] = *(_OWORD *)&v1[8];
    Hasher._combine(_:)(1u);
    _ViewList_ID.Canonical.hash(into:)();
    goto LABEL_10;
  }
  Hasher._combine(_:)(1u);
  unsigned int v2 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)v1 + 96);
  uint64_t v3 = swift_retain();
  v2(v4, v3);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v4);
  swift_release();
  if (*(void *)&v1[16] != 1) {
    goto LABEL_9;
  }
LABEL_5:
  Hasher._combine(_:)(0);
LABEL_10:
  Hasher._combine(_:)(*(Swift::UInt *)&v1[24]);
  swift_release();
  outlined consume of Text.LineStyle?(*(uint64_t *)&v1[8], *(uint64_t *)&v1[16]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationStackViewSource()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationStackViewSource()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NavigationStackViewSource and conformance NavigationStackViewSource()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationStackViewSource and conformance NavigationStackViewSource;
  if (!lazy protocol witness table cache variable for type NavigationStackViewSource and conformance NavigationStackViewSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackViewSource and conformance NavigationStackViewSource);
  }
  return result;
}

uint64_t specialized static NavigationStackViewSource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of NavigationStackViewSource(a1, (uint64_t)v17);
  outlined init with copy of NavigationStackViewSource(a2, (uint64_t)v19);
  if (!v18)
  {
    outlined init with copy of NavigationStackViewSource((uint64_t)v17, (uint64_t)&v15);
    if (!v20)
    {
      long long v10 = *(_OWORD *)v19;
      long long v11 = *(_OWORD *)&v19[16];
      uint64_t v12 = *(void *)&v19[32];
      char v6 = MEMORY[0x18C1174E0](&v15, &v10);
      outlined destroy of AnyHashable((uint64_t)&v10);
      outlined destroy of AnyHashable((uint64_t)&v15);
      goto LABEL_13;
    }
    outlined destroy of AnyHashable((uint64_t)&v15);
    goto LABEL_11;
  }
  if (v18 == 1)
  {
    outlined init with copy of NavigationStackViewSource((uint64_t)v17, (uint64_t)&v15);
    uint64_t v3 = *((void *)&v15 + 1);
    uint64_t v4 = v16;
    if (v20 == 1)
    {
      uint64_t v5 = *(void *)&v19[8];
      long long v10 = v15;
      long long v11 = v16;
      v13[0] = *(void *)v19;
      v13[1] = *(void *)&v19[8];
      uint64_t v9 = *(void *)&v19[16];
      long long v14 = *(_OWORD *)&v19[16];
      char v6 = specialized static NavigationLinkSelectionIdentifier.== infix(_:_:)(&v10, v13);
      swift_release();
      outlined consume of Text.LineStyle?(v5, v9);
      swift_release();
      outlined consume of Text.LineStyle?(v3, v4);
LABEL_13:
      outlined destroy of NavigationStackViewSource((uint64_t)v17);
      return v6 & 1;
    }
    swift_release();
    outlined consume of Text.LineStyle?(v3, v4);
    goto LABEL_11;
  }
  if (v20 != 2
    || (int8x16_t v7 = vorrq_s8(*(int8x16_t *)&v19[8], *(int8x16_t *)&v19[24]),
        *(void *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | *(void *)v19))
  {
LABEL_11:
    outlined destroy of (NavigationStackViewSource, NavigationStackViewSource)((uint64_t)v17);
    char v6 = 0;
    return v6 & 1;
  }
  outlined destroy of NavigationStackViewSource((uint64_t)v17);
  char v6 = 1;
  return v6 & 1;
}

uint64_t outlined destroy of (NavigationStackViewSource, NavigationStackViewSource)(uint64_t a1)
{
  type metadata accessor for (NavigationStackViewSource, NavigationStackViewSource)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (NavigationStackViewSource, NavigationStackViewSource)()
{
  if (!lazy cache variable for type metadata for (NavigationStackViewSource, NavigationStackViewSource))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewSource, NavigationStackViewSource));
    }
  }
}

uint64_t static DefaultListStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for List();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, &lazy cache variable for type metadata for ListStyleWriter<PlainListStyle>, (uint64_t)&type metadata for PlainListStyle, (uint64_t)&protocol witness table for PlainListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

ValueMetadata *type metadata accessor for DefaultListStyle()
{
  return &type metadata for DefaultListStyle;
}

void *initializeBufferWithCopyOfBuffer for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    long long v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
    *(void *)(a1 + 80) = v9;
    swift_unknownObjectWeakCopyInit();
    uint64_t v10 = *(int *)(a3 + 100);
    long long v11 = (char *)v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    id v13 = (int *)type metadata accessor for CollectionViewListDataSource();
    uint64_t v14 = *((void *)v13 - 1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = type metadata accessor for Optional();
      memcpy(v11, (const void *)v12, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_15:
      uint64_t v41 = *(int *)(a3 + 104);
      uint64_t v42 = *(void **)((char *)a2 + v41);
      *(void *)((char *)v4 + v41) = v42;
      id v43 = v42;
      return v4;
    }
    uint64_t v48 = v14;
    long long v17 = *(_OWORD *)(v12 + 24);
    *(_OWORD *)(v11 + 24) = v17;
    (**(void (***)(char *, uint64_t))(v17 - 8))(v11, v12);
    char v18 = *(void **)(v12 + 48);
    *((void *)v11 + 5) = *(void *)(v12 + 40);
    *((void *)v11 + 6) = v18;
    uint64_t v19 = *(void *)(v12 + 64);
    *((void *)v11 + 7) = *(void *)(v12 + 56);
    *((void *)v11 + 8) = v19;
    v11[72] = *(unsigned char *)(v12 + 72);
    uint64_t v20 = v13[9];
    uint64_t v46 = v12 + v20;
    int v47 = &v11[v20];
    uint64_t v21 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
    id v22 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v47, v46, v21);
    uint64_t v23 = v13[10];
    long long v24 = &v11[v23];
    uint64_t v25 = v12 + v23;
    uint64_t v26 = *(void *)(v12 + v23 + 8);
    if (v26)
    {
      if (v26 == 1)
      {
        long long v27 = *(_OWORD *)(v25 + 48);
        *((_OWORD *)v24 + 2) = *(_OWORD *)(v25 + 32);
        *((_OWORD *)v24 + 3) = v27;
        *(_DWORD *)(v24 + 63) = *(_DWORD *)(v25 + 63);
        long long v28 = *(_OWORD *)(v25 + 16);
        *(_OWORD *)long long v24 = *(_OWORD *)v25;
        *((_OWORD *)v24 + 1) = v28;
LABEL_14:
        uint64_t v33 = v13[11];
        uint64_t v34 = &v11[v33];
        uint64_t v35 = (void *)(v12 + v33);
        uint64_t v36 = v35[1];
        *(void *)uint64_t v34 = *v35;
        *((void *)v34 + 1) = v36;
        v11[v13[12]] = *(unsigned char *)(v12 + v13[12]);
        uint64_t v37 = v13[13];
        uint64_t v38 = &v11[v37];
        uint64_t v39 = v12 + v37;
        *(void *)uint64_t v38 = *(void *)v39;
        v38[8] = *(unsigned char *)(v39 + 8);
        *(void *)&v11[v13[14]] = *(void *)(v12 + v13[14]);
        uint64_t v40 = *(void (**)(char *, void, uint64_t, int *))(v48 + 56);
        swift_retain();
        swift_retain();
        v40(v11, 0, 1, v13);
        goto LABEL_15;
      }
      *(void *)long long v24 = *(void *)v25;
      *((void *)v24 + 1) = v26;
      *((void *)v24 + 2) = *(void *)(v25 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *((void *)v24 + 2) = *(void *)(v25 + 16);
    }
    long long v29 = v24 + 24;
    uint64_t v30 = (void *)(v25 + 24);
    char v31 = *(unsigned char *)(v25 + 64);
    if (v31)
    {
      *long long v29 = *v30;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v32 = *(_OWORD *)(v25 + 48);
      *((_OWORD *)v24 + 3) = v32;
      (**(void (***)(void *, void *))(v32 - 8))(v29, v30);
    }
    v24[64] = v31;
    *(_WORD *)(v24 + 65) = *(_WORD *)(v25 + 65);
    goto LABEL_14;
  }
  uint64_t v16 = *a2;
  void *v4 = *a2;
  uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

_DWORD *assignWithCopy for UpdateCollectionViewListCoordinator(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_unknownObjectWeakCopyAssign();
  uint64_t v6 = *(int *)(a3 + 100);
  long long v7 = (uint64_t *)((char *)a1 + v6);
  long long v8 = (uint64_t *)((char *)a2 + v6);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = (int *)type metadata accessor for CollectionViewListDataSource();
  uint64_t v10 = *((void *)v9 - 1);
  long long v11 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      (*(void (**)(uint64_t *, int *))(v10 + 8))(v7, v9);
      goto LABEL_8;
    }
    __swift_assign_boxed_opaque_existential_1(v7, v8);
    *((_DWORD *)v7 + 10) = *((_DWORD *)v8 + 10);
    *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
    long long v27 = (void *)v8[6];
    long long v28 = (void *)v7[6];
    v7[6] = (uint64_t)v27;
    id v29 = v27;

    v7[7] = v8[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7[8] = v8[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((unsigned char *)v7 + 72) = *((unsigned char *)v8 + 72);
    uint64_t v30 = v9[9];
    char v31 = (char *)v7 + v30;
    long long v32 = (char *)v8 + v30;
    uint64_t v33 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
    uint64_t v34 = v9[10];
    uint64_t v35 = (uint64_t)v7 + v34;
    uint64_t v36 = (char *)v8 + v34;
    uint64_t v37 = *(uint64_t *)((char *)v7 + v34 + 8);
    uint64_t v38 = *(uint64_t *)((char *)v8 + v34 + 8);
    if (v37 == 1)
    {
      if (v38 == 1)
      {
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        long long v39 = *((_OWORD *)v36 + 1);
        long long v40 = *((_OWORD *)v36 + 2);
        long long v41 = *((_OWORD *)v36 + 3);
        *(_DWORD *)(v35 + 63) = *(_DWORD *)(v36 + 63);
        *(_OWORD *)(v35 + 32) = v40;
        *(_OWORD *)(v35 + 48) = v41;
        *(_OWORD *)(v35 + 16) = v39;
LABEL_40:
        uint64_t v66 = v9[11];
        uint64_t v67 = (char *)v7 + v66;
        uint64_t v68 = (char *)v8 + v66;
        *(uint64_t *)((char *)v7 + v66) = *(uint64_t *)((char *)v8 + v66);
        swift_retain();
        swift_release();
        *((void *)v67 + 1) = *((void *)v68 + 1);
        swift_retain();
        swift_release();
        *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
        uint64_t v69 = v9[13];
        long long v70 = (char *)v7 + v69;
        long long v71 = (char *)v8 + v69;
        char v72 = v71[8];
        *(void *)long long v70 = *(void *)v71;
        v70[8] = v72;
        *(uint64_t *)((char *)v7 + v9[14]) = *(uint64_t *)((char *)v8 + v9[14]);
        goto LABEL_41;
      }
      if (v38)
      {
        *(void *)uint64_t v35 = *(void *)v36;
        *(void *)(v35 + 8) = *((void *)v36 + 1);
        *(void *)(v35 + 16) = *((void *)v36 + 2);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v58 = *(_OWORD *)v36;
        *(void *)(v35 + 16) = *((void *)v36 + 2);
        *(_OWORD *)uint64_t v35 = v58;
      }
      uint64_t v59 = (void *)(v35 + 24);
      uint64_t v60 = v36 + 24;
      char v61 = v36[64];
      if (v61)
      {
        *uint64_t v59 = *v60;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v62 = *((void *)v36 + 6);
        *(void *)(v35 + 48) = v62;
        *(void *)(v35 + 56) = *((void *)v36 + 7);
        (**(void (***)(void *, void *))(v62 - 8))(v59, v60);
      }
      *(unsigned char *)(v35 + 64) = v61;
    }
    else
    {
      if (v38 == 1)
      {
        outlined destroy of TableHeaderView(v35);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        long long v56 = *((_OWORD *)v36 + 2);
        long long v55 = *((_OWORD *)v36 + 3);
        long long v57 = *((_OWORD *)v36 + 1);
        *(_DWORD *)(v35 + 63) = *(_DWORD *)(v36 + 63);
        *(_OWORD *)(v35 + 32) = v56;
        *(_OWORD *)(v35 + 48) = v55;
        *(_OWORD *)(v35 + 16) = v57;
        goto LABEL_40;
      }
      if (v37)
      {
        if (v38)
        {
          *(void *)uint64_t v35 = *(void *)v36;
          swift_retain();
          swift_release();
          *(void *)(v35 + 8) = *((void *)v36 + 1);
          swift_retain();
          swift_release();
          *(void *)(v35 + 16) = *((void *)v36 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Binding<[SwiftUIAnySortComparator]>(v35);
          uint64_t v63 = *((void *)v36 + 2);
          *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
          *(void *)(v35 + 16) = v63;
        }
      }
      else if (v38)
      {
        *(void *)uint64_t v35 = *(void *)v36;
        *(void *)(v35 + 8) = *((void *)v36 + 1);
        *(void *)(v35 + 16) = *((void *)v36 + 2);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v64 = *(_OWORD *)v36;
        *(void *)(v35 + 16) = *((void *)v36 + 2);
        *(_OWORD *)uint64_t v35 = v64;
      }
      if (a1 != a2)
      {
        outlined destroy of TableColumnCollection.Backing(v35 + 24);
        if (v36[64])
        {
          *(void *)(v35 + 24) = *((void *)v36 + 3);
          *(unsigned char *)(v35 + 64) = 1;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v65 = *((void *)v36 + 6);
          *(void *)(v35 + 48) = v65;
          *(void *)(v35 + 56) = *((void *)v36 + 7);
          (**(void (***)(uint64_t, uint64_t))(v65 - 8))(v35 + 24, (uint64_t)(v36 + 24));
          *(unsigned char *)(v35 + 64) = 0;
        }
      }
    }
    *(unsigned char *)(v35 + 65) = v36[65];
    *(unsigned char *)(v35 + 66) = v36[66];
    goto LABEL_40;
  }
  if (!v13)
  {
    uint64_t v78 = a3;
    uint64_t v14 = v8[3];
    v7[3] = v14;
    v7[4] = v8[4];
    (**(void (***)(char *, char *))(v14 - 8))((char *)v7, (char *)v8);
    v7[5] = v8[5];
    uint64_t v15 = (void *)v8[6];
    v7[6] = (uint64_t)v15;
    v7[7] = v8[7];
    v7[8] = v8[8];
    *((unsigned char *)v7 + 72) = *((unsigned char *)v8 + 72);
    uint64_t v16 = v9[9];
    uint64_t v80 = (char *)v8 + v16;
    uint64_t v81 = (char *)v7 + v16;
    uint64_t v17 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    id v18 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v79(v81, v80, v17);
    uint64_t v19 = v9[10];
    uint64_t v20 = (char *)v7 + v19;
    uint64_t v21 = (char *)v8 + v19;
    uint64_t v22 = *(uint64_t *)((char *)v8 + v19 + 8);
    if (v22)
    {
      if (v22 == 1)
      {
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        long long v23 = *((_OWORD *)v21 + 1);
        long long v24 = *((_OWORD *)v21 + 2);
        long long v25 = *((_OWORD *)v21 + 3);
        *(_DWORD *)(v20 + 63) = *(_DWORD *)(v21 + 63);
        *((_OWORD *)v20 + 2) = v24;
        *((_OWORD *)v20 + 3) = v25;
        *((_OWORD *)v20 + 1) = v23;
LABEL_18:
        a3 = v78;
        uint64_t v47 = v9[11];
        uint64_t v48 = (char *)v7 + v47;
        uint64_t v49 = (char *)v8 + v47;
        *(void *)uint64_t v48 = *(void *)v49;
        *((void *)v48 + 1) = *((void *)v49 + 1);
        *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
        uint64_t v50 = v9[13];
        uint64_t v51 = (char *)v7 + v50;
        uint64_t v52 = (char *)v8 + v50;
        uint64_t v53 = *(void *)v52;
        v51[8] = v52[8];
        *(void *)uint64_t v51 = v53;
        *(uint64_t *)((char *)v7 + v9[14]) = *(uint64_t *)((char *)v8 + v9[14]);
        uint64_t v54 = *(void (**)(uint64_t *, void, uint64_t, int *))(v10 + 56);
        swift_retain();
        swift_retain();
        v54(v7, 0, 1, v9);
        goto LABEL_41;
      }
      *(void *)uint64_t v20 = *(void *)v21;
      *((void *)v20 + 1) = *((void *)v21 + 1);
      *((void *)v20 + 2) = *((void *)v21 + 2);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v42 = *(_OWORD *)v21;
      *((void *)v20 + 2) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v20 = v42;
    }
    id v43 = v20 + 24;
    int v44 = v21 + 24;
    char v45 = v21[64];
    if (v45)
    {
      *id v43 = *v44;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v46 = *((void *)v21 + 6);
      *((void *)v20 + 6) = v46;
      *((void *)v20 + 7) = *((void *)v21 + 7);
      (**(void (***)(void *, void *))(v46 - 8))(v43, v44);
    }
    v20[64] = v45;
    v20[65] = v21[65];
    v20[66] = v21[66];
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v26 = type metadata accessor for Optional();
  memcpy(v7, v8, *(void *)(*(void *)(v26 - 8) + 64));
LABEL_41:
  uint64_t v73 = *(int *)(a3 + 104);
  long long v74 = *(void **)((char *)a2 + v73);
  uint64_t v75 = *(void **)((char *)a1 + v73);
  *(void *)((char *)a1 + v73) = v74;
  id v76 = v74;

  return a1;
}

uint64_t outlined destroy of Binding<[SwiftUIAnySortComparator]>(uint64_t a1)
{
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  swift_unknownObjectWeakTakeInit();
  uint64_t v9 = *(int *)(a3 + 100);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  long long v11 = (_OWORD *)(a2 + v9);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  int v12 = (int *)type metadata accessor for CollectionViewListDataSource();
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = type metadata accessor for Optional();
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    long long v15 = v11[3];
    long long v10[2] = v11[2];
    v10[3] = v15;
    *(_OWORD *)((char *)v10 + 57) = *(_OWORD *)((char *)v11 + 57);
    long long v16 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v16;
    uint64_t v17 = v12[9];
    id v18 = (char *)v10 + v17;
    uint64_t v19 = (char *)v11 + v17;
    uint64_t v20 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    uint64_t v21 = v12[10];
    uint64_t v22 = (char *)v10 + v21;
    long long v23 = (char *)v11 + v21;
    long long v24 = *((_OWORD *)v23 + 3);
    *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
    *((_OWORD *)v22 + 3) = v24;
    *(_DWORD *)(v22 + 63) = *(_DWORD *)(v23 + 63);
    long long v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v25;
    *(_OWORD *)((char *)v10 + v12[11]) = *(_OWORD *)((char *)v11 + v12[11]);
    *((unsigned char *)v10 + v12[12]) = *((unsigned char *)v11 + v12[12]);
    uint64_t v26 = v12[13];
    long long v27 = (char *)v10 + v26;
    long long v28 = (char *)v11 + v26;
    *(void *)long long v27 = *(void *)v28;
    v27[8] = v28[8];
    *(void *)((char *)v10 + v12[14]) = *(void *)((char *)v11 + v12[14]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)(a1 + *(int *)(a3 + 104)) = *(void *)(a2 + *(int *)(a3 + 104));
  return a1;
}

uint64_t assignWithTake for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  swift_unknownObjectWeakTakeAssign();
  uint64_t v9 = *(int *)(a3 + 100);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  long long v11 = (_OWORD *)(a2 + v9);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  int v12 = (int *)type metadata accessor for CollectionViewListDataSource();
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      (*(void (**)(_OWORD *, int *))(v13 + 8))(v10, v12);
      goto LABEL_6;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    long long v35 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v35;
    *((void *)v10 + 4) = *((void *)v11 + 4);
    *((void *)v10 + 5) = *((void *)v11 + 5);
    uint64_t v36 = (void *)*((void *)v10 + 6);
    *((void *)v10 + 6) = *((void *)v11 + 6);

    *((void *)v10 + 7) = *((void *)v11 + 7);
    swift_bridgeObjectRelease();
    *((void *)v10 + 8) = *((void *)v11 + 8);
    swift_bridgeObjectRelease();
    *((unsigned char *)v10 + 72) = *((unsigned char *)v11 + 72);
    uint64_t v37 = v12[9];
    uint64_t v38 = (char *)v10 + v37;
    long long v39 = (char *)v11 + v37;
    uint64_t v40 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 40))(v38, v39, v40);
    uint64_t v41 = v12[10];
    uint64_t v42 = (uint64_t)v10 + v41;
    id v43 = (char *)v11 + v41;
    uint64_t v44 = *(void *)((char *)v10 + v41 + 8);
    if (v44 == 1) {
      goto LABEL_11;
    }
    uint64_t v45 = *((void *)v43 + 1);
    if (v45 == 1)
    {
      outlined destroy of TableHeaderView(v42);
LABEL_11:
      long long v46 = *((_OWORD *)v43 + 3);
      *(_OWORD *)(v42 + 32) = *((_OWORD *)v43 + 2);
      *(_OWORD *)(v42 + 48) = v46;
      *(_DWORD *)(v42 + 63) = *(_DWORD *)(v43 + 63);
      long long v47 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v47;
LABEL_20:
      uint64_t v48 = v12[11];
      uint64_t v49 = (char *)v10 + v48;
      uint64_t v50 = (char *)v11 + v48;
      *(void *)((char *)v10 + v48) = *(void *)((char *)v11 + v48);
      swift_release();
      *((void *)v49 + 1) = *((void *)v50 + 1);
      swift_release();
      *((unsigned char *)v10 + v12[12]) = *((unsigned char *)v11 + v12[12]);
      uint64_t v51 = v12[13];
      uint64_t v52 = (char *)v10 + v51;
      uint64_t v53 = (char *)v11 + v51;
      *(void *)uint64_t v52 = *(void *)v53;
      v52[8] = v53[8];
      *(void *)((char *)v10 + v12[14]) = *(void *)((char *)v11 + v12[14]);
      goto LABEL_7;
    }
    if (v44)
    {
      if (v45)
      {
        *(void *)uint64_t v42 = *(void *)v43;
        swift_release();
        *(void *)(v42 + 8) = *((void *)v43 + 1);
        swift_release();
        *(void *)(v42 + 16) = *((void *)v43 + 2);
        swift_bridgeObjectRelease();
LABEL_17:
        if (a1 != a2)
        {
          outlined destroy of TableColumnCollection.Backing(v42 + 24);
          *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
          *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
          *(_OWORD *)(v42 + 49) = *(_OWORD *)(v43 + 49);
        }
        *(unsigned char *)(v42 + 65) = v43[65];
        *(unsigned char *)(v42 + 66) = v43[66];
        goto LABEL_20;
      }
      outlined destroy of Binding<[SwiftUIAnySortComparator]>(v42);
    }
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *(void *)(v42 + 16) = *((void *)v43 + 2);
    goto LABEL_17;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v31 = type metadata accessor for Optional();
    memcpy(v10, v11, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  long long v17 = v11[3];
  long long v10[2] = v11[2];
  v10[3] = v17;
  *(_OWORD *)((char *)v10 + 57) = *(_OWORD *)((char *)v11 + 57);
  long long v18 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v18;
  uint64_t v19 = v12[9];
  uint64_t v20 = (char *)v10 + v19;
  uint64_t v21 = (char *)v11 + v19;
  uint64_t v22 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  uint64_t v23 = v12[10];
  long long v24 = (char *)v10 + v23;
  long long v25 = (char *)v11 + v23;
  long long v26 = *((_OWORD *)v25 + 3);
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  *((_OWORD *)v24 + 3) = v26;
  *(_DWORD *)(v24 + 63) = *(_DWORD *)(v25 + 63);
  long long v27 = *((_OWORD *)v25 + 1);
  *(_OWORD *)long long v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v27;
  *(_OWORD *)((char *)v10 + v12[11]) = *(_OWORD *)((char *)v11 + v12[11]);
  *((unsigned char *)v10 + v12[12]) = *((unsigned char *)v11 + v12[12]);
  uint64_t v28 = v12[13];
  id v29 = (char *)v10 + v28;
  uint64_t v30 = (char *)v11 + v28;
  *(void *)id v29 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)((char *)v10 + v12[14]) = *(void *)((char *)v11 + v12[14]);
  (*(void (**)(_OWORD *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v32 = *(int *)(a3 + 104);
  uint64_t v33 = *(void **)(a1 + v32);
  *(void *)(a1 + v32) = *(void *)(a2 + v32);

  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187845000);
}

uint64_t sub_187845000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionViewListDataSource();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 100);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 104));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18784514C);
}

uint64_t sub_18784514C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionViewListDataSource();
  uint64_t result = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 100);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 104)) = (a2 - 1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionViewListRoot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v15 | 7;
  uint64_t v17 = ((v15 + 16) & ~v15) + *(void *)(v14 + 64);
  uint64_t v18 = v8 + v11;
  unsigned int v19 = v15 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (v19 <= 7
    && ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v17 + 7 + ((v15 + 8 + ((v12 + (v18 & ~v11) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8)
     + 65 <= 0x18)
  {
    uint64_t v56 = v15 + 8;
    uint64_t v57 = v17 + 7;
    uint64_t v58 = *(void *)(v13 - 8);
    uint64_t v59 = v13;
    uint64_t v24 = ~v11;
    uint64_t __n = ((v15 + 16) & ~v15) + *(void *)(v58 + 64);
    uint64_t v53 = ~v16;
    uint64_t v54 = ~v15;
    int v55 = *(_DWORD *)(v14 + 84);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    long long v25 = a1;
    unint64_t v26 = ((unint64_t)a1 + v18) & v24;
    unint64_t v27 = ((unint64_t)a2 + v18) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(v26, v27, v9);
    unint64_t v28 = (v26 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (v27 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = *(void *)v29;
    *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
    *(void *)unint64_t v28 = v30;
    uint64_t v31 = (void *)((v26 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)((v27 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v31 = *v32;
    uint64_t v33 = (void *)(((unint64_t)v31 + v16 + 8) & v53);
    uint64_t v34 = (void *)(((unint64_t)v32 + v16 + 8) & v53);
    long long v35 = (uint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v55 < 0)
    {
      uint64_t v39 = v56;
      uint64_t v38 = v58;
      uint64_t v37 = v59;
      int v41 = (*(uint64_t (**)(unint64_t))(v58 + 48))(((unint64_t)v35 + v56) & v54);
      uint64_t v40 = v54;
      uint64_t v23 = v25;
      if (v41)
      {
LABEL_14:
        memcpy(v33, v34, __n);
LABEL_17:
        unint64_t v46 = ((unint64_t)v33 + v57) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v47 = ((unint64_t)v34 + v57) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v46 = *(_OWORD *)v47;
        long long v48 = *(_OWORD *)(v47 + 16);
        long long v49 = *(_OWORD *)(v47 + 32);
        long long v50 = *(_OWORD *)(v47 + 48);
        *(unsigned char *)(v46 + 64) = *(unsigned char *)(v47 + 64);
        *(_OWORD *)(v46 + 32) = v49;
        *(_OWORD *)(v46 + 48) = v50;
        *(_OWORD *)(v46 + 16) = v48;
        return v23;
      }
    }
    else
    {
      uint64_t v36 = *v35;
      if ((unint64_t)*v35 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      uint64_t v38 = v58;
      uint64_t v37 = v59;
      uint64_t v39 = v56;
      uint64_t v40 = v54;
      uint64_t v23 = v25;
      if (v36 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v33 = *v34;
    uint64_t v42 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v42 = *v35;
    unint64_t v43 = ((unint64_t)v42 + v39) & v40;
    unint64_t v44 = ((unint64_t)v35 + v39) & v40;
    uint64_t v45 = *(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16);
    swift_retain();
    swift_retain();
    v45(v43, v44, v37);
    goto LABEL_17;
  }
  uint64_t v22 = *a2;
  *a1 = *a2;
  uint64_t v23 = (uint64_t *)(v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7)));
  swift_retain();
  return v23;
}

uint64_t initializeWithTake for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  uint64_t v13 = (v7 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v13, v14, v8);
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v20 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v20;
  uint64_t v21 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(_DWORD *)(v24 + 80);
  uint64_t v26 = v25 + 8;
  unint64_t v27 = *(_DWORD *)(v24 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (void *)(((unint64_t)v21 + v25 + 8) & v27);
  unint64_t v29 = (void *)(((unint64_t)v22 + v25 + 8) & v27);
  uint64_t v30 = ~v25;
  uint64_t v31 = (v25 + 16) & ~v25;
  uint64_t v32 = *(void *)(v24 + 64);
  uint64_t v33 = (uint64_t *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v24 + 84) & 0x80000000) == 0)
  {
    uint64_t v34 = *v33;
    if ((unint64_t)*v33 >= 0xFFFFFFFF) {
      LODWORD(v34) = -1;
    }
    size_t v35 = v31 + v32;
    if (v34 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unint64_t v28 = *v29;
    uint64_t v36 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v36 = *v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)v36 + v26) & v30, ((unint64_t)v33 + v26) & v30, v23);
    goto LABEL_8;
  }
  size_t v35 = v31 + v32;
  if (!(*(unsigned int (**)(unint64_t))(v24 + 48))(((unint64_t)v33 + v26) & v30)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v28, v29, v35);
LABEL_8:
  unint64_t v37 = ((unint64_t)v28 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v29 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
  long long v39 = *(_OWORD *)(v38 + 16);
  long long v40 = *(_OWORD *)(v38 + 32);
  long long v41 = *(_OWORD *)(v38 + 48);
  *(unsigned char *)(v37 + 64) = *(unsigned char *)(v38 + 64);
  *(_OWORD *)(v37 + 32) = v40;
  *(_OWORD *)(v37 + 48) = v41;
  *(_OWORD *)(v37 + 16) = v39;
  return a1;
}

uint64_t assignWithTake for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v7 + v11 + a1) & ~v11;
  uint64_t v13 = (v7 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v12, v13, v8);
  uint64_t v14 = *(void *)(v10 + 24);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  char v20 = (void *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v20 = *v21;
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int *)(v23 + 84);
  uint64_t v25 = *(_DWORD *)(v23 + 80);
  uint64_t v26 = v25 + 8;
  unint64_t v27 = *(_DWORD *)(v23 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (void *)(((unint64_t)v20 + v25 + 8) & v27);
  unint64_t v29 = (void *)(((unint64_t)v21 + v25 + 8) & v27);
  size_t v30 = ((v25 + 16) & ~v25) + *(void *)(v23 + 64);
  uint64_t v31 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v51 = ~v25;
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v50 = ((v25 + 16) & ~v25) + *(void *)(v23 + 64);
    uint64_t v36 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48);
    uint64_t v49 = ((unint64_t)v20 + v25 + 8) & v27;
    uint64_t v37 = ((unint64_t)v21 + v25 + 8) & v27;
    uint64_t v38 = ~v25;
    int v48 = v36(((unint64_t)v31 + v26) & ~v25, v24, v22);
    uint64_t v33 = (void *)((v37 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v39 = ((unint64_t)v33 + v26) & v38;
    unint64_t v29 = (void *)v37;
    unint64_t v28 = (void *)v49;
    uint64_t v40 = v24;
    uint64_t v32 = v22;
    int v35 = v36(v39, v40, v22);
    size_t v30 = v50;
    if (!v48)
    {
LABEL_5:
      if (!v35)
      {
        *unint64_t v28 = *v29;
        swift_release();
        *uint64_t v31 = *v33;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 40))(((unint64_t)v31 + v26) & v51, ((unint64_t)v33 + v26) & v51, v32);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v23 + 8))(((unint64_t)v31 + v26) & v51, v32);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v32 = v22;
    uint64_t v33 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = *v33;
    if (*v33 >= 0xFFFFFFFFuLL) {
      LODWORD(v34) = -1;
    }
    int v35 = v34 + 1;
    if (*v31 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v35)
  {
    *unint64_t v28 = *v29;
    *uint64_t v31 = *v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 32))(((unint64_t)v31 + v26) & v51, ((unint64_t)v33 + v26) & v51, v32);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v28, v29, v30);
LABEL_12:
  unint64_t v41 = ((unint64_t)v28 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = ((unint64_t)v29 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v41 = *(unsigned char *)v42;
  uint64_t v43 = *(void *)(v42 + 8);
  *(unsigned char *)(v41 + 16) = *(unsigned char *)(v42 + 16);
  *(void *)(v41 + 8) = v43;
  uint64_t v44 = *(void *)(v42 + 24);
  *(unsigned char *)(v41 + 32) = *(unsigned char *)(v42 + 32);
  *(void *)(v41 + 24) = v44;
  uint64_t v45 = *(void *)(v42 + 40);
  *(unsigned char *)(v41 + 48) = *(unsigned char *)(v42 + 48);
  *(void *)(v41 + 40) = v45;
  uint64_t v46 = *(void *)(v42 + 56);
  *(unsigned char *)(v41 + 64) = *(unsigned char *)(v42 + 64);
  *(void *)(v41 + 56) = v46;
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewListRoot(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (v14 <= 0x7FFFFFFF) {
    int v17 = 0x7FFFFFFF;
  }
  else {
    int v17 = *(_DWORD *)(v13 + 84);
  }
  unsigned int v18 = v17 - 1;
  if (v18 <= v12) {
    unsigned int v18 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = v16 | 7;
  uint64_t v20 = *(void *)(v7 + 64) + v15;
  uint64_t v21 = *(void *)(*(void *)(v9 - 8) + 64) + 23;
  uint64_t v22 = v16 + 8;
  if (v18 < a2)
  {
    unint64_t v23 = ((*(void *)(v13 + 64)
          + ((v16 + 16) & ~v16)
          + ((v22 + ((v21 + (v20 & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v19)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 65;
    if (v23 < 4) {
      unsigned int v24 = ((a2 - v18 + 255) >> (8 * v23)) + 1;
    }
    else {
      unsigned int v24 = 2;
    }
    if (v24 >= 0x10000) {
      unsigned int v25 = 4;
    }
    else {
      unsigned int v25 = 2;
    }
    if (v24 < 0x100) {
      unsigned int v25 = 1;
    }
    if (v24 >= 2) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    switch(v26)
    {
      case 1:
        int v27 = a1[v23];
        if (!a1[v23]) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v27 = *(unsigned __int16 *)&a1[v23];
        if (*(_WORD *)&a1[v23]) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187845F64);
      case 4:
        int v27 = *(_DWORD *)&a1[v23];
        if (!v27) {
          break;
        }
LABEL_27:
        int v29 = (v27 - 1) << (8 * v23);
        if (v23 >= 4) {
          int v29 = 0;
        }
        if (((*(_DWORD *)(v13 + 64)
             + ((v16 + 16) & ~v16)
             + ((v22 + ((v21 + (v20 & ~v15)) & 0xFFFFFFF8)) & ~v19)
             + 7) & 0xFFFFFFF8) == 0xFFFFFFC0)
          int v30 = *a1;
        else {
          int v30 = *(_DWORD *)a1;
        }
        return v18 + (v30 | v29) + 1;
      default:
        break;
    }
  }
  if (v8 == v18)
  {
    uint64_t v31 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    return v31(a1, v8, v6);
  }
  else
  {
    unint64_t v32 = (unint64_t)&a1[v20] & ~v15;
    if (v11 == v18)
    {
      uint64_t v33 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
      return v33(v32, v11, v9);
    }
    else
    {
      uint64_t v34 = (unint64_t *)((((((v21 + v32) & 0xFFFFFFFFFFFFFFF8) + v19 + 8) & ~v19) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 0x80000000) != 0)
      {
        unsigned int v36 = (*(uint64_t (**)(unint64_t))(v13 + 48))(((unint64_t)v34 + v22) & ~v16);
      }
      else
      {
        unint64_t v35 = *v34;
        if (v35 >= 0xFFFFFFFF) {
          LODWORD(v35) = -1;
        }
        unsigned int v36 = v35 + 1;
      }
      if (v36 >= 2) {
        return v36 - 1;
      }
      else {
        return 0;
      }
    }
  }
}

void storeEnumTagSinglePayload for CollectionViewListRoot(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v51 = v9;
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  if (v13 <= v10) {
    unsigned int v14 = v10;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v19 = *(void *)(*(void *)(v11 - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v15 + 80);
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v15 + 84);
  }
  if (v21 - 1 <= v14) {
    unsigned int v22 = v14;
  }
  else {
    unsigned int v22 = v21 - 1;
  }
  uint64_t v23 = v20 | 7;
  size_t v24 = ((v20 + 16) & ~v20) + *(void *)(v15 + 64);
  uint64_t v25 = v17 + v18;
  uint64_t v26 = (v17 + v18) & ~v18;
  uint64_t v27 = v19 + 23;
  size_t v28 = ((v24 + ((v20 + 8 + ((v19 + 23 + v26) & 0xFFFFFFFFFFFFFFF8)) & ~(v20 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 65;
  char v29 = 8 * v28;
  if (v22 >= a3)
  {
    int v31 = 0;
    if (v22 >= a2) {
      goto LABEL_22;
    }
LABEL_26:
    unsigned int v33 = ~v22 + a2;
    unsigned int v34 = (~(_BYTE)v22 + a2);
    if (v28 < 4) {
      int v35 = (v33 >> v29) + 1;
    }
    else {
      int v35 = 1;
    }
    if (v28 >= 4) {
      unsigned int v36 = v33;
    }
    else {
      unsigned int v36 = v34;
    }
    bzero(a1, v28);
    if (v28 == 1) {
      *a1 = v36;
    }
    else {
      *(_DWORD *)a1 = v36;
    }
    switch(v31)
    {
      case 1:
        a1[v28] = v35;
        break;
      case 2:
        *(_WORD *)&a1[v28] = v35;
        break;
      case 3:
LABEL_82:
        __break(1u);
        JUMPOUT(0x187846420);
      case 4:
        *(_DWORD *)&a1[v28] = v35;
        break;
      default:
        return;
    }
    return;
  }
  if (v28 <= 3) {
    unsigned int v30 = ((a3 - v22 + 255) >> v29) + 1;
  }
  else {
    unsigned int v30 = 2;
  }
  if (v30 >= 0x10000) {
    int v31 = 4;
  }
  else {
    int v31 = 2;
  }
  if (v30 < 0x100) {
    int v31 = 1;
  }
  if (v30 < 2) {
    int v31 = 0;
  }
  if (v22 < a2) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v32 = ~v23;
  switch(v31)
  {
    case 1:
      a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
      goto LABEL_82;
    case 4:
      *(_DWORD *)&a1[v28] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (!a2) {
        return;
      }
LABEL_39:
      if (v10 == v22)
      {
        uint64_t v37 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
        uint64_t v38 = a1;
        uint64_t v39 = a2;
        uint64_t v40 = v10;
        uint64_t v41 = v8;
LABEL_43:
        v37(v38, v39, v40, v41);
        return;
      }
      uint64_t v38 = (unsigned char *)((unint64_t)&a1[v25] & ~v18);
      if (v13 == v22)
      {
        uint64_t v37 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
        uint64_t v39 = a2;
        uint64_t v40 = v13;
        uint64_t v41 = v11;
        goto LABEL_43;
      }
      unint64_t v42 = (((unint64_t)&v38[v27] & 0xFFFFFFFFFFFFFFF8) + v23 + 8) & v32;
      if (v21 - 1 >= a2)
      {
        if ((int)a2 + 1 <= v21)
        {
          if (a2 != -1)
          {
            int v48 = (void *)((v42 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v16 & 0x80000000) != 0)
            {
              uint64_t v50 = *(void (**)(unint64_t, void))(v15 + 56);
              v50(((unint64_t)v48 + v20 + 8) & ~v20, (a2 + 1));
            }
            else
            {
              if (a2 + 1 < 0) {
                uint64_t v49 = (a2 - 0x7FFFFFFF);
              }
              else {
                uint64_t v49 = a2;
              }
              *int v48 = v49;
            }
          }
        }
        else
        {
          if (v24 <= 3) {
            int v46 = ~(-1 << (8 * v24));
          }
          else {
            int v46 = -1;
          }
          if (v24)
          {
            int v44 = v46 & (a2 - v21);
            if (v24 <= 3) {
              int v47 = v24;
            }
            else {
              int v47 = 4;
            }
            bzero((void *)((((unint64_t)&v38[v27] & 0xFFFFFFFFFFFFFFF8) + v23 + 8) & v32), v24);
            switch(v47)
            {
              case 2:
LABEL_74:
                *(_WORD *)unint64_t v42 = v44;
                break;
              case 3:
LABEL_73:
                *(_WORD *)unint64_t v42 = v44;
                *(unsigned char *)(v42 + 2) = BYTE2(v44);
                break;
              case 4:
LABEL_75:
                *(_DWORD *)unint64_t v42 = v44;
                break;
              default:
LABEL_68:
                *(unsigned char *)unint64_t v42 = v44;
                break;
            }
          }
        }
      }
      else
      {
        if (v24 <= 3) {
          int v43 = ~(-1 << (8 * v24));
        }
        else {
          int v43 = -1;
        }
        if (v24)
        {
          int v44 = v43 & (a2 - v21);
          if (v24 <= 3) {
            int v45 = v24;
          }
          else {
            int v45 = 4;
          }
          bzero((void *)((((unint64_t)&v38[v27] & 0xFFFFFFFFFFFFFFF8) + v23 + 8) & v32), v24);
          switch(v45)
          {
            case 2:
              goto LABEL_74;
            case 3:
              goto LABEL_73;
            case 4:
              goto LABEL_75;
            default:
              goto LABEL_68;
          }
        }
      }
      break;
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CollectionViewListRoot<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance CollectionViewListRoot<A, B>()
{
}

ValueMetadata *type metadata accessor for HoverEventDispatcher()
{
  return &type metadata for HoverEventDispatcher;
}

uint64_t HoverEventDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  void (*v32)(long long *__return_ptr, uint64_t, uint64_t);
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(long long *, uint64_t, uint64_t);
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  uint64_t v49;
  char v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(long long *, uint64_t, uint64_t);
  unint64_t v58;
  char v59;
  unint64_t v60;
  int v61;
  uint64_t rawValue;
  uint64_t v63;
  uint64_t v64;
  Swift::OpaquePointer *v65;
  int64_t v66;
  int64_t v67;
  long long v68;
  long long v69;
  uint64_t v70;
  unsigned char v71[40];
  void v72[3];
  uint64_t v73;
  uint64_t v74;
  void v75[3];
  uint64_t v76;
  uint64_t v77;
  long long v78;
  _OWORD v79[2];
  uint64_t v80;
  void v81[2];
  long long v82;
  uint64_t v83;

  uint64_t v3 = v2;
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18C119DF0](v6)) {
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
  swift_unknownObjectRelease();
  uint64_t result = MEMORY[0x1E4FBC870];
  if (!v9) {
    return result;
  }
  uint64_t v83 = MEMORY[0x1E4FBC870];
  uint64_t v63 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(a1 + 64);
  uint64_t v66 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v67 = 0;
  uint64_t v65 = v3;
  long long v64 = a1;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v67 << 6);
LABEL_11:
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      *(void *)&uint64_t v78 = v20;
      *((void *)&v78 + 1) = v19;
      outlined init with copy of TableColumnList(v17 + 40 * v16, (uint64_t)v79);
      goto LABEL_30;
    }
    int64_t v21 = v67 + 1;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
      goto LABEL_65;
    }
    if (v21 < v66)
    {
      unint64_t v22 = *(void *)(v63 + 8 * v21);
      if (v22) {
        goto LABEL_15;
      }
      int64_t v23 = v67 + 2;
      ++v67;
      if (v21 + 1 < v66)
      {
        unint64_t v22 = *(void *)(v63 + 8 * v23);
        if (v22) {
          goto LABEL_18;
        }
        uint64_t v67 = v21 + 1;
        if (v21 + 2 < v66)
        {
          unint64_t v22 = *(void *)(v63 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_15;
          }
          int64_t v23 = v21 + 3;
          uint64_t v67 = v21 + 2;
          if (v21 + 3 < v66) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v13 = 0;
    uint64_t v80 = 0;
    memset(v79, 0, sizeof(v79));
    uint64_t v78 = 0u;
LABEL_30:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v78, (uint64_t)v81);
    Swift::UInt v24 = v81[0];
    if (!v81[0])
    {
      swift_release();
      printEventBindings(_:)((Swift::OpaquePointer)v3->_rawValue);
      swift_release();
      return v83;
    }
    Swift::UInt v25 = v81[1];
    outlined init with take of OptionalBinaryInteger(&v82, (uint64_t)v75);
    v26._rawuint64_t Value = v3->_rawValue;
    if (*((void *)v3->_rawValue + 2))
    {
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      if (v28)
      {
        uint64_t v29 = *(void *)(*((void *)v26._rawValue + 7) + 8 * v27);
        outlined init with copy of TableColumnList((uint64_t)v75, (uint64_t)v72);
        uint64_t v30 = v73;
        uint64_t v31 = v74;
        __swift_project_boxed_opaque_existential_1(v72, v73);
        uint64_t v32 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v31 + 8);
        swift_retain_n();
        v32(&v78, v30, v31);
        if (v78 == 2 || v78 == 3)
        {
          swift_release();
          outlined init with copy of TableColumnList((uint64_t)v72, (uint64_t)&v78);
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
          if (swift_dynamicCast())
          {
            outlined init with take of OptionalBinaryInteger(&v68, (uint64_t)v71);
            outlined init with copy of TableColumnList((uint64_t)v71, (uint64_t)&v68);
            HitTestableEvent.init(_:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
            HitTestableEvent.hitTestLocation.getter();
            unsigned int v34 = v33;
            unsigned int v36 = v35;
            swift_release();
            uint64_t v37 = swift_retain();
            specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v37, 0, v34, v36);
            swift_release_n();
            uint64_t v38 = 0;
          }
          else
          {
            long long v70 = 0;
            uint64_t v68 = 0u;
            uint64_t v69 = 0u;
            outlined destroy of HitTestableEventType?((uint64_t)&v68);
            uint64_t v38 = v29;
          }
LABEL_55:
          int v55 = v73;
          uint64_t v56 = v74;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v72, v73);
          *(void *)&uint64_t v78 = v38;
          uint64_t v57 = *(void (**)(long long *, uint64_t, uint64_t))(v56 + 32);
          swift_retain();
          v57(&v78, v55, v56);
          if (v38)
          {
            swift_retain();
            uint64_t v3 = v65;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(Swift::OpaquePointer *)&uint64_t v78 = (Swift::OpaquePointer)v65->_rawValue;
            v65->_rawuint64_t Value = (void *)0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, v24, v25, isUniquelyReferenced_nonNull_native);
            v65->_rawuint64_t Value = (void *)v78;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v3 = v65;
            uint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
            if (v59)
            {
              uint64_t v60 = v58;
              char v61 = swift_isUniquelyReferenced_nonNull_native();
              rawuint64_t Value = (uint64_t)v65->_rawValue;
              *(Swift::OpaquePointer *)&uint64_t v78 = (Swift::OpaquePointer)v65->_rawValue;
              v65->_rawuint64_t Value = (void *)0x8000000000000000;
              if (!v61)
              {
                specialized _NativeDictionary.copy()();
                rawuint64_t Value = v78;
              }
              specialized _NativeDictionary._delete(at:)(v60, rawValue);
              v65->_rawuint64_t Value = (void *)rawValue;
              swift_release();
              swift_bridgeObjectRelease();
            }
          }
          specialized Set._Variant.insert(_:)((Swift::UInt *)&v78, v24, v25);
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
          a1 = v64;
          goto LABEL_8;
        }
        if (dispatch thunk of ResponderNode.bindEvent(_:)())
        {
          type metadata accessor for HoverResponder();
          ResponderNode.firstAncestor<A>(ofType:)();
          swift_release();
          uint64_t v49 = v78;
          if (!(void)v78) {
            goto LABEL_51;
          }
          if (v29 != (void)v78)
          {
            swift_retain();
            goto LABEL_51;
          }
          uint64_t v38 = v29;
        }
        else
        {
          uint64_t v49 = 0;
LABEL_51:
          swift_release();
          uint64_t v38 = v49;
        }
        swift_release();
        outlined init with copy of TableColumnList((uint64_t)v72, (uint64_t)&v78);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
        if (swift_dynamicCast())
        {
          outlined init with take of OptionalBinaryInteger(&v68, (uint64_t)v71);
          outlined init with copy of TableColumnList((uint64_t)v71, (uint64_t)&v68);
          HitTestableEvent.init(_:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          HitTestableEvent.hitTestLocation.getter();
          uint64_t v52 = v51;
          uint64_t v54 = v53;
          swift_release();
          swift_retain();
          swift_retain();
          specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v29, v49, v52, v54);
          swift_release();
          swift_release_n();
        }
        else
        {
          long long v70 = 0;
          uint64_t v68 = 0u;
          uint64_t v69 = 0u;
          outlined destroy of HitTestableEventType?((uint64_t)&v68);
          swift_release();
        }
        goto LABEL_55;
      }
    }
    uint64_t v39 = v76;
    uint64_t v40 = v77;
    __swift_project_boxed_opaque_existential_1(v75, v76);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v40 + 8))(&v78, v39, v40);
    if (v78 != 2 && v78 != 3)
    {
      if (dispatch thunk of ResponderNode.bindEvent(_:)())
      {
        type metadata accessor for HoverResponder();
        ResponderNode.firstAncestor<A>(ofType:)();
        swift_release();
        uint64_t v41 = v78;
        if ((void)v78)
        {
          outlined init with copy of TableColumnList((uint64_t)v75, (uint64_t)v72);
          unint64_t v42 = v73;
          int v43 = v74;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v72, v73);
          *(void *)&uint64_t v78 = v41;
          int v44 = *(void (**)(long long *, uint64_t, uint64_t))(v43 + 32);
          swift_retain_n();
          v44(&v78, v42, v43);
          outlined init with copy of TableColumnList((uint64_t)v72, (uint64_t)&v78);
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
          if (swift_dynamicCast())
          {
            outlined init with take of OptionalBinaryInteger(&v68, (uint64_t)v71);
            outlined init with copy of TableColumnList((uint64_t)v71, (uint64_t)&v68);
            HitTestableEvent.init(_:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
            HitTestableEvent.hitTestLocation.getter();
            int v46 = v45;
            int v48 = v47;
            swift_release();
            swift_retain();
            specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(0, v41, v46, v48);
            swift_release();
          }
          else
          {
            long long v70 = 0;
            uint64_t v68 = 0u;
            uint64_t v69 = 0u;
            outlined destroy of HitTestableEventType?((uint64_t)&v68);
          }
          uint64_t v3 = v65;
          swift_retain();
          uint64_t v50 = swift_isUniquelyReferenced_nonNull_native();
          *(Swift::OpaquePointer *)&uint64_t v78 = (Swift::OpaquePointer)v65->_rawValue;
          v65->_rawuint64_t Value = (void *)0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v41, v24, v25, v50);
          v65->_rawuint64_t Value = (void *)v78;
          swift_bridgeObjectRelease();
          specialized Set._Variant.insert(_:)((Swift::UInt *)&v78, v24, v25);
          swift_release_n();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        }
      }
    }
LABEL_8:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  }
  unint64_t v22 = *(void *)(v63 + 8 * v23);
  if (v22)
  {
LABEL_18:
    int64_t v21 = v23;
LABEL_15:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v21 << 6);
    uint64_t v67 = v21;
    goto LABEL_11;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v66)
    {
      uint64_t v67 = v66 - 1;
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v63 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_15;
    }
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(unint64_t a1, unint64_t a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  uint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = a2 >> 62;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!v4)
    {
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      swift_bridgeObjectRetain();
      if (v9) {
        goto LABEL_8;
      }
LABEL_23:
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!v4) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9) {
    goto LABEL_23;
  }
LABEL_8:
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_48;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  swift_retain();
LABEL_11:
  swift_bridgeObjectRelease();
  if (v5 < v7)
  {
    unint64_t v10 = v7 - v5;
    if (__OFSUB__(v7, v5)) {
      goto LABEL_52;
    }
    if ((a2 & 0xC000000000000001) != 0) {
      goto LABEL_53;
    }
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
      if (v10 < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v11 = *(void *)(a2 + 8 * v10 + 32);
        swift_release();
        if (v11 == v4) {
          return 0;
        }
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_release();
  do
  {
LABEL_24:
    if (v6)
    {
      swift_bridgeObjectRetain();
      unint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v4 = v10;
      if (!v10) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
LABEL_26:
      uint64_t v4 = *(void *)(v6 + 16);
      unint64_t v10 = swift_bridgeObjectRetain();
      if (!v4)
      {
LABEL_39:
        uint64_t v14 = swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
    if ((a2 & 0xC000000000000001) != 0)
    {
LABEL_50:
      uint64_t v6 = MEMORY[0x18C117680](0, a2);
      goto LABEL_30;
    }
    if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v6 = *(void *)(a2 + 32);
      swift_retain();
LABEL_30:
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 < v5)
      {
        BOOL v13 = __OFSUB__(v5, v7);
        v5 -= v7;
        if (!v13)
        {
          if ((a1 & 0xC000000000000001) == 0)
          {
            if (v5 < 0)
            {
              __break(1u);
LABEL_61:
              __break(1u);
              return result;
            }
            if ((unint64_t)v5 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_61;
            }
            uint64_t v7 = *(void *)(a1 + 8 * v5 + 32);
            goto LABEL_36;
          }
LABEL_59:
          uint64_t v7 = MEMORY[0x18C117680](v5, a1);
          swift_unknownObjectRelease();
LABEL_36:
          uint64_t v14 = swift_release();
          if (v7 == v6) {
            return v5;
          }
LABEL_40:
          if (((v4 | v9) & 0x8000000000000000) == 0) {
            goto LABEL_41;
          }
          goto LABEL_47;
        }
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v14 = swift_release();
      if (((v4 | v9) & 0x8000000000000000) == 0)
      {
LABEL_41:
        MEMORY[0x1F4188790](v14);
        uint64_t v15 = specialized Sequence.prefix(while:)(0, v9, 0, v4, (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:));
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16) {
          uint64_t v5 = *(void *)(v15 + 16 * v16 + 16);
        }
        else {
          uint64_t v5 = 0;
        }
        swift_bridgeObjectRelease();
        return v5;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      uint64_t v4 = MEMORY[0x18C117680](0, a1);
      goto LABEL_11;
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    uint64_t v19 = v6;
    uint64_t v17 = MEMORY[0x18C117680](v10, a2);
    swift_unknownObjectRelease();
    swift_release();
    BOOL v18 = v17 == v4;
    uint64_t v6 = v19;
  }
  while (!v18);
  return 0;
}

unint64_t closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      unint64_t v6 = *(void *)(a3 + 8 * result + 32);
      uint64_t result = swift_retain();
      if ((a4 & 0xC000000000000001) == 0) {
        goto LABEL_5;
      }
LABEL_10:
      uint64_t v7 = MEMORY[0x18C117680](a2, a4);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = MEMORY[0x18C117680](result, a3);
  unint64_t v6 = result;
  if ((a4 & 0xC000000000000001) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (*(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v7 = *(void *)(a4 + 8 * a2 + 32);
    swift_retain();
LABEL_8:
    swift_release();
    swift_release();
    return v6 == v7;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #6 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for HoverResponder();
  uint64_t result = swift_dynamicCastClass();
  uint64_t v3 = result;
  if (result) {
    uint64_t result = swift_retain();
  }
  *a1 = v3;
  return result;
}

BOOL closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3 = (CGSize *)(*(void *)a1 + 264);
  if (*(unsigned char *)(*(void *)a1 + 465) != 1) {
    return 0;
  }
  v10.origin.CGFloat x = 0.0;
  v10.origin.CGFloat y = 0.0;
  v10.size = v3[1];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  char v9 = 2;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v7);
  v11.CGFloat x = a2;
  v11.CGFloat y = a3;
  return CGRectContainsPoint(v10, v11);
}

uint64_t protocol witness for ForwardedEventDispatcher.reset() in conformance HoverEventDispatcher()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(void *a1)
{
  return *a1 != 0;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with take of (key: EventID, value: EventType)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: EventID, value: EventType)?(0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: EventID, value: EventType), MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: EventID, value: EventType)()
{
  if (!lazy cache variable for type metadata for (key: EventID, value: EventType))
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType));
    }
  }
}

uint64_t outlined destroy of HitTestableEventType?(uint64_t a1)
{
  type metadata accessor for HitTestableEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for HitTestableEventType?()
{
  if (!lazy cache variable for type metadata for HitTestableEventType?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for HitTestableEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestableEventType?);
    }
  }
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x18C117680](v5, a1);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      swift_release();
      if (a2 && v6 == a2) {
        break;
      }
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v8 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

uint64_t specialized Sequence.prefix(while:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (a2 != result)
  {
    uint64_t v6 = result;
    if (result >= a2)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = a4;
    if (a4 != a3)
    {
      uint64_t v9 = a2 - 1;
      uint64_t v10 = MEMORY[0x1E4FBC860];
      while (v7 > a3)
      {
        if ((a5(v9, --v7) & 1) == 0) {
          return v10;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        }
        unint64_t v12 = *(void *)(v10 + 16);
        unint64_t v11 = *(void *)(v10 + 24);
        if (v12 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        }
        *(void *)(v10 + 16) = v12 + 1;
        uint64_t v13 = v10 + 16 * v12;
        *(void *)(v13 + 32) = v9;
        *(void *)(v13 + 40) = v7;
        if (v6 == v9) {
          return v10;
        }
        if (v9 <= v6 || v9 > a2) {
          goto LABEL_17;
        }
        --v9;
        if (a3 == v7) {
          return v10;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized HoverEventDispatcher.dispatchNewAncestorsHoverCallbacks(oldHighestAncestor:newAncestors:point:)(uint64_t result, unint64_t a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v3 = result;
  swift_retain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized Collection.firstIndex(where:)(v4, v3);
  char v7 = v6;
  uint64_t result = swift_release();
  if ((v7 & 1) == 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
LABEL_4:
      if (!(a2 >> 62))
      {
        uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
        goto LABEL_8;
      }
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v29 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        char v9 = 0;
        if (v30 >= v5) {
          goto LABEL_9;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        return swift_unknownObjectRelease();
      }
LABEL_44:
      __break(1u);
      return result;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_43;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  char v9 = 1;
  if (*(void *)(v8 + 16) < v5) {
    goto LABEL_38;
  }
LABEL_9:
  if ((a2 & 0xC000000000000001) != 0 && v5)
  {
    type metadata accessor for HoverResponder();
    Swift::Int v10 = 0;
    do
    {
      Swift::Int v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      Swift::Int v10 = v11;
    }
    while (v5 != v11);
  }
  if (v9)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  else
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    uint64_t v13 = v14;
    uint64_t v12 = v15;
    unint64_t v17 = v16;
    swift_bridgeObjectRelease_n();
    uint64_t v5 = v17 >> 1;
  }
  if (v5 == v12) {
    goto LABEL_39;
  }
  uint64_t v18 = v5;
  while (!__OFSUB__(v18--, 1))
  {
    if (v18 < v12 || v18 >= v5) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v13 + 8 * v18);
    if (*(unsigned char *)(v21 + 465) == 1)
    {
      uint64_t v35 = *(void *)(v21 + 240);
      long long v36 = *(_OWORD *)(v21 + 248);
      long long v37 = *(_OWORD *)(v21 + 264);
      swift_beginAccess();
      uint64_t v32 = 0;
      memset(v31, 0, sizeof(v31));
      char v33 = 2;
      outlined init with copy of CoordinateSpace(v21 + 296, (uint64_t)v34);
      v34[41] = 4;
      swift_retain();
      swift_retain();
      ViewTransform.convert(_:point:)();
      double v23 = v22;
      double v25 = v24;
      outlined destroy of ViewTransform.Conversion((uint64_t)v31);
      swift_release();
      uint64_t v26 = *(void *)(v21 + 216);
      uint64_t v27 = *(void *)(v21 + 224);
      char v28 = *(unsigned char *)(v21 + 232);
      if (v28)
      {
        if ((*(unsigned char *)(v21 + 464) & 1) == 0) {
          goto LABEL_19;
        }
      }
      else if ((*(unsigned char *)(v21 + 464) & 1) == 0 && v23 == *(double *)(v21 + 448) && v25 == *(double *)(v21 + 456))
      {
        goto LABEL_19;
      }
      *(double *)(v21 + 448) = v23;
      *(double *)(v21 + 456) = v25;
      *(unsigned char *)(v21 + 464) = 0;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v26;
      *(void *)(v19 + 24) = v27;
      *(unsigned char *)(v19 + 32) = v28;
      *(double *)(v19 + 40) = v23;
      *(double *)(v19 + 48) = v25;
      *(unsigned char *)(v19 + 56) = 0;
      outlined copy of HoverCallback();
      outlined copy of HoverCallback();
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of HoverCallback();
LABEL_19:
      swift_release();
    }
    if (v18 == v12) {
      return swift_unknownObjectRelease();
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return swift_unknownObjectRelease();
}

uint64_t specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(uint64_t result, uint64_t a2, CGFloat a3, CGFloat a4)
{
  void (*v14)(uint64_t *__return_ptr, char *);
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *__return_ptr, uint64_t *);
  unint64_t v22;
  void (*v23)(void *__return_ptr, uint64_t *);
  char v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  CGFloat i;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned char *v64;
  unint64_t v65;
  uint64_t v66;
  void v67[3];
  uint64_t v68[5];
  char v69;
  unsigned char v70[56];
  CGFloat v71;
  _OWORD v72[2];
  double v73;
  uint64_t v74;
  long long v75;
  unsigned char v76[24];
  char v77;
  uint64_t (*v78)@<X0>(uint64_t *@<X8>);
  uint64_t v79;
  uint64_t (*v80)(CGFloat *);
  uint64_t v81;
  uint64_t (*v82)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>);
  uint64_t v83;
  BOOL (*v84)(uint64_t);
  uint64_t v85;
  CGPoint v86;
  CGPoint v87;
  CGRect v88;
  CGRect v89;

  if (result)
  {
    type metadata accessor for HoverResponder();
    uint64_t result = ResponderNode.firstAncestor<A>(ofType:)();
    uint64_t v7 = v75;
    if (!a2)
    {
      if (!(void)v75) {
        return result;
      }
      uint64_t v8 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v7 = 0;
  }
  type metadata accessor for HoverResponder();
  uint64_t result = ResponderNode.firstAncestor<A>(ofType:)();
  uint64_t v8 = v75;
  if (!v7)
  {
    if (!(void)v75) {
      return result;
    }
    uint64_t v66 = 0;
    double v22 = 0;
    goto LABEL_35;
  }
  if ((void)v75 && v7 == (void)v75)
  {
    swift_retain();
    ResponderNode.sequence.getter();
    uint64_t v66 = v7;
    swift_release();
    unint64_t v9 = v75;
    char v10 = BYTE8(v75);
    long long v11 = *(_OWORD *)v76;
    char v12 = v76[16];
    uint64_t v13 = swift_allocObject();
    *(CGFloat *)(v13 + 16) = a3;
    *(CGFloat *)(v13 + 24) = a4;
    *((void *)&v75 + 1) = v9;
    v76[0] = v10;
    *(_OWORD *)&v76[8] = v11;
    uint64_t v77 = v12;
    uint64_t v78 = closure #6 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:);
    uint64_t v79 = 0;
    uint64_t v80 = (uint64_t (*)(CGFloat *))specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v81 = 0;
    uint64_t v82 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v83 = 0;
    LOBYTE(v75) = 0;
    uint64_t v84 = partial apply for closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:);
    uint64_t v85 = v13;
    uint64_t v65 = v9;
    swift_retain_n();
    swift_retain_n();
    if ((v12 & 1) == 0)
    {
      long long v64 = v70;
      while (1)
      {
        while (1)
        {
          uint64_t v14 = *(void (**)(uint64_t *__return_ptr, char *))&v76[8];
          swift_retain();
          v14(&v74, (char *)&v75 + 8);
          swift_release();
          if (!v74)
          {
            uint64_t v77 = 1;
            goto LABEL_63;
          }
          ((void (*)(double *__return_ptr, uint64_t *))v78)(&v73, &v74);
          swift_release();
          uint64_t v15 = v73;
          long long v71 = v73;
          if (v80(&v71)) {
            break;
          }
          swift_release();
        }
        long long v71 = v15;
        ((void (*)(uint64_t *__return_ptr, CGFloat *))v82)(&v74, &v71);
        swift_release();
        unint64_t v16 = v74;
        v68[0] = v74;
        if ((((uint64_t (*)(uint64_t *))v84)(v68) & 1) == 0) {
          break;
        }
        if (*(unsigned char *)(v16 + 465) == 1)
        {
          long long v71 = *(double *)(v16 + 240);
          v72[0] = *(_OWORD *)(v16 + 248);
          v72[1] = *(_OWORD *)(v16 + 264);
          swift_beginAccess();
          memset(v68, 0, sizeof(v68));
          uint64_t v69 = 2;
          outlined init with copy of CoordinateSpace(v16 + 296, (uint64_t)v64);
          v70[41] = 4;
          swift_retain();
          ViewTransform.convert(_:point:)();
          uint64_t v18 = v17;
          uint64_t v20 = v19;
          outlined destroy of ViewTransform.Conversion((uint64_t)v68);
          swift_release();
          HoverResponder.updatePhase(_:)(v18, v20, 0);
        }
        swift_release();
        if v75 == 1 || (v77) {
          goto LABEL_63;
        }
      }
      swift_release();
      LOBYTE(v75) = 1;
    }
LABEL_63:
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_21:
  swift_retain();
  ResponderNode.sequence.getter();
  uint64_t v66 = v7;
  swift_release();
  uint64_t v21 = *(void (**)(void *__return_ptr, uint64_t *))v76;
  double v22 = MEMORY[0x1E4FBC860];
  long long v71 = MEMORY[0x1E4FBC860];
  v68[0] = v75;
  LOBYTE(v68[1]) = BYTE8(v75);
  swift_retain();
  swift_retain();
  if ((v76[16] & 1) == 0)
  {
    swift_retain();
    (*(void (**)(void *__return_ptr, uint64_t *))v76)(v67, v68);
    swift_release();
    if (v67[0])
    {
      type metadata accessor for HoverResponder();
      do
      {
        if (swift_dynamicCastClass())
        {
          MEMORY[0x18C115B40]();
          if (*(void *)((*(void *)&v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v71 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_release();
        }
        swift_retain();
        v21(v67, v68);
        swift_release();
      }
      while (v67[0]);
      double v22 = *(void *)&v71;
    }
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v8)
  {
    uint64_t v26 = closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v22, 0);
    double v25 = 0;
    if (!v22) {
      goto LABEL_81;
    }
    char v28 = v26;
LABEL_49:
    long long v64 = (unsigned char *)v25;
    uint64_t v65 = v22 >> 62;
    if (v27)
    {
      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB320];
      type metadata accessor for (key: EventID, value: EventType)?(0, &lazy cache variable for type metadata for [HoverResponder], (uint64_t (*)(uint64_t))type metadata accessor for HoverResponder, MEMORY[0x1E4FBB320]);
      int v43 = v42;
      *(void *)&v76[8] = v42;
      *(void *)&v76[16] = lazy protocol witness table accessor for type [HoverResponder] and conformance [A](&lazy protocol witness table cache variable for type [HoverResponder] and conformance [A], &lazy cache variable for type metadata for [HoverResponder], v41);
      *(void *)&uint64_t v75 = v22;
      swift_bridgeObjectRetain();
      goto LABEL_66;
    }
    uint64_t v30 = &lazy cache variable for type metadata for ArraySlice<HoverResponder>;
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB908];
    type metadata accessor for (key: EventID, value: EventType)?(0, &lazy cache variable for type metadata for ArraySlice<HoverResponder>, (uint64_t (*)(uint64_t))type metadata accessor for HoverResponder, MEMORY[0x1E4FBB908]);
    *(void *)&v76[8] = v32;
    *(void *)&v76[16] = lazy protocol witness table accessor for type [HoverResponder] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<HoverResponder> and conformance ArraySlice<A>, &lazy cache variable for type metadata for ArraySlice<HoverResponder>, v31);
    char v33 = swift_allocObject();
    *(void *)&uint64_t v75 = v33;
    if (v28 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v30 = (unint64_t *)v33;
      if (!(v22 >> 62))
      {
        unsigned int v34 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        if (v34 >= v28) {
          goto LABEL_53;
        }
        goto LABEL_102;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result < 0)
    {
LABEL_103:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v63 >= v28)
    {
LABEL_53:
      if ((v22 & 0xC000000000000001) != 0 && v28)
      {
        type metadata accessor for HoverResponder();
        uint64_t v35 = 0;
        do
        {
          long long v36 = v35 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v35);
          uint64_t v35 = v36;
        }
        while (v28 != v36);
      }
      if (v65)
      {
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v39 = v45;
        long long v37 = v46;
        uint64_t v40 = v47;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        long long v37 = 0;
        uint64_t v38 = v22 & 0xFFFFFFFFFFFFFF8;
        uint64_t v39 = (v22 & 0xFFFFFFFFFFFFFF8) + 32;
        uint64_t v40 = (2 * v28) | 1;
      }
      _OWORD v30[2] = v38;
      v30[3] = v39;
      unsigned char v30[4] = v37;
      v30[5] = v40;
      int v43 = *(void *)&v76[8];
LABEL_66:
      int v48 = __swift_project_boxed_opaque_existential_1(&v75, v43);
      uint64_t v49 = MEMORY[0x1F4188790](v48);
      (*(void (**)(char *, double))(v51 + 16))((char *)&v64 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0), v49);
      v68[3] = swift_getAssociatedTypeWitness();
      v68[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v68);
      dispatch thunk of Sequence.makeIterator()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v68, v68[3]);
      dispatch thunk of IteratorProtocol.next()();
      for (uint64_t i = v71; v71 != 0.0; uint64_t i = v71)
      {
        if ((*(unsigned char *)(*(void *)&i + 464) & 1) == 0)
        {
          uint64_t v53 = *(unsigned char *)(*(void *)&i + 232);
          int v55 = *(void *)(*(void *)&i + 216);
          uint64_t v54 = *(void *)(*(void *)&i + 224);
          *(void *)(*(void *)&i + 448) = 0;
          *(void *)(*(void *)&i + 456) = 0;
          *(unsigned char *)(*(void *)&i + 464) = 1;
          uint64_t v56 = swift_allocObject();
          *(void *)(v56 + 16) = v55;
          *(void *)(v56 + 24) = v54;
          *(unsigned char *)(v56 + 32) = v53;
          *(void *)(v56 + 40) = 0;
          *(void *)(v56 + 48) = 0;
          *(unsigned char *)(v56 + 56) = 1;
          outlined copy of HoverCallback();
          outlined copy of HoverCallback();
          static Update.enqueueAction(_:)();
          swift_release();
          outlined consume of HoverCallback();
        }
        swift_release();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v68, v68[3]);
        dispatch thunk of IteratorProtocol.next()();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
      double v25 = (unint64_t)v64;
      if (v64)
      {
        if (v65) {
          goto LABEL_94;
        }
        uint64_t v57 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v57; uint64_t v57 = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v58 = v25;
          if ((v22 & 0xC000000000000001) == 0)
          {
            char v61 = 0;
            double v25 = 2;
            while (1)
            {
              uint64_t v62 = v61 + 1;
              if (__OFADD__(v61, 1)) {
                goto LABEL_93;
              }
              int v44 = *(void *)(v22 + 8 * v61 + 32);
              if (*(unsigned char *)(v44 + 465) == 1)
              {
                long long v71 = 0.0;
                *(void *)&v72[0] = 0;
                *(_OWORD *)((char *)v72 + 8) = *(_OWORD *)(v44 + 280);
                memset(v76, 0, sizeof(v76));
                uint64_t v75 = 0u;
                uint64_t v77 = 2;
                v68[0] = *(void *)(v44 + 240);
                *(_OWORD *)&v68[1] = *(_OWORD *)(v44 + 248);
                *(_OWORD *)&v68[3] = *(_OWORD *)(v44 + 264);
                swift_retain();
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v75);
                v89.origin.CGFloat x = v71;
                *(_OWORD *)&v89.origin.CGFloat y = v72[0];
                v89.size.CGFloat height = *(CGFloat *)&v72[1];
                v87.CGFloat x = a3;
                v87.CGFloat y = a4;
                if (CGRectContainsPoint(v89, v87))
                {
LABEL_88:
                  swift_bridgeObjectRelease_n();
LABEL_90:
                  double v25 = v58;
                  goto LABEL_96;
                }
                swift_release();
              }
              ++v61;
              if (v62 == v57)
              {
LABEL_89:
                swift_bridgeObjectRelease_n();
                int v44 = 0;
                goto LABEL_90;
              }
            }
          }
          uint64_t v59 = 0;
          while (1)
          {
            uint64_t v60 = MEMORY[0x18C117680](v59, v22);
            double v25 = v59 + 1;
            if (__OFADD__(v59, 1)) {
              break;
            }
            int v44 = v60;
            if (*(unsigned char *)(v60 + 465) == 1)
            {
              long long v71 = 0.0;
              *(void *)&v72[0] = 0;
              *(_OWORD *)((char *)v72 + 8) = *(_OWORD *)(v60 + 280);
              memset(v76, 0, sizeof(v76));
              uint64_t v75 = 0u;
              uint64_t v77 = 2;
              v68[0] = *(void *)(v60 + 240);
              *(_OWORD *)&v68[1] = *(_OWORD *)(v60 + 248);
              *(_OWORD *)&v68[3] = *(_OWORD *)(v60 + 264);
              CGRect.convert(to:transform:)();
              outlined destroy of CoordinateSpace((uint64_t)&v75);
              v88.origin.CGFloat x = v71;
              *(_OWORD *)&v88.origin.CGFloat y = v72[0];
              v88.size.CGFloat height = *(CGFloat *)&v72[1];
              v86.CGFloat x = a3;
              v86.CGFloat y = a4;
              if (CGRectContainsPoint(v88, v86)) {
                goto LABEL_88;
              }
            }
            swift_unknownObjectRelease();
            ++v59;
            if (v25 == v57) {
              goto LABEL_89;
            }
          }
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease_n();
        int v44 = 0;
        goto LABEL_96;
      }
LABEL_81:
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
LABEL_35:
  swift_retain();
  ResponderNode.sequence.getter();
  swift_release();
  double v23 = *(void (**)(void *__return_ptr, uint64_t *))v76;
  double v24 = v76[16];
  double v25 = MEMORY[0x1E4FBC860];
  long long v71 = MEMORY[0x1E4FBC860];
  v68[0] = v75;
  LOBYTE(v68[1]) = BYTE8(v75);
  swift_retain();
  swift_retain();
  if ((v24 & 1) == 0)
  {
    swift_retain();
    v23(v67, v68);
    swift_release();
    if (v67[0])
    {
      type metadata accessor for HoverResponder();
      do
      {
        if (swift_dynamicCastClass())
        {
          MEMORY[0x18C115B40]();
          if (*(void *)((*(void *)&v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v71 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_release();
        }
        swift_retain();
        v23(v67, v68);
        swift_release();
      }
      while (v67[0]);
      double v25 = *(void *)&v71;
    }
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v29 = closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v22, v25);
  if (v22)
  {
    char v28 = v29;
    goto LABEL_49;
  }
  int v44 = 0;
  if (!v25) {
    goto LABEL_81;
  }
LABEL_96:
  specialized HoverEventDispatcher.dispatchNewAncestorsHoverCallbacks(oldHighestAncestor:newAncestors:point:)(v44, v25);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void type metadata accessor for (key: EventID, value: EventType)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [HoverResponder] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for (key: EventID, value: EventType)?(255, a2, (uint64_t (*)(uint64_t))type metadata accessor for HoverResponder, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187848AB0()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187848AE8()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(uint64_t a1)
{
  return closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(a1, *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24));
}

uint64_t outlined destroy of ViewTransform.Conversion(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in HoverResponder.updatePhase(_:)()
{
  return closure #1 in HoverResponder.updatePhase(_:)(*(void (**)(BOOL))(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
}

unint64_t partial apply for closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(unint64_t a1, unint64_t a2)
{
  return closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void static DismissBehavior.interactive.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static DismissBehavior.destructive.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Transaction.dismissBehavior.getter()
{
  return Transaction.subscript.getter();
}

uint64_t Transaction.dismissBehavior.setter()
{
  return Transaction.subscript.setter();
}

uint64_t (*Transaction.dismissBehavior.modify(void *a1))(uint64_t a1)
{
  *a1 = v1;
  Transaction.subscript.getter();
  return Transaction.dismissBehavior.modify;
}

uint64_t Transaction.dismissBehavior.modify(uint64_t a1)
{
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 8);
  return Transaction.subscript.setter();
}

uint64_t sub_187848C90@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Transaction.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187848CE0()
{
  return Transaction.subscript.setter();
}

ValueMetadata *type metadata accessor for DismissBehavior()
{
  return &type metadata for DismissBehavior;
}

unsigned char *storeEnumTagSinglePayload for DismissBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187848E0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DismissBehavior.Role()
{
  return &type metadata for DismissBehavior.Role;
}

void *type metadata accessor for Transaction.DismissBehaviorKey()
{
  return &unk_1ED40FD18;
}

unint64_t lazy protocol witness table accessor for type DismissBehavior.Role and conformance DismissBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type DismissBehavior.Role and conformance DismissBehavior.Role;
  if (!lazy protocol witness table cache variable for type DismissBehavior.Role and conformance DismissBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DismissBehavior.Role and conformance DismissBehavior.Role);
  }
  return result;
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.DismissBehaviorKey()
{
  return MEMORY[0x1F40FE588]();
}

unsigned char *storeEnumTagSinglePayload for SidebarStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187848F7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarStatus()
{
  return &type metadata for SidebarStatus;
}

unint64_t lazy protocol witness table accessor for type SidebarStatus and conformance SidebarStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarStatus and conformance SidebarStatus;
  if (!lazy protocol witness table cache variable for type SidebarStatus and conformance SidebarStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarStatus and conformance SidebarStatus);
  }
  return result;
}

double static TableViewListCore.Configuration.sidebar(isInExpandedSplitView:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  BOOL v8 = (a1 & 1) == 0;
  if (a1) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  memset(v23, 0, sizeof(v23));
  __int16 v24 = 1;
  OptionalEdgeInsets.init()();
  *(void *)&v17[0] = 2;
  outlined init with take of SectionInsetMode((uint64_t)v23, (uint64_t)v17 + 8);
  BYTE10(v18) = v3;
  *(void *)&long long v19 = v8;
  BYTE8(v19) = 0;
  *(void *)&long long v20 = v9;
  BYTE8(v20) = v10;
  *(void *)&long long v21 = v11;
  BYTE8(v21) = v12;
  *(void *)double v22 = v13;
  v22[8] = v14;
  *(void *)&v22[16] = v15;
  unsigned char v22[24] = v16;
  long long v4 = v21;
  a2[4] = v20;
  a2[5] = v4;
  a2[6] = *(_OWORD *)v22;
  *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)&v22[9];
  long long v5 = v17[1];
  *a2 = v17[0];
  a2[1] = v5;
  double result = *(double *)&v18;
  long long v7 = v19;
  a2[2] = v18;
  a2[3] = v7;
  return result;
}

double TableViewListCore.init(dataSource:selection:configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v16 = a3[4];
  long long v17 = a3[5];
  *(_OWORD *)long long v18 = a3[6];
  *(_OWORD *)&v18[9] = *(long long *)((char *)a3 + 105);
  long long v12 = *a3;
  long long v13 = a3[1];
  long long v14 = a3[2];
  long long v15 = a3[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v7 = type metadata accessor for TableViewListCore();
  uint64_t v8 = a5 + *(int *)(v7 + 52);
  type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  char v10 = (_OWORD *)(a5 + *(int *)(v7 + 56));
  v10[4] = v16;
  v10[5] = v17;
  void v10[6] = *(_OWORD *)v18;
  *(_OWORD *)((char *)v10 + 105) = *(_OWORD *)&v18[9];
  *char v10 = v12;
  v10[1] = v13;
  double result = *(double *)&v14;
  long long v10[2] = v14;
  v10[3] = v15;
  return result;
}

uint64_t TableViewListCore.Configuration.TableViewConfiguration.sectionCornerRadius.getter()
{
  if (*(unsigned char *)(v0 + 42) == 1 || *(void *)v0 != 2) {
    return 0;
  }
  else {
    return *MEMORY[0x1E4FB2F28];
  }
}

uint64_t TableViewListCore.Configuration.TableViewConfiguration.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  int v6 = *(unsigned __int8 *)(v0 + 41);
  Swift::UInt v10 = *(unsigned __int8 *)(v0 + 42);
  Swift::UInt v11 = *(void *)(v0 + 48);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 56);
  Hasher._combine(_:)(*(void *)v0);
  if (v6 == 1)
  {
    if (v2 | v3 | v1 | v4 || v5) {
      Swift::UInt v7 = 13;
    }
    else {
      Swift::UInt v7 = 3;
    }
    Hasher._combine(_:)(v7);
    Swift::UInt v8 = v10;
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    Swift::UInt v8 = v10;
    if ((v5 & 1) == 0) {
      EdgeInsets.hash(into:)();
    }
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return OptionalEdgeInsets.hash(into:)();
}

uint64_t static TableViewListCore.Configuration.TableViewConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    goto LABEL_19;
  }
  int v2 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  char v8 = *(unsigned char *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  int v14 = *(unsigned __int8 *)(a2 + 40);
  int v15 = *(unsigned __int8 *)(a2 + 41);
  int v16 = *(unsigned __int8 *)(a2 + 42);
  uint64_t v17 = *(void *)(a2 + 48);
  int v18 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  char v38 = *(unsigned char *)(a2 + 72);
  uint64_t v20 = *(void *)(a2 + 80);
  char v37 = *(unsigned char *)(a2 + 88);
  uint64_t v36 = *(void *)(a2 + 96);
  char v35 = *(unsigned char *)(a2 + 104);
  uint64_t v34 = *(void *)(a2 + 112);
  char v21 = *(unsigned char *)(a2 + 120);
  char v22 = *(unsigned char *)(a1 + 104);
  uint64_t v23 = *(void *)(a1 + 112);
  char v24 = *(unsigned char *)(a1 + 120);
  if (*(unsigned char *)(a1 + 41) == 1)
  {
    if (*(void *)(a1 + 24) | *(void *)(a1 + 16) | *(void *)(a1 + 8) | *(void *)(a1 + 32) || *(unsigned char *)(a1 + 40))
    {
      if ((v15 & 1) == 0 || !(v13 | v11 | v10 | v12) && !v14) {
        goto LABEL_19;
      }
    }
    else
    {
      char v25 = 0;
      if (!v15 || v13 | v11 | v10 | v12 || v14) {
        return v25 & 1;
      }
    }
    if (v2 != v16)
    {
LABEL_19:
      char v25 = 0;
      return v25 & 1;
    }
    goto LABEL_23;
  }
  if (v15) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    char v25 = 0;
    if ((v14 & 1) == 0 || v2 != v16) {
      return v25 & 1;
    }
    goto LABEL_23;
  }
  if (v14) {
    goto LABEL_19;
  }
  char v28 = v21;
  uint64_t v29 = *(void *)(a1 + 96);
  char v30 = *(unsigned char *)(a1 + 88);
  uint64_t v31 = *(void *)(a1 + 80);
  char v32 = *(unsigned char *)(a1 + 72);
  uint64_t v33 = *(void *)(a1 + 64);
  char v26 = static EdgeInsets.== infix(_:_:)();
  char v25 = 0;
  if (v26)
  {
    uint64_t v5 = v33;
    char v6 = v32;
    uint64_t v7 = v31;
    char v8 = v30;
    uint64_t v9 = v29;
    char v21 = v28;
    if (v2 == v16)
    {
LABEL_23:
      char v25 = 0;
      if (v3 == v17 && ((v4 ^ v18) & 1) == 0)
      {
        uint64_t v47 = v5;
        char v48 = v6;
        uint64_t v49 = v7;
        char v50 = v8;
        uint64_t v51 = v9;
        char v52 = v22;
        uint64_t v53 = v23;
        char v54 = v24;
        uint64_t v39 = v19;
        char v40 = v38;
        uint64_t v41 = v20;
        char v42 = v37;
        uint64_t v43 = v36;
        char v44 = v35;
        uint64_t v45 = v34;
        char v46 = v21;
        char v25 = MEMORY[0x18C110940](&v47, &v39);
      }
    }
  }
  return v25 & 1;
}

Swift::Int TableViewListCore.Configuration.TableViewConfiguration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableViewListCore<A, B>.Configuration.TableViewConfiguration()
{
  return Hasher._finalize()();
}

double TableViewListCore.Configuration.init()@<D0>(_OWORD *a1@<X8>)
{
  memset(v21, 0, sizeof(v21));
  __int16 v22 = 256;
  char v2 = static SemanticFeature.isEnabled.getter();
  OptionalEdgeInsets.init()();
  *(void *)&v15[0] = 0;
  outlined init with take of SectionInsetMode((uint64_t)v21, (uint64_t)v15 + 8);
  BYTE10(v16) = 0;
  *(void *)&long long v17 = 1;
  BYTE8(v17) = v2 & 1;
  *(void *)&long long v18 = v7;
  BYTE8(v18) = v8;
  *(void *)&long long v19 = v9;
  BYTE8(v19) = v10;
  *(void *)uint64_t v20 = v11;
  v20[8] = v12;
  *(void *)&unsigned char v20[16] = v13;
  v20[24] = v14;
  long long v3 = v19;
  a1[4] = v18;
  a1[5] = v3;
  a1[6] = *(_OWORD *)v20;
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)&v20[9];
  long long v4 = v15[1];
  *a1 = v15[0];
  a1[1] = v4;
  double result = *(double *)&v16;
  long long v6 = v17;
  a1[2] = v16;
  a1[3] = v6;
  return result;
}

double TableViewListCore.Configuration.init(insetMode:padding:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = a2[2];
  char v7 = *((unsigned char *)a2 + 24);
  uint64_t v8 = a2[4];
  char v9 = *((unsigned char *)a2 + 40);
  uint64_t v10 = a2[6];
  char v11 = *((unsigned char *)a2 + 56);
  *(void *)&v16[0] = 1;
  outlined init with take of SectionInsetMode(a1, (uint64_t)v16 + 8);
  BYTE10(v17) = 0;
  *(void *)&long long v18 = 1;
  BYTE8(v18) = 0;
  *(void *)&long long v19 = v4;
  BYTE8(v19) = v5;
  *(void *)&long long v20 = v6;
  BYTE8(v20) = v7;
  *(void *)char v21 = v8;
  v21[8] = v9;
  *(void *)&v21[16] = v10;
  v21[24] = v11;
  long long v12 = v16[1];
  *a3 = v16[0];
  a3[1] = v12;
  long long v13 = v20;
  a3[4] = v19;
  a3[5] = v13;
  a3[6] = *(_OWORD *)v21;
  *(_OWORD *)((char *)a3 + 105) = *(_OWORD *)&v21[9];
  double result = *(double *)&v17;
  long long v15 = v18;
  a3[2] = v17;
  a3[3] = v15;
  return result;
}

double static TableViewListCore.Configuration.inset(isInExpandedSplitView:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  if (a1) {
    char v3 = 3;
  }
  else {
    char v3 = 0;
  }
  memset(v22, 0, sizeof(v22));
  char v23 = a1;
  BOOL v24 = (a1 & 1) == 0;
  OptionalEdgeInsets.init()();
  *(void *)&v16[0] = 0;
  outlined init with take of SectionInsetMode((uint64_t)v22, (uint64_t)v16 + 8);
  BYTE10(v17) = v3;
  *(void *)&long long v18 = 1;
  BYTE8(v18) = 0;
  *(void *)&long long v19 = v8;
  BYTE8(v19) = v9;
  *(void *)&long long v20 = v10;
  BYTE8(v20) = v11;
  *(void *)char v21 = v12;
  v21[8] = v13;
  *(void *)&v21[16] = v14;
  v21[24] = v15;
  long long v4 = v20;
  a2[4] = v19;
  a2[5] = v4;
  a2[6] = *(_OWORD *)v21;
  *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)&v21[9];
  long long v5 = v16[1];
  *a2 = v16[0];
  a2[1] = v5;
  double result = *(double *)&v17;
  long long v7 = v18;
  a2[2] = v17;
  a2[3] = v7;
  return result;
}

double static TableViewListCore._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v69 = a7;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v68 = type metadata accessor for ListScrollable.DataSourceProvider();
  MEMORY[0x1F4188790](v68);
  uint64_t v67 = (uint64_t *)((char *)&v60 - v13);
  uint64_t v14 = (int *)type metadata accessor for BridgedListState(0);
  MEMORY[0x1F4188790](v14);
  long long v16 = (double *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v70 = *a1;
  long long v17 = *(_OWORD *)(a2 + 48);
  long long v95 = *(_OWORD *)(a2 + 32);
  long long v96 = v17;
  long long v97 = *(_OWORD *)(a2 + 64);
  int v98 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  long long v93 = *(_OWORD *)a2;
  long long v94 = v18;
  char v19 = static SemanticFeature.isEnabled.getter();
  double v20 = 15.0;
  if (v19) {
    double v20 = 16.0;
  }
  *long long v16 = v20;
  char v21 = (char *)v16 + v14[5];
  uint64_t v22 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  char v23 = (char *)v16 + v14[6];
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *(_OWORD *)char v23 = 0u;
  v23[112] = 1;
  *(_DWORD *)((char *)v16 + v14[7]) = 0;
  type metadata accessor for External<BridgedListState>(0, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<BridgedListState> and conformance External<A>();
  LODWORD(v21) = Attribute.init<A>(body:value:flags:update:)();
  int v65 = (int)v21;
  outlined destroy of BridgedListState((uint64_t)v16);
  LODWORD(v87) = v21;
  swift_unknownObjectWeakInit();
  *(void *)&long long v90 = a3;
  *((void *)&v90 + 1) = a4;
  *(void *)&v91[0] = a5;
  *((void *)&v91[0] + 1) = a6;
  uint64_t updated = type metadata accessor for TableViewListCore.UpdateBridgedState();
  v86[2] = updated;
  v86[3] = swift_getWitnessTable();
  long long v64 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E740];
  type metadata accessor for Attribute<UInt32>(0, &lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v87, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v86, updated, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
  (*(void (**)(long long *, uint64_t))(*(void *)(updated - 8) + 8))(&v87, updated);
  LODWORD(v61) = v90;
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  swift_unknownObjectWeakInit();
  *(void *)&long long v90 = a3;
  *((void *)&v90 + 1) = a4;
  *(void *)&v91[0] = a5;
  *((void *)&v91[0] + 1) = a6;
  uint64_t v27 = type metadata accessor for TableViewListCore.ScrollViewProvider();
  v85[2] = v27;
  v85[3] = swift_getWitnessTable();
  type metadata accessor for External<BridgedListState>(0, &lazy cache variable for type metadata for Attribute<UIScrollView?>, (uint64_t (*)(uint64_t))type metadata accessor for UIScrollView?, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v87, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v85, v27, MEMORY[0x1E4FBC248], v28, MEMORY[0x1E4FBC278], v29);
  uint64_t v62 = 0;
  (*(void (**)(long long *, uint64_t))(*(void *)(v27 - 8) + 8))(&v87, v27);
  unsigned int v30 = v90;
  int v72 = v90;
  uint64_t v66 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<Scrollable> and conformance External<A>();
  int v71 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v87) = v70;
  *(void *)&long long v90 = a3;
  *((void *)&v90 + 1) = a4;
  *(void *)&v91[0] = a5;
  *((void *)&v91[0] + 1) = a6;
  type metadata accessor for TableViewListCore();
  uint64_t v63 = type metadata accessor for _GraphValue();
  unsigned int v31 = _GraphValue.value.getter();
  v91[1] = v95;
  v91[2] = v96;
  v91[3] = v97;
  int v92 = v98;
  long long v90 = v93;
  v91[0] = v94;
  swift_getKeyPath();
  LODWORD(v27) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(void *)&long long v87 = __PAIR64__(v61, v31);
  *((void *)&v87 + 1) = __PAIR64__(v27, v30);
  *(void *)&long long v90 = a3;
  *((void *)&v90 + 1) = a4;
  *(void *)&v91[0] = a5;
  *((void *)&v91[0] + 1) = a6;
  uint64_t v74 = a6;
  type metadata accessor for ListRepresentable();
  type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
  v84[2] = type metadata accessor for ModifiedContent();
  *(void *)&long long v90 = a3;
  *((void *)&v90 + 1) = a4;
  uint64_t v60 = a3;
  uint64_t v73 = a4;
  *(void *)&v91[0] = a5;
  *((void *)&v91[0] + 1) = a6;
  uint64_t Representable = type metadata accessor for TableViewListCore.MakeRepresentable();
  v84[3] = Representable;
  v84[4] = swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v87, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v84, Representable, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
  LODWORD(v62) = v90;
  v91[1] = v95;
  v91[2] = v96;
  v91[3] = v97;
  int v92 = v98;
  long long v90 = v93;
  v91[0] = v94;
  char v61 = &v91[2];
  v88[1] = v95;
  v88[2] = v96;
  v88[3] = v97;
  int v89 = v98;
  long long v87 = v93;
  v88[0] = v94;
  outlined retain of _ViewInputs((uint64_t)&v93);
  LODWORD(v76) = _ViewInputs.environment.getter();
  DWORD1(v76) = v65;
  *(void *)&long long v87 = a3;
  *((void *)&v87 + 1) = a4;
  uint64_t v35 = a5;
  uint64_t v36 = v74;
  *(void *)&v88[0] = a5;
  *((void *)&v88[0] + 1) = v74;
  uint64_t v37 = type metadata accessor for TableViewListCore.EnvironmentTransform();
  v83[2] = v37;
  v83[3] = swift_getWitnessTable();
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], v64);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v76, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v83, v37, MEMORY[0x1E4FBC248], v38, MEMORY[0x1E4FBC278], v39);
  _ViewInputs.environment.setter();
  _ViewInputs.scrollable.setter();
  PreferencesInputs.remove<A>(_:)();
  _GraphValue.init(_:)();
  *(void *)&long long v87 = v90;
  *(void *)&v88[0] = *(void *)&v91[0];
  *(_OWORD *)((char *)v88 + 8) = *(_OWORD *)((char *)v91 + 8);
  *(_OWORD *)((char *)&v88[1] + 8) = *(_OWORD *)((char *)&v91[1] + 8);
  *(_OWORD *)((char *)&v88[2] + 8) = *(_OWORD *)((char *)&v91[2] + 8);
  *((void *)&v88[3] + 1) = *((void *)&v91[3] + 1);
  DWORD2(v87) = DWORD2(v90);
  int v89 = v92;
  unint64_t v40 = lazy protocol witness table accessor for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v86[4] = &protocol witness table for ListRepresentable<A, B>;
  v86[5] = v40;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v41 = AGCreateWeakAttribute();
  uint64_t v42 = v60;
  uint64_t v79 = v60;
  uint64_t v80 = v73;
  uint64_t v81 = v35;
  uint64_t v82 = v36;
  LODWORD(v87) = v70;
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v43 = AGCreateWeakAttribute();
  uint64_t v44 = (uint64_t)v67;
  *uint64_t v67 = v43;
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = AGCreateWeakAttribute();
  long long v87 = v76;
  _ViewOutputs.subscript.getter();
  uint64_t v46 = AGCreateWeakAttribute();
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F3F398]);
  uint64_t v47 = swift_allocObject();
  *(_DWORD *)(v47 + 16) = 0;
  *((void *)&v88[0] + 1) = type metadata accessor for ListScrollable();
  *(void *)&v88[1] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v87);
  ListScrollable.init(state:dataSourceProvider:scrollView:children:lastUpdateSeed:)(v41, v44, v45, v46, v47, boxed_opaque_existential_1);
  AGGraphSetValue();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
  uint64_t v77 = v96;
  int v78 = DWORD2(v96);
  *(void *)&long long v87 = v96;
  DWORD2(v87) = DWORD2(v96);
  char v49 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)&long long v87 = v77;
  DWORD2(v87) = v78;
  uint64_t v50 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v50 & 1) != 0 || (v49)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    int v51 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v87) = 0;
    uint64_t v50 = _ViewOutputs.subscript.setter();
    if (v49)
    {
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      uint64_t v52 = Dictionary.init(minimumCapacity:)();
      LOBYTE(v87) = 0;
      DWORD1(v87) = v51;
      *((void *)&v87 + 1) = v52;
      type metadata accessor for Attribute<UInt32>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      _GraphValue.init(_:)();
      int v53 = v75;
      long long v54 = v76;
      *(void *)&long long v87 = v77;
      DWORD2(v87) = v78;
      swift_bridgeObjectRetain();
      char v55 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if (v55) {
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v53, &v93, v54, *((unint64_t *)&v54 + 1), 0);
      }
      swift_bridgeObjectRelease();
      LOBYTE(v87) = (v55 & 1) == 0;
      uint64_t v50 = _ViewOutputs.subscript.setter();
    }
  }
  *(void *)&long long v87 = v77;
  DWORD2(v87) = v78;
  MEMORY[0x1F4188790](v50);
  uint64_t v56 = v73;
  *(&v60 - 6) = v42;
  *(&v60 - 5) = v56;
  uint64_t v57 = v74;
  *(&v60 - 4) = v35;
  *(&v60 - 3) = v57;
  *((_DWORD *)&v60 - 4) = v72;
  outlined retain of [Text.Modifier]((uint64_t)&v77);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v58 = v69;
  *uint64_t v69 = v76;
  double result = *((double *)&v76 + 1);
  v58[1] = *((void *)&v76 + 1);
  return result;
}

uint64_t closure #1 in static TableViewListCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  long long v10[2] = type metadata accessor for TableViewListCore();
  v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t implicit closure #2 in static TableViewListCore._makeView(view:inputs:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = a1;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v10 = type metadata accessor for TableViewListCore.ScrollViewPreferenceProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<[ContentScrollViewBox]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v12;
}

void TableViewListCore.ScrollViewProvider.value.getter()
{
}

void protocol witness for static Rule.initialValue.getter in conformance TableViewListCore<A, B>.ScrollViewProvider(void *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.ScrollViewProvider()
{
}

uint64_t sub_18784A8CC(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t TableViewListCore.ScrollViewPreferenceProvider.value.getter()
{
  type metadata accessor for UIScrollView?();
  if (!*(void *)AGGraphGetValue()) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for Attribute<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  memset(&v2[16], 0, 25);
  outlined init with take of ContentScrollViewBox((uint64_t)v2, v0 + 32);
  return v0;
}

uint64_t TableViewListCore.MakeRepresentable.core.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TableViewListCore();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.ScrollViewPreferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TableViewListCore.ScrollViewPreferenceProvider.value.getter();
  *a1 = result;
  return result;
}

uint64_t TableViewListCore.MakeRepresentable.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v75 = a1;
  uint64_t v72 = a7;
  uint64_t v11 = type metadata accessor for Binding();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v66 = *(void *)(v12 - 8);
  uint64_t v67 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v76 = (uint64_t)&v57 - v13;
  uint64_t v65 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v74 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = a3;
  *((void *)&v84 + 1) = a4;
  *(void *)&long long v85 = a5;
  *((void *)&v85 + 1) = a6;
  uint64_t v16 = type metadata accessor for ListRepresentable();
  uint64_t v69 = *(void *)(v16 - 8);
  uint64_t v70 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v68 = (uint64_t)&v57 - v17;
  uint64_t v58 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v57 = (char *)&v57 - v19;
  *(void *)&long long v84 = a3;
  *((void *)&v84 + 1) = a4;
  *(void *)&long long v85 = a5;
  *((void *)&v85 + 1) = a6;
  uint64_t v20 = type metadata accessor for TableViewListCore();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v64 = (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v63 = (uint64_t)&v57 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v62 = (uint64_t)&v57 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v57 - v28;
  uint64_t v30 = type metadata accessor for Optional();
  uint64_t v59 = *(void *)(v30 - 8);
  uint64_t v60 = v30;
  MEMORY[0x1F4188790](v30);
  char v32 = (char *)&v57 - v31;
  uint64_t v79 = a6;
  uint64_t v80 = a3;
  uint64_t v77 = a4;
  uint64_t v33 = v58;
  uint64_t v71 = a5;
  TableViewListCore.MakeRepresentable.core.getter((uint64_t)v29);
  uint64_t v73 = v20;
  uint64_t v34 = &v29[*(int *)(v20 + 52)];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v34, 1, v11))
  {
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    uint64_t v81 = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    char v61 = v35;
    v35((uint64_t)v29, v73);
    uint64_t v36 = 1;
  }
  else
  {
    uint64_t v37 = v57;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v57, v34, v11);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    uint64_t v81 = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    char v61 = v38;
    v38((uint64_t)v29, v73);
    MEMORY[0x18C113DA0](v11);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v37, v11);
    uint64_t v36 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v32, v36, 1, v77);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v60);
  uint64_t v39 = v62;
  uint64_t v40 = v80;
  TableViewListCore.MakeRepresentable.core.getter(v62);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v74, v39, v40);
  uint64_t v41 = v73;
  uint64_t v42 = v61;
  v61(v39, v73);
  uint64_t v43 = v63;
  TableViewListCore.MakeRepresentable.core.getter(v63);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v76, v43 + *(int *)(v41 + 52), v67);
  v42(v43, v41);
  uint64_t v44 = v64;
  TableViewListCore.MakeRepresentable.core.getter(v64);
  uint64_t v45 = (long long *)(v44 + *(int *)(v41 + 56));
  long long v46 = v45[5];
  long long v88 = v45[4];
  long long v89 = v46;
  v90[0] = v45[6];
  *(_OWORD *)((char *)v90 + 9) = *(long long *)((char *)v45 + 105);
  long long v47 = v45[1];
  long long v84 = *v45;
  long long v85 = v47;
  long long v48 = v45[3];
  long long v86 = v45[2];
  long long v87 = v48;
  v42(v44, v41);
  v82[4] = v88;
  v82[5] = v89;
  v83[0] = v90[0];
  *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)((char *)v90 + 9);
  v82[0] = v84;
  v82[1] = v85;
  _OWORD v82[2] = v86;
  v82[3] = v87;
  uint64_t v49 = AGCreateWeakAttribute();
  uint64_t v50 = AGCreateWeakAttribute();
  uint64_t Value = AGGraphGetValue();
  uint64_t v52 = v68;
  ListRepresentable.init(dataSource:selection:configuration:updateBridgedState:scrollViewProvider:stackBehavior:)(v74, v76, v82, v49, v50, *(void *)Value, *(unsigned __int8 *)(Value + 8) | (*(unsigned __int8 *)(Value + 9) << 8), v80, v68);
  char v53 = static Edge.Set.all.getter();
  *(void *)&v82[0] = 1;
  BYTE8(v82[0]) = v53;
  type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
  uint64_t v54 = v70;
  MEMORY[0x18C113660](v82, v70, v55, &protocol witness table for ListRepresentable<A, B>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v52, v54);
}

double ListRepresentable.init(dataSource:selection:configuration:updateBridgedState:scrollViewProvider:stackBehavior:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  long long v25 = a3[4];
  long long v26 = a3[5];
  *(_OWORD *)uint64_t v27 = a3[6];
  *(_OWORD *)&v27[9] = *(long long *)((char *)a3 + 105);
  long long v21 = *a3;
  long long v22 = a3[1];
  long long v23 = a3[2];
  long long v24 = a3[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9, a1, a8);
  uint64_t v15 = (int *)type metadata accessor for ListRepresentable();
  uint64_t v16 = a9 + v15[13];
  type metadata accessor for Binding();
  uint64_t v17 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a2, v17);
  uint64_t v18 = (_OWORD *)(a9 + v15[14]);
  _OWORD v18[4] = v25;
  v18[5] = v26;
  v18[6] = *(_OWORD *)v27;
  *(_OWORD *)((char *)v18 + 105) = *(_OWORD *)&v27[9];
  *uint64_t v18 = v21;
  v18[1] = v22;
  double result = *(double *)&v23;
  id v18[2] = v23;
  long long v18[3] = v24;
  *(void *)(a9 + v15[15]) = a4;
  *(void *)(a9 + v15[16]) = a5;
  uint64_t v20 = a9 + v15[17];
  *(void *)uint64_t v20 = a6;
  *(unsigned char *)(v20 + 8) = a7;
  *(unsigned char *)(v20 + 9) = HIBYTE(a7) & 1;
  return result;
}

uint64_t TableViewListCore.UpdateBridgedState.bridgedState.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for BridgedListState(0);
  uint64_t Value = AGGraphGetValue();

  return outlined init with copy of BridgedListState(Value, a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TableViewListCore<A, B>.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ListRepresentable();
  type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.MakeRepresentable@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return TableViewListCore.MakeRepresentable.value.getter(*v2, v2[1], a1[2], a1[3], a1[4], a1[5], a2);
}

_DWORD *TableViewListCore.UpdateBridgedState.updateValue()()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = type metadata accessor for BridgedListState(0);
  MEMORY[0x1F4188790](v1);
  char v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v11 - v5;
  if (!AGGraphGetOutputValue()) {
    goto LABEL_4;
  }
  TableViewListCore.UpdateBridgedState.bridgedState.getter((uint64_t)v6);
  int v7 = *(_DWORD *)&v6[*(int *)(v1 + 28)];
  outlined destroy of BridgedListState((uint64_t)v6);
  double result = (_DWORD *)AGGraphGetOutputValue();
  if (!result)
  {
    __break(1u);
    return result;
  }
  if (v7 != *result)
  {
LABEL_4:
    uint64_t v9 = AGCreateWeakAttribute();
    AGGraphClearUpdate();
    closure #1 in TableViewListCore.UpdateBridgedState.updateValue()(v0, v9, &v12);
    AGGraphSetUpdate();
    TableViewListCore.UpdateBridgedState.bridgedState.getter((uint64_t)v3);
    int v10 = *(_DWORD *)&v3[*(int *)(v1 + 28)];
    outlined destroy of BridgedListState((uint64_t)v3);
    int v11 = v10;
    return (_DWORD *)AGGraphSetOutputValue();
  }
  return result;
}

void closure #1 in TableViewListCore.UpdateBridgedState.updateValue()(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = MEMORY[0x18C119DF0](a1 + 8);
  uint64_t v6 = (void *)v5;
  if (v5)
  {
    *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_bridgedState) = a2;
    UpdateCoalescingTableView.updateContent()();
  }
  *a3 = v6 == 0;
}

uint64_t TableViewListCore.EnvironmentTransform.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BridgedListState(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (void *)((char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  ScrollBehaviorModifier.ChildEnvironment.environment.getter(a1);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of BridgedListState(Value, (uint64_t)v4);
  uint64_t v6 = *v4;
  outlined destroy of BridgedListState((uint64_t)v4);
  v8[1] = v6;
  type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>, (uint64_t)&type metadata for ListMarginKey, (uint64_t)&protocol witness table for ListMarginKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>, (uint64_t)&type metadata for ListMarginKey, (uint64_t)&protocol witness table for ListMarginKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.EnvironmentTransform@<X0>(void *a1@<X8>)
{
  return TableViewListCore.EnvironmentTransform.value.getter(a1);
}

double protocol witness for static View._makeView(view:inputs:) in conformance TableViewListCore<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  return static TableViewListCore._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TableViewListCore<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableViewListCore<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance TableViewListCore<A, B>()
{
}

id ListRepresentable.makeCoordinator()(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = v3;
  type metadata accessor for UITableViewListCoordinator();
  uint64_t v4 = *(int *)(a1 + 56);
  uint64_t v5 = v1 + *(int *)(a1 + 52);
  long long v7 = 0uLL;
  LOBYTE(v8) = 0;
  return specialized UITableViewListCoordinator.__allocating_init(dataSource:selection:transaction:editMode:sidebarStatus:)(v1, v5, 1, (uint64_t *)&v7, *(unsigned __int8 *)(v1 + v4 + 42));
}

char *ListRepresentable.makeViewProvider(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v50 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = v5[3];
  int v52 = *((unsigned __int8 *)v5 + 32);
  uint64_t v10 = v5[5];
  uint64_t v12 = *(int *)(v11 + 56);
  uint64_t v53 = v2;
  uint64_t v49 = v2 + v12;
  uint64_t v13 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UpdateCoalescingTableView()), sel_initWithFrame_style_, *(void *)(v2 + v12), 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v13, sel_setDataSource_, v10);
  objc_msgSend(v13, sel_setDelegate_, v10);
  objc_msgSend(v13, sel_setEstimatedRowHeight_, *MEMORY[0x1E4FB2F28]);
  objc_msgSend(v13, sel_setSeparatorInsetReference_, 1);
  swift_unknownObjectWeakAssign();
  uint64_t v55 = v6;
  uint64_t v56 = v7;
  uint64_t v57 = v8;
  uint64_t v58 = v9;
  char v59 = v52;
  uint64_t v60 = v10;
  swift_getWitnessTable();
  uint64_t v48 = a2;
  uint64_t v14 = type metadata accessor for PlatformViewRepresentableContext();
  specialized ReferenceFileDocumentConfiguration.document.getter();
  uint64_t v15 = swift_retain();
  UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(v15);
  swift_release();
  uint64_t v55 = v6;
  uint64_t v56 = v7;
  uint64_t v57 = v8;
  uint64_t v58 = v9;
  char v59 = v52;
  uint64_t v60 = v10;
  PlatformViewRepresentableContext.environment.getter(v14, v54);
  if (v54[1])
  {
    type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v16 = v56;
  uint64_t v17 = &v13[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_rowSpacing];
  *(void *)uint64_t v17 = v55;
  v17[8] = v16;
  uint64_t v18 = v13;
  id v19 = UITableViewListCoordinator.dragAndDropController.getter();
  objc_msgSend(v18, sel_setDragDelegate_, v19);

  id v20 = UITableViewListCoordinator.dragAndDropController.getter();
  objc_msgSend(v18, sel_setDropDelegate_, v20);

  long long v21 = v50;
  int v22 = *(unsigned __int8 *)(v49 + 42);
  uint64_t v23 = v51;
  uint64_t v24 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v53, v48);
  if (v22 != 1) {
    int v22 = v21[*(int *)(v24 + 56) + 42] == 2;
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v24);
  int v25 = v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle];
  v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle] = v22;
  if (v22 != v25)
  {
    uint64_t v26 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets;
    v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets] = 1;
    id v27 = objc_msgSend(v18, sel__viewControllerForAncestor);
    if (v27)
    {
      uint64_t v28 = v27;
      id v29 = objc_msgSend(v27, sel_navigationController);

      if (v29)
      {

        v18[v26] = 0;
        objc_msgSend(v18, sel__notifyAlignedContentMarginChanged);
      }
    }
  }
  type metadata accessor for ListTableViewCell();
  id v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_classForCoder);
  uint64_t v31 = *(void *)(v24 + 16);
  uint64_t v32 = *(void *)(v24 + 24);
  uint64_t v33 = *(void *)(v24 + 32);
  uint64_t v34 = *(void *)(v24 + 40);
  uint64_t v55 = v31;
  uint64_t v56 = v32;
  uint64_t v57 = v33;
  uint64_t v58 = v34;
  type metadata accessor for UITableViewListCoordinator();
  uint64_t v35 = static UITableViewListCoordinator.cellReuseIdentifier.getter();
  uint64_t v36 = (void *)MEMORY[0x18C115780](v35);
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_registerClass_forCellReuseIdentifier_, v30, v36);

  type metadata accessor for ListTableViewHeaderFooter();
  id v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_classForCoder);
  uint64_t v38 = static UITableViewListCoordinator.headerReuseIdentifier.getter();
  uint64_t v39 = (void *)MEMORY[0x18C115780](v38);
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_registerClass_forHeaderFooterViewReuseIdentifier_, v37, v39);

  uint64_t Attribute = AGWeakAttributeGetAttribute();
  int v41 = *MEMORY[0x1E4F4E7A0];
  if (Attribute != *MEMORY[0x1E4F4E7A0])
  {
    MEMORY[0x1F4188790](Attribute);
    *(&v48 - 6) = v31;
    *(&v48 - 5) = v32;
    *(&v48 - 4) = v33;
    *(&v48 - 3) = v34;
    *(&v48 - 2) = (uint64_t)v18;
    uint64_t v55 = v31;
    uint64_t v56 = v32;
    uint64_t v57 = v33;
    uint64_t v58 = v34;
    uint64_t updated = type metadata accessor for TableViewListCore.UpdateBridgedState();
    MEMORY[0x1F4188790](updated);
    *(&v48 - 4) = v43;
    *(&v48 - 3) = (uint64_t)partial apply for closure #1 in ListRepresentable.makeViewProvider(context:);
    *(&v48 - 2) = (uint64_t)(&v48 - 8);
    AGGraphMutateAttribute();
  }
  uint64_t v44 = AGWeakAttributeGetAttribute();
  if (v44 != v41)
  {
    MEMORY[0x1F4188790](v44);
    *(&v48 - 6) = v31;
    *(&v48 - 5) = v32;
    *(&v48 - 4) = v33;
    *(&v48 - 3) = v34;
    *(&v48 - 2) = (uint64_t)v18;
    uint64_t v55 = v31;
    uint64_t v56 = v32;
    uint64_t v57 = v33;
    uint64_t v58 = v34;
    uint64_t v45 = type metadata accessor for TableViewListCore.ScrollViewProvider();
    MEMORY[0x1F4188790](v45);
    *(&v48 - 4) = v46;
    *(&v48 - 3) = (uint64_t)partial apply for closure #2 in ListRepresentable.makeViewProvider(context:);
    *(&v48 - 2) = (uint64_t)(&v48 - 8);
    AGGraphMutateAttribute();
  }
  return v18;
}

uint64_t ListRepresentable.updateViewProvider(_:context:)(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v77 = a1;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v65 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v64 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = type metadata accessor for ShadowListDataSource();
  uint64_t v66 = *(void *)(v11 - 8);
  uint64_t v67 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v62 = (uint64_t)&v60 - v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = a2[3];
  int v16 = *((unsigned __int8 *)a2 + 32);
  uint64_t v17 = (void *)a2[5];
  uint64_t v74 = a2[1];
  uint64_t v75 = v13;
  *(void *)&long long v93 = v13;
  *((void *)&v93 + 1) = v74;
  uint64_t v72 = v15;
  uint64_t v73 = v14;
  *(void *)&long long v94 = v14;
  *((void *)&v94 + 1) = v15;
  int v71 = v16;
  LOBYTE(v95) = v16;
  *((void *)&v95 + 1) = v17;
  swift_getWitnessTable();
  uint64_t v70 = type metadata accessor for PlatformViewRepresentableContext();
  PlatformViewRepresentableContext.environment.getter(v70, (uint64_t *)&v78);
  uint64_t v18 = *((void *)&v78 + 1);
  uint64_t v61 = v78;
  id v19 = (long long *)(v4 + *(int *)(a3 + 56));
  long long v20 = v19[5];
  long long v97 = v19[4];
  long long v98 = v20;
  v99[0] = v19[6];
  *(_OWORD *)((char *)v99 + 9) = *(long long *)((char *)v19 + 105);
  long long v21 = v19[1];
  long long v93 = *v19;
  long long v94 = v21;
  long long v22 = v19[3];
  long long v95 = v19[2];
  long long v96 = v22;
  uint64_t v68 = v7;
  uint64_t v63 = v10;
  UpdateCoalescingTableView.applyValues<A, B>(from:)((uint64_t)&v93);
  uint64_t v69 = a3;
  uint64_t v23 = *(int *)(a3 + 52);
  uint64_t v24 = v18;
  uint64_t v76 = v4;
  uint64_t v25 = v4 + v23;
  uint64_t v26 = (void *)MEMORY[0x1E4FBC8C8];
  id v27 = (char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x78);
  swift_beginAccess();
  type metadata accessor for Binding();
  uint64_t v28 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v27, v25, v28);
  swift_endAccess();
  type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey);
  uint64_t v29 = v61;
  swift_retain_n();
  if (v24)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v30 = v94;
  uint64_t v31 = (char *)v17 + *(void *)((*v26 & *v17) + 0x80);
  uint64_t v32 = *(void *)v31;
  uint64_t v33 = *((void *)v31 + 1);
  *(_OWORD *)uint64_t v31 = v93;
  v31[16] = v30;
  outlined consume of Binding<NavigationSplitViewColumn>?(v32, v33);
  *((unsigned char *)v17 + *(void *)((*v26 & *v17) + 0x90)) = *((unsigned char *)v19 + 42);
  uint64_t v34 = UITableViewListCoordinator.dragAndDropController.getter();
  uint64_t v35 = (uint64_t)v64;
  uint64_t v36 = v76;
  uint64_t v37 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v76, v68);
  uint64_t v38 = v62;
  ShadowListDataSource.init(_:)(v35, v37, v62);
  uint64_t v39 = (char *)v34 + *(void *)((*v26 & *v34) + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 40))(v39, v38, v67);
  swift_endAccess();

  type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key);
  swift_retain_n();
  if (v24)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  long long v40 = v93;
  uint64_t v41 = v94;
  uint64_t v42 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v42;
  *(_OWORD *)(v43 + 24) = v40;
  *(void *)(v43 + 40) = v41;
  swift_retain();
  outlined copy of AppIntentExecutor?(v40);
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v40);
  type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>, (uint64_t)&type metadata for EnvironmentValues.SafeAreaTransitionStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SafeAreaTransitionStateKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>, (uint64_t)&type metadata for EnvironmentValues.SafeAreaTransitionStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SafeAreaTransitionStateKey);
  swift_retain_n();
  if (v24)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t v44 = MEMORY[0x18C119DF0](&v93);
  uint64_t v45 = *((void *)&v93 + 1);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&v93);
  swift_release();
  swift_release();
  uint64_t v46 = v77;
  if (v44)
  {
    long long v47 = (uint64_t *)&v77[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_safeAreaTransitionState];
    *long long v47 = v44;
    v47[1] = v45;
    swift_unknownObjectRelease();
  }
  uint64_t v48 = v36 + *(int *)(v69 + 68);
  uint64_t v49 = *(void *)v48;
  char v50 = *(unsigned char *)(v48 + 8);
  LOBYTE(v48) = *(unsigned char *)(v48 + 9);
  uint64_t v51 = (void *)MEMORY[0x1E4FBC8C8];
  int v52 = (char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x98);
  *(void *)int v52 = v49;
  v52[8] = v50;
  v52[9] = v48;
  uint64_t v53 = *(void *)((*v51 & *v17) + 0xA0);
  uint64_t v54 = *(void *)((char *)v17 + v53);
  *(void *)&long long v78 = v29;
  *((void *)&v78 + 1) = v24;
  swift_retain();
  swift_retain();
  ScrollEnvironmentProperties.init(environment:)((uint64_t)&v78, (uint64_t)&v93);
  uint64_t v55 = v54 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v55, (uint64_t)&v78);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v93, v55);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)&v78);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v93);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v78);
  uint64_t v56 = *(void *)((char *)v17 + v53);
  *(void *)&long long v78 = v29;
  *((void *)&v78 + 1) = v24;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v93);
  uint64_t v57 = (_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
  long long v90 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
  long long v91 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
  v92[0] = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
  *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
  long long v86 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
  long long v87 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
  long long v88 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
  long long v89 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
  long long v82 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
  long long v83 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
  long long v84 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
  long long v85 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
  long long v78 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
  long long v79 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
  long long v80 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
  long long v81 = *(_OWORD *)(v56 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
  v57[12] = v99[6];
  v57[13] = v99[7];
  v57[14] = v100[0];
  *(_OWORD *)((char *)v57 + 233) = *(_OWORD *)((char *)v100 + 9);
  v57[8] = v99[2];
  v57[9] = v99[3];
  v57[10] = v99[4];
  v57[11] = v99[5];
  void v57[4] = v97;
  v57[5] = v98;
  v57[6] = v99[0];
  v57[7] = v99[1];
  *uint64_t v57 = v93;
  v57[1] = v94;
  v57[2] = v95;
  v57[3] = v96;
  ScrollViewHelper.didChangeMargins(from:)(&v78);
  *(void *)&long long v78 = v75;
  *((void *)&v78 + 1) = v74;
  *(void *)&long long v79 = v73;
  *((void *)&v79 + 1) = v72;
  LOBYTE(v80) = v71;
  *((void *)&v80 + 1) = v17;
  uint64_t v58 = specialized ReferenceFileDocumentConfiguration.document.getter();
  swift_retain();
  UITableViewListCoordinator.updateUITableView(_:to:transaction:)(v46, v36, v58);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t ListRepresentable.overrideSizeThatFits(_:in:platformView:)(uint64_t result, uint64_t *a2, char *a3, uint64_t a4)
{
  uint64_t v5 = v4 + *(int *)(a4 + 68);
  if (*(unsigned char *)(v5 + 9) == 1 && !(*(void *)v5 ^ 1 | *(unsigned __int8 *)(v5 + 8)))
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = *a2;
    char v9 = *((unsigned char *)a2 + 8);
    uint64_t v10 = a2[2];
    char v11 = *((unsigned char *)a2 + 24);
    _ProposedSize.width.getter();
    int v13 = v12;
    uint64_t v21 = v8;
    char v22 = v9;
    uint64_t v23 = v10;
    char v24 = v11;
    double result = _ProposedSize.height.getter();
    if ((v13 | v14))
    {
      char v15 = v14;
      int v16 = &a3[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize];
      if (a3[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize + 16])
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        AGGraphClearUpdate();
        specialized closure #1 in UpdateCoalescingTableView.idealSize()(a3, (double *)&v19);
        AGGraphSetUpdate();
        double result = swift_beginAccess();
        uint64_t v18 = v19;
        uint64_t v17 = v20;
        *(void *)int v16 = v19;
        *((void *)v16 + 1) = v17;
        unsigned char v16[16] = 0;
        if ((v13 & 1) == 0)
        {
LABEL_9:
          if (v15) {
            v7[1] = v17;
          }
          return result;
        }
      }
      else
      {
        uint64_t v18 = *(void *)v16;
        uint64_t v17 = *((void *)v16 + 1);
        if ((v13 & 1) == 0) {
          goto LABEL_9;
        }
      }
      *uint64_t v7 = v18;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t ListRepresentable._identifiedViewTree(in:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  objc_msgSend(a1, sel_layoutIfNeeded);
  id v4 = objc_msgSend(a1, sel_visibleCells);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewCell);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      uint64_t v19 = a2;
      uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v8 = 4;
      do
      {
        if ((v5 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x18C117680](v8 - 4, v5);
        }
        else {
          id v10 = *(id *)(v5 + 8 * v8);
        }
        char v11 = v10;
        a2 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        type metadata accessor for ListTableViewCell();
        uint64_t result = swift_dynamicCastClassUnconditional();
        int v13 = *(void **)(result + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
        if (!v13)
        {
          __break(1u);
          return result;
        }
        type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
        lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
        id v14 = v13;
        ViewRendererHost.preferenceValue<A>(_:)();

        outlined init with copy of _IdentifiedViewTree((uint64_t)v22, (uint64_t)v20);
        if (v21 == 2
          && (int8x16_t v15 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v20[2], v20[6]), vorrq_s8(v20[4], v20[8])), vorrq_s8(vorrq_s8(v20[3], v20[7]), vorrq_s8(v20[5], v20[9]))), vorrq_s8(v20[0], v20[1])), !*(void *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL))))
        {
          outlined destroy of _IdentifiedViewTree((uint64_t)v22);

          char v9 = v20;
        }
        else
        {
          outlined destroy of _IdentifiedViewTree((uint64_t)v20);
          outlined init with copy of _IdentifiedViewTree((uint64_t)v22, (uint64_t)v20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
          }
          unint64_t v17 = *((void *)v7 + 2);
          unint64_t v16 = *((void *)v7 + 3);
          if (v17 >= v16 >> 1) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v7);
          }
          *((void *)v7 + 2) = v17 + 1;
          outlined init with take of _IdentifiedViewTree((uint64_t)v20, (uint64_t)&v7[168 * v17 + 32]);

          char v9 = (int8x16_t *)v22;
        }
        outlined destroy of _IdentifiedViewTree((uint64_t)v9);
        ++v8;
      }
      while (a2 != v6);
      uint64_t result = swift_bridgeObjectRelease();
      a2 = v19;
      if (!*((void *)v7 + 2)) {
        goto LABEL_23;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    *(void *)(a2 + 152) = 0;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    char v18 = 2;
    *(_OWORD *)(a2 + 8) = 0u;
    goto LABEL_24;
  }
LABEL_19:
  char v18 = 1;
LABEL_24:
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 160) = v18;
  return result;
}

char *protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance ListRepresentable<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t result = ListRepresentable.makeViewProvider(context:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance ListRepresentable<A, B>(char **a1, uint64_t *a2, uint64_t a3)
{
  return ListRepresentable.updateViewProvider(_:context:)(*a1, a2, a3);
}

id protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance ListRepresentable<A, B>(void **a1)
{
  return specialized static ListRepresentable.dismantleViewProvider(_:coordinator:)(*a1);
}

id protocol witness for PlatformViewRepresentable.makeCoordinator() in conformance ListRepresentable<A, B>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = ListRepresentable.makeCoordinator()(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance ListRepresentable<A, B>@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return ListRepresentable._identifiedViewTree(in:)(*a1, a2);
}

uint64_t protocol witness for PlatformViewRepresentable.overrideSizeThatFits(_:in:platformView:) in conformance ListRepresentable<A, B>(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4)
{
  return ListRepresentable.overrideSizeThatFits(_:in:platformView:)(a1, a2, *a3, a4);
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ListUsesLegacySafeAreaPropagation()
{
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

__n128 __swift_memcpy121_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(long long *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t type metadata accessor for TableViewListCore.Configuration.TableViewConfiguration()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Equatable in TableViewListCore<A, B>.Configuration.TableViewConfiguration()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TableViewListCore()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for TableViewListCore()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableViewListCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(v7 + 64);
  uint64_t v11 = (v9 | 7) + *(void *)(v5 + 64);
  unsigned int v12 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v12 <= 7
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v10 + (v11 & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 121 <= 0x18)
  {
    uint64_t v16 = ~(v9 | 7);
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    char v18 = (void *)(((unint64_t)v4 + v11) & v16);
    unint64_t v19 = ((unint64_t)a2 + v11) & v16;
    uint64_t v20 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v23 = v8;
      char v24 = v18;
      int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v20 + v9 + 8) & v17, v23, v6);
      char v18 = v24;
      if (v25)
      {
LABEL_14:
        unint64_t v22 = (unint64_t)v18;
        memcpy(v18, (const void *)v19, v10);
LABEL_17:
        uint64_t v31 = (_OWORD *)(((v22 | 7) + v10) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v32 = (long long *)(((v19 | 7) + v10) & 0xFFFFFFFFFFFFFFF8);
        long long v33 = *v32;
        long long v34 = v32[1];
        long long v35 = v32[3];
        _OWORD v31[2] = v32[2];
        void v31[3] = v35;
        *uint64_t v31 = v33;
        v31[1] = v34;
        long long v36 = v32[4];
        long long v37 = v32[5];
        long long v38 = v32[6];
        *(_OWORD *)((char *)v31 + 105) = *(long long *)((char *)v32 + 105);
        v31[5] = v37;
        v31[6] = v38;
        unsigned char v31[4] = v36;
        return v4;
      }
    }
    else
    {
      uint64_t v21 = *v20;
      if ((unint64_t)*v20 >= 0xFFFFFFFF) {
        LODWORD(v21) = -1;
      }
      if (v21 != -1) {
        goto LABEL_14;
      }
    }
    *char v18 = *(void *)v19;
    uint64_t v26 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v20;
    uint64_t v27 = v9 + 8;
    uint64_t v28 = ((unint64_t)v26 + v9 + 8) & v17;
    unint64_t v29 = ((unint64_t)v20 + v27) & v17;
    char v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    unint64_t v22 = (unint64_t)v18;
    swift_retain();
    swift_retain();
    v30(v28, v29, v6);
    goto LABEL_17;
  }
  uint64_t v15 = *a2;
  uint64_t *v4 = *a2;
  long long v4 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  unsigned int v12 = (void *)((v11 + a1) & ~(v10 | 7));
  int v13 = (void *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = ~v10;
  uint64_t v15 = (v10 + 16) & ~v10;
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v15 + v16;
    if (v18 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unsigned int v12 = *v13;
    uint64_t v20 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v17;
    uint64_t v21 = v10 + 8;
    uint64_t v22 = ((unint64_t)v20 + v10 + 8) & v14;
    unint64_t v23 = ((unint64_t)v17 + v21) & v14;
    char v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v8);
    goto LABEL_8;
  }
  size_t v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  int v25 = (_OWORD *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (long long *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v27 = *v26;
  long long v28 = v26[1];
  long long v29 = v26[3];
  void v25[2] = v26[2];
  _OWORD v25[3] = v29;
  *int v25 = v27;
  v25[1] = v28;
  long long v30 = v26[4];
  long long v31 = v26[5];
  long long v32 = v26[6];
  *(_OWORD *)((char *)v25 + 105) = *(long long *)((char *)v26 + 105);
  v25[5] = v31;
  v25[6] = v32;
  v25[4] = v30;
  return a1;
}

uint64_t assignWithCopy for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  unsigned int v12 = (void *)((v11 + a1) & ~(v10 | 7));
  int v13 = (void *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = *(unsigned int *)(v9 + 84);
  size_t v15 = ((v10 + 16) & ~v10) + *(void *)(v9 + 64);
  uint64_t v16 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = ~v10;
  uint64_t v34 = v8;
  if ((v14 & 0x80000000) != 0)
  {
    uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    int v32 = v20(((unint64_t)v16 + v10 + 8) & ~v10, v14, v8);
    uint64_t v21 = v8;
    uint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v19 = v20(((unint64_t)v17 + v10 + 8) & ~v10, v14, v21);
    if (!v32)
    {
LABEL_5:
      if (!v19)
      {
        *unsigned int v12 = *v13;
        swift_retain();
        swift_release();
        *uint64_t v16 = *v17;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v16 + v10 + 8) & v33, ((unint64_t)v17 + v10 + 8) & v33, v34);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v16 + v10 + 8) & v33, v34);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    int v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v19)
  {
    *unsigned int v12 = *v13;
    *uint64_t v16 = *v17;
    uint64_t v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v22(((unint64_t)v16 + v10 + 8) & v33, ((unint64_t)v17 + v10 + 8) & v33, v34);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v12, v13, v15);
LABEL_12:
  unint64_t v23 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  long long v25 = *(_OWORD *)(v24 + 8);
  long long v26 = *(_OWORD *)(v24 + 24);
  *(_WORD *)(v23 + 40) = *(_WORD *)(v24 + 40);
  *(_OWORD *)(v23 + 24) = v26;
  *(_OWORD *)(v23 + 8) = v25;
  *(unsigned char *)(v23 + 42) = *(unsigned char *)(v24 + 42);
  *(void *)(v23 + 48) = *(void *)(v24 + 48);
  *(unsigned char *)(v23 + 56) = *(unsigned char *)(v24 + 56);
  uint64_t v27 = *(void *)(v24 + 64);
  *(unsigned char *)(v23 + 72) = *(unsigned char *)(v24 + 72);
  *(void *)(v23 + 64) = v27;
  uint64_t v28 = *(void *)(v24 + 80);
  *(unsigned char *)(v23 + 88) = *(unsigned char *)(v24 + 88);
  *(void *)(v23 + 80) = v28;
  uint64_t v29 = *(void *)(v24 + 96);
  *(unsigned char *)(v23 + 104) = *(unsigned char *)(v24 + 104);
  *(void *)(v23 + 96) = v29;
  uint64_t v30 = *(void *)(v24 + 112);
  *(unsigned char *)(v23 + 120) = *(unsigned char *)(v24 + 120);
  *(void *)(v23 + 112) = v30;
  return a1;
}

uint64_t initializeWithTake for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  unsigned int v12 = (void *)((v11 + a1) & ~(v10 | 7));
  int v13 = (void *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = ~v10;
  uint64_t v15 = (v10 + 16) & ~v10;
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v15 + v16;
    if (v18 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unsigned int v12 = *v13;
    uint64_t v20 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v20 + v10 + 8) & v14, ((unint64_t)v17 + v10 + 8) & v14, v8);
    goto LABEL_8;
  }
  size_t v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  uint64_t v21 = (_OWORD *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (long long *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = *v22;
  long long v24 = v22[1];
  long long v25 = v22[3];
  _OWORD v21[2] = v22[2];
  v21[3] = v25;
  *uint64_t v21 = v23;
  v21[1] = v24;
  long long v26 = v22[4];
  long long v27 = v22[5];
  long long v28 = v22[6];
  *(_OWORD *)((char *)v21 + 105) = *(long long *)((char *)v22 + 105);
  v21[5] = v27;
  v21[6] = v28;
  void v21[4] = v26;
  return a1;
}

uint64_t assignWithTake for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 24);
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  unsigned int v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  size_t v15 = ((v9 + 16) & ~v9) + *(void *)(v8 + 64);
  uint64_t v16 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v38 = (v10 + a1) & ~(v9 | 7);
    uint64_t v22 = v12;
    uint64_t v23 = v7;
    int v24 = v21(((unint64_t)v16 + v9 + 8) & v14, v13, v7);
    long long v25 = v21;
    int v37 = v24;
    uint64_t v18 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v13;
    uint64_t v17 = v23;
    uint64_t v27 = v23;
    unsigned int v12 = v22;
    uint64_t v11 = (void *)v38;
    int v20 = v25(((unint64_t)v18 + v9 + 8) & v14, v26, v27);
    if (!v37)
    {
LABEL_5:
      if (!v20)
      {
        void *v11 = *v12;
        swift_release();
        *uint64_t v16 = *v18;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v39, ((unint64_t)v18 + v9 + 8) & v39, v17);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v39, v17);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = v7;
    uint64_t v18 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = *v18;
    if (*v18 >= 0xFFFFFFFFuLL) {
      LODWORD(v19) = -1;
    }
    int v20 = v19 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v20)
  {
    void *v11 = *v12;
    *uint64_t v16 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v39, ((unint64_t)v18 + v9 + 8) & v39, v17);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  unint64_t v28 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  long long v30 = *(_OWORD *)(v29 + 8);
  long long v31 = *(_OWORD *)(v29 + 24);
  *(_WORD *)(v28 + 40) = *(_WORD *)(v29 + 40);
  *(_OWORD *)(v28 + 24) = v31;
  *(_OWORD *)(v28 + 8) = v30;
  *(unsigned char *)(v28 + 42) = *(unsigned char *)(v29 + 42);
  *(void *)(v28 + 48) = *(void *)(v29 + 48);
  *(unsigned char *)(v28 + 56) = *(unsigned char *)(v29 + 56);
  uint64_t v32 = *(void *)(v29 + 64);
  *(unsigned char *)(v28 + 72) = *(unsigned char *)(v29 + 72);
  *(void *)(v28 + 64) = v32;
  uint64_t v33 = *(void *)(v29 + 80);
  *(unsigned char *)(v28 + 88) = *(unsigned char *)(v29 + 88);
  *(void *)(v28 + 80) = v33;
  uint64_t v34 = *(void *)(v29 + 96);
  *(unsigned char *)(v28 + 104) = *(unsigned char *)(v29 + 104);
  *(void *)(v28 + 96) = v34;
  uint64_t v35 = *(void *)(v29 + 112);
  *(unsigned char *)(v28 + 120) = *(unsigned char *)(v29 + 120);
  *(void *)(v28 + 112) = v35;
  return a1;
}

uint64_t getEnumTagSinglePayload for TableViewListCore(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  if (v11 <= v6) {
    unsigned int v13 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v13 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v12 | 7;
  uint64_t v15 = (v12 | 7) + *(void *)(*(void *)(v4 - 8) + 64);
  if (v13 < a2)
  {
    unint64_t v16 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v12 + 16) & ~v12) + (v15 & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 121;
    unsigned int v17 = (a2 - v13 + 255) >> (8 * v16);
    if (v16 < 4) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      LODWORD(v19) = 4;
    }
    else {
      LODWORD(v19) = 2;
    }
    if (v18 < 0x100) {
      LODWORD(v19) = 1;
    }
    if (v18 >= 2) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = a1[v16];
        if (!a1[v16]) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v20 = *(unsigned __int16 *)&a1[v16];
        if (*(_WORD *)&a1[v16]) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18784E23CLL);
      case 4:
        int v20 = *(_DWORD *)&a1[v16];
        if (!v20) {
          break;
        }
LABEL_25:
        int v22 = (v20 - 1) << (8 * v16);
        if (v16 >= 4) {
          int v22 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
             + ((v12 + 16) & ~v12)
             + (v15 & ~v14)
             + 7) & 0xFFFFFFF8) == 0xFFFFFF88)
          int v23 = *a1;
        else {
          int v23 = *(_DWORD *)a1;
        }
        return v13 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v6 >= v11)
  {
    uint64_t v27 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48);
    return v27(a1, v6, v4);
  }
  else
  {
    int v24 = (unint64_t *)((((unint64_t)&a1[v15] & ~v14) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) != 0)
    {
      unsigned int v26 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v24 + v12 + 8) & ~v12);
    }
    else
    {
      unint64_t v25 = *v24;
      if (v25 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      unsigned int v26 = v25 + 1;
    }
    if (v26 >= 2) {
      return v26 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for TableViewListCore(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  unsigned int v13 = v12 - 1;
  if (v12 - 1 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v12 - 1;
  }
  size_t v15 = ((v11 + 16) & ~v11) + *(void *)(v9 + 64);
  uint64_t v16 = (v11 | 7) + *(void *)(*(void *)(v6 - 8) + 64);
  size_t v17 = ((v15 + (v16 & ~(v11 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 121;
  char v18 = 8 * v17;
  if (v14 >= a3)
  {
    int v22 = 0;
    if (v14 >= a2)
    {
LABEL_20:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 3:
          goto LABEL_77;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_36;
        default:
LABEL_36:
          if (a2)
          {
LABEL_37:
            if (v8 >= v13)
            {
              unint64_t v29 = *(void (**)(unsigned char *))(v7 + 56);
              v29(a1);
            }
            else
            {
              unint64_t v25 = (unsigned char *)((unint64_t)&a1[v16] & ~(v11 | 7));
              if (v13 >= a2)
              {
                if (a2 + 1 <= v12)
                {
                  if (a2 != -1)
                  {
                    uint64_t v32 = (void *)((unint64_t)(v25 + 15) & 0xFFFFFFFFFFFFFFF8);
                    if ((v10 & 0x80000000) != 0)
                    {
                      uint64_t v34 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
                      uint64_t v35 = a2 + 1;
                      v34(((unint64_t)v32 + v11 + 8) & ~v11, v35);
                    }
                    else
                    {
                      if (((a2 + 1) & 0x80000000) != 0) {
                        uint64_t v33 = a2 - 0x7FFFFFFF;
                      }
                      else {
                        uint64_t v33 = a2;
                      }
                      *uint64_t v32 = v33;
                    }
                  }
                }
                else
                {
                  if (v15 <= 3) {
                    int v30 = ~(-1 << (8 * v15));
                  }
                  else {
                    int v30 = -1;
                  }
                  if (v15)
                  {
                    int v27 = v30 & (a2 - v12);
                    if (v15 <= 3) {
                      int v31 = v15;
                    }
                    else {
                      int v31 = 4;
                    }
                    bzero(v25, v15);
                    switch(v31)
                    {
                      case 2:
LABEL_68:
                        *(_WORD *)unint64_t v25 = v27;
                        break;
                      case 3:
LABEL_69:
                        *(_WORD *)unint64_t v25 = v27;
                        void v25[2] = BYTE2(v27);
                        break;
                      case 4:
LABEL_70:
                        *(_DWORD *)unint64_t v25 = v27;
                        break;
                      default:
LABEL_63:
                        *unint64_t v25 = v27;
                        break;
                    }
                  }
                }
              }
              else
              {
                if (v15 <= 3) {
                  int v26 = ~(-1 << (8 * v15));
                }
                else {
                  int v26 = -1;
                }
                if (v15)
                {
                  int v27 = v26 & (a2 - v12);
                  if (v15 <= 3) {
                    int v28 = v15;
                  }
                  else {
                    int v28 = 4;
                  }
                  bzero(v25, v15);
                  switch(v28)
                  {
                    case 2:
                      goto LABEL_68;
                    case 3:
                      goto LABEL_69;
                    case 4:
                      goto LABEL_70;
                    default:
                      goto LABEL_63;
                  }
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v14 + 255) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v14 >= a2) {
      goto LABEL_20;
    }
  }
  if (v17 < 4) {
    unsigned int v23 = ((~v14 + a2) >> v18) + 1;
  }
  else {
    unsigned int v23 = 1;
  }
  if (v17 >= 4) {
    unsigned int v24 = ~v14 + a2;
  }
  else {
    unsigned int v24 = (~(_BYTE)v14 + a2);
  }
  bzero(a1, v17);
  if (v17 == 1) {
    *a1 = v24;
  }
  else {
    *(_DWORD *)a1 = v24;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v23;
      break;
    case 3:
LABEL_77:
      __break(1u);
      JUMPOUT(0x18784E624);
    case 4:
      *(_DWORD *)&a1[v17] = v23;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for TableViewListCore.Configuration.TableViewConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 121)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableViewListCore.Configuration.TableViewConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 121) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for TableViewListCore.Configuration()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in TableViewListCore<A, B>()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

uint64_t type metadata accessor for TableViewListCore.UpdateBridgedState()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableViewListCore.ScrollViewProvider()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation()
{
  unint64_t result = lazy protocol witness table cache variable for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation;
  if (!lazy protocol witness table cache variable for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation);
  }
  return result;
}

uint64_t type metadata accessor for TableViewListCore.MakeRepresentable()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableViewListCore.EnvironmentTransform()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static TableViewListCore._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static TableViewListCore._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for implicit closure #2 in static TableViewListCore._makeView(view:inputs:)()
{
  return implicit closure #2 in static TableViewListCore._makeView(view:inputs:)(*(_DWORD *)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for TableViewListCore.ScrollViewPreferenceProvider()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<[ContentScrollViewBox]>()
{
  if (!lazy cache variable for type metadata for Attribute<[ContentScrollViewBox]>)
  {
    type metadata accessor for Attribute<UInt32>(255, &lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[ContentScrollViewBox]>);
    }
  }
}

void *type metadata accessor for ListUsesLegacySafeAreaPropagation()
{
  return &unk_1ED45ED98;
}

uint64_t type metadata completion function for ListRepresentable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListRepresentable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(v7 + 64);
  uint64_t v11 = (v9 | 7) + *(void *)(v5 + 64);
  unsigned int v12 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v12 <= 7
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((((((v10 + (v11 & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 10 <= 0x18)
  {
    uint64_t v16 = ~(v9 | 7);
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    char v18 = (void *)(((unint64_t)v4 + v11) & v16);
    unint64_t v19 = ((unint64_t)a2 + v11) & v16;
    unsigned int v20 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v23 = v8;
      unsigned int v24 = v18;
      int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v20 + v9 + 8) & v17, v23, v6);
      char v18 = v24;
      if (v25)
      {
LABEL_14:
        unint64_t v22 = (unint64_t)v18;
        memcpy(v18, (const void *)v19, v10);
LABEL_17:
        unint64_t v31 = ((v22 | 7) + v10) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v32 = ((v19 | 7) + v10) & 0xFFFFFFFFFFFFFFF8;
        long long v33 = *(_OWORD *)v32;
        long long v34 = *(_OWORD *)(v32 + 16);
        long long v35 = *(_OWORD *)(v32 + 48);
        *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
        *(_OWORD *)(v31 + 48) = v35;
        *(_OWORD *)unint64_t v31 = v33;
        *(_OWORD *)(v31 + 16) = v34;
        long long v36 = *(_OWORD *)(v32 + 64);
        long long v37 = *(_OWORD *)(v32 + 80);
        long long v38 = *(_OWORD *)(v32 + 96);
        *(_OWORD *)(v31 + 105) = *(_OWORD *)(v32 + 105);
        *(_OWORD *)(v31 + 80) = v37;
        *(_OWORD *)(v31 + 96) = v38;
        *(_OWORD *)(v31 + 64) = v36;
        *(void *)(v31 + 124) = *(void *)(v32 + 124);
        uint64_t v39 = (void *)((v31 + 135) & 0xFFFFFFFFFFFFFFFCLL);
        long long v40 = (void *)((v32 + 135) & 0xFFFFFFFFFFFFFFFCLL);
        *uint64_t v39 = *v40;
        unint64_t v41 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v42 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v43 = *(void *)v41;
        *(_WORD *)(v42 + 8) = *(_WORD *)(v41 + 8);
        *(void *)unint64_t v42 = v43;
        return v4;
      }
    }
    else
    {
      uint64_t v21 = *v20;
      if ((unint64_t)*v20 >= 0xFFFFFFFF) {
        LODWORD(v21) = -1;
      }
      if (v21 != -1) {
        goto LABEL_14;
      }
    }
    *char v18 = *(void *)v19;
    int v26 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v26 = *v20;
    uint64_t v27 = v9 + 8;
    uint64_t v28 = ((unint64_t)v26 + v9 + 8) & v17;
    unint64_t v29 = ((unint64_t)v20 + v27) & v17;
    int v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    unint64_t v22 = (unint64_t)v18;
    swift_retain();
    swift_retain();
    v30(v28, v29, v6);
    goto LABEL_17;
  }
  uint64_t v15 = *a2;
  uint64_t *v4 = *a2;
  BOOL v4 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  unsigned int v12 = (void *)((v11 + a1) & ~(v10 | 7));
  unsigned int v13 = (void *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = ~v10;
  uint64_t v15 = (v10 + 16) & ~v10;
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v15 + v16;
    if (v18 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unsigned int v12 = *v13;
    unsigned int v20 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v20 = *v17;
    uint64_t v21 = v10 + 8;
    uint64_t v22 = ((unint64_t)v20 + v10 + 8) & v14;
    unint64_t v23 = ((unint64_t)v17 + v21) & v14;
    unsigned int v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v8);
    goto LABEL_8;
  }
  size_t v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  unint64_t v25 = ((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v27 = *(_OWORD *)v26;
  long long v28 = *(_OWORD *)(v26 + 16);
  long long v29 = *(_OWORD *)(v26 + 48);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)(v26 + 32);
  *(_OWORD *)(v25 + 48) = v29;
  *(_OWORD *)unint64_t v25 = v27;
  *(_OWORD *)(v25 + 16) = v28;
  long long v30 = *(_OWORD *)(v26 + 64);
  long long v31 = *(_OWORD *)(v26 + 80);
  long long v32 = *(_OWORD *)(v26 + 96);
  *(_OWORD *)(v25 + 105) = *(_OWORD *)(v26 + 105);
  *(_OWORD *)(v25 + 80) = v31;
  *(_OWORD *)(v25 + 96) = v32;
  *(_OWORD *)(v25 + 64) = v30;
  *(void *)(v25 + 124) = *(void *)(v26 + 124);
  long long v33 = (void *)((v25 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  long long v34 = (void *)((v26 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v33 = *v34;
  unint64_t v35 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = *(void *)v35;
  *(_WORD *)(v36 + 8) = *(_WORD *)(v35 + 8);
  *(void *)unint64_t v36 = v37;
  return a1;
}

uint64_t assignWithCopy for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  unsigned int v12 = (void *)((v11 + a1) & ~(v10 | 7));
  unsigned int v13 = (void *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = *(unsigned int *)(v9 + 84);
  size_t v15 = ((v10 + 16) & ~v10) + *(void *)(v9 + 64);
  uint64_t v16 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = ~v10;
  uint64_t v39 = v8;
  if ((v14 & 0x80000000) != 0)
  {
    unsigned int v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    int v37 = v20(((unint64_t)v16 + v10 + 8) & ~v10, v14, v8);
    uint64_t v21 = v8;
    uint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v19 = v20(((unint64_t)v17 + v10 + 8) & ~v10, v14, v21);
    if (!v37)
    {
LABEL_5:
      if (!v19)
      {
        *unsigned int v12 = *v13;
        swift_retain();
        swift_release();
        *uint64_t v16 = *v17;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v16 + v10 + 8) & v38, ((unint64_t)v17 + v10 + 8) & v38, v39);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v16 + v10 + 8) & v38, v39);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    int v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v19)
  {
    *unsigned int v12 = *v13;
    *uint64_t v16 = *v17;
    uint64_t v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v22(((unint64_t)v16 + v10 + 8) & v38, ((unint64_t)v17 + v10 + 8) & v38, v39);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v12, v13, v15);
LABEL_12:
  unint64_t v23 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  long long v25 = *(_OWORD *)(v24 + 8);
  long long v26 = *(_OWORD *)(v24 + 24);
  *(_WORD *)(v23 + 40) = *(_WORD *)(v24 + 40);
  *(_OWORD *)(v23 + 24) = v26;
  *(_OWORD *)(v23 + 8) = v25;
  *(unsigned char *)(v23 + 42) = *(unsigned char *)(v24 + 42);
  *(void *)(v23 + 48) = *(void *)(v24 + 48);
  *(unsigned char *)(v23 + 56) = *(unsigned char *)(v24 + 56);
  uint64_t v27 = *(void *)(v24 + 64);
  *(unsigned char *)(v23 + 72) = *(unsigned char *)(v24 + 72);
  *(void *)(v23 + 64) = v27;
  uint64_t v28 = *(void *)(v24 + 80);
  *(unsigned char *)(v23 + 88) = *(unsigned char *)(v24 + 88);
  *(void *)(v23 + 80) = v28;
  uint64_t v29 = *(void *)(v24 + 96);
  *(unsigned char *)(v23 + 104) = *(unsigned char *)(v24 + 104);
  *(void *)(v23 + 96) = v29;
  uint64_t v30 = *(void *)(v24 + 112);
  *(unsigned char *)(v23 + 120) = *(unsigned char *)(v24 + 120);
  *(void *)(v23 + 112) = v30;
  *(_DWORD *)(v23 + 124) = *(_DWORD *)(v24 + 124);
  *(_DWORD *)(v23 + 128) = *(_DWORD *)(v24 + 128);
  long long v31 = (_DWORD *)((v23 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  long long v32 = (_DWORD *)((v24 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v31 = *v32;
  v31[1] = v32[1];
  unint64_t v33 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = *(void *)v33;
  *(_WORD *)(v34 + 8) = *(_WORD *)(v33 + 8);
  *(void *)unint64_t v34 = v35;
  return a1;
}

uint64_t initializeWithTake for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  unsigned int v12 = (void *)((v11 + a1) & ~(v10 | 7));
  unsigned int v13 = (void *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = ~v10;
  uint64_t v15 = (v10 + 16) & ~v10;
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v15 + v16;
    if (v18 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unsigned int v12 = *v13;
    unsigned int v20 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v20 + v10 + 8) & v14, ((unint64_t)v17 + v10 + 8) & v14, v8);
    goto LABEL_8;
  }
  size_t v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  unint64_t v21 = ((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = *(_OWORD *)v22;
  long long v24 = *(_OWORD *)(v22 + 16);
  long long v25 = *(_OWORD *)(v22 + 48);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
  *(_OWORD *)(v21 + 48) = v25;
  *(_OWORD *)unint64_t v21 = v23;
  *(_OWORD *)(v21 + 16) = v24;
  long long v26 = *(_OWORD *)(v22 + 64);
  long long v27 = *(_OWORD *)(v22 + 80);
  long long v28 = *(_OWORD *)(v22 + 96);
  *(_OWORD *)(v21 + 105) = *(_OWORD *)(v22 + 105);
  *(_OWORD *)(v21 + 80) = v27;
  *(_OWORD *)(v21 + 96) = v28;
  *(_OWORD *)(v21 + 64) = v26;
  *(void *)(v21 + 124) = *(void *)(v22 + 124);
  uint64_t v29 = (void *)((v21 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v30 = (void *)((v22 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v29 = *v30;
  unint64_t v31 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v31;
  *(_WORD *)(v32 + 8) = *(_WORD *)(v31 + 8);
  *(void *)unint64_t v32 = v33;
  return a1;
}

uint64_t assignWithTake for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 24);
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  unsigned int v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  size_t v15 = ((v9 + 16) & ~v9) + *(void *)(v8 + 64);
  uint64_t v16 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    unint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v43 = (v10 + a1) & ~(v9 | 7);
    unint64_t v22 = v12;
    uint64_t v23 = v7;
    int v24 = v21(((unint64_t)v16 + v9 + 8) & v14, v13, v7);
    long long v25 = v21;
    int v42 = v24;
    uint64_t v18 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v13;
    uint64_t v17 = v23;
    uint64_t v27 = v23;
    unsigned int v12 = v22;
    uint64_t v11 = (void *)v43;
    int v20 = v25(((unint64_t)v18 + v9 + 8) & v14, v26, v27);
    if (!v42)
    {
LABEL_5:
      if (!v20)
      {
        void *v11 = *v12;
        swift_release();
        *uint64_t v16 = *v18;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v44, ((unint64_t)v18 + v9 + 8) & v44, v17);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v44, v17);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = v7;
    uint64_t v18 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = *v18;
    if (*v18 >= 0xFFFFFFFFuLL) {
      LODWORD(v19) = -1;
    }
    int v20 = v19 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v20)
  {
    void *v11 = *v12;
    *uint64_t v16 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v44, ((unint64_t)v18 + v9 + 8) & v44, v17);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  unint64_t v28 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  long long v30 = *(_OWORD *)(v29 + 8);
  long long v31 = *(_OWORD *)(v29 + 24);
  *(_WORD *)(v28 + 40) = *(_WORD *)(v29 + 40);
  *(_OWORD *)(v28 + 24) = v31;
  *(_OWORD *)(v28 + 8) = v30;
  *(unsigned char *)(v28 + 42) = *(unsigned char *)(v29 + 42);
  *(void *)(v28 + 48) = *(void *)(v29 + 48);
  *(unsigned char *)(v28 + 56) = *(unsigned char *)(v29 + 56);
  uint64_t v32 = *(void *)(v29 + 64);
  *(unsigned char *)(v28 + 72) = *(unsigned char *)(v29 + 72);
  *(void *)(v28 + 64) = v32;
  uint64_t v33 = *(void *)(v29 + 80);
  *(unsigned char *)(v28 + 88) = *(unsigned char *)(v29 + 88);
  *(void *)(v28 + 80) = v33;
  uint64_t v34 = *(void *)(v29 + 96);
  *(unsigned char *)(v28 + 104) = *(unsigned char *)(v29 + 104);
  *(void *)(v28 + 96) = v34;
  uint64_t v35 = *(void *)(v29 + 112);
  *(unsigned char *)(v28 + 120) = *(unsigned char *)(v29 + 120);
  *(void *)(v28 + 112) = v35;
  *(_DWORD *)(v28 + 124) = *(_DWORD *)(v29 + 124);
  *(_DWORD *)(v28 + 128) = *(_DWORD *)(v29 + 128);
  unint64_t v36 = (_DWORD *)((v28 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  int v37 = (_DWORD *)((v29 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v36 = *v37;
  v36[1] = v37[1];
  unint64_t v38 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = *(void *)v38;
  *(_WORD *)(v39 + 8) = *(_WORD *)(v38 + 8);
  *(void *)unint64_t v39 = v40;
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRepresentable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  if (v11 <= v6) {
    unsigned int v13 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v13 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v12 | 7;
  uint64_t v15 = (v12 | 7) + *(void *)(*(void *)(v4 - 8) + 64);
  if (v13 < a2)
  {
    unint64_t v16 = ((((((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v12 + 16) & ~v12) + (v15 & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 135) & 0xFFFFFFFFFFFFFFFCLL)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 10;
    unsigned int v17 = (a2 - v13 + 0xFFFF) >> (8
                                * (((((((*(unsigned char *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
                                       + ((v12 + 16) & ~(_BYTE)v12)
                                       + (v15 & ~(_BYTE)v14)
                                       + 7) & 0xF8)
                                     - 121) & 0xFC)
                                   + 15) & 0xF8)
                                 + 10));
    if (v16 <= 3) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      LODWORD(v19) = 4;
    }
    else {
      LODWORD(v19) = 2;
    }
    if (v18 < 0x100) {
      LODWORD(v19) = 1;
    }
    if (v18 >= 2) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v16);
        if (!*((unsigned char *)a1 + v16)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v16);
        if (*(unsigned __int16 *)((char *)a1 + v16)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18784FBA8);
      case 4:
        int v20 = *(_DWORD *)((char *)a1 + v16);
        if (!v20) {
          break;
        }
LABEL_25:
        int v22 = (v20 - 1) << (8
                          * (((((((*(unsigned char *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
                                 + ((v12 + 16) & ~(_BYTE)v12)
                                 + (v15 & ~(_BYTE)v14)
                                 + 7) & 0xF8)
                               - 121) & 0xFC)
                             + 15) & 0xF8)
                           + 10));
        if (v16 <= 3)
        {
          int v23 = *a1;
        }
        else
        {
          int v22 = 0;
          int v23 = *(_DWORD *)a1;
        }
        return v13 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v6 >= v11)
  {
    uint64_t v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
    return v27(a1, v6, v4);
  }
  else
  {
    int v24 = (unint64_t *)(((((unint64_t)a1 + v15) & ~v14) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) != 0)
    {
      unsigned int v26 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v24 + v12 + 8) & ~v12);
    }
    else
    {
      unint64_t v25 = *v24;
      if (v25 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      unsigned int v26 = v25 + 1;
    }
    if (v26 >= 2) {
      return v26 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for ListRepresentable(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  unsigned int v13 = v12 - 1;
  if (v12 - 1 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v12 - 1;
  }
  size_t v15 = ((v11 + 16) & ~v11) + *(void *)(v9 + 64);
  uint64_t v16 = (v11 | 7) + *(void *)(*(void *)(v6 - 8) + 64);
  size_t v17 = ((((((v15 + (v16 & ~(v11 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 10;
  char v18 = 8 * (((((((v15 + (v16 & ~(v11 | 7)) + 7) & 0xF8) - 121) & 0xFC) + 15) & 0xF8) + 10);
  if (v14 >= a3)
  {
    int v22 = 0;
    if (v14 >= a2)
    {
LABEL_20:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_74;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v8 >= v13)
            {
              long long v30 = *(void (**)(unsigned char *))(v7 + 56);
              v30(a1);
            }
            else
            {
              unsigned int v26 = (unsigned char *)((unint64_t)&a1[v16] & ~(v11 | 7));
              if (v13 >= a2)
              {
                if (a2 + 1 <= v12)
                {
                  if (a2 != -1)
                  {
                    uint64_t v33 = (void *)((unint64_t)(v26 + 15) & 0xFFFFFFFFFFFFFFF8);
                    if ((v10 & 0x80000000) != 0)
                    {
                      uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
                      uint64_t v36 = a2 + 1;
                      v35(((unint64_t)v33 + v11 + 8) & ~v11, v36);
                    }
                    else
                    {
                      if (((a2 + 1) & 0x80000000) != 0) {
                        uint64_t v34 = a2 - 0x7FFFFFFF;
                      }
                      else {
                        uint64_t v34 = a2;
                      }
                      *uint64_t v33 = v34;
                    }
                  }
                }
                else
                {
                  if (v15 <= 3) {
                    int v31 = ~(-1 << (8 * v15));
                  }
                  else {
                    int v31 = -1;
                  }
                  if (v15)
                  {
                    int v28 = v31 & (a2 - v12);
                    if (v15 <= 3) {
                      int v32 = v15;
                    }
                    else {
                      int v32 = 4;
                    }
                    bzero(v26, v15);
                    switch(v32)
                    {
                      case 2:
LABEL_65:
                        *(_WORD *)unsigned int v26 = v28;
                        break;
                      case 3:
LABEL_66:
                        *(_WORD *)unsigned int v26 = v28;
                        _OWORD v26[2] = BYTE2(v28);
                        break;
                      case 4:
LABEL_67:
                        *(_DWORD *)unsigned int v26 = v28;
                        break;
                      default:
LABEL_60:
                        *unsigned int v26 = v28;
                        break;
                    }
                  }
                }
              }
              else
              {
                if (v15 <= 3) {
                  int v27 = ~(-1 << (8 * v15));
                }
                else {
                  int v27 = -1;
                }
                if (v15)
                {
                  int v28 = v27 & (a2 - v12);
                  if (v15 <= 3) {
                    int v29 = v15;
                  }
                  else {
                    int v29 = 4;
                  }
                  bzero(v26, v15);
                  switch(v29)
                  {
                    case 2:
                      goto LABEL_65;
                    case 3:
                      goto LABEL_66;
                    case 4:
                      goto LABEL_67;
                    default:
                      goto LABEL_60;
                  }
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v14 + 0xFFFF) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v14 >= a2) {
      goto LABEL_20;
    }
  }
  unsigned int v23 = ~v14 + a2;
  unsigned int v24 = v23 >> v18;
  bzero(a1, v17);
  if (v17 <= 3) {
    int v25 = v24 + 1;
  }
  else {
    int v25 = 1;
  }
  if (v17 > 3) {
    *(_DWORD *)a1 = v23;
  }
  else {
    *(_WORD *)a1 = v23;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v25;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v25;
      break;
    case 3:
LABEL_74:
      __break(1u);
      JUMPOUT(0x18784FF98);
    case 4:
      *(_DWORD *)&a1[v17] = v25;
      break;
    default:
      return;
  }
}

_DWORD *assignWithCopy for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

_DWORD *initializeWithTake for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

_DWORD *assignWithTake for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in TableViewListCore<A, B>.ScrollViewPreferenceProvider()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableViewListCore<A, B>.EnvironmentTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableViewListCore<A, B>.MakeRepresentable()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableViewListCore<A, B>.ScrollViewProvider()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableViewListCore<A, B>.UpdateBridgedState()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with take of ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

id specialized static ListRepresentable.dismantleViewProvider(_:coordinator:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_refreshControl);
  if (v2)
  {
    unsigned int v3 = v2;
    type metadata accessor for UIKitRefreshControl();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      if (*(void *)(v4 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask))
      {
        uint64_t v6 = swift_retain();
        MEMORY[0x18C115EE0](v6, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
        swift_release();
      }
      objc_msgSend(v5, sel_endRefreshing);
    }
  }

  return objc_msgSend(a1, sel_setRefreshControl_, 0);
}

uint64_t sub_187850330()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187850368()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

void type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t partial apply for closure #2 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of TableColumnCollection.Backing(v1, (uint64_t)v13);
  if (v14)
  {
    uint64_t v3 = *(void *)(*(void *)&v13[0] + 16);
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      TableColumnCollection.subscript.getter(0, a1);
      uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
    }
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v13, (uint64_t)v10);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    if (v8) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = type metadata accessor for TableColumnCollection.Entry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  char v9;
  void (*v10)(unsigned char *, uint64_t);
  uint64_t v11;
  void (*v13)(unsigned char *, void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char v18[32];

  id v2 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v18[-v7];
  type metadata accessor for AttributedString.Runs();
  lazy protocol witness table accessor for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
  uint64_t v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  unsigned int v10 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if (v9)
  {
    v10(v8, v2);
    uint64_t v11 = type metadata accessor for AttributedString.Runs.Run();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    unsigned int v13 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    size_t v15 = v14;
    uint64_t v16 = type metadata accessor for AttributedString.Runs.Run();
    size_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, v15, v16);
    v13(v18, 0);
    v10(v8, v2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
  }
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Dictionary.startIndex.getter();
  if (v6) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 96) = -1;
  }
  else
  {
    uint64_t v7 = specialized Dictionary.subscript.getter((uint64_t)v8, result, v5, 0, a1);
    *(void *)a2 = v7;
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v8, a2 + 8);
    return outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v7, (uint64_t (*)(void))type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation));
  }
  return result;
}

{
  uint64_t result;
  int v5;
  char v6;
  uint64_t vars8;

  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v6) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    return specialized Set.subscript.getter(result, v5, a1, a2);
  }
  return result;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (!*(void *)(a1 + 16))
    {
LABEL_4:
      uint64_t v7 = type metadata accessor for PlatformItemList.Item();
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
      uint64_t v9 = v7;
      uint64_t v10 = a3;
      uint64_t v11 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (!WeakValue || !*(void *)(*(void *)WeakValue + 16)) {
      goto LABEL_4;
    }
  }
  PlatformItemCollection.subscript.getter(0, a1, a2 & 1, a3);
  uint64_t v12 = type metadata accessor for PlatformItemList.Item();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v9 = v12;
  uint64_t v10 = a3;
  uint64_t v11 = 0;
LABEL_7:

  return v8(v10, v11, 1, v9);
}

unint64_t specialized Collection.first.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x18C117680](0, v2);
        uint64_t v4 = v5;
      }
      else
      {
        if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_13:
          __break(1u);
          return result;
        }
        uint64_t v4 = *(void *)(v2 + 32);
        uint64_t v5 = swift_retain();
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v4 + 120))(&v7, v5);
      uint64_t result = swift_release();
      if (v8)
      {
        outlined init with take of Decodable & Encodable & Hashable(&v7, (uint64_t)v9);
        return outlined init with take of Decodable & Encodable & Hashable(v9, a2);
      }
      goto LABEL_13;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of OptionalBinaryInteger((long long *)a1, (uint64_t)v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of LocationBasedSensoryFeedback?(a1, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10)
    {
      unint64_t v11 = v9;
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v3;
      uint64_t v15 = *v4;
      uint64_t *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v13 = v15;
      }
      outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v13 + 56) + 40 * v11), (uint64_t)v16);
      specialized _NativeDictionary._delete(at:)(v11, v13);
      uint64_t *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v16, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CommandOperation?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CommandOperation();
  double v10 = MEMORY[0x1F4188790](v9);
  char v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, double))(v13 + 48))(a1, 1, v10) == 1)
  {
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)(a1, (uint64_t (*)(void))type metadata accessor for CommandOperation?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, (uint64_t)v8);

    return outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CommandOperation?);
  }
  else
  {
    outlined init with take of WeakBox<PlatformDocument>(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v17;

    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v7;

    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC840] + 8;
    _sypSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, v8);

    return _sypSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 16))
  {
    outlined init with take of ConfirmationDialog(a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    _sypSgWOhTm_1(a1, &lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of ConfirmationDialog(*(void *)(v11 + 56) + 184 * v9, (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return _sypSgWOhTm_1((uint64_t)v14, &lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;

  uint64_t v3 = v2;
  if (*(void *)(a1 + 8) == 1)
  {
    _sypSgWOhTm_1(a1, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    unsigned int v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v6)
    {
      unint64_t v7 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v9 = *v2;
      int v22 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        unint64_t v9 = v22;
      }
      char v10 = *(void *)(v9 + 56) + 120 * v7;
      uint64_t v12 = *(_OWORD *)(v10 + 32);
      uint64_t v11 = *(_OWORD *)(v10 + 48);
      uint64_t v13 = *(_OWORD *)(v10 + 16);
      unsigned int v24 = *(_OWORD *)v10;
      int v25 = v13;
      unsigned int v26 = v12;
      int v27 = v11;
      uint64_t v14 = *(_OWORD *)(v10 + 64);
      char v15 = *(_OWORD *)(v10 + 80);
      uint64_t v16 = *(_OWORD *)(v10 + 96);
      int v31 = *(void *)(v10 + 112);
      int v29 = v15;
      long long v30 = v16;
      int v28 = v14;
      specialized _NativeDictionary._delete(at:)(v7, v9);
      *uint64_t v3 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      unsigned int v24 = xmmword_18834BB90;
      int v25 = 0u;
      unsigned int v26 = 0u;
      int v27 = 0u;
      int v28 = 0u;
      int v29 = 0u;
      long long v30 = 0u;
      int v31 = 0;
    }
    return _sypSgWOhTm_1((uint64_t)&v24, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  }
  else
  {
    uint64_t v17 = *(_OWORD *)(a1 + 80);
    int v28 = *(_OWORD *)(a1 + 64);
    int v29 = v17;
    long long v30 = *(_OWORD *)(a1 + 96);
    int v31 = *(void *)(a1 + 112);
    char v18 = *(_OWORD *)(a1 + 16);
    unsigned int v24 = *(_OWORD *)a1;
    int v25 = v18;
    unsigned int v19 = *(_OWORD *)(a1 + 48);
    unsigned int v26 = *(_OWORD *)(a1 + 32);
    int v27 = v19;
    unsigned int v20 = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v23 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v24, a2, v20);
    *uint64_t v2 = v23;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC840];
    _sypSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v9)
    {
      unint64_t v10 = v8;
      char v11 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v2;
      uint64_t v14 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v11 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v12 = v14;
      }
      outlined init with take of Any((_OWORD *)(*(void *)(v12 + 56) + 32 * v10), v15);
      specialized _NativeDictionary._delete(at:)(v10, v12);
      *uint64_t v3 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    return _sypSgWOhTm_1((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 264) == 255)
  {
    _sypSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return _sypSgWOhTm_1((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry);
  }
  else
  {
    outlined init with take of TabEntry(a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
  }
  else
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) == 0) {
      return result;
    }
    unint64_t v9 = result;
    int v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!v10)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *uint64_t v3 = v11;
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t SwiftUIGlue.isInstantiated(graph:)()
{
  uint64_t v0 = AGGraphRef.viewGraph()();
  swift_beginAccess();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 128);
  swift_release();
  return v1;
}

uint64_t SwiftUIGlue.makeDefaultLayoutComputer(graph:)()
{
  AGGraphRef.viewGraph()();
  uint64_t v0 = ViewGraph.$defaultLayoutComputer.getter();
  swift_release();

  return MEMORY[0x1F41011B0](v0);
}

uint64_t SwiftUIGlue.startChildGeometries(_:)()
{
  swift_retain();
  CoreGlue.StartChildGeometriesParameters.origin.getter();
  lazy protocol witness table accessor for type BeginChildGeometries and conformance BeginChildGeometries();
  uint64_t v0 = static ProtobufEncoder.encoding<A>(_:)();
  unint64_t v2 = v1;
  swift_release();
  swift_retain();
  uint64_t v3 = (void *)LayoutTrace.Recorder.graph.getter();
  swift_release();
  static AGNamedTraceEventID.childGeometries.getter();
  outlined copy of Data._Representation(v0, v2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  AGGraphAddNamedTraceEvent();

  outlined consume of Data._Representation(v0, v2);
  return outlined consume of Data._Representation(v0, v2);
}

uint64_t SwiftUIGlue.endChildGeometries(_:)()
{
  swift_retain();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EndChildGeometries.init(_:)(v0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type EndChildGeometries and conformance EndChildGeometries();
  uint64_t v1 = static ProtobufEncoder.encoding<A>(_:)();
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v4 = (void *)LayoutTrace.Recorder.graph.getter();
  swift_release();
  static AGNamedTraceEventID.childGeometries.getter();
  outlined copy of Data._Representation(v1, v3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  AGGraphAddNamedTraceEvent();

  outlined consume of Data._Representation(v1, v3);
  return outlined consume of Data._Representation(v1, v3);
}

uint64_t SwiftUIGlue.addDisplayListTreeValue(outputs:)()
{
  uint64_t v0 = _ViewOutputs.subscript.getter();
  if ((v0 & 0x100000000) != 0)
  {
    __break(1u);
    return MEMORY[0x1F410B1E0](v0, v1, v2, v3);
  }
  uint64_t v4 = v0;
  uint64_t result = AGSubgraphShouldRecordTree();
  if (result)
  {
    uint64_t v1 = MEMORY[0x1E4F3F4D0];
    unint64_t v2 = "displayList";
    uint64_t v0 = v4;
    uint64_t v3 = 0;
    return MEMORY[0x1F410B1E0](v0, v1, v2, v3);
  }
  return result;
}

uint64_t SwiftUIGlue.updateData(_:value:)()
{
  AGTreeValueGetValue();
  uint64_t v0 = MEMORY[0x1E4F3F4D0];
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(void *)Value;
  __int16 v3 = *(_WORD *)(Value + 8);
  char v4 = *(unsigned char *)(Value + 10);
  uint64_t v9 = v0;
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = v4;
  swift_bridgeObjectRetain();
  return specialized Dictionary.subscript.setter((uint64_t)&v6, 8);
}

void closure #1 in SwiftUIGlue.defaultOpenURLAction(env:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  __int16 v7 = (void *)EnvironmentValues.sceneSession.getter();
  if (v7
    && (char v8 = v7, v9 = objc_msgSend(v7, sel_scene, v18, v19), v8, v9))
  {
    URL._bridgeToObjectiveC()(v10);
    Class isa = v11;
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    unsigned int v20 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    int v21 = &block_descriptor_10;
    uint64_t v13 = _Block_copy(&v18);
    swift_retain();
    swift_release();
    objc_msgSend(v9, sel_openURL_options_completionHandler_, isa, 0, v13);
    _Block_release(v13);
  }
  else
  {
    id v14 = objc_msgSend(self, sel_sharedApplication);
    URL._bridgeToObjectiveC()(v15);
    id v9 = v16;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    type metadata accessor for UIApplicationOpenExternalURLOptionsKey(0);
    lazy protocol witness table accessor for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    unsigned int v20 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    int v21 = &block_descriptor_7;
    uint64_t v17 = _Block_copy(&v18);
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_openURL_options_completionHandler_, v9, isa, v17);
    _Block_release(v17);
  }
}

void closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F224A0]), sel_init);
  objc_msgSend(v25, sel_setSensitive_, 1);
  id v8 = objc_msgSend(self, sel_sharedApplication);
  id v9 = objc_msgSend(v8, sel_connectedScenes);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
  lazy protocol witness table accessor for type UIScene and conformance NSObject();
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = (void *)specialized Collection.first.getter(v10, &lazy cache variable for type metadata for UIScene);
  swift_bridgeObjectRelease();
  if (v11)
  {
    id v12 = objc_msgSend(v11, sel__currentOpenApplicationEndpoint);
  }
  else
  {
    id v12 = 0;
  }
  objc_msgSend(v25, sel_setTargetConnectionEndpoint_, v12, v24);

  id v13 = objc_msgSend(self, sel_defaultWorkspace);
  if (v13)
  {
    char v15 = v13;
    URL._bridgeToObjectiveC()(v14);
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v19 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19 + v18, (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    unsigned int v20 = (uint64_t *)(v19 + ((v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
    *unsigned int v20 = v24;
    v20[1] = a3;
    aBlock[4] = partial apply for closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction();
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_7;
    int v21 = _Block_copy(aBlock);
    id v22 = v25;
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_openURL_configuration_completionHandler_, v17, v22, v21);

    _Block_release(v21);
  }
  else
  {
    id v23 = v25;
  }
}

uint64_t closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(BOOL))
{
  if (a2)
  {
    MEMORY[0x1F4188790](a1);
    id v6 = a2;
    static Log.internalWarning(_:)();
  }
  return a4(a2 == 0);
}

uint64_t implicit closure #1 in closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()()
{
  _StringGuts.grow(_:)(42);
  v0._object = (void *)0x800000018832A9A0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x3A726F727245202ELL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  return 0;
}

id SwiftUIGlue.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

Swift::Bool_optional __swiftcall SwiftUIGlue2.isStatusBarHidden()()
{
  id v0 = objc_msgSend(self, sel_sharedApplication);
  id v1 = objc_msgSend(v0, sel_connectedScenes);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
  lazy protocol witness table accessor for type UIScene and conformance NSObject();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v3 = (void *)specialized Collection.first.getter(v2, &lazy cache variable for type metadata for UIScene);
  swift_bridgeObjectRelease();
  if (!v3) {
    return (Swift::Bool_optional)2;
  }
  self;
  char v4 = (void *)swift_dynamicCastObjCClass();
  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_statusBarManager);
    if (v5)
    {
      id v6 = v5;
      v7.Swift::Int value = objc_msgSend(v5, sel_isStatusBarHidden);
    }
    else
    {
      v7.Swift::Int value = 0;
    }
  }
  else
  {

    return (Swift::Bool_optional)2;
  }
  return v7;
}

uint64_t SwiftUIGlue2.makeRootView(base:rootFocusScope:)()
{
  return AnyView.init<A>(_:)();
}

void SwiftUIGlue2.codableAttachmentCellType.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t SwiftUIGlue2.linkURL(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v23 = v4;
  outlined retain of CoreGlue2.LinkURLParameters((uint64_t)v22);
  uint64_t v5 = ResolvedStyledText.storage.getter();
  if (v5)
  {
    id v6 = (void *)v5;
    swift_beginAccess();
    long long v7 = *(_OWORD *)(v4 + 128);
    v20[6] = *(_OWORD *)(v4 + 112);
    v20[7] = v7;
    v20[8] = *(_OWORD *)(v4 + 144);
    char v21 = *(unsigned char *)(v4 + 160);
    long long v8 = *(_OWORD *)(v4 + 64);
    _OWORD v20[2] = *(_OWORD *)(v4 + 48);
    v20[3] = v8;
    long long v9 = *(_OWORD *)(v4 + 96);
    v20[4] = *(_OWORD *)(v4 + 80);
    v20[5] = v9;
    long long v10 = *(_OWORD *)(v4 + 32);
    v20[0] = *(_OWORD *)(v4 + 16);
    v20[1] = v10;
    swift_beginAccess();
    outlined retain of CoreGlue2.LinkURLParameters((uint64_t)v22);
    outlined retain of TextLayoutProperties((uint64_t)v20);
    ResolvedStyledText.scaleFactorOverride.getter();
    char v12 = v11;
    outlined release of ContextMenuResponderFilter((uint64_t)v22);
    CoreGlue2.LinkURLParameters.size.getter();
    ResolvedStyledText.linkURLMetrics(in:layoutMargins:)();
    if (v12) {
      TextLayoutProperties.minScaleFactor.getter();
    }
    CoreGlue2.LinkURLParameters.size.getter();
    double v16 = v15;
    double v18 = v17;
    outlined retain of CoreGlue2.LinkURLParameters((uint64_t)v22);
    id v19 = v6;
    specialized static NSLayoutManager.with<A>(_:drawingScale:size:layoutProperties:_:)(v19, (uint64_t)v20, v22, v19, a2, v16, v18);
    outlined release of ContextMenuResponderFilter((uint64_t)v22);

    return outlined release of TextLayoutProperties((uint64_t)v20);
  }
  else
  {
    outlined release of ContextMenuResponderFilter((uint64_t)v22);
    uint64_t v13 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
}

uint64_t closure #1 in SwiftUIGlue2.linkURL(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  long long v10 = a3[1];
  long long v31 = *a3;
  long long v32 = v10;
  uint64_t v33 = *((void *)a3 + 4);
  CoreGlue2.LinkURLParameters.point.getter();
  unint64_t v11 = (unint64_t)objc_msgSend(a1, sel_characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints_, a2, 0);
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
  unint64_t v12 = v11;
  if (v11 == NSNotFound.getter()) {
    goto LABEL_6;
  }
  id v13 = objc_msgSend(a1, sel_glyphRangeForCharacterRange_actualCharacterRange_, v12, 1, 0);
  objc_msgSend(a1, sel_boundingRectForGlyphRange_inTextContainer_, v13, v14, a2);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  long long v23 = a3[1];
  long long v31 = *a3;
  long long v32 = v23;
  uint64_t v33 = *((void *)a3 + 4);
  CoreGlue2.LinkURLParameters.point.getter();
  v35.CGFloat x = v24;
  v35.CGFloat y = v25;
  v36.origin.CGFloat x = v16;
  v36.origin.CGFloat y = v18;
  v36.size.CGFloat width = v20;
  v36.size.CGFloat height = v22;
  if (!CGRectContainsPoint(v36, v35))
  {
LABEL_6:
    uint64_t v26 = type metadata accessor for URL();
    int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    return v27(a5, 1, 1, v26);
  }
  else
  {
    if (objc_msgSend(a4, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E4FB0720], v12, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v30, 0, sizeof(v30));
    }
    uint64_t v29 = MEMORY[0x1E4FBC840] + 8;
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v30, (uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    outlined init with copy of Any?((uint64_t)&v31, (uint64_t)v30);
    URL.init(urlValue:)();
    return _sypSgWOhTm_1((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v29);
  }
}

void SwiftUIGlue2.configure(textContainer:exclusionPaths:)(uint64_t a1, uint64_t a2)
{
  self;
  long long v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    id v6 = v3;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v7 = a2 + 32;
    do
    {
      long long v11 = *(_OWORD *)(v7 + 16);
      v37[0] = *(_OWORD *)v7;
      v37[1] = v11;
      char v38 = *(unsigned char *)(v7 + 32);
      outlined init with take of Path.Storage((uint64_t)v37, (uint64_t)v39);
      outlined retain of Path.Storage((uint64_t)v39, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      Path.roundedRect()();
      if (v36 == 2 || (char v12 = v36 & 1, v36 &= 1u, (FixedRoundedRect.isUniform.getter() & 1) == 0))
      {
        long long v8 = self;
        long long v9 = (void *)Path.cgPath.getter();
        id v10 = objc_msgSend(v8, sel_bezierPathWithCGPath_, v9);
        outlined retain of Path.Storage((uint64_t)v37, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      }
      else
      {
        if (FixedRoundedRect.needsContinuousCorners.getter())
        {
          id v13 = self;
          FixedRoundedRect.rect.getter();
          double v32 = v15;
          double v34 = v14;
          double v17 = v16;
          double v19 = v18;
          char v36 = v12;
          FixedRoundedRect.cornerSize.getter();
          id v21 = objc_msgSend(v13, sel_bezierPathWithRoundedRect_cornerRadius_, v34, v32, v17, v19, v20);
        }
        else
        {
          id v22 = objc_allocWithZone(MEMORY[0x1E4FB14C0]);
          FixedRoundedRect.rect.getter();
          double v33 = v24;
          double v35 = v23;
          double v26 = v25;
          double v28 = v27;
          char v36 = v12;
          FixedRoundedRect.cornerSize.getter();
          objc_msgSend(v22, sel_initWithArcRoundedRectForSwiftUI_cornerRadius_, v35, v33, v26, v28, v29);
        }
        outlined retain of Path.Storage((uint64_t)v37, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += 40;
      --v5;
    }
    while (v5);
  }
  else
  {
    id v30 = v3;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setExclusionPaths_, isa);
}

void *@objc SwiftUIGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a4;
  id v9 = a5;
  id v10 = a1;
  long long v11 = specialized SwiftUIGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)(a3, v8, v9);

  return v11;
}

unint64_t lazy protocol witness table accessor for type BeginChildGeometries and conformance BeginChildGeometries()
{
  unint64_t result = lazy protocol witness table cache variable for type BeginChildGeometries and conformance BeginChildGeometries;
  if (!lazy protocol witness table cache variable for type BeginChildGeometries and conformance BeginChildGeometries)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BeginChildGeometries and conformance BeginChildGeometries);
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      long long v13[2] = v3;
      _OWORD v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x1F4184CD0]();
    }
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x18C117450](a1, a2, v8);
      type metadata accessor for NSObject(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for NSObject(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v18;
  swift_unknownObjectRelease();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = v9 & ~v10;
  if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v11 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = ~v10;
    do
    {
      unint64_t v7 = (v7 + 1) & v13;
      if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_26;
      }
      id v14 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v15 = static NSObject.== infix(_:_:)();
    }
    while ((v15 & 1) == 0);
  }

LABEL_20:
  double v16 = *(void **)(*(void *)(a4 + 48) + 8 * v7);

  id v17 = v16;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(unsigned char *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2) {
    return outlined init with copy of AnyHashable(*(void *)(a3 + 48) + 40 * result, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type EndChildGeometries and conformance EndChildGeometries()
{
  unint64_t result = lazy protocol witness table cache variable for type EndChildGeometries and conformance EndChildGeometries;
  if (!lazy protocol witness table cache variable for type EndChildGeometries and conformance EndChildGeometries)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EndChildGeometries and conformance EndChildGeometries);
  }
  return result;
}

uint64_t sub_187854338()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in SwiftUIGlue.defaultOpenURLAction(env:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in SwiftUIGlue.defaultOpenURLAction(env:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

unint64_t lazy protocol witness table accessor for type UIScene and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UIScene and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIScene and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIScene);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIScene and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaInsetsModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaInsetsModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F40D28], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined retain of CoreGlue2.LinkURLParameters(uint64_t a1)
{
  return a1;
}

void *specialized SwiftUIGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  _IntelligenceSupport.AnimatingSummarySymbol.init(isOn:font:foregroundColor:)();
  id v6 = objc_allocWithZone((Class)type metadata accessor for _IntelligenceSupport.SummarySymbolHost());
  unint64_t v7 = (void *)specialized _UIHostingView.init(rootView:)(v12, v13, v14);

  uint64_t v8 = (void *)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0xB8));
  swift_beginAccess();
  uint64_t v9 = *v8;
  *uint64_t v8 = 0;
  if (v9)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>();
    lazy protocol witness table accessor for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>);
    uint64_t v10 = v7;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return v7;
}

uint64_t ObjC metadata update function for SwiftUIGlue()
{
  return type metadata accessor for SwiftUIGlue(0);
}

uint64_t ObjC metadata update function for SwiftUIGlue2()
{
  return type metadata accessor for SwiftUIGlue2(0);
}

uint64_t outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CommandOperation?(uint64_t a1)
{
}

void type metadata accessor for WeakBox<PlatformDocument>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with take of WeakBox<PlatformDocument>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for WeakBox<PlatformDocument>?(uint64_t a1)
{
}

void type metadata accessor for WeakBox<PlatformDocument>(uint64_t a1)
{
}

uint64_t outlined init with take of NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)()
{
  if (!lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation));
    }
  }
}

uint64_t lazy protocol witness table accessor for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Decodable & Encodable & Hashable(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(void *)(a2 + 48) = *((void *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

void type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol()
{
  unint64_t result = lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol;
  if (!lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol);
  }
  return result;
}

uint64_t sub_187854A20()
{
  uint64_t v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(uint64_t (**)(BOOL))(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(a1, a2, v2 + v6, v7);
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()()
{
  return implicit closure #1 in closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()();
}

void type metadata accessor for ModifiedContent<AnyView, _SafeAreaInsetsModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined init with take of UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of TabEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void), void (*a3)(void))
{
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(v9 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  unint64_t result = a2();
  uint64_t v5 = result;
  if (!*(void *)(v9 + 16))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  if ((*(void *)(v5 + 24) >> 1) - *(void *)(v5 + 16) < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  a3(0);
  unint64_t result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    unint64_t result = swift_bridgeObjectRelease();
    *long long v3 = v5;
    return result;
  }
  uint64_t v10 = *(void *)(v5 + 16);
  BOOL v11 = __OFADD__(v10, v4);
  uint64_t v12 = v10 + v4;
  if (!v11)
  {
    *(void *)(v5 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  long long v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = *((void *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    *uint64_t v1 = v3;
    int64_t v8 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v10 = v8 - *((void *)v3 + 2);
  if (*(void *)(a1 + 16))
  {
    if (v10 >= v2)
    {
      swift_arrayInitWithCopy();
      if (!v2) {
        goto LABEL_14;
      }
      uint64_t v11 = *((void *)v3 + 2);
      BOOL v12 = __OFADD__(v11, v2);
      uint64_t v13 = v11 + v2;
      if (!v12)
      {
        *((void *)v3 + 2) = v13;
        goto LABEL_14;
      }
LABEL_20:
      __break(1u);
      return;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v2)
  {
    __break(1u);
    goto LABEL_19;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  if (v2 == v10)
  {
LABEL_17:
    type metadata accessor for [Any](0, (unint64_t *)&lazy cache variable for type metadata for [Any], MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB320]);
    *uint64_t v1 = v3;
  }
}

{
  uint64_t *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int isUniquelyReferenced_nonNull_native;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(unsigned char *, void);
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void, void, void);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(unsigned char *, void);
  unsigned int v50;
  uint64_t v51;
  void (**v52)(char *, uint64_t);
  void (**v53)(char *);
  void (**v54)(void, void, void);
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  void (*v56)(void, void, void);
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unsigned char v66[32];
  uint64_t v67;
  uint64_t v68;
  uint64_t vars8;

  uint64_t v63 = type metadata accessor for IntelligenceElement();
  int64_t v4 = *(unsigned __int8 **)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v64 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [NavigationPath_ItemBoxBase](0, &lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v62 = (uint64_t)&v51 - v8;
  MEMORY[0x1F4188790](v9);
  BOOL v12 = (char *)&v51 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  id v14 = *v1;
  char v15 = *(void *)(*v1 + 16);
  double v16 = v15 + v13;
  if (__OFADD__(v15, v13))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v65 = v10;
  uint64_t v2 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v14;
  if (!isUniquelyReferenced_nonNull_native || (double v18 = *(void *)(v14 + 24) >> 1, v18 < v16))
  {
    if (v15 <= v16) {
      double v19 = v15 + v13;
    }
    else {
      double v19 = v15;
    }
    id v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v19, 1, (void *)v14);
    *uint64_t v1 = v14;
    double v18 = *(void *)(v14 + 24) >> 1;
  }
  double v20 = *(void *)(v14 + 16);
  double v16 = (v4[80] + 32) & ~(unint64_t)v4[80];
  char v15 = *((void *)v4 + 9);
  id v21 = v18 - v20;
  id v22 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v67, v14 + v16 + v15 * v20, v18 - v20, a1);
  if (v22 < v13) {
    goto LABEL_17;
  }
  if (!v22) {
    goto LABEL_12;
  }
  double v23 = *(void *)(v14 + 16);
  double v24 = __OFADD__(v23, v22);
  double v25 = v23 + v22;
  if (v24)
  {
    __break(1u);
    while (1)
    {
      uint64_t v57 = v4 + 32;
      uint64_t v53 = (void (**)(char *))(v4 + 16);
      uint64_t v54 = (void (**)(void, void, void))(v4 + 56);
      int v52 = (void (**)(char *, uint64_t))(v4 + 8);
      while (1)
      {
        outlined destroy of TableRowID?(a1, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [NavigationPath_ItemBoxBase]);
        int v37 = *v1;
        char v38 = *(void *)(*v1 + 24);
        unint64_t v39 = v38 >> 1;
        if ((uint64_t)(v38 >> 1) < v14 + 1)
        {
          int v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v14 + 1, 1, (void *)*v1);
          *uint64_t v1 = v37;
          unint64_t v39 = *(void *)(v37 + 24) >> 1;
        }
        uint64_t v40 = v65;
        outlined init with copy of TableRowID?((uint64_t)v12, v65, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [NavigationPath_ItemBoxBase]);
        if (v59(v40, 1, v63) != 1) {
          break;
        }
        unint64_t v41 = v63;
        int v42 = v65;
LABEL_31:
        double v35 = v41;
        outlined destroy of TableRowID?(v42, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [NavigationPath_ItemBoxBase]);
        char v36 = v14;
LABEL_26:
        *(void *)(*v1 + 16) = v36;
        a1 = v62;
        outlined init with copy of TableRowID?((uint64_t)v12, v62, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [NavigationPath_ItemBoxBase]);
        if (v59(a1, 1, v35) == 1) {
          goto LABEL_22;
        }
      }
      uint64_t v43 = *(void (**)(void, void, void))v57;
      if (v14 <= v39) {
        uint64_t v44 = v39;
      }
      else {
        uint64_t v44 = v14;
      }
      uint64_t v58 = v44;
      uint64_t v61 = v37 + v16 + v15 * v14;
      unint64_t v41 = v63;
      uint64_t v45 = v64;
      int v42 = v65;
      uint64_t v56 = v43;
      while (1)
      {
        uint64_t v46 = v42;
        int64_t v4 = v57;
        v43(v45, v46, v41);
        uint64_t v60 = v14;
        if (v58 == v14)
        {
          double v35 = v41;
          (*v52)(v45, v41);
          char v36 = v58;
          id v14 = v58;
          goto LABEL_26;
        }
        outlined destroy of TableRowID?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [NavigationPath_ItemBoxBase]);
        v43(v61, v45, v41);
        if (!v68)
        {
          v55(v12, 1, 1, v41);
          uint64_t v48 = v60;
          goto LABEL_40;
        }
        long long v47 = v68 - 1;
        uint64_t v48 = v60;
        if (__OFSUB__(v68, 1)) {
          break;
        }
        --v68;
        uint64_t v49 = (void (*)(unsigned char *, void))specialized Array.subscript.read((uint64_t)v66, v47, v67);
        (*v53)(v12);
        v49(v66, 0);
        v55(v12, 0, 1, v41);
LABEL_40:
        int v42 = v65;
        outlined init with copy of TableRowID?((uint64_t)v12, v65, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [NavigationPath_ItemBoxBase]);
        char v50 = v59(v42, 1, v41);
        v61 += v15;
        id v14 = v48 + 1;
        uint64_t v45 = v64;
        uint64_t v43 = v56;
        if (v50 == 1) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_44:
      double v29 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v2 + 7);
      id v30 = v12;
      long long v31 = 1;
      double v28 = v63;
LABEL_21:
      uint64_t v55 = v29;
      v29(v30, v31, 1, v28);
      a1 = v62;
      outlined init with copy of TableRowID?((uint64_t)v12, v62, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [NavigationPath_ItemBoxBase]);
      double v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v2 + 6);
      v2 += 48;
      char v59 = v32;
      if (v32(a1, 1, v28) == 1)
      {
LABEL_22:
        double v33 = MEMORY[0x1E4FB0BB0];
        double v34 = MEMORY[0x1E4FBB718];
        outlined destroy of TableRowID?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [NavigationPath_ItemBoxBase]);
        swift_bridgeObjectRelease();
        outlined destroy of TableRowID?(a1, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, v33, v34, (uint64_t (*)(void))type metadata accessor for [NavigationPath_ItemBoxBase]);
        return;
      }
    }
  }
  *(void *)(v14 + 16) = v25;
LABEL_12:
  if (v22 != v21)
  {
    swift_bridgeObjectRelease();
    return;
  }
LABEL_18:
  id v14 = *(void *)(v14 + 16);
  if (!v68) {
    goto LABEL_44;
  }
  double v26 = v68 - 1;
  if (!__OFSUB__(v68, 1))
  {
    --v68;
    double v27 = (void (*)(unsigned char *, void))specialized Array.subscript.read((uint64_t)v66, v26, v67);
    double v28 = v63;
    (*((void (**)(char *))v2 + 2))(v12);
    v27(v66, 0);
    double v29 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v2 + 7);
    id v30 = v12;
    long long v31 = 0;
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void), unint64_t *a3)
{
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(v9 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  unint64_t result = a2();
  uint64_t v5 = result;
  if (!*(void *)(v9 + 16))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  if ((*(void *)(v5 + 24) >> 1) - *(void *)(v5 + 16) < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  type metadata accessor for CVarArg(0, a3);
  unint64_t result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    unint64_t result = swift_bridgeObjectRelease();
    *long long v3 = v5;
    return result;
  }
  uint64_t v10 = *(void *)(v5 + 16);
  BOOL v11 = __OFADD__(v10, v4);
  uint64_t v12 = v10 + v4;
  if (!v11)
  {
    *(void *)(v5 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a4 >> 1;
  uint64_t v8 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_11;
  }
  uint64_t v5 = a3;
  unint64_t v6 = *v4;
  if (*v4 >> 62) {
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v8;
  if (!__OFADD__(v9, v8)) {
    goto LABEL_4;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  uint64_t v12 = 1;
LABEL_16:
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v15 <= v10) {
    uint64_t v15 = v10;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = MEMORY[0x18C117690](v12, v15, 1, v6);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t *v4 = v6;
  uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
  if (v7 == v5)
  {
    while (v8 > 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v10 = v14 + v8;
      if (__OFADD__(v14, v8)) {
        goto LABEL_14;
      }
LABEL_4:
      unint64_t v6 = *v4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      unint64_t *v4 = v6;
      uint64_t v12 = 0;
      if (!result || (v6 & 0x8000000000000000) != 0 || (v6 & 0x4000000000000000) != 0) {
        goto LABEL_16;
      }
      uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v10 > *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_15;
      }
      if (v7 != v5) {
        goto LABEL_21;
      }
    }
    goto LABEL_25;
  }
LABEL_21:
  if ((*(void *)(v13 + 24) >> 1) - *(void *)(v13 + 16) < v8)
  {
    __break(1u);
    goto LABEL_30;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  uint64_t result = swift_arrayInitWithCopy();
  if (v8 > 0)
  {
    uint64_t v16 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v17 = __OFADD__(v16, v8);
    uint64_t v18 = v16 + v8;
    if (!v17)
    {
      *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
      goto LABEL_25;
    }
LABEL_30:
    __break(1u);
    return result;
  }
LABEL_25:
  swift_unknownObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unint64_t), void (*a3)(void))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v24 + v7;
    if (!__OFADD__(v24, v7)) {
      goto LABEL_5;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 + v7;
  if (__OFADD__(v8, v7)) {
    goto LABEL_26;
  }
LABEL_5:
  unint64_t v10 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *long long v3 = v10;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v12 = 1;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9) {
    uint64_t v14 = v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x18C117690](v12, v14, 1, v10);
  swift_bridgeObjectRelease();
  *long long v3 = v15;
  uint64_t v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = (*(void *)(v13 + 24) >> 1) - v16;
  uint64_t result = a2(v13 + 8 * v16 + 32, v17, a1);
  if (v19 < v7)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    a3(0);
    goto LABEL_20;
  }
  uint64_t v20 = v19;
  if (v19 >= 1)
  {
    uint64_t v21 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v22 = __OFADD__(v21, v19);
    uint64_t v23 = v21 + v19;
    if (v22)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v23;
  }
  swift_bridgeObjectRelease();
  if (v20 == v17) {
    goto LABEL_28;
  }
LABEL_20:

  return specialized Array._endMutation()();
}

uint64_t static PreviewModifier<>.makeSharedContext()()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](static PreviewModifier<>.makeSharedContext(), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void protocol witness for View.body.getter in conformance PreviewModifierContent()
{
}

uint64_t static PreviewTrait<A>.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _ContiguousArrayStorage<PreviewModifier>();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  lazy protocol witness table accessor for type PreviewModifierTrait and conformance PreviewModifierTrait();
  type metadata accessor for Preview.ViewTraits();
  return PreviewTrait.init(_:)();
}

void type metadata accessor for _ContiguousArrayStorage<PreviewModifier>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PreviewModifier>)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for PreviewModifier);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreviewModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PreviewModifierTrait and conformance PreviewModifierTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewModifierTrait and conformance PreviewModifierTrait;
  if (!lazy protocol witness table cache variable for type PreviewModifierTrait and conformance PreviewModifierTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewModifierTrait and conformance PreviewModifierTrait);
  }
  return result;
}

uint64_t PreviewModifierViewModifier.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for NestedDynamicProperties();
  double v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, v2, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v8, v4);
}

uint64_t PreviewModifierViewModifier.init(modifier:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NestedDynamicProperties.init(wrappedValue:)(a1, a3, a4);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for PreviewModifierViewModifier() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v8(v6, a2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for PreviewModifierViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PreviewModifierViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v29 = (char *)&v27 - v11;
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for _ViewModifier_Content();
  uint64_t v30 = v12;
  unint64_t v13 = lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  unint64_t v31 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = &type metadata for PreviewModifierContent;
  uint64_t v41 = v12;
  unint64_t v42 = v13;
  uint64_t v43 = WitnessTable;
  type metadata accessor for StaticSourceWriter();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v21 = PreviewModifierViewModifier.modifier.getter(a2, (uint64_t)v7);
  uint64_t v22 = v3 + *(int *)(a2 + 36);
  uint64_t v23 = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40))(v21, v22, v5, v9);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
  uint64_t v36 = v5;
  uint64_t v37 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for PreviewModifierContent, (void (*)(double))partial apply for closure #1 in PreviewModifierViewModifier.body(content:), (uint64_t)v35, AssociatedTypeWitness, (uint64_t)&type metadata for PreviewModifierContent, v30, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, AssociatedTypeWitness);
  uint64_t v38 = AssociatedConformanceWitness;
  unint64_t v39 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  double v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v25)(v20, v14);
}

unint64_t lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent;
  if (!lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent;
  if (!lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent);
  }
  return result;
}

uint64_t closure #1 in PreviewModifierViewModifier.body(content:)()
{
  type metadata accessor for PreviewModifierViewModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v1 = static ViewBuilder.buildExpression<A>(_:)(WitnessTable);

  return static ViewBuilder.buildExpression<A>(_:)(v1);
}

uint64_t partial apply for closure #1 in PreviewModifierViewModifier.body(content:)()
{
  return closure #1 in PreviewModifierViewModifier.body(content:)();
}

uint64_t PreviewModifierTrait.value.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewModifierTrait.value.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PreviewModifierTrait.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static PreviewModifierTrait.defaultValue.getter()
{
  return MEMORY[0x1E4FBC860];
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> static PreviewModifierTrait.combine(_:_:)()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for PreviewModifier);
}

unint64_t instantiation function for generic protocol witness table for PreviewModifierContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in PreviewModifierContent()
{
  return &protocol witness table for PreviewModifierContent;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PreviewModifierViewModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for PreviewTraitProtocol.value.getter in conformance PreviewModifierTrait@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreviewTraitProtocol.combine(_:_:) in conformance PreviewModifierTrait@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t result = specialized Array.append<A>(contentsOf:)(v3, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for PreviewModifier);
  *a2 = v5;
  return result;
}

uint64_t dispatch thunk of static PreviewModifier.makeSharedContext()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 32) + **(int **)(a3 + 32));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PreviewModifier.body(content:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

ValueMetadata *type metadata accessor for PreviewModifierContent()
{
  return &type metadata for PreviewModifierContent;
}

uint64_t type metadata completion function for PreviewModifierViewModifier()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for PreviewModifierViewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t destroy for PreviewModifierViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = AssociatedTypeWitness;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t initializeWithCopy for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewModifierViewModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void storeEnumTagSinglePayload for PreviewModifierViewModifier(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v27 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  size_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  size_t v16 = ((v14 + v15) & ~v15) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x187859F14);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          if (v9 >= a2)
          {
            double v26 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
            v26(a1, a2, v9, v7);
          }
          else
          {
            if (v14 <= 3) {
              int v23 = ~(-1 << (8 * v14));
            }
            else {
              int v23 = -1;
            }
            if (v14)
            {
              int v24 = v23 & (~v9 + a2);
              if (v14 <= 3) {
                int v25 = v14;
              }
              else {
                int v25 = 4;
              }
              bzero(a1, v14);
              switch(v25)
              {
                case 2:
                  *(_WORD *)a1 = v24;
                  break;
                case 3:
                  *(_WORD *)a1 = v24;
                  a1[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)a1 = v24;
                  break;
                default:
                  *a1 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v14 + v15] & ~v15, a2);
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for PreviewModifierTrait()
{
  return &type metadata for PreviewModifierTrait;
}

uint64_t sub_187859F5C()
{
  return swift_getWitnessTable();
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if (a6)
  {
    if (a2) {
      return 0;
    }
    goto LABEL_44;
  }
  if (a2) {
    goto LABEL_5;
  }
  if (result >= a5)
  {
    if (a5 < result) {
      goto LABEL_30;
    }
    if (a4)
    {
      if (a4 != 1)
      {
        if (a7 || a8 != 2) {
          goto LABEL_24;
        }
        if (!a3) {
          return 0;
        }
LABEL_30:
        if (result != a5) {
          goto LABEL_5;
        }
        if (a4)
        {
          if (a4 != 1)
          {
            if (a8 == 2 && !a7) {
              return 0;
            }
            goto LABEL_5;
          }
          if (a8 != 1)
          {
LABEL_5:
            char v13 = a2 & 1;
            BOOL v15 = a8 == 2 && a7 == 0;
            uint64_t v12 = -1;
            while (1)
            {
              uint64_t result = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(result, v13 & 1);
              if ((v13 & 1) != 0 || result != a5) {
                goto LABEL_13;
              }
              if (v18)
              {
                if (v18 != 1)
                {
                  if (v15) {
                    return v12;
                  }
                  goto LABEL_13;
                }
                if (a8 != 1) {
                  goto LABEL_13;
                }
              }
              else if (a8)
              {
                goto LABEL_13;
              }
              if (v17 == a7) {
                return v12;
              }
LABEL_13:
              BOOL v16 = __OFSUB__(v12--, 1);
              if (v16) {
                goto LABEL_82;
              }
            }
          }
        }
        else if (a8)
        {
          goto LABEL_5;
        }
        if (a3 == a7) {
          return 0;
        }
        goto LABEL_5;
      }
      if (a8 != 1) {
        goto LABEL_30;
      }
    }
    else if (a8)
    {
      if (a8 == 1) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
    if (a3 < a7) {
      goto LABEL_24;
    }
    if (a7 >= a3) {
      return 0;
    }
    goto LABEL_30;
  }
LABEL_24:
  if (result != a5) {
    goto LABEL_44;
  }
  if (!a4)
  {
    if (a8) {
      goto LABEL_44;
    }
LABEL_40:
    if (a3 == a7) {
      return 0;
    }
    goto LABEL_44;
  }
  if (a4 != 1)
  {
    if (a8 == 2 && !a7) {
      return 0;
    }
    goto LABEL_44;
  }
  if (a8 == 1) {
    goto LABEL_40;
  }
LABEL_44:
  char v19 = 0;
  BOOL v21 = a8 == 2 && a7 == 0;
  uint64_t v12 = 1;
  do
  {
    uint64_t result = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(result, v19 & 1);
    if (v19)
    {
      if ((a6 & 1) == 0) {
        goto LABEL_52;
      }
    }
    else if ((a6 & 1) != 0 || result != a5)
    {
      goto LABEL_52;
    }
    if (v23)
    {
      if (v23 != 1)
      {
        if (v21) {
          return v12;
        }
        goto LABEL_52;
      }
      if (a8 != 1) {
        goto LABEL_52;
      }
    }
    else if (a8)
    {
      goto LABEL_52;
    }
    if (v22 == a7) {
      return v12;
    }
LABEL_52:
    BOOL v16 = __OFADD__(v12++, 1);
  }
  while (!v16);
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10 = a3 & 1;
  if (result == a4)
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if ((a6 & 1) == 0) {
      uint64_t v11 = a5;
    }
    if ((a3 & 1) == 0 && v11 > a2) {
      goto LABEL_6;
    }
LABEL_11:
    if (result == a4)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      if ((a3 & 1) == 0) {
        uint64_t v13 = a2;
      }
      if ((a6 & 1) != 0 || v13 <= a5) {
        return v12;
      }
    }
    else if (a4 >= result)
    {
      return 0;
    }
    if (result != a4) {
      goto LABEL_46;
    }
    if ((a3 & 1) == 0)
    {
      if ((a6 & 1) == 0 && a2 == a5) {
        return 0;
      }
      goto LABEL_46;
    }
    if ((a6 & 1) == 0)
    {
LABEL_46:
      BOOL v20 = (a6 & 1) == 0 || a9 != a4;
      uint64_t v12 = -1;
      while (1)
      {
        uint64_t v21 = result + v12;
        if (__OFSUB__(result + v12 + 1, 1)) {
          goto LABEL_66;
        }
        if (v21 == a9)
        {
          if (!v20) {
            return v12;
          }
          a2 = 0;
        }
        else
        {
          if (v10) {
            goto LABEL_72;
          }
          BOOL v17 = __OFSUB__(a2--, 1);
          if (v17) {
            goto LABEL_69;
          }
          if ((a6 & 1) == 0 && v21 == a4 && a2 == a5) {
            return v12;
          }
        }
        char v10 = v21 == a9;
        BOOL v17 = __OFSUB__(v12--, 1);
        if (v17) {
          goto LABEL_68;
        }
      }
    }
    return 0;
  }
  if (result >= a4) {
    goto LABEL_11;
  }
LABEL_6:
  if (result == a4)
  {
    if (a3)
    {
      if (a6) {
        return 0;
      }
    }
    else if ((a6 & 1) == 0 && a2 == a5)
    {
      return 0;
    }
  }
  uint64_t v14 = a9 + a10;
  if (__OFADD__(a9, a10)) {
    goto LABEL_70;
  }
  BOOL v16 = (a6 & 1) == 0 || v14 != a4;
  uint64_t v12 = 1;
  while (1)
  {
    uint64_t v18 = result + v12;
    if (__OFADD__(result + v12 - 1, 1)) {
      break;
    }
    if (v18 == v14)
    {
      if (!v16) {
        return v12;
      }
      a2 = 0;
    }
    else
    {
      if (v10) {
        goto LABEL_71;
      }
      BOOL v17 = __OFADD__(a2++, 1);
      if (v17) {
        goto LABEL_67;
      }
      if ((a6 & 1) == 0 && v18 == a4 && a2 == a5) {
        return v12;
      }
    }
    char v10 = v18 == v14;
    BOOL v17 = __OFADD__(v12++, 1);
    if (v17) {
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

void *specialized BidirectionalCollection._distance(from:to:)(void *result, uint64_t a2, char a3, void *a4, uint64_t a5, char a6)
{
  uint64_t v8 = a2;
  uint64_t v9 = result;
  char v10 = a3 & 1;
  if (result != a4)
  {
    if ((uint64_t)result < (uint64_t)a4) {
      goto LABEL_6;
    }
LABEL_11:
    if (result == a4)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      if ((a3 & 1) == 0) {
        uint64_t v13 = a2;
      }
      if ((a6 & 1) != 0 || v13 <= a5) {
        return (void *)v12;
      }
    }
    else if ((uint64_t)a4 >= (uint64_t)result)
    {
      return 0;
    }
    if (result == a4)
    {
      if (a3)
      {
        if ((a6 & 1) == 0) {
          goto LABEL_46;
        }
        return 0;
      }
      if ((a6 & 1) == 0 && a2 == a5) {
        return 0;
      }
    }
LABEL_46:
    char v23 = (void *)v6[26];
    BOOL v25 = (a6 & 1) == 0 || v23 != a4;
    uint64_t v12 = -1;
    while (1)
    {
      if (v9 == v23)
      {
        if (!v25) {
          return (void *)v12;
        }
        uint64_t v8 = 0;
        char v10 = 1;
        uint64_t v9 = (void *)v6[26];
      }
      else
      {
        BOOL v19 = __OFSUB__(v9, 1);
        uint64_t v9 = (void *)((char *)v9 - 1);
        if (v19) {
          goto LABEL_73;
        }
        if (v9 == v23)
        {
          uint64_t v8 = 0;
          char v10 = 1;
          if (v9 == a4 && (a6 & 1) != 0) {
            return (void *)v12;
          }
        }
        else
        {
          if (v10) {
            goto LABEL_77;
          }
          BOOL v19 = __OFSUB__(v8--, 1);
          if (v19) {
            goto LABEL_74;
          }
          if (v9 == a4)
          {
            char v10 = 0;
            uint64_t v9 = a4;
            if ((a6 & 1) == 0 && v8 == a5) {
              return (void *)v12;
            }
          }
          else
          {
            char v10 = 0;
          }
        }
      }
      BOOL v19 = __OFSUB__(v12--, 1);
      if (v19) {
        goto LABEL_71;
      }
    }
  }
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  if ((a6 & 1) == 0) {
    uint64_t v11 = a5;
  }
  if ((a3 & 1) != 0 || v11 <= a2) {
    goto LABEL_11;
  }
LABEL_6:
  if (result == a4)
  {
    if (a3)
    {
      if ((a6 & 1) == 0) {
        goto LABEL_24;
      }
    }
    else if ((a6 & 1) != 0 || a2 != a5)
    {
      goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  uint64_t v14 = v6[26];
  uint64_t v15 = v6[27];
  uint64_t v16 = v14 + v15;
  if (!__OFADD__(v14, v15))
  {
    unint64_t v28 = v6[28];
    uint64_t v12 = 1;
    uint64_t v17 = v6[22];
    uint64_t v18 = v6[23];
    while (1)
    {
      BOOL v20 = (void *)((char *)v9 + v12);
      if (__OFADD__((char *)v9 + v12 - 1, 1)) {
        break;
      }
      unint64_t v21 = *(void *)(v18 + 16);
      if (v21 || (unint64_t v21 = v16, *(void *)(v17 + 16)))
      {
        uint64_t result = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v29, v18, v17, v28, v16, v21);
        unint64_t v21 = v29;
      }
      BOOL v22 = v20 == (void *)v21;
      if (v22)
      {
        uint64_t v8 = 0;
        if ((a6 & 1) != 0 && v20 == a4) {
          return (void *)v12;
        }
      }
      else
      {
        if (v10) {
          goto LABEL_76;
        }
        BOOL v19 = __OFADD__(v8++, 1);
        if (v19) {
          goto LABEL_72;
        }
        if ((a6 & 1) == 0 && v20 == a4 && v8 == a5) {
          return (void *)v12;
        }
      }
      char v10 = v22;
      BOOL v19 = __OFADD__(v12++, 1);
      if (v19) {
        goto LABEL_70;
      }
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [NavigationPath_ItemBoxBase](255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(0, &lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, MEMORY[0x1E4FBBBC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>()
{
  if (!lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>();
    lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (void (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
    unint64_t v0 = type metadata accessor for DefaultIndices();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
    }
  }
}

void type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>()
{
  if (!lazy cache variable for type metadata for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>)
  {
    type metadata accessor for ShadowRowCollection<TableDataSourceAdaptor>();
    lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type ShadowRowCollection<TableDataSourceAdaptor> and conformance ShadowRowCollection<A>, (void (*)(uint64_t))type metadata accessor for ShadowRowCollection<TableDataSourceAdaptor>);
    unint64_t v0 = type metadata accessor for CountingIndexCollection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
    }
  }
}

void type metadata accessor for ShadowRowCollection<TableDataSourceAdaptor>()
{
  if (!lazy cache variable for type metadata for ShadowRowCollection<TableDataSourceAdaptor>)
  {
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    unint64_t v0 = type metadata accessor for ShadowRowCollection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShadowRowCollection<TableDataSourceAdaptor>);
    }
  }
}

void type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>()
{
  if (!lazy cache variable for type metadata for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>)
  {
    type metadata accessor for CountingIndex<Int>();
    lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>, (void (*)(uint64_t))type metadata accessor for CountingIndex<Int>);
    unint64_t v0 = type metadata accessor for ListUpdate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>);
    }
  }
}

void type metadata accessor for CountingIndex<Int>()
{
  if (!lazy cache variable for type metadata for CountingIndex<Int>)
  {
    unint64_t v0 = type metadata accessor for CountingIndex();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>);
    }
  }
}

uint64_t outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>();
    uint64_t v7 = v6;
    type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>();
    uint64_t v9 = v8;
    uint64_t v10 = lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (void (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
    unint64_t v11 = a3(a1, v7, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for [UIBarButtonItem]()
{
  if (!lazy cache variable for type metadata for [UIBarButtonItem])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIBarButtonItem]);
    }
  }
}

void type metadata accessor for [_UISceneBSActionHandler]()
{
  if (!lazy cache variable for type metadata for [_UISceneBSActionHandler])
  {
    type metadata accessor for _UISceneBSActionHandler(255, &lazy cache variable for type metadata for _UISceneBSActionHandler);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_UISceneBSActionHandler]);
    }
  }
}

void type metadata accessor for [_UISceneSettingsDiffAction]()
{
  if (!lazy cache variable for type metadata for [_UISceneSettingsDiffAction])
  {
    type metadata accessor for _UISceneBSActionHandler(255, &lazy cache variable for type metadata for _UISceneSettingsDiffAction);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_UISceneSettingsDiffAction]);
    }
  }
}

void type metadata accessor for [NavigationPath_ItemBoxBase](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of TableRowID?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of TableRowID?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for [UIFocusEnvironment]()
{
  if (!lazy cache variable for type metadata for [UIFocusEnvironment])
  {
    type metadata accessor for _UISceneBSActionHandler(255, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIFocusEnvironment]);
    }
  }
}