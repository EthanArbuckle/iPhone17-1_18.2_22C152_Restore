void type metadata accessor for [UIFocusItem]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIFocusItem])
  {
    type metadata accessor for _UISceneBSActionHandler(255, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
    v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIFocusItem]);
    }
  }
}

uint64_t outlined init with take of TableRowID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of TableRowID(uint64_t a1)
{
  return a1;
}

void type metadata accessor for [UIViewController]()
{
  if (!lazy cache variable for type metadata for [UIViewController])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIViewController]);
    }
  }
}

void type metadata accessor for [NSLayoutConstraint]()
{
  if (!lazy cache variable for type metadata for [NSLayoutConstraint])
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for NSLayoutConstraint);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NSLayoutConstraint]);
    }
  }
}

uint64_t static PubliclyPrimitiveView._makeView(view:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 80);
  int v16 = *a1;
  uint64_t v8 = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 24);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 72);
  int v15 = v5;
  return static PubliclyPrimitiveView.defaultMakeView(view:inputs:)(&v16, &v8);
}

uint64_t static PubliclyPrimitiveView.defaultMakeView(view:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  LODWORD(v15) = *a1;
  type metadata accessor for _GraphValue();
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  long long v13 = *(_OWORD *)(a2 + 7);
  long long v14 = *(_OWORD *)(a2 + 5);
  uint64_t v9 = a2[9];
  _GraphValue.value.getter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for MakeBody();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v15 = v3;
  int v16 = v4;
  uint64_t v17 = v5;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  long long v20 = v14;
  long long v21 = v13;
  uint64_t v22 = v9;
  int v23 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v24, &v15, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static PubliclyPrimitiveView._viewListCount(inputs:)(long long *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  uint64_t v2 = *((void *)a1 + 3);
  long long v4 = *a1;
  int v5 = v1;
  uint64_t v6 = v2;
  return static PubliclyPrimitiveView.defaultViewListCount(inputs:)((uint64_t *)&v4);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MakeBody<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> Section<A, B, C>(int *a1, uint64_t a2)
{
  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance HSplitView<A>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HSplitView<A>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1);
}

{
  swift_getWitnessTable();
  return static PubliclyPrimitiveView._viewListCount(inputs:)(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance VSplitView<A>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance VSplitView<A>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance VSplitView<A>(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _PullDownButton<A, B>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _PullDownButton<A, B>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _PullDownButton<A, B>(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationView<A>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationView<A>(int *a1, uint64_t a2)
{
  swift_getWitnessTable();

  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationView<A>(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1);
}

void ToolbarContent.hidden(_:)()
{
}

uint64_t CustomizableToolbarContent.visibility(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 2;
  return ToolbarContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for ToolbarItemHiddenModifier, a3);
}

uint64_t View.toolbarItemVisibility(_:)()
{
  return View.preference<A>(key:value:)();
}

uint64_t sub_18785D7C0()
{
  return get_witness_table_7SwiftUI14ToolbarContentRzlAA0c8ModifiedD0VyxAA0C18ItemHiddenModifier33_0FBE2E834C3D805C1A341AC0D8838906LLVGAaBHPxAaBHD1__AgA0cdH0HPyHCHCTm();
}

uint64_t sub_18785D7D8()
{
  return get_witness_table_7SwiftUI14ToolbarContentRzlAA0c8ModifiedD0VyxAA0C18ItemHiddenModifier33_0FBE2E834C3D805C1A341AC0D8838906LLVGAaBHPxAaBHD1__AgA0cdH0HPyHCHCTm();
}

uint64_t get_witness_table_7SwiftUI14ToolbarContentRzlAA0c8ModifiedD0VyxAA0C18ItemHiddenModifier33_0FBE2E834C3D805C1A341AC0D8838906LLVGAaBHPxAaBHD1__AgA0cdH0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

uint64_t sub_18785D848()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>, (uint64_t)&type metadata for ToolbarItemViewHiddenKey, (uint64_t)&protocol witness table for ToolbarItemViewHiddenKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemViewHiddenKey()
{
  return &type metadata for ToolbarItemViewHiddenKey;
}

unsigned char *storeEnumTagSinglePayload for ToolbarItemHiddenModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18785DA40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemHiddenModifier()
{
  return &type metadata for ToolbarItemHiddenModifier;
}

uint64_t static ToolbarItemHiddenModifier._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 14);
  uint64_t v13 = a2[8];
  int v14 = *((_DWORD *)a2 + 18);
  uint64_t v26 = *a2;
  int v27 = v4;
  uint64_t v28 = v5;
  *(void *)&long long v29 = __PAIR64__(v7, v6);
  *((void *)&v29 + 1) = __PAIR64__(v9, v8);
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  int v32 = v12;
  uint64_t v33 = v13;
  int v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  type metadata accessor for _GraphValue<ToolbarItemHiddenModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  uint64_t v17 = v26;
  int v18 = v27;
  uint64_t v19 = v5;
  long long v20 = v29;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  int v23 = v32;
  uint64_t v24 = v33;
  int v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarItemIsHidden.setter()
{
  type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarItemHiddenModifier.ChildEnvironment@<X0>(void *a1@<X8>)
{
  Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter();
}

unsigned __int8 *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarItemViewHiddenKey(unsigned __int8 *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t result = (unsigned __int8 *)a2(&v4);
    LOBYTE(v3) = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

void type metadata accessor for _GraphValue<ToolbarItemHiddenModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<ToolbarItemHiddenModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ToolbarItemHiddenModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarItemIsHiddenKey()
{
  return &type metadata for EnvironmentValues.ToolbarItemIsHiddenKey;
}

void *type metadata accessor for ToolbarItemHiddenModifier.ChildEnvironment()
{
  return &unk_1ED4492B0;
}

void CustomizableToolbarContent.hidden(_:)()
{
}

void View.toolbarItemHidden(_:)()
{
}

void View.listRowHoverEffect(_:)()
{
}

void View.listRowHoverEffectDisabled(_:)()
{
}

void static ListRowHoverEffectTraitKey.defaultValue.getter()
{
}

void static IgnoreListRowHoverEffectTraitsKey.defaultValue.getter()
{
}

ValueMetadata *type metadata accessor for ListRowHoverEffectTraitKey()
{
  return &type metadata for ListRowHoverEffectTraitKey;
}

ValueMetadata *type metadata accessor for ListRowHoverEffectEnabledTraitKey()
{
  return &type metadata for ListRowHoverEffectEnabledTraitKey;
}

ValueMetadata *type metadata accessor for IgnoreListRowHoverEffectTraitsKey()
{
  return &type metadata for IgnoreListRowHoverEffectTraitsKey;
}

uint64_t sub_18785DFAC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyAaBPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyADyxAA01_G15WritingModifierVyAA018ListRowHoverEffectgH0VGG_AA04Usesg5Basedlmn7EffectsH0VQo_AA06_TraitjK0VyAA06Ignorelmno6TraitsH0VGGAaBHPqd0__AaBHD3_ARHO_AwA0cK0HPyHCHCTm(a1, &lazy cache variable for type metadata for _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey>, (uint64_t)&type metadata for ListRowHoverEffectPreferenceKey, (uint64_t)&protocol witness table for ListRowHoverEffectPreferenceKey, &lazy protocol witness table cache variable for type _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey> and conformance _PreferenceWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey>, (uint64_t)&type metadata for IgnoreListRowHoverEffectTraitsKey, (uint64_t)&protocol witness table for IgnoreListRowHoverEffectTraitsKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18785E054(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyAaBPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyADyxAA01_G15WritingModifierVyAA018ListRowHoverEffectgH0VGG_AA04Usesg5Basedlmn7EffectsH0VQo_AA06_TraitjK0VyAA06Ignorelmno6TraitsH0VGGAaBHPqd0__AaBHD3_ARHO_AwA0cK0HPyHCHCTm(a1, &lazy cache variable for type metadata for _PreferenceWritingModifier<ListRowHoverEffectDisabledPreferenceKey>, (uint64_t)&type metadata for ListRowHoverEffectDisabledPreferenceKey, (uint64_t)&protocol witness table for ListRowHoverEffectDisabledPreferenceKey, &lazy protocol witness table cache variable for type _PreferenceWritingModifier<ListRowHoverEffectDisabledPreferenceKey> and conformance _PreferenceWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyAaBPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyADyxAA01_G15WritingModifierVyAA018ListRowHoverEffectgH0VGG_AA04Usesg5Basedlmn7EffectsH0VQo_AA06_TraitjK0VyAA06Ignorelmno6TraitsH0VGGAaBHPqd0__AaBHD3_ARHO_AwA0cK0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey> and conformance _PreferenceWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey>(255, a2, a3, a4, MEMORY[0x1E4F40F90]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowHoverEffectDisabledPreferenceKey()
{
  return &type metadata for ListRowHoverEffectDisabledPreferenceKey;
}

ValueMetadata *type metadata accessor for UsesPreferenceBasedListRowHoverEffectsKey()
{
  return &type metadata for UsesPreferenceBasedListRowHoverEffectsKey;
}

ValueMetadata *type metadata accessor for ListRowHoverEffectPreferenceKey()
{
  return &type metadata for ListRowHoverEffectPreferenceKey;
}

void static ListRowHoverEffectEnabledTraitKey.defaultValue.getter()
{
}

uint64_t PPTTestBridge.testCase.setter(uint64_t a1)
{
  swift_beginAccess();
  outlined assign with copy of PPTTestCase?(a1, v1 + 40);
  swift_endAccess();
  *(unsigned char *)(v1 + 32) = 1;
  uint64_t v3 = MEMORY[0x18C119DF0](v1 + 16);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return outlined destroy of PPTTestCase?(a1);
}

ValueMetadata *type metadata accessor for ValidTestCasesPreferenceKey()
{
  return &type metadata for ValidTestCasesPreferenceKey;
}

Swift::Void __swiftcall PPTTestBridge.finishPPTTest(_:)(SwiftUI::PPTTestCase::Name a1)
{
  uint64_t v1 = *(void *)a1.rawValue._countAndFlagsBits;
  uint64_t v2 = *(void **)(a1.rawValue._countAndFlagsBits + 8);
  if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
  {
    type metadata accessor for AGGraphRef(0);
    static AGGraphRef.stopTracing()();
  }
  else if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
  {
    AGGraphStopProfiling();
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = v1;
    v3._object = v2;
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 0x6E6F7A672D67612ELL;
    v4._object = (void *)0xE800000000000000;
    String.append(_:)(v4);
    specialized String.withCString<A>(_:)(0x2D6870617267, 0xE600000000000000);
    swift_bridgeObjectRelease();
    AGGraphResetProfile();
  }
  id v5 = objc_msgSend(self, sel_sharedApplication);
  unint64_t v6 = (void *)MEMORY[0x18C115780](v1, v2);
  objc_msgSend(v5, sel_finishedTest_, v6);

  long long v7 = xmmword_18834BB90;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  int v11 = 0;
  PPTTestBridge.testCase.setter((uint64_t)&v7);
}

uint64_t closure #1 in PPTTestBridge.finishPPTTest(_:)()
{
  return AGGraphArchiveJSON();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) == 0 && ((a2 & 0x2000000000000000) != 0 || (a1 & 0x1000000000000000) != 0)) {
    return AGGraphArchiveJSON();
  }
  else {
    return _StringGuts._slowWithCString<A>(_:)();
  }
}

Swift::Void __swiftcall PPTTestBridge.failPPTTest(_:reason:)(SwiftUI::PPTTestCase::Name _, Swift::String_optional reason)
{
  countAndFlagsBits = (void *)reason.value._countAndFlagsBits;
  object = _.rawValue._object;
  uint64_t v4 = *(void *)_.rawValue._countAndFlagsBits;
  uint64_t v5 = *(void *)(_.rawValue._countAndFlagsBits + 8);
  if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
  {
    type metadata accessor for AGGraphRef(0);
    static AGGraphRef.stopTracing()();
  }
  else if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
  {
    AGGraphStopProfiling();
    AGGraphResetProfile();
  }
  id v6 = objc_msgSend(self, sel_sharedApplication);
  long long v7 = (void *)MEMORY[0x18C115780](v4, v5);
  if (countAndFlagsBits) {
    countAndFlagsBits = (void *)MEMORY[0x18C115780](object, countAndFlagsBits);
  }
  objc_msgSend(v6, sel_failedTest_withFailure_, v7, countAndFlagsBits);

  long long v8 = xmmword_18834BB90;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  int v12 = 0;
  PPTTestBridge.testCase.setter((uint64_t)&v8);
}

uint64_t one-time initialization function for isEnabled()
{
  id v0 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v1 = objc_msgSend(v0, sel_isPPTAvailable);

  if (v1) {
    uint64_t result = _SwiftUIIsAppleInternalBuild();
  }
  else {
    uint64_t result = 0;
  }
  static ValidTestCasesFeature.isEnabled = result;
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance ValidTestCasesFeature()
{
  return PreferenceKeys.add(_:)();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance ValidTestCasesFeature()
{
  _ViewOutputs.subscript.getter();
  uint64_t result = AGCreateWeakAttribute();
  *id v0 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ValidTestCasesPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

void specialized PPTTestBridge.startPPTTest(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
  {
    type metadata accessor for AGGraphRef(0);
    static AGGraphRef.startTracing(options:)();
  }
  else if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
  {
    AGGraphStartProfiling();
  }
  id v3 = objc_msgSend(self, sel_sharedApplication);
  id v4 = (id)MEMORY[0x18C115780](v1, v2);
  objc_msgSend(v3, sel_startedTest_, v4);
}

uint64_t outlined assign with copy of PPTTestCase?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PPTTestCase?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ValidTestCasesFeature()
{
  return &type metadata for ValidTestCasesFeature;
}

ValueMetadata *type metadata accessor for CommandFlag()
{
  return &type metadata for CommandFlag;
}

uint64_t type metadata completion function for WithCommandFlag()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WithCommandFlag(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for WithCommandFlag(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

void *initializeWithCopy for WithCommandFlag(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithCopy for WithCommandFlag(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *initializeWithTake for WithCommandFlag(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for WithCommandFlag(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for WithCommandFlag(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for WithCommandFlag(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18785F158);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 8] & ~v8;
        int v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata accessor for WithCommandFlag()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t WithCommandFlag.SetFlag.container.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for WithCommandFlag();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t WithCommandFlag.SetFlag.list.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return 0;
  }
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag;
  if (!lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag;
  if (!lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Commands.Body : Commands in WithCommandFlag<A>()
{
  return &protocol witness table for Never;
}

void *WithCommandFlag.SetFlag.value.getter(uint64_t a1)
{
  uint64_t v22 = type metadata accessor for WithCommandFlag();
  uint64_t v2 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v4 = (uint64_t *)((char *)&v21 - v3);
  uint64_t v21 = type metadata accessor for CommandsList.Item.Value(0);
  MEMORY[0x1F4188790](v21);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for CommandsList.Item(0);
  uint64_t v8 = v7 - 8;
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  BOOL v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned int v13 = (char *)&v21 - v12;
  uint64_t v14 = WithCommandFlag.SetFlag.list.getter(a1);
  if (v14) {
    unsigned int v15 = (void *)v14;
  }
  else {
    unsigned int v15 = (void *)MEMORY[0x1E4FBC860];
  }
  WithCommandFlag.SetFlag.container.getter((uint64_t)v4);
  uint64_t v16 = *v4;
  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v22);
  *uint64_t v6 = v16;
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  uint64_t v17 = v24;
  outlined init with take of CommandsList.Item.Value((uint64_t)v6, (uint64_t)v13, type metadata accessor for CommandsList.Item.Value);
  *(void *)&v13[*(int *)(v8 + 28)] = v17;
  outlined init with copy of CommandsList.Item((uint64_t)v13, (uint64_t)v10, type metadata accessor for CommandsList.Item);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v15 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
  }
  unint64_t v19 = v15[2];
  unint64_t v18 = v15[3];
  if (v19 >= v18 >> 1) {
    unsigned int v15 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v15);
  }
  v15[2] = v19 + 1;
  outlined init with take of CommandsList.Item.Value((uint64_t)v10, (uint64_t)v15+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v19, type metadata accessor for CommandsList.Item);
  outlined destroy of CommandsList.Item.Value((uint64_t)v13, type metadata accessor for CommandsList.Item);
  return v15;
}

void *protocol witness for Rule.value.getter in conformance WithCommandFlag<A>.SetFlag@<X0>(void *a1@<X8>)
{
  unint64_t result = WithCommandFlag.SetFlag.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t static WithCommandFlag._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  long long v29 = a5;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v8 = *a1;
  unint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  int v14 = *(_DWORD *)(a2 + 56);
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  int v28 = v8;
  LODWORD(v35) = v8;
  type metadata accessor for WithCommandFlag();
  type metadata accessor for _GraphValue();
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  _GraphValue.subscript.getter();
  unint64_t v35 = v9;
  int v36 = v10;
  uint64_t v37 = v11;
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  uint64_t v40 = v13;
  unint64_t v41 = v12;
  int v42 = v14;
  (*(void (**)(unint64_t *__return_ptr, int *, unint64_t *, uint64_t, uint64_t))(a4 + 32))(&v31, &v30, &v35, a3, a4);
  unint64_t v35 = v12;
  int v36 = v14;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v35) = v28;
    unsigned int v18 = _GraphValue.value.getter();
    unint64_t v35 = v31;
    int v36 = v32;
    uint64_t v19 = PreferencesOutputs.subscript.getter();
    unsigned int v20 = *MEMORY[0x1E4F4E7A0];
    if ((v19 & 0x100000000) == 0) {
      unsigned int v20 = v19;
    }
    unint64_t v35 = __PAIR64__(v20, v18);
    MEMORY[0x1F4188790](v19);
    uint64_t v26 = type metadata accessor for WithCommandFlag.SetFlag();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<CommandsList>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)&v25, v26, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
    LOBYTE(v35) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v23 = v32;
  uint64_t v24 = v29;
  *long long v29 = v31;
  *((_DWORD *)v24 + 2) = v23;
  return result;
}

uint64_t closure #1 in static WithCommandFlag._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WithCommandFlag();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance WithCommandFlag<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return static WithCommandFlag._makeCommands(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t partial apply for closure #1 in static WithCommandFlag._makeCommands(content:inputs:)(uint64_t a1)
{
  return closure #1 in static WithCommandFlag._makeCommands(content:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in AppGraph.supports(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CommandsList.Item.Value(0);
  MEMORY[0x1F4188790](v6);
  int v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for CommandsList.Item(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(a1 + 232) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t v14 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v14) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    char v18 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    goto LABEL_10;
  }
LABEL_3:
  unsigned int v20 = a3;
  uint64_t v15 = v13 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v16 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of CommandsList.Item(v15, (uint64_t)v12, type metadata accessor for CommandsList.Item);
    outlined init with copy of CommandsList.Item((uint64_t)v12, (uint64_t)v8, type metadata accessor for CommandsList.Item.Value);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      if (*v8 == a2)
      {
        outlined destroy of CommandsList.Item.Value((uint64_t)v12, type metadata accessor for CommandsList.Item);
        uint64_t result = swift_bridgeObjectRelease_n();
        char v18 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      outlined destroy of CommandsList.Item.Value((uint64_t)v8, type metadata accessor for CommandsList.Item.Value);
    }
    outlined destroy of CommandsList.Item.Value((uint64_t)v12, type metadata accessor for CommandsList.Item);
    v15 += v16;
    --v14;
  }
  while (v14);
  uint64_t result = swift_bridgeObjectRelease_n();
  char v18 = 0;
LABEL_12:
  a3 = v20;
LABEL_13:
  *a3 = v18;
  return result;
}

uint64_t type metadata accessor for WithCommandFlag.SetFlag()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<CommandsList>()
{
  if (!lazy cache variable for type metadata for Attribute<CommandsList>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<CommandsList>);
    }
  }
}

uint64_t outlined init with copy of CommandsList.Item(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CommandsList.Item.Value(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in WithCommandFlag<A>.SetFlag()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with take of CommandsList.Item.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for _CommandsInputs()
{
  return &type metadata for _CommandsInputs;
}

uint64_t initializeBufferWithCopyOfBuffer for _CommandsOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _CommandsOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for _CommandsOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _CommandsOutputs()
{
  return &type metadata for _CommandsOutputs;
}

double AccessibilityGeometryStorage.updateFrame()()
{
  *(unsigned char *)(v0 + 17) = 0;
  if ((*(unsigned char *)(v0 + 80) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + 24);
    if (v1 != 1)
    {
      long long v7 = 0uLL;
      long long v8 = *(_OWORD *)(v0 + 64);
      uint64_t v5 = 0;
      memset(v4, 0, sizeof(v4));
      char v6 = 2;
      swift_retain();
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)v4);
      outlined consume of Transaction?(v1);
      double result = *(double *)&v7;
      long long v3 = v8;
      *(_OWORD *)(v0 + 88) = v7;
      *(_OWORD *)(v0 + 104) = v3;
      *(unsigned char *)(v0 + 120) = 0;
    }
  }
  return result;
}

uint64_t AccessibilityGeometryStorage.updatePath()()
{
  *(unsigned char *)(v0 + 16) = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  char v65 = 6;
  uint64_t v1 = swift_bridgeObjectRetain();
  unint64_t v2 = specialized Sequence.compactMap<A>(_:)(v1);
  swift_bridgeObjectRelease();
  if (v2 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    v72[0] = v63;
    v72[1] = v64;
    char v73 = v65;
    outlined init with take of Path.Storage((uint64_t)v72, (uint64_t)v83);
    outlined release of Path((uint64_t)v83, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    char v36 = Path.isEmpty.getter();
    uint64_t v37 = outlined release of Path((uint64_t)v72, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v36) {
      return outlined release of Path((uint64_t)v72, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    }
    uint64_t v62 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    char v61 = -1;
    MEMORY[0x1F4188790](v37);
    outlined release of Path((uint64_t)v83, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    Path.forEach(_:)();
    outlined release of Path((uint64_t)v72, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v62 == 1)
    {
      char v38 = v65;
      uint64_t v39 = *(void *)(v57 + 144);
      uint64_t v40 = *(void *)(v57 + 152);
      uint64_t v41 = *(void *)(v57 + 160);
      uint64_t v42 = *(void *)(v57 + 168);
      long long v43 = v64;
      *(_OWORD *)(v57 + 144) = v63;
      *(_OWORD *)(v57 + 160) = v43;
      unsigned __int8 v44 = *(unsigned char *)(v57 + 176);
      *(unsigned char *)(v57 + 176) = v38;
    }
    else
    {
      v70[0] = v63;
      v70[1] = v64;
      char v71 = v65;
      outlined init with take of Path.Storage((uint64_t)v70, (uint64_t)&v84);
      outlined release of Path((uint64_t)&v84, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      Path.boundingRect.getter();
      CGFloat v46 = v45;
      CGFloat v48 = v47;
      CGFloat v50 = v49;
      CGFloat v52 = v51;
      outlined release of Path((uint64_t)v70, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      v91.origin.x = v46;
      v91.origin.y = v48;
      v91.size.width = v50;
      v91.size.height = v52;
      CGRectStandardize(v91);
      Path.init(roundedRect:cornerRadius:style:)();
      uint64_t v53 = v66;
      long long v56 = v67;
      uint64_t v54 = v68;
      char v55 = v69;
      outlined release of Path((uint64_t)v70, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      uint64_t v39 = *(void *)(v57 + 144);
      uint64_t v40 = *(void *)(v57 + 152);
      uint64_t v41 = *(void *)(v57 + 160);
      uint64_t v42 = *(void *)(v57 + 168);
      *(void *)(v57 + 144) = v53;
      *(_OWORD *)(v57 + 152) = v56;
      *(void *)(v57 + 168) = v54;
      unsigned __int8 v44 = *(unsigned char *)(v57 + 176);
      *(unsigned char *)(v57 + 176) = v55;
    }
    return outlined consume of Path?(v39, v40, v41, v42, v44);
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v4 = 4;
  while (1)
  {
    uint64_t v5 = v4 - 4;
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t result = MEMORY[0x18C117680](v4 - 4, v2);
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v5, 1)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t result = swift_retain();
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v5, 1))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    uint64_t v8 = v3;
    uint64_t v9 = *(void *)(v57 + 136);
    if (!v9)
    {
      type metadata accessor for AccessibilityGeometryStorage.PathObserver();
      uint64_t v10 = swift_allocObject();
      swift_weakInit();
      swift_weakAssign();
      *(void *)(v57 + 136) = v10;
      uint64_t result = swift_release();
      uint64_t v9 = *(void *)(v57 + 136);
    }
    long long v84 = 0u;
    long long v85 = 0u;
    char v86 = 6;
    v83[0] = 64;
    *(void *)&long long v60 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    BYTE8(v60) = 2;
    if (!v9) {
      break;
    }
    swift_retain();
    dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)&v58);
    v79[0] = v84;
    v79[1] = v85;
    char v80 = v86;
    outlined init with take of Path.Storage((uint64_t)v79, (uint64_t)v81);
    outlined release of Path((uint64_t)v81, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    char v11 = Path.isEmpty.getter();
    uint64_t result = outlined release of Path((uint64_t)v79, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v11)
    {
      v83[0] = 1;
      *(void *)&long long v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      BYTE8(v60) = 2;
      if (!*(void *)(v57 + 136)) {
        goto LABEL_33;
      }
      swift_retain();
      dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
      swift_release();
      outlined destroy of CoordinateSpace((uint64_t)&v58);
    }
    long long v74 = v84;
    long long v75 = v85;
    char v76 = v86;
    outlined init with take of Path.Storage((uint64_t)&v74, (uint64_t)v82);
    outlined release of Path((uint64_t)v82, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    if (Path.isEmpty.getter())
    {
      outlined release of Path((uint64_t)&v74, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      swift_release();
      outlined release of Path((uint64_t)&v74, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      uint64_t v3 = v8;
    }
    else
    {
      Path.boundingRect.getter();
      CGRect v88 = CGRectStandardize(v87);
      uint64_t v3 = v8;
      if (!CGRectIsEmpty(v88))
      {
        Path.boundingRect.getter();
        CGFloat v13 = v12;
        CGFloat v15 = v14;
        CGFloat v17 = v16;
        CGFloat v19 = v18;
        v77[0] = v63;
        v77[1] = v64;
        char v78 = v65;
        Path.boundingRect.getter();
        v92.origin.x = v20;
        v92.origin.y = v21;
        v92.size.width = v22;
        v92.size.height = v23;
        v89.origin.x = v13;
        v89.origin.y = v15;
        v89.size.width = v17;
        v89.size.height = v19;
        if (CGRectContainsRect(v89, v92))
        {
          outlined release of Path((uint64_t)v77, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          swift_release();
          outlined release of Path((uint64_t)&v74, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          long long v63 = v74;
          long long v64 = v75;
          char v65 = v76;
          goto LABEL_5;
        }
        Path.boundingRect.getter();
        CGFloat v25 = v24;
        CGFloat v27 = v26;
        CGFloat v29 = v28;
        CGFloat v31 = v30;
        Path.boundingRect.getter();
        v93.origin.x = v32;
        v93.origin.y = v33;
        v93.size.width = v34;
        v93.size.height = v35;
        v90.origin.x = v25;
        v90.origin.y = v27;
        v90.size.width = v29;
        v90.size.height = v31;
        if (!CGRectContainsRect(v90, v93)) {
          Path.formTrivialUnion(_:)();
        }
      }
      outlined release of Path((uint64_t)&v74, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      swift_release();
      outlined release of Path((uint64_t)&v74, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    }
LABEL_5:
    ++v4;
    if (v7 == v3) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Path.accessibilityUnion(_:)(uint64_t a1)
{
  uint64_t result = Path.isEmpty.getter();
  if ((result & 1) == 0)
  {
    Path.boundingRect.getter();
    CGRect v35 = CGRectStandardize(v34);
    uint64_t result = CGRectIsEmpty(v35);
    if ((result & 1) == 0)
    {
      Path.boundingRect.getter();
      CGFloat v5 = v4;
      CGFloat v7 = v6;
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      long long v12 = *(_OWORD *)(v1 + 16);
      v31[0] = *(_OWORD *)v1;
      v31[1] = v12;
      char v32 = *(unsigned char *)(v1 + 32);
      Path.boundingRect.getter();
      v38.origin.x = v13;
      v38.origin.y = v14;
      v38.size.width = v15;
      v38.size.height = v16;
      v36.origin.x = v5;
      v36.origin.y = v7;
      v36.size.width = v9;
      v36.size.height = v11;
      if (CGRectContainsRect(v36, v38))
      {
        outlined release of Path((uint64_t)v31, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        long long v17 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
        *(_OWORD *)(v1 + 16) = v17;
        *(unsigned char *)(v1 + 32) = *(unsigned char *)(a1 + 32);
        outlined init with take of Path.Storage(a1, (uint64_t)v30);
        return outlined release of Path((uint64_t)v30, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      }
      else
      {
        Path.boundingRect.getter();
        CGFloat v19 = v18;
        CGFloat v21 = v20;
        CGFloat v23 = v22;
        CGFloat v25 = v24;
        Path.boundingRect.getter();
        v39.origin.x = v26;
        v39.origin.y = v27;
        v39.size.width = v28;
        v39.size.height = v29;
        v37.origin.x = v19;
        v37.origin.y = v21;
        v37.size.width = v23;
        v37.size.height = v25;
        uint64_t result = CGRectContainsRect(v37, v39);
        if ((result & 1) == 0)
        {
          return Path.formTrivialUnion(_:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AccessibilityGeometryStorage.updatePath()(uint64_t a1, uint64_t a2, void *a3)
{
  outlined init with take of Path.Element(a1, (uint64_t)v15);
  uint64_t v5 = v15[0];
  uint64_t v6 = v15[1];
  uint64_t v7 = v15[2];
  uint64_t v8 = v15[3];
  uint64_t v9 = v15[4];
  uint64_t v10 = v15[5];
  char v11 = v16;
  int v12 = *(unsigned __int8 *)(a2 + 48);
  uint64_t result = outlined init with take of Path.Element(a1, (uint64_t)v17);
  if (v17[48] || !v12) {
    goto LABEL_5;
  }
  if (!__OFADD__(*a3, 1))
  {
    ++*a3;
LABEL_5:
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 40) = v10;
    *(unsigned char *)(a2 + 48) = v11;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityGeometryStorage.PathObserver.__deallocating_deinit()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContentPathObserver.respondersDidChange(for:) in conformance AccessibilityGeometryStorage.PathObserver(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100310](a1, a2, WitnessTable);
}

uint64_t protocol witness for ContentPathObserver.contentPathDidChange(for:changes:transform:finished:) in conformance AccessibilityGeometryStorage.PathObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100308](a1, a2, a3, a4, a5, a6, WitnessTable);
}

uint64_t AccessibilityGeometryStorage.description.getter()
{
  _StringGuts.grow(_:)(225);
  v1._object = (void *)0x800000018832AC80;
  v1._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x800000018832ACA0;
  v2._countAndFlagsBits = 0x1000000000000015;
  String.append(_:)(v2);
  outlined copy of Transaction?(*(void *)(v0 + 24));
  uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for ViewTransform?(0, &lazy cache variable for type metadata for ViewTransform?, MEMORY[0x1E4F3F808], MEMORY[0x1E4FBB718]);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xBF96E2202020200ALL;
  v5._object = (void *)0xAF203A657A697320;
  String.append(_:)(v5);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _sSay7SwiftUI13ViewResponderCGMaTm_0(0, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E4FBB718]);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x1000000000000016;
  v8._object = (void *)0x800000018832ACC0;
  String.append(_:)(v8);
  _sSay7SwiftUI13ViewResponderCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, v6);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x100000000000001BLL;
  v10._object = (void *)0x800000018832ACE0;
  String.append(_:)(v10);
  if (*(unsigned char *)(v0 + 17)) {
    uint64_t v11 = 1702195828;
  }
  else {
    uint64_t v11 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 17)) {
    unint64_t v12 = 0xE400000000000000;
  }
  else {
    unint64_t v12 = 0xE500000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x800000018832AD00;
  v14._countAndFlagsBits = 0x1000000000000015;
  String.append(_:)(v14);
  outlined copy of Path?(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(unsigned char *)(v0 + 176));
  type metadata accessor for ViewTransform?(0, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0], v3);
  v15._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x100000000000001ALL;
  v16._object = (void *)0x800000018832AD20;
  String.append(_:)(v16);
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 16)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x1000000000000019;
  v20._object = (void *)0x800000018832AD40;
  String.append(_:)(v20);
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = specialized Sequence.compactMap<A>(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = type metadata accessor for ViewResponder();
  v24._countAndFlagsBits = MEMORY[0x18C115B70](v22, v23);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x1000000000000013;
  v25._object = (void *)0x800000018832AD60;
  String.append(_:)(v25);
  _sSay7SwiftUI13ViewResponderCGMaTm_0(0, &lazy cache variable for type metadata for AccessibilityGeometryStorage.PathObserver?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityGeometryStorage.PathObserver, v6);
  swift_retain();
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t AccessibilityGeometryStorage.__deallocating_deinit()
{
  outlined consume of Transaction?(*(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Path?(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(unsigned char *)(v0 + 176));
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessibilityGeometryStorage()
{
  return self;
}

uint64_t type metadata accessor for AccessibilityGeometryStorage.PathObserver()
{
  return self;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityGeometryStorage()
{
  return AccessibilityGeometryStorage.description.getter();
}

void protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance IgnoreViewRespondersModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) &= ~0x80u;
}

void protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance CaptureViewRespondersModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) |= 0x80u;
}

_UNKNOWN **base witness table accessor for ContentPathObserver in AccessibilityGeometryStorage.PathObserver()
{
  return &protocol witness table for AccessibilityGeometryStorage.PathObserver;
}

void protocol witness for ViewModifier.body(content:) in conformance CaptureViewRespondersModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityFrameModifier()
{
}

uint64_t ViewResponderTransform.updateValue()()
{
  unint64_t v2 = v0;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (unint64_t *)AGGraphGetValue();
  char v5 = v4;
  unint64_t v6 = *Value;
  Swift::String v7 = (void *)Value[1];
  int v8 = *(_DWORD *)(v0 + 12);
  if (*(unsigned char *)AGGraphGetValue() != 1
    || (uint64_t v9 = *MEMORY[0x1E4F4E7A0], v8 != v9) && (*(unsigned char *)AGGraphGetValue() & 0x41) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v10 = v6 >> 62;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 == 1)
    {
LABEL_30:
      if ((v5 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        BOOL v20 = 0;
        goto LABEL_44;
      }
      Hasher.init()();
      unint64_t v21 = v10;
      if (v10)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v22)
        {
LABEL_34:
          if (v22 >= 1)
          {
            for (uint64_t i = 0; i != v22; ++i)
            {
              if ((v6 & 0xC000000000000001) != 0) {
                Swift::String v24 = (char *)MEMORY[0x18C117680](i, v6);
              }
              else {
                Swift::String v24 = (char *)*(id *)(v6 + 8 * i + 32);
              }
              Swift::String v25 = v24;
              Hasher._combine(_:)(*(void *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id]);
            }
            goto LABEL_43;
          }
LABEL_99:
          __break(1u);
          goto LABEL_100;
        }
      }
      else
      {
        uint64_t v22 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v22) {
          goto LABEL_34;
        }
      }
LABEL_43:
      swift_bridgeObjectRelease();
      Swift::Int v26 = Hasher.finalize()();
      BOOL v20 = *(void *)(v2 + 32) != v26;
      *(void *)(v2 + 32) = v26;
      unint64_t v10 = v21;
      uint64_t v9 = v9;
LABEL_44:
      if (*(_DWORD *)(v2 + 8) == v9
        || (_sSay7SwiftUI13ViewResponderCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]), v27 = (void **)AGGraphGetValue(), v29 = v28, Swift::String v1 = *v27, swift_bridgeObjectRetain(), !v1))
      {
        swift_bridgeObjectRelease();
        Swift::String v1 = (void *)MEMORY[0x1E4FBC860];
        if (!v20) {
          goto LABEL_47;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if (((v20 | v29) & 1) == 0)
        {
LABEL_47:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          unint64_t v77 = v6;
          char v78 = v7;
          goto LABEL_20;
        }
      }
      int v30 = *(unsigned __int8 *)(v2 + 24);
      if (v30 != 255)
      {
        CGFloat v31 = (uint64_t *)(v2 + 16);
        LODWORD(v2) = v30 & 1;
LABEL_53:
        uint64_t v9 = *v31;
        if (v10) {
          goto LABEL_94;
        }
        uint64_t v32 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease_n();
        if (v32 != 1)
        {
          uint64_t v42 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v42)
          {
LABEL_96:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_97:
            uint64_t v83 = v6;
            long long v84 = v7;
            goto LABEL_20;
          }
          while (1)
          {
            unint64_t v43 = 0;
            unint64_t v44 = v6 & 0xC000000000000001;
            int v70 = v2;
            long long v74 = v7;
            unint64_t v71 = (unint64_t)v1;
            uint64_t v72 = v42;
            while (1)
            {
              if (v44)
              {
                double v45 = (char *)MEMORY[0x18C117680](v43, v6);
              }
              else
              {
                if (v43 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_93;
                }
                double v45 = (char *)*(id *)(v6 + 32 + 8 * v43);
              }
              CGFloat v46 = v45;
              if (__OFADD__(v43++, 1)) {
                break;
              }
              AccessibilityNode.visibility.getter((int *)&v83);
              if ((v83 & 4) != 0 || (v83 & 8) != 0 && (v83 & 0x400000000) == 0)
              {

                if (v43 == v42) {
                  goto LABEL_96;
                }
              }
              else
              {
                CGFloat v48 = v7;
                uint64_t v49 = v9;
                CGFloat v50 = (char **)&v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                swift_beginAccess();
                double v51 = *v50;
                uint64_t v52 = *((void *)*v50 + 2);
                if (v52)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v53 = (unsigned __int8 *)(v51 + 64);
                  uint64_t v54 = (unsigned __int8 *)(v51 + 64);
                  do
                  {
                    int v56 = *v54;
                    v54 += 40;
                    char v55 = v56;
                    if (v56 != 255)
                    {
                      uint64_t v83 = *((void *)v53 - 1);
                      LOBYTE(v84) = v55;
                      uint64_t v81 = v49;
                      LOBYTE(v82) = v2;
                      if (static AccessibilityAttachmentToken.== infix(_:_:)())
                      {
                        swift_bridgeObjectRelease();
                        uint64_t v9 = v49;
                        Swift::String v7 = v48;
                        goto LABEL_87;
                      }
                    }
                    uint64_t v53 = v54;
                    --v52;
                  }
                  while (v52);
                  swift_bridgeObjectRelease();
                }
                type metadata accessor for AnyAccessibilityPropertiesEntry();
                uint64_t v81 = Dictionary.init(minimumCapacity:)();
                static AccessibilityAttachment.properties(_:)();
                swift_bridgeObjectRelease();
                uint64_t v58 = v83;
                uint64_t v57 = v84;
                uint64_t v81 = v83;
                v82 = v84;
                AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v81);
                long long v59 = *v50;
                id v60 = v57;
                swift_bridgeObjectRetain_n();
                id v61 = v60;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *CGFloat v50 = v59;
                char v73 = v61;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  long long v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, v59);
                  *CGFloat v50 = v59;
                }
                unint64_t v2 = *((void *)v59 + 2);
                unint64_t v63 = *((void *)v59 + 3);
                if (v2 >= v63 >> 1)
                {
                  long long v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v2 + 1, 1, v59);
                  *CGFloat v50 = v59;
                }
                *((void *)v59 + 2) = v2 + 1;
                long long v64 = &v59[40 * v2];
                *((void *)v64 + 4) = v58;
                *((void *)v64 + 5) = v57;
                *((void *)v64 + 6) = 0;
                *((void *)v64 + 7) = v49;
                uint64_t v9 = v49;
                LODWORD(v2) = v70;
                v64[64] = v70;
                char v65 = &v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                uint64_t v66 = *(void *)&v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                long long v67 = *(void **)&v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *(void *)char v65 = 0;
                *((void *)v65 + 1) = 0;
                outlined consume of AccessibilityAttachment?(v66, v67);
                v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                swift_bridgeObjectRelease_n();
                Swift::String v7 = v74;
LABEL_87:
                Swift::String v1 = (void *)v71;
                uint64_t v83 = v9;
                LOBYTE(v84) = v2;
                AccessibilityNode.updateViewResponders(_:token:)(v71, &v83);

                unint64_t v44 = v6 & 0xC000000000000001;
                uint64_t v42 = v72;
                if (v43 == v72) {
                  goto LABEL_96;
                }
              }
            }
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            swift_bridgeObjectRetain();
            uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease_n();
            if (v69 == 1) {
              break;
            }
            swift_bridgeObjectRetain();
            uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v42) {
              goto LABEL_96;
            }
          }
        }
        if ((v6 & 0xC000000000000001) == 0)
        {
          if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            __break(1u);
          }
          CGFloat v33 = (char *)*(id *)(v6 + 32);
          goto LABEL_58;
        }
LABEL_101:
        CGFloat v33 = (char *)MEMORY[0x18C117680](0, v6);
LABEL_58:
        CGRect v34 = v33;
        swift_bridgeObjectRelease();
        CGRect v35 = &v34[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v36 = *(void *)v35;
        uint64_t v37 = *(void *)(v36 + 16);
        if (v37)
        {
          swift_bridgeObjectRetain();
          CGRect v38 = (unsigned __int8 *)(v36 + 64);
          CGRect v39 = (unsigned __int8 *)(v36 + 64);
          do
          {
            int v41 = *v39;
            v39 += 40;
            char v40 = v41;
            if (v41 != 255)
            {
              uint64_t v83 = *((void *)v38 - 1);
              LOBYTE(v84) = v40;
              uint64_t v81 = v9;
              LOBYTE(v82) = v2;
              if (static AccessibilityAttachmentToken.== infix(_:_:)())
              {
                swift_bridgeObjectRelease();
                goto LABEL_91;
              }
            }
            CGRect v38 = v39;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease();
        }
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        uint64_t v81 = Dictionary.init(minimumCapacity:)();
        static AccessibilityAttachment.properties(_:)();
        swift_bridgeObjectRelease();
        uint64_t v68 = v84;
        uint64_t v81 = v83;
        v82 = v84;
        uint64_t v79 = v9;
        char v80 = v2;
        specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(&v81, &v79);
        swift_bridgeObjectRelease();

LABEL_91:
        uint64_t v83 = v9;
        LOBYTE(v84) = v2;
        AccessibilityNode.updateViewResponders(_:token:)((unint64_t)v1, &v83);
        swift_bridgeObjectRelease();

        goto LABEL_97;
      }
      if (AGGraphGetCurrentAttribute() != v9)
      {
        CGFloat v31 = (uint64_t *)&v77;
        AccessibilityAttachmentToken.init<A>(_:)();
        LODWORD(v2) = v78;
        goto LABEL_53;
      }
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v11 == 1) {
      goto LABEL_30;
    }
  }
  unint64_t v12 = *(void *)AGGraphGetValue();
  uint64_t v76 = MEMORY[0x1E4FBC860];
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13)
    {
LABEL_8:
      unsigned int v75 = v9;
      if (v13 < 1)
      {
        __break(1u);
        goto LABEL_99;
      }
      for (uint64_t j = 0; j != v13; ++j)
      {
        if ((v12 & 0xC000000000000001) != 0) {
          id v15 = (id)MEMORY[0x18C117680](j, v12);
        }
        else {
          id v15 = *(id *)(v12 + 8 * j + 32);
        }
        Swift::String v1 = v15;
        AccessibilityNode.visibility.getter((int *)&v77);
        if ((v77 & 4) != 0 || (v77 & 8) != 0 && (v77 & 0x400000000) == 0)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = v76;
      uint64_t v9 = v75;
      unint64_t v10 = v6 >> 62;
      if (v76 < 0) {
        goto LABEL_41;
      }
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v10 = v6 >> 62;
  if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_29;
  }
LABEL_27:
  if ((v17 & 0x4000000000000000) != 0) {
    goto LABEL_41;
  }
  uint64_t v19 = *(void *)(v17 + 16);
LABEL_29:
  swift_release();
  if (v19 == 1) {
    goto LABEL_30;
  }
  swift_bridgeObjectRelease_n();
LABEL_20:
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewResponderTransform()
{
  return 0xD000000000000023;
}

void GeometryTransform.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (unint64_t *)AGGraphGetValue();
  char v4 = v3;
  unint64_t v5 = *Value;
  unint64_t v6 = Value[1];
  int v7 = *(_DWORD *)(v1 + 20);
  if (*(unsigned char *)AGGraphGetValue() != 1
    || (int v8 = *MEMORY[0x1E4F4E7A0], v7 != *MEMORY[0x1E4F4E7A0]) && (*(unsigned char *)AGGraphGetValue() & 0x41) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_13:
    uint64_t v60 = v5;
    *(void *)&long long v61 = v6;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return;
  }
  if (!(v5 >> 62))
  {
    uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v9 == 1) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v12 != 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v10 = (char *)*(id *)(v5 + 32);
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    BOOL v11 = *(void *)&v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id] != *(void *)(v1 + 40);
    goto LABEL_16;
  }
  unint64_t v10 = (char *)MEMORY[0x18C117680](0, v5);
  if (v4) {
    goto LABEL_15;
  }
LABEL_9:
  BOOL v11 = 0;
LABEL_16:
  uint64_t v13 = (uint64_t *)AGGraphGetValue();
  char v15 = v14;
  uint64_t v16 = *v13;
  uint64_t v17 = v13[1];
  uint64_t v18 = v13[2];
  uint64_t v19 = v13[3];
  BOOL v20 = (uint64_t *)AGGraphGetValue();
  char v22 = v21;
  uint64_t v23 = *v20;
  uint64_t v24 = v20[1];
  uint64_t v25 = AGGraphGetValue();
  char v27 = v26;
  uint64_t v28 = *(void *)v25;
  long long v51 = *(_OWORD *)(v25 + 8);
  uint64_t v29 = *(void *)(v25 + 24);
  uint64_t v30 = *(void *)(v25 + 32);
  swift_retain();
  uint64_t v31 = swift_bridgeObjectRelease();
  uint64_t v60 = v28;
  long long v61 = v51;
  *(void *)&long long v62 = v29;
  *((void *)&v62 + 1) = v30;
  char v32 = v27 | v11 | v15;
  if ((v32 & 1) == 0 && (v22 & 1) == 0)
  {
    uint64_t v53 = v5;
    *(void *)&long long v54 = v6;
    AGGraphSetOutputValue();
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
  int v33 = *(unsigned __int8 *)(v1 + 32);
  if (v33 != 255)
  {
    CGRect v34 = (uint64_t *)(v1 + 24);
    char v35 = v33 & 1;
    goto LABEL_23;
  }
  if (AGGraphGetCurrentAttribute() == v8) {
LABEL_37:
  }
    __break(1u);
  CGRect v34 = &v53;
  uint64_t v31 = AccessibilityAttachmentToken.init<A>(_:)();
  char v35 = v54;
LABEL_23:
  uint64_t v36 = *v34;
  unsigned __int8 v50 = v27 | v22;
  unsigned __int8 v52 = v32 ^ 1;
  uint64_t v53 = v23;
  *(void *)&long long v54 = v24;
  *(double *)&unint64_t v37 = MEMORY[0x18C10C240](v31);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v38, v37));
  CGRect v39 = &v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  uint64_t v40 = *(void *)v39;
  uint64_t v41 = *(void *)(v40 + 16);
  if (v41)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = (unsigned __int8 *)(v40 + 64);
    unint64_t v43 = (unsigned __int8 *)(v40 + 64);
    do
    {
      int v45 = *v43;
      v43 += 40;
      char v44 = v45;
      if (v45 != 255)
      {
        uint64_t v53 = *((void *)v42 - 1);
        LOBYTE(v54) = v44;
        uint64_t v58 = v36;
        LOBYTE(v59) = v35;
        if (static AccessibilityAttachmentToken.== infix(_:_:)())
        {
          uint64_t v46 = swift_bridgeObjectRelease();
          goto LABEL_31;
        }
      }
      uint64_t v42 = v43;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v58 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  double v47 = (void *)v54;
  uint64_t v58 = v53;
  uint64_t v59 = v54;
  uint64_t v56 = v36;
  char v57 = v35;
  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(&v58, &v56);
  swift_bridgeObjectRelease();

LABEL_31:
  if (v15)
  {
    uint64_t v53 = v16;
    *(void *)&long long v54 = v17;
    *((void *)&v54 + 1) = v18;
    *(void *)&long long v55 = v19;
    double v48 = MEMORY[0x18C114450](v46);
    uint64_t v53 = v36;
    LOBYTE(v54) = v35;
    AccessibilityNode.updateSize(_:token:)(&v53, v48, v49);
  }
  if ((v52 | v50))
  {
    uint64_t v53 = v60;
    long long v54 = v61;
    long long v55 = v62;
    uint64_t v58 = v36;
    LOBYTE(v59) = v35;
    swift_retain();
    AccessibilityNode.updateTransform(_:token:)(&v53, &v58);
    swift_release();
  }
  *(void *)(v1 + 40) = *(void *)&v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
  uint64_t v53 = v5;
  *(void *)&long long v54 = v6;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();

  swift_release();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeometryTransform()
{
  return 0xD00000000000001ELL;
}

uint64_t outlined copy of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined copy of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t sub_187861F80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_187861FA8()
{
  return swift_weakAssign();
}

uint64_t specialized AccessibilityGeometryStorage.PathObserver.contentPathDidChange(for:)()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 16) = 1;
    uint64_t v2 = *(void *)(result + 144);
    uint64_t v3 = *(void *)(v1 + 152);
    uint64_t v4 = *(void *)(v1 + 160);
    uint64_t v5 = *(void *)(v1 + 168);
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    unsigned __int8 v6 = *(unsigned char *)(v1 + 176);
    *(unsigned char *)(v1 + 176) = -1;
    outlined consume of Path?(v2, v3, v4, v5, v6);
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t outlined release of Path(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityGeometryStorage.updatePath()(uint64_t a1)
{
  return closure #1 in AccessibilityGeometryStorage.updatePath()(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with take of Path.Element(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type External<AccessibilityNodeList> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<AccessibilityNodeList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<AccessibilityNodeList> and conformance External<A>)
  {
    type metadata accessor for ViewTransform?(255, &lazy cache variable for type metadata for External<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityNodeList> and conformance External<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ViewResponderTransform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewResponderTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewResponderTransform()
{
  return &type metadata for ViewResponderTransform;
}

uint64_t getEnumTagSinglePayload for GeometryTransform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeometryTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeometryTransform()
{
  return &type metadata for GeometryTransform;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityFrameModifier()
{
  return &protocol witness table for AccessibilityFrameModifier;
}

uint64_t EnvironmentValues.findContext.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FindContext.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FindContext.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance FindContext.Key(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 18) = 1;
}

uint64_t View.findNavigator(isPresented:)()
{
  return swift_release();
}

uint64_t sub_187862494@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.findContext.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 17) = v5 & 1;
  *(unsigned char *)(a1 + 18) = v6 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.findContext : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t View.findDisabled(_:)(char a1)
{
  return View.findDisabled(_:)(a1);
}

{
  uint64_t vars8;

  swift_getKeyPath();
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t sub_1878625A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.findDisabled(_:)(uint64_t result)
{
  *(unsigned char *)(result + 17) = (*(unsigned char *)(v1 + 16) & 1) == 0;
  return result;
}

uint64_t View.replaceDisabled(_:)(char a1)
{
  return View.findDisabled(_:)(a1);
}

uint64_t sub_187862690()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.replaceDisabled(_:)(uint64_t result)
{
  *(unsigned char *)(result + 18) = (*(unsigned char *)(v1 + 16) & 1) == 0;
  return result;
}

uint64_t sub_1878626B4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11FindContextVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FindContext>, MEMORY[0x1E4F411E8], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FindContext> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_1878626F0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11FindContextVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<FindContext>, MEMORY[0x1E4F41280], &lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<FindContext> and conformance _EnvironmentKeyTransformModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11FindContextVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t), unint64_t *a4)
{
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<FindContext> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<FindContext>(255, a2, (uint64_t)&type metadata for FindContext, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FindContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  return a1;
}

uint64_t assignWithCopy for FindContext(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  *(unsigned char *)(a1 + 18) = *((unsigned char *)a2 + 18);
  return a1;
}

uint64_t outlined destroy of Binding<Bool>(uint64_t a1)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<FindContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<FindContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FindContext(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of Binding<Bool>(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for FindContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FindContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 19) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindContext()
{
  return &type metadata for FindContext;
}

void type metadata accessor for EnvironmentPropertyKey<FindContext.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<FindContext.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FindContext.Key()
{
  return &type metadata for FindContext.Key;
}

uint64_t AccessibilityNodeAttachment.attachment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CodableAccessibilityAttachmentStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = &v16[-v9];
  uint64_t v11 = type metadata accessor for AccessibilityNodeAttachment.Storage();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of AccessibilityNodeAttachment.Storage(v2, (uint64_t)v13, MEMORY[0x1E4F40FA0]);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v10, v13, v4);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v7, v10, v4);
    lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator();
    uint64_t v13 = v16;
    AccessibilityAttachment.init<A>(_:applicator:)();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v15 = *((void *)v13 + 1);
  *a1 = *(void *)v13;
  a1[1] = v15;
  return result;
}

void DisplayList.AccessibilityUpdater.createRoot()()
{
  uint64_t v1 = v0;
  if (MEMORY[0x18C119DF0](v0 + 24))
  {
    uint64_t v2 = *(void *)(v0 + 32);
    id v3 = objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    uint64_t v4 = swift_unknownObjectRetain();
    id v5 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v4, v2, 1);
    swift_unknownObjectRelease();
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v16 = Dictionary.init(minimumCapacity:)();
    int v7 = (void (*)(uint64_t *, void))AccessibilityProperties.visibility.modify();
    int v8 = v6[1];
    if ((v8 & 2) == 0) {
      v6[1] = v8 | 2;
    }
    if ((*v6 & 2) == 0) {
      *v6 |= 2u;
    }
    v7(&v14, 0);
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = (void *)v15;
    v13[0] = v14;
    v13[1] = v15;
    uint64_t v11 = 0;
    char v12 = -1;
    specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(v13, &v11);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    unint64_t v10 = *(void **)(v1 + 40);
    *(void *)(v1 + 40) = v5;
  }
}

uint64_t DisplayList.AccessibilityUpdater.update(item:state:)(uint64_t *a1, double *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  int v8 = (char *)&v280 - v7;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  unint64_t v13 = a1[5];
  unint64_t v291 = a1[4];
  unint64_t v14 = a1[6];
  uint64_t v293 = a1[7];
  int v15 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  LODWORD(v292) = *((_DWORD *)a1 + 17);
  LODWORD(v306) = v292;
  DisplayList.Index.enter(identity:)();
  long long v16 = v318;
  LODWORD(v17) = LOBYTE(v319[0]);
  switch(v14 >> 62)
  {
    case 1uLL:
      long long v290 = v318;
      switch(BYTE4(v14))
      {
        case 1:
          uint64_t v285 = v3;
          uint64_t v49 = swift_projectBox();
          outlined init with copy of DisplayList.ArchiveIDs?(v49, (uint64_t)v8);
          uint64_t v50 = type metadata accessor for DisplayList.ArchiveIDs();
          Swift::Bool v51 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v8, 1, v50) != 1;
          uint64_t v52 = v293;
          outlined copy of DisplayList.Item.Value(v13, v14);
          outlined copy of DisplayList.Effect(v13, v14, 1);
          swift_bridgeObjectRetain();
          DisplayList.Index.updateArchive(entering:)(v51);
          double v53 = a2[3];
          double v54 = a2[4];
          *(void *)&long long v318 = v10;
          *((void *)&v318 + 1) = v9;
          *(void *)&v319[0] = v12;
          *((void *)&v319[0] + 1) = v11;
          *(void *)&v319[1] = v291;
          *((void *)&v319[1] + 1) = v13;
          *(void *)&long long v320 = v14;
          *((void *)&v320 + 1) = v52;
          BYTE2(v321) = BYTE2(v15);
          LOWORD(v321) = v15;
          DWORD1(v321) = v292;
          DisplayList.Item.frame.getter();
          a2[3] = v53 + v55;
          a2[4] = v54 + v56;
          uint64_t v57 = *(void *)(v52 + 16);
          if (v57)
          {
            int v288 = v15;
            LODWORD(v289) = v17;
            *(void *)&long long v286 = v13;
            unint64_t v292 = v14;
            swift_bridgeObjectRetain();
            uint64_t v58 = (_DWORD *)(v52 + 100);
            do
            {
              uint64_t v59 = *(void *)(v58 - 9);
              uint64_t v60 = *(void *)(v58 - 7);
              unint64_t v61 = *(void *)(v58 - 5);
              uint64_t v62 = *(void *)(v58 - 3);
              char v63 = *((unsigned char *)v58 - 2);
              __int16 v64 = *((_WORD *)v58 - 2);
              int v65 = *v58;
              long long v318 = *(_OWORD *)(v58 - 17);
              v319[0] = *(_OWORD *)(v58 - 13);
              *(void *)&v319[1] = v59;
              *((void *)&v319[1] + 1) = v60;
              *(void *)&long long v320 = v61;
              *((void *)&v320 + 1) = v62;
              BYTE2(v321) = v63;
              LOWORD(v321) = v64;
              DWORD1(v321) = v65;
              outlined copy of DisplayList.Item.Value(v60, v61);
              DisplayList.AccessibilityUpdater.update(item:state:)(&v318, a2);
              outlined consume of DisplayList.Item.Value(v60, v61);
              v58 += 18;
              --v57;
            }
            while (v57);
            swift_bridgeObjectRelease();
            LOBYTE(v17) = v289;
            unint64_t v14 = v292;
            unint64_t v13 = v286;
          }
          outlined consume of DisplayList.Item.Value(v13, v14);
          swift_bridgeObjectRelease();
          a2[3] = v53;
          a2[4] = v54;
          outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v8);
          uint64_t v66 = v13;
          char v67 = v14;
          char v68 = 1;
LABEL_15:
          outlined consume of DisplayList.Effect(v66, v67, v68);
          long long v16 = v290;
          break;
        case 8:
          uint64_t v285 = v3;
          int v143 = v15;
          double v145 = *(double *)(v13 + 16);
          uint64_t v144 = *(void *)(v13 + 24);
          uint64_t v147 = *(void *)(v13 + 32);
          double v146 = *(double *)(v13 + 40);
          uint64_t v149 = *(void *)(v13 + 48);
          uint64_t v148 = *(void *)(v13 + 56);
          uint64_t v151 = *(void *)(v13 + 64);
          v150 = *(long long **)(v13 + 72);
          uint64_t v152 = *(void *)(v13 + 80);
          uint64_t v153 = *(unsigned __int8 *)(v13 + 88);
          *(double *)&long long v318 = v145;
          *(void *)&long long v280 = v144;
          *((void *)&v318 + 1) = v144;
          *(void *)&long long v281 = v147;
          *(void *)&v319[0] = v147;
          double v282 = v146;
          *(void *)&long long v283 = v149;
          *((double *)v319 + 1) = v146;
          *(void *)&v319[1] = v149;
          *((void *)&v283 + 1) = v148;
          uint64_t v284 = v151;
          *((void *)&v319[1] + 1) = v148;
          *(void *)&long long v320 = v151;
          v287 = v150;
          *((void *)&v320 + 1) = v150;
          uint64_t v289 = v152;
          *(void *)&long long v321 = v152;
          BYTE8(v321) = v153;
          uint64_t v154 = v293;
          int v288 = v143;
          outlined copy of DisplayList.Item.Value(v13, v14);
          outlined copy of DisplayList.Effect(v13, v14, 8);
          swift_bridgeObjectRetain();
          DisplayList.Transform.affineTransform.getter();
          outlined init with take of CGAffineTransform?((uint64_t)v330, (uint64_t)&v331);
          if (v332)
          {
            *(void *)&long long v286 = v13;
            unint64_t v155 = v14;
            switch(v153)
            {
              case 1:
                CGFloat v239 = v145;
                CGFloat v240 = *(double *)&v280;
                CGFloat v241 = *(double *)&v281;
                CGFloat v242 = v282;
                CGFloat v244 = *((double *)&v283 + 1);
                CGFloat v243 = *(double *)&v283;
                uint64_t v245 = v284;
                v246 = v287;
                uint64_t v247 = v289;
                break;
              case 3:
                *(double *)&long long v318 = v145;
                *((void *)&v318 + 1) = v280;
                *(void *)&v319[0] = v281;
                *((double *)v319 + 1) = v282;
                v319[1] = v283;
                *(void *)&long long v320 = v284;
                *((void *)&v320 + 1) = v287;
                *(void *)&long long v321 = v289;
                _Rotation3DEffect.Data.transform.getter();
                CGFloat v239 = *(double *)&v330[7];
                CGFloat v240 = *(double *)&v330[8];
                CGFloat v241 = *(double *)&v330[9];
                CGFloat v242 = *(double *)&v330[10];
                CGFloat v243 = *(double *)&v330[11];
                CGFloat v244 = *(double *)&v330[12];
                uint64_t v245 = v330[13];
                v246 = (long long *)v330[14];
                uint64_t v247 = v330[15];
                break;
              default:
                swift_bridgeObjectRelease();
                char v156 = v17;
                uint64_t v17 = v286;
                outlined consume of DisplayList.Item.Value(v286, v14);
                uint64_t v66 = v17;
                LOBYTE(v17) = v156;
                char v67 = v14;
                char v68 = 8;
                goto LABEL_15;
            }
            LODWORD(v289) = v17;
            _.a = v239;
            _.b = v240;
            _.c = v241;
            _.d = v242;
            _.tx = v243;
            _.ty = v244;
            uint64_t v334 = v245;
            v335 = v246;
            uint64_t v336 = v247;
            long long v248 = *((_OWORD *)a2 + 11);
            long long v249 = *((_OWORD *)a2 + 9);
            v327[0] = *((_OWORD *)a2 + 10);
            v327[1] = v248;
            long long v250 = *((_OWORD *)a2 + 11);
            long long v328 = *((_OWORD *)a2 + 12);
            long long v251 = *((_OWORD *)a2 + 7);
            long long v252 = *((_OWORD *)a2 + 5);
            long long v323 = *((_OWORD *)a2 + 6);
            long long v324 = v251;
            long long v253 = *((_OWORD *)a2 + 7);
            long long v254 = *((_OWORD *)a2 + 9);
            long long v325 = *((_OWORD *)a2 + 8);
            long long v326 = v254;
            long long v255 = *((_OWORD *)a2 + 3);
            long long v256 = *((_OWORD *)a2 + 1);
            v319[1] = *((_OWORD *)a2 + 2);
            long long v320 = v255;
            long long v257 = *((_OWORD *)a2 + 3);
            long long v258 = *((_OWORD *)a2 + 5);
            long long v321 = *((_OWORD *)a2 + 4);
            long long v322 = v258;
            long long v259 = *((_OWORD *)a2 + 1);
            long long v318 = *(_OWORD *)a2;
            v319[0] = v259;
            v315[0] = v327[0];
            v315[1] = v250;
            long long v316 = *((_OWORD *)a2 + 12);
            uint64_t v329 = *((void *)a2 + 26);
            long long v311 = v323;
            long long v312 = v253;
            double v260 = *((double *)&v259 + 1);
            double v261 = *(double *)&v319[1];
            uint64_t v317 = *((void *)a2 + 26);
            long long v313 = v325;
            long long v314 = v249;
            v307[1] = v319[1];
            long long v308 = v257;
            long long v309 = v321;
            long long v310 = v252;
            long long v306 = v318;
            v307[0] = v256;
            *(void *)&long long v294 = v10;
            *((void *)&v294 + 1) = v9;
            *(void *)&v295[0] = v12;
            *((void *)&v295[0] + 1) = v11;
            *(void *)&v295[1] = v291;
            *((void *)&v295[1] + 1) = v286;
            uint64_t v262 = v293;
            *(void *)&long long v296 = v14;
            *((void *)&v296 + 1) = v293;
            BYTE2(v297) = BYTE2(v288);
            LOWORD(v297) = v288;
            DWORD1(v297) = v292;
            outlined retain of DisplayList.AccessibilityUpdater.State((uint64_t)&v318);
            DisplayList.Item.frame.getter();
            double v264 = v260 + v263;
            double v266 = v261 + v265;
            *((double *)v307 + 1) = v264;
            *(double *)&v307[1] = v266;
            ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v266, *(unint64_t *)&v264));
            ViewTransform.appendProjectionTransform(_:inverse:)();
            uint64_t v267 = *(void *)(v262 + 16);
            if (v267)
            {
              v287 = (long long *)a2;
              swift_bridgeObjectRetain();
              v268 = (_DWORD *)(v262 + 100);
              do
              {
                uint64_t v269 = *(void *)(v268 - 9);
                uint64_t v270 = *(void *)(v268 - 7);
                unint64_t v271 = *(void *)(v268 - 5);
                uint64_t v272 = *(void *)(v268 - 3);
                char v273 = *((unsigned char *)v268 - 2);
                __int16 v274 = *((_WORD *)v268 - 2);
                int v275 = *v268;
                long long v294 = *(_OWORD *)(v268 - 17);
                v295[0] = *(_OWORD *)(v268 - 13);
                *(void *)&v295[1] = v269;
                *((void *)&v295[1] + 1) = v270;
                *(void *)&long long v296 = v271;
                *((void *)&v296 + 1) = v272;
                BYTE2(v297) = v273;
                LOWORD(v297) = v274;
                DWORD1(v297) = v275;
                outlined copy of DisplayList.Item.Value(v270, v271);
                DisplayList.AccessibilityUpdater.update(item:state:)(&v294, &v306);
                outlined consume of DisplayList.Item.Value(v270, v271);
                v268 += 18;
                --v267;
              }
              while (v267);
              swift_bridgeObjectRelease();
              unint64_t v14 = v155;
              a2 = (double *)v287;
            }
            uint64_t v276 = *((void *)&v316 + 1);
            uint64_t v277 = v317;
            a2[25] = *((double *)&v316 + 1);
            long long v294 = v306;
            LOBYTE(v295[0]) = v307[0];
            *(_OWORD *)((char *)v295 + 8) = *(_OWORD *)((char *)v307 + 8);
            *((void *)&v295[1] + 1) = *((void *)&v307[1] + 1);
            long long v296 = v308;
            long long v297 = v309;
            long long v298 = v310;
            long long v299 = v311;
            LOBYTE(v300) = v312;
            *((void *)&v300 + 1) = *((void *)&v312 + 1);
            long long v301 = v313;
            long long v302 = v314;
            LODWORD(v303[0]) = v315[0];
            BYTE4(v303[0]) = BYTE4(v315[0]);
            *(_OWORD *)((char *)v303 + 8) = *(_OWORD *)((char *)v315 + 8);
            *((void *)&v303[1] + 1) = *((void *)&v315[1] + 1);
            BYTE4(v304) = BYTE4(v316);
            LODWORD(v304) = v316;
            *((void *)&v304 + 1) = v276;
            uint64_t v305 = v277;
            outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v294);
            uint64_t v278 = v286;
            outlined consume of DisplayList.Item.Value(v286, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v278, v14, 8);
            *((void *)a2 + 26) = v277;
          }
          else
          {
            LODWORD(v289) = v17;
            CGAffineTransform _ = v331;
            long long v207 = *((_OWORD *)a2 + 11);
            long long v208 = *((_OWORD *)a2 + 9);
            v327[0] = *((_OWORD *)a2 + 10);
            v327[1] = v207;
            long long v209 = *((_OWORD *)a2 + 11);
            long long v328 = *((_OWORD *)a2 + 12);
            long long v210 = *((_OWORD *)a2 + 7);
            long long v211 = *((_OWORD *)a2 + 5);
            long long v323 = *((_OWORD *)a2 + 6);
            long long v324 = v210;
            long long v212 = *((_OWORD *)a2 + 7);
            long long v213 = *((_OWORD *)a2 + 9);
            long long v325 = *((_OWORD *)a2 + 8);
            long long v326 = v213;
            long long v214 = *((_OWORD *)a2 + 3);
            long long v215 = *((_OWORD *)a2 + 1);
            v319[1] = *((_OWORD *)a2 + 2);
            long long v320 = v214;
            long long v216 = *((_OWORD *)a2 + 3);
            long long v217 = *((_OWORD *)a2 + 5);
            long long v321 = *((_OWORD *)a2 + 4);
            long long v322 = v217;
            long long v218 = *((_OWORD *)a2 + 1);
            long long v318 = *(_OWORD *)a2;
            v319[0] = v218;
            v315[0] = v327[0];
            v315[1] = v209;
            long long v316 = *((_OWORD *)a2 + 12);
            long long v311 = v323;
            long long v312 = v212;
            long long v313 = v325;
            long long v314 = v208;
            v307[1] = v319[1];
            long long v308 = v216;
            uint64_t v329 = *((void *)a2 + 26);
            long long v309 = v321;
            long long v310 = v211;
            double v219 = *((double *)&v218 + 1);
            double v220 = *(double *)&v319[1];
            uint64_t v317 = *((void *)a2 + 26);
            long long v306 = v318;
            v307[0] = v215;
            *(void *)&long long v294 = v10;
            *((void *)&v294 + 1) = v9;
            *(void *)&v295[0] = v12;
            *((void *)&v295[0] + 1) = v11;
            *(void *)&v295[1] = v291;
            *((void *)&v295[1] + 1) = v13;
            *(void *)&long long v296 = v14;
            *((void *)&v296 + 1) = v154;
            BYTE2(v297) = BYTE2(v288);
            LOWORD(v297) = v288;
            DWORD1(v297) = v292;
            outlined retain of DisplayList.AccessibilityUpdater.State((uint64_t)&v318);
            DisplayList.Item.frame.getter();
            double v222 = v219 + v221;
            double v224 = v220 + v223;
            *((double *)v307 + 1) = v222;
            *(double *)&v307[1] = v224;
            ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v224, *(unint64_t *)&v222));
            ViewTransform.appendAffineTransform(_:inverse:)(&_, 1);
            uint64_t v225 = *(void *)(v154 + 16);
            if (v225)
            {
              v287 = (long long *)a2;
              *(void *)&long long v286 = v13;
              unint64_t v226 = v14;
              swift_bridgeObjectRetain();
              v227 = (_DWORD *)(v154 + 100);
              do
              {
                uint64_t v228 = *(void *)(v227 - 9);
                uint64_t v229 = *(void *)(v227 - 7);
                unint64_t v230 = *(void *)(v227 - 5);
                uint64_t v231 = *(void *)(v227 - 3);
                char v232 = *((unsigned char *)v227 - 2);
                __int16 v233 = *((_WORD *)v227 - 2);
                int v234 = *v227;
                long long v294 = *(_OWORD *)(v227 - 17);
                v295[0] = *(_OWORD *)(v227 - 13);
                *(void *)&v295[1] = v228;
                *((void *)&v295[1] + 1) = v229;
                *(void *)&long long v296 = v230;
                *((void *)&v296 + 1) = v231;
                BYTE2(v297) = v232;
                LOWORD(v297) = v233;
                DWORD1(v297) = v234;
                outlined copy of DisplayList.Item.Value(v229, v230);
                DisplayList.AccessibilityUpdater.update(item:state:)(&v294, &v306);
                outlined consume of DisplayList.Item.Value(v229, v230);
                v227 += 18;
                --v225;
              }
              while (v225);
              swift_bridgeObjectRelease();
              unint64_t v14 = v226;
              unint64_t v13 = v286;
              a2 = (double *)v287;
            }
            uint64_t v235 = *((void *)&v316 + 1);
            uint64_t v236 = v317;
            a2[25] = *((double *)&v316 + 1);
            long long v294 = v306;
            LOBYTE(v295[0]) = v307[0];
            *(_OWORD *)((char *)v295 + 8) = *(_OWORD *)((char *)v307 + 8);
            *((void *)&v295[1] + 1) = *((void *)&v307[1] + 1);
            long long v296 = v308;
            long long v297 = v309;
            long long v298 = v310;
            long long v299 = v311;
            LOBYTE(v300) = v312;
            *((void *)&v300 + 1) = *((void *)&v312 + 1);
            long long v301 = v313;
            long long v302 = v314;
            LODWORD(v303[0]) = v315[0];
            BYTE4(v303[0]) = BYTE4(v315[0]);
            *(_OWORD *)((char *)v303 + 8) = *(_OWORD *)((char *)v315 + 8);
            *((void *)&v303[1] + 1) = *((void *)&v315[1] + 1);
            BYTE4(v304) = BYTE4(v316);
            LODWORD(v304) = v316;
            *((void *)&v304 + 1) = v235;
            uint64_t v305 = v236;
            outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v294);
            outlined consume of DisplayList.Item.Value(v13, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v13, v14, 8);
            *((void *)a2 + 26) = v236;
          }
          goto LABEL_71;
        case 0xD:
          uint64_t v113 = *(void *)(v13 + 16);
          long long v114 = *((_OWORD *)a2 + 11);
          long long v115 = *((_OWORD *)a2 + 9);
          v315[0] = *((_OWORD *)a2 + 10);
          v315[1] = v114;
          long long v116 = *((_OWORD *)a2 + 11);
          long long v316 = *((_OWORD *)a2 + 12);
          long long v117 = *((_OWORD *)a2 + 7);
          long long v118 = *((_OWORD *)a2 + 5);
          long long v311 = *((_OWORD *)a2 + 6);
          long long v312 = v117;
          long long v119 = *((_OWORD *)a2 + 7);
          long long v120 = *((_OWORD *)a2 + 9);
          long long v313 = *((_OWORD *)a2 + 8);
          long long v314 = v120;
          long long v121 = *((_OWORD *)a2 + 3);
          long long v122 = *((_OWORD *)a2 + 1);
          v307[1] = *((_OWORD *)a2 + 2);
          long long v308 = v121;
          long long v123 = *((_OWORD *)a2 + 3);
          long long v124 = *((_OWORD *)a2 + 5);
          long long v309 = *((_OWORD *)a2 + 4);
          long long v310 = v124;
          long long v125 = *((_OWORD *)a2 + 1);
          long long v306 = *(_OWORD *)a2;
          v307[0] = v125;
          v303[0] = v315[0];
          v303[1] = v116;
          long long v304 = *((_OWORD *)a2 + 12);
          long long v299 = v311;
          long long v300 = v119;
          long long v301 = v313;
          long long v302 = v115;
          v295[1] = v307[1];
          long long v296 = v123;
          long long v297 = v309;
          long long v298 = v118;
          uint64_t v317 = *((void *)a2 + 26);
          uint64_t v305 = *((void *)a2 + 26);
          long long v294 = v306;
          v295[0] = v122;
          *(void *)&long long v318 = v10;
          *((void *)&v318 + 1) = v9;
          *(void *)&v319[0] = v12;
          *((void *)&v319[0] + 1) = v11;
          *(void *)&v319[1] = v291;
          *((void *)&v319[1] + 1) = v13;
          *(void *)&long long v320 = v14;
          uint64_t v126 = v293;
          *((void *)&v320 + 1) = v293;
          BYTE2(v321) = BYTE2(v15);
          LOWORD(v321) = v15;
          DWORD1(v321) = v292;
          swift_bridgeObjectRetain();
          outlined copy of DisplayList.Item.Value(v13, v14);
          outlined copy of DisplayList.Effect(v13, v14, 13);
          swift_bridgeObjectRetain();
          swift_retain();
          outlined retain of DisplayList.AccessibilityUpdater.State((uint64_t)&v306);
          specialized DisplayList.AccessibilityUpdater.addAttachments(_:item:state:_:)(v113, (uint64_t)&v318, (unsigned int *)&v294, v3, v3, v126, v15 & 0xFFFFFF);
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v127 = *((void *)&v304 + 1);
          uint64_t v128 = v305;
          a2[25] = *((double *)&v304 + 1);
          long long v318 = v294;
          LOBYTE(v319[0]) = v295[0];
          *(_OWORD *)((char *)v319 + 8) = *(_OWORD *)((char *)v295 + 8);
          *((void *)&v319[1] + 1) = *((void *)&v295[1] + 1);
          long long v320 = v296;
          long long v321 = v297;
          long long v322 = v298;
          long long v323 = v299;
          LOBYTE(v324) = v300;
          *((void *)&v324 + 1) = *((void *)&v300 + 1);
          long long v325 = v301;
          long long v326 = v302;
          LODWORD(v327[0]) = v303[0];
          BYTE4(v327[0]) = BYTE4(v303[0]);
          *(_OWORD *)((char *)v327 + 8) = *(_OWORD *)((char *)v303 + 8);
          *((void *)&v327[1] + 1) = *((void *)&v303[1] + 1);
          BYTE4(v328) = BYTE4(v304);
          LODWORD(v328) = v304;
          *((void *)&v328 + 1) = v127;
          uint64_t v329 = v128;
          outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v318);
          outlined consume of DisplayList.Item.Value(v13, v14);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v13, v14, 13);
          long long v16 = v290;
          *((void *)a2 + 26) = v128;
          break;
        case 0xF:
          uint64_t v285 = v3;
          int v157 = v15;
          uint64_t v158 = *(void *)(v13 + 16);
          uint64_t v159 = *(void *)(v13 + 24);
          int v160 = *(_DWORD *)(v13 + 32);
          long long v161 = *((_OWORD *)a2 + 11);
          long long v162 = *((_OWORD *)a2 + 9);
          v327[0] = *((_OWORD *)a2 + 10);
          v327[1] = v161;
          long long v163 = *((_OWORD *)a2 + 11);
          long long v328 = *((_OWORD *)a2 + 12);
          long long v164 = *((_OWORD *)a2 + 7);
          long long v165 = *((_OWORD *)a2 + 5);
          long long v323 = *((_OWORD *)a2 + 6);
          long long v324 = v164;
          long long v166 = *((_OWORD *)a2 + 7);
          long long v167 = *((_OWORD *)a2 + 9);
          long long v325 = *((_OWORD *)a2 + 8);
          long long v326 = v167;
          long long v168 = *((_OWORD *)a2 + 3);
          long long v169 = *((_OWORD *)a2 + 1);
          v319[1] = *((_OWORD *)a2 + 2);
          long long v320 = v168;
          long long v170 = *((_OWORD *)a2 + 3);
          long long v171 = *((_OWORD *)a2 + 5);
          long long v321 = *((_OWORD *)a2 + 4);
          long long v322 = v171;
          long long v172 = *((_OWORD *)a2 + 1);
          long long v318 = *(_OWORD *)a2;
          v319[0] = v172;
          v315[0] = v327[0];
          v315[1] = v163;
          long long v316 = *((_OWORD *)a2 + 12);
          long long v311 = v323;
          long long v312 = v166;
          long long v313 = v325;
          long long v314 = v162;
          v307[1] = v319[1];
          long long v308 = v170;
          uint64_t v329 = *((void *)a2 + 26);
          long long v309 = v321;
          long long v310 = v165;
          double v173 = *((double *)&v172 + 1);
          double v174 = *(double *)&v319[1];
          uint64_t v317 = *((void *)a2 + 26);
          long long v306 = v318;
          v307[0] = v169;
          uint64_t v289 = v158;
          *(void *)&long long v314 = v158;
          uint64_t v175 = v159;
          *((void *)&v314 + 1) = v159;
          int v176 = v160;
          LODWORD(v315[0]) = v160;
          BYTE4(v315[0]) = 0;
          *(void *)&long long v294 = v10;
          *((void *)&v294 + 1) = v9;
          *(void *)&v295[0] = v12;
          *((void *)&v295[0] + 1) = v11;
          *(void *)&v295[1] = v291;
          *((void *)&v295[1] + 1) = v13;
          uint64_t v177 = v293;
          *(void *)&long long v296 = v14;
          *((void *)&v296 + 1) = v293;
          BYTE2(v297) = BYTE2(v157);
          LOWORD(v297) = v157;
          DWORD1(v297) = v292;
          int v288 = v157;
          outlined copy of DisplayList.Item.Value(v13, v14);
          outlined copy of DisplayList.Effect(v13, v14, 15);
          swift_bridgeObjectRetain();
          outlined retain of DisplayList.AccessibilityUpdater.State((uint64_t)&v318);
          DisplayList.Item.frame.getter();
          double v179 = v173 + v178;
          double v181 = v174 + v180;
          *((double *)v307 + 1) = v179;
          *(double *)&v307[1] = v181;
          uint64_t v182 = *(void *)(v177 + 16);
          if (v182)
          {
            LODWORD(v289) = v17;
            v287 = (long long *)a2;
            *(void *)&long long v286 = v13;
            unint64_t v183 = v14;
            swift_bridgeObjectRetain();
            v184 = (_DWORD *)(v177 + 100);
            do
            {
              uint64_t v185 = *(void *)(v184 - 9);
              uint64_t v186 = *(void *)(v184 - 7);
              unint64_t v187 = *(void *)(v184 - 5);
              uint64_t v188 = *(void *)(v184 - 3);
              char v189 = *((unsigned char *)v184 - 2);
              __int16 v190 = *((_WORD *)v184 - 2);
              int v191 = *v184;
              long long v294 = *(_OWORD *)(v184 - 17);
              v295[0] = *(_OWORD *)(v184 - 13);
              *(void *)&v295[1] = v185;
              *((void *)&v295[1] + 1) = v186;
              *(void *)&long long v296 = v187;
              *((void *)&v296 + 1) = v188;
              BYTE2(v297) = v189;
              LOWORD(v297) = v190;
              DWORD1(v297) = v191;
              outlined copy of DisplayList.Item.Value(v186, v187);
              DisplayList.AccessibilityUpdater.update(item:state:)(&v294, &v306);
              outlined consume of DisplayList.Item.Value(v186, v187);
              v184 += 18;
              --v182;
            }
            while (v182);
            swift_bridgeObjectRelease();
            double v179 = *((double *)v307 + 1);
            double v181 = *(double *)&v307[1];
            uint64_t v175 = *((void *)&v314 + 1);
            uint64_t v192 = v314;
            int v176 = v315[0];
            char v193 = BYTE4(v315[0]);
            unint64_t v14 = v183;
            unint64_t v13 = v286;
            a2 = (double *)v287;
            LOBYTE(v17) = v289;
          }
          else
          {
            char v193 = 0;
            uint64_t v192 = v289;
          }
          uint64_t v237 = *((void *)&v316 + 1);
          uint64_t v238 = v317;
          a2[25] = *((double *)&v316 + 1);
          long long v294 = v306;
          LOBYTE(v295[0]) = v307[0];
          *((double *)v295 + 1) = v179;
          *(double *)&v295[1] = v181;
          *((void *)&v295[1] + 1) = *((void *)&v307[1] + 1);
          long long v296 = v308;
          long long v297 = v309;
          long long v298 = v310;
          long long v299 = v311;
          LOBYTE(v300) = v312;
          *((void *)&v300 + 1) = *((void *)&v312 + 1);
          long long v301 = v313;
          *(void *)&long long v302 = v192;
          *((void *)&v302 + 1) = v175;
          LODWORD(v303[0]) = v176;
          BYTE4(v303[0]) = v193;
          *(_OWORD *)((char *)v303 + 8) = *(_OWORD *)((char *)v315 + 8);
          *((void *)&v303[1] + 1) = *((void *)&v315[1] + 1);
          BYTE4(v304) = BYTE4(v316);
          LODWORD(v304) = v316;
          *((void *)&v304 + 1) = v237;
          uint64_t v305 = v238;
          outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v294);
          outlined consume of DisplayList.Item.Value(v13, v14);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v13, v14, 15);
          *((void *)a2 + 26) = v238;
          long long v16 = v290;
          break;
        default:
          double v129 = a2[3];
          double v130 = a2[4];
          *(void *)&long long v318 = v10;
          *((void *)&v318 + 1) = v9;
          *(void *)&v319[0] = v12;
          *((void *)&v319[0] + 1) = v11;
          *(void *)&v319[1] = v291;
          *((void *)&v319[1] + 1) = v13;
          *(void *)&long long v320 = v14;
          uint64_t v131 = v293;
          *((void *)&v320 + 1) = v293;
          BYTE2(v321) = BYTE2(v15);
          LOWORD(v321) = v15;
          DWORD1(v321) = v292;
          outlined copy of DisplayList.Item.Value(v13, v14);
          unint64_t v291 = HIDWORD(v14);
          outlined copy of DisplayList.Effect(v13, v14, SBYTE4(v14));
          swift_bridgeObjectRetain();
          DisplayList.Item.frame.getter();
          a2[3] = v129 + v132;
          a2[4] = v130 + v133;
          uint64_t v134 = *(void *)(v131 + 16);
          if (v134)
          {
            int v288 = v15;
            LODWORD(v289) = v17;
            *(void *)&long long v286 = v13;
            unint64_t v292 = v14;
            swift_bridgeObjectRetain();
            v135 = (_DWORD *)(v131 + 100);
            do
            {
              uint64_t v136 = *(void *)(v135 - 9);
              uint64_t v137 = *(void *)(v135 - 7);
              unint64_t v138 = *(void *)(v135 - 5);
              uint64_t v139 = *(void *)(v135 - 3);
              char v140 = *((unsigned char *)v135 - 2);
              __int16 v141 = *((_WORD *)v135 - 2);
              int v142 = *v135;
              long long v318 = *(_OWORD *)(v135 - 17);
              v319[0] = *(_OWORD *)(v135 - 13);
              *(void *)&v319[1] = v136;
              *((void *)&v319[1] + 1) = v137;
              *(void *)&long long v320 = v138;
              *((void *)&v320 + 1) = v139;
              BYTE2(v321) = v140;
              LOWORD(v321) = v141;
              DWORD1(v321) = v142;
              outlined copy of DisplayList.Item.Value(v137, v138);
              DisplayList.AccessibilityUpdater.update(item:state:)(&v318, a2);
              outlined consume of DisplayList.Item.Value(v137, v138);
              v135 += 18;
              --v134;
            }
            while (v134);
            swift_bridgeObjectRelease();
            LOBYTE(v17) = v289;
            unint64_t v14 = v292;
            unint64_t v13 = v286;
          }
          outlined consume of DisplayList.Item.Value(v13, v14);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v13, v14, v291);
          a2[3] = v129;
          a2[4] = v130;
          long long v16 = v290;
          break;
      }
      goto LABEL_72;
    case 2uLL:
      if (*((unsigned char *)a2 + 164)) {
        goto LABEL_72;
      }
      uint64_t v285 = v3;
      int v288 = v15;
      LODWORD(v289) = LOBYTE(v319[0]);
      long long v290 = v318;
      int v69 = v15;
      int v71 = *((_DWORD *)a2 + 39);
      int v70 = *((_DWORD *)a2 + 40);
      int v72 = *((_DWORD *)a2 + 37);
      int v73 = *((_DWORD *)a2 + 38);
      unint64_t v74 = v14;
      int v75 = *((_DWORD *)a2 + 36);
      double v76 = a2[3];
      double v77 = a2[4];
      *(void *)&long long v318 = v10;
      *((void *)&v318 + 1) = v9;
      *(void *)&v319[0] = v12;
      *((void *)&v319[0] + 1) = v11;
      *(void *)&v319[1] = v291;
      *((void *)&v319[1] + 1) = v13;
      *(void *)&long long v320 = v74;
      *((void *)&v320 + 1) = v293;
      BYTE2(v321) = BYTE2(v69);
      LOWORD(v321) = v69;
      DWORD1(v321) = v292;
      outlined copy of DisplayList.Item.Value(v13, v74);
      unint64_t v292 = v74;
      outlined copy of DisplayList.Item.Value(v13, v74);
      DisplayList.Item.frame.getter();
      a2[3] = v76 + v78;
      a2[4] = v77 + v79;
      v287 = (long long *)a2;
      uint64_t v80 = *(void *)(v13 + 16);
      if (!v80)
      {
        unint64_t v194 = v292;
        outlined consume of DisplayList.Item.Value(v13, v292);
        uint64_t v87 = v13;
        unint64_t v88 = v194;
LABEL_49:
        outlined consume of DisplayList.Item.Value(v87, v88);
        goto LABEL_50;
      }
      uint64_t v81 = (void *)(v13 + 56);
      while (1)
      {
        BOOL v82 = *((_DWORD *)v81 - 6) == v75 && *((_DWORD *)v81 - 5) == v72;
        BOOL v83 = v82 && *((_DWORD *)v81 - 4) == v73;
        BOOL v84 = v83 && *((_DWORD *)v81 - 3) == v71;
        if (v84 && *((_DWORD *)v81 - 2) == v70) {
          break;
        }
        v81 += 5;
        if (!--v80)
        {
          unint64_t v86 = v292;
          outlined consume of DisplayList.Item.Value(v13, v292);
          uint64_t v87 = v13;
          unint64_t v88 = v86;
          goto LABEL_49;
        }
      }
      uint64_t v196 = *v81;
      swift_bridgeObjectRetain();
      unint64_t v197 = v292;
      outlined consume of DisplayList.Item.Value(v13, v292);
      uint64_t v198 = *(void *)(v196 + 16);
      if (!v198)
      {
        outlined consume of DisplayList.Item.Value(v13, v197);
        swift_bridgeObjectRelease();
LABEL_50:
        long long v16 = v290;
        v195 = (double *)v287;
        goto LABEL_51;
      }
      *(void *)&long long v286 = v13;
      swift_bridgeObjectRetain();
      v199 = (_DWORD *)(v196 + 100);
      v195 = (double *)v287;
      do
      {
        uint64_t v200 = *(void *)(v199 - 9);
        uint64_t v201 = *(void *)(v199 - 7);
        unint64_t v202 = *(void *)(v199 - 5);
        uint64_t v203 = *(void *)(v199 - 3);
        char v204 = *((unsigned char *)v199 - 2);
        __int16 v205 = *((_WORD *)v199 - 2);
        int v206 = *v199;
        long long v318 = *(_OWORD *)(v199 - 17);
        v319[0] = *(_OWORD *)(v199 - 13);
        *(void *)&v319[1] = v200;
        *((void *)&v319[1] + 1) = v201;
        *(void *)&long long v320 = v202;
        *((void *)&v320 + 1) = v203;
        BYTE2(v321) = v204;
        LOWORD(v321) = v205;
        DWORD1(v321) = v206;
        outlined copy of DisplayList.Item.Value(v201, v202);
        DisplayList.AccessibilityUpdater.update(item:state:)(&v318, v195);
        outlined consume of DisplayList.Item.Value(v201, v202);
        v199 += 18;
        --v198;
      }
      while (v198);
      swift_bridgeObjectRelease();
      outlined consume of DisplayList.Item.Value(v286, v292);
      swift_bridgeObjectRelease();
      long long v16 = v290;
LABEL_51:
      LOBYTE(v17) = v289;
      v195[3] = v76;
      v195[4] = v77;
LABEL_72:
      long long v318 = v16;
      LOBYTE(v319[0]) = v17;
      return DisplayList.Index.leave(index:)();
    case 3uLL:
      goto LABEL_72;
    default:
      if (v13 >> 60 == 4)
      {
        long long v290 = v318;
        long long v89 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        *(_OWORD *)&_.a = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        *(_OWORD *)&_.c = v89;
        char v90 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        long long v91 = *((_OWORD *)a2 + 11);
        long long v92 = *((_OWORD *)a2 + 9);
        v315[0] = *((_OWORD *)a2 + 10);
        v315[1] = v91;
        long long v93 = *((_OWORD *)a2 + 11);
        long long v316 = *((_OWORD *)a2 + 12);
        long long v94 = *((_OWORD *)a2 + 7);
        long long v95 = *((_OWORD *)a2 + 5);
        long long v311 = *((_OWORD *)a2 + 6);
        long long v312 = v94;
        long long v96 = *((_OWORD *)a2 + 7);
        long long v97 = *((_OWORD *)a2 + 9);
        long long v313 = *((_OWORD *)a2 + 8);
        long long v314 = v97;
        long long v98 = *((_OWORD *)a2 + 3);
        long long v99 = *((_OWORD *)a2 + 1);
        v307[1] = *((_OWORD *)a2 + 2);
        long long v308 = v98;
        long long v100 = *((_OWORD *)a2 + 3);
        long long v101 = *((_OWORD *)a2 + 5);
        long long v309 = *((_OWORD *)a2 + 4);
        long long v310 = v101;
        long long v102 = *((_OWORD *)a2 + 1);
        long long v306 = *(_OWORD *)a2;
        v307[0] = v102;
        v303[0] = v315[0];
        v303[1] = v93;
        long long v304 = *((_OWORD *)a2 + 12);
        LOBYTE(_.tx) = v90;
        uint64_t v317 = *((void *)a2 + 26);
        long long v299 = v311;
        long long v300 = v96;
        long long v286 = *(_OWORD *)((char *)v315 + 8);
        v287 = (long long *)*((void *)&v315[1] + 1);
        unint64_t v292 = v316;
        unint64_t v291 = BYTE4(v316);
        LODWORD(v289) = LOBYTE(v319[0]);
        *((void *)&v283 + 1) = *((void *)&v97 + 1);
        LODWORD(v284) = v315[0];
        LODWORD(v285) = BYTE4(v315[0]);
        uint64_t v103 = *((void *)&v312 + 1);
        unint64_t v104 = *((void *)&v307[1] + 1);
        long long v301 = v313;
        long long v302 = v92;
        long long v281 = v98;
        v295[1] = v307[1];
        long long v296 = v100;
        long long v105 = v309;
        long long v297 = v309;
        long long v298 = v95;
        uint64_t v106 = *((void *)&v102 + 1);
        unint64_t v107 = *(void *)&v307[1];
        char v108 = v102;
        double v282 = *(double *)&v97;
        *(void *)&long long v283 = v317;
        uint64_t v109 = *((void *)&v316 + 1);
        uint64_t v305 = *((void *)a2 + 26);
        long long v294 = v306;
        v295[0] = v99;
        outlined copy of DisplayList.Item.Value(v13, v14);
        outlined copy of DisplayList.Item.Value(v13, v14);
        outlined copy of DisplayList.Item.Value(v13, v14);
        long long v280 = v313;
        long long v110 = v306;
        outlined retain of Path.Storage((uint64_t)&_, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        outlined retain of DisplayList.AccessibilityUpdater.State((uint64_t)&v306);
        closure #2 in DisplayList.AccessibilityUpdater.update(item:state:)((unsigned int *)&v294);
        *((void *)a2 + 25) = v109;
        long long v318 = v110;
        LOBYTE(v319[0]) = v108;
        *((void *)&v319[0] + 1) = v106;
        v319[1] = __PAIR128__(v104, v107);
        long long v320 = v281;
        long long v321 = v105;
        long long v322 = v298;
        long long v323 = v299;
        LOBYTE(v324) = v300;
        *((void *)&v324 + 1) = v103;
        long long v325 = v280;
        uint64_t v111 = v283;
        *(double *)&long long v326 = v282;
        *((void *)&v326 + 1) = *((void *)&v283 + 1);
        char v112 = v289;
        LODWORD(v327[0]) = v284;
        BYTE4(v327[0]) = v285;
        *(_OWORD *)((char *)v327 + 8) = v286;
        *((void *)&v327[1] + 1) = v287;
        BYTE4(v328) = v291;
        LODWORD(v328) = v292;
        *((void *)&v328 + 1) = v109;
        uint64_t v329 = v283;
        outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v318);
        outlined consume of DisplayList.Item.Value(v13, v14);
        outlined consume of DisplayList.Item.Value(v13, v14);
        outlined retain of Path.Storage((uint64_t)&_, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        LOBYTE(v17) = v112;
        outlined consume of DisplayList.Item.Value(v13, v14);
        long long v16 = v290;
        *((void *)a2 + 26) = v111;
      }
      else if (v13 >> 60 == 9)
      {
        LODWORD(v289) = LOBYTE(v319[0]);
        long long v290 = v318;
        uint64_t v18 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        long long v19 = *((_OWORD *)a2 + 11);
        long long v20 = *((_OWORD *)a2 + 9);
        v327[0] = *((_OWORD *)a2 + 10);
        v327[1] = v19;
        long long v21 = *((_OWORD *)a2 + 11);
        long long v328 = *((_OWORD *)a2 + 12);
        long long v22 = *((_OWORD *)a2 + 7);
        long long v23 = *((_OWORD *)a2 + 5);
        long long v323 = *((_OWORD *)a2 + 6);
        long long v324 = v22;
        long long v24 = *((_OWORD *)a2 + 7);
        long long v25 = *((_OWORD *)a2 + 9);
        long long v325 = *((_OWORD *)a2 + 8);
        long long v326 = v25;
        long long v26 = *((_OWORD *)a2 + 3);
        long long v27 = *((_OWORD *)a2 + 1);
        v319[1] = *((_OWORD *)a2 + 2);
        long long v320 = v26;
        long long v28 = *((_OWORD *)a2 + 3);
        long long v29 = *((_OWORD *)a2 + 5);
        long long v321 = *((_OWORD *)a2 + 4);
        long long v322 = v29;
        long long v30 = *((_OWORD *)a2 + 1);
        long long v318 = *(_OWORD *)a2;
        v319[0] = v30;
        v315[0] = v327[0];
        v315[1] = v21;
        long long v316 = *((_OWORD *)a2 + 12);
        long long v311 = v323;
        long long v312 = v24;
        long long v313 = v325;
        long long v314 = v20;
        v307[1] = v319[1];
        long long v308 = v28;
        uint64_t v329 = *((void *)a2 + 26);
        long long v309 = v321;
        long long v310 = v23;
        double v31 = *((double *)&v30 + 1);
        double v32 = *(double *)&v319[1];
        v287 = (long long *)a2;
        uint64_t v317 = *((void *)a2 + 26);
        long long v306 = v318;
        v307[0] = v27;
        *(void *)&long long v294 = v10;
        *((void *)&v294 + 1) = v9;
        *(void *)&v295[0] = v12;
        *((void *)&v295[0] + 1) = v11;
        *(void *)&v295[1] = v291;
        *((void *)&v295[1] + 1) = v13;
        *(void *)&long long v296 = v14;
        *((void *)&v296 + 1) = v293;
        BYTE2(v297) = BYTE2(v15);
        LOWORD(v297) = v15;
        DWORD1(v297) = v292;
        outlined copy of DisplayList.Item.Value(v13, v14);
        outlined copy of DisplayList.Item.Value(v13, v14);
        outlined copy of DisplayList.Item.Value(v13, v14);
        outlined retain of DisplayList.AccessibilityUpdater.State((uint64_t)&v318);
        DisplayList.Item.frame.getter();
        double v34 = v31 + v33;
        double v36 = v32 + v35;
        *((double *)v307 + 1) = v34;
        *(double *)&v307[1] = v36;
        uint64_t v37 = *(void *)(v18 + 16);
        if (v37)
        {
          int v288 = v15;
          *(void *)&long long v286 = v13;
          swift_bridgeObjectRetain();
          unint64_t v38 = (_DWORD *)(v18 + 100);
          do
          {
            uint64_t v39 = *(void *)(v38 - 9);
            uint64_t v40 = *(void *)(v38 - 7);
            unint64_t v41 = *(void *)(v38 - 5);
            uint64_t v42 = *(void *)(v38 - 3);
            char v43 = *((unsigned char *)v38 - 2);
            __int16 v44 = *((_WORD *)v38 - 2);
            int v45 = *v38;
            long long v294 = *(_OWORD *)(v38 - 17);
            v295[0] = *(_OWORD *)(v38 - 13);
            *(void *)&v295[1] = v39;
            *((void *)&v295[1] + 1) = v40;
            *(void *)&long long v296 = v41;
            *((void *)&v296 + 1) = v42;
            BYTE2(v297) = v43;
            LOWORD(v297) = v44;
            DWORD1(v297) = v45;
            outlined copy of DisplayList.Item.Value(v40, v41);
            DisplayList.AccessibilityUpdater.update(item:state:)(&v294, &v306);
            outlined consume of DisplayList.Item.Value(v40, v41);
            v38 += 18;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease();
          double v34 = *((double *)v307 + 1);
          double v36 = *(double *)&v307[1];
          unint64_t v13 = v286;
        }
        uint64_t v46 = *((void *)&v316 + 1);
        uint64_t v47 = v317;
        double v48 = v287;
        *((void *)v287 + 25) = *((void *)&v316 + 1);
        long long v294 = v306;
        LOBYTE(v295[0]) = v307[0];
        *((double *)v295 + 1) = v34;
        *(double *)&v295[1] = v36;
        *((void *)&v295[1] + 1) = *((void *)&v307[1] + 1);
        long long v296 = v308;
        long long v297 = v309;
        long long v298 = v310;
        long long v299 = v311;
        LOBYTE(v300) = v312;
        *((void *)&v300 + 1) = *((void *)&v312 + 1);
        long long v301 = v313;
        long long v302 = v314;
        LODWORD(v303[0]) = v315[0];
        BYTE4(v303[0]) = BYTE4(v315[0]);
        *(_OWORD *)((char *)v303 + 8) = *(_OWORD *)((char *)v315 + 8);
        *((void *)&v303[1] + 1) = *((void *)&v315[1] + 1);
        BYTE4(v304) = BYTE4(v316);
        LODWORD(v304) = v316;
        *((void *)&v304 + 1) = v46;
        uint64_t v305 = v47;
        outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v294);
        outlined consume of DisplayList.Item.Value(v13, v14);
        outlined consume of DisplayList.Item.Value(v13, v14);
        outlined consume of DisplayList.Item.Value(v13, v14);
        *((void *)v48 + 26) = v47;
LABEL_71:
        long long v16 = v290;
        LOBYTE(v17) = v289;
      }
      goto LABEL_72;
  }
}

uint64_t closure #2 in DisplayList.AccessibilityUpdater.update(item:state:)(unsigned int *a1)
{
  Path.offsetBy(dx:dy:)();
  uint64_t v2 = a1 + 20;
  Path.accessibilityUnion(_:)((uint64_t)v17);
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*((void *)a1 + 17) + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (unsigned __int8 *)(v5 + 64);
    int v8 = (unsigned __int8 *)(v5 + 64);
    do
    {
      int v10 = *v8;
      v8 += 40;
      char v9 = v10;
      if (v10 != 255)
      {
        *(void *)&v18[0] = *((void *)v7 - 1);
        BYTE8(v18[0]) = v9;
        *(void *)&long long v16 = v3;
        BYTE8(v16) = 1;
        if (static AccessibilityAttachmentToken.== infix(_:_:)())
        {
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      uint64_t v7 = v8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  AccessibilityAttachment.init()();
  uint64_t v11 = (void *)*((void *)&v18[0] + 1);
  long long v16 = v18[0];
  uint64_t v14 = v3;
  char v15 = 1;
  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v16, &v14);
  swift_bridgeObjectRelease();

LABEL_9:
  long long v12 = *((_OWORD *)v2 + 1);
  v18[0] = *(_OWORD *)v2;
  v18[1] = v12;
  char v19 = *((unsigned char *)v2 + 32);
  *(void *)&long long v16 = v3;
  BYTE8(v16) = 1;
  AccessibilityNode.updatePath(_:token:)((uint64_t)v18, (uint64_t *)&v16);
  return outlined retain of Path.Storage((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
}

void DisplayList.AccessibilityUpdater.addNode(item:state:)(uint64_t a1, unint64_t *a2)
{
  void (*v89)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t (*v97)(void, uint64_t);
  int v98;
  unint64_t *v99;
  BOOL v100;
  char v101;
  char *v102;
  unint64_t v103;
  uint64_t *v104;
  char *v105;
  uint64_t *v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  char v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  int v116;
  unint64_t *v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  int v128;
  unint64_t *v129;
  char v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  uint64_t (*v143)(void, uint64_t);
  int v144;
  unint64_t *v145;
  BOOL v146;
  void *v147;
  void *v148;
  void *v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  unint64_t *v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  void *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  unint64_t *v169;
  char *v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  BOOL v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  unint64_t v192;
  id v193;
  uint64_t v194;
  uint64_t (*v195)();
  void *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t *v203;
  void (**v204)(char *, uint64_t);
  void (**v205)(char *, char *, uint64_t);
  void (**v206)(char *, uint64_t, uint64_t);
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char **v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  int v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  long long v242;
  long long v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  CGRect v249;
  CGRect v250;

  long long v209 = type metadata accessor for CodableAccessibilityAttachmentStorage();
  uint64_t v3 = *(void *)(v209 - 8);
  MEMORY[0x1F4188790](v209);
  long long v208 = (char *)&v199 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  long long v207 = (char *)&v199 - v6;
  long long v213 = type metadata accessor for AccessibilityNodeAttachment.Storage();
  MEMORY[0x1F4188790](v213);
  long long v215 = (char **)((char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AccessibilityNodeAttachment();
  long long v212 = *(void *)(v8 - 8);
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  long long v217 = (uint64_t)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a2[16] + 16)) {
    return;
  }
  uint64_t v11 = a2[17] + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost;
  if (!MEMORY[0x18C119DF0](v11, v9)) {
    return;
  }
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = v211;
  unint64_t v14 = *a2;
  unint64_t v15 = a2[1];
  uint64_t v203 = (uint64_t *)(v211 + 48);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v13 + 48);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v201 = v14;
  if (v17 && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v19 & 1) != 0))
  {
    long long v20 = *(void **)(*(void *)(v16 + 56) + 16 * v18);
    swift_endAccess();
    id v21 = v20;
    swift_bridgeObjectRetain();
    long long v216 = (char *)v21;
    outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v20);
    long long v22 = v203;
  }
  else
  {
    swift_endAccess();
    id v23 = objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    uint64_t v24 = swift_unknownObjectRetain();
    id v25 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v24, v12, 1);
    swift_unknownObjectRelease();
    unint64_t v26 = v15;
    long long v27 = (char *)v25;
    unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    long long v29 = v203;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    CGFloat v244 = *v29;
    *long long v29 = 0x8000000000000000;
    long long v216 = v27;
    uint64_t v31 = (uint64_t)v27;
    unint64_t v15 = v26;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v28, v14, v26, isUniquelyReferenced_nonNull_native);
    long long v22 = v29;
    *long long v29 = v244;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v32 = *v22;
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v200 = v15;
  if (v33 && (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v201, v15), (v35 & 1) != 0))
  {
    uint64_t v36 = *(void *)(v32 + 56) + 16 * v34;
    uint64_t v37 = *(void **)v36;
    unint64_t v38 = *(char **)(v36 + 8);
    swift_endAccess();
    id v39 = v37;
    swift_bridgeObjectRetain_n();
    outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v37);
  }
  else
  {
    swift_endAccess();
    unint64_t v38 = (char *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  unint64_t v40 = a2[16];
  uint64_t v41 = *(void *)(v40 + 16);
  uint64_t v42 = v216;
  if (!v41) {
    goto LABEL_97;
  }
  char v43 = &v216[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  double v219 = v40 + 32;
  swift_bridgeObjectRetain();
  unint64_t v230 = (unint64_t *)v43;
  swift_beginAccess();
  __int16 v205 = (void (**)(char *, char *, uint64_t))(v3 + 16);
  int v206 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  char v204 = (void (**)(char *, uint64_t))(v3 + 8);
  long long v210 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v231 = a2;
  long long v218 = v40;
  while (v41 <= *(void *)(v40 + 16))
  {
    uint64_t v229 = v41 - 1;
    __int16 v44 = (uint64_t *)(v219 + 120 * (v41 - 1));
    uint64_t v46 = *v44;
    int v45 = (char *)v44[1];
    uint64_t v47 = v44[2];
    double v222 = v44[3];
    double v223 = v47;
    uint64_t v48 = v44[4];
    double v220 = v44[5];
    double v221 = v48;
    uint64_t v49 = v44[6];
    uint64_t v50 = v44[8];
    double v224 = v44[7];
    uint64_t v225 = v49;
    uint64_t v51 = v44[9];
    uint64_t v52 = v44[10];
    uint64_t v53 = v44[11];
    double v54 = v38;
    int v55 = *((unsigned __int8 *)v44 + 96);
    uint64_t v56 = *(uint64_t *)((char *)v44 + 100);
    uint64_t v237 = *((unsigned __int8 *)v44 + 108);
    unint64_t v226 = v44[14];
    uint64_t v57 = *((void *)v54 + 2);
    uint64_t v235 = v45;
    swift_retain();
    uint64_t v236 = v46;
    swift_bridgeObjectRetain();
    __int16 v233 = v53;
    int v234 = v50;
    uint64_t v58 = v50;
    uint64_t v59 = v51;
    uint64_t v60 = v52;
    char v232 = v55;
    unsigned __int8 v61 = v55;
    unint64_t v38 = v54;
    outlined copy of Path.Storage(v58, v51, v52, v53, v61);
    if (v57)
    {
      unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v237);
      if ((v63 & 1) != 0 && *(void *)(*((void *)v54 + 7) + 8 * v62) == v226)
      {
        a2 = v231;
LABEL_34:
        uint64_t v65 = v236;
        uint64_t v67 = v51;
        goto LABEL_47;
      }
    }
    a2 = v231;
    unint64_t v64 = v231[26];
    if ((v64 & 0x8000000000000000) != 0) {
      goto LABEL_34;
    }
    uint64_t v66 = v235;
    uint64_t v65 = v236;
    uint64_t v67 = v59;
    if (v64 >= *(void *)(v236 + 16)) {
      goto LABEL_48;
    }
    v227 = v38;
    uint64_t v228 = v52;
    uint64_t v68 = v217;
    outlined init with copy of AccessibilityNodeAttachment.Storage(v236+ ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80))+ *(void *)(v212 + 72) * v64, v217, MEMORY[0x1E4F40FA8]);
    uint64_t v69 = v68;
    int v70 = v215;
    outlined init with copy of AccessibilityNodeAttachment.Storage(v69, (uint64_t)v215, MEMORY[0x1E4F40FA0]);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      int v71 = v207;
      uint64_t v72 = v67;
      uint64_t v73 = v209;
      (*v206)(v207, (uint64_t)v215, v209);
      (*v205)(v208, v71, v73);
      lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator();
      int v70 = &v238;
      AccessibilityAttachment.init<A>(_:applicator:)();
      uint64_t v74 = v73;
      uint64_t v67 = v72;
      a2 = v231;
      (*v204)(v71, v74);
    }
    int v75 = *v70;
    double v76 = v70[1];
    outlined destroy of AccessibilityNodeAttachment(v217);
    unint64_t v77 = *v230;
    uint64_t v78 = *(void *)(*v230 + 16);
    if (v78)
    {
      swift_bridgeObjectRetain();
      double v79 = (unsigned __int8 *)(v77 + 64);
      uint64_t v80 = (unsigned __int8 *)(v77 + 64);
      while (1)
      {
        int v82 = *v80;
        v80 += 40;
        char v81 = v82;
        if (v82 != 255)
        {
          uint64_t v238 = (char *)*((void *)v79 - 1);
          LOBYTE(v239) = v81;
          *(void *)&CGFloat v242 = v56;
          BYTE8(v242) = v237;
          if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
            break;
          }
        }
        double v79 = v80;
        if (!--v78)
        {
          swift_bridgeObjectRelease();
          a2 = v231;
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v238 = v75;
      CGFloat v239 = v76;
      *(void *)&CGFloat v242 = v56;
      BYTE8(v242) = v237;
      char v83 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v238, (uint64_t *)&v242, 0);
      a2 = v231;
      BOOL v84 = v227;
      if ((v83 & 1) == 0) {
        goto LABEL_46;
      }
      if (*((void *)v75 + 2)
        && (unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AE0]), (v86 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*((void *)v75 + 7) + 40 * v85, (uint64_t)&v238);
        uint64_t v87 = v240;
        uint64_t v88 = v241;
        __swift_project_boxed_opaque_existential_1(&v238, v240);
        long long v214 = (uint64_t)v76;
        long long v89 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v88 + 8);
        swift_bridgeObjectRetain();
        char v90 = v88;
        a2 = v231;
        v89(&v242, v87, v90);
        double v76 = (char *)v214;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v238);
      }
      else
      {
        CGFloat v242 = 0u;
        CGFloat v243 = 0u;
        swift_bridgeObjectRetain();
      }
      int v143 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
      type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E4F41158], v143);
      if (swift_dynamicCast())
      {
        uint64_t v144 = v238;
        swift_bridgeObjectRelease();
        BOOL v84 = v227;
        if (v144 != 2)
        {
          double v145 = v231 + 24;
          double v146 = v237 != 0;
          outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v231[21], (void *)v231[22], v231[23]);
          *(v145 - 3) = v144 & 1;
          *(v145 - 2) = 0;
          *(v145 - 1) = (v56 << 32) | 1;
          *((unsigned char *)v145 + 4) = v146;
          *(_DWORD *)double v145 = HIDWORD(v56);
          BOOL v84 = v227;
          a2 = v231;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        BOOL v84 = v227;
      }
    }
    else
    {
LABEL_36:
      if (*((void *)v75 + 2)
        && (long long v91 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AE0]), (v92 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*((void *)v75 + 7) + 40 * v91, (uint64_t)&v238);
        long long v93 = v240;
        long long v94 = v241;
        __swift_project_boxed_opaque_existential_1(&v238, v240);
        long long v214 = (uint64_t)v76;
        long long v95 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v94 + 8);
        swift_bridgeObjectRetain();
        long long v96 = v94;
        a2 = v231;
        v95(&v242, v93, v96);
        double v76 = (char *)v214;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v238);
      }
      else
      {
        CGFloat v242 = 0u;
        CGFloat v243 = 0u;
        swift_bridgeObjectRetain();
      }
      long long v97 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v210, MEMORY[0x1E4FBB718]);
      type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E4F41158], v97);
      if (swift_dynamicCast())
      {
        long long v98 = v238;
        swift_bridgeObjectRelease();
        BOOL v84 = v227;
        if (v98 != 2)
        {
          long long v214 = v67;
          long long v99 = v231 + 24;
          long long v100 = v237 != 0;
          outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v231[21], (void *)v231[22], v231[23]);
          *(v99 - 3) = v98 & 1;
          *(v99 - 2) = 0;
          *(v99 - 1) = (v56 << 32) | 1;
          BOOL v84 = v227;
          *((unsigned char *)v99 + 4) = v100;
          *(_DWORD *)long long v99 = HIDWORD(v56);
          uint64_t v67 = v214;
          a2 = v231;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        BOOL v84 = v227;
      }
      uint64_t v238 = v75;
      CGFloat v239 = v76;
      *(void *)&CGFloat v242 = v56;
      BYTE8(v242) = v237;
      specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v238, (uint64_t *)&v242);
    }
    *(void *)(v211 + 56) = a2[15];
LABEL_46:
    long long v101 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v238 = v84;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v226, v56, v237, v101);
    long long v102 = v76;
    unint64_t v38 = v238;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v60 = v228;
    uint64_t v65 = v236;
LABEL_47:
    uint64_t v66 = v235;
LABEL_48:
    if (*(void *)(v65 + 16) != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v227 = v38;
    uint64_t v228 = v60;
    uint64_t v103 = *v230;
    unint64_t v104 = *(uint64_t **)(*v230 + 16);
    if (v104)
    {
      a2 = (unint64_t *)v67;
      unint64_t v38 = v66;
      swift_bridgeObjectRetain();
      long long v105 = 0;
      uint64_t v106 = 0;
      while (1)
      {
        unint64_t v107 = v105[v103 + 64];
        if (v107 != 255)
        {
          uint64_t v238 = *(char **)&v105[v103 + 56];
          LOBYTE(v239) = v107;
          *(void *)&CGFloat v242 = v56;
          BYTE8(v242) = v237;
          if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
            break;
          }
        }
        uint64_t v106 = (uint64_t *)((char *)v106 + 1);
        v105 += 40;
        if (v104 == v106)
        {
          swift_bridgeObjectRelease();
          goto LABEL_61;
        }
      }
      swift_bridgeObjectRelease();
      char v108 = v230;
      swift_beginAccess();
      uint64_t v109 = *v108;
      long long v110 = swift_isUniquelyReferenced_nonNull_native();
      *char v108 = v109;
      if ((v110 & 1) == 0)
      {
        uint64_t v109 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v109);
        *unint64_t v230 = v109;
      }
      if ((unint64_t)v106 >= *(void *)(v109 + 16))
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }
      uint64_t v111 = &v105[v109];
      char v112 = *((void *)v111 + 6);
      if (!v112)
      {
        type metadata accessor for AccessibilityGeometryStorage();
        char v112 = swift_allocObject();
        *(_WORD *)(v112 + 16) = 0;
        *(void *)(v112 + 24) = 1;
        *(_OWORD *)(v112 + 32) = 0u;
        *(_OWORD *)(v112 + 48) = 0u;
        *(_OWORD *)(v112 + 64) = 0u;
        *(unsigned char *)(v112 + 80) = 1;
        *(_OWORD *)(v112 + 88) = 0u;
        *(_OWORD *)(v112 + 104) = 0u;
        *(unsigned char *)(v112 + 120) = 1;
        *(void *)(v112 + 128) = MEMORY[0x1E4FBC860];
        *(_OWORD *)(v112 + 136) = 0u;
        *(_OWORD *)(v112 + 152) = 0u;
        *(void *)(v112 + 168) = 0;
        *(unsigned char *)(v112 + 176) = -1;
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        *((void *)v111 + 6) = v112;
      }
      *(unsigned char *)(v112 + 17) = 1;
      uint64_t v113 = v224;
      *(void *)(v112 + 64) = v225;
      *(void *)(v112 + 72) = v113;
      *(unsigned char *)(v112 + 80) = 0;
      swift_endAccess();
LABEL_61:
      uint64_t v66 = v38;
      uint64_t v67 = (uint64_t)a2;
      a2 = v231;
      uint64_t v60 = v228;
    }
    long long v114 = *v230;
    long long v115 = *(uint64_t **)(*v230 + 16);
    if (!v115) {
      goto LABEL_74;
    }
    unint64_t v38 = (char *)v67;
    swift_retain();
    swift_bridgeObjectRetain();
    long long v105 = 0;
    uint64_t v106 = 0;
    while (1)
    {
      long long v116 = v105[v114 + 64];
      if (v116 != 255)
      {
        uint64_t v238 = *(char **)&v105[v114 + 56];
        LOBYTE(v239) = v116;
        *(void *)&CGFloat v242 = v56;
        BYTE8(v242) = v237;
        if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
          break;
        }
      }
      uint64_t v106 = (uint64_t *)((char *)v106 + 1);
      v105 += 40;
      if (v115 == v106)
      {
        uint64_t v66 = v235;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v60 = v228;
        uint64_t v67 = (uint64_t)v38;
        goto LABEL_74;
      }
    }
    swift_bridgeObjectRelease();
    long long v117 = v230;
    swift_beginAccess();
    uint64_t v109 = *v117;
    long long v118 = swift_isUniquelyReferenced_nonNull_native();
    *long long v117 = v109;
    if ((v118 & 1) == 0)
    {
      uint64_t v109 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v109);
      *unint64_t v230 = v109;
    }
    if ((unint64_t)v106 >= *(void *)(v109 + 16)) {
      goto LABEL_150;
    }
    long long v214 = (uint64_t)v38;
    long long v119 = &v105[v109];
    long long v120 = *((void *)v119 + 6);
    if (!v120)
    {
      type metadata accessor for AccessibilityGeometryStorage();
      long long v120 = swift_allocObject();
      *(_WORD *)(v120 + 16) = 0;
      *(void *)(v120 + 24) = 1;
      *(_OWORD *)(v120 + 32) = 0u;
      *(_OWORD *)(v120 + 48) = 0u;
      *(_OWORD *)(v120 + 64) = 0u;
      *(unsigned char *)(v120 + 80) = 1;
      *(_OWORD *)(v120 + 88) = 0u;
      *(_OWORD *)(v120 + 104) = 0u;
      *(unsigned char *)(v120 + 120) = 1;
      *(void *)(v120 + 128) = MEMORY[0x1E4FBC860];
      *(_OWORD *)(v120 + 136) = 0u;
      *(_OWORD *)(v120 + 152) = 0u;
      *(void *)(v120 + 168) = 0;
      *(unsigned char *)(v120 + 176) = -1;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      *((void *)v119 + 6) = v120;
    }
    *(unsigned char *)(v120 + 17) = 1;
    long long v121 = *(void *)(v120 + 24);
    long long v122 = v235;
    long long v123 = v223;
    *(void *)(v120 + 24) = v235;
    *(void *)(v120 + 32) = v123;
    long long v124 = v221;
    *(void *)(v120 + 40) = v222;
    *(void *)(v120 + 48) = v124;
    *(void *)(v120 + 56) = v220;
    swift_retain();
    swift_endAccess();
    long long v125 = v121;
    uint64_t v66 = v122;
    outlined consume of Transaction?(v125);
    swift_release();
    a2 = v231;
    uint64_t v67 = v214;
    uint64_t v60 = v228;
LABEL_74:
    CGFloat v244 = v234;
    uint64_t v245 = v67;
    v246 = v60;
    uint64_t v247 = v233;
    long long v248 = v232;
    uint64_t v126 = *v230;
    uint64_t v127 = *(uint64_t **)(*v230 + 16);
    if (v127)
    {
      a2 = (unint64_t *)v67;
      unint64_t v38 = v66;
      swift_bridgeObjectRetain();
      long long v105 = 0;
      uint64_t v106 = 0;
      while (1)
      {
        uint64_t v128 = v105[v126 + 64];
        if (v128 != 255)
        {
          uint64_t v238 = *(char **)&v105[v126 + 56];
          LOBYTE(v239) = v128;
          *(void *)&CGFloat v242 = v56;
          BYTE8(v242) = v237;
          if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
            break;
          }
        }
        uint64_t v106 = (uint64_t *)((char *)v106 + 1);
        v105 += 40;
        if (v127 == v106)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v60 = v228;
          unint64_t v38 = v227;
          uint64_t v67 = (uint64_t)a2;
          a2 = v231;
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      double v129 = v230;
      swift_beginAccess();
      uint64_t v109 = *v129;
      double v130 = swift_isUniquelyReferenced_nonNull_native();
      *double v129 = v109;
      if ((v130 & 1) == 0)
      {
        uint64_t v109 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v109);
        *unint64_t v230 = v109;
      }
      uint64_t v131 = v227;
      if ((unint64_t)v106 >= *(void *)(v109 + 16)) {
        goto LABEL_151;
      }
      double v132 = &v105[v109];
      double v133 = *((void *)v132 + 6);
      if (!v133)
      {
        type metadata accessor for AccessibilityGeometryStorage();
        double v133 = swift_allocObject();
        *(_WORD *)(v133 + 16) = 0;
        *(void *)(v133 + 24) = 1;
        *(_OWORD *)(v133 + 32) = 0u;
        *(_OWORD *)(v133 + 48) = 0u;
        *(_OWORD *)(v133 + 64) = 0u;
        *(unsigned char *)(v133 + 80) = 1;
        *(_OWORD *)(v133 + 88) = 0u;
        *(_OWORD *)(v133 + 104) = 0u;
        *(unsigned char *)(v133 + 120) = 1;
        *(void *)(v133 + 128) = MEMORY[0x1E4FBC860];
        *(_OWORD *)(v133 + 136) = 0u;
        *(_OWORD *)(v133 + 152) = 0u;
        *(void *)(v133 + 168) = 0;
        *(unsigned char *)(v133 + 176) = -1;
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        *((void *)v132 + 6) = v133;
      }
      *(unsigned char *)(v133 + 16) = 0;
      uint64_t v134 = Path.isEmpty.getter();
      uint64_t v67 = (uint64_t)a2;
      uint64_t v60 = v228;
      if ((v134 & 1) == 0)
      {
        Path.boundingRect.getter();
        long long v250 = CGRectStandardize(v249);
        if (!CGRectIsEmpty(v250))
        {
          v135 = *(void *)(v133 + 144);
          uint64_t v136 = *(void *)(v133 + 152);
          uint64_t v137 = *(void *)(v133 + 160);
          unint64_t v138 = *(void *)(v133 + 168);
          uint64_t v139 = v233;
          char v140 = v234;
          *(void *)(v133 + 144) = v234;
          *(void *)(v133 + 152) = v67;
          *(void *)(v133 + 160) = v60;
          *(void *)(v133 + 168) = v139;
          __int16 v141 = *(unsigned char *)(v133 + 176);
          int v142 = v232;
          *(unsigned char *)(v133 + 176) = v232;
          outlined consume of Path?(v135, v136, v137, v138, v141);
          outlined copy of Path.Storage(v140, v67, v60, v139, v142);
        }
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      a2 = v231;
      unint64_t v38 = v131;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v38 = v227;
    }
LABEL_15:
    swift_release();
    outlined consume of Path.Storage(v234, v67, v60, v233, v232);
    unint64_t v40 = v218;
    uint64_t v41 = v229;
    if (!v229) {
      goto LABEL_96;
    }
  }
  __break(1u);
LABEL_96:
  swift_bridgeObjectRelease();
  uint64_t v42 = v216;
LABEL_97:
  *(void *)&v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version] = a2[15];
  long long v105 = &v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent];
  uint64_t v147 = (void *)MEMORY[0x18C119DF0](&v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

  if (!v147) {
    goto LABEL_123;
  }
  uint64_t v148 = (void *)MEMORY[0x18C119DF0](v105);
  if (!v148) {
    goto LABEL_167;
  }
  uint64_t v149 = v148;
  v150 = a2[17];

  uint64_t v106 = &OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
  if (v149 != (void *)v150) {
    goto LABEL_110;
  }
  uint64_t v151 = MEMORY[0x18C119DF0](v105);
  if (!v151)
  {
LABEL_170:
    __break(1u);
LABEL_171:

    __break(1u);
LABEL_172:
    __break(1u);
    return;
  }
  uint64_t v152 = (void *)v151;
  uint64_t v153 = (unint64_t *)(v151 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  uint64_t v154 = *v153;
  swift_bridgeObjectRetain();

  if (v154 >> 62) {
    goto LABEL_158;
  }
  unint64_t v155 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    char v156 = a2[25];
    if (v155 < v156)
    {
      int v157 = MEMORY[0x18C119DF0](v105);
      if (!v157) {
        goto LABEL_171;
      }
      uint64_t v158 = (void *)v157;
      uint64_t v159 = (unint64_t *)(v157 + *v106);
      swift_beginAccess();
      int v160 = *v159;
      swift_bridgeObjectRetain();

      if ((v160 & 0xC000000000000001) == 0)
      {
        if ((v156 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v156 >= *(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_166;
          }
          long long v161 = *(char **)(v160 + 8 * v156 + 32);
          goto LABEL_109;
        }
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
        goto LABEL_170;
      }
      goto LABEL_164;
    }
LABEL_110:
    uint64_t v109 = a2[25];
    long long v162 = MEMORY[0x18C119DF0](v105);
    if (!v162) {
      goto LABEL_168;
    }
    long long v163 = (void *)v162;
    long long v164 = (unint64_t *)(v162 + *v106);
    swift_beginAccess();
    long long v165 = *v164;
    swift_bridgeObjectRetain();

    if (v165 >> 62)
    {
LABEL_152:
      swift_bridgeObjectRetain();
      long long v166 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v166 = *(void *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if ((uint64_t)v109 >= v166) {
      break;
    }
    long long v167 = MEMORY[0x18C119DF0](v105);
    if (!v167) {
      goto LABEL_169;
    }
    long long v168 = (void *)v167;
    long long v169 = (unint64_t *)(v167 + *v106);
    swift_beginAccess();
    int v160 = *v169;
    swift_bridgeObjectRetain();

    if ((v160 & 0xC000000000000001) != 0)
    {
LABEL_155:
      long long v170 = (char *)MEMORY[0x18C117680](v109, v160);
      swift_unknownObjectRelease();
LABEL_119:
      swift_bridgeObjectRelease();
      if (v170 == v216)
      {
        long long v171 = MEMORY[0x18C119DF0](v105);
        if (!v171) {
          goto LABEL_172;
        }
        long long v172 = (void *)v171;
        swift_beginAccess();
        double v173 = (void *)specialized Array.remove(at:)(v109);
        swift_endAccess();
      }
      break;
    }
    if ((v109 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v109 < *(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      long long v170 = *(char **)(v160 + 8 * v109 + 32);
      goto LABEL_119;
    }
    __break(1u);
LABEL_158:
    swift_bridgeObjectRetain();
    unint64_t v155 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectWeakAssign();
LABEL_123:
  while (2)
  {
    double v174 = (void *)MEMORY[0x18C119DF0](v105);
    if (!v174)
    {
      uint64_t v175 = a2[25];
      int v160 = a2[17];
      char v156 = v160 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
      swift_beginAccess();
      if (*(void *)v156 >> 62)
      {
        swift_bridgeObjectRetain();
        int v176 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        int v176 = *(void *)((*(void *)v156 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v176 < v175)
      {
        swift_beginAccess();
        uint64_t v177 = v216;
        MEMORY[0x18C115B40]();
        if (*(void *)((*(void *)v156 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v156 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        double v178 = *(uint64_t **)v156;
        if ((unint64_t)v178 >> 62)
        {
          swift_bridgeObjectRetain();
          double v179 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          double v179 = *(void *)(((unint64_t)v178 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
LABEL_136:
        uint64_t v109 = (unint64_t)v203;
        a2[25] = v179;
        unint64_t v183 = a2[26];
        uint64_t v182 = __OFADD__(v183, 1);
        v184 = v183 + 1;
        if (!v182)
        {
          a2[26] = v184;
          swift_unknownObjectWeakAssign();
          goto LABEL_138;
        }
        __break(1u);
        goto LABEL_155;
      }
      swift_beginAccess();
      uint64_t v106 = *(uint64_t **)v156;
      if (*(void *)v156 >> 62)
      {
        unint64_t v197 = v216;
        swift_bridgeObjectRetain();
        uint64_t v198 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v198 >= v175)
        {
LABEL_134:
          if ((v175 & 0x8000000000000000) == 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(v175, v175, (uint64_t)v216);
            swift_endAccess();
            uint64_t v182 = __OFADD__(v175, 1);
            double v179 = v175 + 1;
            if (!v182) {
              goto LABEL_136;
            }
            goto LABEL_163;
          }
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          long long v161 = (char *)MEMORY[0x18C117680](v156, v160);
          swift_unknownObjectRelease();
LABEL_109:
          swift_bridgeObjectRelease();
          if (v161 == v216) {
            goto LABEL_110;
          }
          continue;
        }
      }
      else
      {
        double v180 = *(void *)(((unint64_t)v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
        double v181 = v216;
        if (v180 >= v175) {
          goto LABEL_134;
        }
      }
      __break(1u);
      goto LABEL_162;
    }
    break;
  }

  uint64_t v109 = (unint64_t)v203;
LABEL_138:
  swift_beginAccess();
  uint64_t v185 = *(void *)v109;
  uint64_t v186 = v201;
  if (*(void *)(v185 + 16) && (unint64_t v187 = specialized __RawDictionaryStorage.find<A>(_:)(v201, v200), (v188 & 1) != 0))
  {
    char v189 = *(void *)(v185 + 56) + 16 * v187;
    __int16 v190 = v186;
    int v191 = *(void **)v189;
    uint64_t v192 = *(void *)(v189 + 8);
    swift_endAccess();
    char v193 = v191;
    swift_bridgeObjectRetain_n();
    outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v191);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v191) = specialized static Dictionary<>.== infix(_:_:)(v192, (uint64_t)v38);
    uint64_t v186 = v190;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v191)
    {
LABEL_146:
      swift_unknownObjectRelease();
      goto LABEL_147;
    }
  }
  else
  {
    swift_endAccess();
  }
  swift_beginAccess();
  v195 = specialized Dictionary.subscript.modify(&v238, v186, v200);
  uint64_t v196 = *(void **)v194;
  if (!*(void *)v194)
  {
    ((void (*)(char **, void))v195)(&v238, 0);
    swift_endAccess();
    goto LABEL_146;
  }
  *(void *)(v194 + 8) = v38;
  outlined copy of DisplayList.AccessibilityUpdater.CacheValue?(v196);
  swift_bridgeObjectRetain();
  ((void (*)(char **, void))v195)(&v238, 0);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();

LABEL_147:
  swift_bridgeObjectRelease();
}

uint64_t DisplayList.AccessibilityUpdater.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisplayList.AccessibilityUpdater()
{
  return self;
}

uint64_t assignWithCopy for DisplayList.AccessibilityUpdater.CacheValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for DisplayList.AccessibilityUpdater.CacheValue(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.AccessibilityUpdater.CacheValue()
{
  return &type metadata for DisplayList.AccessibilityUpdater.CacheValue;
}

ValueMetadata *type metadata accessor for _ViewInputs.EnvironmentTransform()
{
  return &type metadata for _ViewInputs.EnvironmentTransform;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform;
  if (!lazy protocol witness table cache variable for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ViewInputs.EnvironmentTransform@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return EnvironmentValues.accessibilityEnabled.setter();
}

Swift::Void __swiftcall _ViewInputs.configureForArchivingAccessibility()()
{
  *(_DWORD *)(v0 + 36) |= 0x10u;
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
}

unint64_t lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator;
  if (!lazy protocol witness table cache variable for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator);
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v37[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      long long v22 = (char *)swift_slowAlloc();
      bzero(v22, v6);
      uint64_t v23 = 0;
      int64_t v24 = 0;
      uint64_t v25 = v3 + 64;
      uint64_t v26 = 1 << *(unsigned char *)(v3 + 32);
      if (v26 < 64) {
        uint64_t v27 = ~(-1 << v26);
      }
      else {
        uint64_t v27 = -1;
      }
      unint64_t v28 = v27 & *(void *)(v3 + 64);
      int64_t v29 = (unint64_t)(v26 + 63) >> 6;
      uint64_t v30 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version;
      while (1)
      {
        if (v28)
        {
          unint64_t v31 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          unint64_t v32 = v31 | (v24 << 6);
        }
        else
        {
          int64_t v33 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_54;
          }
          if (v33 >= v29) {
            goto LABEL_51;
          }
          unint64_t v34 = *(void *)(v25 + 8 * v33);
          ++v24;
          if (!v34)
          {
            int64_t v24 = v33 + 1;
            if (v33 + 1 >= v29) {
              goto LABEL_51;
            }
            unint64_t v34 = *(void *)(v25 + 8 * v24);
            if (!v34)
            {
              int64_t v24 = v33 + 2;
              if (v33 + 2 >= v29) {
                goto LABEL_51;
              }
              unint64_t v34 = *(void *)(v25 + 8 * v24);
              if (!v34)
              {
                int64_t v35 = v33 + 3;
                if (v35 >= v29) {
                  goto LABEL_51;
                }
                unint64_t v34 = *(void *)(v25 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    int64_t v24 = v35 + 1;
                    if (__OFADD__(v35, 1)) {
                      goto LABEL_56;
                    }
                    if (v24 >= v29) {
                      break;
                    }
                    unint64_t v34 = *(void *)(v25 + 8 * v24);
                    ++v35;
                    if (v34) {
                      goto LABEL_47;
                    }
                  }
LABEL_51:
                  uint64_t v36 = specialized _NativeDictionary.extractDictionary(using:count:)((unint64_t *)v22, v5, v23, v3);
                  MEMORY[0x18C119C60](v22, -1, -1);
                  return v36;
                }
                int64_t v24 = v35;
              }
            }
          }
LABEL_47:
          unint64_t v28 = (v34 - 1) & v34;
          unint64_t v32 = __clz(__rbit64(v34)) + (v24 << 6);
        }
        if (*(void *)(*(void *)(*(void *)(v3 + 56) + 16 * v32) + v30) == a2)
        {
          *(void *)&v22[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
          BOOL v20 = __OFADD__(v23++, 1);
          if (v20)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  bzero((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = v3 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v8 << 6);
    }
    else
    {
      int64_t v17 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v17 >= v13) {
        return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
      }
      unint64_t v18 = *(void *)(v9 + 8 * v17);
      ++v8;
      if (!v18)
      {
        int64_t v8 = v17 + 1;
        if (v17 + 1 >= v13) {
          return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
        }
        unint64_t v18 = *(void *)(v9 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 2;
          if (v17 + 2 >= v13) {
            return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
          }
          unint64_t v18 = *(void *)(v9 + 8 * v8);
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v13) {
              return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
            }
            unint64_t v18 = *(void *)(v9 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  break;
                }
                if (v8 >= v13) {
                  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
                }
                unint64_t v18 = *(void *)(v9 + 8 * v8);
                ++v19;
                if (v18) {
                  goto LABEL_22;
                }
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            int64_t v8 = v19;
          }
        }
      }
LABEL_22:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
    }
    if (*(void *)(*(void *)(*(void *)(v3 + 56) + 16 * v16) + v14) == a2)
    {
      *(void *)((char *)v37 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v16;
      BOOL v20 = __OFADD__(v7++, 1);
      if (v20) {
        break;
      }
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void v12[2];

  char v4 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  size_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  uint64_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, a2);
    a2 = v10;
    MEMORY[0x18C119C60](v9, -1, -1);
  }
  return a2;
}

Swift::Int specialized DisplayList.AccessibilityUpdater.remove(_:state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t *)(*(void *)(a3 + 136) + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  unint64_t v6 = *v5;
  unint64_t v7 = v6 >> 62;
  if (!(v6 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    Swift::Int result = swift_bridgeObjectRetain();
    if (v8 >= a1) {
      goto LABEL_3;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  Swift::Int result = swift_bridgeObjectRelease();
  if (v21 < a1) {
    goto LABEL_24;
  }
LABEL_3:
  if (a1 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    Swift::Int result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < a2) {
    goto LABEL_26;
  }
  if (a2 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v6 & 0xC000000000000001) == 0)
  {
LABEL_15:
    if (v7)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      uint64_t v12 = v16;
      uint64_t v13 = v17;
      unint64_t v19 = v18;
      Swift::Int result = swift_bridgeObjectRelease_n();
      uint64_t v15 = (v19 >> 1) - v13;
      BOOL v14 = (uint64_t)(v19 >> 1) <= v13;
      if (v19 >> 1 == v13)
      {
LABEL_22:
        swift_unknownObjectRelease();
        swift_beginAccess();
        specialized Array.replaceSubrange<A>(_:with:)(a1, a2);
        return swift_endAccess();
      }
    }
    else
    {
      uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v13 = a1;
      uint64_t v15 = a2 - a1;
      BOOL v14 = a2 <= a1;
      if (a2 == a1) {
        goto LABEL_22;
      }
    }
    if (!v14)
    {
      uint64_t v20 = v12 + 8 * v13;
      do
      {
        v20 += 8;
        swift_unknownObjectWeakAssign();
        --v15;
      }
      while (v15);
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (a2 < (unint64_t)a1)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a1 == a2) {
    goto LABEL_15;
  }
  if (a1 < (unint64_t)a2)
  {
    type metadata accessor for AccessibilityNode();
    Swift::Int result = a1;
    do
    {
      Swift::Int v11 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      Swift::Int result = v11;
    }
    while (a2 != v11);
    goto LABEL_15;
  }
LABEL_30:
  __break(1u);
  return result;
}

void specialized DisplayList.AccessibilityUpdater.createNode(item:state:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (uint64_t *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 200);
  uint64_t v9 = *(void *)(a2 + 208);
  DisplayList.AccessibilityUpdater.addNode(item:state:)((uint64_t)&v57, (unint64_t *)a2);
  if (!v10)
  {
    uint64_t v52 = v9;
    uint64_t v26 = *(void *)(a5 + 16);
    if (v26)
    {
      uint64_t v48 = v8;
      uint64_t v50 = v7;
      swift_bridgeObjectRetain();
      uint64_t v27 = (_DWORD *)(a5 + 100);
      do
      {
        unint64_t v28 = *(void *)(v27 - 9);
        uint64_t v29 = *(void *)(v27 - 7);
        unint64_t v30 = *(void *)(v27 - 5);
        uint64_t v31 = *(void *)(v27 - 3);
        char v32 = *((unsigned char *)v27 - 2);
        __int16 v33 = *((_WORD *)v27 - 2);
        int v34 = *v27;
        long long v35 = *(_OWORD *)(v27 - 13);
        long long v57 = *(_OWORD *)(v27 - 17);
        long long v58 = v35;
        unint64_t v59 = v28;
        uint64_t v60 = v29;
        unint64_t v61 = v30;
        uint64_t v62 = v31;
        char v64 = v32;
        __int16 v63 = v33;
        int v65 = v34;
        outlined copy of DisplayList.Item.Value(v29, v30);
        DisplayList.AccessibilityUpdater.update(item:state:)(&v57, a2);
        outlined consume of DisplayList.Item.Value(v29, v30);
        v27 += 18;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      uint64_t v8 = v48;
      uint64_t v7 = v50;
    }
    *uint64_t v8 = v7;
    uint64_t v9 = v52;
    goto LABEL_27;
  }
  Swift::Int v11 = (void *)(a2 + 136);
  double v54 = v10;
  objc_storeStrong((id *)(a2 + 136), v10);
  *uint64_t v8 = 0;
  v8[1] = 0;
  swift_bridgeObjectRelease();
  *(void *)(a2 + 128) = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)(a5 + 16);
  if (v12)
  {
    uint64_t v47 = v8;
    uint64_t v49 = v7;
    uint64_t v51 = v9;
    swift_bridgeObjectRetain();
    uint64_t v13 = (_DWORD *)(a5 + 100);
    do
    {
      unint64_t v14 = *(void *)(v13 - 9);
      uint64_t v15 = *(void *)(v13 - 7);
      unint64_t v16 = *(void *)(v13 - 5);
      uint64_t v17 = *(void *)(v13 - 3);
      char v18 = *((unsigned char *)v13 - 2);
      __int16 v19 = *((_WORD *)v13 - 2);
      int v20 = *v13;
      long long v21 = *(_OWORD *)(v13 - 13);
      long long v57 = *(_OWORD *)(v13 - 17);
      long long v58 = v21;
      unint64_t v59 = v14;
      uint64_t v60 = v15;
      unint64_t v61 = v16;
      uint64_t v62 = v17;
      char v64 = v18;
      __int16 v63 = v19;
      int v65 = v20;
      outlined copy of DisplayList.Item.Value(v15, v16);
      DisplayList.AccessibilityUpdater.update(item:state:)(&v57, a2);
      outlined consume of DisplayList.Item.Value(v15, v16);
      v13 += 18;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v7 = v49;
    uint64_t v9 = v51;
    Swift::Int v11 = (void *)(a2 + 136);
    uint64_t v8 = v47;
  }
  long long v22 = (void *)(*v11 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  if (*v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v24 = *v8;
  if (__OFSUB__(v23, *v8))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v23 - *v8 < 1)
  {
LABEL_12:
    if (!__OFADD__(v7, 1))
    {
      *(void *)(a2 + 200) = v7 + 1;
      uint64_t v25 = *(void *)(a2 + 184);
      if (*(unsigned char *)(a2 + 184) == 0xFF)
      {
      }
      else
      {
        uint64_t v36 = *(void *)(a2 + 168);
        uint64_t v37 = *(void **)(a2 + 176);
        *((void *)&v39 + 1) = *(unsigned int *)(a2 + 192) | ((unint64_t)*(unsigned __int8 *)(a2 + 196) << 32);
        *(void *)&long long v39 = *(void *)(a2 + 184);
        uint64_t v38 = v39 >> 32;
        char v53 = *(unsigned char *)(a2 + 196);
        swift_beginAccess();
        if (v25)
        {
          if (v36)
          {
            type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_18834BB80;
            swift_bridgeObjectRetain();
            static AccessibilityVisibility.containerElement.getter();
            unsigned int v44 = *(_DWORD *)(inited + 32);
            swift_bridgeObjectRelease();
            LODWORD(inited) = dword_1ED449F58 | v44;
            type metadata accessor for AnyAccessibilityPropertiesEntry();
            uint64_t v55 = Dictionary.init(minimumCapacity:)();
            type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
            *((void *)&v58 + 1) = v45;
            unint64_t v59 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
            *(void *)&long long v57 = __PAIR64__(inited, v44);
            specialized Dictionary.subscript.setter((uint64_t)&v57, MEMORY[0x1E4F40AA8]);
            AccessibilityAttachment.init(properties:)();
          }
          else
          {
            unint64_t v42 = swift_bridgeObjectRetain();
            static AccessibilityChildBehavior.Combine.combine(children:options:)(v42, 1);
          }
          swift_bridgeObjectRelease();
          uint64_t v41 = (void *)*((void *)&v57 + 1);
          uint64_t v40 = v57;
        }
        else
        {
          outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(v36, v37, 0);
          outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(v36, v37, 0);
          uint64_t v40 = v36;
          uint64_t v41 = v37;
        }
        *(void *)&long long v57 = v40;
        *((void *)&v57 + 1) = v41;
        uint64_t v55 = v38;
        char v56 = v53;
        specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v57, &v55, 1);
        outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v36, v37, v25);
        swift_bridgeObjectRelease();
      }
LABEL_27:
      uint64_t v46 = a2 + 192;
      *(void *)(v46 + 16) = v9;
      outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(*(void *)(v46 - 24), *(void **)(v46 - 16), *(void *)(v46 - 8));
      *(void *)(v46 - 24) = 0;
      *(void *)(v46 - 16) = 0;
      *(void *)(v46 - 8) = 255;
      *(unsigned char *)(v46 + 4) = 0;
      *(_DWORD *)uint64_t v46 = 0;
      return;
    }
    goto LABEL_30;
  }
  if (v23 >= v24)
  {
    specialized DisplayList.AccessibilityUpdater.remove(_:state:)(v24, v23, a2);
    goto LABEL_12;
  }
LABEL_31:
  __break(1u);
}

uint64_t specialized DisplayList.AccessibilityUpdater.addAttachments(_:item:state:_:)(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v91 = a7;
  uint64_t v92 = a4;
  uint64_t v105 = a1;
  uint64_t v95 = type metadata accessor for AccessibilityNodeAttachment();
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v96 = (uint64_t)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  unint64_t v19 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  LODWORD(v11) = *(unsigned __int8 *)(a2 + 66);
  int v20 = *(unsigned __int16 *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 68);
  *(void *)&long long v114 = *(void *)a2;
  uint64_t v13 = v114;
  *((void *)&v114 + 1) = v12;
  *(void *)&long long v115 = v15;
  *((void *)&v115 + 1) = v14;
  uint64_t v116 = v17;
  uint64_t v117 = v16;
  unint64_t v118 = v19;
  uint64_t v119 = v18;
  int v93 = v11;
  int v110 = (unsigned __int16)v11;
  char v121 = v11;
  __int16 v120 = v20;
  int v122 = v21;
  uint64_t v100 = a5;
  swift_retain_n();
  uint64_t v103 = a6;
  swift_bridgeObjectRetain_n();
  DisplayList.Item.frame.getter();
  double v23 = v22 + *((double *)a3 + 3);
  double v25 = v24 + *((double *)a3 + 4);
  *((double *)a3 + 3) = v23;
  *((double *)a3 + 4) = v25;
  uint64_t v111 = *((void *)a3 + 5);
  long long v26 = *((_OWORD *)a3 + 4);
  long long v112 = *((_OWORD *)a3 + 3);
  long long v113 = v26;
  swift_retain();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v25, *(unint64_t *)&v23));
  long long v99 = (void *)*a3;
  uint64_t v27 = v111;
  long long v28 = v112;
  uint64_t v97 = *((void *)&v113 + 1);
  uint64_t v98 = v113;
  *(void *)&long long v85 = v13;
  *(void *)&long long v114 = v13;
  *((void *)&v114 + 1) = v12;
  *((void *)&v85 + 1) = v12;
  *(void *)&long long v86 = v15;
  *(void *)&long long v115 = v15;
  *((void *)&v115 + 1) = v14;
  *((void *)&v86 + 1) = v14;
  uint64_t v102 = v17;
  uint64_t v116 = v17;
  uint64_t v117 = v16;
  uint64_t v87 = v16;
  unint64_t v88 = v19;
  unint64_t v118 = v19;
  uint64_t v119 = v18;
  uint64_t v29 = v105;
  uint64_t v89 = v18;
  char v121 = v110;
  int v101 = v20;
  __int16 v120 = v20;
  int v90 = v21;
  int v122 = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  DisplayList.Item.frame.getter();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = *((void *)a3 + 10);
  uint64_t v35 = *((void *)a3 + 11);
  uint64_t v36 = *((void *)a3 + 12);
  uint64_t v37 = *((void *)a3 + 13);
  LODWORD(v17) = *((unsigned __int8 *)a3 + 112);
  uint64_t v38 = (char *)*((void *)a3 + 16);
  outlined copy of Path.Storage(v34, v35, v36, v37, *((unsigned char *)a3 + 112));
  swift_bridgeObjectRetain();
  uint64_t v104 = v27;
  swift_retain();
  uint64_t v106 = v34;
  uint64_t v107 = v35;
  uint64_t v108 = v36;
  uint64_t v109 = v37;
  int v110 = v17;
  outlined copy of Path.Storage(v34, v35, v36, v37, v17);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v38 + 2) + 1, 1, v38);
  }
  unint64_t v40 = *((void *)v38 + 2);
  unint64_t v39 = *((void *)v38 + 3);
  uint64_t v41 = v103;
  uint64_t v42 = v104;
  uint64_t v43 = v100;
  if (v40 >= v39 >> 1) {
    uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v38);
  }
  *((void *)v38 + 2) = v40 + 1;
  unsigned int v44 = &v38[120 * v40];
  *((void *)v44 + 4) = v29;
  *((void *)v44 + 5) = v42;
  *((_OWORD *)v44 + 3) = v28;
  uint64_t v45 = v97;
  *((void *)v44 + 8) = v98;
  *((void *)v44 + 9) = v45;
  *((void *)v44 + 10) = v31;
  *((void *)v44 + 11) = v33;
  uint64_t v46 = v107;
  *((void *)v44 + 12) = v106;
  *((void *)v44 + 13) = v46;
  uint64_t v47 = v109;
  *((void *)v44 + 14) = v108;
  *((void *)v44 + 15) = v47;
  v44[128] = v110;
  *(void *)(v44 + 132) = v99;
  v44[140] = 1;
  *((void *)v44 + 18) = v102;
  *((void *)a3 + 16) = v38;
  if (*(void *)(v29 + 16))
  {
    int v48 = (unsigned __int16)v101 | ((unsigned __int16)v93 << 16);
    uint64_t v49 = v96;
    outlined init with copy of AccessibilityNodeAttachment.Storage(v29 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80)), v96, MEMORY[0x1E4F40FA8]);
    uint64_t v50 = v95;
    if (*(unsigned char *)(v49 + *(int *)(v95 + 24)))
    {
      uint64_t v98 = *((void *)a3 + 25);
      uint64_t v51 = (void *)*((void *)a3 + 17);
      uint64_t v52 = *(void *)(v41 + 16);
      if (v52)
      {
        int v101 = v48;
        swift_bridgeObjectRetain();
        long long v99 = v51;
        id v53 = v51;
        double v54 = (_DWORD *)(v41 + 100);
        do
        {
          uint64_t v55 = *(void *)(v54 - 9);
          uint64_t v56 = *(void *)(v54 - 7);
          unint64_t v57 = *(void *)(v54 - 5);
          uint64_t v58 = *(void *)(v54 - 3);
          char v59 = *((unsigned char *)v54 - 2);
          __int16 v60 = *((_WORD *)v54 - 2);
          int v61 = *v54;
          long long v62 = *(_OWORD *)(v54 - 13);
          long long v114 = *(_OWORD *)(v54 - 17);
          long long v115 = v62;
          uint64_t v116 = v55;
          uint64_t v117 = v56;
          unint64_t v118 = v57;
          uint64_t v119 = v58;
          char v121 = v59;
          __int16 v120 = v60;
          int v122 = v61;
          outlined copy of DisplayList.Item.Value(v56, v57);
          DisplayList.AccessibilityUpdater.update(item:state:)(&v114, a3);
          outlined consume of DisplayList.Item.Value(v56, v57);
          v54 += 18;
          --v52;
        }
        while (v52);
        uint64_t v41 = v103;
        swift_bridgeObjectRelease();
        uint64_t v49 = v96;
        int v48 = v101;
        uint64_t v50 = v95;
        uint64_t v51 = v99;
      }
      else
      {
        id v84 = v51;
      }
      if ((*(unsigned char *)(v49 + *(int *)(v50 + 20)) & 1) != 0 && v51 == *((void **)a3 + 17) && v98 == *((void *)a3 + 25))
      {
        long long v114 = v85;
        long long v115 = v86;
        uint64_t v116 = v102;
        uint64_t v117 = v87;
        unint64_t v118 = v88;
        uint64_t v119 = v89;
        __int16 v120 = v48;
        char v121 = BYTE2(v48);
        int v122 = v90;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized DisplayList.AccessibilityUpdater.createNode(item:state:_:)((uint64_t)&v114, (uint64_t)a3, v92, v43, v41);
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_17;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(unsigned char *)(v49 + *(int *)(v95 + 20)))
      {
        long long v114 = v85;
        long long v115 = v86;
        uint64_t v116 = v102;
        uint64_t v117 = v87;
        unint64_t v118 = v88;
        uint64_t v119 = v89;
        __int16 v120 = v48;
        char v121 = BYTE2(v48);
        int v122 = v90;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized DisplayList.AccessibilityUpdater.createNode(item:state:_:)((uint64_t)&v114, (uint64_t)a3, v92, v43, v41);
        swift_release();
        swift_bridgeObjectRelease();
LABEL_17:
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Path.Storage(v106, v107, v108, v109, v110);
        outlined destroy of AccessibilityNodeAttachment(v49);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        return swift_release();
      }
      uint64_t v74 = *(void *)(v41 + 16);
      if (v74)
      {
        swift_bridgeObjectRetain();
        int v75 = (_DWORD *)(v41 + 100);
        do
        {
          uint64_t v76 = *(void *)(v75 - 9);
          uint64_t v77 = *(void *)(v75 - 7);
          unint64_t v78 = *(void *)(v75 - 5);
          uint64_t v79 = *(void *)(v75 - 3);
          char v80 = *((unsigned char *)v75 - 2);
          __int16 v81 = *((_WORD *)v75 - 2);
          int v82 = *v75;
          long long v83 = *(_OWORD *)(v75 - 13);
          long long v114 = *(_OWORD *)(v75 - 17);
          long long v115 = v83;
          uint64_t v116 = v76;
          uint64_t v117 = v77;
          unint64_t v118 = v78;
          uint64_t v119 = v79;
          char v121 = v80;
          __int16 v120 = v81;
          int v122 = v82;
          outlined copy of DisplayList.Item.Value(v77, v78);
          DisplayList.AccessibilityUpdater.update(item:state:)(&v114, a3);
          outlined consume of DisplayList.Item.Value(v77, v78);
          v75 += 18;
          --v74;
        }
        while (v74);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v49 = v96;
      }
      else
      {
        swift_release();
      }
      swift_bridgeObjectRelease();
    }
    outlined consume of Path.Storage(v106, v107, v108, v109, v110);
    outlined destroy of AccessibilityNodeAttachment(v49);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v63 = *(void *)(v41 + 16);
    if (v63)
    {
      swift_bridgeObjectRetain();
      char v64 = (_DWORD *)(v41 + 100);
      do
      {
        uint64_t v65 = *(void *)(v64 - 9);
        uint64_t v66 = *(void *)(v64 - 7);
        unint64_t v67 = *(void *)(v64 - 5);
        uint64_t v68 = *(void *)(v64 - 3);
        char v69 = *((unsigned char *)v64 - 2);
        __int16 v70 = *((_WORD *)v64 - 2);
        int v71 = *v64;
        long long v72 = *(_OWORD *)(v64 - 13);
        long long v114 = *(_OWORD *)(v64 - 17);
        long long v115 = v72;
        uint64_t v116 = v65;
        uint64_t v117 = v66;
        unint64_t v118 = v67;
        uint64_t v119 = v68;
        char v121 = v69;
        __int16 v120 = v70;
        int v122 = v71;
        outlined copy of DisplayList.Item.Value(v66, v67);
        DisplayList.AccessibilityUpdater.update(item:state:)(&v114, a3);
        outlined consume of DisplayList.Item.Value(v66, v67);
        v64 += 18;
        --v63;
      }
      while (v63);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    outlined consume of Path.Storage(v106, v107, v108, v109, v110);
    swift_release();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_release_n();
  }
  *((void *)a3 + 26) = 0;
  return result;
}

BOOL specialized DisplayList.AccessibilityUpdater.update(list:size:transform:geometryChanged:)(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  __int16 v7 = *((_WORD *)a1 + 4);
  char v8 = *((unsigned char *)a1 + 10);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  *(void *)&long long v58 = *a1;
  WORD4(v58) = v7;
  BYTE10(v58) = v8;
  DisplayList.version.getter();
  uint64_t v14 = v38;
  if ((void)v38)
  {
    int v15 = (2 * ((33 * ((unint64_t)v38 >> 16)) ^ v38)) | 1;
    if (*(unsigned __int16 *)(v3 + 16) == ((unsigned __int16)(2 * ((33 * WORD1(v38)) ^ v38)) | 1) && (a3 & 1) == 0) {
      return 0;
    }
    uint64_t v16 = *(void **)(v3 + 40);
    if (!v16) {
      return 0;
    }
  }
  else
  {
    if (!*(_WORD *)(v3 + 16) && (a3 & 1) == 0) {
      return 0;
    }
    uint64_t v16 = *(void **)(v3 + 40);
    if (!v16) {
      return 0;
    }
    LOWORD(v15) = 0;
  }
  *(_WORD *)(v4 + 16) = v15;
  swift_retain();
  uint64_t v17 = v16;
  DisplayList.Index.init()();
  long long v58 = v38;
  char v59 = v39[0];
  long long v60 = 0uLL;
  uint64_t v61 = v9;
  *(void *)&long long v62 = v10;
  *((void *)&v62 + 1) = v11;
  *(void *)&long long v63 = v12;
  *((void *)&v63 + 1) = v13;
  long long v64 = 0u;
  long long v65 = 0u;
  char v66 = 6;
  uint64_t v67 = v14;
  uint64_t v68 = MEMORY[0x1E4FBC860];
  long long v70 = 0uLL;
  char v69 = v17;
  int v71 = 0;
  char v72 = 1;
  long long v73 = 0uLL;
  uint64_t v74 = 255;
  char v76 = 0;
  int v75 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v6 + 16);
  if (v19)
  {
    uint64_t v37 = v17;
    swift_bridgeObjectRetain();
    int v20 = (_DWORD *)(v6 + 100);
    do
    {
      uint64_t v21 = *(void *)(v20 - 9);
      uint64_t v22 = *(void *)(v20 - 7);
      unint64_t v23 = *(void *)(v20 - 5);
      uint64_t v24 = *(void *)(v20 - 3);
      char v25 = *((unsigned char *)v20 - 2);
      __int16 v26 = *((_WORD *)v20 - 2);
      int v27 = *v20;
      long long v38 = *(_OWORD *)(v20 - 17);
      *(_OWORD *)unint64_t v39 = *(_OWORD *)(v20 - 13);
      *(void *)&v39[16] = v21;
      uint64_t v40 = v22;
      *(void *)&long long v41 = v23;
      *((void *)&v41 + 1) = v24;
      BYTE2(v42) = v25;
      LOWORD(v42) = v26;
      DWORD1(v42) = v27;
      outlined copy of DisplayList.Item.Value(v22, v23);
      DisplayList.AccessibilityUpdater.update(item:state:)((uint64_t *)&v38, (double *)&v58);
      outlined consume of DisplayList.Item.Value(v22, v23);
      v20 += 18;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v18 = v69;
    uint64_t v17 = v37;
  }
  long long v28 = &v18[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  unint64_t v29 = *(void *)v28;
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v31 = v77;
  if (__OFSUB__(v30, v77))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v30 - v77 > 0)
  {
    if (v30 >= v77)
    {
      specialized DisplayList.AccessibilityUpdater.remove(_:state:)(v77, v30, (uint64_t)&v58);
      goto LABEL_20;
    }
LABEL_25:
    __break(1u);
    JUMPOUT(0x187867CC4);
  }
LABEL_20:
  swift_beginAccess();
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = specialized _NativeDictionary.filter(_:)(v32, v14);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 48) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(v4 + 56);

  BOOL v35 = v34 == v14;
  long long v38 = v58;
  v39[0] = v59;
  *(_OWORD *)&v39[8] = v60;
  uint64_t v40 = v61;
  long long v41 = v62;
  long long v42 = v63;
  long long v43 = v64;
  long long v44 = v65;
  char v45 = v66;
  uint64_t v46 = v67;
  uint64_t v47 = v68;
  int v48 = v18;
  long long v49 = v70;
  int v50 = v71;
  char v51 = v72;
  long long v52 = v73;
  uint64_t v53 = v74;
  char v55 = v76;
  int v54 = v75;
  uint64_t v56 = v31;
  uint64_t v57 = v78;
  outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v38);
  return v35;
}

uint64_t outlined copy of GraphicsBlendMode(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t outlined consume of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t result = swift_release();
      break;
    case 5:
      uint64_t result = outlined consume of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of GraphicsBlendMode(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined release of DisplayList.AccessibilityUpdater.State(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void **)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v10 = *(void **)(a1 + 176);
  uint64_t v11 = *(void *)(a1 + 168);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 112);
  swift_release();
  outlined consume of Path.Storage(v2, v3, v4, v5, v8);

  swift_bridgeObjectRelease();
  outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v11, v10, v7);
  return a1;
}

void outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(uint64_t a1, void *a2, char a3)
{
  if (a3 != -1) {
    outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(a1, a2, a3 & 1);
  }
}

void outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t outlined retain of DisplayList.AccessibilityUpdater.State(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void **)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v11 = *(void **)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 168);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 112);
  swift_retain();
  outlined copy of Path.Storage(v2, v3, v4, v5, v8);
  swift_bridgeObjectRetain();
  id v9 = v6;
  outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment?(v12, v11, v7);
  return a1;
}

uint64_t outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment?(uint64_t result, void *a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(result, a2, a3 & 1);
  }
  return result;
}

uint64_t outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    id v4 = a2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DisplayList.ArchiveIDs?(uint64_t a1)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AccessibilityNodeAttachment.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AccessibilityNodeAttachment(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityNodeAttachment();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 96);

  return outlined consume of Path.Storage(v2, v3, v4, v5, v6);
}

uint64_t initializeWithCopy for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Path.Storage(v6, v7, v8, v9, v10);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  *(unsigned char *)(a1 + 96) = v10;
  *(void *)(a1 + 100) = *(void *)(a2 + 100);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 96);
  outlined copy of Path.Storage(v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 96);
  *(unsigned char *)(a1 + 96) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 100);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(void *)(a1 + 100) = v14;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  char v5 = *(unsigned char *)(a2 + 96);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  long long v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 96);
  *(unsigned char *)(a1 + 96) = v5;
  outlined consume of Path.Storage(v6, v7, v8, v9, v11);
  *(void *)(a1 + 100) = *(void *)(a2 + 100);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.AccessibilityUpdater.AttachmentStorage()
{
  return &type metadata for DisplayList.AccessibilityUpdater.AttachmentStorage;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EnvironmentChangeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t static EnvironmentChangeModifier2._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v54 = a6;
  uint64_t v51 = a4;
  long long v52 = a3;
  uint64_t v50 = a7;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = a5;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  long long v38 = &v29[-v10];
  uint64_t v48 = type metadata accessor for Observer2();
  uint64_t v49 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v37 = &v29[-v11];
  LODWORD(v11) = *a1;
  uint64_t v46 = *a2;
  uint64_t v12 = v46;
  int v45 = *((_DWORD *)a2 + 2);
  int v13 = v45;
  uint64_t v47 = a2[2];
  uint64_t v14 = v47;
  int v44 = *((_DWORD *)a2 + 6);
  int v15 = v44;
  LODWORD(a1) = *((_DWORD *)a2 + 8);
  int v35 = *((_DWORD *)a2 + 7);
  int v43 = (int)a1;
  int v42 = *((_DWORD *)a2 + 9);
  int v16 = v42;
  uint64_t v17 = a2[6];
  uint64_t v41 = a2[5];
  uint64_t v18 = v41;
  uint64_t v40 = v17;
  int v34 = *((_DWORD *)a2 + 14);
  int v55 = *((_DWORD *)a2 + 15);
  int v33 = *((_DWORD *)a2 + 16);
  int v32 = *((_DWORD *)a2 + 17);
  int v31 = *((_DWORD *)a2 + 18);
  int v19 = *((_DWORD *)a2 + 20);
  int v30 = *((_DWORD *)a2 + 19);
  int v39 = v19;
  LODWORD(v62) = v11;
  type metadata accessor for EnvironmentChangeModifier2();
  type metadata accessor for _GraphValue();
  int v36 = _GraphValue.value.getter();
  uint64_t v62 = v12;
  int v63 = v13;
  uint64_t v65 = v14;
  LODWORD(v14) = v35;
  int v66 = v15;
  int v67 = v35;
  int v68 = (int)a1;
  int v69 = v16;
  uint64_t v70 = v18;
  uint64_t v71 = v17;
  LODWORD(v17) = v34;
  int v72 = v34;
  int v73 = v55;
  LODWORD(v12) = v33;
  LODWORD(v18) = v32;
  int v74 = v33;
  int v75 = v32;
  int v20 = v31;
  LODWORD(a1) = v30;
  int v76 = v31;
  int v77 = v30;
  int v78 = v19;
  LODWORD(a2) = _ViewInputs.environment.getter();
  UpdateCycleDetector.init()();
  uint64_t v56 = v62;
  int v57 = v63;
  char v58 = v64;
  uint64_t v21 = v53;
  uint64_t v22 = (uint64_t)v38;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v38, 1, 1, v53);
  unint64_t v23 = v37;
  Observer.init(modifier:environment:cycleDetector:lastValue:)(v36, (int)a2, (uint64_t)&v56, v22, v21, v54, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Observer2, (uint64_t)v37);
  uint64_t v24 = v48;
  uint64_t v60 = v48;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v59, v24, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
  (*(void (**)(unsigned char *, uint64_t))(v49 + 8))(v23, v24);
  static AGAttributeFlags.transactional.getter();
  uint64_t v27 = AGGraphSetFlags();
  uint64_t v62 = v46;
  int v63 = v45;
  uint64_t v65 = v47;
  int v66 = v44;
  int v67 = v14;
  int v68 = v43;
  int v69 = v42;
  uint64_t v70 = v41;
  uint64_t v71 = v40;
  int v72 = v17;
  int v73 = v55;
  int v74 = v12;
  int v75 = v18;
  int v76 = v20;
  int v77 = (int)a1;
  int v78 = v39;
  return v52(v27, &v62);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EnvironmentChangeModifier2<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static EnvironmentChangeModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EnvironmentChangeModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t Observer2.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v85 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v102 = (char *)&v79 - v5;
  uint64_t v103 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v6);
  id v84 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int v91 = (char *)&v79 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v96 = (char *)&v79 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v94 = (char *)&v79 - v13;
  uint64_t v83 = v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v79 - v16;
  uint64_t v18 = *(void **)(v3 - 8);
  MEMORY[0x1F4188790](v19);
  int v93 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = v20;
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v79 - v22;
  uint64_t v24 = Observer.modifier.getter(a1, (void (*)(void, void, void))type metadata accessor for EnvironmentChangeModifier2);
  uint64_t v86 = v25;
  uint64_t v97 = v26;
  WindowSceneList.MakeList.environment.getter(v108);
  uint64_t v106 = v108[0];
  uint64_t v107 = v108[1];
  uint64_t v98 = v24;
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  uint64_t v92 = a1;
  uint64_t v27 = *(int *)(a1 + 44);
  uint64_t v28 = v4;
  uint64_t v87 = v1;
  uint64_t v29 = v1 + v27;
  uint64_t v30 = v3;
  int v31 = v102;
  uint64_t v33 = v103 + 16;
  int v32 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
  v32(v17, v1 + v27, v28);
  int v34 = (void (*)(char *, char *, uint64_t))v18[2];
  int v35 = v94;
  long long v99 = v23;
  __int16 v81 = v18 + 2;
  char v80 = v34;
  v34(v94, v23, v30);
  int v36 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v18[7];
  uint64_t v37 = v35;
  uint64_t v89 = v18 + 7;
  unint64_t v88 = v36;
  v36((uint64_t)v35, 0, 1, v30);
  long long v38 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v95 = v17;
  int v39 = v17;
  uint64_t v40 = v37;
  v32(v31, (uint64_t)v39, v28);
  uint64_t v104 = v28;
  v32(v38, (uint64_t)v37, v28);
  int v101 = v18;
  uint64_t v41 = (uint64_t (*)(char *, uint64_t, uint64_t))v18[6];
  uint64_t v105 = v30;
  int v42 = v41(v31, 1, v30);
  uint64_t v90 = v29;
  if (v42 == 1)
  {
    uint64_t v43 = v104;
    int v44 = *(void (**)(char *, uint64_t))(v103 + 8);
    v44(v40, v104);
    v44(v95, v43);
    if (v41(v38, 1, v105) == 1)
    {
      v44(v102, v104);
      ((void (*)(char *, uint64_t))v101[1])(v99, v105);
LABEL_10:
      swift_release();
      return swift_release();
    }
    uint64_t v95 = (char *)v44;
    uint64_t v47 = (void (*)(char *, uint64_t))v32;
    uint64_t v50 = v101;
    goto LABEL_7;
  }
  uint64_t v45 = v103;
  uint64_t v46 = v95;
  v32(v96, (uint64_t)v102, v104);
  if (v41(v38, 1, v105) == 1)
  {
    uint64_t v47 = (void (*)(char *, uint64_t))v32;
    uint64_t v48 = *(void (**)(char *, uint64_t))(v45 + 8);
    uint64_t v49 = v104;
    v48(v40, v104);
    uint64_t v95 = (char *)v48;
    v48(v46, v49);
    uint64_t v50 = v101;
    ((void (*)(char *, uint64_t))v101[1])(v96, v105);
LABEL_7:
    uint64_t v52 = v97;
    uint64_t v51 = v98;
    uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v102, TupleTypeMetadata2);
    uint64_t v54 = *(void *)(v92 + 24);
    uint64_t v55 = v86;
    goto LABEL_12;
  }
  uint64_t v85 = v33;
  uint64_t v56 = v101;
  int v57 = v93;
  uint64_t v58 = v105;
  ((void (*)(char *, char *, uint64_t))v101[4])(v93, v38, v105);
  char v59 = v96;
  uint64_t v92 = *(void *)(v92 + 24);
  LODWORD(TupleTypeMetadata2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v60 = (void (*)(char *, uint64_t))v56[1];
  v60(v57, v58);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v62 = v104;
  v61(v40, v104);
  v61(v46, v62);
  v60(v59, v58);
  uint64_t v95 = (char *)v61;
  uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v61)(v102, v62);
  if (TupleTypeMetadata2)
  {
    v60(v99, v105);
    goto LABEL_10;
  }
  uint64_t v47 = (void (*)(char *, uint64_t))v32;
  uint64_t v50 = v101;
  uint64_t v52 = v97;
  uint64_t v51 = v98;
  uint64_t v55 = v86;
  uint64_t v54 = v92;
LABEL_12:
  MEMORY[0x1F4188790](v53);
  *(&v79 - 6) = v105;
  *(&v79 - 5) = v54;
  *(&v79 - 4) = v51;
  *(&v79 - 3) = v55;
  *(&v79 - 2) = v52;
  if (UpdateCycleDetector.dispatch(label:isDebug:)())
  {
    AGGraphClearUpdate();
    char v64 = (void *)swift_allocObject();
    uint64_t v65 = v105;
    v64[2] = v105;
    v64[3] = v54;
    v64[4] = v55;
    v64[5] = v52;
    swift_retain();
    AGGraphSetUpdate();
    int v66 = (void *)swift_allocObject();
    v66[2] = v65;
    v66[3] = v54;
    v66[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> ();
    v66[5] = v64;
    uint64_t v68 = v90;
    int v67 = v91;
    uint64_t v69 = v104;
    v47(v91, v90);
    uint64_t v70 = v84;
    ((void (*)(char *, char *, uint64_t))v47)(v84, v67, v69);
    v80(v93, v99, v65);
    uint64_t v71 = v103;
    unint64_t v72 = (*(unsigned __int8 *)(v103 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
    unint64_t v73 = (v83 + *((unsigned __int8 *)v101 + 80) + v72) & ~(unint64_t)*((unsigned __int8 *)v101 + 80);
    int v74 = (char *)swift_allocObject();
    *((void *)v74 + 2) = v65;
    *((void *)v74 + 3) = v54;
    *((void *)v74 + 4) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ());
    *((void *)v74 + 5) = v66;
    int v75 = v70;
    uint64_t v50 = v101;
    uint64_t v76 = v104;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(&v74[v72], v75, v104);
    ((void (*)(char *, char *, uint64_t))v50[4])(&v74[v73], v93, v65);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    int v77 = (void (*)(uint64_t, uint64_t))v95;
    ((void (*)(char *, uint64_t))v95)(v91, v76);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v68 = v90;
    int v77 = (void (*)(uint64_t, uint64_t))v95;
  }
  v77(v68, v104);
  uint64_t v78 = v105;
  ((void (*)(uint64_t, char *, uint64_t))v50[4])(v68, v99, v105);
  return v88(v68, 0, 1, v78);
}

uint64_t implicit closure #1 in Observer.updateValue()()
{
  _StringGuts.grow(_:)(27);
  v0._object = (void *)0x800000018832AE60;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  type metadata accessor for KeyPath();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Observer2<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t type metadata accessor for EnvironmentChangeModifier2()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18786959C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for EnvironmentChangeModifier);
}

uint64_t sub_1878695BC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for EnvironmentChangeModifier2);
}

void *assignWithCopy for EnvironmentChangeModifier2(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EnvironmentChangeModifier2(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in EnvironmentChangeModifier<A>()
{
  return &protocol witness table for EnvironmentChangeModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in EnvironmentChangeModifier2<A>()
{
  return &protocol witness table for EnvironmentChangeModifier2<A>;
}

uint64_t type metadata accessor for Observer2()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for Observer2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 21) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v16 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v16 = *v15;
    uint64_t v17 = (void *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v18 = (uint64_t *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = *v18;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)v18 + 5);
    *uint64_t v17 = v19;
    uint64_t v20 = (void *)(((unint64_t)v17 + v8 + 13) & ~v8);
    uint64_t v21 = (const void *)(((unint64_t)v18 + v8 + 13) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v18 + v8 + 13) & ~v8, 1, v4))
    {
      memcpy(v20, v21, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v20, v21, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for Observer2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v6 + 80) + 13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for Observer2(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (void *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (uint64_t *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = *v8;
  *(void *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *int v7 = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (void *)(((unint64_t)v7 + v12 + 13) & ~v12);
  uint64_t v14 = (const void *)(((unint64_t)v8 + v12 + 13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84)) {
      size_t v15 = *(void *)(v11 + 64);
    }
    else {
      size_t v15 = *(void *)(v11 + 64) + 1;
    }
    memcpy(v13, v14, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  return a1;
}

_DWORD *assignWithCopy for Observer2(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 13 + v7) & ~v11);
  uint64_t v13 = (void *)((v11 + 13 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      return a1;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
      return a1;
    }
    uint64_t v20 = *(void (**)(void *, uint64_t))(v10 + 8);
    uint64_t v19 = v10 + 8;
    v20(v12, v9);
    int v17 = *(_DWORD *)(v19 + 76);
    size_t v18 = *(void *)(v19 + 56);
  }
  if (v17) {
    size_t v21 = v18;
  }
  else {
    size_t v21 = v18 + 1;
  }
  memcpy(v12, v13, v21);
  return a1;
}

_DWORD *initializeWithTake for Observer2(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = (void *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (uint64_t *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = *v8;
  *(void *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *unint64_t v7 = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (void *)(((unint64_t)v7 + v12 + 13) & ~v12);
  uint64_t v14 = (const void *)(((unint64_t)v8 + v12 + 13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84)) {
      size_t v15 = *(void *)(v11 + 64);
    }
    else {
      size_t v15 = *(void *)(v11 + 64) + 1;
    }
    memcpy(v13, v14, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v13, v14, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  return a1;
}

_DWORD *assignWithTake for Observer2(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 13 + v7) & ~v11);
  uint64_t v13 = (void *)((v11 + 13 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      return a1;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      return a1;
    }
    uint64_t v20 = *(void (**)(void *, uint64_t))(v10 + 8);
    uint64_t v19 = v10 + 8;
    v20(v12, v9);
    int v17 = *(_DWORD *)(v19 + 76);
    size_t v18 = *(void *)(v19 + 56);
  }
  if (v17) {
    size_t v21 = v18;
  }
  else {
    size_t v21 = v18 + 1;
  }
  memcpy(v12, v13, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Observer2(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 > v7)
  {
    uint64_t v11 = v9 + ((v8 + 21) & ~v8);
    char v12 = 8 * v11;
    if (v11 > 3) {
      goto LABEL_12;
    }
    unsigned int v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 >= 2)
    {
LABEL_12:
      int v13 = *((unsigned __int8 *)a1 + v11);
      if (!*((unsigned char *)a1 + v11)) {
        goto LABEL_27;
      }
LABEL_19:
      int v15 = (v13 - 1) << v12;
      if (v11 > 3) {
        int v15 = 0;
      }
      if (v11)
      {
        if (v11 > 3) {
          LODWORD(v11) = 4;
        }
        switch((int)v11)
        {
          case 2:
            LODWORD(v11) = *a1;
            break;
          case 3:
            LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v11) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v11) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v20 = v7 + (v11 | v15);
      return (v20 + 1);
    }
  }
LABEL_27:
  unint64_t v16 = ((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v6 <= 0xFE)
  {
    unsigned int v17 = *(unsigned __int8 *)(v16 + 12);
    if (v17 < 2) {
      return 0;
    }
    int v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v16 + v8 + 13) & ~v8);
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Observer2(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 21) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x18786A49CLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        unint64_t v20 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
        if (v9 > 0xFE)
        {
          size_t v21 = (unsigned char *)((v20 + v11 + 13) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26((v20 + v11 + 13) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)size_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)size_t v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)size_t v21 = v23;
                  break;
                default:
                  *size_t v21 = v23;
                  break;
              }
            }
          }
        }
        else if (a2 > 0xFE)
        {
          *(unsigned char *)(v20 + 12) = 0;
          *(_DWORD *)(v20 + 8) = 0;
          *(void *)unint64_t v20 = a2 - 255;
        }
        else
        {
          *(unsigned char *)(v20 + 12) = a2 + 1;
        }
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in Observer2<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_18786A4F4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18786A52C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in Observer.updateValue()()
{
  return implicit closure #1 in Observer.updateValue()();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_18786A63C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v1 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  int v7 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v3, 1, v1);
  int v8 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  if (!v7) {
    v8(v0 + v3, v1);
  }
  v8(v0 + ((v3 + v4 + v6) & ~v6), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Observer2.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 32))(v0 + v4, v0+ ((v4 + v3 + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

ValueMetadata *type metadata accessor for OuterFormListStyle()
{
  return &type metadata for OuterFormListStyle;
}

uint64_t static InlineListStyle._makeView<A>(value:inputs:)()
{
  return static AnyView._makeView(view:inputs:)();
}

uint64_t static InlineListStyle._makeViewList<A>(value:inputs:)()
{
  return static AnyView._makeViewList(view:inputs:)();
}

uint64_t InlineListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t InlineListStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  v9[0] = &type metadata for InlineListStyle;
  v9[1] = a1;
  v9[2] = &protocol witness table for InlineListStyle;
  v9[3] = a2;
  uint64_t v4 = type metadata accessor for _ListValue();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = (char *)v9 - v6;
  InlineListStyle.Body.base.getter((uint64_t)v9 - v6);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance InlineListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return InlineListStyle.Body.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t static OuterFormListStyle._makeView<A>(value:inputs:)(int *a1, uint64_t a2, uint64_t a3, _UNKNOWN **a4)
{
  uint64_t v29 = *(ValueMetadata **)a2;
  int v28 = *(_DWORD *)(a2 + 8);
  uint64_t v27 = *(void *)(a2 + 16);
  int v30 = *(_DWORD *)(a2 + 80);
  int v39 = *a1;
  int v31 = &type metadata for OuterFormListStyle;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = &protocol witness table for OuterFormListStyle;
  uint64_t v33 = a4;
  type metadata accessor for _ListValue();
  type metadata accessor for _GraphValue();
  int v7 = *(_UNKNOWN ***)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  long long v25 = *(_OWORD *)(a2 + 56);
  long long v26 = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 72);
  int v10 = _GraphValue.value.getter();
  v45[0] = 1;
  memset(&v45[1], 0, 24);
  __int16 v46 = 256;
  unint64_t v11 = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v10, (uint64_t)v45, v12, (uint64_t)&type metadata for InsetGroupedListStyleContext, (char *)&v31);
  int v13 = (int)v31;
  long long v24 = v32;
  BOOL v14 = v33;
  unint64_t v15 = v34;
  char v16 = v35;
  char v23 = BYTE1(v35);
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  int v18 = v17;
  uint64_t v19 = type metadata accessor for SelectionManagerBox();
  unint64_t v20 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  uint64_t WitnessTable = swift_getWitnessTable();
  int v31 = v18;
  *(void *)&long long v32 = v19;
  *((void *)&v32 + 1) = v20;
  uint64_t v33 = (_UNKNOWN **)WitnessTable;
  type metadata accessor for InsettableGroupedListBody();
  int v39 = v13;
  long long v40 = v24;
  uint64_t v41 = v14;
  unint64_t v42 = v15;
  char v43 = v16;
  char v44 = v23;
  int v31 = &type metadata for OuterFormListStyle;
  *(void *)&long long v32 = &type metadata for InsetGroupedListStyleContext;
  *((void *)&v32 + 1) = a3;
  uint64_t v33 = &protocol witness table for OuterFormListStyle;
  unint64_t v34 = v11;
  *(void *)&long long v35 = a4;
  type metadata accessor for InsettableGroupedListBodyRule();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  int v31 = v29;
  LODWORD(v32) = v28;
  *((void *)&v32 + 1) = v27;
  uint64_t v33 = v7;
  unint64_t v34 = v8;
  long long v35 = v26;
  long long v36 = v25;
  uint64_t v37 = v9;
  int v38 = v30;
  swift_getWitnessTable();
  return static View._makeView(view:inputs:)();
}

uint64_t static OuterFormListStyle._makeViewList<A>(value:inputs:)(int *a1, uint64_t a2, uint64_t a3, _UNKNOWN **a4)
{
  long long v26 = *(ValueMetadata **)a2;
  int v25 = *(_DWORD *)(a2 + 8);
  uint64_t v24 = *(void *)(a2 + 16);
  long long v31 = *(_OWORD *)(a2 + 40);
  uint64_t v30 = *(void *)(a2 + 56);
  int v29 = *(_DWORD *)(a2 + 64);
  uint64_t v28 = *(void *)(a2 + 72);
  char v27 = *(unsigned char *)(a2 + 80);
  int v41 = *a1;
  long long v32 = &type metadata for OuterFormListStyle;
  *(void *)&long long v33 = a3;
  *((void *)&v33 + 1) = &protocol witness table for OuterFormListStyle;
  unint64_t v34 = a4;
  type metadata accessor for _ListValue();
  type metadata accessor for _GraphValue();
  int v7 = *(_UNKNOWN ***)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  int v9 = _GraphValue.value.getter();
  v47[0] = 1;
  memset(&v47[1], 0, 24);
  __int16 v48 = 256;
  unint64_t v10 = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v9, (uint64_t)v47, v11, (uint64_t)&type metadata for InsetGroupedListStyleContext, (char *)&v32);
  int v12 = (int)v32;
  long long v23 = v33;
  int v13 = v34;
  unint64_t v14 = v35;
  char v15 = v36;
  char v22 = BYTE1(v36);
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  unsigned int v17 = v16;
  uint64_t v18 = type metadata accessor for SelectionManagerBox();
  unint64_t v19 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v32 = v17;
  *(void *)&long long v33 = v18;
  *((void *)&v33 + 1) = v19;
  unint64_t v34 = (_UNKNOWN **)WitnessTable;
  type metadata accessor for InsettableGroupedListBody();
  int v41 = v12;
  long long v42 = v23;
  char v43 = v13;
  unint64_t v44 = v14;
  char v45 = v15;
  char v46 = v22;
  long long v32 = &type metadata for OuterFormListStyle;
  *(void *)&long long v33 = &type metadata for InsetGroupedListStyleContext;
  *((void *)&v33 + 1) = a3;
  unint64_t v34 = &protocol witness table for OuterFormListStyle;
  unint64_t v35 = v10;
  *(void *)&long long v36 = a4;
  type metadata accessor for InsettableGroupedListBodyRule();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  long long v32 = v26;
  LODWORD(v33) = v25;
  *((void *)&v33 + 1) = v24;
  unint64_t v34 = v7;
  unint64_t v35 = v8;
  long long v36 = v31;
  uint64_t v37 = v30;
  int v38 = v29;
  uint64_t v39 = v28;
  char v40 = v27;
  swift_getWitnessTable();
  return static View._makeViewList(view:inputs:)();
}

uint64_t type metadata accessor for InlineListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in InlineListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t ModifiedContent<>.accessibilitySetValueAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction();
  return ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)(v8, 0, 0, 0, 0, 0, a1, a2, a4, a3, (uint64_t)&type metadata for AccessibilitySetValueAction, v8);
}

unint64_t lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction;
  if (!lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction;
  if (!lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySetValueAction()
{
  return &type metadata for AccessibilitySetValueAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilitySetValueAction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction();
  *(void *)(a1 + 8) = result;
  return result;
}

void WindowVisibilityToggle.init<>(windowID:)()
{
}

void WindowVisibilityToggle.body.getter()
{
}

void WindowVisibilityToggle.init(windowID:label:)()
{
}

void DefaultWindowVisibilityToggleLabel.body.getter()
{
}

void WindowVisibilityButton.init<>(windowID:)()
{
}

void WindowVisibilityButton.body.getter()
{
}

void DefaultWindowVisibilityButtonLabel.body.getter()
{
}

uint64_t associated type witness table accessor for View.Body : View in WindowVisibilityToggle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultWindowVisibilityToggleLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in WindowVisibilityButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultWindowVisibilityButtonLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultWindowVisibilityButtonLabel(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 4) & 1;
}

uint64_t destroy for WindowVisibilityToggle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 49);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);

  return outlined consume of Environment<Binding<Visibility>?>.Content(v2, v3, v5, v4);
}

uint64_t initializeWithCopy for WindowVisibilityToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Environment<CGFloat?>.Content(v5, v7, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  LOBYTE(v7) = *(unsigned char *)(a2 + 49);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<Binding<Visibility>?>.Content(v8, v9, v10, v7);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 49) = v7;
  return a1;
}

uint64_t assignWithCopy for WindowVisibilityToggle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(unsigned char *)(a2 + 49);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<Binding<Visibility>?>.Content(v10, v11, v13, v12);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  char v16 = *(unsigned char *)(a1 + 49);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v13;
  *(unsigned char *)(a1 + 49) = v12;
  outlined consume of Environment<Binding<Visibility>?>.Content(v14, v15, v17, v16);
  return a1;
}

uint64_t assignWithTake for WindowVisibilityToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 25) = v6;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  char v10 = *(unsigned char *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 49);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  char v14 = *(unsigned char *)(a1 + 49);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 49) = v11;
  outlined consume of Environment<Binding<Visibility>?>.Content(v12, v13, v15, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowVisibilityToggle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 50)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowVisibilityToggle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 50) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for WindowVisibilityToggle()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DefaultWindowVisibilityToggleLabel()
{
  return &type metadata for DefaultWindowVisibilityToggleLabel;
}

void *assignWithCopy for WindowVisibilityButton(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowVisibilityButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowVisibilityButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for WindowVisibilityButton()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DefaultWindowVisibilityButtonLabel()
{
  return &type metadata for DefaultWindowVisibilityButtonLabel;
}

uint64_t sub_18786B964()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t sub_18786B970()
{
  return MEMORY[0x1E4F417F0];
}

unint64_t lazy protocol witness table accessor for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>;
  if (!lazy protocol witness table cache variable for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>)
  {
    type metadata accessor for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>);
  }
  return result;
}

void type metadata accessor for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>()
{
  if (!lazy cache variable for type metadata for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>)
  {
    lazy protocol witness table accessor for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel();
    unint64_t v0 = type metadata accessor for WindowVisibilityToggle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel;
  if (!lazy protocol witness table cache variable for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel);
  }
  return result;
}

uint64_t Text.speechAlwaysIncludesPunctuation(_:)(char a1)
{
  type metadata accessor for SpeechModifier();
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 17) = 2;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 769;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.speechSpellsOutCharacters(_:)(char a1)
{
  type metadata accessor for SpeechModifier();
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = 2;
  *(unsigned char *)(v2 + 17) = a1;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 769;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.speechAdjustedPitch(_:)(double a1)
{
  type metadata accessor for SpeechModifier();
  uint64_t v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 514;
  *(double *)(v2 + 24) = a1;
  *(_WORD *)(v2 + 32) = 768;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.speechAnnouncementsQueued(_:)(char a1)
{
  char v1 = a1 ^ 1;
  type metadata accessor for SpeechModifier();
  uint64_t v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 514;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 1;
  *(unsigned char *)(v2 + 33) = v1;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t View.speechAlwaysIncludesPunctuation(_:)()
{
  return View.speechAlwaysIncludesPunctuation(_:)();
}

{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18786BD8C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.speechAlwaysIncludesPunctuation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18786BDC8()
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.setter();
}

uint64_t View.speechSpellsOutCharacters(_:)()
{
  return View.speechAlwaysIncludesPunctuation(_:)();
}

uint64_t sub_18786BE6C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.speechSpellsOutCharacters.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18786BEA8()
{
  return EnvironmentValues.speechSpellsOutCharacters.setter();
}

uint64_t View.speechAdjustedPitch(_:)()
{
  return swift_release();
}

uint64_t sub_18786BF50@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.speechAdjustedPitch.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18786BF94()
{
  return EnvironmentValues.speechAdjustedPitch.setter();
}

uint64_t View.speechAnnouncementsQueued(_:)()
{
  return swift_release();
}

uint64_t sub_18786C03C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.speechAnnouncementsPriority.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18786C080()
{
  return EnvironmentValues.speechAnnouncementsPriority.setter();
}

uint64_t Text.speechAnnouncementsPriority(_:)(char *a1)
{
  char v1 = *a1;
  type metadata accessor for SpeechModifier();
  uint64_t v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 514;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 1;
  *(unsigned char *)(v2 + 33) = v1;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t View.speechAnnouncementsPriority(_:)()
{
  return swift_release();
}

uint64_t sub_18786C1E8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_18786C20C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Double?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_18786C230(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AccessibilityAnnouncementPriority?>, &lazy cache variable for type metadata for AccessibilityAnnouncementPriority?, MEMORY[0x1E4F41298], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AccessibilityAnnouncementPriority?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t WheelPicker_Phone.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v25 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UIKitWheelPicker();
  uint64_t v23 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v23 - v10;
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v12 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v3, v5, v13);
  char v16 = (uint64_t *)(v3 + *(int *)(a1 + 36));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = v16[2];
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v8, v5);
  unint64_t v20 = &v11[*(int *)(v9 + 36)];
  *(void *)unint64_t v20 = v17;
  *((void *)v20 + 1) = v18;
  *((void *)v20 + 2) = v19;
  swift_getKeyPath();
  LOBYTE(v28) = 4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v28 = static Font.system(size:weight:design:)();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
  static Alignment.center.getter();
  uint64_t v21 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
  long long v26 = &protocol witness table for UIKitWheelPicker<A>;
  uint64_t v27 = v21;
  swift_getWitnessTable();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v12);
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues()
{
  return EnvironmentValues.font.setter();
}

uint64_t protocol witness for CustomWheelPickerRow.cell.getter in conformance WheelPickerRow<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t protocol witness for CustomWheelPickerRow.isDisabled.getter in conformance WheelPickerRow<A, B>(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

id UIKitWheelPicker.makeCoordinator()(uint64_t a1)
{
  type metadata accessor for CoreCoordinator();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return specialized CoreCoordinator.__allocating_init(dataSource:selection:)(v1, v4, v5, v6);
}

uint64_t UIKitWheelPicker.updateUIView(_:context:)(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v100 = a1;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v97 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __int16 v81 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v92 = (char *)&v72 - v9;
  uint64_t v99 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  unint64_t v73 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v72 - v13;
  MEMORY[0x1F4188790](v15);
  int v101 = (char *)&v72 - v16;
  uint64_t v17 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v86 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v72 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v72 - v24;
  uint64_t v96 = *a2;
  uint64_t v95 = (void (*)(uint64_t, uint64_t, uint64_t))a2[1];
  unint64_t v89 = a2[2];
  unint64_t v88 = (void (**)(char *, uint64_t))a2[3];
  LODWORD(v82) = *((unsigned __int8 *)a2 + 32);
  uint64_t v26 = a2[5];
  CoreCoordinator.dataSource.getter((uint64_t)&v72 - v24);
  uint64_t v104 = v8;
  uint64_t v105 = v4;
  int v106 = 3;
  uint64_t v85 = v25;
  uint64_t v27 = (uint64_t)v25;
  uint64_t v28 = 0;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v27, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)v103, v8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v29);
  LOBYTE(v7) = v107;
  uint64_t v72 = v17;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v79 = v8;
  uint64_t v84 = v17 + 16;
  uint64_t v83 = v30;
  v30(v22, (char *)v4, v8);
  CoreCoordinator.dataSource.setter((uint64_t)v22);
  uint64_t v31 = *(int *)(a3 + 36);
  uint64_t v94 = v4;
  long long v32 = (uint64_t *)(v4 + v31);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  int v91 = v32;
  uint64_t v35 = v32[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v90 = v26;
  CoreCoordinator.selection.setter(v33, v34, v35);
  if ((v7 & 1) == 0) {
    objc_msgSend(v100, sel_reloadAllComponents);
  }
  uint64_t v87 = v14;
  uint64_t v107 = v96;
  *(void *)&long long v108 = v95;
  *((void *)&v108 + 1) = v89;
  uint64_t v109 = v88;
  char v110 = (char)v82;
  uint64_t v111 = v90;
  swift_getWitnessTable();
  type metadata accessor for UIViewRepresentableContext();
  specialized ReferenceFileDocumentConfiguration.document.getter();
  swift_retain();
  uint64_t v36 = Transaction.animation.getter();
  swift_release();
  if (v36) {
    swift_release();
  }
  unint64_t v37 = (unint64_t)objc_msgSend(v100, sel_numberOfComponents);
  uint64_t v38 = v79;
  if ((v37 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  uint64_t v80 = v36;
  if (v37)
  {
    uint64_t v39 = 0;
    uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 40);
    uint64_t v96 = v97 + 40;
    unint64_t v88 = v81 + 1;
    uint64_t v82 = (void (**)(char *, char *, uint64_t))(v10 + 16);
    char v40 = (void (**)(char *, uint64_t))(v10 + 8);
    __int16 v81 = (void (**)(char *, uint64_t))(v72 + 8);
    unint64_t v89 = v37;
    while (1)
    {
      id v41 = objc_msgSend(v100, sel_selectedRowInComponent_, v39);
      v95(v39, v38, v97);
      uint64_t v107 = *v91;
      long long v108 = *(_OWORD *)(v91 + 1);
      uint64_t v42 = AssociatedTypeWitness;
      type metadata accessor for Array();
      uint64_t v43 = type metadata accessor for Binding();
      MEMORY[0x18C113DA0](&v102, v43);
      unint64_t v44 = v92;
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v45 = Collection.offset(of:)();
      (*v88)(v44, v42);
      if (v41 == (id)v45) {
        break;
      }
      uint64_t v47 = CoreCoordinator.selectedRow(inComponent:)(v39);
      __int16 v48 = v87;
      if (v49)
      {
        uint64_t v51 = v86;
        v83(v86, v85, v38);
        uint64_t v52 = v99;
        (*v82)(v48, v101, v99);
LABEL_15:
        int v66 = v51;
        char v46 = *v40;
        (*v40)(v48, v52);
        (*v81)(v66, v38);
LABEL_16:
        objc_msgSend(v100, sel_selectRow_inComponent_animated_, v45, v39, v80 != 0);
        CoreCoordinator.didSelectRow(_:inComponent:)(v45, v39);
LABEL_17:
        unint64_t v65 = v89;
        v46(v101, v99);
        goto LABEL_18;
      }
      uint64_t v50 = v47;
      uint64_t v51 = v86;
      v83(v86, v85, v38);
      uint64_t v52 = v99;
      (*v82)(v48, v101, v99);
      if (v50 != v45) {
        goto LABEL_15;
      }
      uint64_t v53 = v73;
      uint64_t v54 = v97;
      uint64_t v55 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v95)(v39, v38, v97);
      MEMORY[0x1F4188790](v55);
      *(&v72 - 2) = v38;
      *(&v72 - 1) = v54;
      KeyPath = (uint64_t *)swift_getKeyPath();
      uint64_t v76 = &v72;
      MEMORY[0x1F4188790](KeyPath);
      *(&v72 - 4) = v38;
      *(&v72 - 3) = v54;
      *(&v72 - 2) = v56;
      uint64_t v78 = swift_getAssociatedTypeWitness();
      uint64_t v77 = swift_getAssociatedConformanceWitness();
      uint64_t v57 = swift_getAssociatedTypeWitness();
      uint64_t v75 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #2 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:), (uint64_t)(&v72 - 6), v52, v57, MEMORY[0x1E4FBC248], AssociatedConformanceWitness, MEMORY[0x1E4FBC278], v58);
      char v46 = *v40;
      (*v40)(v53, v52);
      uint64_t v59 = swift_release();
      MEMORY[0x1F4188790](v59);
      *(&v72 - 2) = v79;
      *(&v72 - 1) = v54;
      uint64_t v60 = swift_getKeyPath();
      KeyPath = &v72;
      MEMORY[0x1F4188790](v60);
      *(&v72 - 4) = v79;
      *(&v72 - 3) = v54;
      *(&v72 - 2) = v61;
      uint64_t v62 = v87;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #3 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:), (uint64_t)(&v72 - 6), v52, v57, MEMORY[0x1E4FBC248], AssociatedConformanceWitness, MEMORY[0x1E4FBC278], v63);
      uint64_t v76 = v28;
      swift_release();
      swift_getAssociatedConformanceWitness();
      uint64_t v38 = v79;
      char v64 = static Array<A>.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v46(v62, v52);
      (*v81)(v86, v38);
      if ((v64 & 1) == 0)
      {
        uint64_t v28 = v76;
        goto LABEL_16;
      }
      v46(v101, v52);
      unint64_t v65 = v89;
      uint64_t v28 = v76;
LABEL_18:
      if (v65 == ++v39) {
        goto LABEL_21;
      }
    }
    char v46 = *v40;
    goto LABEL_17;
  }
LABEL_21:
  LODWORD(v107) = -1;
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
    if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    {
      LODWORD(v67) = 1132068864;
      id v68 = v100;
      objc_msgSend(v100, sel_setContentHuggingPriority_forAxis_, 0, v67);
      LODWORD(v69) = 1112014848;
      objc_msgSend(v68, sel_setContentCompressionResistancePriority_forAxis_, 0, v69);
      LODWORD(v70) = 1112014848;
      objc_msgSend(v68, sel_setContentCompressionResistancePriority_forAxis_, 1, v70);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v85, v38);
}

uint64_t key path getter for CustomWheelPickerRow.identifier : <A>A.Rows.Element()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitWheelPicker<A>(uint64_t a1)
{
  return specialized UIKitWheelPicker.makeUIView(context:)(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitWheelPicker<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = UIKitWheelPicker.makeCoordinator()(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for UIKitPickerView()
{
  return self;
}

uint64_t type metadata completion function for CoreCoordinator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t CoreCoordinator.selection.getter()
{
  uint64_t v1 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68));
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreCoordinator.selection.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x68));
  *uint64_t v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t CoreCoordinator.didSelectRow(_:inComponent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70));
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v5;
  *uint64_t v5 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v5 = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t CoreCoordinator.selectedRow(inComponent:)(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70));
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0)) {
    return *(void *)(*(void *)(v4 + 56) + 8 * v5);
  }
  else {
    return 0;
  }
}

uint64_t CoreCoordinator.pickerView(_:didSelectRow:inComponent:)(void *a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v4 = v3;
  uint64_t v70 = a2;
  Swift::Int v71 = a3;
  id v60 = a1;
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v3) + 0x58);
  uint64_t v6 = *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v3) + 0x50);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v62 = (char *)&v59 - v8;
  uint64_t v65 = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v59 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v64 = (char *)&v59 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v19 = swift_checkMetadataState();
  uint64_t v66 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v59 - v20;
  CoreCoordinator.dataSource.getter((uint64_t)v18);
  (*(void (**)(Swift::Int, uint64_t, uint64_t))(v5 + 40))(v71, v6, v5);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v6);
  Collection.index(atOffset:)();
  uint64_t v68 = v19;
  double v69 = v14;
  char v22 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v24 = v62;
  uint64_t v23 = v63;
  (*((void (**)(char *))v63 + 2))(v62);
  v22(&v74, 0);
  uint64_t v25 = v4;
  uint64_t v26 = swift_getAssociatedConformanceWitness();
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 56))(AssociatedTypeWitness, v26);
  (*((void (**)(char *, uint64_t))v23 + 1))(v24, AssociatedTypeWitness);
  uint64_t v27 = CoreCoordinator.selection.getter();
  if ((v6 & 1) == 0)
  {
    uint64_t v63 = v21;
    uint64_t v74 = v27;
    uint64_t v75 = v28;
    uint64_t v76 = v29;
    uint64_t v30 = v65;
    uint64_t v62 = (char *)type metadata accessor for Array();
    uint64_t v38 = (void *)type metadata accessor for Binding();
    MEMORY[0x18C113DA0](&v73);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v39 = v64;
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v36 = v68;
    swift_getAssociatedConformanceWitness();
    unint64_t v37 = v69;
    char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v67 + 8);
    v35(v39, v30);
    if (v40)
    {
      uint64_t v21 = v63;
      goto LABEL_11;
    }
    uint64_t v42 = CoreCoordinator.selection.getter();
    char v64 = v25;
    uint64_t v43 = v42;
    uint64_t AssociatedConformanceWitness = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v48 = v67;
    char v49 = v59;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v59, v69, v30);
    uint64_t v74 = v43;
    uint64_t v75 = v45;
    uint64_t v76 = v47;
    id v60 = v38;
    MEMORY[0x18C113DA0](&v73, v38);
    uint64_t v50 = v62;
    Array._makeMutableAndUnique()();
    uint64_t v51 = v73;
    Swift::Int v52 = v71;
    Array._checkSubscript_mutating(_:)(v71);
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v54 = v51 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v54 = v51;
    }
    (*(void (**)(unint64_t, char *, uint64_t))(v48 + 40))(v54+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v52, v49, v30);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v50, v55, v56, v57);
    uint64_t v74 = AssociatedConformanceWitness;
    uint64_t v75 = v45;
    uint64_t v76 = v47;
    uint64_t v72 = v73;
    specialized Binding.wrappedValue.setter();
    swift_bridgeObjectRelease();
    uint64_t v36 = v68;
    unint64_t v37 = v69;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v41 = v70;
    uint64_t v21 = v63;
LABEL_10:
    CoreCoordinator.didSelectRow(_:inComponent:)(v41, v71);
    goto LABEL_11;
  }
  uint64_t v74 = v27;
  uint64_t v75 = v28;
  uint64_t v76 = v29;
  uint64_t v30 = v65;
  type metadata accessor for Array();
  uint64_t v31 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](&v73, v31);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v32 = v64;
  Array.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v33 = v68;
  uint64_t v34 = Collection.offset(of:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v67 + 8);
  v35(v32, v30);
  uint64_t v36 = v33;
  if (v34 != v70)
  {
    objc_msgSend(v60, sel_selectRow_inComponent_animated_, v34, v71, 0);
    uint64_t v41 = v34;
    unint64_t v37 = v69;
    goto LABEL_10;
  }
  unint64_t v37 = v69;
LABEL_11:
  v35(v37, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v21, v36);
}

void @objc CoreCoordinator.pickerView(_:didSelectRow:inComponent:)(void *a1, uint64_t a2, void *a3, uint64_t a4, Swift::Int a5)
{
  id v8 = a3;
  id v9 = a1;
  CoreCoordinator.pickerView(_:didSelectRow:inComponent:)(v8, a4, a5);
}

uint64_t @objc CoreCoordinator.numberOfComponents(in:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  uint64_t v6 = specialized CoreCoordinator.numberOfComponents(in:)((uint64_t)v5);

  return v6;
}

uint64_t @objc CoreCoordinator.pickerView(_:numberOfRowsInComponent:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = specialized CoreCoordinator.pickerView(_:numberOfRowsInComponent:)(a4);

  return v8;
}

double @objc CoreCoordinator.pickerView(_:rowHeightForComponent:)()
{
  return 30.0;
}

uint64_t closure #1 in CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)@<X0>(uint64_t a1@<X8>)
{
  v12[1] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v12 - v7;
  id v9 = *(void (**)(void))(AssociatedConformanceWitness + 48);
  swift_checkMetadataState();
  v9();
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v5);
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return ((uint64_t (*)(char *, uint64_t))v10)(v8, AssociatedTypeWitness);
}

void *@objc CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(void *a1, uint64_t a2, void *a3, uint64_t a4, char *a5, void *a6)
{
  id v10 = a3;
  id v11 = a6;
  id v12 = a1;
  uint64_t v13 = specialized CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(a4, a5, a6);

  return v13;
}

void @objc CoreCoordinator.init()()
{
}

uint64_t CoreCoordinator.__ivar_destroyer()
{
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x50) - 8) + 8))(&v0[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x60)]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

id CoreCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CoreCoordinator.__ivar_destroyer(char *a1)
{
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x60)]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CoreCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t RootCellView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v20[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v20 - v14;
  (*(void (**)(char *, unsigned char *, uint64_t, double))(v5 + 16))(v7, &v2[*(int *)(a1 + 36)], v4, v13);
  if (*v2 == 1) {
    static Color.tertiary.getter();
  }
  else {
    static Color.primary.getter();
  }
  uint64_t v16 = *(void *)(a1 + 24);
  View.foregroundColor(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v17 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?);
  v20[2] = v16;
  v20[3] = v17;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v8);
}

id specialized CoreCoordinator.init(dataSource:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v10 = *MEMORY[0x1E4FBC8C8] & *(void *)v4;
  uint64_t v11 = *(void *)(v10 + 0x70);
  *(void *)&v4[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v10 + 80) - 8) + 16))(&v4[*(void *)((*v9 & *(void *)v4) + 0x60)], a1, *(void *)(v10 + 80));
  uint64_t v12 = &v4[*(void *)((*v9 & *(void *)v4) + 0x68)];
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  *((void *)v12 + 2) = a4;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CoreCoordinator();
  return objc_msgSendSuper2(&v14, sel_init);
}

id specialized CoreCoordinator.__allocating_init(dataSource:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for CoreCoordinator());
  return specialized CoreCoordinator.init(dataSource:selection:)(a1, a2, a3, a4);
}

id specialized UIKitWheelPicker.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitPickerView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, sel_setDelegate_, v1);
  return v2;
}

uint64_t specialized CoreCoordinator.numberOfComponents(in:)(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v3 = *(void *)(v2 + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - v5;
  CoreCoordinator.dataSource.getter((uint64_t)&v9 - v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 88) + 32))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t specialized CoreCoordinator.pickerView(_:numberOfRowsInComponent:)(uint64_t a1)
{
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  CoreCoordinator.dataSource.getter((uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, v3, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  return v13;
}

void *specialized CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(uint64_t a1, char *a2, void *a3)
{
  uint64_t v51 = a3;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x58);
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x50);
  swift_getAssociatedTypeWitness();
  uint64_t v58 = v4;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v48 = AssociatedConformanceWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for RootCellView();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (objc_class *)((char *)&v44 - v9);
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v44 = (char *)&v44 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = v13;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v44 - v21;
  uint64_t v23 = swift_checkMetadataState();
  uint64_t v57 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v44 - v24;
  CoreCoordinator.dataSource.getter((uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v58 + 40))(v55, v6);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v6);
  Collection.index(atOffset:)();
  dispatch thunk of Collection.indices.getter();
  uint64_t v26 = v52;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  char v27 = Sequence<>.contains(_:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v26);
  if (v27)
  {
    uint64_t v28 = v54;
    uint64_t v55 = v25;
    uint64_t v56 = v16;
    uint64_t v29 = v18;
    uint64_t v30 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v31 = v44;
    uint64_t v32 = v45;
    uint64_t v33 = v46;
    (*(void (**)(char *))(v45 + 16))(v44);
    v30(v59, 0);
    char v34 = (*(uint64_t (**)(uint64_t))(v48 + 56))(v33);
    uint64_t v35 = v47;
    *(unsigned char *)uint64_t v47 = v34 & 1;
    uint64_t v36 = v50;
    closure #1 in CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)((uint64_t)v35 + *(int *)(v50 + 36));
    unint64_t v37 = v51;
    uint64_t v38 = v32;
    uint64_t v39 = v31;
    if (v51
      && (swift_getWitnessTable(), type metadata accessor for _UIHostingView(), (uint64_t v40 = swift_dynamicCastClass()) != 0))
    {
      uint64_t v41 = (void *)v40;
      id v42 = v37;
      specialized _UIHostingView.rootView.setter((uint64_t)v35);
    }
    else
    {
      swift_getWitnessTable();
      type metadata accessor for _UIHostingView();
      uint64_t v41 = specialized _UIHostingView.__allocating_init(rootView:)(v35);
    }
    (*(void (**)(objc_class *, uint64_t))(v49 + 8))(v35, v36);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v56);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v23);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v33);
  }
  else
  {
    uint64_t v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v23);
  }
  return v41;
}

void specialized CoreCoordinator.init()()
{
}

uint64_t type metadata accessor for RootCellView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for RootCellView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RootCellView(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for RootCellView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18786FAE0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for WheelPicker_Phone()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in RootCellView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in WheelPicker_Phone<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UIKitWheelPicker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18786FBE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18786FC20()
{
  return EnvironmentValues.font.setter();
}

uint64_t type metadata completion function for WheelPickerRow()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WheelPickerRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = v11 + ((v6 + v9) & ~v9) + 1;
  uint64_t v13 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    *(unsigned char *)((((unint64_t)v4 + v10) & v17) + v11) = *(unsigned char *)(v18 + v11);
  }
  return v4;
}

uint64_t initializeWithTake for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 32) + v12) = *(unsigned char *)(*(void *)(v9 + 32) + v13);
  return a1;
}

uint64_t assignWithTake for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 24) + v12) = *(unsigned char *)(*(void *)(v9 + 24) + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelPickerRow(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_26;
  }
  uint64_t v14 = v10 + (v12 & ~v9) + 1;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_9;
  }
  unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    int v16 = *(_DWORD *)((char *)a1 + v14);
    if (v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v17 <= 0xFF)
    {
      if (v17 < 2) {
        goto LABEL_26;
      }
LABEL_9:
      int v16 = *((unsigned __int8 *)a1 + v14);
      if (!*((unsigned char *)a1 + v14)) {
        goto LABEL_26;
      }
LABEL_16:
      int v18 = (v16 - 1) << v15;
      if (v14 > 3) {
        int v18 = 0;
      }
      if (v10 + (v12 & ~v9) == -1)
      {
        int v20 = 0;
      }
      else
      {
        if (v14 <= 3) {
          int v19 = v10 + (v12 & ~v9) + 1;
        }
        else {
          int v19 = 4;
        }
        switch(v19)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v20 | v18) + 1;
    }
    int v16 = *(unsigned __int16 *)((char *)a1 + v14);
    if (*(unsigned __int16 *)((char *)a1 + v14)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v6 == v11) {
    return (*(uint64_t (**)(void))(v5 + 48))();
  }
  unint64_t v22 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v22);
  }
  unsigned int v23 = *(unsigned __int8 *)(v22 + v10);
  if (v23 < 2) {
    return 0;
  }
  return ((v23 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for WheelPickerRow(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = v11 + (v13 & ~v10) + 1;
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v11 + (v13 & ~v10) != -1)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x18787052CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v12)
        {
          unint64_t v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
          if (v9 == v12)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else
          {
            *(unsigned char *)(v23 + v11) = a2 + 1;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for WheelPickerRow()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for WheelPicker_Phone()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WheelPicker_Phone(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
    v10[2] = v11[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for WheelPicker_Phone(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_retain();
  swift_release();
  v7[1] = v8[1];
  swift_retain();
  swift_release();
  v7[2] = v8[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  swift_release();
  v7[2] = v8[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelPicker_Phone(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187870AECLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for WheelPicker_Phone(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187870CE4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unsigned int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            v18[1] = 0;
            _OWORD v18[2] = 0;
            *unsigned int v18 = a2 ^ 0x80000000;
          }
          else
          {
            v18[1] = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_187870D0C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187870E0C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187870EC4()
{
  return 16;
}

__n128 sub_187870ED0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:)()
{
  return swift_getAtKeyPath();
}

uint64_t partial apply for implicit closure #3 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo16UIOpenURLContextCG_10Foundation3URLVs5NeverOTg50245_s7SwiftUI16AppSceneDelegateC04makeD10HostWindow33_4475FD12FD59DEBA453321BD91F6EA04LL011restorationD6ItemID0O4Data17connectionOptions11urlContexts4role06windowD08delegateSo8UIWindowCAA0dQ0OSg_SDys11AnyHashableVypGSo017UISceneConnectionT0CShySo16dE131CGzSo18UISceneSessionRoleaSo0zD0CAA013UIHostingViewE0_ptF10Foundation3URLVAXcfu8_33_7b38412a791237ac1c9a4b50e4b05c7bAXA5_Tf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v7 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v41 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v6)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v10 = 1;
    }
    else
    {
      uint64_t result = specialized _NativeSet.startIndex.getter(a1);
      unsigned __int8 v10 = v11 & 1;
    }
    uint64_t v38 = result;
    uint64_t v39 = v9;
    unsigned __int8 v40 = v10;
    if (v7 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v12 = a1;
      }
      uint64_t v35 = v12;
      uint64_t v36 = v3 + 32;
      uint64_t v33 = v5;
      uint64_t v34 = v3;
      unint64_t v32 = a1 & 0xC000000000000001;
      do
      {
        while (1)
        {
          specialized Set.subscript.getter(v38, v39, v40, a1);
          uint64_t v25 = v24;
          id v26 = objc_msgSend(v24, sel_URL);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = v41;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
            uint64_t v27 = v41;
          }
          unint64_t v29 = *(void *)(v27 + 16);
          unint64_t v28 = *(void *)(v27 + 24);
          if (v29 >= v28 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
            uint64_t v27 = v41;
          }
          *(void *)(v27 + 16) = v29 + 1;
          uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(v27+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v29, v5, v2);
          uint64_t v41 = v27;
          if (v6) {
            break;
          }
          uint64_t v13 = v38;
          uint64_t v14 = v39;
          char v15 = v40;
          uint64_t v16 = specialized _NativeSet.index(after:)(v38, v39, v40, a1);
          uint64_t v17 = v2;
          uint64_t v19 = v18;
          uint64_t v20 = a1;
          char v22 = v21;
          outlined consume of Set<UIOpenURLContext>.Index._Variant(v13, v14, v15);
          uint64_t v38 = v16;
          uint64_t v39 = v19;
          uint64_t v2 = v17;
          uint64_t v3 = v34;
          unsigned __int8 v23 = v22 & 1;
          a1 = v20;
          unint64_t v6 = v32;
          unsigned int v5 = v33;
          unsigned __int8 v40 = v23;
          if (!--v7) {
            goto LABEL_22;
          }
        }
        if ((v40 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        type metadata accessor for Set<UIOpenURLContext>.Index();
        uint64_t v30 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v30(v37, 0);
        --v7;
      }
      while (v7);
LABEL_22:
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v38, v39, v40);
      return v41;
    }
  }
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIScene and conformance NSObject, &lazy cache variable for type metadata for UIScene);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v17 = v20;
    uint64_t v3 = v21;
    uint64_t v2 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  int64_t v8 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_39;
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v18;
    swift_unknownObjectRelease();
    uint64_t v11 = v2;
    uint64_t v9 = v4;
    if (!v18) {
      goto LABEL_39;
    }
LABEL_33:
    if (objc_msgSend(v12, sel_delegate))
    {
      type metadata accessor for AppSceneDelegate();
      uint64_t v16 = swift_dynamicCastClass();

      if (v16)
      {
        MEMORY[0x18C115B40]();
        if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
    }
    uint64_t v2 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v2 << 6);
    uint64_t v11 = v2;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
  int64_t v13 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v13 >= v8) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    uint64_t v11 = v2 + 1;
    if (!v14)
    {
      uint64_t v11 = v2 + 2;
      if (v2 + 2 >= v8) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v2 + 3;
        if (v2 + 3 >= v8) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v2 + 4;
          if (v2 + 4 >= v8) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v2 + 5;
            if (v2 + 5 >= v8) {
              goto LABEL_39;
            }
            unint64_t v14 = *(void *)(v17 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v2 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_39:
              outlined consume of Set<UIPress>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t AppDelegate.buildMenu(with:)(void *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x18C113CA0]();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuSystem);
  id v4 = objc_msgSend(a1, sel_system);
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_mainSystem);
  char v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) == 0 || !static AppGraph.shared) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(static AppGraph.shared + 232) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v8 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController;
  unint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController);
  if (v10)
  {
    uint64_t v11 = *(char **)(v2 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController);
  }
  else
  {
    id v12 = objc_allocWithZone((Class)type metadata accessor for UIKitMainMenuController());
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v11 = (char *)UIKitMainMenuController.init(commandsList:)(v13);
    if (!static AppGraph.shared)
    {
      id v29 = 0;
      goto LABEL_10;
    }
  }
  id v14 = v10;
  swift_retain();
  GraphHost.environment.getter();
  EnvironmentValues.configureForRoot()();
  *(_OWORD *)&v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_environment] = v30;
  swift_release();
  swift_release();
  id v15 = objc_msgSend(v5, sel_mainSystem);
  objc_msgSend(v15, sel_setNeedsRebuild);

  uint64_t Value = AGGraphGetValue();
  uint64_t v17 = *(void *)Value;
  char v18 = *(unsigned char *)(Value + 8);
  int v19 = *(_DWORD *)(Value + 12);
  swift_retain();
  swift_release();
  uint64_t v20 = &v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_focusedValues];
  *(void *)uint64_t v20 = v17;
  v20[8] = v18;
  *((_DWORD *)v20 + 3) = v19;
  swift_release();
LABEL_10:
  uint64_t v21 = *(void *)&v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList];
  *(void *)&v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList] = v8;
  uint64_t v22 = swift_bridgeObjectRetain();
  char v23 = specialized static CommandsList.== infix(_:_:)(v22, v21);
  swift_bridgeObjectRelease();
  if (v23)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    id v24 = objc_msgSend(v5, sel_mainSystem);
    objc_msgSend(v24, sel_setNeedsRebuild);
    swift_bridgeObjectRelease();
  }
  UIKitMainMenuController.buildMenu(with:)(a1);
  uint64_t v25 = *(void **)(v2 + v9);
  *(void *)(v2 + v9) = v11;
  id v26 = v11;

  if (*(void *)(v2 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate))
  {
    self;
    uint64_t v27 = (void *)swift_dynamicCastObjCClass();
    if (v27) {
      swift_unknownObjectRetain();
    }
    objc_msgSend(v27, sel_buildMenuWithBuilder_, a1);
  }
LABEL_18:

  return static Update.end()();
}

Swift::Void __swiftcall AppDelegate.validate(_:)(UICommand *a1)
{
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController];
  if (v3)
  {
    objc_msgSend(v3, sel_validateCommand_, a1);
  }
  else
  {
    v5.receiver = v1;
    v5.super_class = (Class)swift_getObjectType();
    [(UICommand *)&v5 validateCommand:a1];
  }
  if (*(void *)&v1[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate])
  {
    self;
    id v4 = (void *)swift_dynamicCastObjCClass();
    if (v4) {
      swift_unknownObjectRetain();
    }
    objc_msgSend(v4, sel_validateCommand_, a1);
  }
}

id AppDelegate.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  id v6 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController];
  if (v6)
  {
    id v7 = v6;
    char v8 = UIKitMainMenuController.canPerformAction(_:withSender:)(a1, a2);

    return (id)(v8 & 1);
  }
  else
  {
    unint64_t v10 = (objc_class *)ObjectType;
    outlined init with copy of RootEnvironmentModifier?(a2, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    uint64_t v11 = v21;
    if (v21)
    {
      id v12 = __swift_project_boxed_opaque_existential_1(v20, v21);
      uint64_t v13 = *(void *)(v11 - 8);
      double v14 = MEMORY[0x1F4188790](v12);
      uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v13 + 16))(v16, v14);
      uint64_t v17 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      uint64_t v17 = 0;
    }
    v19.receiver = v2;
    v19.super_class = v10;
    id v18 = objc_msgSendSuper2(&v19, sel_canPerformAction_withSender_, a1, v17);
    swift_unknownObjectRelease();
    return v18;
  }
}

Swift::Bool __swiftcall AppDelegate.application(_:runTest:options:)(UIApplication *_, Swift::String runTest, Swift::OpaquePointer options)
{
  object = runTest._object;
  uint64_t countAndFlagsBits = runTest._countAndFlagsBits;
  id v7 = [(UIApplication *)_ connectedScenes];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIScene and conformance NSObject, &lazy cache variable for type metadata for UIScene);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v8);
  unint64_t v10 = v9;
  Swift::Bool result = swift_bridgeObjectRelease();
  if (v10 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    Swift::Bool result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
LABEL_3:
      optionsa = options._rawValue;
      unint64_t v13 = 0;
      options._rawuint64_t Value = (void *)(v10 & 0xC000000000000001);
      uint64_t v28 = v12;
      do
      {
        while (2)
        {
          if (options._rawValue)
          {
            double v14 = (objc_class *)MEMORY[0x18C117680](v13, v10);
          }
          else
          {
            if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return result;
            }
            double v14 = (objc_class *)*(id *)(v10 + 32 + 8 * v13);
          }
          Class isa = v14;
          if (__OFADD__(v13++, 1))
          {
            __break(1u);
            goto LABEL_26;
          }
          if (*(void *)((char *)v14 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
          {
            _ss11AnyHashableVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [PPTTestCase.Name], (uint64_t)&type metadata for PPTTestCase.Name, MEMORY[0x1E4FBB320]);
            swift_retain();
            static Update.dispatchImmediately<A>(_:)();
            swift_release();
            uint64_t v17 = v31;
            uint64_t v18 = *(void *)(v31 + 16);
            if (v18) {
              goto LABEL_11;
            }
          }
          else
          {
            uint64_t v17 = MEMORY[0x1E4FBC860];
            uint64_t v18 = *(void *)(MEMORY[0x1E4FBC860] + 16);
            if (v18)
            {
LABEL_11:
              rawuint64_t Value = options._rawValue;
              uint64_t v20 = v3;
              uint64_t v21 = (void *)(v17 + 40);
              do
              {
                BOOL v22 = *(v21 - 1) == countAndFlagsBits && *v21 == (void)object;
                if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v23._uint64_t countAndFlagsBits = countAndFlagsBits;
                  v23._object = object;
                  AppSceneDelegate.runTest(_:options:)(v23, (Swift::OpaquePointer)optionsa);
                  unsigned __int8 v24 = 1;
                  goto LABEL_24;
                }
                v21 += 2;
                --v18;
              }
              while (v18);

              Swift::Bool result = swift_bridgeObjectRelease();
              uint64_t v3 = v20;
              options._rawuint64_t Value = rawValue;
              uint64_t v12 = v28;
              if (v13 != v28) {
                continue;
              }
              goto LABEL_27;
            }
          }
          break;
        }

        Swift::Bool result = swift_bridgeObjectRelease();
      }
      while (v13 != v12);
    }
  }
LABEL_27:
  swift_bridgeObjectRelease();
  if (!*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate)) {
    return 0;
  }
  uint64_t v25 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (!v25) {
    return 0;
  }
  id v26 = v25;
  if ((objc_msgSend(v25, sel_respondsToSelector_, sel_application_runTest_options_) & 1) == 0) {
    return 0;
  }
  swift_unknownObjectRetain_n();
  uint64_t v27 = (void *)MEMORY[0x18C115780](countAndFlagsBits, object);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  unsigned __int8 v24 = objc_msgSend(v26, sel_application_runTest_options_, _, v27, isa);
  swift_unknownObjectRelease_n();

LABEL_24:
  return v24;
}

uint64_t AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for PPTTestHost?(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)aBlock - v12;
  double v14 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate);
  if (!v14) {
    goto LABEL_6;
  }
  if (!objc_msgSend((id)swift_unknownObjectRetain(), sel_respondsToSelector_, sel_application_handleEventsForBackgroundURLSession_completionHandler_))
  {
    swift_unknownObjectRelease();
LABEL_6:
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    type metadata accessor for MainActor();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = static MainActor.shared.getter();
    objc_super v19 = (void *)swift_allocObject();
    uint64_t v20 = MEMORY[0x1E4FBCFD8];
    v19[2] = v18;
    v19[3] = v20;
    v19[4] = a2;
    v19[5] = a3;
    v19[6] = a4;
    v19[7] = a5;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), (uint64_t)v19);
    return swift_release();
  }
  if (objc_msgSend(v14, sel_respondsToSelector_, sel_application_handleEventsForBackgroundURLSession_completionHandler_))
  {
    swift_unknownObjectRetain();
    uint64_t v15 = (void *)MEMORY[0x18C115780](a2, a3);
    aBlock[4] = a4;
    aBlock[5] = a5;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_98;
    uint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    objc_msgSend(v14, sel_application_handleEventsForBackgroundURLSession_completionHandler_, a1, v15, v16);
    _Block_release(v16);

    swift_unknownObjectRelease_n();
    return swift_release();
  }

  return swift_unknownObjectRelease();
}

uint64_t closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v7[6] = type metadata accessor for MainActor();
  v7[7] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[8] = v9;
  v7[9] = v8;
  return MEMORY[0x1F4188298](closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), v9, v8);
}

uint64_t closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  v0[10] = static MainActor.shared.getter();
  uint64_t v3 = swift_task_alloc();
  v0[11] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *id v4 = v0;
  v4[1] = closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return MEMORY[0x1F4187F28]();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return MEMORY[0x1F4188298](closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), v3, v2);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void (**)(uint64_t))(v0 + 32);
  uint64_t v2 = swift_release();
  v1(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  _OWORD v4[2] = a2;
  type metadata accessor for PPTTestHost?(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), v6, v5);
}

uint64_t closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  swift_release();
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v1, 1, 1, v4);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v3;
  v6[5] = v2;
  swift_bridgeObjectRetain();
  _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), (uint64_t)v6);
  id v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FBCFE8];
  outlined destroy of TaskPriority?(v1, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8]);
  v5(v1, 1, 1, v4);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), (uint64_t)v8);
  outlined destroy of TaskPriority?(v1, &lazy cache variable for type metadata for TaskPriority?, v7);
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t v1 = specialized static BackgroundTaskProtocol.currentTasks()();
  v0[5] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  return specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(v5, v3, v4, v1);
}

uint64_t closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), 0, 0);
}

uint64_t closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t v1 = specialized static BackgroundTaskProtocol.currentTasks()();
  v0[5] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  return specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(v5, v3, v4, v3, v4, v1);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RootEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance RootEnvironmentModifier()
{
}

void closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenURLContext();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v36[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PPTTestHost?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v36[-1] - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v36[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v36[-1] - v16;
  uint64_t v18 = a2 + 16;
  if (objc_msgSend(a1, sel__isUniversalLink, v15))
  {
    id v19 = objc_msgSend(a1, sel_webpageURL);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v35 = v4;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v21(v9, v13, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
      {
        v21(v17, v9, v10);
        swift_beginAccess();
        uint64_t v22 = MEMORY[0x18C119DF0](v18);
        if (v22)
        {
          Swift::String v23 = (void *)v22;
          uint64_t v24 = *(void *)(v22 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge);
          swift_retain();

          if (v24)
          {
            (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v17, v10);
            uint64_t v25 = v35;
            *(void *)&v6[*(int *)(v35 + 20)] = 0;
            uint64_t v37 = v25;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
            outlined init with copy of WeakBox<UISceneSession>?((uint64_t)v6, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
            SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v36, v25, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
            swift_release();
            outlined destroy of WeakBox<UISceneSession>?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
          }
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    }
    outlined destroy of TaskPriority?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  }
  swift_beginAccess();
  uint64_t v27 = MEMORY[0x18C119DF0](v18);
  if (v27)
  {
    uint64_t v28 = (void *)v27;
    uint64_t v29 = *(void *)(v27 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge);
    swift_retain();

    if (v29)
    {
      uint64_t v30 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
      uint64_t v37 = v30;
      v36[0] = (uint64_t)a1;
      id v31 = objc_msgSend(a1, sel_activityType);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v36, v30, v32, v34);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      swift_release();
    }
  }
}

void closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenURLContext();
  double v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 16;
  id v9 = objc_msgSend(a1, sel_options, v5);
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x18C119DF0](v8);
  if (v10
    && (uint64_t v11 = (void *)v10,
        uint64_t v12 = *(void *)(v10 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge),
        swift_retain(),
        v11,
        v12))
  {
    id v13 = objc_msgSend(a1, sel_URL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&v7[*(int *)(v4 + 20)] = v9;
    v17[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    outlined init with copy of WeakBox<UISceneSession>?((uint64_t)v7, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
    id v15 = v9;
    SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v17, v4, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

    swift_release();
    outlined destroy of WeakBox<UISceneSession>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
  }
  else
  {
  }
}

Swift::Void __swiftcall AppSceneDelegate.sceneDidDisconnect(_:)(UIScene *a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (!v3) {
    return;
  }
  id v4 = objc_msgSend(v3, sel_rootViewController);
  if (!v4) {
    return;
  }
  double v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  int v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
  if (v6 != 255)
  {
    id v15 = v4;
    Swift::UInt v7 = *v5;
    uint64_t v8 = v5[1];
    outlined copy of SceneID(*v5, v8, v6 & 1);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_retain();
    PlatformSceneCache.removeHost(_:id:)((uint64_t)v15, v7, v8, v6 & 1);
    outlined consume of SceneID?(v7, v8, v6);
    swift_release();
    uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
    if (v9)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 80);
      uint64_t v11 = swift_retain();
      uint64_t v12 = (void *)v10(v11);
      swift_release();
      if (v12)
      {
        id v13 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (v13
          && (uint64_t v14 = v13, (objc_msgSend(v13, sel_respondsToSelector_, sel_sceneDidDisconnect_) & 1) != 0))
        {
          objc_msgSend(v14, sel_sceneDidDisconnect_, a1);
        }
        else
        {
        }
        return;
      }
    }
    id v4 = v15;
  }
}

Swift::Void __swiftcall AppSceneDelegate.scene(_:continue:)(UIScene *_, NSUserActivity a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OpenURLContext();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PPTTestHost?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  id v19 = (char *)&v35 - v18;
  if ([(objc_class *)a2.super.isa _isUniversalLink])
  {
    uint64_t v35 = _;
    id v20 = [(objc_class *)a2.super.isa webpageURL];
    uint64_t v36 = v3;
    if (v20)
    {
      uint64_t v21 = v20;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v22(v11, v15, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        v22(v19, v11, v12);
        if (*(void *)(v36 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
        {
          (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v19, v12);
          *(void *)&v8[*(int *)(v6 + 20)] = 0;
          uint64_t v40 = v6;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
          outlined init with copy of WeakBox<UISceneSession>?((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
          swift_retain();
          SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v39, v6, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
          swift_release();
          outlined destroy of WeakBox<UISceneSession>?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }
    outlined destroy of TaskPriority?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    CGAffineTransform _ = v35;
    uint64_t v3 = v36;
  }
  if (*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
  {
    uint64_t v24 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
    uint64_t v40 = v24;
    v39[0] = (uint64_t)a2.super.isa;
    swift_retain();
    id v25 = [(objc_class *)a2.super.isa activityType];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v39, v24, v26, v28);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    swift_release();
  }
  uint64_t v29 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v29)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 80);
    uint64_t v31 = swift_retain();
    uint64_t v32 = (void *)v30(v31);
    swift_release();
    if (v32)
    {
      uint64_t v38 = &unk_1ED4DD6D0;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        uint64_t v37 = &unk_1ED4DD8F0;
        uint64_t v33 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (v33)
        {
          uint64_t v34 = v33;
          if (objc_msgSend(v33, sel_respondsToSelector_, sel_scene_continueUserActivity_)) {
            objc_msgSend(v34, sel_scene_continueUserActivity_, _, a2.super.isa);
          }
        }
      }
    }
  }
}

void AppSceneDelegate.scene(_:openURLContexts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OpenURLContext();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = a2;
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (!v9) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  id v10 = objc_msgSend(v9, sel_rootViewController);
  if (!v10)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v32 = a2;
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  uint64_t v11 = v10;
  type metadata accessor for DocumentBrowserViewController();
  uint64_t v12 = swift_dynamicCastClass();
  if (!v12)
  {
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }
  uint64_t v13 = v12;
  id v14 = v11;
  id v15 = specialized Sequence.first(where:)(a2, v13);

  if (v15)
  {
    uint64_t v16 = (void *)specialized Set._Variant.remove(_:)(v15);
  }
  else
  {
  }
LABEL_9:
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = (void *)specialized Collection.first.getter(v17);
  swift_bridgeObjectRelease();
  if (v18)
  {
    id v19 = objc_msgSend(v18, sel_options);
    if (*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
    {
      swift_retain();
      id v20 = objc_msgSend(v18, sel_URL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&v8[*(int *)(v6 + 20)] = v19;
      v31[3] = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
      outlined init with copy of WeakBox<UISceneSession>?((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
      id v22 = v19;
      SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v31, v6, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);

      swift_release();
      outlined destroy of WeakBox<UISceneSession>?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
    }
    else
    {
    }
  }
  uint64_t v23 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v23)
  {
    uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)v23 + 80);
    uint64_t v25 = swift_retain();
    uint64_t v26 = (void *)v24(v25);
    swift_release();
    if (v26)
    {
      v31[4] = (uint64_t)&unk_1ED4DD6D0;
      uint64_t v27 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v27)
      {
        uint64_t v28 = v27;
        if (objc_msgSend(v27, sel_respondsToSelector_, sel_scene_openURLContexts_))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
          lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v28, sel_scene_openURLContexts_, a1, isa);
          swift_bridgeObjectRelease();

          return;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AppSceneDelegate.sceneWillResignActive(_:)(UIScene *a1)
{
}

Swift::Void __swiftcall AppSceneDelegate.sceneDidEnterBackground(_:)(UIScene *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase) = 0;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_rootViewController);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      int v8 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
      if (v8 == 255)
      {
      }
      else
      {
        Swift::UInt v9 = *v7;
        uint64_t v10 = v7[1];
        outlined copy of SceneID(*v7, v10, v8 & 1);
        AppSceneDelegate.scenesDidChange(phaseChanged:)(1);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        char v17 = *(unsigned char *)(v1 + v3);
        swift_retain();
        PlatformSceneCache.setPhase(_:id:host:)(&v17, v9, v10, v8 & 1);
        swift_release();

        outlined consume of SceneID?(v9, v10, v8);
      }
    }
  }
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v11)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 80);
    uint64_t v13 = swift_retain();
    id v14 = (void *)v12(v13);
    swift_release();
    if (v14)
    {
      uint64_t v18 = &unk_1ED4DD6D0;
      id v15 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v15)
      {
        uint64_t v16 = v15;
        if (objc_msgSend(v15, sel_respondsToSelector_, sel_sceneDidEnterBackground_)) {
          objc_msgSend(v16, sel_sceneDidEnterBackground_, a1);
        }
      }
    }
  }
}

uint64_t AppSceneDelegate.isDocumentViewControllerRootEnabled.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___isDocumentViewControllerRootEnabled;
  int v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___isDocumentViewControllerRootEnabled);
  if (v2 == 2)
  {
    char v3 = static SemanticFeature.isEnabled.getter();
    *(unsigned char *)(v0 + v1) = v3 & 1;
  }
  else
  {
    char v3 = v2 & 1;
  }
  return v3 & 1;
}

Swift::Void __swiftcall AppSceneDelegate.runTest(_:options:)(Swift::String _, Swift::OpaquePointer options)
{
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  _._uint64_t countAndFlagsBits = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (_._countAndFlagsBits
    && (object = _._object,
        (id v6 = objc_msgSend((id)_._countAndFlagsBits, sel_rootViewController)) != 0)
    && (v12[0] = v6,
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController), type metadata accessor for PPTTestHost(), (swift_dynamicCast() & 1) != 0))
  {
    if (*((void *)&v10 + 1))
    {
      outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)v12);
      uint64_t v7 = v13;
      uint64_t v8 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t, void *, void *, uint64_t, uint64_t))(v8 + 8))(countAndFlagsBits, object, options._rawValue, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      return;
    }
  }
  else
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  outlined destroy of TaskPriority?((uint64_t)&v9, &lazy cache variable for type metadata for PPTTestHost?, (uint64_t (*)(uint64_t))type metadata accessor for PPTTestHost);
}

double AppSceneDelegate.forwardingTarget(for:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v3)
  {
    id v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 80);
    uint64_t v5 = swift_retain();
    id v6 = (void *)v4(v5);
    swift_release();
    if (v6)
    {
      uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
      if (v7)
      {
        uint64_t v8 = v7;
        *(void *)(a1 + 24) = swift_getObjectType();
        *(void *)a1 = v8;
        return result;
      }
    }
  }
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AppSceneDelegate.connectionOptionDefinitionTarget.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 80);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  if (!v4) {
    return 0;
  }
  return v4;
}

id AppSceneDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppSceneDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for _UISceneConnectionOptionDefinitionCustomHandling.connectionOptionDefinitionTarget.getter in conformance AppSceneDelegate()
{
  return AppSceneDelegate.connectionOptionDefinitionTarget.getter();
}

uint64_t protocol witness for _UISceneConnectionOptionDefinitionCustomHandling.handleConnectionOptionDefinition<A>(payload:definition:scene:) in conformance AppSceneDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)
                                                                   + async function pointer to specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:));
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *long long v10 = v5;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return v12(a1, a2, a4, a5);
}

uint64_t key path getter for EnvironmentValues.sceneSession : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneSession.getter();
  *a1 = result;
  return result;
}

void key path setter for EnvironmentValues.sceneSession : EnvironmentValues(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized EnvironmentValues.sceneSession.setter((uint64_t)v1);
}

void EnvironmentValues.sceneSession.setter(void *a1)
{
  specialized EnvironmentValues.sceneSession.setter((uint64_t)a1);
}

void (*EnvironmentValues.sceneSession.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = EnvironmentValues.sceneSession.getter();
  return EnvironmentValues.sceneSession.modify;
}

void EnvironmentValues.sceneSession.modify(uint64_t *a1, char a2)
{
  id v4 = (id)*a1;
  if (a2)
  {
    id v2 = v4;
    specialized EnvironmentValues.sceneSession.setter((uint64_t)v4);

    uint64_t v3 = v2;
  }
  else
  {
    specialized EnvironmentValues.sceneSession.setter(*a1);
    uint64_t v3 = v4;
  }
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance SceneSessionKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return outlined init with copy of WeakBox<UISceneSession>?((uint64_t)&static SceneSessionKey.defaultValue, a1, (uint64_t (*)(void))type metadata accessor for WeakBox<UISceneSession>?);
}

uint64_t specialized static RootEnvironmentModifier._makeInputs(modifier:inputs:)()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  _ss11AnyHashableVSgMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<RootEnvironmentModifier>, (uint64_t)&type metadata for RootEnvironmentModifier, MEMORY[0x1E4F3F590]);
  int v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  int v1 = _GraphValue.value.getter();
  uint64_t v2 = _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of RootEnvironmentModifier.Child((uint64_t)&v1);
  return _GraphInputs.environment.setter();
}

id specialized Sequence.first(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v31 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    Set.Iterator.init(_cocoa:)();
    a1 = v34;
    uint64_t v30 = v35;
    uint64_t v7 = v36;
    uint64_t v8 = v37;
    unint64_t v9 = v38;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v30 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & v11;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  uint64_t v25 = v7;
  uint64_t v28 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v29 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v14 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v27 = MEMORY[0x1E4FBC838] + 8;
  if (a1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v9)
  {
    uint64_t v15 = (v9 - 1) & v9;
    unint64_t v16 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v17 = v8;
    goto LABEL_29;
  }
  int64_t v20 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    JUMPOUT(0x18787519CLL);
  }
  if (v20 >= v29) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v30 + 8 * v20);
  uint64_t v17 = v8 + 1;
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v17 = v8 + 2;
  if (v8 + 2 >= v29) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v30 + 8 * v17);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v17 = v8 + 3;
  if (v8 + 3 >= v29) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v30 + 8 * v17);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v17 = v8 + 4;
  if (v8 + 4 >= v29) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v30 + 8 * v17);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v17 = v8 + 5;
  if (v8 + 5 >= v29)
  {
LABEL_33:
    id i = 0;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v30 + 8 * v17);
  if (!v21)
  {
    uint64_t v22 = v8 + 6;
    while (v29 != v22)
    {
      unint64_t v21 = *(void *)(v30 + 8 * v22++);
      if (v21)
      {
        uint64_t v17 = v22 - 1;
        goto LABEL_28;
      }
    }
    goto LABEL_33;
  }
LABEL_28:
  uint64_t v15 = (v21 - 1) & v21;
  unint64_t v16 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_29:
  for (i = *(id *)(*(void *)(a1 + 48) + 8 * v16); i; uint64_t v15 = v9)
  {
    id v23 = objc_msgSend(i, sel_URL, v25);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v23) = DocumentBrowserViewController.presentDocument(at:animated:)((uint64_t)v6, 0);
    (*v14)(v6, v31);
    if (v23) {
      break;
    }

    uint64_t v8 = v17;
    unint64_t v9 = v15;
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v18 = __CocoaSet.Iterator.next()();
    if (!v18) {
      goto LABEL_33;
    }
    uint64_t v33 = v18;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id i = v39;
    swift_unknownObjectRelease();
    uint64_t v17 = v8;
  }
LABEL_34:
  outlined consume of Set<UIPress>.Iterator._Variant();
  return i;
}

uint64_t specialized _do #1 <A>(_:) in handleConnectionOptionsCallbacks #1 (_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v25 - v13;
  UISceneConnectionOptions.subscript.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, AssociatedTypeWitness);
  if (!*(void *)(a3 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v17 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  }
  unint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * v16);
  uint64_t v25 = v11;
  uint64_t v28 = v14;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v19 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v19) {
      goto LABEL_15;
    }
  }
  if (v19 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v20 = 0;
  unint64_t v26 = v18;
  unint64_t v27 = v18 & 0xC000000000000001;
  do
  {
    if (v27)
    {
      uint64_t v21 = MEMORY[0x18C117680](v20, v18);
    }
    else
    {
      uint64_t v21 = *(void *)(v18 + 8 * v20 + 32);
      swift_retain();
    }
    ++v20;
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 80);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v24 = swift_getAssociatedConformanceWitness();
    v22(v28, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
    swift_release();
    unint64_t v18 = v26;
  }
  while (v19 != v20);
LABEL_15:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, AssociatedTypeWitness);
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v56 = type metadata accessor for URL();
  MEMORY[0x1F4188790](v56);
  uint64_t v52 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v44 = a3;
  uint64_t v45 = 0;
  int64_t v11 = 0;
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v13 = a3 + 56;
  uint64_t v12 = v14;
  uint64_t v15 = 1 << *(unsigned char *)(v13 - 24);
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v12;
  uint64_t v41 = v13;
  int64_t v42 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v53 = a4 + 56;
  uint64_t v54 = a4;
  uint64_t v51 = v8 + 16;
  uint64_t v43 = v8;
  uint64_t v55 = (void (**)(char *, uint64_t))(v8 + 8);
  do
  {
LABEL_6:
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v11 << 6);
    }
    else
    {
      int64_t v20 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_33;
      }
      if (v20 >= v42)
      {
LABEL_32:
        uint64_t v38 = v44;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v40, v39, v45, v38);
        return;
      }
      unint64_t v21 = *(void *)(v41 + 8 * v20);
      ++v11;
      if (!v21)
      {
        int64_t v11 = v20 + 1;
        if (v20 + 1 >= v42) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v41 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 2;
          if (v20 + 2 >= v42) {
            goto LABEL_32;
          }
          unint64_t v21 = *(void *)(v41 + 8 * v11);
          if (!v21)
          {
            int64_t v22 = v20 + 3;
            if (v22 >= v42) {
              goto LABEL_32;
            }
            unint64_t v21 = *(void *)(v41 + 8 * v22);
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_34;
                }
                if (v11 >= v42) {
                  goto LABEL_32;
                }
                unint64_t v21 = *(void *)(v41 + 8 * v11);
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v22;
          }
        }
      }
LABEL_21:
      unint64_t v17 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
    }
    id v23 = *(id *)(*(void *)(v44 + 48) + 8 * v19);
    id v24 = objc_msgSend(v23, sel_URL, v39);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = *(void *)(a4 + 16);
    uint64_t v47 = (unint64_t)v55 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v25
      && (lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]), uint64_t v26 = dispatch thunk of Hashable._rawHashValue(seed:)(), v27 = -1 << *(unsigned char *)(a4 + 32), v28 = v26 & ~v27, ((*(void *)(v53 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) != 0))
    {
      id v48 = v23;
      unint64_t v49 = v17;
      unint64_t v46 = v19;
      int64_t v50 = v11;
      int64_t v29 = v10;
      uint64_t v30 = ~v27;
      uint64_t v31 = *(void *)(v43 + 72);
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
      do
      {
        uint64_t v33 = v52;
        uint64_t v34 = v56;
        v32(v52, *(void *)(v54 + 48) + v31 * v28, v56);
        lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
        char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *v55;
        (*v55)(v33, v34);
        if (v35)
        {
          uint64_t v10 = v29;
          v36(v29, v56);

          a4 = v54;
          unint64_t v17 = v49;
          int64_t v11 = v50;
          goto LABEL_6;
        }
        unint64_t v28 = (v28 + 1) & v30;
      }
      while (((*(void *)(v53 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) != 0);
      a4 = v54;
      uint64_t v10 = v29;
      unint64_t v17 = v49;
      int64_t v11 = v50;
      unint64_t v19 = v46;
      id v23 = v48;
      v36(v10, v56);
    }
    else
    {
      (*v55)(v10, v56);
    }

    *(unint64_t *)((char *)v40 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
  }
  while (!__OFADD__(v45++, 1));
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((void *)((char *)v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v11 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x18C119C60](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

uint64_t specialized Set._Variant.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  size_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v46 = (char *)v38 - v10;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x1E4FBC870];
    uint64_t v49 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    uint64_t v42 = __CocoaSet.makeIterator()();
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (v11)
    {
      uint64_t v12 = v11;
      v38[1] = v3;
      uint64_t v41 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
      uint64_t v43 = v39 + 16;
      uint64_t v44 = a2 + 56;
      uint64_t v45 = (void (**)(char *, uint64_t))(v39 + 8);
      uint64_t v40 = MEMORY[0x1E4FBC838] + 8;
      do
      {
        uint64_t v47 = v12;
        swift_dynamicCast();
        id v19 = objc_msgSend(v48, sel_URL);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(a2 + 16)
          && (lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]), uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(), v21 = -1 << *(unsigned char *)(a2 + 32), v22 = v20 & ~v21, ((*(void *)(v44 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) != 0))
        {
          uint64_t v23 = ~v21;
          uint64_t v24 = *(void *)(v39 + 72);
          uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
          while (1)
          {
            uint64_t v26 = a2;
            v25(v8, *(void *)(a2 + 48) + v24 * v22, v6);
            lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
            char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v28 = *v45;
            (*v45)(v8, v6);
            if (v27) {
              break;
            }
            unint64_t v22 = (v22 + 1) & v23;
            a2 = v26;
            if (((*(void *)(v44 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
              goto LABEL_13;
            }
          }
          v28(v46, v6);

          a2 = v26;
        }
        else
        {
LABEL_13:
          (*v45)(v46, v6);
          id v29 = v48;
          uint64_t v30 = v49;
          unint64_t v31 = *(void *)(v49 + 16);
          if (*(void *)(v49 + 24) <= v31)
          {
            specialized _NativeSet.resize(capacity:)(v31 + 1);
            uint64_t v30 = v49;
          }
          Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(v30 + 40));
          uint64_t v14 = v30 + 56;
          uint64_t v15 = -1 << *(unsigned char *)(v30 + 32);
          unint64_t v16 = v13 & ~v15;
          unint64_t v17 = v16 >> 6;
          if (((-1 << v16) & ~*(void *)(v30 + 56 + 8 * (v16 >> 6))) != 0)
          {
            unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v30 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v32 = 0;
            unint64_t v33 = (unint64_t)(63 - v15) >> 6;
            do
            {
              if (++v17 == v33 && (v32 & 1) != 0)
              {
                __break(1u);
                JUMPOUT(0x187876024);
              }
              BOOL v34 = v17 == v33;
              if (v17 == v33) {
                unint64_t v17 = 0;
              }
              v32 |= v34;
              uint64_t v35 = *(void *)(v14 + 8 * v17);
            }
            while (v35 == -1);
            unint64_t v18 = __clz(__rbit64(~v35)) + (v17 << 6);
          }
          *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(void *)(*(void *)(v30 + 48) + 8 * v18) = v29;
          ++*(void *)(v30 + 16);
        }
        uint64_t v12 = __CocoaSet.Iterator.next()();
      }
      while (v12);
      uint64_t v2 = v49;
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v36 = specialized _NativeSet.filter(_:)(a1, a2);
    if (!v3) {
      return v36;
    }
  }
  return v2;
}

unint64_t specialized handleConnectionOptionsCallbacks #1 <A>(_:) in AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(result + 16))
  {
    unint64_t v5 = result;
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v6)
    {
      uint64_t v7 = (unsigned char *)(a3 + 16);
      uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * result);
      swift_beginAccess();
      unint64_t v9 = (unint64_t)v8 >> 62;
      if (*v7 != 1)
      {
        if (v9) {
          goto LABEL_23;
        }
        uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        goto LABEL_7;
      }
      swift_bridgeObjectRetain();
      for (BOOL i = 1; ; BOOL i = v11 != 0)
      {
        swift_beginAccess();
        *uint64_t v7 = i;
        if (v9)
        {
          if (v8 < 0) {
            uint64_t v7 = (unsigned char *)v8;
          }
          else {
            uint64_t v7 = (unsigned char *)(v8 & 0xFFFFFFFFFFFFFF8);
          }
          swift_bridgeObjectRetain();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v12) {
            return swift_bridgeObjectRelease();
          }
        }
        else
        {
          uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v12) {
            return swift_bridgeObjectRelease();
          }
        }
        if (v12 >= 1) {
          break;
        }
        __break(1u);
LABEL_23:
        swift_bridgeObjectRetain_n();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_7:
        ;
      }
      uint64_t v13 = 0;
      unint64_t v19 = v8 & 0xC000000000000001;
      uint64_t v20 = v8;
      do
      {
        if (v19)
        {
          uint64_t v14 = MEMORY[0x18C117680](v13, v8);
        }
        else
        {
          uint64_t v14 = *(void *)(v8 + 8 * v13 + 32);
          swift_retain();
        }
        ++v13;
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 80);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v18 = swift_getAssociatedConformanceWitness();
        v15(a4, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
        swift_release();
        uint64_t v8 = v20;
      }
      while (v12 != v13);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[40] = a4;
  v5[41] = v4;
  v5[38] = a2;
  v5[39] = a3;
  v5[37] = a1;
  type metadata accessor for MainActor();
  v5[42] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:), v7, v6);
}

uint64_t specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)()
{
  uint64_t v1 = v0[41];
  uint64_t v3 = v0[37];
  uint64_t v2 = v0[38];
  swift_release();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 0;
  AppSceneDelegate.sceneItem()(v0 + 2);
  unint64_t v5 = v0[36];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of SceneList.Item((uint64_t)(v0 + 2));
  specialized handleConnectionOptionsCallbacks #1 <A>(_:) in AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(v5, v2, v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
  {
    uint64_t v7 = v0[37];
    uint64_t v6 = v0[38];
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v8 = swift_bridgeObjectRetain();
    specialized handleConnectionOptionsCallbacks #1 <A>(_:) in AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(v8, v6, v4, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v4 + 16) & 1) == 0)
  {
    uint64_t v10 = type metadata accessor for UISceneConnectionOptionDefinitionError();
    lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type UISceneConnectionOptionDefinitionError and conformance UISceneConnectionOptionDefinitionError, MEMORY[0x1E4FB1150]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, *MEMORY[0x1E4FB1148], v10);
    swift_willThrow();
  }
  swift_release();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_187876604@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneSession.getter();
  *a1 = result;
  return result;
}

void sub_187876640(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized EnvironmentValues.sceneSession.setter((uint64_t)v1);
}

uint64_t getEnumTagSinglePayload for RootModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RootModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

void *type metadata accessor for SceneSessionKey()
{
  return &unk_1ED41B530;
}

void type metadata accessor for _ViewModifier_Content<RootModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<RootModifier>)
  {
    lazy protocol witness table accessor for type RootModifier and conformance RootModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<RootModifier>);
    }
  }
}

uint64_t sub_1878767C4()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for PPTTestHost()
{
  unint64_t result = lazy cache variable for type metadata for PPTTestHost;
  if (!lazy cache variable for type metadata for PPTTestHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PPTTestHost);
  }
  return result;
}

uint64_t outlined consume of UISceneAdaptorConfiguration.Kind(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined assign with copy of RootModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *outlined release of DocumentIntroductionConfiguration(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[10];
  uint64_t v9 = a1[12];
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  outlined consume of Text?(v3, v4, v5, v6);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with take of RootModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187876978()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1878769B8()
{
  return swift_deallocObject();
}

uint64_t sub_1878769F0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_72Tm()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined destroy of MakeObservableObjectDelegateBox(uint64_t a1)
{
  return a1;
}

uint64_t sub_187876AD4()
{
  switch(*(unsigned char *)(v0 + 144))
  {
    case 0:
    case 1:
      swift_release();
      if (*(void *)(v0 + 48))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v0 + 64)) {
        goto LABEL_25;
      }
      break;
    case 2:
      if (*(void *)(v0 + 64)) {
        __swift_destroy_boxed_opaque_existential_1(v0 + 40);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID(*(void *)(v0 + 120), *(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
      break;
    case 3:
      goto LABEL_25;
    case 4:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      break;
    case 5:
      outlined consume of SceneID(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
      if (*(void *)(v0 + 48) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_25;
    case 6:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(void *)(v0 + 64))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
        swift_bridgeObjectRelease();
      }
      break;
    case 7:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(void *)(v0 + 40)) {
        swift_release();
      }
      if (*(void *)(v0 + 80))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
        swift_bridgeObjectRelease();
      }
      swift_release();
      if (*(void *)(v0 + 96)) {
        swift_release();
      }
      if (*(void *)(v0 + 112)) {
        swift_release();
      }
      swift_bridgeObjectRelease();
      break;
    case 8:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
      swift_bridgeObjectRelease();
LABEL_25:
      swift_release();
      break;
    default:
      break;
  }
  outlined consume of SceneID(*(void *)(v0 + 152), *(void *)(v0 + 160), *(unsigned char *)(v0 + 168));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *outlined retain of DocumentIntroductionConfiguration(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[10];
  uint64_t v9 = a1[12];
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of Text?(v3, v4, v5, v6);
  swift_retain();
  outlined copy of AppIntentExecutor?(v7);
  outlined copy of AppIntentExecutor?(v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of DocumentGroupsIntroRootView(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of AnyHashable?(uint64_t a1, uint64_t a2)
{
  _ss11AnyHashableVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SceneList.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for Set<UIOpenURLContext>.Index()
{
  if (!lazy cache variable for type metadata for Set<UIOpenURLContext>.Index)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    unint64_t v0 = type metadata accessor for Set.Index();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<UIOpenURLContext>.Index);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ValidTestCasesFeature and conformance ValidTestCasesFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type ValidTestCasesFeature and conformance ValidTestCasesFeature;
  if (!lazy protocol witness table cache variable for type ValidTestCasesFeature and conformance ValidTestCasesFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValidTestCasesFeature and conformance ValidTestCasesFeature);
  }
  return result;
}

uint64_t sub_187877068()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1878770A0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(a1, a2, v7, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[3] = v5;
  v6[4] = v4;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), 0, 0);
}

uint64_t objectdestroy_102Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[3] = v5;
  v6[4] = v4;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6[2] = a1;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), 0, 0);
}

uint64_t partial apply for closure #1 in SceneBridge.validTestCases.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in SceneBridge.validTestCases.getter(a1);
}

uint64_t assignWithTake for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = (_OWORD *)(a2 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 48);
  if (v5 != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 != 255)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      *(_OWORD *)(a1 + 32) = *v4;
      *(unsigned char *)(a1 + 48) = v6 & 1;
      outlined consume of SceneID(v7, v8, v5 & 1);
      return a1;
    }
    outlined destroy of SceneID(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t storeEnumTagSinglePayload for RootEnvironmentModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 2;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier>, type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in RootEnvironmentModifier()
{
  return &protocol witness table for RootEnvironmentModifier;
}

uint64_t partial apply for closure #1 in implicit closure #2 in implicit closure #1 in RootEnvironmentModifier.Child.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGCompareValues();
  *a1 = result ^ 1;
  return result;
}

uint64_t assignWithCopy for RootEnvironmentModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32) == 3)
  {
    if (v6 == 3)
    {
      long long v7 = *v5;
      long long v8 = *(_OWORD *)(a2 + 24);
      long long v9 = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(_OWORD *)(a1 + 24) = v8;
      *(_OWORD *)(a1 + 40) = v9;
LABEL_4:
      *(_OWORD *)uint64_t v4 = v7;
      return a1;
    }
    swift_weakCopyInit();
    swift_weakCopyInit();
    swift_weakCopyInit();
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    int v13 = *(unsigned __int8 *)(a2 + 56);
    if (v13 == 255)
    {
      long long v14 = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v14;
      return a1;
    }
    goto LABEL_14;
  }
  if (v6 == 3)
  {
    outlined destroy of RootEnvironmentModifier(a1 + 8);
    long long v11 = v5[1];
    long long v10 = v5[2];
    long long v12 = *v5;
    *(unsigned char *)(v4 + 48) = *((unsigned char *)v5 + 48);
    *(_OWORD *)(v4 + 16) = v11;
    *(_OWORD *)(v4 + 32) = v10;
    *(_OWORD *)uint64_t v4 = v12;
    return a1;
  }
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = a1 + 40;
  uint64_t v15 = (long long *)(a2 + 40);
  int v13 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v13 == 255)
    {
      long long v7 = *v15;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      goto LABEL_4;
    }
LABEL_14:
    char v17 = v13 & 1;
    uint64_t v19 = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 48);
    outlined copy of SceneID(v19, v18, v13 & 1);
    *(void *)(a1 + 40) = v19;
    *(void *)(a1 + 48) = v18;
    *(unsigned char *)(a1 + 56) = v17;
    return a1;
  }
  if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 40);
    char v16 = *(unsigned char *)(a2 + 56);
    *(_OWORD *)uint64_t v4 = *v15;
    *(unsigned char *)(a1 + 56) = v16;
  }
  else
  {
    char v20 = v13 & 1;
    uint64_t v22 = *(void *)(a2 + 40);
    uint64_t v21 = *(void *)(a2 + 48);
    outlined copy of SceneID(v22, v21, v13 & 1);
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 48);
    char v25 = *(unsigned char *)(a1 + 56);
    *(void *)(a1 + 40) = v22;
    *(void *)(a1 + 48) = v21;
    *(unsigned char *)(a1 + 56) = v20;
    outlined consume of SceneID(v23, v24, v25);
  }
  return a1;
}

uint64_t initializeWithTake for RootEnvironmentModifier.Child(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(void *)a1 = v5;
  uint64_t v6 = a1 + 8;
  if (*((unsigned char *)a2 + 32) == 3)
  {
    long long v7 = *((_OWORD *)v4 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v7;
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(unsigned char *)(v6 + 48) = *((unsigned char *)v4 + 48);
  }
  else
  {
    swift_weakTakeInit();
    swift_weakTakeInit();
    swift_weakTakeInit();
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  }
  return a1;
}

uint64_t assignWithTake for RootEnvironmentModifier.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32) == 3)
  {
    if (v6 != 3)
    {
      swift_weakTakeInit();
      swift_weakTakeInit();
      swift_weakTakeInit();
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      return a1;
    }
LABEL_6:
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v7;
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(unsigned char *)(v4 + 48) = *(unsigned char *)(v5 + 48);
    return a1;
  }
  if (v6 == 3)
  {
    outlined destroy of RootEnvironmentModifier(a1 + 8);
    goto LABEL_6;
  }
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  long long v8 = (_OWORD *)(a2 + 40);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 56);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v8;
      *(unsigned char *)(a1 + 56) = v10 & 1;
      outlined consume of SceneID(v11, v12, v9 & 1);
      return a1;
    }
    outlined destroy of SceneID(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for RootEnvironmentModifier.Child(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 32) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 32);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 32) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RootEnvironmentModifier.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RootEnvironmentModifier.Child()
{
  return &type metadata for RootEnvironmentModifier.Child;
}

uint64_t *assignWithTake for PlatformItemListButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 40);
  uint64_t v12 = a1[4];
  char v13 = *((unsigned char *)a1 + 40);
  a1[4] = a2[4];
  *((unsigned char *)a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  char v14 = *((unsigned char *)a2 + 56);
  uint64_t v15 = a1[6];
  char v16 = *((unsigned char *)a1 + 56);
  a1[6] = a2[6];
  *((unsigned char *)a1 + 56) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListButtonStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemListButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in PlatformItemListButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformItemListButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5 - 8);
  char v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v9 = v2[1];
  long long v31 = *v2;
  long long v32 = v9;
  *(_OWORD *)unint64_t v33 = v2[2];
  *(_OWORD *)&v33[9] = *(long long *)((char *)v2 + 41);
  outlined init with copy of PrimitiveButtonStyleConfiguration(a1, (uint64_t)v8);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v8, v11 + v10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = swift_getKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  outlined init with copy of PrimitiveButtonStyleConfiguration(a1, (uint64_t)v8);
  uint64_t v15 = swift_allocObject();
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v8, v15 + v10);
  uint64_t v16 = v31;
  uint64_t v17 = BYTE8(v31);
  outlined copy of Environment<Color?>.Content(v31, BYTE8(v31));
  uint64_t v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Color?>.Content(v16, v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  uint64_t v20 = *(void *)&v33[16];
  LOBYTE(v18) = v33[24];
  outlined copy of Environment<Bool>.Content(*(uint64_t *)&v33[16], v33[24]);
  specialized Environment.wrappedValue.getter(v20, v18, &v30);
  outlined consume of Environment<Bool>.Content(v20, v18);
  LOBYTE(v18) = v30 == 2;
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = v18;
  __int16 v29 = 0;
  v28[0] = 0;
  uint64_t v22 = (_OWORD *)swift_allocObject();
  long long v23 = v32;
  v22[1] = v31;
  v22[2] = v23;
  v22[3] = *(_OWORD *)v33;
  *(_OWORD *)((char *)v22 + 57) = *(_OWORD *)&v33[9];
  char v24 = HIBYTE(v29);
  char v25 = v29;
  char v26 = v28[0];
  *(void *)a2 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = KeyPath;
  *(unsigned char *)(a2 + 32) = v24;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 65) = v25;
  *(void *)(a2 + 72) = v14;
  *(unsigned char *)(a2 + 80) = v26;
  *(void *)(a2 + 88) = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(void *)(a2 + 96) = v15;
  *(void *)(a2 + 104) = partial apply for closure #1 in View.platformItemTint(_:);
  *(void *)(a2 + 112) = v19;
  *(void *)(a2 + 120) = partial apply for closure #1 in View.platformItemKeepsMenuPresented(_:);
  *(void *)(a2 + 128) = v21;
  *(void *)(a2 + 136) = partial apply for closure #3 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(void *)(a2 + 144) = v22;
  return outlined retain of PlatformItemListButtonStyle((uint64_t)&v31);
}

void closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_24:
    }
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v5 = 0;
    unint64_t v6 = a2 + 16;
    unint64_t v33 = a2 + 32;
    while (1)
    {
      if (v5 >= v2[2])
      {
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v20 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      a2 = (unint64_t)v2
         + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
         + *(void *)(v20 + 72) * v5;
      if (*(void *)(a2 + 328) >> 2 != 0xFFFFFFFFLL) {
        goto LABEL_6;
      }
      char v39 = *(unsigned char *)(v6 + 8);
      uint64_t v21 = *(void *)v6;
      uint64_t v38 = *(void *)v6;
      if (v39 == 1)
      {
        outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        if (v21) {
          goto LABEL_15;
        }
      }
      else
      {
        outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        swift_retain();
        os_log_type_t v22 = static os_log_type_t.fault.getter();
        long long v23 = static Log.runtimeIssuesLog.getter();
        if (os_log_type_enabled(v23, v22))
        {
          uint64_t v24 = swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          uint64_t v35 = v25;
          *(_DWORD *)uint64_t v24 = 136315138;
          *(void *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1819242306, 0xE400000000000000, &v35);
          _os_log_impl(&dword_1872C6000, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v25, -1, -1);
          MEMORY[0x18C119C60](v24, -1, -1);
        }

        EnvironmentValues.init()();
        swift_getAtKeyPath();
        outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        swift_release();
        swift_release();
        outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        if (v34)
        {
LABEL_15:
          char v37 = *(unsigned char *)(v33 + 8);
          uint64_t v26 = *(void *)v33;
          uint64_t v36 = *(void *)v33;
          if (v37 == 1)
          {
            outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            uint64_t v8 = (unsigned __int16)v26;
          }
          else
          {
            outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            os_log_type_t v27 = static os_log_type_t.fault.getter();
            unint64_t v28 = static Log.runtimeIssuesLog.getter();
            os_log_type_t v29 = v27;
            if (os_log_type_enabled(v28, v27))
            {
              uint64_t v30 = swift_slowAlloc();
              uint64_t v31 = swift_slowAlloc();
              uint64_t v35 = v31;
              *(_DWORD *)uint64_t v30 = 136315138;
              *(void *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000188328280, &v35);
              _os_log_impl(&dword_1872C6000, v28, v29, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v30, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x18C119C60](v31, -1, -1);
              MEMORY[0x18C119C60](v30, -1, -1);
            }

            EnvironmentValues.init()();
            swift_getAtKeyPath();
            outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            swift_release();
            swift_release();
            outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            uint64_t v8 = v34;
          }
          unint64_t v7 = 0;
          goto LABEL_5;
        }
      }
      unint64_t v7 = 0xC000000000000000;
      uint64_t v8 = 6;
LABEL_5:
      long long v9 = *(void **)(a2 + 296);
      uint64_t v10 = *(void *)(a2 + 304);
      uint64_t v11 = *(void *)(a2 + 312);
      uint64_t v12 = *(void *)(a2 + 320);
      unint64_t v13 = *(void *)(a2 + 328);
      uint64_t v14 = *(void *)(a2 + 336);
      uint64_t v15 = *(void *)(a2 + 344);
      uint64_t v16 = *(void *)(a2 + 352);
      long long v17 = *(_OWORD *)(a2 + 360);
      long long v18 = *(_OWORD *)(a2 + 376);
      uint64_t v19 = *(void *)(a2 + 392);
      *(void *)(a2 + 296) = v8;
      *(void *)(a2 + 304) = 0;
      *(void *)(a2 + 312) = 0;
      *(void *)(a2 + 320) = 0;
      *(void *)(a2 + 328) = v7;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 384) = 0u;
      outlined consume of PlatformItemList.Item.SystemItem?(v9, v10, v11, v12, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, SBYTE8(v18), v19);
LABEL_6:
      if (v3 == ++v5)
      {
        *(void *)a1 = v2;
        return;
      }
    }
  }
}

double static PlatformButtonActionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[3];
  long long v6 = a2[1];
  long long v26 = a2[2];
  long long v27 = v5;
  long long v7 = a2[3];
  long long v28 = a2[4];
  long long v8 = a2[1];
  long long v24 = *a2;
  long long v25 = v8;
  long long v20 = v26;
  long long v21 = v7;
  long long v22 = a2[4];
  int v9 = *a1;
  int v29 = *((_DWORD *)a2 + 20);
  int v23 = *((_DWORD *)a2 + 20);
  long long v18 = v24;
  long long v19 = v6;
  a3(&v16);
  *(void *)&long long v18 = v27;
  DWORD2(v18) = DWORD2(v27);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs((uint64_t)&v24);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v24);
    if ((v18 & 8) != 0)
    {
      LODWORD(v18) = v9;
      type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, &lazy cache variable for type metadata for _GraphValue<PlatformButtonActionModifier>, (uint64_t)&type metadata for PlatformButtonActionModifier, MEMORY[0x1E4F3F590]);
      int v10 = _GraphValue.value.getter();
      uint64_t KeyPath = swift_getKeyPath();
      LODWORD(v18) = v10;
      *((void *)&v18 + 1) = KeyPath;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for (())?(0);
      type metadata accessor for Focus<PlatformButtonActionModifier, (())?>();
      lazy protocol witness table accessor for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>();
      unsigned int v12 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      long long v20 = v26;
      long long v21 = v27;
      long long v22 = v28;
      int v23 = v29;
      long long v18 = v24;
      long long v19 = v25;
      swift_getKeyPath();
      unsigned int v13 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      long long v20 = v26;
      long long v21 = v27;
      long long v22 = v28;
      int v23 = v29;
      long long v18 = v24;
      long long v19 = v25;
      swift_getKeyPath();
      int v14 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      *(void *)&long long v18 = __PAIR64__(v13, v12);
      DWORD2(v18) = v14;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent();
      LODWORD(v18) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)&v16, (uint64_t)&v24);
    }
  }
  *(void *)a4 = v16;
  double result = v17;
  a4[1] = v17;
  return result;
}

uint64_t key path getter for PlatformButtonActionModifier.action : PlatformButtonActionModifier@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    long long v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for PlatformButtonActionModifier.action : PlatformButtonActionModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    long long v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  outlined copy of AppIntentExecutor?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformButtonActionModifier()
{
}

double protocol witness for static Rule.initialValue.getter in conformance PlatformButtonActionTransform.MakeTransform@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = xmmword_18834FC50;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformButtonActionTransform.MakeTransform@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();

  return outlined init with copy of PlatformItem.SelectionContent(Value, a1);
}

uint64_t PlatformButtonActionTransform.SelectionContent.value.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = *(unsigned __int8 *)AGGraphGetValue();
  if (*(unsigned char *)AGGraphGetValue() == 1) {
    v2 |= 4uLL;
  }
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  *(void *)&long long v6 = AGCreateWeakAttribute();
  *((void *)&v6 + 1) = AGCreateWeakAttribute();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v10, (uint64_t)&v7 + 8);
  long long v12 = v6;
  *((void *)&v13 + 1) = *((void *)&v7 + 1);
  long long v14 = v8;
  long long v15 = v9;
  *(void *)&long long v13 = v2;
  outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v16, (uint64_t)&v13 + 8);
  long long v3 = v13;
  *a1 = v12;
  a1[1] = v3;
  long long v4 = v15;
  a1[2] = v14;
  a1[3] = v4;
  return outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v16);
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformButtonActionTransform.SelectionContent@<X0>(_OWORD *a1@<X8>)
{
  return PlatformButtonActionTransform.SelectionContent.value.getter(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformButtonActionTransform()
{
}

uint64_t sub_187878A6C()
{
  swift_release();

  return swift_deallocObject();
}

int *partial apply for closure #1 in View.platformItemTint(_:)(int *a1)
{
  return closure #1 in View.platformItemTint(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_187878AAC()
{
  return swift_deallocObject();
}

int *partial apply for closure #1 in View.platformItemKeepsMenuPresented(_:)(int *a1)
{
  return closure #1 in View.platformItemKeepsMenuPresented(_:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_187878AC4()
{
  outlined consume of Environment<Color?>.Content(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  return swift_deallocObject();
}

void partial apply for closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)(uint64_t a1)
{
  closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)(a1, v1 + 16);
}

uint64_t outlined retain of PlatformItemListButtonStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  outlined copy of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  return a1;
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t outlined retain of Environment<PaletteSelectionEffect>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Environment<PaletteSelectionEffect>(uint64_t a1)
{
  return a1;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x18C117690);
}

uint64_t outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1)
{
  type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformButtonActionTransform.MakeTransform()
{
  return &type metadata for PlatformButtonActionTransform.MakeTransform;
}

uint64_t destroy for PlatformButtonActionTransform(uint64_t result)
{
  if (*(void *)(result + 48)) {
    return __swift_destroy_boxed_opaque_existential_1(result + 24);
  }
  return result;
}

uint64_t initializeWithCopy for PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(void *)(v4 + 32) = *(void *)(v5 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (long long *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v5)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 24);
      uint64_t v6 = *((void *)v4 + 4);
      long long v7 = v4[1];
      *(_OWORD *)uint64_t v3 = *v4;
      *(_OWORD *)(v3 + 16) = v7;
      *(void *)(v3 + 32) = v6;
    }
  }
  else if (v5)
  {
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    long long v8 = *v4;
    long long v9 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v3 = v8;
    *(_OWORD *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a2 + 48)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 24);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformButtonActionTransform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformButtonActionTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformButtonActionTransform()
{
  return &type metadata for PlatformButtonActionTransform;
}

ValueMetadata *type metadata accessor for PlatformButtonActionTransform.SelectionContent()
{
  return &type metadata for PlatformButtonActionTransform.SelectionContent;
}

ValueMetadata *type metadata accessor for PlatformButtonActionModifier()
{
  return &type metadata for PlatformButtonActionModifier;
}

uint64_t sub_1878793EC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255);
    type metadata accessor for LabelGroup<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for LabelGroup<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>)
  {
    type metadata accessor for LabelGroup<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for LabelGroup<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for LabelGroup<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>(255);
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>();
    lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>();
    lazy protocol witness table accessor for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>;
  if (!lazy protocol witness table cache variable for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>)
  {
    type metadata accessor for LabelGroup<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for LabelGroup<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformButtonActionModifier()
{
  return &protocol witness table for PlatformButtonActionModifier;
}

unint64_t lazy protocol witness table accessor for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformButtonActionTransform()
{
  return &protocol witness table for PlatformButtonActionTransform;
}

unint64_t instantiation function for generic protocol witness table for PlatformButtonActionTransform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey);
  }
  return result;
}

void type metadata accessor for Focus<PlatformButtonActionModifier, (())?>()
{
  if (!lazy cache variable for type metadata for Focus<PlatformButtonActionModifier, (())?>)
  {
    type metadata accessor for (())?(255);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<PlatformButtonActionModifier, (())?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<PlatformButtonActionModifier, (())?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t sub_187879CF8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t EnvironmentValues.focusGroupID.setter()
{
  type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>);
    }
  }
}

uint64_t EnvironmentValues.focusGroupID.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

ValueMetadata *type metadata accessor for FocusGroupIDKey()
{
  return &type metadata for FocusGroupIDKey;
}

unint64_t lazy protocol witness table accessor for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID;
  if (!lazy protocol witness table cache variable for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID);
  }
  return result;
}

uint64_t _AlignmentWritingModifier.computeValue.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void protocol witness for ViewModifier.body(content:) in conformance _AlignmentWritingModifier()
{
}

uint64_t View.alignmentGuide(_:computeValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  return MEMORY[0x18C113660](v6, a4, &type metadata for _AlignmentWritingModifier, a5);
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return MEMORY[0x1F40FD928]();
}

_UNKNOWN **base witness table accessor for ViewModifier in _AlignmentWritingModifier()
{
  return &protocol witness table for _AlignmentWritingModifier;
}

uint64_t assignWithTake for _AlignmentWritingModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_18787A08C()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for AlignmentModifiedLayoutComputer()
{
  return &unk_1ED45ACC0;
}

void *assignWithCopy for AlignmentModifiedLayoutComputer.Engine(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for AlignmentModifiedLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlignmentModifiedLayoutComputer.Engine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlignmentModifiedLayoutComputer.Engine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for AlignmentModifiedLayoutComputer.Engine()
{
  return &unk_1ED474930;
}

char *initializeBufferWithCopyOfBuffer for ListCoreBatchUpdates(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for IndexSet();
    long long v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v8(&a1[a3[9]], (char *)a2 + a3[9], v7);
    uint64_t v9 = a3[11];
    *(void *)&a1[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)&a1[v9] = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[13];
    *(void *)&a1[a3[12]] = *(uint64_t *)((char *)a2 + a3[12]);
    *(void *)&a1[v10] = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[14];
    long long v20 = &a1[v11];
    long long v12 = (char *)a2 + v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v20, v12, v7);
    uint64_t v13 = a3[15];
    long long v14 = &a1[v13];
    long long v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *(void *)long long v14 = *v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = v15[3];
    *((void *)v14 + 2) = v15[2];
    *((void *)v14 + 3) = v17;
    *((void *)v14 + 4) = v15[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7(a1 + a3[14], a2 + a3[14], v6);
  uint64_t v8 = a3[15];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[2] = v10[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[3] = v10[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v9[4] = v10[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v8 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  v7(a1 + a3[14], a2 + a3[14], v6);
  uint64_t v10 = a3[15];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  long long v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  return a1;
}

uint64_t assignWithTake for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  v7(a1 + a3[14], a2 + a3[14], v6);
  uint64_t v8 = a3[15];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(void *)(a1 + v8) = *v10;
  swift_bridgeObjectRelease();
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  v9[2] = v10[2];
  swift_bridgeObjectRelease();
  v9[3] = v10[3];
  swift_bridgeObjectRelease();
  void v9[4] = v10[4];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18787A838);
}

uint64_t sub_18787A838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18787A90C);
}

uint64_t sub_18787A90C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexSet();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
  return result;
}

uint64_t ListCoreBatchUpdates.description.getter(int *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for (source: IndexPath, destination: IndexPath)?(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (void (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath));
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v162 = (uint64_t)v143 - v8;
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v149 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v161 = (char *)v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v164 = (char *)v143 - v12;
  type metadata accessor for (source: IndexPath, destination: IndexPath)?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v155 = (char *)v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v154 = (void (**)(char *, char *, uint64_t))((char *)v143 - v16);
  uint64_t v17 = type metadata accessor for IndexSet();
  uint64_t v148 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  long long v165 = (char *)v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = type metadata accessor for IndexSet.Index();
  uint64_t v158 = *(void *)(v167 - 8);
  MEMORY[0x1F4188790](v167);
  long long v168 = (char *)v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  long long v166 = (char *)v143 - v21;
  type metadata accessor for IndexingIterator<IndexSet>();
  uint64_t v147 = v22;
  MEMORY[0x1F4188790](v22);
  long long v24 = (char *)v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  long long v27 = (void (**)(char *, char *, uint64_t))((char *)v143 - v26);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)v143 - v29;
  uint64_t v172 = 0x2073657461647055;
  unint64_t v173 = 0xE90000000000007BLL;
  char v31 = IndexSet.isEmpty.getter();
  uint64_t v151 = v1;
  v150 = a1;
  long long v169 = v6;
  long long v163 = (void (**)(void, void))v9;
  double v146 = v24;
  if ((v31 & 1) == 0)
  {
    uint64_t v153 = v27;
    v32._uint64_t countAndFlagsBits = 10;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    v33._object = (void *)0x800000018832B3F0;
    v33._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v33);
    IndexSet.makeIterator()();
    unsigned __int16 v34 = &v30[*(int *)(v147 + 36)];
    uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v158 + 16);
    int v160 = (void (**)(char *, uint64_t, void (**)(void, void)))(v158 + 16);
    uint64_t v35 = (void (**)(char *, uint64_t))(v158 + 8);
    char v156 = (void (**)(char *, uint64_t))(v148 + 8);
    int v157 = (unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 16);
    uint64_t v36 = v166;
    uint64_t v37 = v167;
    uint64_t v38 = v168;
    while (1)
    {
      v159(v36, v34, v37);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x1E4F27CC8]);
      char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = *v35;
      (*v35)(v38, v37);
      v40(v36, v37);
      if (v39) {
        break;
      }
      uint64_t v41 = (void (*)(Swift::String *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v43 = *v42;
      v41(v171, 0);
      uint64_t v44 = v165;
      (*v157)(v165, (uint64_t)v30, v17);
      dispatch thunk of Collection.formIndex(after:)();
      (*v156)(v44, v17);
      uint64_t v170 = v43;
      v171[0]._uint64_t countAndFlagsBits = 32;
      v171[0]._object = (void *)0xE100000000000000;
      v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      String.append(_:)(v171[0]);
      swift_bridgeObjectRelease();
    }
    outlined destroy of IndexingIterator<IndexSet>((uint64_t)v30);
    uint64_t v2 = v151;
    a1 = v150;
    uint64_t v6 = v169;
    uint64_t v9 = (uint64_t)v163;
    long long v27 = v153;
  }
  if ((IndexSet.isEmpty.getter() & 1) == 0)
  {
    v46._uint64_t countAndFlagsBits = 10;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    v47._object = (void *)0x800000018832B410;
    v47._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v47);
    IndexSet.makeIterator()();
    id v48 = (char *)v27 + *(int *)(v147 + 36);
    uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v158 + 16);
    int v160 = (void (**)(char *, uint64_t, void (**)(void, void)))(v158 + 16);
    uint64_t v49 = (uint64_t)v27;
    int64_t v50 = (void (**)(char *, uint64_t))(v158 + 8);
    char v156 = (void (**)(char *, uint64_t))(v148 + 8);
    int v157 = (unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 16);
    uint64_t v52 = v166;
    uint64_t v51 = v167;
    uint64_t v53 = v168;
    while (1)
    {
      v159(v52, v48, v51);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x1E4F27CC8]);
      char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v55 = *v50;
      (*v50)(v53, v51);
      v55(v52, v51);
      if (v54) {
        break;
      }
      uint64_t v56 = (void (*)(Swift::String *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v58 = *v57;
      v56(v171, 0);
      uint64_t v59 = v165;
      (*v157)(v165, v49, v17);
      dispatch thunk of Collection.formIndex(after:)();
      (*v156)(v59, v17);
      uint64_t v170 = v58;
      v171[0]._uint64_t countAndFlagsBits = 32;
      v171[0]._object = (void *)0xE100000000000000;
      v60._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      String.append(_:)(v171[0]);
      swift_bridgeObjectRelease();
    }
    outlined destroy of IndexingIterator<IndexSet>(v49);
    uint64_t v2 = v151;
    a1 = v150;
    uint64_t v6 = v169;
    uint64_t v9 = (uint64_t)v163;
  }
  uint64_t v145 = v17;
  uint64_t v61 = *(void *)(v2 + a1[10]);
  if (*(void *)(v61 + 16))
  {
    v62._uint64_t countAndFlagsBits = 10;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    v63._uint64_t countAndFlagsBits = 0x655365766F6D2020;
    v63._object = (void *)0xEF3A736E6F697463;
    String.append(_:)(v63);
    uint64_t v64 = *(void *)(v61 + 16);
    if (v64)
    {
      swift_bridgeObjectRetain();
      uint64_t v65 = (uint64_t *)(v61 + 40);
      do
      {
        uint64_t v66 = *(v65 - 1);
        uint64_t v67 = *v65;
        v171[0]._uint64_t countAndFlagsBits = 32;
        v171[0]._object = (void *)0xE100000000000000;
        uint64_t v170 = v66;
        v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._uint64_t countAndFlagsBits = 540945696;
        v69._object = (void *)0xE400000000000000;
        String.append(_:)(v69);
        uint64_t v170 = v67;
        v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        String.append(_:)(v171[0]);
        swift_bridgeObjectRelease();
        v65 += 2;
        --v64;
      }
      while (v64);
      swift_bridgeObjectRelease();
      uint64_t v2 = v151;
      a1 = v150;
      uint64_t v6 = v169;
    }
  }
  unint64_t v71 = *(void *)(v2 + a1[11]);
  if (*(void *)(v71 + 16))
  {
    v72._uint64_t countAndFlagsBits = 10;
    v72._object = (void *)0xE100000000000000;
    String.append(_:)(v72);
    v73._uint64_t countAndFlagsBits = 0x65766F6D65722020;
    v73._object = (void *)0xED00003A73776F52;
    String.append(_:)(v73);
    uint64_t v74 = *(void *)(v71 + 16);
    unint64_t v144 = v71;
    if (v74)
    {
      uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v149 + 16);
      unint64_t v75 = v71 + ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
      uint64_t v76 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
      char v156 = *(void (***)(char *, uint64_t))(v149 + 72);
      int v157 = (unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48);
      uint64_t v153 = (void (**)(char *, char *, uint64_t))(v149 + 32);
      int v160 = (void (**)(char *, uint64_t, void (**)(void, void)))(v149 + 16);
      uint64_t v152 = (void (**)(char *, uint64_t))(v149 + 8);
      swift_bridgeObjectRetain();
      v143[1] = (unint64_t)v76 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v77 = (char *)v154;
      uint64_t v78 = v164;
      while (1)
      {
        v159(v77, (char *)v75, v9);
        uint64_t v79 = *v76;
        (*v76)(v77, 0, 1, v9);
        if ((*v157)(v77, 1, v9) == 1) {
          break;
        }
        (*v153)(v78, v77, v9);
        v171[0]._uint64_t countAndFlagsBits = 10272;
        v171[0]._object = (void *)0xE200000000000000;
        uint64_t v170 = IndexPath.section.getter();
        v80._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        v81._uint64_t countAndFlagsBits = 8236;
        v81._object = (void *)0xE200000000000000;
        String.append(_:)(v81);
        uint64_t v170 = IndexPath.row.getter();
        v82._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        v83._uint64_t countAndFlagsBits = 41;
        v83._object = (void *)0xE100000000000000;
        String.append(_:)(v83);
        String.append(_:)(v171[0]);
        uint64_t v77 = (char *)v154;
        swift_bridgeObjectRelease();
        (*v152)(v78, v9);
        v75 += (unint64_t)v156;
        if (!--v74) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
      swift_bridgeObjectRetain();
      uint64_t v77 = (char *)v154;
LABEL_23:
      v79(v77, 1, 1, v9);
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v151;
    a1 = v150;
    uint64_t v6 = v169;
  }
  uint64_t v84 = *(void *)(v2 + a1[12]);
  if (*(void *)(v84 + 16))
  {
    v85._uint64_t countAndFlagsBits = 10;
    v85._object = (void *)0xE100000000000000;
    String.append(_:)(v85);
    v86._uint64_t countAndFlagsBits = 0x747265736E692020;
    v86._object = (void *)0xED00003A73776F52;
    String.append(_:)(v86);
    uint64_t v87 = *(void *)(v84 + 16);
    uint64_t v152 = (void (**)(char *, uint64_t))v84;
    if (v87)
    {
      uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v149 + 16);
      unint64_t v88 = (char *)(v84
                   + ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80)));
      unint64_t v89 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
      char v156 = *(void (***)(char *, uint64_t))(v149 + 72);
      int v157 = (unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48);
      uint64_t v154 = (void (**)(char *, char *, uint64_t))(v149 + 32);
      int v160 = (void (**)(char *, uint64_t, void (**)(void, void)))(v149 + 16);
      uint64_t v153 = (void (**)(char *, char *, uint64_t))(v149 + 8);
      swift_bridgeObjectRetain();
      unint64_t v144 = (unint64_t)v89 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v90 = v155;
      int v91 = v164;
      while (1)
      {
        v159(v90, v88, v9);
        uint64_t v92 = *v89;
        (*v89)(v90, 0, 1, v9);
        if ((*v157)(v90, 1, v9) == 1) {
          break;
        }
        (*v154)(v91, v90, v9);
        v171[0]._uint64_t countAndFlagsBits = 10272;
        v171[0]._object = (void *)0xE200000000000000;
        uint64_t v170 = IndexPath.section.getter();
        v93._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v93);
        swift_bridgeObjectRelease();
        v94._uint64_t countAndFlagsBits = 8236;
        v94._object = (void *)0xE200000000000000;
        String.append(_:)(v94);
        uint64_t v170 = IndexPath.row.getter();
        v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        v96._uint64_t countAndFlagsBits = 41;
        v96._object = (void *)0xE100000000000000;
        String.append(_:)(v96);
        String.append(_:)(v171[0]);
        uint64_t v90 = v155;
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))*v153)(v91, v9);
        unint64_t v88 = (char *)v156 + (void)v88;
        if (!--v87) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
      swift_bridgeObjectRetain();
      uint64_t v90 = v155;
LABEL_32:
      v92(v90, 1, 1, v9);
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v151;
    a1 = v150;
    uint64_t v6 = v169;
  }
  uint64_t v97 = *(void *)(v2 + a1[13]);
  if (*(void *)(v97 + 16))
  {
    v98._uint64_t countAndFlagsBits = 10;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    v99._uint64_t countAndFlagsBits = 0x6F5265766F6D2020;
    v99._object = (void *)0xEB000000003A7377;
    String.append(_:)(v99);
    unint64_t v100 = *(void *)(v97 + 16);
    uint64_t v159 = (void (*)(char *, char *, uint64_t))(v149 + 8);
    int v160 = (void (**)(char *, uint64_t, void (**)(void, void)))(v149 + 32);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t i = 0;
    if (v100) {
      goto LABEL_37;
    }
LABEL_36:
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    uint64_t v104 = v103;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v6, 1, 1, v103);
    for (unint64_t i = v100; ; ++i)
    {
      uint64_t v107 = v162;
      outlined init with take of (source: IndexPath, destination: IndexPath)?((uint64_t)v6, v162);
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48))(v107, 1, v104) == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
      uint64_t v108 = v107 + *(int *)(v104 + 48);
      uint64_t v109 = v107;
      char v110 = *v160;
      uint64_t v111 = v163;
      uint64_t v112 = v164;
      (*v160)(v164, v109, v163);
      uint64_t v113 = v97;
      long long v114 = v161;
      v110(v161, v108, v111);
      v171[0]._uint64_t countAndFlagsBits = 0;
      v171[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v171[0]._uint64_t countAndFlagsBits = 10272;
      v171[0]._object = (void *)0xE200000000000000;
      uint64_t v170 = IndexPath.section.getter();
      v115._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v115);
      swift_bridgeObjectRelease();
      v116._uint64_t countAndFlagsBits = 8236;
      v116._object = (void *)0xE200000000000000;
      String.append(_:)(v116);
      uint64_t v170 = IndexPath.row.getter();
      v117._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      v118._uint64_t countAndFlagsBits = 0x28203E2D2029;
      v118._object = (void *)0xE600000000000000;
      String.append(_:)(v118);
      uint64_t v170 = IndexPath.section.getter();
      v119._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v119);
      swift_bridgeObjectRelease();
      v120._uint64_t countAndFlagsBits = 8236;
      v120._object = (void *)0xE200000000000000;
      String.append(_:)(v120);
      uint64_t v170 = IndexPath.row.getter();
      v121._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v121);
      swift_bridgeObjectRelease();
      v122._uint64_t countAndFlagsBits = 41;
      v122._object = (void *)0xE100000000000000;
      String.append(_:)(v122);
      String.append(_:)(v171[0]);
      swift_bridgeObjectRelease();
      long long v123 = *(uint64_t (**)(char *, void))v159;
      long long v124 = v114;
      uint64_t v97 = v113;
      (*(void (**)(char *, void))v159)(v124, v111);
      long long v125 = v112;
      uint64_t v6 = v169;
      uint64_t result = v123(v125, v111);
      if (i == v100) {
        goto LABEL_36;
      }
LABEL_37:
      if (i >= *(void *)(v97 + 16)) {
        break;
      }
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      uint64_t v104 = v105;
      uint64_t v106 = *(void *)(v105 - 8);
      outlined init with copy of (source: IndexPath, destination: IndexPath)(v97+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(void *)(v106 + 72) * i, (uint64_t)v169);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v169, 0, 1, v104);
      uint64_t v6 = v169;
    }
    __break(1u);
  }
  else
  {
LABEL_43:
    if ((IndexSet.isEmpty.getter() & 1) == 0)
    {
      v126._uint64_t countAndFlagsBits = 10;
      v126._object = (void *)0xE100000000000000;
      String.append(_:)(v126);
      v127._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v127._object = (void *)0x800000018832B430;
      String.append(_:)(v127);
      uint64_t v128 = (uint64_t)v146;
      IndexSet.makeIterator()();
      uint64_t v129 = v128 + *(int *)(v147 + 36);
      long long v169 = *(char **)(v158 + 16);
      v158 += 16;
      double v130 = (void (**)(char *, uint64_t))(v158 - 8);
      long long v163 = (void (**)(void, void))(v148 + 8);
      long long v164 = (char *)(v148 + 16);
      uint64_t v131 = v145;
      double v133 = v166;
      uint64_t v132 = v167;
      uint64_t v134 = v168;
      while (1)
      {
        ((void (*)(char *, uint64_t, uint64_t))v169)(v133, v129, v132);
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
        dispatch thunk of Collection.endIndex.getter();
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x1E4F27CC8]);
        char v135 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v136 = *v130;
        (*v130)(v134, v132);
        v136(v133, v132);
        if (v135) {
          break;
        }
        uint64_t v137 = (void (*)(Swift::String *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v139 = *v138;
        v137(v171, 0);
        char v140 = v165;
        (*(void (**)(char *, uint64_t, uint64_t))v164)(v165, v128, v131);
        dispatch thunk of Collection.formIndex(after:)();
        (*v163)(v140, v131);
        uint64_t v170 = v139;
        v171[0]._uint64_t countAndFlagsBits = 32;
        v171[0]._object = (void *)0xE100000000000000;
        v141._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v141);
        swift_bridgeObjectRelease();
        String.append(_:)(v171[0]);
        swift_bridgeObjectRelease();
      }
      outlined destroy of IndexingIterator<IndexSet>(v128);
    }
    v142._uint64_t countAndFlagsBits = 32010;
    v142._object = (void *)0xE200000000000000;
    String.append(_:)(v142);
    return v172;
  }
  return result;
}

uint64_t static ListUpdate.== infix(_:_:)(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v196 = a1;
  unint64_t v197 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v174 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v171 = (char *)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v182 = (char *)&v169 - v12;
  MEMORY[0x1F4188790](v13);
  unint64_t v183 = (char *)&v169 - v14;
  MEMORY[0x1F4188790](v15);
  v184 = (char *)&v169 - v16;
  MEMORY[0x1F4188790](v17);
  double v181 = (char *)&v169 - v18;
  MEMORY[0x1F4188790](v19);
  double v180 = (char *)&v169 - v20;
  MEMORY[0x1F4188790](v21);
  double v179 = (char *)&v169 - v22;
  MEMORY[0x1F4188790](v23);
  double v178 = (char *)&v169 - v24;
  uint64_t v191 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v172 = (char *)&v169 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  unint64_t v173 = (char *)&v169 - v28;
  uint64_t v198 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v170 = (char *)&v169 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  long long v169 = (char *)&v169 - v32;
  MEMORY[0x1F4188790](v33);
  uint64_t v188 = (char *)&v169 - v34;
  MEMORY[0x1F4188790](v35);
  unint64_t v194 = (char *)&v169 - v36;
  uint64_t v195 = a3;
  uint64_t v200 = a3;
  uint64_t v201 = a4;
  uint64_t v185 = a6;
  uint64_t v186 = a4;
  uint64_t v189 = a5;
  uint64_t v202 = a5;
  uint64_t v203 = a6;
  uint64_t v37 = type metadata accessor for ListUpdate();
  uint64_t v38 = *(char **)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  int v176 = (char *)&v169 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v40);
  uint64_t v177 = (char *)&v169 - v41;
  MEMORY[0x1F4188790](v42);
  uint64_t v175 = (char *)&v169 - v43;
  MEMORY[0x1F4188790](v44);
  Swift::String v46 = (char *)&v169 - v45;
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (char *)&v169 - v48;
  MEMORY[0x1F4188790](v50);
  uint64_t v52 = (char *)&v169 - v51;
  MEMORY[0x1F4188790](v53);
  uint64_t v55 = (char *)&v169 - v54;
  uint64_t v56 = swift_getTupleTypeMetadata2();
  uint64_t v192 = *(char **)(v56 - 8);
  double v57 = MEMORY[0x1F4188790](v56);
  uint64_t v59 = (char *)&v169 - v58;
  char v193 = (char *)v60;
  uint64_t v61 = (char *)&v169 + *(int *)(v60 + 48) - v58;
  __int16 v190 = v38;
  Swift::String v62 = (void (*)(char *, char *, uint64_t, double))*((void *)v38 + 2);
  v62((char *)&v169 - v58, v196, v37, v57);
  Swift::String v63 = v61;
  ((void (*)(char *, char *, uint64_t))v62)(v61, v197, v37);
  v199 = v59;
  uint64_t v64 = v37;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v65 = v199;
      uint64_t v67 = v37;
      ((void (*)(char *, char *, uint64_t))v62)(v52, v199, v37);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v198 + 8))(v52, v195);
        goto LABEL_21;
      }
      uint64_t v68 = v198;
      Swift::String v69 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
      unint64_t v71 = v194;
      uint64_t v70 = v195;
      v69(v194, v52, v195);
      Swift::String v72 = v188;
      v69(v188, v63, v70);
      char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v74 = *(void (**)(char *, uint64_t))(v68 + 8);
      v74(v72, v70);
      v74(v71, v70);
      unint64_t v75 = v190;
      goto LABEL_22;
    case 2u:
      uint64_t v65 = v199;
      uint64_t v67 = v37;
      ((void (*)(char *, char *, uint64_t))v62)(v49, v199, v37);
      uint64_t v76 = v195;
      uint64_t v77 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v78 = &v49[v77];
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v79 = v63;
        unint64_t v197 = &v63[v77];
        uint64_t v80 = v198;
        Swift::String v81 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
        v81(v194, v49, v76);
        Swift::String v82 = v188;
        v81(v188, v79, v76);
        Swift::String v83 = v169;
        v81(v169, v78, v76);
        uint64_t v84 = v170;
        v81(v170, v197, v76);
        Swift::String v85 = v194;
        Swift::String v86 = v82;
        char v73 = == infix<A, B>(_:_:)();
        uint64_t v87 = *(void (**)(char *, uint64_t))(v80 + 8);
        v87(v84, v76);
        v87(v83, v76);
        unint64_t v88 = v86;
        goto LABEL_12;
      }
      int v160 = *(void (**)(char *, uint64_t))(v198 + 8);
      v160(v78, v76);
      v160(v49, v76);
      goto LABEL_21;
    case 3u:
      uint64_t v65 = v199;
      uint64_t v67 = v37;
      ((void (*)(char *, char *, uint64_t))v62)(v46, v199, v37);
      uint64_t v89 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v90 = &v46[v89];
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        int v91 = v63;
        unint64_t v197 = &v63[v89];
        uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
        Swift::String v93 = v194;
        Swift::String v94 = v46;
        uint64_t v95 = v195;
        v92(v194, v94, v195);
        Swift::String v96 = v188;
        v92(v188, v91, v95);
        uint64_t v97 = v191;
        Swift::String v98 = *(void (**)(char *, char *, uint64_t))(v191 + 32);
        Swift::String v99 = v173;
        unint64_t v100 = v90;
        uint64_t v101 = v186;
        v98(v173, v100, v186);
        uint64_t v102 = v172;
        v98(v172, v197, v101);
        uint64_t v103 = v93;
        uint64_t v104 = v96;
        char v73 = == infix<A, B>(_:_:)();
        uint64_t v105 = *(void (**)(char *, uint64_t))(v97 + 8);
        v105(v102, v101);
        uint64_t v106 = v99;
        uint64_t v65 = v199;
        v105(v106, v101);
        uint64_t v107 = *(void (**)(char *, uint64_t))(v198 + 8);
        v107(v104, v95);
        v107(v103, v95);
        unint64_t v75 = v190;
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v191 + 8))(&v46[v89], v186);
      (*(void (**)(char *, uint64_t))(v198 + 8))(v46, v195);
      goto LABEL_21;
    case 4u:
      uint64_t v108 = v175;
      uint64_t v65 = v199;
      uint64_t v67 = v64;
      ((void (*)(char *, char *, uint64_t))v62)(v175, v199, v64);
      uint64_t v109 = *(int *)(TupleTypeMetadata2 + 48);
      char v110 = &v108[v109];
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        (*(void (**)(char *, uint64_t))(v191 + 8))(&v108[v109], v186);
        (*(void (**)(char *, uint64_t))(v198 + 8))(v108, v195);
        goto LABEL_21;
      }
      unint64_t v197 = &v63[v109];
      uint64_t v111 = v198;
      uint64_t v112 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
      uint64_t v113 = v108;
      uint64_t v76 = v195;
      v112(v194, v113, v195);
      v112(v188, v63, v76);
      uint64_t v114 = v191;
      Swift::String v115 = *(void (**)(char *, char *, uint64_t))(v191 + 32);
      Swift::String v116 = v173;
      Swift::String v117 = v110;
      uint64_t v118 = v186;
      v115(v173, v117, v186);
      Swift::String v119 = v172;
      v115(v172, v197, v118);
      Swift::String v85 = v194;
      char v73 = == infix<A, B>(_:_:)();
      Swift::String v120 = *(void (**)(char *, uint64_t))(v114 + 8);
      v120(v119, v118);
      Swift::String v121 = v116;
      uint64_t v65 = v199;
      v120(v121, v118);
      uint64_t v87 = *(void (**)(char *, uint64_t))(v111 + 8);
      unint64_t v88 = v188;
LABEL_12:
      v87(v88, v76);
      v87(v85, v76);
      unint64_t v75 = v190;
      goto LABEL_22;
    case 5u:
      Swift::String v122 = v177;
      uint64_t v65 = v199;
      ((void (*)(char *, char *, uint64_t))v62)(v177, v199, v37);
      uint64_t v123 = TupleTypeMetadata2;
      uint64_t v124 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      long long v125 = v63;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        unint64_t v197 = &v63[v124];
        uint64_t v126 = *(int *)(v123 + 48);
        uint64_t v192 = &v122[v124];
        Swift::String v127 = &v178[v126];
        uint64_t v196 = &v178[v126];
        uint64_t v128 = &v122[v126];
        uint64_t v129 = v123;
        double v130 = *(void (**)(void))(v198 + 32);
        uint64_t v131 = v195;
        v130();
        uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v191 + 32);
        double v133 = v128;
        uint64_t v134 = v186;
        v132(v127, v133, v186);
        uint64_t v135 = *(int *)(v123 + 48);
        uint64_t v136 = &v179[v135];
        char v193 = &v179[v135];
        unint64_t v194 = &v125[v135];
        v130();
        v132(v136, v194, v134);
        uint64_t v137 = *(int *)(v123 + 48);
        unint64_t v138 = &v180[v137];
        unint64_t v194 = &v180[v137];
        uint64_t v139 = &v192[v137];
        v130();
        v132(v138, v139, v134);
        uint64_t v140 = *(int *)(v123 + 48);
        Swift::String v141 = &v181[v140];
        uint64_t v192 = &v181[v140];
        Swift::String v142 = &v197[v140];
        v130();
        v132(v141, v142, v134);
        unint64_t v197 = &v184[*(int *)(v123 + 48)];
        int v143 = v197;
        unint64_t v144 = *(void (**)(void))(v198 + 16);
        v144();
        uint64_t v145 = *(void (**)(char *, char *, uint64_t))(v191 + 16);
        v145(v143, v196, v134);
        uint64_t v196 = &v183[*(int *)(v123 + 48)];
        double v146 = v196;
        v144();
        v145(v146, v194, v134);
        unint64_t v194 = &v182[*(int *)(v123 + 48)];
        uint64_t v147 = v194;
        v144();
        v145(v147, v193, v134);
        uint64_t v148 = v171;
        uint64_t v149 = &v171[*(int *)(v123 + 48)];
        ((void (*)(char *, char *, uint64_t))v144)(v171, v181, v131);
        v145(v149, v192, v134);
        uint64_t v67 = v64;
        uint64_t v65 = v199;
        char v73 = == infix<A, B, C, D>(_:_:)();
        v150 = *(void (**)(char *, uint64_t))(v174 + 8);
        v150(v181, v129);
        v150(v180, v129);
        v150(v179, v129);
        v150(v178, v129);
        uint64_t v151 = *(void (**)(char *, uint64_t))(v191 + 8);
        v151(v149, v134);
        uint64_t v152 = *(void (**)(char *, uint64_t))(v198 + 8);
        v152(v148, v131);
        v151(v194, v134);
        v152(v182, v131);
        v151(v196, v134);
        v152(v183, v131);
        v151(v197, v134);
        v152(v184, v131);
        unint64_t v75 = v190;
        goto LABEL_22;
      }
      uint64_t v162 = *(void (**)(char *, uint64_t))(v174 + 8);
      v162(&v122[v124], v123);
      v162(v122, v123);
      goto LABEL_21;
    case 6u:
      uint64_t v153 = v176;
      uint64_t v67 = v64;
      ((void (*)(char *, char *, uint64_t))v62)(v176, v199, v64);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v154 = v198;
        unint64_t v155 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
        int v157 = v194;
        uint64_t v156 = v195;
        v155(v194, v153, v195);
        uint64_t v158 = v188;
        v155(v188, v61, v156);
        char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v159 = *(void (**)(char *, uint64_t))(v154 + 8);
        v159(v158, v156);
        v159(v157, v156);
        uint64_t v65 = v199;
        unint64_t v75 = v190;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v198 + 8))(v153, v195);
        char v73 = 0;
        unint64_t v75 = v192;
        uint64_t v67 = (uint64_t)v193;
        uint64_t v65 = v199;
      }
      goto LABEL_22;
    default:
      uint64_t v65 = v199;
      uint64_t v66 = v37;
      ((void (*)(char *, char *, uint64_t))v62)(v55, v199, v37);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v198 + 8))(v55, v195);
LABEL_21:
        char v73 = 0;
        unint64_t v75 = v192;
        uint64_t v67 = (uint64_t)v193;
      }
      else
      {
        uint64_t v163 = v198;
        long long v164 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
        long long v166 = v194;
        uint64_t v165 = v195;
        v164(v194, v55, v195);
        uint64_t v167 = v188;
        v164(v188, v63, v165);
        char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v168 = *(void (**)(char *, uint64_t))(v163 + 8);
        v168(v167, v165);
        v168(v166, v165);
        unint64_t v75 = v190;
        uint64_t v67 = v66;
      }
LABEL_22:
      (*((void (**)(char *, uint64_t))v75 + 1))(v65, v67);
      return v73 & 1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListUpdate<A, B>(char *a1, char *a2, uint64_t *a3)
{
  return static ListUpdate.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842B8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance ListBatchUpdates<A>()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842C8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance ListBatchUpdates<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ListBatchUpdates<A>(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ListBatchUpdates<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ListBatchUpdates.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance ListBatchUpdates<A>(void *a1, char **a2))(uint64_t a1)
{
  uint64_t v5 = (char *)malloc(0x78uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  long long v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v7;
  *((void *)v5 + 4) = *(void *)(v2 + 32);
  *((void *)v5 + 14) = ListBatchUpdates.subscript.read((char ***)v5 + 10, v6);
  char v9 = *(unsigned char *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v8;
  v5 += 40;
  *((_OWORD *)v5 + 1) = v10;
  v5[32] = v9;
  return protocol witness for Collection.subscript.read in conformance ListBatchUpdates<A>;
}

void protocol witness for Collection.subscript.read in conformance ListBatchUpdates<A>(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))(*(void *)a1 + 112))();

  free(v1);
}

void (*ListBatchUpdates.subscript.read(char ***a1, char *a2))(void **a1)
{
  uint64_t v4 = (char **)malloc(0x21uLL);
  *a1 = v4;
  ListBatchUpdates.subscript.getter(a2, v4);
  return ListBatchUpdates.subscript.read;
}

void ListBatchUpdates.subscript.read(void **a1)
{
}

uint64_t protocol witness for Collection.subscript.getter in conformance ListBatchUpdates<A>()
{
  return MEMORY[0x1F4184430]();
}

uint64_t protocol witness for Collection.indices.getter in conformance ListBatchUpdates<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

void *protocol witness for Collection.index(after:) in conformance ListBatchUpdates<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance ListBatchUpdates<A>(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance ListBatchUpdates<A>@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ListBatchUpdates<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ListBatchUpdates<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t ListBatchUpdates.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t base witness table accessor for Sequence in ListBatchUpdates<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>();
}

{
  lazy protocol witness table accessor for type Int and conformance Int();
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ListBatchUpdates<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ListBatchUpdates<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ListBatchUpdates<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in ListBatchUpdates<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ListBatchUpdates<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ListBatchUpdates<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for (source: IndexPath, destination: IndexPath)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of IndexingIterator<IndexSet>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<IndexSet>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of (source: IndexPath, destination: IndexPath)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (source: IndexPath, destination: IndexPath)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (source: IndexPath, destination: IndexPath)?(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (void (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a1) {
    goto LABEL_7;
  }
}

uint64_t partial apply for closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for CountingIndexListDataSource(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CountingIndexListDataSource(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18787DF8CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t destroy for ListBatchUpdates()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ListBatchUpdates(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ListBatchUpdates(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ListBatchUpdates(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListBatchUpdates(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListBatchUpdates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ListUpdate(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = *(_DWORD *)(v7 + 80);
  unint64_t v10 = v8 + v9;
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v8 + v12;
  unint64_t v14 = ((v8 + v12) & ~v12) + *(void *)(v11 + 64);
  unint64_t v15 = v12 | v9;
  unint64_t v16 = v14 + (v12 | v9);
  if (v8 <= ((v8 + v9) & ~v9) + v8) {
    v8 += (v8 + v9) & ~v9;
  }
  if (v14 <= (v16 & ~(v12 | v9)) + v14) {
    unint64_t v17 = (v16 & ~(v12 | v9)) + v14;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v8 <= v17) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = v8;
  }
  if (v15 > 7 || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v18 + 1 > 0x18)
  {
    uint64_t v21 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v21 + ((v15 + 16) & ~(v12 | v9)));
    swift_retain();
  }
  else
  {
    unsigned int v23 = a2[v18];
    unsigned int v24 = v23 - 7;
    if (v23 >= 7)
    {
      if (v18 <= 3) {
        uint64_t v25 = v18;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          goto LABEL_28;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v26 = *(_DWORD *)a2;
LABEL_28:
          int v27 = (v26 | (v24 << (8 * v18))) + 7;
          unsigned int v23 = v26 + 7;
          if (v18 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v28 = ~v9;
    switch(v23)
    {
      case 1u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        *((unsigned char *)v4 + v18) = 1;
        break;
      case 2u:
        uint64_t v29 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16);
        v29(a1, a2, v6);
        v29((void *)(((unint64_t)v4 + v10) & v28), (unsigned __int8 *)((unint64_t)&a2[v10] & v28), v6);
        *((unsigned char *)v4 + v18) = 2;
        break;
      case 3u:
        uint64_t v30 = ~v12;
        uint64_t v31 = v5;
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v4 + v13) & v30, (unint64_t)&a2[v13] & v30, v31);
        *((unsigned char *)v4 + v18) = 3;
        break;
      case 4u:
        uint64_t v32 = ~v12;
        uint64_t v33 = v5;
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v4 + v13) & v32, (unint64_t)&a2[v13] & v32, v33);
        *((unsigned char *)v4 + v18) = 4;
        break;
      case 5u:
        uint64_t v40 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16);
        uint64_t v41 = v5;
        uint64_t v34 = ~(v12 | v9);
        uint64_t v35 = ~v12;
        v40(a1, a2, v6);
        uint64_t v36 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
        v36(((unint64_t)v4 + v13) & v35, (unint64_t)&a2[v13] & v35, v41);
        uint64_t v37 = v34;
        unint64_t v38 = ((unint64_t)v4 + v16) & v34;
        unint64_t v39 = (unint64_t)&a2[v16] & v37;
        v40((void *)v38, (unsigned __int8 *)v39, v6);
        v36((v13 + v38) & v35, (v13 + v39) & v35, v41);
        *((unsigned char *)v4 + v18) = 5;
        break;
      case 6u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        *((unsigned char *)v4 + v18) = 6;
        break;
      default:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        *((unsigned char *)v4 + v18) = 0;
        break;
    }
  }
  return v4;
}

uint64_t destroy for ListUpdate(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v3 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v9 = v6 + v7;
  uint64_t v10 = v6 + v8;
  unint64_t v11 = ((v6 + v8) & ~v8) + *(void *)(*(void *)(v4 - 8) + 64);
  unint64_t v12 = v11 + (v8 | v7);
  if (v6 <= ((v6 + v7) & ~v7) + v6) {
    v6 += (v6 + v7) & ~v7;
  }
  if (v11 <= (v12 & ~(v8 | v7)) + v11) {
    unint64_t v13 = (v12 & ~(v8 | v7)) + v11;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v6 <= v13) {
    unint64_t v6 = v13;
  }
  unsigned int v14 = a1[v6];
  unsigned int v15 = v14 - 7;
  if (v14 >= 7)
  {
    if (v6 <= 3) {
      uint64_t v16 = v6;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a1;
        goto LABEL_17;
      case 2:
        int v17 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v17 = *(_DWORD *)a1;
LABEL_17:
        int v18 = (v17 | (v15 << (8 * v6))) + 7;
        unsigned int v14 = v17 + 7;
        if (v6 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v7;
  uint64_t v20 = ~v8;
  uint64_t v21 = ~(v8 | v7);
  switch(v14)
  {
    case 2u:
      uint64_t v29 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
      v29(a1, v3);
      a1 = (unsigned __int8 *)((unint64_t)&v2[v9] & v19);
      uint64_t v23 = v3;
      uint64_t v22 = (uint64_t (*)(unsigned __int8 *, uint64_t))v29;
      goto LABEL_23;
    case 3u:
    case 4u:
      uint64_t v28 = *(void *)(v4 - 8);
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v3);
      a1 = (unsigned __int8 *)((unint64_t)&v2[v10] & v20);
      uint64_t v22 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v28 + 8);
      uint64_t v23 = v4;
      goto LABEL_23;
    case 5u:
      uint64_t v25 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
      uint64_t v30 = *(void *)(v4 - 8);
      v25(a1, v3);
      int v27 = *(void (**)(unint64_t, uint64_t))(v30 + 8);
      v27((unint64_t)&v2[v10] & v20, v4);
      unint64_t v26 = (unint64_t)&v2[v12] & v21;
      v25((unsigned __int8 *)v26, v3);
      return ((uint64_t (*)(unint64_t, uint64_t))v27)((v10 + v26) & v20, v4);
    default:
      uint64_t v22 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v5 + 8);
      uint64_t v23 = *(void *)(a2 + 16);
LABEL_23:
      return v22(a1, v23);
  }
}

uint64_t initializeWithCopy for ListUpdate(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = v7 + v8;
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v7 + v11;
  unint64_t v13 = ((v7 + v11) & ~v11) + *(void *)(v10 + 64);
  unint64_t v14 = v13 + (v11 | v8);
  if (v7 <= ((v7 + v8) & ~v8) + v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v13 <= (v14 & ~(v11 | v8)) + v13) {
    unint64_t v15 = (v14 & ~(v11 | v8)) + v13;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v7 <= v15) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = v7;
  }
  unsigned int v17 = a2[v16];
  unsigned int v18 = v17 - 7;
  if (v17 >= 7)
  {
    if (v16 <= 3) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *a2;
        goto LABEL_18;
      case 2:
        int v20 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v20 = *(_DWORD *)a2;
LABEL_18:
        int v21 = (v20 | (v18 << (8 * v16))) + 7;
        unsigned int v17 = v20 + 7;
        if (v16 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v22 = ~v8;
  uint64_t v23 = ~v11;
  uint64_t v24 = ~(v11 | v8);
  switch(v17)
  {
    case 1u:
      uint64_t v25 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v26 = 1;
      break;
    case 2u:
      int v27 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16);
      uint64_t v25 = a1;
      uint64_t v28 = v5;
      v27(a1, a2, v5);
      v27((v9 + v25) & v22, (unsigned __int8 *)((unint64_t)&a2[v9] & v22), v28);
      char v26 = 2;
      break;
    case 3u:
      uint64_t v25 = a1;
      uint64_t v29 = v4;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))((v12 + v25) & v23, (unint64_t)&a2[v12] & v23, v29);
      char v26 = 3;
      break;
    case 4u:
      uint64_t v25 = a1;
      uint64_t v30 = v4;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))((v12 + v25) & v23, (unint64_t)&a2[v12] & v23, v30);
      char v26 = 4;
      break;
    case 5u:
      uint64_t v37 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16);
      uint64_t v38 = v5;
      uint64_t v39 = v4;
      v37(a1, a2, v5);
      uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
      v32((v12 + a1) & v23, (unint64_t)&a2[v12] & v23, v39);
      uint64_t v33 = (v14 + a1) & v24;
      unint64_t v34 = (unint64_t)&a2[v14];
      uint64_t v25 = a1;
      unint64_t v35 = v34 & v24;
      v37(v33, (unsigned __int8 *)(v34 & v24), v38);
      v32((v12 + v33) & v23, (v12 + v35) & v23, v39);
      char v26 = 5;
      break;
    case 6u:
      uint64_t v25 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v26 = 6;
      break;
    default:
      uint64_t v25 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v26 = 0;
      break;
  }
  *(unsigned char *)(v25 + v16) = v26;
  return v25;
}

unsigned __int8 *assignWithCopy for ListUpdate(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    unint64_t v9 = *(unsigned __int8 *)(v7 + 80);
    unint64_t v10 = v8 + v9;
    uint64_t v11 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
    uint64_t v41 = v8 + v11;
    uint64_t v42 = *(void *)(v6 - 8);
    unint64_t v12 = ((v8 + v11) & ~v11) + *(void *)(v42 + 64);
    unint64_t v13 = v12 + (v11 | v9);
    if (v8 <= ((v8 + v9) & ~v9) + v8) {
      v8 += (v8 + v9) & ~v9;
    }
    if (v12 <= (v13 & ~(v11 | v9)) + v12) {
      unint64_t v14 = (v13 & ~(v11 | v9)) + v12;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v8 <= v14) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = v8;
    }
    unsigned int v16 = a1[v15];
    unsigned int v17 = v16 - 7;
    if (v16 >= 7)
    {
      if (v15 <= 3) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a1;
          goto LABEL_19;
        case 2:
          int v19 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v19 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v19 = *(_DWORD *)a1;
LABEL_19:
          int v20 = (v19 | (v17 << (8 * v15))) + 7;
          unsigned int v16 = v19 + 7;
          if (v15 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v39 = ~v9;
    uint64_t v43 = ~v11;
    uint64_t v40 = ~(v11 | v9);
    switch(v16)
    {
      case 2u:
        unint64_t v38 = v12 + (v11 | v9);
        uint64_t v25 = *(void (**)(unsigned __int8 *, uint64_t))(v7 + 8);
        v25(a1, v5);
        v25((unsigned __int8 *)((unint64_t)&a1[v10] & v39), v5);
        unint64_t v13 = v38;
        break;
      case 3u:
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        (*(void (**)(unint64_t, uint64_t))(v42 + 8))((unint64_t)&a1[v41] & v43, v6);
        break;
      case 5u:
        uint64_t v36 = *(void (**)(unsigned __int8 *, uint64_t))(v7 + 8);
        v36(a1, v5);
        char v26 = *(void (**)(unint64_t, uint64_t))(v42 + 8);
        v26((unint64_t)&a1[v41] & v43, v6);
        uint64_t v37 = v6;
        unint64_t v27 = (unint64_t)&a1[v13] & v40;
        v36((unsigned __int8 *)v27, v5);
        uint64_t v28 = v41 + v27;
        uint64_t v6 = v37;
        v26(v28 & v43, v37);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        break;
    }
    unsigned int v21 = a2[v15];
    unsigned int v22 = v21 - 7;
    if (v21 >= 7)
    {
      if (v15 <= 3) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_35;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_35:
          int v29 = (v24 | (v22 << (8 * v15))) + 7;
          unsigned int v21 = v24 + 7;
          if (v15 < 4) {
            unsigned int v21 = v29;
          }
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        char v30 = 1;
        break;
      case 2u:
        uint64_t v31 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16);
        v31(a1, a2, v5);
        v31((unsigned __int8 *)((unint64_t)&a1[v10] & v39), (unsigned __int8 *)((unint64_t)&a2[v10] & v39), v5);
        char v30 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 16))((unint64_t)&a1[v41] & v43, (unint64_t)&a2[v41] & v43, v6);
        char v30 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 16))((unint64_t)&a1[v41] & v43, (unint64_t)&a2[v41] & v43, v6);
        char v30 = 4;
        break;
      case 5u:
        uint64_t v32 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16);
        v32(a1, a2, v5);
        uint64_t v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 16);
        v33((unint64_t)&a1[v41] & v43, (unint64_t)&a2[v41] & v43, v6);
        unint64_t v34 = (unint64_t)&a2[v13] & v40;
        v32((unsigned __int8 *)((unint64_t)&a1[v13] & v40), (unsigned __int8 *)v34, v5);
        v33((v41 + ((unint64_t)&a1[v13] & v40)) & v43, (v41 + v34) & v43, v6);
        char v30 = 5;
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        char v30 = 6;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        char v30 = 0;
        break;
    }
    a1[v15] = v30;
  }
  return a1;
}

uint64_t initializeWithTake for ListUpdate(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = v7 + v8;
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v7 + v11;
  unint64_t v13 = ((v7 + v11) & ~v11) + *(void *)(v10 + 64);
  unint64_t v14 = v13 + (v11 | v8);
  if (v7 <= ((v7 + v8) & ~v8) + v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v13 <= (v14 & ~(v11 | v8)) + v13) {
    unint64_t v15 = (v14 & ~(v11 | v8)) + v13;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v7 <= v15) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = v7;
  }
  unsigned int v17 = a2[v16];
  unsigned int v18 = v17 - 7;
  if (v17 >= 7)
  {
    if (v16 <= 3) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *a2;
        goto LABEL_18;
      case 2:
        int v20 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v20 = *(_DWORD *)a2;
LABEL_18:
        int v21 = (v20 | (v18 << (8 * v16))) + 7;
        unsigned int v17 = v20 + 7;
        if (v16 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v22 = ~v8;
  uint64_t v23 = ~v11;
  uint64_t v24 = ~(v11 | v8);
  switch(v17)
  {
    case 1u:
      uint64_t v25 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v26 = 1;
      break;
    case 2u:
      unint64_t v27 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32);
      uint64_t v25 = a1;
      uint64_t v28 = v5;
      v27(a1, a2, v5);
      v27((v9 + v25) & v22, (unsigned __int8 *)((unint64_t)&a2[v9] & v22), v28);
      char v26 = 2;
      break;
    case 3u:
      uint64_t v25 = a1;
      uint64_t v29 = v4;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 32))((v12 + v25) & v23, (unint64_t)&a2[v12] & v23, v29);
      char v26 = 3;
      break;
    case 4u:
      uint64_t v25 = a1;
      uint64_t v30 = v4;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 32))((v12 + v25) & v23, (unint64_t)&a2[v12] & v23, v30);
      char v26 = 4;
      break;
    case 5u:
      uint64_t v37 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32);
      uint64_t v38 = v5;
      uint64_t v39 = v4;
      v37(a1, a2, v5);
      uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 32);
      v32((v12 + a1) & v23, (unint64_t)&a2[v12] & v23, v39);
      uint64_t v33 = (v14 + a1) & v24;
      unint64_t v34 = (unint64_t)&a2[v14];
      uint64_t v25 = a1;
      unint64_t v35 = v34 & v24;
      v37(v33, (unsigned __int8 *)(v34 & v24), v38);
      v32((v12 + v33) & v23, (v12 + v35) & v23, v39);
      char v26 = 5;
      break;
    case 6u:
      uint64_t v25 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v26 = 6;
      break;
    default:
      uint64_t v25 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v26 = 0;
      break;
  }
  *(unsigned char *)(v25 + v16) = v26;
  return v25;
}

unsigned __int8 *assignWithTake for ListUpdate(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    unint64_t v9 = *(unsigned __int8 *)(v7 + 80);
    unint64_t v10 = v8 + v9;
    uint64_t v11 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
    uint64_t v41 = v8 + v11;
    uint64_t v42 = *(void *)(v6 - 8);
    unint64_t v12 = ((v8 + v11) & ~v11) + *(void *)(v42 + 64);
    unint64_t v13 = v12 + (v11 | v9);
    if (v8 <= ((v8 + v9) & ~v9) + v8) {
      v8 += (v8 + v9) & ~v9;
    }
    if (v12 <= (v13 & ~(v11 | v9)) + v12) {
      unint64_t v14 = (v13 & ~(v11 | v9)) + v12;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v8 <= v14) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = v8;
    }
    unsigned int v16 = a1[v15];
    unsigned int v17 = v16 - 7;
    if (v16 >= 7)
    {
      if (v15 <= 3) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a1;
          goto LABEL_19;
        case 2:
          int v19 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v19 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v19 = *(_DWORD *)a1;
LABEL_19:
          int v20 = (v19 | (v17 << (8 * v15))) + 7;
          unsigned int v16 = v19 + 7;
          if (v15 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v39 = ~v9;
    uint64_t v43 = ~v11;
    uint64_t v40 = ~(v11 | v9);
    switch(v16)
    {
      case 2u:
        unint64_t v38 = v12 + (v11 | v9);
        uint64_t v25 = *(void (**)(unsigned __int8 *, uint64_t))(v7 + 8);
        v25(a1, v5);
        v25((unsigned __int8 *)((unint64_t)&a1[v10] & v39), v5);
        unint64_t v13 = v38;
        break;
      case 3u:
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        (*(void (**)(unint64_t, uint64_t))(v42 + 8))((unint64_t)&a1[v41] & v43, v6);
        break;
      case 5u:
        uint64_t v36 = *(void (**)(unsigned __int8 *, uint64_t))(v7 + 8);
        v36(a1, v5);
        char v26 = *(void (**)(unint64_t, uint64_t))(v42 + 8);
        v26((unint64_t)&a1[v41] & v43, v6);
        uint64_t v37 = v6;
        unint64_t v27 = (unint64_t)&a1[v13] & v40;
        v36((unsigned __int8 *)v27, v5);
        uint64_t v28 = v41 + v27;
        uint64_t v6 = v37;
        v26(v28 & v43, v37);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        break;
    }
    unsigned int v21 = a2[v15];
    unsigned int v22 = v21 - 7;
    if (v21 >= 7)
    {
      if (v15 <= 3) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_35;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_35:
          int v29 = (v24 | (v22 << (8 * v15))) + 7;
          unsigned int v21 = v24 + 7;
          if (v15 < 4) {
            unsigned int v21 = v29;
          }
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        char v30 = 1;
        break;
      case 2u:
        uint64_t v31 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32);
        v31(a1, a2, v5);
        v31((unsigned __int8 *)((unint64_t)&a1[v10] & v39), (unsigned __int8 *)((unint64_t)&a2[v10] & v39), v5);
        char v30 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 32))((unint64_t)&a1[v41] & v43, (unint64_t)&a2[v41] & v43, v6);
        char v30 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 32))((unint64_t)&a1[v41] & v43, (unint64_t)&a2[v41] & v43, v6);
        char v30 = 4;
        break;
      case 5u:
        uint64_t v32 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32);
        v32(a1, a2, v5);
        uint64_t v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 32);
        v33((unint64_t)&a1[v41] & v43, (unint64_t)&a2[v41] & v43, v6);
        unint64_t v34 = (unint64_t)&a2[v13] & v40;
        v32((unsigned __int8 *)((unint64_t)&a1[v13] & v40), (unsigned __int8 *)v34, v5);
        v33((v41 + ((unint64_t)&a1[v13] & v40)) & v43, (v41 + v34) & v43, v6);
        char v30 = 5;
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        char v30 = 6;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        char v30 = 0;
        break;
    }
    a1[v15] = v30;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListUpdate(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  if (((v4 + v5) & ~v5) + v4 <= v4) {
    unint64_t v6 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v6 = ((v4 + v5) & ~v5) + v4;
  }
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = ((v4 + v8) & ~v8) + *(void *)(v7 + 64);
  if (v9 > v6) {
    unint64_t v6 = v9;
  }
  unint64_t v10 = ((v9 + (v8 | v5)) & ~(v8 | v5)) + v9;
  if (v10 <= v6) {
    unint64_t v10 = v6;
  }
  if (v4 <= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_30;
  }
  unint64_t v12 = v11 + 1;
  char v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    unsigned int v16 = ((a2 + ~(-1 << v13) - 249) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v16 < 2)
    {
LABEL_30:
      unsigned int v18 = *((unsigned __int8 *)a1 + v11);
      if (v18 >= 7) {
        return (v18 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_30;
  }
LABEL_22:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v12 | v17) + 250;
}

void storeEnumTagSinglePayload for ListUpdate(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    unint64_t v8 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v8 = ((v6 + v7) & ~v7) + v6;
  }
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = ((v6 + v10) & ~v10) + *(void *)(v9 + 64);
  if (v11 > v8) {
    unint64_t v8 = v11;
  }
  unint64_t v12 = ((v11 + (v10 | v7)) & ~(v10 | v7)) + v11;
  if (v12 <= v8) {
    unint64_t v12 = v8;
  }
  if (v6 > v12) {
    unint64_t v12 = *(void *)(v5 + 64);
  }
  size_t v13 = v12 + 1;
  if (a3 < 0xFA)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 + ~(-1 << (8 * v13)) - 249) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (a2 > 0xF9)
  {
    unsigned int v15 = a2 - 250;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v12 != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12 + 1);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        break;
      case 3:
LABEL_41:
        __break(1u);
        JUMPOUT(0x187880214);
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v14)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        goto LABEL_29;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      default:
LABEL_29:
        if (a2) {
LABEL_30:
        }
          a1[v12] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for ListUpdate(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80);
  unint64_t v4 = ((v2 + v3) & ~v3) + v2;
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = ((v2 + v6) & ~v6) + *(void *)(v5 + 64);
  unint64_t v8 = ((v7 + (v6 | v3)) & ~(v6 | v3)) + v7;
  if (v2 <= v4) {
    unint64_t v2 = v4;
  }
  if (v7 <= v8) {
    unint64_t v7 = v8;
  }
  if (v2 <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = v2;
  }
  uint64_t v10 = a1[v9];
  int v11 = v10 - 7;
  if (v10 >= 7)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a1;
        goto LABEL_17;
      case 2:
        int v13 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v13 = *(_DWORD *)a1;
LABEL_17:
        unsigned int v14 = (v13 | (v11 << (8 * v9))) + 7;
        LODWORD(v10) = v13 + 7;
        if (v9 >= 4) {
          uint64_t v10 = v10;
        }
        else {
          uint64_t v10 = v14;
        }
        break;
      default:
        return v10;
    }
  }
  return v10;
}

void destructiveInjectEnumTag for ListUpdate(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (a2 > 6)
  {
    size_t v12 = *(void *)(v4 + 64);
    uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
    size_t v14 = ((v12 + v13) & ~v13) + v12;
    uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
    uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
    size_t v17 = ((v12 + v16) & ~v16) + *(void *)(v15 + 64);
    size_t v18 = ((v17 + (v16 | v13)) & ~(v16 | v13)) + v17;
    if (v12 <= v14) {
      size_t v12 = v14;
    }
    if (v17 <= v18) {
      size_t v17 = v18;
    }
    if (v12 <= v17) {
      size_t v19 = v17;
    }
    else {
      size_t v19 = v12;
    }
    unsigned int v20 = a2 - 7;
    if (v19 < 4)
    {
      unsigned int v21 = v20 >> (8 * v19);
      int v22 = v20 & ~(-1 << (8 * v19));
      a1[v19] = v21 + 7;
      bzero(a1, v19);
      if (v19 == 3)
      {
        *(_WORD *)a1 = v22;
        a1[2] = BYTE2(v22);
      }
      else if (v19 == 2)
      {
        *(_WORD *)a1 = v22;
      }
      else
      {
        *a1 = v22;
      }
    }
    else
    {
      a1[v19] = 7;
      bzero(a1, v19);
      *(_DWORD *)a1 = v20;
    }
  }
  else
  {
    unint64_t v5 = *(void *)(v4 + 64);
    uint64_t v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80);
    unint64_t v7 = ((v5 + v6) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v9 = ((v7 + (v8 | v6)) & ~(v8 | v6)) + v7;
    unint64_t v10 = ((v5 + v8) & ~v8) + v5;
    if (v5 > v10) {
      unint64_t v10 = *(void *)(v4 + 64);
    }
    if (v7 <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v7;
    }
    if (v10 <= v11) {
      unint64_t v10 = v11;
    }
    a1[v10] = a2;
  }
}

uint64_t _UIHostingView.viewGraph.getter()
{
  specialized _UIHostingView.viewGraph.getter();

  return swift_retain();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  a2(0);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  uint64_t v12 = v9 + 64;
  uint64_t v13 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (UIApplicationOpenExternalURLOptionsKey, Any)(v13, (uint64_t)&v20, a3, a4);
    uint64_t v14 = v20;
    unint64_t result = a5(v20);
    if (v16) {
      break;
    }
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v10[6] + 8 * result) = v14;
    unint64_t result = (unint64_t)outlined init with take of Any(&v21, (_OWORD *)(v10[7] + 32 * result));
    uint64_t v17 = v10[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    _OWORD v10[2] = v19;
    v13 += 40;
    if (!--v11)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, [TaskActionsContainer<(), ()>.ContainerEntry]>(0, a2, a3, a4, a5);
  uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v6;
  }
  swift_retain();
  uint64_t v8 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v9 = *(v8 - 2);
    uint64_t v10 = *(v8 - 1);
    uint64_t v11 = *v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    if (v13) {
      break;
    }
    *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v14 = (uint64_t *)(v6[6] + 16 * result);
    *uint64_t v14 = v9;
    v14[1] = v10;
    *(void *)(v6[7] + 8 * result) = v11;
    uint64_t v15 = v6[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6[2] = v17;
    v8 += 3;
    if (!--v7)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t _UIHostingView.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  _UIHostingView.base.getter()[11] = v1;

  return swift_release();
}

uint64_t (*_UIHostingView.renderingPhase.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)_UIHostingView.base.getter() + 98);
  swift_release();
  return _UIHostingView.renderingPhase.modify;
}

uint64_t _UIHostingView.renderingPhase.modify(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  *((unsigned char *)_UIHostingView.base.getter() + 98) = v1;

  return swift_release();
}

uint64_t _UIHostingView.externalUpdateCount.setter(uint64_t a1)
{
  _UIHostingView.base.getter()[13] = a1;

  return swift_release();
}

uint64_t UIView.ancestorHasInvertFilterApplied.getter()
{
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_respondsToSelector_, sel__ancestorHasInvertFilterApplied);
  if (result)
  {
    unsigned int v2 = objc_msgSend(v0, sel__ancestorHasInvertFilterApplied);
    id v3 = objc_msgSend(v0, sel_window);
    if (v3)
    {
      uint64_t v4 = v3;
      if (objc_msgSend(v3, sel_respondsToSelector_, sel__accessibilityInvertColorsIsDarkWindow)) {
        unsigned int v5 = objc_msgSend(v4, sel__accessibilityInvertColorsIsDarkWindow);
      }
      else {
        unsigned int v5 = 0;
      }
      if (objc_msgSend(v4, sel_respondsToSelector_, sel__accessibilityInvertColorsSupportsDarkWindowInvert))
      {
        unsigned int v6 = objc_msgSend(v4, sel__accessibilityInvertColorsSupportsDarkWindowInvert);

        if ((v2 & 1) == 0) {
          return v5 & v6;
        }
      }
      else
      {
        unsigned int v6 = 0;

        if ((v2 & 1) == 0) {
          return v5 & v6;
        }
      }
    }
    else if (!v2)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

void closure #3 in _UIHostingView.updateEnvironment()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = type metadata accessor for _UIHostingView();
    uint64_t WitnessTable = swift_getWitnessTable();
    ViewRendererHost.accessibilityFocus(id:in:)(a1, a2, v8, WitnessTable);
  }
}

Swift::Void __swiftcall _UIHostingView.updateTransformWithoutGeometryObservation()()
{
  _UIHostingView.base.getter();
  UIHostingViewBase.updateTransformWithoutGeometryObservation()();

  swift_release();
}

Swift::Void __swiftcall _UIHostingView.beginAllowUIKitAnimations()()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  ++*(_DWORD *)((char *)v0 + v1);
}

Swift::Void __swiftcall _UIHostingView.endAllowUIKitAnimations()()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  int v2 = *(_DWORD *)((char *)v0 + v1);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)((char *)v0 + v1) = v4 & ~(v4 >> 31);
  }
}

uint64_t _UIHostingView.focusedResponder.getter()
{
  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  FocusBridge.focusedItem.getter((uint64_t)v3);
  if (v3[5]) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = v3[6] == 1;
  }
  if (v0)
  {
    outlined destroy of FocusItem?((uint64_t)v3);
    swift_release();
    return 0;
  }
  else
  {
    uint64_t Strong = swift_weakLoadStrong();
    outlined destroy of FocusItem?((uint64_t)v3);
    swift_release();
  }
  return Strong;
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance _UIHostingView<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return _UIHostingView.currentTimestamp.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance _UIHostingView<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.renderingPhase.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

Swift::Void __swiftcall _UIHostingView.updateAccessibilityEnvironment()()
{
  if ((_UIHostingView.accessibilityEnabled.getter() & 1) == 0)
  {
    if (_AXSAccessibilityEnabled()
      || (BOOL v0 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL),
          Class v1 = NSClassFromString(v0),
          v0,
          v1))
    {
      _UIHostingView.accessibilityEnabled.setter(1);
    }
  }
  uint64_t v2 = type metadata accessor for _UIHostingView();
  uint64_t WitnessTable = swift_getWitnessTable();
  ViewRendererHost.accessibilityNodes.getter(v2, WitnessTable);

  swift_bridgeObjectRelease();
}

uint64_t protocol witness for EventGraphHost.responderNode.getter in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  return ViewRendererHost.responderNode.getter();
}

uint64_t protocol witness for EventGraphHost.nextGestureUpdateTime.getter in conformance _UIHostingView<A1>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FEBB8](a1, WitnessTable);
}

uint64_t protocol witness for EventGraphHost.setInheritedPhase(_:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FEBA0](a1, a2, WitnessTable);
}

uint64_t protocol witness for EventGraphHost.sendEvents(_:rootNode:at:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FEB18](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for EventGraphHost.resetEvents() in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  ViewRendererHost.resetEvents()();
}

uint64_t protocol witness for EventGraphHost.gestureCategory() in conformance _UIHostingView<A1>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FEB70](a1, WitnessTable);
}

void protocol witness for UIKitAnimationCooperating.beginAllowUIKitAnimations() in conformance _UIHostingView<A>()
{
}

void protocol witness for UIKitAnimationCooperating.endAllowUIKitAnimations() in conformance _UIHostingView<A>()
{
}

uint64_t _UIHostingView._preferredFocusEnvironments.getter()
{
  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  uint64_t v0 = FocusBridge.requestedFocusEnvironments.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for _UIHostingView();
  if (UIKitContainerFocusItem.defaultFocusItemsContainer()(v1, (uint64_t)&protocol witness table for _UIHostingView<A>))
  {
    uint64_t v2 = swift_unknownObjectRetain();
    MEMORY[0x18C115B40](v2);
    if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_unknownObjectRelease();
  }
  else
  {
    specialized _UIHostingView.focusBridge.getter();
    swift_retain();
    unint64_t v3 = FocusBridge.preferredFocusEnvironments.getter();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v3);
  }
  return v0;
}

uint64_t _UIHostingView.horizontalAlignment(_:)(uint64_t a1)
{
  return _UIHostingView.horizontalAlignment(_:)(a1, MEMORY[0x1E4F3FE18]);
}

uint64_t _UIHostingView.verticalAlignment(_:)(uint64_t a1)
{
  return _UIHostingView.horizontalAlignment(_:)(a1, MEMORY[0x1E4F3FE10]);
}

uint64_t _UIHostingView.horizontalAlignment(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128, __n128))
{
  objc_msgSend(v2, sel_bounds);
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for _UIHostingView();
  uint64_t WitnessTable = swift_getWitnessTable();
  v10.n128_u64[0] = v5;
  v11.n128_u64[0] = v7;

  return a2(a1, v8, WitnessTable, v10, v11);
}

Swift::Void __swiftcall _UIHostingView.dismiss()()
{
}

void sub_1878832C8(char a1)
{
  if (a1) {
    _UIHostingView.viewController.getter();
  }
  _UIHostingView.isPresentedInModalViewController.getter();
}

void sub_187883324(char a1)
{
  if (a1) {
    _UIHostingView.viewController.getter();
  }
  if (_UIHostingView.canDismissScene()())
  {
    _UIHostingView.dismissScene()();
  }
}

void sub_18788332C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a1)
  {
    id v11 = objc_msgSend(a1, sel_presentingViewController);

    if (v11)
    {
      objc_msgSend(v11, sel_dismissViewControllerAnimated_completion_, 1, 0);
      JUMPOUT(0x187883370);
    }
  }
}

id _UIHostingView.canDismissScene()()
{
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
    return 0;
  }
  id result = objc_msgSend(v0, sel_window);
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  id v3 = objc_msgSend(result, sel_windowScene);

  if (!v3) {
    return 0;
  }

  id v4 = objc_msgSend(self, sel_sharedApplication);
  id v5 = objc_msgSend(v4, sel_openSessions);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UISceneSession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v6 & 0xC000000000000001) != 0) {
    uint64_t v7 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v7 = *(void *)(v6 + 16);
  }
  swift_bridgeObjectRelease();
  return (id)(v7 > 1);
}

void _UIHostingView.dismissScene()()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_windowScene);

    if (v3)
    {
      id v4 = objc_msgSend(v3, sel_session);

      if (v4)
      {
        id v5 = objc_msgSend(self, sel_sharedApplication);
        objc_msgSend(v5, sel_requestSceneSessionDestruction_options_errorHandler_, v4, 0, 0);
      }
    }
  }
}

void _makeUIHostingView<A>(_:)()
{
}

uint64_t RootViewDelegate.hostingView<A>(_:didChangePlatformItemList:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v7 + 40))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RootViewDelegate.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  return swift_deallocClassInstance();
}

SwiftUI::PresentationMode __swiftcall UIKitPresentationModeLocation.get()()
{
  id v1 = v0;
  uint64_t v2 = MEMORY[0x18C119DF0]();
  if (v2) {
    _UIHostingView.isPresentedInModalViewController.getter();
  }
  *id v1 = 0;
  return (SwiftUI::PresentationMode)v2;
}

unsigned char *protocol witness for Location.set(_:transaction:) in conformance UIKitPresentationModeLocation<A>(unsigned char *result)
{
  return specialized UIKitPresentationModeLocation.set(_:transaction:)(result);
}

uint64_t protocol witness for Location.update() in conformance UIKitPresentationModeLocation<A>()
{
  return MEMORY[0x1F41011E8]();
}

SwiftUI::PresentationMode __swiftcall UIKitScenePresentationModeLocation.get()()
{
  id v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x18C119DF0]();
  if (v2 && (id v3 = v2, v4 = objc_msgSend(v2, sel_window), v3, v4))
  {

    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *id v1 = v5;
  return (SwiftUI::PresentationMode)v2;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance UIKitScenePresentationModeLocation<A>(uint64_t a1, uint64_t a2))()
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
  return protocol witness for Location.wasRead.modify in conformance UIKitScenePresentationModeLocation<A>;
}

void protocol witness for Location.set(_:transaction:) in conformance UIKitScenePresentationModeLocation<A>(unsigned char *a1)
{
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    a2(0);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v8 = *(i - 1);
      uint64_t v9 = *i;
      unint64_t result = a3(v8);
      if (v11) {
        break;
      }
      *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v12 = 8 * result;
      *(void *)(v6[6] + v12) = v8;
      *(void *)(v6[7] + v12) = v9;
      uint64_t v13 = v6[2];
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v6[2] = v15;
      if (!--v3) {
        return (unint64_t)v6;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

unsigned char *specialized UIKitPresentationModeLocation.set(_:transaction:)(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    unint64_t result = (unsigned char *)MEMORY[0x18C119DF0](v1);
    if (result) {
      _UIHostingView.dismiss()();
    }
  }
  return result;
}

void specialized UIKitScenePresentationModeLocation.set(_:transaction:)(unsigned char *a1)
{
  if ((*a1 & 1) == 0)
  {
    uint64_t v2 = MEMORY[0x18C119DF0](v1);
    if (v2)
    {
      id v3 = (id)v2;
      if (_UIHostingView.canDismissScene()()) {
        _UIHostingView.dismissScene()();
      }
    }
  }
}

uint64_t sub_1878857C8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187885800()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #3 in _UIHostingView.updateEnvironment()(uint64_t a1, uint64_t a2)
{
  closure #3 in _UIHostingView.updateEnvironment()(a1, a2, *(void *)(v2 + 32));
}

double sub_187885844@<D0>(double *a1@<X8>)
{
  _UIHostingView.currentTimestamp.getter(&v3);
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_187885880(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return _UIHostingView.currentTimestamp.setter(&v2);
}

uint64_t sub_1878858B8()
{
  return 16;
}

__n128 sub_1878858C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1878858D0@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = _UIHostingView.propertiesNeedingUpdate.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_18788590C(__int16 *a1)
{
  __int16 v2 = *a1;
  return _UIHostingView.propertiesNeedingUpdate.setter(&v2);
}

uint64_t sub_187885944()
{
  return 16;
}

__n128 sub_187885950(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18788595C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _UIHostingView.renderingPhase.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_187885998(char *a1)
{
  char v2 = *a1;
  return _UIHostingView.renderingPhase.setter(&v2);
}

uint64_t sub_1878859D0()
{
  return 16;
}

__n128 sub_1878859DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1878859E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _UIHostingView.externalUpdateCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187885A14(uint64_t *a1)
{
  return _UIHostingView.externalUpdateCount.setter(*a1);
}

uint64_t sub_187885A3C()
{
  return 16;
}

__n128 sub_187885A48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, UIAccessibilityCustomRotor>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIAccessibilityCustomRotor);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UIAccessibilityCustomRotor>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Axis and conformance Axis()
{
  unint64_t result = lazy protocol witness table cache variable for type Axis and conformance Axis;
  if (!lazy protocol witness table cache variable for type Axis and conformance Axis)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis and conformance Axis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable.Type>)
  {
    type metadata accessor for Decodable & Encodable.Type();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable.Type>);
    }
  }
}

unint64_t type metadata accessor for Decodable & Encodable.Type()
{
  unint64_t result = lazy cache variable for type metadata for Decodable & Encodable.Type;
  if (!lazy cache variable for type metadata for Decodable & Encodable.Type)
  {
    type metadata accessor for Decodable & Encodable();
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable.Type);
  }
  return result;
}

void type metadata accessor for [Binding<Bool>]()
{
  if (!lazy cache variable for type metadata for [Binding<Bool>])
  {
    type metadata accessor for FocusItem?(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>]);
    }
  }
}

void type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<EventID, [KeyPress.Handler]>)
  {
    type metadata accessor for [AccessibilityNode](255, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, [KeyPress.Handler]>);
    }
  }
}

void type metadata accessor for [AccessibilityNode](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for (Badge, Spacer)(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of AccessibilityFocus.Target(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIFeedbackGenerator);
    lazy protocol witness table accessor for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
    }
  }
}

uint64_t outlined init with copy of (UIApplicationOpenExternalURLOptionsKey, Any)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (NSAttributedStringKey, Any)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _DictionaryStorage();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement()
{
  unint64_t result = lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement;
  if (!lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement;
  if (!lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<PartialKeyPath<UISplitViewController>, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<PartialKeyPath<UISplitViewController>, Any>)
  {
    _s7SwiftUI15HashableWeakBoxVySo16UIViewControllerCGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController, 0x1E4FB1C48, MEMORY[0x1E4FBBAD8]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<PartialKeyPath<UISplitViewController>, Any>);
    }
  }
}

void type metadata accessor for (PartialKeyPath<UISplitViewController>, Any)()
{
  if (!lazy cache variable for type metadata for (PartialKeyPath<UISplitViewController>, Any))
  {
    _s7SwiftUI15HashableWeakBoxVySo16UIViewControllerCGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController, 0x1E4FB1C48, MEMORY[0x1E4FBBAD8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PartialKeyPath<UISplitViewController>, Any));
    }
  }
}

void type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UUID, PlatformItemList>)
  {
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, PlatformItemList>);
    }
  }
}

void type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(uint64_t a1)
{
}

void type metadata accessor for (CountingIndex<Int>, CountingIndex<Int>)()
{
  if (!lazy cache variable for type metadata for (CountingIndex<Int>, CountingIndex<Int>))
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4F3F718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CountingIndex<Int>, CountingIndex<Int>));
    }
  }
}

void type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>)
  {
    type metadata accessor for (Int, CountingIndex<Int>)();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>);
    }
  }
}

void type metadata accessor for (Int, CountingIndex<Int>)()
{
  if (!lazy cache variable for type metadata for (Int, CountingIndex<Int>))
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4F3F718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, CountingIndex<Int>));
    }
  }
}

void type metadata accessor for _DictionaryStorage<Int, Image.Resolved>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, Image.Resolved>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, Image.Resolved>);
    }
  }
}

uint64_t outlined retain of (Int, Image.Resolved)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *(void **)(a1 + 176);
  outlined copy of GraphicsImage.Contents?(*(id *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  id v6 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  }
  return result;
}

uint64_t *outlined retain of (NavigationState.StackContent.Key, NavigationColumnState)(uint64_t *a1)
{
  uint64_t v2 = a1[14];
  uint64_t v3 = a1[15];
  uint64_t v4 = a1[19];
  uint64_t v11 = a1[18];
  uint64_t v12 = a1[17];
  uint64_t v5 = a1[20];
  uint64_t v6 = a1[21];
  uint64_t v9 = a1[23];
  uint64_t v10 = a1[22];
  uint64_t v8 = a1[24];
  outlined copy of NavigationListState?(a1[8], a1[9]);
  outlined copy of Binding<AnyNavigationPath>?(v2, v3);
  outlined copy of NavigationColumnState.ColumnContent(v12, v11, v4, v5, v6, v10, v9, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>)
  {
    type metadata accessor for [AccessibilityNode](255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
    lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration;
  if (!lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration;
  if (!lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  }
  return result;
}

void type metadata accessor for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>)()
{
  if (!lazy cache variable for type metadata for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>))
  {
    type metadata accessor for [AccessibilityNode](255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>));
    }
  }
}

uint64_t outlined init with take of WeakBox<PlatformDocument>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [AccessibilityNode](0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID;
  if (!lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID;
  if (!lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>)
  {
    type metadata accessor for CommandGroupPlacementBox(255);
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn(&lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, Character>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Character>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Character>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGAffineTransform>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIDragItem);
    type metadata accessor for CGAffineTransform(255);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIDragItem and conformance NSObject, &lazy cache variable for type metadata for UIDragItem);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGAffineTransform>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGPoint>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIDragItem);
    type metadata accessor for CGPoint(255);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIDragItem and conformance NSObject, &lazy cache variable for type metadata for UIDragItem);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGPoint>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, MainMenuItemCoordinator>)
  {
    type metadata accessor for MainMenuItemCoordinator();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, MainMenuItemCoordinator>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UUID, UIMenuIdentifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for UUID();
    a3(255);
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v5 = type metadata accessor for _DictionaryStorage();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of (UUID, UIMenuIdentifier)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (UUID, UIMenuIdentifier)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void specialized _UIHostingView.invalidateHoverState(immediately:)()
{
  unint64_t v0 = (void *)specialized _UIHostingView.pointerBridge.getter();
  if (v0)
  {
    id v1 = v0;
    specialized PointerBridge.invalidateHoverState(immediately:)();
  }
}

void type metadata accessor for _DictionaryStorage<Character, String>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Character, String>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Character, String>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, DisplayList.Version>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, DisplayList.Version>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key;
  if (!lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>)
  {
    type metadata accessor for CodingUserInfoKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>)
  {
    type metadata accessor for [AccessibilityNode](255, &lazy cache variable for type metadata for [AnyConnectionOptionActionBox], (uint64_t (*)(uint64_t))type metadata accessor for AnyConnectionOptionActionBox, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, SceneStorageValues.AnyEntry>)
  {
    type metadata accessor for SceneStorageValues.AnyEntry();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<EventID, EventType>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>);
    }
  }
}

void type metadata accessor for (EventID, EventType)()
{
  if (!lazy cache variable for type metadata for (EventID, EventType))
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (EventID, EventType));
    }
  }
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

uint64_t outlined retain of TableColumnCustomizationID.Base(uint64_t a1)
{
  return a1;
}

void type metadata accessor for _DictionaryStorage<UIApplicationOpenExternalURLOptionsKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UIApplicationOpenExternalURLOptionsKey, Any>)
  {
    type metadata accessor for UIApplicationOpenExternalURLOptionsKey(255);
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIApplicationOpenExternalURLOptionsKey, Any>);
    }
  }
}

void type metadata accessor for (NSAttributedStringKey, Any)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (NSFileWrapper, UTType)()
{
  if (!lazy cache variable for type metadata for (NSFileWrapper, UTType))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
    type metadata accessor for UTType();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSFileWrapper, UTType));
    }
  }
}

void type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NSFileWrapper, UTType>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
    type metadata accessor for UTType();
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type NSFileWrapper and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NSFileWrapper, UTType>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
    }
  }
}

void *outlined retain of (ViewIdentity, AlertStorage)(void *a1)
{
  uint64_t v2 = a1[16];
  uint64_t v7 = a1[15];
  uint64_t v8 = a1[14];
  uint64_t v3 = a1[17];
  uint64_t v4 = a1[18];
  uint64_t v5 = a1[19];
  uint64_t v12 = a1[22];
  uint64_t v13 = (void *)a1[21];
  uint64_t v10 = a1[24];
  uint64_t v11 = a1[23];
  uint64_t v9 = (void *)a1[25];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v8, v7, v2, v3, v4, v5);
  outlined copy of BoundInputsView?(v13, v12, v11, v10, v9);
  return a1;
}

void type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UInt32, ScrollViewCommitInfo>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UInt32, ScrollViewCommitInfo>);
    }
  }
}

uint64_t outlined copy of ScrollViewCommitInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a8 < 0) {
    return outlined copy of AppIntentExecutor?(a9);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>)
  {
    type metadata accessor for [AccessibilityNode](255, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>);
    }
  }
}

uint64_t outlined retain of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)(uint64_t a1)
{
  return a1;
}

void type metadata accessor for _DictionaryStorage<String, String>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, String>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, String>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, Int>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Int>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Int>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, TabItemGroup.HostCache>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, TabItemGroup.HostCache>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<Int, Int>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, Int>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, Int>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<Int, (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)>)
  {
    type metadata accessor for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)>);
    }
  }
}

void type metadata accessor for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)()
{
  if (!lazy cache variable for type metadata for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String));
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, TabEntry>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, TabEntry>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, TabEntry>);
    }
  }
}

uint64_t DividerStyleConfiguration.orientation.setter(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t (*DividerStyleConfiguration.orientation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t dispatch thunk of DividerStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_187887E84()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for DividerStyleConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187887FC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DividerStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DividerStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18788835CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        BOOL v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDivider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDivider()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DividerStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1878884A0()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

void UIKitSearchBar.updateCustomScopeBarView(_:)(uint64_t a1)
{
  uint64_t v54 = *(void *)(a1 + 24);
  uint64_t v55 = *(void *)(a1 + 8);
  double v57 = *(void **)(a1 + 32);
  uint64_t v58 = *(void *)(a1 + 16);
  uint64_t v53 = *(void *)(a1 + 40);
  uint64_t v51 = *(void **)a1;
  uint64_t v52 = *(void *)(a1 + 48);
  uint64_t v56 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  unsigned int v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarView);
  unint64_t v6 = (void *)*v5;
  uint64_t v59 = *v5;
  uint64_t v60 = v5[1];
  uint64_t v7 = v5[2];
  uint64_t v61 = v7;
  size_t v8 = (void *)v5[4];
  uint64_t v62 = v5[3];
  uint64_t v10 = v5[8];
  uint64_t v9 = v5[9];
  uint64_t v11 = v5[10];
  *unsigned int v5 = (uint64_t)v51;
  v5[1] = v55;
  v5[2] = v58;
  v5[3] = v54;
  v5[4] = (uint64_t)v57;
  v5[5] = v53;
  v5[6] = v52;
  v5[7] = v56;
  v5[8] = v2;
  v5[9] = v3;
  v5[10] = v4;
  outlined copy of BoundInputsView?(v6, v60, v7, v62, v8);
  uint64_t v50 = v4;
  uint64_t v47 = v2;
  outlined copy of BoundInputsView?(v51, v55, v58, v54, v57);
  uint64_t v40 = v11;
  uint64_t v38 = v10;
  uint64_t v39 = v9;
  uint64_t v49 = v8;
  outlined consume of BoundInputsView?(v59, v60, v61, v62, v8);
  if (v59)
  {
    uint64_t v12 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost;
    if (!v51)
    {
      uint64_t v36 = *(void **)&v48[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
      if (v36)
      {
        objc_msgSend(v36, sel_removeFromSuperview, v10, v39, v11);
        uint64_t v37 = *(void **)&v48[v12];
        *(void *)&v48[v12] = 0;
      }
      goto LABEL_14;
    }
    int v13 = v51;
    unsigned int v14 = v48;
  }
  else
  {
    if (!v51) {
      return;
    }
    int v13 = v51;
    uint64_t v12 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost;
    unsigned int v14 = v48;
    if (!*(void *)&v48[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost])
    {
      uint64_t v15 = *v5;
      if (*v5)
      {
        uint64_t v17 = v5[1];
        uint64_t v16 = v5[2];
        uint64_t v18 = v5[3];
        uint64_t v19 = (void *)v5[4];
        uint64_t v21 = v5[5];
        uint64_t v20 = v5[6];
        uint64_t v23 = v5[7];
        uint64_t v22 = v5[8];
        uint64_t v24 = v5[9];
        uint64_t v25 = v5[10];
        v63[0] = *v5;
        v63[1] = v17;
        uint64_t v44 = v17;
        uint64_t v45 = v16;
        int v64 = v16;
        uint64_t v41 = v18;
        uint64_t v65 = v18;
        uint64_t v66 = v19;
        uint64_t v67 = v21;
        int v68 = v20;
        uint64_t v69 = v23;
        uint64_t v70 = v22;
        uint64_t v71 = v24;
        uint64_t v72 = v25;
        type metadata accessor for _UIHostingView<BoundInputsView>();
        id v27 = objc_allocWithZone(v26);
        uint64_t v28 = v19;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        id v29 = v19;
        char v30 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v63);
        uint64_t v31 = (void *)((char *)v30 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v30) + 0xB8));
        swift_beginAccess();
        uint64_t v32 = *v31;
        *uint64_t v31 = 0;
        if (v32)
        {
          lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        }
        objc_msgSend(v30, sel_setHidden_, 1, v38, v39, v40);
        objc_msgSend(v48, sel_addSubview_, v30);
        outlined consume of BoundInputsView?(v15, v44, v45, v41, v28);
        uint64_t v33 = *(void **)&v48[v12];
        *(void *)&v48[v12] = v30;

        uint64_t v12 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost;
      }
    }
  }
  unint64_t v34 = *(void **)&v14[v12];
  if (v34)
  {
    uint64_t v42 = *(void **)&v14[v12];
    unint64_t v35 = (char *)v34 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v34) + 0x60);
    swift_beginAccess();
    Swift::String v46 = (void *)*((void *)v35 + 4);
    *(void *)unint64_t v35 = v13;
    *((void *)v35 + 1) = v55;
    *((_DWORD *)v35 + 4) = v58;
    *((void *)v35 + 3) = v54;
    *((void *)v35 + 4) = v57;
    *((void *)v35 + 5) = v53;
    *((_DWORD *)v35 + 12) = v52;
    *((void *)v35 + 7) = v56;
    *((void *)v35 + 8) = v47;
    *((void *)v35 + 9) = v3;
    *((void *)v35 + 10) = v50;
    outlined copy of BoundInputsView?(v13, v55, v58, v54, v57);
    outlined copy of BoundInputsView?(v13, v55, v58, v54, v57);
    outlined copy of BoundInputsView?(v13, v55, v58, v54, v57);
    id v43 = v42;
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    type metadata accessor for _UIHostingView<BoundInputsView>();
    lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    outlined consume of BoundInputsView?((uint64_t)v51, v55, v58, v54, v57);
    outlined consume of BoundInputsView?((uint64_t)v51, v55, v58, v54, v57);
    outlined consume of BoundInputsView?(v59, v60, v61, v62, v49);

    return;
  }
LABEL_14:
  outlined consume of BoundInputsView?(v59, v60, v61, v62, v49);
}

void closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (unsigned __int8 *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder;
    int v6 = v3[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder];
    if (v6 != 2 && (v6 & 1) != objc_msgSend(v3, sel_isFirstResponder))
    {
      uint64_t v7 = &selRef_becomeFirstResponder;
      if ((v6 & 1) == 0) {
        uint64_t v7 = &selRef_resignFirstResponder;
      }
      [v4 *v7];
    }
    *((unsigned char *)v4 + v5) = 2;
  }
}

void closure #2 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (unsigned __int8 *)MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder;
    int v5 = v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder];
    if (v5 != 2 && (v5 & 1) != objc_msgSend(v2, sel_isFirstResponder))
    {
      int v6 = &selRef_becomeFirstResponder;
      if ((v5 & 1) == 0) {
        int v6 = &selRef_resignFirstResponder;
      }
      [v3 *v6];
    }
    *((unsigned char *)v3 + v4) = 2;
  }
}

void UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(char a1, char a2)
{
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
  if (!v4) {
    return;
  }
  id v23 = *(id *)&v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
  if (a1)
  {
    double v5 = *MEMORY[0x1E4FB2848];
    double v6 = *(double *)(MEMORY[0x1E4FB2848] + 8);
    double v7 = *(double *)(MEMORY[0x1E4FB2848] + 24);
    if (v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] != 2)
    {
      objc_msgSend(v4, sel_intrinsicContentSize);
      double v9 = v8;
      int v10 = 1;
      uint64_t v11 = 4;
      goto LABEL_7;
    }
  }
  else
  {
    double v5 = *MEMORY[0x1E4FB2848];
    double v6 = *(double *)(MEMORY[0x1E4FB2848] + 8);
    double v7 = *(double *)(MEMORY[0x1E4FB2848] + 24);
  }
  double v9 = *(double *)(MEMORY[0x1E4FB2848] + 16);
  id v12 = v4;
  int v10 = 0;
  uint64_t v11 = 0;
LABEL_7:
  objc_msgSend(v2, sel__setOverrideContentInsets_forRectEdges_, v11, v5, v6, v9, v7);
  objc_msgSend(v2, sel_sizeToFit);
  objc_msgSend(v2, sel_layoutIfNeeded);
  id v13 = objc_msgSend(v2, sel_superview);
  objc_msgSend(v13, sel_sizeToFit);

  id v14 = objc_msgSend(v2, sel_superview);
  objc_msgSend(v14, sel_layoutIfNeeded);

  if (a2)
  {
    objc_msgSend(v23, sel_setHidden_, 0);
    uint64_t v15 = self;
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = v10;
    *(void *)(v16 + 24) = v23;
    uint64_t v28 = partial apply for closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
    uint64_t v29 = v16;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v25 = 1107296256;
    Class v26 = thunk for @escaping @callee_guaranteed () -> ();
    id v27 = &block_descriptor_7_0;
    uint64_t v17 = _Block_copy(&aBlock);
    id v18 = v23;
    swift_release();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    *(unsigned char *)(v19 + 24) = v10;
    uint64_t v28 = partial apply for closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
    uint64_t v29 = v19;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v25 = 1107296256;
    Class v26 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    id v27 = &block_descriptor_13;
    uint64_t v20 = _Block_copy(&aBlock);
    id v21 = v18;
    swift_release();
    objc_msgSend(v15, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 0, v17, v20, 0.35, 0.0);

    _Block_release(v20);
    _Block_release(v17);
  }
  else
  {
    double v22 = 0.0;
    if (v10) {
      double v22 = 1.0;
    }
    objc_msgSend(v23, sel_setAlpha_, v22);
    objc_msgSend(v23, sel_setHidden_, v10 ^ 1u);
  }
}

void closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(char a1, void *a2)
{
  if (a1) {
    double v4 = 0.7;
  }
  else {
    double v4 = 0.0;
  }
  double v5 = self;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 24) = a1;
  void v9[4] = partial apply for closure #1 in closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
  v9[5] = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_19;
  double v7 = _Block_copy(v9);
  id v8 = a2;
  swift_release();
  objc_msgSend(v5, sel_addKeyframeWithRelativeStartTime_relativeDuration_animations_, v7, v4, 0.3);
  _Block_release(v7);
}

double UIKitSearchBar.roundedScopeBarSizeThatFits(_:)(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
  if (!v9) {
    return 0.0;
  }
  id v10 = v9;
  id v11 = objc_msgSend(v2, sel_traitCollection);
  objc_msgSend(v11, sel_displayScale);
  double v13 = v12;

  double v14 = 1.0 / v13;
  objc_msgSend(v10, sel_sizeThatFits_, a1, a2);
  double v16 = v15;
  uint64_t v18 = v17;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBBEA8], v5);
  uint64_t v21 = v18;
  double v22 = v16;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v14);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v14);

  double v19 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v19;
}

id UIKitSearchBar.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder] = 2;
  double v4 = &v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarView];
  *(_OWORD *)double v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((void *)v4 + 10) = 0;
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

uint64_t sub_187889408()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)()
{
  closure #2 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(v0);
}

void partial apply for closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(uint64_t a1)
{
  closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(a1, v1);
}

uint64_t sub_187889450()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24));
}

id partial apply for closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setHidden_, (*(unsigned char *)(v0 + 24) & 1) == 0);
}

uint64_t sub_1878894B0()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  double v1 = 0.0;
  if (*(unsigned char *)(v0 + 24)) {
    double v1 = 1.0;
  }
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, v1);
}

void type metadata accessor for _UIHostingView<BoundInputsView>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<BoundInputsView>)
  {
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<BoundInputsView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  }
  return result;
}

void Scene.windowDragArea(_:)()
{
}

void static WindowDragArea.toolbarOrBackground.getter()
{
}

ValueMetadata *type metadata accessor for WindowDragArea()
{
  return &type metadata for WindowDragArea;
}

uint64_t sub_187889618(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void Scene.windowBackgroundDragBehavior(_:)()
{
}

void static WindowDragArea.automatic.getter()
{
}

uint64_t SearchScopesModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for _ViewModifier_Content();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v45 = v5;
  uint64_t v46 = v25;
  uint64_t v23 = type metadata accessor for Picker();
  unint64_t v27 = lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = &type metadata for SearchFieldConfiguration.Scopes;
  uint64_t v42 = v23;
  unint64_t v43 = v27;
  uint64_t v44 = WitnessTable;
  type metadata accessor for StaticSourceWriter();
  uint64_t v6 = v3;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  double v9 = (char *)&v23 - v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchScopeActivation.Role>);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  double v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  double v16 = (char *)&v23 - v15;
  uint64_t v32 = v4;
  uint64_t v33 = v26;
  uint64_t v34 = v5;
  uint64_t v35 = v25;
  uint64_t v17 = v28;
  uint64_t v36 = v28;
  uint64_t v18 = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (void (*)(double))partial apply for closure #1 in SearchScopesModifier.body(content:), (uint64_t)v31, v6, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, v23, v18);
  swift_getKeyPath();
  LOBYTE(v41) = *(unsigned char *)(v17 + *(int *)(a1 + 56));
  uint64_t v39 = v18;
  uint64_t v40 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v19 = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  uint64_t v20 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchScopeActivation.Role>);
  uint64_t v37 = v19;
  uint64_t v38 = v20;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v10);
}

uint64_t closure #1 in SearchScopesModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = MEMORY[0x1E4F41420];
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = MEMORY[0x1E4F41418];
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v9 = type metadata accessor for Picker();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  double v16 = (void *)type metadata accessor for SearchScopesModifier();
  SearchScopesModifier.scopePicker.getter(v16, v12);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v17 = *(void (**)(uint64_t *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t SearchScopesModifier.scopePicker.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[2];
  uint64_t v6 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v13[-v7];
  Binding.projectedValue.getter();
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v14 = v5;
  uint64_t v15 = v9;
  uint64_t v11 = a1[5];
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v2;
  return Picker.init(selection:content:label:)((uint64_t)v8, (void (*)(uint64_t))partial apply for closure #1 in SearchScopesModifier.scopePicker.getter, (uint64_t)v13, (void (*)(uint64_t))closure #2 in SearchScopesModifier.scopePicker.getter, MEMORY[0x1E4F41420], v9, a2, MEMORY[0x1E4F41418], v10, v11);
}

uint64_t key path setter for EnvironmentValues.searchScopeActivation : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1);
}

uint64_t closure #1 in SearchScopesModifier.scopePicker.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  uint64_t v12 = type metadata accessor for SearchScopesModifier();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t closure #2 in SearchScopesModifier.scopePicker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static Text.System.search.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t SearchScopesModifier.init(scope:scopes:activation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  char v9 = *a3;
  uint64_t v10 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = type metadata accessor for SearchScopesModifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 52), a2, a4);
  *(unsigned char *)(a5 + *(int *)(v11 + 56)) = v9;
  return result;
}

uint64_t View.searchScopes<A, B>(_:scopes:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v32 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a1;
  uint64_t v30 = a9;
  uint64_t v31 = a4;
  uint64_t v28 = a3;
  uint64_t v29 = a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  v33[0] = a5;
  v33[1] = a6;
  v33[2] = a8;
  v33[3] = a10;
  uint64_t v19 = type metadata accessor for SearchScopesModifier();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v26 - v22;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v27, v15, v21);
  v29(v24);
  LOBYTE(v33[0]) = 2;
  SearchScopesModifier.init(scope:scopes:activation:)((uint64_t)v18, (uint64_t)v14, (char *)v33, a6, (uint64_t)v23);
  MEMORY[0x18C113660](v23, v31, v19, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t type metadata accessor for SearchScopesModifier()
{
  return swift_getGenericMetadata();
}

void static SearchScopeActivation.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static SearchScopeActivation.onTextEntry.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static SearchScopeActivation.onSearchPresentation.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t View.searchScopes<A, B>(_:activation:_:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a8;
  uint64_t v31 = a9;
  uint64_t v32 = a5;
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v28 = a1;
  v27[1] = a10;
  v27[2] = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v27 - v18;
  v34[0] = a6;
  v34[1] = a7;
  v34[2] = a10;
  v34[3] = a11;
  uint64_t v20 = type metadata accessor for SearchScopesModifier();
  uint64_t v21 = *(void *)(v20 - 8);
  double v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v27 - v23;
  LOBYTE(a2) = *a2;
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v28, v16, v22);
  v30(v25);
  LOBYTE(v34[0]) = (_BYTE)a2;
  SearchScopesModifier.init(scope:scopes:activation:)((uint64_t)v19, (uint64_t)v15, (char *)v34, a7, (uint64_t)v24);
  MEMORY[0x18C113660](v24, v32, v20, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
}

uint64_t View.searchScopes<A, B>(_:isActive:scopes:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a8;
  uint64_t v31 = a9;
  uint64_t v32 = a5;
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  int v30 = a2;
  uint64_t v27 = a1;
  v26[1] = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v26 - v17;
  v34[0] = a6;
  v34[1] = a7;
  v34[2] = a10;
  v34[3] = a11;
  uint64_t v19 = type metadata accessor for SearchScopesModifier();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v26 - v22;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v27, v15, v21);
  v29(v24);
  LOBYTE(v34[0]) = v30;
  SearchScopesModifier.init(scope:scopes:activation:)((uint64_t)v18, (uint64_t)v14, (char *)v34, a7, (uint64_t)v23);
  MEMORY[0x18C113660](v23, v32, v19, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t SearchCustomScopeBarModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v25 = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v41 = &type metadata for EnvironmentValues.SearchCustomScopeBar;
  uint64_t v42 = v4;
  unint64_t v43 = v25;
  uint64_t v44 = v5;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v23 - v7;
  type metadata accessor for ViewInputFlagModifier<HasCustomScopeBar>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v24 = (char *)&v23 - v13;
  swift_getKeyPath();
  LOBYTE(v39) = *(unsigned char *)(v2 + 1);
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  uint64_t v39 = v41;
  char v40 = v42;
  uint64_t v30 = v4;
  uint64_t v31 = v5;
  uint64_t v32 = v2;
  uint64_t v15 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  uint64_t v37 = WitnessTable;
  uint64_t v38 = v15;
  uint64_t v16 = v23;
  uint64_t v17 = swift_getWitnessTable();
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, (void (*)(double))partial apply for closure #1 in SearchCustomScopeBarModifier.body(content:), (uint64_t)v29, v16, (uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, v4, v17, v25, v5);
  swift_release();
  uint64_t v35 = v17;
  uint64_t v36 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v18 = swift_getWitnessTable();
  unint64_t HasCustomScopeBar = lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  View.input<A>(_:)((uint64_t)&unk_1ED422818, v6, (uint64_t)&unk_1ED422818, v18, HasCustomScopeBar);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  uint64_t v33 = v18;
  uint64_t v34 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  uint64_t v20 = v24;
  static ViewBuilder.buildExpression<A>(_:)(v11);
  double v21 = *(void (**)(char *, uint64_t))(v26 + 8);
  v21(v11, v9);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v21)(v20, v9);
}

uint64_t key path setter for EnvironmentValues.searchCustomScopeBarVisibility : EnvironmentValues()
{
  return EnvironmentValues.searchCustomScopeBarVisibility.setter();
}

uint64_t EnvironmentValues.searchCustomScopeBarVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in SearchCustomScopeBarModifier.body(content:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 == 1)
  {
    uint64_t v5 = &a1[*(int *)(type metadata accessor for SearchCustomScopeBarModifier() + 40)];
    uint64_t v10 = *(void *)(a2 - 8);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 16))(a3, v5, a2);
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 - 8);
    uint64_t v7 = 1;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);

  return v8(a3, v7, 1, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomScopeBar()
{
  lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasCustomScopeBar()
{
  return PropertyList.subscript.setter();
}

uint64_t View.searchScopeBar<A>(isActive:_:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v19 = a4;
  char v8 = a1;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SearchCustomScopeBarModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - v15;
  a2(v14);
  *uint64_t v16 = v8;
  v16[1] = 0;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[*(int *)(v12 + 40)], v11, a5);
  MEMORY[0x18C113660](v16, v19, v12, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t type metadata accessor for SearchCustomScopeBarModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.searchScopeBar<A>(isActive:visibility:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void (*a3)(double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a4;
  char v10 = a1;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SearchCustomScopeBarModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v20 - v17;
  a3(v16);
  *uint64_t v18 = v10;
  v18[1] = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v18[*(int *)(v14 + 40)], v13, a5);
  MEMORY[0x18C113660](v18, v21, v14, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t getEnumTagSinglePayload for SearchScopeActivation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 3;
  }
  else {
    int v7 = -4;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchScopeActivation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18788B160);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchScopeActivation()
{
  return &type metadata for SearchScopeActivation;
}

uint64_t sub_18788B198()
{
  return swift_getWitnessTable();
}

uint64_t sub_18788B23C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for SearchCustomScopeBarModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SearchCustomScopeBarModifier(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 2) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[v5 + 2] & v6, ((unint64_t)a2 + v5 + 2) & v6);
  }
  return v3;
}

unsigned char *initializeWithTake for SearchCustomScopeBarModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *assignWithTake for SearchCustomScopeBarModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCustomScopeBarModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 2) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 2] & ~v6);
      }
      unsigned int v15 = *a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SearchCustomScopeBarModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 2) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18788B98CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 2] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for SearchScopesModifier()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchScopesModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v4 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = ((v7 + 16) & ~v7) + *(void *)(v6 + 64) + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  int v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v13 = *a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 + (v10 & (unint64_t)~v9) + 1 > 0x18)
  {
    a1 = (uint64_t *)(v13 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v24 = v4;
    uint64_t v25 = ~v9;
    int v17 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v18 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v17 = *v18;
    uint64_t v23 = ((unint64_t)v17 + v7 + 8) & ~v7;
    uint64_t v19 = ((unint64_t)v18 + v7 + 8) & ~v7;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v20(v23, v19, v5);
    unint64_t v21 = ((unint64_t)a2 + v10) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v25, v21, v24);
    *(unsigned char *)((((unint64_t)a1 + v10) & v25) + v11) = *(unsigned char *)(v21 + v11);
  }
  return a1;
}

uint64_t destroy for SearchScopesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v9 = *(uint64_t (**)(unint64_t))(v8 + 8);
  unint64_t v10 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v8 + 80) + ((v7 + 16) & ~v7)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);

  return v9(v10);
}

void *initializeWithCopy for SearchScopesModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(void *)(v8 - 8) + 16;
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v12 = ((unint64_t)v6 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v7 + v11 + 8) & ~v11;
  swift_retain();
  swift_retain();
  v9(v12, v13, v8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = ((v11 + 16) & ~v11) + *(void *)(v10 + 48) + v16;
  unint64_t v18 = ((unint64_t)a1 + v17) & ~v16;
  unint64_t v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v18, v19);
  *(unsigned char *)(*(void *)(v15 + 48) + v18) = *(unsigned char *)(*(void *)(v15 + 48) + v19);
  return a1;
}

void *assignWithCopy for SearchScopesModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((v10 + 16) & ~v10) + v11 + v14;
  unint64_t v16 = ((unint64_t)a1 + v15) & ~v14;
  unint64_t v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))(v16, v17);
  *(unsigned char *)(*(void *)(v13 + 40) + v16) = *(unsigned char *)(*(void *)(v13 + 40) + v17);
  return a1;
}

void *initializeWithTake for SearchScopesModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + v10 + 8) & ~v10, ((unint64_t)v7 + v10 + 8) & ~v10);
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((v10 + 16) & ~v10) + v11 + v14;
  unint64_t v16 = ((unint64_t)a1 + v15) & ~v14;
  unint64_t v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(v16, v17);
  *(unsigned char *)(*(void *)(v13 + 32) + v16) = *(unsigned char *)(*(void *)(v13 + 32) + v17);
  return a1;
}

void *assignWithTake for SearchScopesModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + v13;
  unint64_t v15 = ((unint64_t)a1 + v14) & ~v13;
  unint64_t v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(v15, v16);
  *(unsigned char *)(*(void *)(v12 + 24) + v15) = *(unsigned char *)(*(void *)(v12 + 24) + v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchScopesModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v11;
  int v14 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_28;
  }
  uint64_t v15 = *(void *)(*(void *)(v7 - 8) + 64) + (v13 & ~v11) + 1;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v6 < v9) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v13) & ~v11, v9, v7);
      }
      uint64_t v23 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v23 + v10 + 8) & ~v10);
      }
      unint64_t v24 = *v23;
      if (v24 >= 0xFFFFFFFF) {
        LODWORD(v24) = -1;
      }
      return (v24 + 1);
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v12 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for SearchScopesModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  size_t v15 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v16 = v15 + v13;
  size_t v17 = *(void *)(*(void *)(v9 - 8) + 64) + ((v15 + v13) & ~v13) + 1;
  BOOL v18 = a3 >= v14;
  unsigned int v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 <= 3)
    {
      unsigned int v24 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v24))
      {
        int v20 = 4;
      }
      else if (v24 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v24 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v21 = ~v14 + a2;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (*(_DWORD *)(*(void *)(v9 - 8) + 64) + ((v15 + v13) & ~v13) != -1)
      {
        int v25 = v21 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v17] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v22;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v17] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v13;
  switch(v20)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x18788C7CCLL);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= v11)
        {
          if (v8 >= a2)
          {
            uint64_t v30 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              uint64_t v32 = *(void (**)(unint64_t))(v6 + 56);
              v32(((unint64_t)v30 + v12 + 8) & ~v12);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v31 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v31 = a2 - 1;
              }
              *uint64_t v30 = v31;
            }
          }
          else
          {
            if (v15 <= 3) {
              int v27 = ~(-1 << (8 * v15));
            }
            else {
              int v27 = -1;
            }
            if (v15)
            {
              int v28 = v27 & (~v8 + a2);
              if (v15 <= 3) {
                int v29 = v15;
              }
              else {
                int v29 = 4;
              }
              bzero(a1, v15);
              switch(v29)
              {
                case 2:
                  *(_WORD *)a1 = v28;
                  break;
                case 3:
                  *(_WORD *)a1 = v28;
                  a1[2] = BYTE2(v28);
                  break;
                case 4:
                  *(_DWORD *)a1 = v28;
                  break;
                default:
                  *a1 = v28;
                  break;
              }
            }
          }
        }
        else
        {
          uint64_t v26 = *(void (**)(unint64_t))(v10 + 56);
          v26((unint64_t)&a1[v16] & v23);
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchCustomScopeBarModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchScopesModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in SearchScopesModifier.body(content:)()
{
  return partial apply for closure #1 in SearchScopesModifier.body(content:)(closure #1 in SearchScopesModifier.body(content:));
}

uint64_t sub_18788C8A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchScopeActivation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18788C8E0(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1);
}

uint64_t partial apply for closure #1 in SearchScopesModifier.scopePicker.getter()
{
  return partial apply for closure #1 in SearchScopesModifier.body(content:)((uint64_t (*)(void, void, void, void, void))closure #1 in SearchScopesModifier.scopePicker.getter);
}

uint64_t partial apply for closure #1 in SearchScopesModifier.body(content:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void type metadata accessor for ViewInputFlagModifier<HasCustomScopeBar>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomScopeBar>)
  {
    lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomScopeBar>);
    }
  }
}

uint64_t sub_18788CA3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchCustomScopeBarVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18788CA78()
{
  return EnvironmentValues.searchCustomScopeBarVisibility.setter();
}

uint64_t partial apply for closure #1 in SearchCustomScopeBarModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SearchCustomScopeBarModifier.body(content:)(*(unsigned char **)(v1 + 32), *(void *)(v1 + 16), a1);
}

void *type metadata accessor for EnvironmentValues.SearchCustomScopeBarVisibilityKey()
{
  return &unk_1ED4223C8;
}

void *type metadata accessor for HasCustomScopeBar()
{
  return &unk_1ED422818;
}

uint64_t sub_18788CACC()
{
  return swift_getWitnessTable();
}

uint64_t sub_18788CC7C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasCustomScopeBar()
{
  return &protocol witness table for HasCustomScopeBar;
}

uint64_t PlatformViewHitTestFilterGesture.Value.gestureValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t PlatformViewHitTestFilterGesture.Value.gestureValue.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v4(v1, a1, AssociatedTypeWitness);
}

uint64_t (*PlatformViewHitTestFilterGesture.Value.gestureValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

id PlatformViewHitTestFilterGesture.Value.view.getter(uint64_t a1)
{
  return *(id *)(v1 + *(int *)(a1 + 36));
}

void PlatformViewHitTestFilterGesture.Value.view.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 36);

  *(void *)(v2 + v4) = a1;
}

uint64_t (*PlatformViewHitTestFilterGesture.Value.view.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double PlatformViewHitTestFilterGesture.Value.location.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t PlatformViewHitTestFilterGesture.Value.location.setter(uint64_t result, double a2, double a3)
{
  uint64_t v4 = (double *)(v3 + *(int *)(result + 40));
  *uint64_t v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*PlatformViewHitTestFilterGesture.Value.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PlatformViewHitTestFilterGesture.Value.init(gestureValue:view:location:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for PlatformViewHitTestFilterGesture.Value();
  *(void *)(a3 + *(int *)(result + 36)) = a2;
  uint64_t v12 = (double *)(a3 + *(int *)(result + 40));
  *uint64_t v12 = a4;
  v12[1] = a5;
  return result;
}

uint64_t PlatformViewHitTestFilterGesture.init(_:filter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (void *)(a5 + *(int *)(type metadata accessor for PlatformViewHitTestFilterGesture() + 36));
  *uint64_t v10 = a2;
  v10[1] = a3;
  unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v11(a5, a1, a4);
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance PlatformViewHitTestFilterGesture<A>.GestureState@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  *a1 = result & 1;
  return result;
}

uint64_t PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v37 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v35 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v33 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventListener<HitTestableEvent>();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = type metadata accessor for PlatformViewHitTestFilterGesture.Value();
  unint64_t v30 = lazy protocol witness table accessor for type EventListener<HitTestableEvent> and conformance EventListener<A>();
  uint64_t v38 = v8;
  uint64_t v39 = v13;
  uint64_t v40 = v15;
  uint64_t v41 = v14;
  unint64_t v42 = v30;
  uint64_t v32 = MEMORY[0x1E4F416B0];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v36 = *(void *)(OpaqueTypeMetadata2 - 8);
  double v16 = MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v31 = (char *)&v27 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v3, v8, v16);
  LOBYTE(v38) = 1;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v8;
  *(void *)(v18 + 24) = v14;
  uint64_t v28 = swift_checkMetadataState();
  uint64_t v19 = swift_checkMetadataState();
  unint64_t v20 = v30;
  Gesture.combined<A, B>(with:body:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  type metadata accessor for PlatformViewHitTestFilterGesture.GestureState();
  unsigned int v21 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v33, v29, a1);
  unint64_t v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v8;
  *(void *)(v23 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, v21, a1);
  swift_getWitnessTable();
  uint64_t v38 = v8;
  uint64_t v39 = v28;
  uint64_t v40 = v19;
  uint64_t v41 = v14;
  unint64_t v42 = v20;
  swift_getOpaqueTypeConformance2();
  unsigned int v24 = v31;
  uint64_t v25 = OpaqueTypeMetadata2;
  static GestureStateProtocol.gesture<A, B>(content:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v24, v25);
}

void type metadata accessor for EventListener<HitTestableEvent>()
{
  if (!lazy cache variable for type metadata for EventListener<HitTestableEvent>)
  {
    unint64_t v0 = type metadata accessor for EventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<HitTestableEvent>);
    }
  }
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture.Value()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EventListener<HitTestableEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<HitTestableEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<HitTestableEvent> and conformance EventListener<A>)
  {
    type metadata accessor for EventListener<HitTestableEvent>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<HitTestableEvent> and conformance EventListener<A>);
  }
  return result;
}

void closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  int v8 = *(unsigned __int8 *)(a2 + 48);
  if ((v8 - 1) >= 2)
  {
    if (*(unsigned char *)(a2 + 48)) {
      goto LABEL_11;
    }
    if (v4 == 1)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = 1;
      uint64_t v12 = v5;
      uint64_t v13 = v7;
      char v14 = 0;
LABEL_10:
      outlined consume of GesturePhase<HitTestableEvent>(v9, v10, v11, v12, v13, v6, v14);
      goto LABEL_11;
    }
  }
  uint64_t v24 = *(void *)(a2 + 40);
  outlined copy of GesturePhase<HitTestableEvent>(v2, v3, v4, v5, v7, v6, v8);
  HitTestableEvent.hitTestLocation.getter();
  if (v4)
  {
    double v17 = v15;
    double v18 = v16;
    type metadata accessor for UIViewResponder();
    uint64_t v19 = swift_dynamicCastClass();
    if (v19)
    {
      unint64_t v20 = (void *)MEMORY[0x18C119DF0](v19 + 48);
      if (v20)
      {
        id v21 = v20;
        objc_msgSend(v21, sel_convertPoint_fromView_, 0, v17, v18);
        outlined consume of GesturePhase<HitTestableEvent>(v2, v3, v4, v5, v7, v24, v8);

        MEMORY[0x1F4188790](v22);
        swift_getAssociatedTypeWitness();
        type metadata accessor for GesturePhase();
        type metadata accessor for PlatformViewHitTestFilterGesture.Value();
        id v23 = v21;
        GesturePhase.map<A>(_:)();

        return;
      }
    }
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    uint64_t v13 = v7;
    uint64_t v6 = v24;
    char v14 = v8;
    goto LABEL_10;
  }
LABEL_11:
  type metadata accessor for PlatformViewHitTestFilterGesture.Value();
  type metadata accessor for GesturePhase();

  swift_storeEnumTagMultiPayload();
}

uint64_t sub_18788DA08()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture.GestureState()
{
  return __swift_instantiateGenericMetadata();
}

id closure #1 in closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double v15 = (void *)a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&v14 - v9, a1, v8);
  PlatformViewHitTestFilterGesture.Value.init(gestureValue:view:location:)((uint64_t)v10, (uint64_t)v15, a4, *a3, a3[1]);
  uint64_t v12 = v15;

  return v12;
}

uint64_t closure #2 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v8 = type metadata accessor for PlatformViewHitTestFilterGesture.Value();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  double v16 = (char *)&v25 - v15;
  uint64_t v28 = a1;
  if (*a1) {
    goto LABEL_7;
  }
  uint64_t v27 = a5;
  type metadata accessor for GesturePhase();
  uint64_t v26 = a2;
  GesturePhase.unwrapped.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
    a2 = v26;
    a5 = v27;
LABEL_7:
    uint64_t v23 = type metadata accessor for GesturePhase();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a5, a2, v23);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v8);
  double v17 = *(uint64_t (**)(double, double))(v30
                                                 + *(int *)(type metadata accessor for PlatformViewHitTestFilterGesture()
                                                          + 36));
  double v18 = (double *)&v16[*(int *)(v8 + 40)];
  double v19 = *v18;
  double v20 = v18[1];
  id v21 = *(id *)&v16[*(int *)(v8 + 36)];
  char v22 = v17(v19, v20);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v8);
  if (v22)
  {
    *uint64_t v28 = 1;
    goto LABEL_6;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_18788DE0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for PlatformViewHitTestFilterGesture() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(type metadata accessor for PlatformViewHitTestFilterGesture() - 8);
  uint64_t v9 = v3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return closure #2 in PlatformViewHitTestFilterGesture.internalBody.getter(a1, a2, v9, v7, a3);
}

uint64_t base witness table accessor for PrimitiveGesture in PlatformViewHitTestFilterGesture<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in PlatformViewHitTestFilterGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance PlatformViewHitTestFilterGesture<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100198](a1, a2, a3, WitnessTable);
}

void protocol witness for Gesture.body.getter in conformance PlatformViewHitTestFilterGesture<A>()
{
}

uint64_t base witness table accessor for Gesture in PlatformViewHitTestFilterGesture<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for PlatformViewHitTestFilterGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18788E22CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for PlatformViewHitTestFilterGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18788E420);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          double v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *double v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for PlatformViewHitTestFilterGesture.Value()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformViewHitTestFilterGesture.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v12 = *v11;
    *unint64_t v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    id v13 = v12;
  }
  return a1;
}

void destroy for PlatformViewHitTestFilterGesture.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void **)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v10 = v9;
  return a1;
}

uint64_t assignWithCopy for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void **)v8;
  v8 += 15;
  id v10 = *v7;
  *int v7 = v9;
  id v11 = v9;

  int v12 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v12 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v12[1] = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t initializeWithTake for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void **)v8;
  v8 += 15;
  id v10 = *v7;
  *int v7 = v9;

  id v11 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *id v11 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11[1] = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewHitTestFilterGesture.Value(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18788EB54);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    unint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for PlatformViewHitTestFilterGesture.Value(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v9 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v13)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v10) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = (a2 - 1);
              }
              *unint64_t v18 = v19;
            }
            else
            {
              unint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v17(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v11 = a3 - v9 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v16 = ~v9 + a2;
    bzero(a1, v10);
    *a1 = v16;
  }
  switch(v13)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v15;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v15;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18788ED7CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = v15;
      break;
    default:
      return;
  }
}

uint64_t sub_18788EDA4()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for PlatformViewHitTestFilterGesture.GestureState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18788EFCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t outlined copy of GesturePhase<HitTestableEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1) {
    return swift_retain();
  }
  if (!a7) {
    return outlined copy of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined copy of HitTestableEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of GesturePhase<HitTestableEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1) {
    return swift_release();
  }
  if (!a7) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined consume of HitTestableEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_release();
  }
  return result;
}

id partial apply for closure #1 in closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(a1, *(void *)(v2 + 32), *(double **)(v2 + 40), a2);
}

void View.pointerVisibility(_:)()
{
}

uint64_t sub_18788F08C()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for PointerVisibilityModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18788F1BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PointerVisibilityModifier()
{
  return &unk_1ED447F00;
}

_UNKNOWN **base witness table accessor for ViewModifier in PointerVisibilityModifier()
{
  return &protocol witness table for PointerVisibilityModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance PointerVisibilityModifier()
{
}

void View.pointer(_:)()
{
}

uint64_t TabView.init<A>(selection:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a7;
  v24[1] = a3;
  MEMORY[0x1F4188790](a1);
  int v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v17(a8, 1, 1, v15);
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a8, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a8, a1, v15);
  uint64_t v19 = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v17)(a8, 0, 1, v15);
  v25(v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = v26;
  uint64_t v20 = type metadata accessor for TabContentBuilder.Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = a4;
  uint64_t v28 = v20;
  uint64_t v29 = a6;
  uint64_t v30 = WitnessTable;
  uint64_t v22 = type metadata accessor for TabView();
  return PickerBuilder.Content.init(_:)((uint64_t)v14, a5, a8 + *(int *)(v22 + 52));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TabView<A, B>.TransformEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for TabView<A, B>.TransformEnvironment);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TabView<A, B>.TransformEnvironment()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t TabView<>.init(content:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  memset(v5, 0, sizeof(v5));
  return TabView.init(selection:content:)((uint64_t)v5, a1, MEMORY[0x1E4FBB550], a2, MEMORY[0x1E4FBB560], a3, a4);
}

uint64_t TabView.init<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  unsigned int v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a4 = 0;
  a4[1] = 0;
  v10(v7);
  uint64_t v11 = MEMORY[0x1E4FBC248];
  uint64_t v17 = MEMORY[0x1E4FBC248];
  uint64_t v18 = a2;
  uint64_t v12 = MEMORY[0x1E4FBC258];
  uint64_t v19 = MEMORY[0x1E4FBC258];
  uint64_t v20 = a3;
  uint64_t v13 = type metadata accessor for TabContentBuilder.Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = v11;
  uint64_t v18 = v13;
  uint64_t v19 = v12;
  uint64_t v20 = WitnessTable;
  uint64_t v15 = type metadata accessor for TabView();
  return PickerBuilder.Content.init(_:)((uint64_t)v9, a2, (uint64_t)a4 + *(int *)(v15 + 52));
}

uint64_t getEnumTagSinglePayload for TabView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v12;
  int v15 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v16 = (v14 & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      if (v7 >= v10)
      {
        uint64_t v26 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v28 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v26 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v27 = *v26;
          if (v27 >= 0xFFFFFFFF) {
            LODWORD(v27) = -1;
          }
          unsigned int v28 = v27 + 1;
        }
        if (v28 >= 2) {
          return v28 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v24 = ((unint64_t)a1 + v14) & ~v12;
        uint64_t v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
        return v25(v24, v10, v8);
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v13 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for TabView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  unsigned int v13 = v8 - 1;
  if (v10 <= v8 - 1) {
    unsigned int v14 = v8 - 1;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  size_t v15 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v16 = v15 + v12;
  size_t v17 = ((v15 + v12) & ~v12) + *(void *)(v9 + 64);
  BOOL v18 = a3 >= v14;
  unsigned int v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 <= 3)
    {
      unsigned int v24 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v24))
      {
        int v20 = 4;
      }
      else if (v24 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v24 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v21 = ~v14 + a2;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (v17)
      {
        int v25 = v21 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v17] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v22;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v17] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v12;
  switch(v20)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x18788FCC8);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v13 >= v10)
        {
          if (v13 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v33 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v36 = a2 + 1;
                  v35(((unint64_t)v33 + v11 + 8) & ~v11, v36);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v34 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v34 = a2;
                  }
                  *uint64_t v33 = v34;
                }
              }
            }
            else
            {
              if (v15 <= 3) {
                int v31 = ~(-1 << (8 * v15));
              }
              else {
                int v31 = -1;
              }
              if (v15)
              {
                int v29 = v31 & (a2 - v8);
                if (v15 <= 3) {
                  int v32 = v15;
                }
                else {
                  int v32 = 4;
                }
                bzero(a1, v15);
                switch(v32)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)a1 = v29;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)a1 = v29;
                    a1[2] = BYTE2(v29);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)a1 = v29;
                    break;
                  default:
LABEL_52:
                    *a1 = v29;
                    break;
                }
              }
            }
          }
          else
          {
            if (v15 <= 3) {
              int v28 = ~(-1 << (8 * v15));
            }
            else {
              int v28 = -1;
            }
            if (v15)
            {
              int v29 = v28 & (a2 - v8);
              if (v15 <= 3) {
                int v30 = v15;
              }
              else {
                int v30 = 4;
              }
              bzero(a1, v15);
              switch(v30)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v26 = (unint64_t)&a1[v16] & v23;
          unint64_t v27 = *(void (**)(unint64_t))(v9 + 56);
          v27(v26);
        }
      }
      return;
  }
}

uint64_t sub_18788FD10()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in TabView<A, B>.TransformEnvironment()
{
  return &protocol witness table for TabView<A, B>.TransformEnvironment;
}

uint64_t SymbolEffect.speed(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  int v6 = *(_DWORD *)(v2 + 32);
  char v7 = *(unsigned char *)(v2 + 36);
  int v8 = *(_DWORD *)(v2 + 40);
  char v9 = *(unsigned char *)(v2 + 44);
  *(void *)a1 = *(void *)v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int16 v10 = *(_WORD *)(v2 + 24);
  *(_WORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 36) = v7;
  float v11 = a2;
  *(_DWORD *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 44) = v9;
  *(float *)(a1 + 28) = v11;
  return outlined copy of _SymbolEffect.Storage(v3, v4, v5, v10);
}

uint64_t outlined copy of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u) {
    return outlined copy of _SymbolEffect.Trigger?(result);
  }
  return result;
}

uint64_t outlined copy of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0) {
    return outlined copy of _SymbolEffect.Trigger(result);
  }
  return result;
}

uint64_t outlined copy of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t SymbolEffect.repeatCount(_:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  int v7 = *(_DWORD *)(v3 + 28);
  int v8 = *(_DWORD *)(v3 + 40);
  char v9 = *(unsigned char *)(v3 + 44);
  float v10 = a1;
  float v11 = v10;
  if (a2) {
    float v11 = 0.0;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v6;
  unsigned __int16 v12 = *(_WORD *)(v3 + 24);
  *(_WORD *)(a3 + 24) = v12;
  *(_DWORD *)(a3 + 28) = v7;
  *(float *)(a3 + 32) = v11;
  *(unsigned char *)(a3 + 36) = a2 & 1;
  *(_DWORD *)(a3 + 40) = v8;
  *(unsigned char *)(a3 + 44) = v9;
  return outlined copy of _SymbolEffect.Storage(v4, v5, v6, v12);
}

uint64_t SymbolEffect.repeatDelay(_:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  int v7 = *(_DWORD *)(v3 + 28);
  int v8 = *(_DWORD *)(v3 + 32);
  char v9 = *(unsigned char *)(v3 + 36);
  float v10 = a1;
  float v11 = v10;
  if (a2) {
    float v11 = 0.0;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v6;
  unsigned __int16 v12 = *(_WORD *)(v3 + 24);
  *(_WORD *)(a3 + 24) = v12;
  *(_DWORD *)(a3 + 28) = v7;
  *(_DWORD *)(a3 + 32) = v8;
  *(unsigned char *)(a3 + 36) = v9;
  *(float *)(a3 + 40) = v11;
  *(unsigned char *)(a3 + 44) = a2 & 1;
  return outlined copy of _SymbolEffect.Storage(v4, v5, v6, v12);
}

void static SymbolEffect.PulseConfiguration.fast.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xF000000000000006;
  *(unsigned char *)(a1 + 8) = 1;
}

void static SymbolEffect.PulseConfiguration.byLayer.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xF000000000000006;
  *(unsigned char *)(a1 + 8) = 1;
}

void static SymbolEffect.PulseConfiguration.wholeSymbol.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xF000000000000006;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t SymbolEffect.PulseConfiguration.byLayer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t SymbolEffect.PulseConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = 0;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

BOOL static SymbolEffect.PulseConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    uint64_t v9 = *(void *)a1;
    if ((~v4 & 0xF000000000000006) != 0)
    {
      uint64_t v8 = v4;
      outlined copy of _SymbolEffect.Trigger(v2);
      outlined copy of _SymbolEffect.Trigger(v2);
      char v7 = MEMORY[0x18C10E400](&v9, &v8);
      outlined consume of _SymbolEffect.Trigger(v9);
      outlined consume of _SymbolEffect.Trigger?(v2);
      return (v7 & 1) != 0 && ((v3 ^ v5) & 1) == 0;
    }
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_7:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  if ((~v4 & 0xF000000000000006) != 0) {
    goto LABEL_7;
  }
  return v3 == v5;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.PulseConfiguration(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  char v9 = v2;
  uint64_t v6 = v3;
  char v7 = v4;
  return specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v6) & 1;
}

uint64_t static SymbolEffect.pulse(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

double static SymbolEffect.pulse.getter@<D0>(uint64_t a1@<X8>)
{
  double result = -3.10503618e231;
  *(_OWORD *)a1 = xmmword_18835EE00;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 28) = 1065353216;
  *(unsigned char *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 1;
  return result;
}

uint64_t SymbolEffect.BreatheConfiguration.onlyScale.getter()
{
  _SymbolEffect.BounceConfiguration.init()();
  unint64_t v1 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.BreatheConfiguration.flags.modify();
  if ((*v0 & 1) == 0) {
    *v0 |= 1u;
  }
  return v1(&v3, 0);
}

uint64_t static SymbolEffect.BreatheConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _SymbolEffect.BounceConfiguration.init()();
  *(unsigned char *)(a1 + 12) = 0;
  return result;
}

uint64_t SymbolEffect.BreatheConfiguration.byLayer.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(1, a1);
}

uint64_t SymbolEffect.BreatheConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(0, a1);
}

uint64_t static SymbolEffect.BreatheConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return static SymbolEffect.BreatheConfiguration.== infix(_:_:)(a1, a2, MEMORY[0x1E4F3F888]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(a1, a2, a3, a4, MEMORY[0x1E4F3F888]);
}

uint64_t static SymbolEffect.breathe(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = 0x100000000;
  if (!*(unsigned char *)(a1 + 12)) {
    uint64_t v4 = 0;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v4 | v3;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 4096;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.breathe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _SymbolEffect.BounceConfiguration.init()();
  uint64_t v3 = 0x100000000;
  if (!v6) {
    uint64_t v3 = 0;
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3 | v5;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 4096;
  *(void *)(a1 + 28) = 1065353216;
  *(unsigned char *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.BounceConfiguration.up.getter()
{
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t static SymbolEffect.BounceConfiguration.down.getter()
{
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t static SymbolEffect.BounceConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _SymbolEffect.BounceConfiguration.init()();
  *(unsigned char *)(a1 + 12) = 0;
  return result;
}

uint64_t SymbolEffect.BounceConfiguration.byLayer.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(1, a1);
}

uint64_t SymbolEffect.BounceConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(0, a1);
}

uint64_t SymbolEffect.BreatheConfiguration.byLayer.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)v2;
  int v4 = *(_DWORD *)(v2 + 8);
  *(void *)a2 = *(void *)v2;
  *(_DWORD *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 12) = a1;
  return outlined copy of _SymbolEffect.Trigger?(v3);
}

uint64_t static SymbolEffect.BounceConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return static SymbolEffect.BreatheConfiguration.== infix(_:_:)(a1, a2, MEMORY[0x1E4F3F878]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BounceConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(a1, a2, a3, a4, MEMORY[0x1E4F3F878]);
}

uint64_t static SymbolEffect.bounce<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static SymbolEffect.bounce<A>(_:value:)(a1, 0x2000, a2);
}

uint64_t static SymbolEffect.bounce(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = 0x100000000;
  if (!*(unsigned char *)(a1 + 12)) {
    uint64_t v4 = 0;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v4 | v3;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0x2000;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.WiggleConfiguration.linear(angle:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t result = _SymbolEffect.WiggleConfiguration.init()();
  *(double *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t static SymbolEffect.WiggleConfiguration.rotational.getter()
{
  return _SymbolEffect.WiggleConfiguration.flags.setter();
}

uint64_t SymbolEffect.WiggleConfiguration.continuous(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  char v5 = *((unsigned char *)v2 + 16);
  int v6 = *((_DWORD *)v2 + 5);
  char v7 = *((unsigned char *)v2 + 24);
  char v8 = *((unsigned char *)v2 + 25);
  long long v9 = *v2;
  *(_OWORD *)a2 = *v2;
  *(unsigned char *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  *(unsigned char *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 25) = v8;
  outlined copy of _SymbolEffect.Trigger?(v9);
  float v11 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.WiggleConfiguration.flags.modify();
  if (a1) {
    int v12 = 256;
  }
  else {
    int v12 = 0;
  }
  *float v10 = *v10 & 0xFFFFFEFF | v12;
  return v11(&v14, 0);
}

uint64_t SymbolEffect.WiggleConfiguration.byLayer(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  char v3 = *((unsigned char *)v2 + 16);
  int v4 = *((_DWORD *)v2 + 5);
  char v5 = *((unsigned char *)v2 + 25);
  long long v6 = *v2;
  *(_OWORD *)a2 = *v2;
  *(unsigned char *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  *(unsigned char *)(a2 + 25) = v5;
  *(unsigned char *)(a2 + 24) = a1;
  return outlined copy of _SymbolEffect.Trigger?(v6);
}

uint64_t static SymbolEffect.WiggleConfiguration.== infix(_:_:)(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  int v3 = *((_DWORD *)a1 + 5);
  char v4 = *((unsigned char *)a1 + 24);
  char v5 = *((unsigned char *)a1 + 25);
  char v6 = *((unsigned char *)a2 + 16);
  int v7 = *((_DWORD *)a2 + 5);
  char v8 = *((unsigned char *)a2 + 24);
  char v9 = *((unsigned char *)a2 + 25);
  long long v16 = *a1;
  char v17 = v2;
  int v18 = v3;
  char v19 = v4;
  char v20 = v5;
  long long v11 = *a2;
  char v12 = v6;
  int v13 = v7;
  char v14 = v8;
  char v15 = v9;
  return MEMORY[0x18C10E2F0](&v16, &v11) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.WiggleConfiguration(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  int v3 = *((_DWORD *)a1 + 5);
  char v4 = *((unsigned char *)a1 + 24);
  char v5 = *((unsigned char *)a1 + 25);
  char v6 = *((unsigned char *)a2 + 16);
  int v7 = *((_DWORD *)a2 + 5);
  char v8 = *((unsigned char *)a2 + 24);
  char v9 = *((unsigned char *)a2 + 25);
  long long v16 = *a1;
  char v17 = v2;
  int v18 = v3;
  char v19 = v4;
  char v20 = v5;
  long long v11 = *a2;
  char v12 = v6;
  int v13 = v7;
  char v14 = v8;
  char v15 = v9;
  return MEMORY[0x18C10E2F0](&v16, &v11) & 1;
}

uint64_t static SymbolEffect.wiggle(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2 = *((unsigned __int8 *)a1 + 24);
  unint64_t v3 = *((unsigned __int8 *)a1 + 16) | ((unint64_t)*((unsigned int *)a1 + 5) << 32);
  if (*((unsigned char *)a1 + 25)) {
    __int16 v4 = 256;
  }
  else {
    __int16 v4 = 0;
  }
  long long v5 = *a1;
  *(_OWORD *)a2 = *a1;
  *(void *)(a2 + 16) = v3;
  *(_WORD *)(a2 + 24) = v4 | v2 | 0x3000;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v5);
}

uint64_t static SymbolEffect.wiggle<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 16);
  __int16 v8 = *(unsigned __int8 *)(v5 + 24);
  int v9 = *(unsigned __int8 *)(v5 + 25);
  uint64_t v10 = *(unsigned int *)(v5 + 20);
  (*(void (**)(char *, double))(v11 + 16))((char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyEquatable.init<A>(_:)();
  if (v9) {
    __int16 v13 = 256;
  }
  else {
    __int16 v13 = 0;
  }
  *(void *)a2 = v14[1];
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7 | (v10 << 32);
  *(_WORD *)(a2 + 24) = v13 | v8 | 0x3000;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.RotateConfiguration.clockwise.getter()
{
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t static SymbolEffect.RotateConfiguration.counterClockwise.getter()
{
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t SymbolEffect.RotateConfiguration.continuous(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)v2;
  int v6 = *(_DWORD *)(v2 + 8);
  char v7 = *(unsigned char *)(v2 + 12);
  *(void *)a2 = *(void *)v2;
  *(_DWORD *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 12) = v7;
  outlined copy of _SymbolEffect.Trigger?(v5);
  int v9 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.RotateConfiguration.flags.modify();
  if (a1) {
    int v10 = 16;
  }
  else {
    int v10 = 0;
  }
  *__int16 v8 = *v8 & 0xFFFFFFEF | v10;
  return v9(&v12, 0);
}

uint64_t SymbolEffect.RotateConfiguration.byLayer(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)v2;
  int v4 = *(_DWORD *)(v2 + 8);
  *(void *)a2 = *(void *)v2;
  *(_DWORD *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 12) = a1;
  return outlined copy of _SymbolEffect.Trigger?(v3);
}

uint64_t static SymbolEffect.RotateConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return static SymbolEffect.BreatheConfiguration.== infix(_:_:)(a1, a2, MEMORY[0x1E4F3F880]);
}

uint64_t static SymbolEffect.BreatheConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, uint64_t *))
{
  int v3 = *((_DWORD *)a1 + 2);
  char v4 = *((unsigned char *)a1 + 12);
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  char v7 = *((unsigned char *)a2 + 12);
  uint64_t v12 = *a1;
  int v13 = v3;
  char v14 = v4;
  uint64_t v9 = v5;
  int v10 = v6;
  char v11 = v7;
  return a3(&v12, &v9) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.RotateConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(a1, a2, a3, a4, MEMORY[0x1E4F3F880]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  int v5 = *((_DWORD *)a1 + 2);
  char v6 = *((unsigned char *)a1 + 12);
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  char v9 = *((unsigned char *)a2 + 12);
  uint64_t v14 = *a1;
  int v15 = v5;
  char v16 = v6;
  uint64_t v11 = v7;
  int v12 = v8;
  char v13 = v9;
  return a5(&v14, &v11) & 1;
}

uint64_t static SymbolEffect.rotate(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = 0x100000000;
  if (!*(unsigned char *)(a1 + 12)) {
    uint64_t v4 = 0;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v4 | v3;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0x4000;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.rotate<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static SymbolEffect.bounce<A>(_:value:)(a1, 0x4000, a2);
}

uint64_t static SymbolEffect.bounce<A>(_:value:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W4>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = *(unsigned int *)(v7 + 8);
  int v9 = *(unsigned __int8 *)(v7 + 12);
  (*(void (**)(char *, double))(v10 + 16))((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t result = AnyEquatable.init<A>(_:)();
  uint64_t v12 = 0x100000000;
  if (!v9) {
    uint64_t v12 = 0;
  }
  *(void *)a3 = v13[1];
  *(void *)(a3 + 8) = v12 | v8;
  *(void *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 24) = a2;
  *(void *)(a3 + 28) = 1065353216;
  *(unsigned char *)(a3 + 36) = 1;
  *(_DWORD *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.VariableColorConfiguration.sequential.getter()
{
  return _SymbolEffect.VariableColorConfiguration.flags.setter();
}

uint64_t SymbolEffect.VariableColorConfiguration.reversing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  uint64_t v6 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 8) == 0) {
    *v5 |= 8u;
  }
  return v6(&v8, 0);
}

uint64_t SymbolEffect.VariableColorConfiguration.nonReversing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  uint64_t v6 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 8) != 0) {
    *v5 &= ~8u;
  }
  return v6(&v8, 0);
}

uint64_t SymbolEffect.VariableColorConfiguration.hideOn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  uint64_t v6 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 2) == 0) {
    *v5 |= 2u;
  }
  return v6(&v8, 0);
}

uint64_t SymbolEffect.VariableColorConfiguration.hideOff.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  uint64_t v6 = (uint64_t (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 2) != 0) {
    *v5 &= ~2u;
  }
  return v6(&v8, 0);
}

uint64_t static SymbolEffect.VariableColorConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a1;
  int v9 = v2;
  uint64_t v6 = v3;
  int v7 = v4;
  return MEMORY[0x18C10E390](&v8, &v6) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.VariableColorConfiguration(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a1;
  int v9 = v2;
  uint64_t v6 = v3;
  int v7 = v4;
  return MEMORY[0x18C10E390](&v8, &v6) & 1;
}

uint64_t static SymbolEffect.variableColor(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 20480;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.ScaleConfiguration.none.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _SymbolEffect.ScaleConfiguration.init()();
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  return result;
}

uint64_t static SymbolEffect.ScaleConfiguration.up.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ScaleConfiguration.up.getter(a1);
}

{
  uint64_t result;
  int v3;
  char v4;

  _SymbolEffect.ScaleConfiguration.init()();
  uint64_t result = _SymbolEffect.ScaleConfiguration.level.setter();
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  return result;
}

uint64_t static SymbolEffect.ScaleConfiguration.down.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ScaleConfiguration.up.getter(a1);
}

void SymbolEffect.ScaleConfiguration.byLayer.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = *v1;
  *(unsigned char *)(a1 + 4) = 1;
}

void SymbolEffect.ScaleConfiguration.wholeSymbol.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = *v1;
  *(unsigned char *)(a1 + 4) = 0;
}

uint64_t static SymbolEffect.ScaleConfiguration.== infix(_:_:)()
{
  return static _SymbolEffect.ScaleConfiguration.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.ScaleConfiguration()
{
  return static _SymbolEffect.ScaleConfiguration.== infix(_:_:)() & 1;
}

unsigned int *static SymbolEffect.scale(_:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = 0x100000000;
  if (!*((unsigned char *)result + 4)) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3 | v2;
  *(_WORD *)(a2 + 24) = 24576;
  *(void *)(a2 + 28) = 1065353216;
  *(unsigned char *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.HiddenConfiguration.down.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.HiddenConfiguration.down.getter(a1);
}

{
  uint64_t result;
  int v3;
  char v4;
  char v5;

  _SymbolEffect.HiddenConfiguration.init()();
  uint64_t result = _SymbolEffect.HiddenConfiguration.flags.setter();
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  *(unsigned char *)(a1 + 5) = v5;
  return result;
}

uint64_t static SymbolEffect.HiddenConfiguration.up.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.HiddenConfiguration.down.getter(a1);
}

uint64_t static SymbolEffect.HiddenConfiguration.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _SymbolEffect.HiddenConfiguration.init()();
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  *(unsigned char *)(a1 + 5) = v5;
  return result;
}

uint64_t static SymbolEffect.HiddenConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _SymbolEffect.HiddenConfiguration.init()();
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 5) = v4;
  return result;
}

void SymbolEffect.HiddenConfiguration.byLayer.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 5);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = 1;
  *(unsigned char *)(a1 + 5) = v2;
}

void SymbolEffect.HiddenConfiguration.wholeSymbol.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 5);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 5) = v2;
}

uint64_t static SymbolEffect.HiddenConfiguration.== infix(_:_:)()
{
  return static _SymbolEffect.HiddenConfiguration.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.HiddenConfiguration()
{
  return static _SymbolEffect.HiddenConfiguration.== infix(_:_:)() & 1;
}

uint64_t static SymbolEffect.hidden(_:_:)@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = 0x100000000;
  if (!*((unsigned char *)a2 + 4)) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000000000;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if ((result & 1) == 0) {
    uint64_t v5 = 0;
  }
  *(void *)a3 = v5 | v3 | v4;
  *(_WORD *)(a3 + 24) = 28672;
  *(void *)(a3 + 28) = 1065353216;
  *(unsigned char *)(a3 + 36) = 1;
  *(_DWORD *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 44) = 1;
  return result;
}

float static SymbolEffect.ReplaceConfiguration.up.getter@<S0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ReplaceConfiguration.up.getter(a1);
}

{
  float result;
  int v3;
  char v4;
  float v5;

  _SymbolEffect.ReplaceConfiguration.init()();
  _SymbolEffect.ReplaceConfiguration.flags.setter();
  uint64_t result = v5;
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  *(float *)(a1 + 8) = v5;
  return result;
}

float static SymbolEffect.ReplaceConfiguration.down.getter@<S0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ReplaceConfiguration.up.getter(a1);
}

float static SymbolEffect.ReplaceConfiguration.offUp.getter@<S0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ReplaceConfiguration.up.getter(a1);
}

float static SymbolEffect.ReplaceConfiguration.default.getter@<S0>(uint64_t a1@<X8>)
{
  _SymbolEffect.ReplaceConfiguration.init()();
  float result = v5;
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  *(float *)(a1 + 8) = v5;
  return result;
}

float static SymbolEffect.ReplaceConfiguration.wholeSymbol.getter@<S0>(uint64_t a1@<X8>)
{
  _SymbolEffect.ReplaceConfiguration.init()();
  float result = v4;
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = v4;
  return result;
}

float SymbolEffect.ReplaceConfiguration.byLayer.getter@<S0>(uint64_t a1@<X8>)
{
  float result = *(float *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = 1;
  *(float *)(a1 + 8) = result;
  return result;
}

float SymbolEffect.ReplaceConfiguration.wholeSymbol.getter@<S0>(uint64_t a1@<X8>)
{
  float result = *(float *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = result;
  return result;
}

float SymbolEffect.ReplaceConfiguration.noSlashes.getter@<S0>(uint64_t a1@<X8>)
{
  char v3 = *((unsigned char *)v1 + 4);
  float v4 = *((float *)v1 + 2);
  int v10 = *v1;
  char v11 = v3;
  float v12 = v4;
  uint64_t v6 = (void (*)(uint64_t *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v5 & 0x20) == 0) {
    *v5 |= 0x20u;
  }
  v6(&v9, 0);
  char v7 = v11;
  float result = v12;
  *(_DWORD *)a1 = v10;
  *(unsigned char *)(a1 + 4) = v7;
  *(float *)(a1 + 8) = result;
  return result;
}

float SymbolEffect.ReplaceConfiguration.noBadges.getter@<S0>(uint64_t a1@<X8>)
{
  char v3 = *((unsigned char *)v1 + 4);
  float v4 = *((float *)v1 + 2);
  int v10 = *v1;
  char v11 = v3;
  float v12 = v4;
  uint64_t v6 = (void (*)(uint64_t *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v5 & 0x40) == 0) {
    *v5 |= 0x40u;
  }
  v6(&v9, 0);
  char v7 = v11;
  float result = v12;
  *(_DWORD *)a1 = v10;
  *(unsigned char *)(a1 + 4) = v7;
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t static SymbolEffect.ReplaceConfiguration.== infix(_:_:)()
{
  return static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.ReplaceConfiguration()
{
  return static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)() & 1;
}

__n128 _SymbolEffectModifier.init(effect:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 44);
  __n128 result = *(__n128 *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 32) = v2;
  *(unsigned char *)(a2 + 44) = v4;
  *(_DWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t _SymbolEffectModifier.effect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 44);
  int v8 = *(_DWORD *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 44) = v7;
  *(_DWORD *)(a1 + 40) = v8;
  return outlined copy of SymbolEffect?(v2, v3, v4, v5);
}

__n128 _SymbolEffectModifier.effect.setter(long long *a1)
{
  __n128 v6 = (__n128)a1[1];
  long long v7 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  int v3 = *((_DWORD *)a1 + 10);
  char v4 = *((unsigned char *)a1 + 44);
  outlined consume of SymbolEffect?(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
  __n128 result = v6;
  *(_OWORD *)uint64_t v1 = v7;
  *(__n128 *)(v1 + 16) = v6;
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*_SymbolEffectModifier.effect.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _SymbolEffectModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectModifier.EffectEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v8 = *Value;
  uint64_t v5 = AGGraphGetValue();
  if ((~*(void *)(v5 + 16) & 0xFFFFFFFE) == 0 && (*(void *)(v5 + 24) & 0xFEFELL) == 2)
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t result = EnvironmentValues.appendSymbolEffect(_:for:)();
    uint64_t v3 = v8;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _SymbolEffectModifier.EffectEnvironment@<X0>(void *a1@<X8>)
{
  return _SymbolEffectModifier.EffectEnvironment.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _SymbolEffectModifier.EffectEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SymbolEffectModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SymbolEffectModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _SymbolEffectModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SymbolEffectModifier()
{
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectsModifier.effects.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_SymbolEffectsModifier.effects.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _SymbolEffectsModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectsModifier.EffectsEnvironment.value.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v5 = Value[1];
  uint64_t v28 = *Value;
  uint64_t v29 = v5;
  uint64_t v6 = AGGraphGetValue();
  uint64_t v7 = *(void *)v6;
  uint64_t v22 = *(void *)(*(void *)v6 + 16);
  if (v22)
  {
    char v20 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = EnvironmentValues.symbolEffects.getter();
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v21 = v7;
    do
    {
      uint64_t v11 = *(void *)(v7 + v9 + 32);
      uint64_t v12 = *(void *)(v7 + v9 + 40);
      uint64_t v13 = *(void *)(v7 + v9 + 48);
      unsigned __int16 v14 = *(_WORD *)(v7 + v9 + 56);
      int v15 = *(_DWORD *)(v7 + v9 + 60);
      char v26 = *(unsigned char *)(v7 + v9 + 68);
      int v27 = *(_DWORD *)(v7 + v9 + 64);
      char v24 = *(unsigned char *)(v7 + v9 + 76);
      int v25 = *(_DWORD *)(v7 + v9 + 72);
      outlined copy of _SymbolEffect.Storage(v11, v12, v13, v14);
      outlined copy of _SymbolEffect.Storage(v11, v12, v13, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      }
      unint64_t v17 = *(void *)(v8 + 16);
      unint64_t v16 = *(void *)(v8 + 24);
      if (v17 >= v16 >> 1) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v8);
      }
      *(void *)(v8 + 16) = v17 + 1;
      uint64_t v18 = v8 + (v17 << 6);
      *(void *)(v18 + 32) = a1;
      *(void *)(v18 + 40) = v10;
      *(void *)(v18 + 48) = v11;
      *(void *)(v18 + 56) = v12;
      *(void *)(v18 + 64) = v13;
      *(_WORD *)(v18 + 72) = v14;
      *(_DWORD *)(v18 + 76) = v15;
      *(_DWORD *)(v18 + 80) = v27;
      *(unsigned char *)(v18 + 84) = v26;
      *(_DWORD *)(v18 + 88) = v25;
      *(unsigned char *)(v18 + 92) = v24;
      outlined consume of _SymbolEffect.Storage(v11, v12, v13, v14);
      v9 += 48;
      ++v10;
      uint64_t v7 = v21;
    }
    while (v22 != v10);
    swift_bridgeObjectRelease();
    uint64_t result = EnvironmentValues.symbolEffects.setter();
    uint64_t v4 = v28;
    uint64_t v5 = v29;
    a2 = v20;
  }
  else
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _SymbolEffectsModifier.EffectsEnvironment@<X0>(void *a1@<X8>)
{
  return _SymbolEffectsModifier.EffectsEnvironment.value.getter(*(void *)(v1 + 8), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _SymbolEffectsModifier.EffectsEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SymbolEffectsModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SymbolEffectsModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _SymbolEffectsModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SymbolEffectsModifier()
{
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectsRemovedModifier.isEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _SymbolEffectsRemovedModifier.isEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_SymbolEffectsRemovedModifier.isEnabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _SymbolEffectsRemovedModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

uint64_t protocol witness for Rule.value.getter in conformance _SymbolEffectsRemovedModifier.EffectEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v7 = *Value;
  int v5 = *(unsigned __int8 *)AGGraphGetValue();
  swift_retain();
  uint64_t result = swift_retain();
  if (v5 == 1)
  {
    uint64_t result = EnvironmentValues.symbolEffects.setter();
    uint64_t v3 = v7;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _SymbolEffectsRemovedModifier.EffectEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SymbolEffectsRemovedModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SymbolEffectsRemovedModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _SymbolEffectsRemovedModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SymbolEffectsRemovedModifier()
{
  return _GraphInputs.environment.setter();
}

uint64_t SymbolEffect.HiddenTransition.init(config:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 4);
  char v3 = *(unsigned char *)(result + 5);
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(unsigned char *)(a2 + 4) = v2;
  *(unsigned char *)(a2 + 5) = v3;
  return result;
}

void SymbolEffect.HiddenTransition.config.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 4);
  char v3 = *(unsigned char *)(v1 + 5);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = v2;
  *(unsigned char *)(a1 + 5) = v3;
}

uint64_t SymbolEffect.HiddenTransition.config.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 4);
  char v3 = *(unsigned char *)(result + 5);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)result;
  *(unsigned char *)(v1 + 4) = v2;
  *(unsigned char *)(v1 + 5) = v3;
  return result;
}

uint64_t (*SymbolEffect.HiddenTransition.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SymbolEffect.HiddenTransition.body(content:phase:)@<D0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  uint64_t v4 = 0x100000000;
  if (!*((unsigned char *)v2 + 4)) {
    uint64_t v4 = 0;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3 | ((unint64_t)(a1 != 1) << 40) | v4;
  double result = 0.0078125;
  *(_OWORD *)(a2 + 24) = xmmword_18835EE10;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return result;
}

void static SymbolEffect.HiddenTransition.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SymbolEffect.HiddenTransition._makeContentTransition(transition:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    BYTE5(v5) = *(unsigned char *)(v1 + 5);
    LODWORD(v5) = _SymbolEffect.HiddenConfiguration.transitionFlags.getter();
    BYTE4(v5) = 1;
    ContentTransition.EffectType.init(type:arg0:arg1:)();
    default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
    default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
    ContentTransition.Effect.init(type:begin:duration:events:flags:)();
    type metadata accessor for _GraphValue<_SymbolEffectModifier>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, MEMORY[0x1E4F3FF08], MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
    *(void *)(v4 + 32) = v5;
    *(unsigned char *)(v4 + 40) = v6;
    *(_DWORD *)(v4 + 44) = v7;
    *(unsigned char *)(v4 + 48) = v8;
    *(void *)(v4 + 52) = v9;
    *(void *)(v4 + 60) = v10;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

double protocol witness for Transition.body(content:phase:) in conformance SymbolEffect.HiddenTransition@<D0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  uint64_t v4 = 0x100000000;
  if (!*((unsigned char *)v2 + 4)) {
    uint64_t v4 = 0;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3 | ((unint64_t)(a1 != 1) << 40) | v4;
  double result = 0.0078125;
  *(_OWORD *)(a2 + 24) = xmmword_18835EE10;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 1;
  return result;
}

unsigned int *static ContentTransition.symbolReplace(_:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = result[2];
  uint64_t v3 = 0x100000000;
  if (!*((unsigned char *)result + 4)) {
    uint64_t v3 = 0;
  }
  *(void *)a2 = v3 | *result;
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 13) = 2;
  return result;
}

uint64_t SymbolEffect.encode(to:)()
{
  return _SymbolEffect.encode(to:)();
}

float SymbolEffect.init(from:)@<S0>(uint64_t a1@<X8>)
{
  _SymbolEffect.init(from:)();
  if (!v1)
  {
    float result = v7;
    *(_OWORD *)a1 = v4;
    *(void *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = v6;
    *(float *)(a1 + 28) = v7;
    *(_DWORD *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 36) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 44) = v11;
  }
  return result;
}

float protocol witness for ProtobufDecodableMessage.init(from:) in conformance SymbolEffect@<S0>(uint64_t a1@<X8>)
{
  _SymbolEffect.init(from:)();
  if (!v1)
  {
    float result = v7;
    *(_OWORD *)a1 = v4;
    *(void *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = v6;
    *(float *)(a1 + 28) = v7;
    *(_DWORD *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 36) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 44) = v11;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SymbolEffect()
{
  return _SymbolEffect.encode(to:)();
}

BOOL SymbolEffect.isIndefinite.getter()
{
  if ((*(unsigned char *)(v0 + 36) & 1) == 0) {
    return (~*(_DWORD *)(v0 + 32) & 0x7F800000) == 0;
  }
  unsigned int v1 = *(unsigned __int16 *)(v0 + 24);
  if (v1 >> 12 >= 6) {
    return 1;
  }
  if ((~*(void *)v0 & 0xF000000000000006) == 0)
  {
    outlined consume of _SymbolEffect.Storage(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), v1);
    return 1;
  }
  return 0;
}

uint64_t specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if ((~*(void *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v4 & 0xF000000000000006) == 0) {
      return v3 ^ v5 ^ 1u;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a1;
  if ((~v4 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  uint64_t v8 = v4;
  outlined copy of _SymbolEffect.Trigger(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  char v6 = MEMORY[0x18C10E400](&v9, &v8);
  outlined consume of _SymbolEffect.Trigger(v9);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v6) {
    return v3 ^ v5 ^ 1u;
  }
  return 0;
}

uint64_t outlined consume of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0) {
    return outlined consume of _SymbolEffect.Trigger(result);
  }
  return result;
}

uint64_t outlined consume of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t specialized static SymbolEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned __int16 v5 = *(_WORD *)(a1 + 24);
  float v7 = *(float *)(a1 + 28);
  float v6 = *(float *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 36);
  float v9 = *(float *)(a1 + 40);
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  unsigned __int16 v13 = *(_WORD *)(a2 + 24);
  float v15 = *(float *)(a2 + 28);
  float v14 = *(float *)(a2 + 32);
  int v16 = *(unsigned __int8 *)(a2 + 36);
  float v17 = *(float *)(a2 + 40);
  char v22 = *(unsigned char *)(a2 + 44);
  char v23 = *(unsigned char *)(a1 + 44);
  v26[0] = v2;
  v26[1] = v3;
  void v26[2] = v4;
  unsigned __int16 v27 = v5;
  v24[0] = v10;
  v24[1] = v11;
  void v24[2] = v12;
  unsigned __int16 v25 = v13;
  outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
  outlined copy of _SymbolEffect.Storage(v10, v11, v12, v13);
  if ((MEMORY[0x18C10E3F0](v26, v24) & 1) == 0 || v7 != v15) {
    goto LABEL_16;
  }
  if (v8)
  {
    if (!v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v6 == v14) {
      char v18 = v16;
    }
    else {
      char v18 = 1;
    }
    if (v18) {
      goto LABEL_16;
    }
  }
  if (v23)
  {
    if ((v22 & 1) == 0)
    {
LABEL_16:
      uint64_t v19 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    char v20 = v22;
    if (v9 != v17) {
      char v20 = 1;
    }
    if (v20) {
      goto LABEL_16;
    }
  }
  uint64_t v19 = 1;
LABEL_17:
  outlined consume of _SymbolEffect.Storage(v10, v11, v12, v13);
  outlined consume of _SymbolEffect.Storage(v2, v3, v4, v5);
  return v19;
}

uint64_t outlined copy of SymbolEffect?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((~a3 & 0xFFFFFFFE) != 0 || (a4 & 0xFEFE) != 2) {
    return outlined copy of _SymbolEffect.Storage(result, a2, a3, a4);
  }
  return result;
}

uint64_t outlined consume of SymbolEffect?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((~a3 & 0xFFFFFFFE) != 0 || (a4 & 0xFEFE) != 2) {
    return outlined consume of _SymbolEffect.Storage(result, a2, a3, a4);
  }
  return result;
}

uint64_t outlined consume of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u) {
    return outlined consume of _SymbolEffect.Trigger?(result);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment);
  }
  return result;
}

uint64_t outlined consume of _Transition_ContentTransition.Result(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _SymbolEffectModifier()
{
  return &protocol witness table for _SymbolEffectModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _SymbolEffectsModifier()
{
  return &protocol witness table for _SymbolEffectsModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _SymbolEffectsRemovedModifier()
{
  return &protocol witness table for _SymbolEffectsRemovedModifier;
}

uint64_t associated type witness table accessor for Transition.Body : View in SymbolEffect.HiddenTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for SymbolEffect(uint64_t a1)
{
  return outlined consume of _SymbolEffect.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD *)(a1 + 24));
}

uint64_t initializeWithCopy for SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int16 v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)a2, v5, v6, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int16 v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)a2, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  unsigned __int16 v11 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v12;
  int v13 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v13;
  return a1;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  __int16 v5 = *(_WORD *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  unsigned __int16 v9 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 45)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (-2 * a2);
      *(_WORD *)(result + 24) = 2;
      return result;
    }
    *(unsigned char *)(result + 45) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect()
{
  return &type metadata for SymbolEffect;
}

uint64_t destroy for SymbolEffect.PulseConfiguration(uint64_t *a1)
{
  uint64_t result = *a1;
  if ((~result & 0xF000000000000006) != 0) {
    return outlined consume of _SymbolEffect.Trigger(result);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t outlined destroy of _SymbolEffect.Trigger(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.PulseConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.PulseConfiguration()
{
  return &type metadata for SymbolEffect.PulseConfiguration;
}

void *__swift_memcpy13_8(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.BreatheConfiguration()
{
  return &type metadata for SymbolEffect.BreatheConfiguration;
}

ValueMetadata *type metadata accessor for SymbolEffect.BounceConfiguration()
{
  return &type metadata for SymbolEffect.BounceConfiguration;
}

uint64_t initializeWithCopy for SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t assignWithTake for SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(void *)(a1 + 8) = a2[1];
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.WiggleConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.WiggleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.WiggleConfiguration()
{
  return &type metadata for SymbolEffect.WiggleConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.BreatheConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.BreatheConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.RotateConfiguration()
{
  return &type metadata for SymbolEffect.RotateConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.VariableColorConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3E && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 62);
  }
  uint64_t v3 = *(void *)a1 >> 58;
  int v4 = *(void *)a1 & 6 | (8 * ((v3 >> 2) & 7));
  unsigned int v5 = 62 - (v4 | (v3 >> 5));
  if (v4) {
    int v6 = v5;
  }
  else {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.VariableColorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 62;
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (32 * (a2 ^ 0x3F)) | ((a2 ^ 0x3F) >> 1);
      *(void *)uint64_t result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.VariableColorConfiguration()
{
  return &type metadata for SymbolEffect.VariableColorConfiguration;
}

ValueMetadata *type metadata accessor for SymbolEffect.ScaleConfiguration()
{
  return &type metadata for SymbolEffect.ScaleConfiguration;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.HiddenConfiguration()
{
  return &type metadata for SymbolEffect.HiddenConfiguration;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.ReplaceConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.ReplaceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.ReplaceConfiguration()
{
  return &type metadata for SymbolEffect.ReplaceConfiguration;
}

uint64_t *destroy for _SymbolEffectModifier(uint64_t *result)
{
  uint64_t v1 = result[2];
  if ((~v1 & 0xFFFFFFFE) != 0 || (result[3] & 0xFEFE) != 2) {
    return (uint64_t *)outlined consume of _SymbolEffect.Storage(*result, result[1], v1, result[3]);
  }
  return result;
}

uint64_t initializeWithCopy for _SymbolEffectModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  if ((~v4 & 0xFFFFFFFE) == 0 && (a2[3] & 0xFEFE) == 2)
  {
    long long v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 29) = *(_OWORD *)((char *)a2 + 29);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    outlined copy of _SymbolEffect.Storage(*a2, v8, v4, v5);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v4;
    *(_WORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
  }
  return a1;
}

uint64_t assignWithCopy for _SymbolEffectModifier(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 3);
  BOOL v7 = (~*((_DWORD *)a2 + 4) & 0xFFFFFFFE) == 0 && (*((void *)a2 + 3) & 0xFEFELL) == 2;
  if ((~*(_DWORD *)(a1 + 16) & 0xFFFFFFFE) == 0 && (*(void *)(a1 + 24) & 0xFEFELL) == 2)
  {
    if (v7)
    {
      long long v11 = *a2;
      long long v12 = a2[1];
      *(_OWORD *)(a1 + 29) = *(long long *)((char *)a2 + 29);
      *(_OWORD *)a1 = v11;
      *(_OWORD *)(a1 + 16) = v12;
    }
    else
    {
      uint64_t v21 = *(void *)a2;
      uint64_t v22 = *((void *)a2 + 1);
      outlined copy of _SymbolEffect.Storage(*(void *)a2, v22, v4, v5);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v4;
      *(_WORD *)(a1 + 24) = v5;
      long long v23 = *(long long *)((char *)a2 + 28);
      *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
      *(_OWORD *)(a1 + 28) = v23;
    }
  }
  else if (v7)
  {
    outlined destroy of SymbolEffect(a1);
    long long v9 = *(long long *)((char *)a2 + 29);
    long long v10 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 29) = v9;
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    uint64_t v14 = *((void *)a2 + 1);
    outlined copy of _SymbolEffect.Storage(*(void *)a2, v14, v4, v5);
    uint64_t v15 = *(void *)a1;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v4;
    unsigned __int16 v18 = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v5;
    outlined consume of _SymbolEffect.Storage(v15, v16, v17, v18);
    *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
    int v19 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
    *(_DWORD *)(a1 + 32) = v19;
    int v20 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
    *(_DWORD *)(a1 + 40) = v20;
  }
  return a1;
}

uint64_t outlined destroy of SymbolEffect(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for _SymbolEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  if ((~v4 & 0xFFFFFFFE) == 0 && (*(void *)(a1 + 24) & 0xFEFELL) == 2) {
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  if ((~v8 & 0xFFFFFFFE) == 0 && (*(void *)(a2 + 24) & 0xFEFELL) == 2)
  {
    outlined destroy of SymbolEffect(a1);
LABEL_11:
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
    return a1;
  }
  unint64_t v10 = HIDWORD(v7);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 24) = v7;
  outlined consume of _SymbolEffect.Storage(v11, v12, v4, v5);
  int v13 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffectModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 45)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unsigned int v3 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  int v4 = -2 - v3;
  if ((int)(-2 - v3) < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffectModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 45) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * ~a2;
      *(_WORD *)(result + 24) = 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffectModifier()
{
  return &type metadata for _SymbolEffectModifier;
}

ValueMetadata *type metadata accessor for _SymbolEffectsModifier()
{
  return &type metadata for _SymbolEffectsModifier;
}

unsigned char *storeEnumTagSinglePayload for _SymbolEffectsRemovedModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187893FF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffectsRemovedModifier()
{
  return &type metadata for _SymbolEffectsRemovedModifier;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.HiddenConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.HiddenConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.HiddenTransition()
{
  return &type metadata for SymbolEffect.HiddenTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>();
    lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>)
  {
    type metadata accessor for _GraphValue<_SymbolEffectModifier>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffect.HiddenTransition>, (uint64_t)&type metadata for SymbolEffect.HiddenTransition, MEMORY[0x1E4F40988]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>);
    }
  }
}

void type metadata accessor for _GraphValue<_SymbolEffectModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>;
  if (!lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>)
  {
    type metadata accessor for _GraphValue<_SymbolEffectModifier>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffect.HiddenTransition>, (uint64_t)&type metadata for SymbolEffect.HiddenTransition, MEMORY[0x1E4F40988]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>);
  }
  return result;
}

void *type metadata accessor for _SymbolEffectsRemovedModifier.EffectEnvironment()
{
  return &unk_1ED457D58;
}

void *type metadata accessor for _SymbolEffectsModifier.EffectsEnvironment()
{
  return &unk_1ED43D0B8;
}

void *type metadata accessor for _SymbolEffectModifier.EffectEnvironment()
{
  return &unk_1ED437E38;
}

uint64_t View.listRowHeightTemplate<A>(templateRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.listRowHeightTemplate<A>(templateRow:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent, (uint64_t)&type metadata for ListRowHeightTemplateContent, (void (*)(double))partial apply for closure #1 in View.listRowHeightTemplate<A>(templateRow:));
}

unint64_t lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent()
{
  unint64_t result = lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  }
  return result;
}

uint64_t View.listFirstRowHeightTemplate<A>(templateRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.listRowHeightTemplate<A>(templateRow:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent, (uint64_t)&type metadata for ListFirstRowHeightTemplateContent, (void (*)(double))partial apply for closure #1 in View.listRowHeightTemplate<A>(templateRow:));
}

uint64_t View.listRowHeightTemplate<A>(templateRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8, void (*a9)(double))
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v14 = a7();
  return View.optionalViewAlias<A, B>(_:_:)(a8, a9, (uint64_t)v16, a3, a8, a4, a5, v14, a6);
}

uint64_t partial apply for closure #1 in View.listRowHeightTemplate<A>(templateRow:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  (*(void (**)(void))(v1 + 48))();
  BOOL v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a1, 0, 1, v3);
}

unint64_t lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent()
{
  unint64_t result = lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  }
  return result;
}

uint64_t sub_187894644(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20OptionalSourceWriter33_D9F7AF928092578A4B8FA861B49E2161LLVyAA021ListRowHeightTemplateE0Vqd__GGAaBHPxAaBHD1__AjA0C8ModifierHPyHCHCTm(a1, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
}

uint64_t sub_187894664(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20OptionalSourceWriter33_D9F7AF928092578A4B8FA861B49E2161LLVyAA021ListRowHeightTemplateE0Vqd__GGAaBHPxAaBHD1__AjA0C8ModifierHPyHCHCTm(a1, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20OptionalSourceWriter33_D9F7AF928092578A4B8FA861B49E2161LLVyAA021ListRowHeightTemplateE0Vqd__GGAaBHPxAaBHD1__AjA0C8ModifierHPyHCHCTm(uint64_t a1, void (*a2)(void))
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ListFirstRowHeightTemplateContent()
{
  return &type metadata for ListFirstRowHeightTemplateContent;
}

ValueMetadata *type metadata accessor for ListRowHeightTemplateContent()
{
  return &type metadata for ListRowHeightTemplateContent;
}

void protocol witness for View.body.getter in conformance ListRowHeightTemplateContent()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for View in ListRowHeightTemplateContent()
{
  return &protocol witness table for ListRowHeightTemplateContent;
}

void protocol witness for View.body.getter in conformance ListFirstRowHeightTemplateContent()
{
}

_UNKNOWN **base witness table accessor for View in ListFirstRowHeightTemplateContent()
{
  return &protocol witness table for ListFirstRowHeightTemplateContent;
}

unint64_t instantiation function for generic protocol witness table for ListFirstRowHeightTemplateContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ListRowHeightTemplateContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextInputDictationBehavior.Storage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 & 0xFE) == 2) {
    return 0;
  }
  return ((v3 ^ v2) & 1) == 0;
}

void static TextInputDictationBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

unsigned char *static TextInputDictationBehavior.inline(activation:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static TextInputDictationBehavior.preventDictation.getter()
{
}

uint64_t static TextInputDictationBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2) {
      return 1;
    }
  }
  else if (v2 == 3)
  {
    if (v3 == 3) {
      return 1;
    }
  }
  else if ((v3 & 0xFE) != 2 && ((v3 ^ v2) & 1) == 0)
  {
    return 1;
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextInputDictationBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 != 3) {
    return (v3 & 0xFE) != 2 && ((v3 ^ v2) & 1) == 0;
  }
  return v3 == 3;
}

void static TextInputDictationActivation.onSelect.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static TextInputDictationActivation.onLook.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL static TextInputDictationActivation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t getEnumTagSinglePayload for TextInputDictationBehavior(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  if (*a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 4;
  if (*a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TextInputDictationBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187894BC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextInputDictationBehavior()
{
  return &type metadata for TextInputDictationBehavior;
}

ValueMetadata *type metadata accessor for TextInputDictationActivation()
{
  return &type metadata for TextInputDictationActivation;
}

unsigned char *storeEnumTagSinglePayload for TextInputDictationActivation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187894CE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextInputDictationActivation.Role()
{
  return &type metadata for TextInputDictationActivation.Role;
}

uint64_t getEnumTagSinglePayload for TextInputDictationBehavior.Storage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187894DC8);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 2) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for TextInputDictationBehavior.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x187894EB0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextInputDictationBehavior.Storage()
{
  return &type metadata for TextInputDictationBehavior.Storage;
}

unint64_t lazy protocol witness table accessor for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role;
  if (!lazy protocol witness table cache variable for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role);
  }
  return result;
}

uint64_t ColorPickerStyleConfiguration.supportsOpacity.getter()
{
  return *v0;
}

uint64_t ColorPickerStyleConfiguration.supportsOpacity.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ColorPickerStyleConfiguration.supportsOpacity.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ColorPickerStyleConfiguration.color.getter()
{
  type metadata accessor for Binding<UIColor>();
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

void *key path getter for ColorPickerStyleConfiguration.color : ColorPickerStyleConfiguration@<X0>(void *a1@<X8>)
{
  type metadata accessor for Binding<UIColor>();
  unint64_t result = MEMORY[0x18C113DA0](&v3);
  *a1 = v3;
  return result;
}

void key path setter for ColorPickerStyleConfiguration.color : ColorPickerStyleConfiguration(void **a1, uint64_t a2)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *(void **)(a2 + 24);
  swift_retain_n();
  swift_retain_n();
  id v4 = v3;
  id v5 = v2;
  dispatch thunk of AnyLocation.set(_:transaction:)();

  swift_release_n();
  swift_release_n();
}

void ColorPickerStyleConfiguration.color.setter(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  swift_retain();
  swift_retain();
  id v4 = v3;
  dispatch thunk of AnyLocation.set(_:transaction:)();

  swift_release();
  swift_release();
}

void (*ColorPickerStyleConfiguration.color.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  v3[4] = v4;
  v3[5] = v5;
  uint64_t v6 = (void *)v1[3];
  v3[6] = v6;
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  type metadata accessor for Binding<UIColor>();
  uint64_t v8 = v7;
  swift_retain();
  swift_retain();
  id v9 = v6;
  MEMORY[0x18C113DA0](v8);
  return ColorPickerStyleConfiguration.color.modify;
}

void ColorPickerStyleConfiguration.color.modify(id **a1, char a2)
{
  unsigned int v2 = *a1;
  id v3 = (*a1)[3];
  id v4 = (*a1)[6];
  **a1 = v3;
  if (a2)
  {
    id v5 = v3;
    dispatch thunk of AnyLocation.set(_:transaction:)();

    swift_release();
    swift_release();
  }
  else
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();

    swift_release();
    swift_release();
  }

  free(v2);
}

uint64_t ColorPickerStyleConfiguration.$color.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unsigned int v2 = *(void **)(v0 + 24);
  swift_retain();
  swift_retain();
  id v3 = v2;
  return v1;
}

uint64_t ColorPickerStyleConfiguration.init(color:supportsOpacity:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 8) = result;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  *(unsigned char *)a5 = a4;
  return result;
}

id protocol witness for StyleableView.configuration.getter in conformance ResolvedColorPickerStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  id v5 = *(id *)(v1 + 24);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_retain();

  return v5;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedColorPickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedColorPickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedColorPickerStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t View.colorPickerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ColorPickerStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for ColorPickerStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t instantiation function for generic protocol witness table for ColorPickerStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in ColorPickerStyleConfiguration.Label()
{
  return &protocol witness table for ColorPickerStyleConfiguration.Label;
}

uint64_t dispatch thunk of ColorPickerStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for ColorPickerStyleConfiguration()
{
  return &type metadata for ColorPickerStyleConfiguration;
}

ValueMetadata *type metadata accessor for ColorPickerStyleConfiguration.Label()
{
  return &type metadata for ColorPickerStyleConfiguration.Label;
}

uint64_t sub_187895700()
{
  return swift_getWitnessTable();
}

void destroy for ColorPickerStyleConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for ColorPickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  id v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for ColorPickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  id v4 = *(void **)(a2 + 24);
  id v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for ColorPickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  id v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedColorPickerStyle()
{
  return &type metadata for ResolvedColorPickerStyle;
}

uint64_t getEnumTagSinglePayload for ColorPickerStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ColorPickerStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187895C60);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in ColorPickerStyleModifier<A>()
{
  return &protocol witness table for ColorPickerStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in ColorPickerStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in ColorPickerStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ColorPickerStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t ColorPickerStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  int v11 = &v15[-v10];
  uint64_t v12 = *(void *)(a1 + 8);
  v15[0] = *(unsigned char *)a1;
  uint64_t v16 = v12;
  long long v17 = *(_OWORD *)(a1 + 16);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 24))(v15, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v13 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v11, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle;
  if (!lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle;
  if (!lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>)
  {
    type metadata accessor for ColorPickerStyleModifier<DefaultColorPickerStyle>(255, &lazy cache variable for type metadata for ColorPickerStyleModifier<DefaultColorPickerStyle>, (void (*)(void))lazy protocol witness table accessor for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle;
  if (!lazy protocol witness table cache variable for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for ColorPickerStyle.Body : View in DefaultColorPickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ColorPickerStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ColorPickerStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ColorPickerStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

id protocol witness for ColorPickerStyle.makeBody(configuration:) in conformance DefaultColorPickerStyle@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 2);
  id v5 = (id)*((void *)a1 + 3);
  *(void *)a2 = *((void *)a1 + 1);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v2;
  swift_retain();
  swift_retain();

  return v5;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedColorPickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultColorPickerStyle()
{
  return &type metadata for DefaultColorPickerStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>();
    lazy protocol witness table accessor for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>)
  {
    type metadata accessor for ColorPicker<ColorPickerStyleConfiguration.Label>();
    type metadata accessor for ColorPickerStyleModifier<DefaultColorPickerStyle>(255, &lazy cache variable for type metadata for ColorPickerStyleModifier<SystemColorPickerStyle>, (void (*)(void))lazy protocol witness table accessor for type SystemColorPickerStyle and conformance SystemColorPickerStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>);
    }
  }
}

void type metadata accessor for ColorPicker<ColorPickerStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for ColorPicker<ColorPickerStyleConfiguration.Label>)
  {
    unint64_t v0 = type metadata accessor for ColorPicker();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorPicker<ColorPickerStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for ColorPickerStyleModifier<DefaultColorPickerStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ColorPickerStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SystemColorPickerStyle and conformance SystemColorPickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemColorPickerStyle and conformance SystemColorPickerStyle;
  if (!lazy protocol witness table cache variable for type SystemColorPickerStyle and conformance SystemColorPickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorPickerStyle and conformance SystemColorPickerStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>;
  if (!lazy protocol witness table cache variable for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>)
  {
    type metadata accessor for ColorPicker<ColorPickerStyleConfiguration.Label>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>);
  }
  return result;
}

uint64_t TableRowContent.selectionDisabled(_:)(char a1, uint64_t a2)
{
  char v5 = a1 ^ 1;
  type metadata accessor for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>();
  return TableRowContent.modifier<A>(_:)((uint64_t)&v5, a2, v3);
}

void type metadata accessor for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingTableRowModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>);
    }
  }
}

uint64_t static IsSelectionEnabledTraitKey.defaultValue.getter()
{
  return 1;
}

uint64_t sub_1878965E0()
{
  return swift_getWitnessTable();
}

unint64_t implicit closure #7 in BoundNavigationPathDetector.updateValue()()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance BoundNavigationPathDetector()
{
  uint64_t v1 = type metadata accessor for ObservationTracking();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 40) + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  swift_beginAccess();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v1);
  if (!result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
    ObservationTracking.cancel()();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance BoundNavigationPathDetector(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObservationTracking();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 40) + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  swift_beginAccess();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2);
  if (!result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    ObservationTracking.cancel()();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t BoundNavigationPathDetector.PathObservation.__deallocating_deinit()
{
  outlined destroy of ObservationTracking?(v0 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking, &lazy cache variable for type metadata for ObservationTracking?, MEMORY[0x1E4FBCD58]);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for BoundNavigationPathDetector.PathObservation()
{
  return type metadata accessor for BoundNavigationPathDetector.PathObservation();
}

void partial apply for closure #2 in BoundNavigationPathDetector.updateValue()()
{
  *(unsigned char *)(v0 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved) = 1;
}

uint64_t destroy for BoundNavigationPathDetector()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t assignWithCopy for BoundNavigationPathDetector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BoundNavigationPathDetector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BoundNavigationPathDetector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BoundNavigationPathDetector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BoundNavigationPathDetector()
{
  return &type metadata for BoundNavigationPathDetector;
}

BOOL _defaultSwiftUIActivityEnvironmentLoggingEnabled.getter()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled;
}

uint64_t _defaultSwiftUIActivityEnvironmentLoggingEnabled.setter(Swift::Bool a1)
{
  uint64_t result = swift_beginAccess();
  _defaultSwiftUIActivityEnvironmentLoggingEnabled = a1;
  return result;
}

uint64_t (*_defaultSwiftUIActivityEnvironmentLoggingEnabled.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void UserActivityTrackingInfo.userActivity.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity);
  *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity) = a1;
  id v5 = a1;
  id v10 = v5;
  if (a1)
  {
    if (v4)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
      id v6 = v4;
      id v7 = v10;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8)
      {
        uint64_t v4 = v6;
        id v10 = v7;
LABEL_7:

        uint64_t v4 = v10;
        goto LABEL_8;
      }
    }
    else
    {
      id v9 = v5;
    }
    objc_msgSend(v10, sel_setDelegate_, v2);
    goto LABEL_7;
  }
LABEL_8:
}

Swift::Void __swiftcall UserActivityTrackingInfo.userActivityWillSave(_:)(NSUserActivity a1)
{
  if (pthread_main_np())
  {
    UserActivityTrackingInfo.updateUserActivity(_:)(a1);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v3 = static OS_dispatch_queue.main.getter();
    uint64_t v4 = (NSUserActivity *)swift_allocObject();
    v4[2].super.Class isa = v1;
    v4[3].super.Class isa = a1.super.isa;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = partial apply for closure #1 in UserActivityTrackingInfo.userActivityWillSave(_:);
    *(void *)(v5 + 24) = v4;
    v10[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v10[5] = v5;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1107296256;
    _OWORD v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_58;
    id v6 = _Block_copy(v10);
    id v7 = v1;
    char v8 = a1.super.isa;
    swift_retain();
    swift_release();
    dispatch_sync(v3, v6);

    _Block_release(v6);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall UserActivityTrackingInfo.updateUserActivity(_:)(NSUserActivity a1)
{
  uint64_t v2 = *(objc_class **)&v1[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity];
  if (v2) {
    BOOL v3 = v2 == a1.super.isa;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v1;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = Strong;
      char v8 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_handlers];
      uint64_t v9 = swift_beginAccess();
      MEMORY[0x1F4188790](v9);
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10, (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))partial apply for closure #1 in UserActivityTrackingInfo.updateUserActivity(_:));
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v39 = v7;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v12; ++i)
        {
          Swift::UInt32 v14 = *(_DWORD *)(v11 + 4 * i + 32);
          swift_beginAccess();
          unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
          if (v16)
          {
            unint64_t v17 = v15;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v19 = *v8;
            uint64_t v40 = *v8;
            *char v8 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v19 = v40;
            }
            specialized _NativeDictionary._delete(at:)(v17, v19);
            *char v8 = v19;
            swift_release();
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
        }
        swift_bridgeObjectRelease();
        uint64_t v7 = v39;
      }
      uint64_t v20 = *(void *)(*v8 + 16);
      swift_bridgeObjectRelease();
      if (v20)
      {
        if (v12)
        {
          uint64_t v21 = *(void **)(v7 + 112);
          *(void *)(v7 + 112) = v4;
          id v22 = v4;

          long long v23 = *(void **)(v7 + 112);
          type metadata accessor for UserActivityTrackingInfo?(0, v24, v25);
          uint64_t v27 = v26;
          uint64_t v42 = v26;
          v41[0] = v23;
          id v28 = v23;
          SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v41, v27, 0xD000000000000018, 0x800000018835FB00);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
        }
      }
      else
      {
        uint64_t v29 = *(void **)(v7 + 112);
        *(void *)(v7 + 112) = 0;

        int v30 = *(void **)(v7 + 112);
        type metadata accessor for UserActivityTrackingInfo?(0, v31, v32);
        uint64_t v34 = v33;
        uint64_t v42 = v33;
        v41[0] = v30;
        id v35 = v30;
        SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v41, v34, 0xD000000000000018, 0x800000018835FB00);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
        uint64_t v36 = (void *)MEMORY[0x18C119DF0](v7 + 40);
        if (v36)
        {
          uint64_t v37 = v36;
          objc_msgSend(v36, sel_setUserActivity_, 0);
        }
        else
        {
          uint64_t v38 = *(void **)(v7 + 80);
          *(void *)(v7 + 80) = 0;
        }
      }
      -[objc_class setNeedsSave:](a1.super.isa, sel_setNeedsSave_, 0, v39);
      swift_release();
    }
  }
}

uint64_t UserActivityTrackingInfo.description.getter()
{
  _StringGuts.grow(_:)(96);
  v1._uint64_t countAndFlagsBits = 0xD000000000000027;
  v1._object = (void *)0x800000018832BB20;
  String.append(_:)(v1);
  swift_weakLoadStrong();
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for SceneBridge?, v2, (uint64_t (*)(uint64_t))type metadata accessor for SceneBridge, MEMORY[0x1E4FBB718]);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000018832BB50;
  v4._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  swift_beginAccess();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6976697463610A2CLL;
  v6._object = (void *)0xEF20657079547974;
  String.append(_:)(v6);
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity;
  char v8 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity);
  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_activityType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  type metadata accessor for String?(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  v10._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x800000018832BB70;
  v11._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v11);
  uint64_t v12 = *(void **)(v0 + v7);
  if (v12)
  {
    id v13 = objc_msgSend(v12, sel_title);
    if (v13)
    {
      Swift::UInt32 v14 = v13;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t closure #1 in SceneBridge.validTestCases.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    GraphHost.instantiateIfNeeded()();
    lazy protocol witness table accessor for type ValidTestCasesFeature and conformance ValidTestCasesFeature();
    if (ViewGraph.subscript.getter()
      && (type metadata accessor for String?(0, (unint64_t *)&lazy cache variable for type metadata for [PPTTestCase.Name], (uint64_t)&type metadata for PPTTestCase.Name, MEMORY[0x1E4FBB320]), (Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue()) != 0))
    {
      uint64_t v4 = *WeakValue;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  *a1 = v4;
  return result;
}

uint64_t SceneBridge.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_weakDestroy();
  outlined consume of (preferring: Set<String>, allowing: Set<String>)?(*(void *)(v0 + 96));

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SceneBridge.__deallocating_deinit()
{
  SceneBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance SceneBridge@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    Swift::String v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt v14;
  uint64_t v15;

  uint64_t v2 = result;
  int64_t v3 = 0;
  unint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    Swift::String v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    Swift::Int v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      Swift::Int v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        Swift::Int v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          Swift::Int v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v14, *(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  Swift::Int v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  Swift::Int v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    Swift::Int v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t SceneBridge.description.getter()
{
  MEMORY[0x18C119DF0](v0 + 40);
  type metadata accessor for UIViewController?();
  v1._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneBridge()
{
  return SceneBridge.description.getter();
}

uint64_t *closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(uint64_t *result, Swift::UInt32 a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 1) != 0 && a4)
  {
    Swift::Int v13 = result;
    uint64_t v14 = result[1];
    if (v14)
    {
      unint64_t v15 = result[2];
      if (*result == a5 && v14 == a6)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        if ((v17 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = a7;
      *(void *)(v23 + 24) = a8;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSUserActivity) -> (@unowned Bool), v23, a2, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = v15;
      swift_bridgeObjectRelease();
      uint64_t v25 = *v13;
      uint64_t v26 = v13[1];
      swift_bridgeObjectRetain();
      uint64_t v21 = v25;
      uint64_t v22 = v26;
      goto LABEL_13;
    }
LABEL_10:
    type metadata accessor for _ContiguousArrayStorage<(ViewIdentity, (_:))>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(ViewIdentity, (_:))>, &lazy cache variable for type metadata for (ViewIdentity, (_:)), (void (*)(uint64_t))type metadata accessor for (_:));
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a7;
    *(void *)(v19 + 24) = a8;
    *(_DWORD *)(inited + 32) = a2;
    *(void *)(inited + 40) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSUserActivity) -> (@unowned Bool);
    *(void *)(inited + 48) = v19;
    unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_setDeallocating();
    _ss11AnyHashableV_7Combine18PassthroughSubjectCyyps5NeverOGtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, ()), (void (*)(uint64_t))type metadata accessor for ());
    swift_retain();
    swift_bridgeObjectRetain();
    swift_arrayDestroy();
    uint64_t v21 = *v13;
    uint64_t v22 = v13[1];
LABEL_13:
    uint64_t result = (uint64_t *)outlined consume of FocusStore?(v21, v22);
    *Swift::Int v13 = a5;
    v13[1] = a6;
    void v13[2] = v20;
  }
  return result;
}

void UserActivityModifier.scrapeableAttachment.getter(unint64_t *a1@<X8>)
{
  if (v1[2])
  {
    uint64_t v4 = v1;
    long long v13 = *(_OWORD *)(v1 + 5);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for State<UserActivityTrackingInfo?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UserActivityTrackingInfo?, MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
    uint64_t v5 = *v1;
    if (v14)
    {
      uint64_t v6 = v4[1];
      BOOL v7 = *(void *)&v14[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_activityType] == v5
        && *(void *)&v14[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_activityType + 8] == v6;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        int64_t v8 = *(void **)&v14[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity];
        id v9 = v8;

        if (v8)
        {
LABEL_14:
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = v9;
          unint64_t v3 = v12 | 0x8000000000000000;
          goto LABEL_15;
        }
      }
      else
      {
      }
    }
    else
    {
      uint64_t v6 = v4[1];
    }
    id v10 = objc_allocWithZone(MEMORY[0x1E4F29230]);
    swift_bridgeObjectRetain();
    Swift::String v11 = (void *)MEMORY[0x18C115780](v5, v6);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v10, sel_initWithActivityType_, v11, v13);

    ((void (*)(id))v4[3])(v9);
    goto LABEL_14;
  }
  unint64_t v3 = 0xF000000000000007;
LABEL_15:
  *a1 = v3;
}

uint64_t closure #1 in UserActivityModifier.body(content:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  long long v20 = *(_OWORD *)(a2 + 5);
  outlined init with take of UserActivityTrackingInfo?((uint64_t)&v20, (uint64_t)&v22, (uint64_t (*)(void))type metadata accessor for UserActivityTrackingInfo?);
  outlined init with take of AnyLocation<UserActivityTrackingInfo?>?((uint64_t)&v20 + 8, (uint64_t)v21);
  uint64_t v7 = swift_allocObject();
  long long v8 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = *((_OWORD *)a2 + 2);
  *(void *)(v7 + 64) = a2[6];
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = a1;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v4;
  *(void *)(v9 + 48) = partial apply for closure #1 in closure #1 in UserActivityModifier.body(content:);
  *(void *)(v9 + 56) = v7;
  type metadata accessor for UserActivityTrackingInfo?(0, v10, v11);
  unint64_t v13 = v12;
  swift_bridgeObjectRetain_n();
  swift_retain();
  outlined retain of UserActivityTrackingInfo?(&v22);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v21);
  swift_retain();
  uint64_t v14 = specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(v13, 0xD000000000000018, 0x800000018835FB00, a1);
  uint64_t v15 = swift_allocObject();
  long long v16 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 48) = *((_OWORD *)a2 + 2);
  *(void *)(v15 + 64) = a2[6];
  v19[1] = (unint64_t)partial apply for closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:);
  v19[2] = v9;
  v19[3] = v14;
  v19[4] = (unint64_t)partial apply for closure #2 in closure #1 in UserActivityModifier.body(content:);
  v19[5] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of UserActivityTrackingInfo?(&v22);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v21);
  UserActivityModifier.scrapeableAttachment.getter(v19);
  unint64_t v17 = v19[0];
  type metadata accessor for SubscriptionView<PassthroughSubject<Any, Never>, ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>>();
  View.scrapeableAttachment(_:)();
  outlined consume of ScrapeableContent.Content?(v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in UserActivityModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for UserActivityTrackingInfo?(0, v3, v4);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    char v6 = v10;
    v7[0] = *(_OWORD *)(a2 + 40);
    outlined init with take of UserActivityTrackingInfo?((uint64_t)v7, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for UserActivityTrackingInfo?);
    outlined init with take of AnyLocation<UserActivityTrackingInfo?>?((uint64_t)v7 + 8, (uint64_t)v8);
    outlined init with take of AnyLocation<UserActivityTrackingInfo?>?((uint64_t)v8, (uint64_t)&v10);
    if (v10)
    {
      outlined retain of UserActivityTrackingInfo?(&v9);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v8);
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    else
    {
      outlined retain of UserActivityTrackingInfo?(&v9);
    }

    outlined release of UserActivityTrackingInfo?(&v9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v8);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance UserActivityModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *((void *)v1 + 3);
  uint64_t v3 = *((void *)v1 + 4);
  long long v5 = *(long long *)((char *)v1 + 40);
  long long v9 = *v1;
  long long v10 = v5;
  outlined init with take of UserActivityTrackingInfo?((uint64_t)&v10, (uint64_t)&v12, (uint64_t (*)(void))type metadata accessor for UserActivityTrackingInfo?);
  outlined init with take of AnyLocation<UserActivityTrackingInfo?>?((uint64_t)&v10 + 8, (uint64_t)v11);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = *v1;
  *(void *)(v6 + 32) = *((void *)v1 + 2);
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v3;
  *(_OWORD *)(v6 + 56) = *(long long *)((char *)v1 + 40);
  type metadata accessor for SceneBridge();
  outlined retain of String?((uint64_t)&v9);
  swift_retain();
  outlined retain of UserActivityTrackingInfo?(&v12);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v11);
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type SceneBridge and conformance SceneBridge, v7, (void (*)(uint64_t))type metadata accessor for SceneBridge);
  uint64_t result = static ObservableObject.environmentStore.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = partial apply for closure #1 in UserActivityModifier.body(content:);
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t View.userActivity(_:isActive:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[0] = a1;
  v8[1] = a2;
  char v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  return MEMORY[0x18C113660](v8, a6, &type metadata for UserActivityModifier, a7);
}

uint64_t View.userActivity<A>(_:element:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a9;
  uint64_t v26 = a8;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  double v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v25 - v17;
  BOOL v19 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a7 - 8) + 48))(a3, 1, a7, v16) != 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v18, a3, v13);
  unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = a6;
  *((void *)v21 + 3) = a7;
  uint64_t v22 = v26;
  *((void *)v21 + 4) = v26;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v21[v20], v18, v13);
  uint64_t v23 = &v21[(v15 + v20 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v23 = v27;
  *((void *)v23 + 1) = a5;
  swift_retain();
  v31[0] = v28;
  v31[1] = v29;
  BOOL v32 = v19;
  uint64_t v33 = partial apply for elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:);
  uint64_t v34 = v21;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  MEMORY[0x18C113660](v31, a6, &type metadata for UserActivityModifier, v22);
  return swift_release();
}

uint64_t elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *(void *)(a6 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a2, v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a6) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a6);
  a3(v18, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a6);
}

uint64_t sub_187898890()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v1 + v6;
  uint64_t v8 = v1 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  char v9 = *(void (**)(char *, uint64_t))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:)(a1, v7, v9, v10, v3, v4);
}

uint64_t sub_187898AA4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void closure #1 in closure #1 in View.onContinueUserActivity(_:perform:)(uint64_t a1, void (*a2)())
{
  outlined init with copy of Any(a1, (uint64_t)v4);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
  if (swift_dynamicCast())
  {
    a2();
  }
}

uint64_t closure #1 in closure #1 in View.onOpenURL(perform:)(uint64_t a1, void (*a2)(unsigned char *))
{
  type metadata accessor for OpenURLContext?(0);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for OpenURLContext();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a1, (uint64_t)v16);
  char v11 = swift_dynamicCast();
  uint64_t v12 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v11)
  {
    v12(v6, 0, 1, v7);
    outlined init with take of UserActivityTrackingInfo?((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
    a2(v10);
    uint64_t v13 = (uint64_t (*)(void))type metadata accessor for OpenURLContext;
    uint64_t v14 = (uint64_t)v10;
  }
  else
  {
    v12(v6, 1, 1, v7);
    uint64_t v13 = (uint64_t (*)(void))type metadata accessor for OpenURLContext?;
    uint64_t v14 = (uint64_t)v6;
  }
  return outlined destroy of URL?(v14, v13);
}

uint64_t closure #1 in closure #1 in View.onOpenURL(perform:)(uint64_t a1, void (*a2)(char *, id *))
{
  type metadata accessor for OpenURLContext?(0);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OpenURLContext();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v17);
  char v11 = swift_dynamicCast();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v11)
  {
    v12(v6, 0, 1, v7);
    outlined init with take of UserActivityTrackingInfo?((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OpenURLContext);
    v17[0] = *(id *)&v10[*(int *)(v7 + 20)];
    id v13 = v17[0];
    a2(v10, v17);

    uint64_t v14 = (uint64_t (*)(void))type metadata accessor for OpenURLContext;
    uint64_t v15 = (uint64_t)v10;
  }
  else
  {
    v12(v6, 1, 1, v7);
    uint64_t v14 = (uint64_t (*)(void))type metadata accessor for OpenURLContext?;
    uint64_t v15 = (uint64_t)v6;
  }
  return outlined destroy of URL?(v15, v14);
}

uint64_t View.handlesExternalEvents(preferring:allowing:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t closure #1 in View.handlesExternalEvents(preferring:allowing:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = a1[1];
    swift_bridgeObjectRetain();
    outlined copy of (preferring: Set<String>, allowing: Set<String>)?(v6);
    a2 = specialized Set.union<A>(_:)(a2, v6);
    uint64_t v8 = swift_bridgeObjectRetain();
    a3 = specialized Set.union<A>(_:)(v8, v7);
    uint64_t result = outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t sub_18789911C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.handlesExternalEvents(preferring:allowing:)(uint64_t *a1)
{
  return closure #1 in View.handlesExternalEvents(preferring:allowing:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

id OpenURLOptions.uiSceneOpenURLOptions.getter()
{
  return *v0;
}

void OpenURLOptions.uiSceneOpenURLOptions.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*OpenURLOptions.uiSceneOpenURLOptions.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

ValueMetadata *type metadata accessor for OpenURLOptions()
{
  return &type metadata for OpenURLOptions;
}

uint64_t sub_1878991C8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type UserActivityModifier and conformance UserActivityModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type UserActivityModifier and conformance UserActivityModifier;
  if (!lazy protocol witness table cache variable for type UserActivityModifier and conformance UserActivityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserActivityModifier and conformance UserActivityModifier);
  }
  return result;
}

uint64_t sub_187899280()
{
  return swift_getWitnessTable();
}

uint64_t sub_1878992E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1878993A0()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey>, (uint64_t)&type metadata for SceneBridge.ActivationConditionsPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.ActivationConditionsPreferenceKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t *assignWithTake for SceneBridgeReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SceneBridge.ActivationConditionsPreferenceKey()
{
  return &type metadata for SceneBridge.ActivationConditionsPreferenceKey;
}

uint64_t destroy for UserActivityModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for UserActivityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v6 = *(void **)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  id v7 = v6;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UserActivityModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  id v7 = v6;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UserActivityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserActivityModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserActivityModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserActivityModifier()
{
  return &type metadata for UserActivityModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in UserActivityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  Swift::UInt32 v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_23;
  }
  Swift::UInt32 v10 = v7;
  uint64_t v11 = v8;
  uint64_t v49 = v9;
  uint64_t v12 = (void *)*a5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a4)
    {
      uint64_t v21 = (void *)*a5;
      if (v13) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v21 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    *(_DWORD *)(v21[6] + 4 * v14) = v10;
    uint64_t v23 = (void *)(v21[7] + 16 * v14);
    *uint64_t v23 = v11;
    v23[1] = v49;
    uint64_t v24 = v21[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v26;
LABEL_13:
    Swift::UInt32 v27 = specialized LazyMapSequence.Iterator.next()();
    if (v28)
    {
      Swift::UInt32 v30 = v27;
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      do
      {
        uint64_t v36 = (void *)*a5;
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        uint64_t v39 = v36[2];
        BOOL v40 = (v38 & 1) == 0;
        BOOL v25 = __OFADD__(v39, v40);
        uint64_t v41 = v39 + v40;
        if (v25) {
          goto LABEL_24;
        }
        char v42 = v38;
        if (v36[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v42 & 1) != (v43 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v44 = (void *)*a5;
        if (v42)
        {
          uint64_t v33 = (void *)(v44[7] + 16 * v37);
          swift_release();
          *uint64_t v33 = v31;
          v33[1] = v32;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          *(_DWORD *)(v44[6] + 4 * v37) = v30;
          uint64_t v45 = (void *)(v44[7] + 16 * v37);
          *uint64_t v45 = v31;
          v45[1] = v32;
          uint64_t v46 = v44[2];
          BOOL v25 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v25) {
            goto LABEL_25;
          }
          v44[2] = v47;
        }
        Swift::UInt32 v30 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v31 = v34;
        uint64_t v32 = v35;
      }
      while (v34);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    uint64_t v21 = (void *)*a5;
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v22 = (void *)(v21[7] + 16 * v14);
    swift_release();
    *uint64_t v22 = v11;
    v22[1] = v49;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  swift_bridgeObjectRetain();
  swift_retain();
  Swift::UInt32 v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8 == 1) {
    goto LABEL_14;
  }
  uint64_t v9 = v7;
  Swift::UInt32 v10 = v8;
  uint64_t v11 = (void *)*a5;
  char v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  unint64_t v14 = v11[2];
  uint64_t v15 = (v12 & 1) == 0;
  BOOL v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v17 = v12;
  if (v11[3] >= v16)
  {
    if (a4)
    {
      char v20 = (void *)*a5;
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v20 = (void *)*a5;
      if (v17) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    uint64_t v24 = 8 * v13;
    *(void *)(v20[6] + v24) = v9;
    *(void *)(v20[7] + v24) = v10;
    BOOL v25 = v20[2];
    uint64_t v26 = __OFADD__(v25, 1);
    Swift::UInt32 v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v20[2] = v27;
    goto LABEL_13;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  char v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v17 & 1) == (v19 & 1))
  {
    char v13 = v18;
    char v20 = (void *)*a5;
    if ((v17 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v21 = 8 * v13;
    uint64_t v22 = *(void *)(v20[7] + 8 * v13);
    swift_retain();
    swift_release();
    uint64_t v23 = v20[7];
    swift_release();
    *(void *)(v23 + v21) = v22;
LABEL_13:
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29 == 1)
    {
LABEL_14:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<UIPress>.Iterator._Variant();
      return swift_release();
    }
    uint64_t v31 = v28;
    uint64_t v32 = v29;
    while (1)
    {
      unint64_t v37 = (void *)*a5;
      char v38 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
      BOOL v40 = v37[2];
      uint64_t v41 = (v39 & 1) == 0;
      uint64_t v26 = __OFADD__(v40, v41);
      char v42 = v40 + v41;
      if (v26) {
        goto LABEL_24;
      }
      char v43 = v39;
      if (v37[3] < v42)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, 1);
        char v38 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
        if ((v43 & 1) != (v44 & 1)) {
          break;
        }
      }
      uint64_t v45 = (void *)*a5;
      if (v43)
      {
        uint64_t v33 = 8 * v38;
        uint64_t v34 = *(void *)(v45[7] + 8 * v38);
        swift_retain();
        swift_release();
        uint64_t v35 = v45[7];
        swift_release();
        *(void *)(v35 + v33) = v34;
      }
      else
      {
        v45[(v38 >> 6) + 8] |= 1 << v38;
        uint64_t v46 = 8 * v38;
        *(void *)(v45[6] + v46) = v31;
        *(void *)(v45[7] + v46) = v32;
        uint64_t v47 = v45[2];
        uint64_t v26 = __OFADD__(v47, 1);
        uint64_t v48 = v47 + 1;
        if (v26) {
          goto LABEL_25;
        }
        v45[2] = v48;
      }
      uint64_t v31 = specialized LazyMapSequence.Iterator.next()();
      uint64_t v32 = v36;
      if (v36 == 1) {
        goto LABEL_14;
      }
    }
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  void v46[3];
  void (**v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  void (*v52)(uint64_t, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;

  Swift::UInt32 v10 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v61 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for (UUID, PlatformItemList)?, (uint64_t (*)(uint64_t))type metadata accessor for (UUID, PlatformItemList), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)v46 - v13;
  uint64_t v15 = -1 << *(unsigned char *)(a1 + 32);
  BOOL v16 = ~v15;
  uint64_t v17 = *(void *)(a1 + 64);
  char v18 = -v15;
  uint64_t v54 = a1;
  uint64_t v55 = a1 + 64;
  if (v18 < 64) {
    unint64_t v19 = ~(-1 << v18);
  }
  else {
    unint64_t v19 = -1;
  }
  uint64_t v56 = v16;
  double v57 = 0;
  uint64_t v58 = v19 & v17;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  v46[2] = a1;
  swift_bridgeObjectRetain();
  v46[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v14);
  type metadata accessor for (UUID, PlatformItemList)();
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v50 = v22 + 48;
  uint64_t v51 = v23;
  if (v23((uint64_t)v14, 1, v20) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
  uint64_t v53 = v48 + 32;
  uint64_t v47 = (void (**)(uint64_t, uint64_t))(v48 + 8);
  uint64_t v49 = v21;
  while (1)
  {
    Swift::UInt32 v27 = *(int *)(v21 + 48);
    uint64_t v28 = (uint64_t)v61;
    uint64_t v29 = v10;
    v52((uint64_t)v61, v14, v10);
    Swift::UInt32 v30 = (uint64_t)v14;
    uint64_t v31 = *(void *)&v14[v27];
    uint64_t v32 = a5;
    uint64_t v33 = *a5;
    uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
    uint64_t v36 = *(void *)(v33 + 16);
    unint64_t v37 = (v34 & 1) == 0;
    char v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    uint64_t v39 = v34;
    if (*(void *)(v33 + 24) >= v38)
    {
      if (a4)
      {
        char v42 = (void *)*v32;
        if (v34) {
          goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        char v42 = (void *)*v32;
        if (v39) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, a4 & 1);
      BOOL v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v61);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_22;
      }
      uint64_t v35 = v40;
      char v42 = (void *)*v32;
      if (v39)
      {
LABEL_7:
        BOOL v25 = *(void *)(v42[7] + 8 * v35);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Swift::UInt32 v10 = v29;
        (*v47)((uint64_t)v61, v29);
        uint64_t v26 = *(void *)(*v32 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v26 + 8 * v35) = v25;
        goto LABEL_8;
      }
    }
    v42[(v35 >> 6) + 8] |= 1 << v35;
    Swift::UInt32 v10 = v29;
    v52(v42[6] + *(void *)(v48 + 72) * v35, v61, v29);
    *(void *)(v42[7] + 8 * v35) = v31;
    char v43 = v42[2];
    uint64_t v44 = __OFADD__(v43, 1);
    uint64_t v45 = v43 + 1;
    if (v44) {
      goto LABEL_21;
    }
    v42[2] = v45;
LABEL_8:
    a5 = v32;
    unint64_t v14 = (char *)v30;
    specialized LazyMapSequence.Iterator.next()(v30);
    a4 = 1;
    uint64_t v21 = v49;
    if (v51(v30, 1, v49) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _OWORD *v23;
  void *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char v44;
  char v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  long long v51;
  uint64_t v52;
  long long v53;

  swift_bridgeObjectRetain();
  swift_retain();
  Swift::UInt32 v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_23;
  }
  Swift::UInt32 v10 = v7;
  uint64_t v11 = v8;
  uint64_t v52 = v9;
  uint64_t v12 = (void *)*a5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a4)
    {
      uint64_t v21 = (void *)*a5;
      if (v13) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v21 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    *(void *)(v21[6] + 8 * v14) = v10;
    uint64_t v24 = (void *)(v21[7] + 16 * v14);
    *uint64_t v24 = v11;
    v24[1] = v52;
    BOOL v25 = v21[2];
    uint64_t v26 = __OFADD__(v25, 1);
    Swift::UInt32 v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v27;
LABEL_13:
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      do
      {
        char v38 = (void *)*a5;
        uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
        uint64_t v41 = v38[2];
        char v42 = (v40 & 1) == 0;
        uint64_t v26 = __OFADD__(v41, v42);
        char v43 = v41 + v42;
        if (v26) {
          goto LABEL_24;
        }
        uint64_t v44 = v40;
        if (v38[3] < v43)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, 1);
          uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
          if ((v44 & 1) != (v45 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v46 = (void *)*a5;
        if (v44)
        {
          uint64_t v34 = 16 * v39;
          uint64_t v53 = *(_OWORD *)(v46[7] + 16 * v39);
          swift_retain();
          swift_release();
          uint64_t v35 = (_OWORD *)(v46[7] + v34);
          swift_release();
          *uint64_t v35 = v53;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          *(void *)(v46[6] + 8 * v39) = v31;
          uint64_t v47 = (void *)(v46[7] + 16 * v39);
          *uint64_t v47 = v32;
          v47[1] = v33;
          uint64_t v48 = v46[2];
          uint64_t v26 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v26) {
            goto LABEL_25;
          }
          v46[2] = v49;
        }
        uint64_t v31 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v32 = v36;
        uint64_t v33 = v37;
      }
      while (v36);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    uint64_t v21 = (void *)*a5;
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v22 = 16 * v14;
    uint64_t v51 = *(_OWORD *)(v21[7] + v22);
    swift_retain();
    swift_release();
    uint64_t v23 = (_OWORD *)(v21[7] + v22);
    swift_release();
    *uint64_t v23 = v51;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int Enum;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned char v45[128];
  unsigned char v46[128];
  void v47[3];
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;

  uint64_t v69 = a5;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  Swift::UInt32 v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v62 = a1;
  Swift::String v63 = a1 + 64;
  if (v9 < 64) {
    Swift::UInt32 v10 = ~(-1 << v9);
  }
  else {
    Swift::UInt32 v10 = -1;
  }
  int v64 = v7;
  uint64_t v65 = 0;
  uint64_t v66 = v10 & v8;
  uint64_t v67 = a2;
  int v68 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v47);
  outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v47, (uint64_t)v45);
  outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v45, (uint64_t)v46);
  Enum = getEnumTag for NavigationPath.Error((uint64_t)v46);
  while (1)
  {
    if (Enum == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<UIPress>.Iterator._Variant();
      return swift_release();
    }
    unint64_t v14 = v47[0];
    char v13 = v47[1];
    uint64_t v15 = v47[2];
    BOOL v16 = v48;
    uint64_t v17 = v49;
    uint64_t v33 = v50;
    uint64_t v34 = v51;
    uint64_t v35 = v52;
    uint64_t v36 = v53;
    unint64_t v37 = v54;
    char v38 = v55;
    uint64_t v39 = v56;
    BOOL v40 = v57;
    uint64_t v41 = v58;
    char v42 = v59;
    char v43 = v60;
    uint64_t v44 = v61;
    char v18 = (void *)*v69;
    char v20 = specialized __RawDictionaryStorage.find<A>(_:)(v47[0]);
    uint64_t v21 = v18[2];
    uint64_t v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    uint64_t v24 = v19;
    if (v18[3] >= v23)
    {
      if ((a4 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a4 & 1);
      BOOL v25 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_20;
      }
      char v20 = v25;
    }
    Swift::UInt32 v27 = (void *)*v69;
    if (v24)
    {
      uint64_t v12 = v27[7] + 120 * v20;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *(void *)uint64_t v12 = v13;
      *(void *)(v12 + 8) = v15;
      *(unsigned char *)(v12 + 16) = v16;
      *(void *)(v12 + 24) = v17;
      *(void *)(v12 + 32) = v33;
      *(void *)(v12 + 40) = v34;
      *(void *)(v12 + 48) = v35;
      *(unsigned char *)(v12 + 56) = v36;
      *(void *)(v12 + 64) = v37;
      *(unsigned char *)(v12 + 72) = v38;
      *(unsigned char *)(v12 + 73) = v39;
      *(void *)(v12 + 80) = v40;
      *(void *)(v12 + 88) = v41;
      *(void *)(v12 + 96) = v42;
      *(void *)(v12 + 104) = v43;
      *(void *)(v12 + 112) = v44;
    }
    else
    {
      v27[(v20 >> 6) + 8] |= 1 << v20;
      *(void *)(v27[6] + 8 * v20) = v14;
      uint64_t v28 = v27[7] + 120 * v20;
      *(void *)uint64_t v28 = v13;
      *(void *)(v28 + 8) = v15;
      *(unsigned char *)(v28 + 16) = v16;
      *(void *)(v28 + 24) = v17;
      *(void *)(v28 + 32) = v33;
      *(void *)(v28 + 40) = v34;
      *(void *)(v28 + 48) = v35;
      *(unsigned char *)(v28 + 56) = v36;
      *(void *)(v28 + 64) = v37;
      *(unsigned char *)(v28 + 72) = v38;
      *(unsigned char *)(v28 + 73) = v39;
      *(void *)(v28 + 80) = v40;
      *(void *)(v28 + 88) = v41;
      *(void *)(v28 + 96) = v42;
      *(void *)(v28 + 104) = v43;
      *(void *)(v28 + 112) = v44;
      uint64_t v29 = v27[2];
      Swift::UInt32 v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_19;
      }
      v27[2] = v31;
    }
    specialized LazyMapSequence.Iterator.next()((uint64_t)v47);
    outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v47, (uint64_t)v45);
    outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v45, (uint64_t)v46);
    Enum = getEnumTag for NavigationPath.Error((uint64_t)v46);
    a4 = 1;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  Swift::UInt32 v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v9 = v7;
  Swift::UInt32 v10 = v8;
  uint64_t v11 = (void *)*a5;
  char v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  unint64_t v14 = v11[2];
  uint64_t v15 = (v12 & 1) == 0;
  BOOL v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v17 = v12;
  if (v11[3] >= v16)
  {
    if (a4)
    {
      char v20 = (void *)*a5;
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v20 = (void *)*a5;
      if (v17) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    uint64_t v24 = 8 * v13;
    *(void *)(v20[6] + v24) = v9;
    *(void *)(v20[7] + v24) = v10;
    BOOL v25 = v20[2];
    uint64_t v26 = __OFADD__(v25, 1);
    Swift::UInt32 v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v20[2] = v27;
LABEL_13:
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      Swift::UInt32 v30 = v28;
      uint64_t v31 = v29;
      do
      {
        uint64_t v36 = (void *)*a5;
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        uint64_t v39 = v36[2];
        BOOL v40 = (v38 & 1) == 0;
        uint64_t v26 = __OFADD__(v39, v40);
        uint64_t v41 = v39 + v40;
        if (v26) {
          goto LABEL_24;
        }
        char v42 = v38;
        if (v36[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v42 & 1) != (v43 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v44 = (void *)*a5;
        if (v42)
        {
          uint64_t v32 = 8 * v37;
          uint64_t v33 = *(void *)(v44[7] + 8 * v37);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v34 = v44[7];
          swift_bridgeObjectRelease();
          *(void *)(v34 + v32) = v33;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          uint64_t v45 = 8 * v37;
          *(void *)(v44[6] + v45) = v30;
          *(void *)(v44[7] + v45) = v31;
          uint64_t v46 = v44[2];
          uint64_t v26 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v26) {
            goto LABEL_25;
          }
          v44[2] = v47;
        }
        Swift::UInt32 v30 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v31 = v35;
      }
      while (v35);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  char v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v17 & 1) == (v19 & 1))
  {
    char v13 = v18;
    char v20 = (void *)*a5;
    if ((v17 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v21 = 8 * v13;
    uint64_t v22 = *(void *)(v20[7] + 8 * v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v23 = v20[7];
    swift_bridgeObjectRelease();
    *(void *)(v23 + v21) = v22;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::UInt v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  Swift::UInt32 v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v7;
  Swift::UInt32 v10 = v8;
  uint64_t v11 = (void *)*a5;
  char v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  unint64_t v14 = v11[2];
  uint64_t v15 = (v12 & 1) == 0;
  BOOL v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v17 = v12;
  if (v11[3] >= v16)
  {
    if (a4)
    {
      char v20 = (void *)*a5;
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v20 = (void *)*a5;
      if (v17) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    uint64_t v24 = 8 * v13;
    *(void *)(v20[6] + v24) = v9;
    *(void *)(v20[7] + v24) = v10;
    BOOL v25 = v20[2];
    uint64_t v26 = __OFADD__(v25, 1);
    Swift::UInt32 v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v20[2] = v27;
LABEL_13:
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if (v28)
    {
      Swift::UInt32 v30 = v28;
      uint64_t v31 = v29;
      do
      {
        uint64_t v36 = (void *)*a5;
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        uint64_t v39 = v36[2];
        BOOL v40 = (v38 & 1) == 0;
        uint64_t v26 = __OFADD__(v39, v40);
        uint64_t v41 = v39 + v40;
        if (v26) {
          goto LABEL_24;
        }
        char v42 = v38;
        if (v36[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v42 & 1) != (v43 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v44 = (void *)*a5;
        if (v42)
        {
          uint64_t v32 = 8 * v37;
          uint64_t v33 = *(void *)(v44[7] + 8 * v37);
          swift_retain();
          swift_release();
          uint64_t v34 = v44[7];
          swift_release();
          *(void *)(v34 + v32) = v33;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          uint64_t v45 = 8 * v37;
          *(void *)(v44[6] + v45) = v30;
          *(void *)(v44[7] + v45) = v31;
          uint64_t v46 = v44[2];
          uint64_t v26 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v26) {
            goto LABEL_25;
          }
          v44[2] = v47;
        }
        Swift::UInt32 v30 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v31 = v35;
      }
      while (v30);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  char v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v17 & 1) == (v19 & 1))
  {
    char v13 = v18;
    char v20 = (void *)*a5;
    if ((v17 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v21 = 8 * v13;
    uint64_t v22 = *(void *)(v20[7] + 8 * v13);
    swift_retain();
    swift_release();
    uint64_t v23 = v20[7];
    swift_release();
    *(void *)(v23 + v21) = v22;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  *(_DWORD *)a2 = v2;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v3;
  return swift_retain();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t (*)(uint64_t a1), uint64_t))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * i);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v11 + 16 * i);
    swift_retain_n();
    uint64_t v14 = a2(v12, partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSUserActivity) -> (@out Bool), v13);
    swift_release();
    uint64_t result = swift_release();
    if ((v14 & 0x100000000) != 0)
    {
      if (v6) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
        uint64_t v20 = result;
      }
      unint64_t v19 = *(void *)(v20 + 16);
      unint64_t v18 = *(void *)(v20 + 24);
      if (v19 >= v18 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, (char *)v20);
        uint64_t v20 = result;
      }
      *(void *)(v20 + 16) = v19 + 1;
      *(_DWORD *)(v20 + 4 * v19 + 32) = v14;
      if (v6) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v22) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v21 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v22) {
        goto LABEL_29;
      }
      unint64_t v16 = *(void *)(v21 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v22) {
          goto LABEL_29;
        }
        unint64_t v16 = *(void *)(v21 + 8 * v8);
        if (!v16)
        {
          int64_t v8 = v15 + 3;
          if (v15 + 3 >= v22) {
            goto LABEL_29;
          }
          unint64_t v16 = *(void *)(v21 + 8 * v8);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v22)
  {
LABEL_29:
    swift_release();
    return v20;
  }
  unint64_t v16 = *(void *)(v21 + 8 * v17);
  if (v16)
  {
    int64_t v8 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v8 >= v22) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v21 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

id specialized SceneBridge.buildActivationConditions(_:)(unint64_t a1)
{
  if (!a1)
  {
    id v19 = objc_msgSend(self, sel_predicateWithValue_, 0);
LABEL_39:
    return v19;
  }
  unint64_t v1 = a1;
  unint64_t v27 = MEMORY[0x1E4FBC860];
  unint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_21:
    uint64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    if (*v13) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v14 == 0xE000000000000000;
    }
    if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      BOOL v17 = v15 == 42 && v14 == 0xE100000000000000;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v22 = objc_msgSend(self, sel_predicateWithValue_, 1);
        swift_release();
        return v22;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, 255, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x1E4FBBE00]);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
      *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v18 + 32) = v15;
      *(void *)(v18 + 40) = v14;
      swift_bridgeObjectRetain();
      NSPredicate.init(format:_:)();
      MEMORY[0x18C115B40]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v10 >= v6) {
    goto LABEL_35;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_35;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_35;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_20:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_21;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_35:
    swift_release();
    unint64_t v1 = v27;
    int64_t v6 = v27 >> 62;
    if (v27 >> 62) {
      goto LABEL_46;
    }
    uint64_t v20 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20 != 1) {
      goto LABEL_37;
    }
LABEL_47:
    if (v6)
    {
      swift_bridgeObjectRetain();
      id result = (id)_CocoaArrayWrapper.endIndex.getter();
      if (result)
      {
LABEL_49:
        if ((v1 & 0xC000000000000001) == 0)
        {
          if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v26 = *(id *)(v1 + 32);
LABEL_52:
          id v22 = v26;
          swift_bridgeObjectRelease_n();
          return v22;
        }
LABEL_56:
        id v26 = (id)MEMORY[0x18C117680](0, v1);
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)swift_bridgeObjectRetain();
      if (v25) {
        goto LABEL_49;
      }
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_35;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 == 1) {
    goto LABEL_47;
  }
LABEL_37:
  if (!v20)
  {
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(self, sel_predicateWithValue_, 0);
    goto LABEL_39;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(self, sel_orPredicateWithSubpredicates_, isa);

  return v24;
}

void *specialized static SceneBridge.UserActivityPreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(long long *__return_ptr, uint64_t))
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[2];
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_bridgeObjectRetain();
    a2(&v13, v7);
    if (*((void *)&v13 + 1))
    {
      uint64_t v8 = v14;
      BOOL v9 = v5 == (void)v13 && v4 == *((void *)&v13 + 1);
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v10 = specialized Dictionary.merging(_:uniquingKeysWith:)(v8, v6);
        swift_bridgeObjectRelease();
        id result = (void *)outlined consume of FocusStore?(v5, v4);
        *a1 = v5;
        a1[1] = v4;
        a1[2] = v10;
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    id result = ((void *(*)(long long *__return_ptr))a2)(&v13);
    uint64_t v12 = v14;
    *(_OWORD *)a1 = v13;
    a1[2] = v12;
  }
  return result;
}

void *specialized static SceneBridge.ActivationConditionsPreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(long long *__return_ptr, uint64_t))
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    swift_bridgeObjectRetain();
    uint64_t v6 = swift_bridgeObjectRetain();
    a2(&v11, v6);
    if ((void)v11)
    {
      uint64_t v7 = *((void *)&v11 + 1);
      outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v4);
      swift_bridgeObjectRetain();
      uint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v9 = specialized Set.union<A>(_:)(v8, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id result = (void *)specialized Set.union<A>(_:)(v7, v5);
      *a1 = v9;
      a1[1] = (uint64_t)result;
    }
    else
    {
      return (void *)outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v4);
    }
  }
  else
  {
    id result = ((void *(*)(long long *__return_ptr))a2)(&v11);
    *(_OWORD *)a1 = v11;
  }
  return result;
}

void type metadata accessor for UIViewController?()
{
  if (!lazy cache variable for type metadata for UIViewController?)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIViewController?);
    }
  }
}

uint64_t outlined init with take of AnyLocation<UserActivityTrackingInfo?>?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for AnyLocation<UserActivityTrackingInfo?>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocation<UserActivityTrackingInfo?>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyLocation<UserActivityTrackingInfo?>(uint64_t a1)
{
}

uint64_t partial apply for closure #1 in UserActivityModifier.body(content:)(uint64_t a1)
{
  return closure #1 in UserActivityModifier.body(content:)(a1, (uint64_t *)(v1 + 16));
}

id *outlined retain of UserActivityTrackingInfo?(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in UserActivityModifier.body(content:)()
{
  char v1 = *(unsigned char *)(v0 + 32);
  if (v1) {
    (*(void (**)(void))(v0 + 40))();
  }
  return v1 & 1;
}

uint64_t sub_18789A5B4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(uint64_t *a1, Swift::UInt32 a2)
{
  return closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(a1, a2, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t objectdestroy_25Tm()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in UserActivityModifier.body(content:)(uint64_t a1)
{
  return closure #2 in closure #1 in UserActivityModifier.body(content:)(a1, v1 + 16);
}

void type metadata accessor for SubscriptionView<PassthroughSubject<Any, Never>, ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>>()
{
  if (!lazy cache variable for type metadata for SubscriptionView<PassthroughSubject<Any, Never>, ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>>)
  {
    type metadata accessor for PassthroughSubject<Any, Never>();
    type metadata accessor for ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>();
    lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SubscriptionView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubscriptionView<PassthroughSubject<Any, Never>, ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>)
  {
    type metadata accessor for _ViewModifier_Content<UserActivityModifier>();
    type metadata accessor for _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>, (uint64_t)&type metadata for SceneBridge.UserActivityPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.UserActivityPreferenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<UserActivityModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<UserActivityModifier>)
  {
    lazy protocol witness table accessor for type UserActivityModifier and conformance UserActivityModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<UserActivityModifier>);
    }
  }
}

void type metadata accessor for _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>();
    lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<UserActivityModifier> and conformance _ViewModifier_Content<A>, 255, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<UserActivityModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_18789A918()
{
  return swift_deallocObject();
}

id *outlined release of UserActivityTrackingInfo?(id *a1)
{
  return a1;
}

uint64_t sub_18789A97C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_18789A9BC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSUserActivity) -> (@unowned Bool)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_18789AA30()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in UserActivityTrackingInfo.userActivityWillSave(_:)()
{
  UserActivityTrackingInfo.updateUserActivity(_:)(v0[3]);
}

uint64_t sub_18789AA98()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in UserActivityTrackingInfo.updateUserActivity(_:)(unsigned int a1, uint64_t (*a2)(void))
{
  char v4 = a2(*(void *)(v2 + 16));
  uint64_t v5 = a1;
  if (v4) {
    uint64_t v5 = 0;
  }
  return v5 | ((unint64_t)(v4 & 1) << 32);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSUserActivity) -> (@out Bool)(uint64_t a1)
{
  void (*v2)(unsigned __int8 *__return_ptr, uint64_t *);
  unsigned __int8 v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t outlined init with take of UserActivityTrackingInfo?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of (preferring: Set<String>, allowing: Set<String>)?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in View.onOpenURL(perform:)(uint64_t a1)
{
  return closure #1 in closure #1 in View.onOpenURL(perform:)(a1, *(void (**)(char *, id *))(v1 + 16));
}

{
  uint64_t v1;

  return closure #1 in closure #1 in View.onOpenURL(perform:)(a1, *(void (**)(unsigned char *))(v1 + 16));
}

void type metadata accessor for OpenURLContext?(uint64_t a1)
{
}

uint64_t sub_18789AC28()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in View.onContinueUserActivity(_:perform:)(uint64_t a1)
{
  closure #1 in closure #1 in View.onContinueUserActivity(_:perform:)(a1, *(void (**)())(v1 + 16));
}

unint64_t type metadata accessor for CVarArg()
{
  unint64_t result = lazy cache variable for type metadata for CVarArg;
  if (!lazy cache variable for type metadata for CVarArg)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void destroy for OpenURLContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  id v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  return a1;
}

uint64_t initializeWithTake for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18789B02C);
}

uint64_t sub_18789B02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18789B10C);
}

uint64_t sub_18789B10C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneBridge.UserActivityPreferenceKey()
{
  return &type metadata for SceneBridge.UserActivityPreferenceKey;
}

uint64_t sub_18789B1D8()
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type SceneBridgeReader<<<opaque return type of View.scrapeableAttachment(_:)>>.0> and conformance SceneBridgeReader<A>, 255, (void (*)(uint64_t))type metadata accessor for SceneBridgeReader<<<opaque return type of View.scrapeableAttachment(_:)>>.0>);
}

void type metadata accessor for SceneBridgeReader<<<opaque return type of View.scrapeableAttachment(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for SceneBridgeReader<<<opaque return type of View.scrapeableAttachment(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of View.scrapeableAttachment(_:)>>.0();
    type metadata accessor for SubscriptionView<PassthroughSubject<Any, Never>, ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>>();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for SceneBridgeReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SceneBridgeReader<<<opaque return type of View.scrapeableAttachment(_:)>>.0>);
    }
  }
}

void type metadata accessor for <<opaque return type of View.scrapeableAttachment(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of View.scrapeableAttachment(_:)>>.0)
  {
    type metadata accessor for SubscriptionView<PassthroughSubject<Any, Never>, ModifiedContent<_ViewModifier_Content<UserActivityModifier>, IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>>>();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.scrapeableAttachment(_:)>>.0);
    }
  }
}

uint64_t sub_18789B344(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t IndexPath.flatIndex.getter()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexPath>();
  uint64_t v6 = v5 - 8;
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v21 = v0;
  id v22 = v10;
  ((void (*)(char *, uint64_t, uint64_t, double))v10)(v4, v0, v1, v7);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  dispatch thunk of Sequence.makeIterator()();
  int v11 = &v9[*(int *)(v6 + 44)];
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  uint64_t v12 = 0;
  long long v13 = (void (**)(char *, uint64_t))(v2 + 8);
  while (1)
  {
    uint64_t v14 = *(void *)v11;
    dispatch thunk of Collection.endIndex.getter();
    if (v14 == v23[0]) {
      break;
    }
    uint64_t v15 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v17 = *v16;
    v15(v23, 0);
    v22(v4, v9, v1);
    dispatch thunk of Collection.formIndex(after:)();
    (*v13)(v4, v1);
    BOOL v18 = __OFADD__(v12, v17);
    v12 += v17;
    if (v18)
    {
      __break(1u);
      break;
    }
  }
  outlined destroy of IndexingIterator<IndexPath>((uint64_t)v9);
  uint64_t result = IndexPath.count.getter();
  uint64_t v20 = v12 + result;
  if (__OFADD__(v12, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = v20 - 1;
  if (__OFSUB__(v20, 1)) {
LABEL_10:
  }
    __break(1u);
  return result;
}

void type metadata accessor for IndexingIterator<IndexPath>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<IndexPath>)
  {
    type metadata accessor for IndexPath();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<IndexPath>);
    }
  }
}

uint64_t outlined destroy of IndexingIterator<IndexPath>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<IndexPath>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t IndexPath.parent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v6 == v5)
  {
    uint64_t v3 = 1;
  }
  else
  {
    IndexPath.dropLast()();
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, v3, 1, v2);
}

uint64_t IndexPath.isParent(of:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v26 = (char *)&v26 - v8;
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v26 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = IndexPath.count.getter();
  uint64_t result = IndexPath.count.getter();
  uint64_t v17 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    BOOL v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v14, v2, v4);
    v18(v11, a1, v4);
    if (v15 == v17)
    {
      lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v20 = v28;
      uint64_t v19 = v29;
      uint64_t v21 = v26;
      v18(v26, (uint64_t)v11, v4);
      uint64_t v22 = (uint64_t)v27;
      v18(v27, (uint64_t)v14, v4);
      if (v19 == v20) {
        char v23 = 1;
      }
      else {
        char v23 = specialized Sequence<>.starts<A>(with:)(v22);
      }
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v25(v22, v4);
      v25((uint64_t)v21, v4);
      v25((uint64_t)v11, v4);
      v25((uint64_t)v14, v4);
    }
    else
    {
      id v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v11, v4);
      v24(v14, v4);
      char v23 = 0;
    }
    return v23 & 1;
  }
  return result;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexPath>();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v8);
  int v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v37 - v14;
  BOOL v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v16(v7, a1, v4, v13);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  uint64_t v41 = v15;
  dispatch thunk of Sequence.makeIterator()();
  ((void (*)(char *, uint64_t, uint64_t))v16)(v7, v2, v4);
  uint64_t v44 = v4;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v40 = v9;
  uint64_t v17 = &v11[*(int *)(v9 + 36)];
  uint64_t v43 = lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  char v38 = v11;
  uint64_t v39 = v5 + 16;
  BOOL v18 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v37 = v17;
  while (1)
  {
    uint64_t v19 = *(void *)v17;
    dispatch thunk of Collection.endIndex.getter();
    if (v19 == v45[0]) {
      break;
    }
    uint64_t v20 = v44;
    uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v42 = *v22;
    v21(v45, 0);
    ((void (*)(char *, char *, uint64_t))v16)(v7, v11, v20);
    dispatch thunk of Collection.formIndex(after:)();
    char v23 = *v18;
    (*v18)(v7, v20);
    uint64_t v24 = (uint64_t)v41;
    uint64_t v25 = *(void *)&v41[*(int *)(v40 + 36)];
    dispatch thunk of Collection.endIndex.getter();
    if (v25 == v45[0])
    {
      outlined destroy of IndexingIterator<IndexPath>((uint64_t)v38);
      uint64_t v31 = 1;
      uint64_t v32 = v24;
      goto LABEL_10;
    }
    uint64_t v26 = v44;
    unint64_t v27 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v29 = *v28;
    v27(v45, 0);
    ((void (*)(char *, uint64_t, uint64_t))v16)(v7, v24, v26);
    dispatch thunk of Collection.formIndex(after:)();
    v23(v7, v26);
    BOOL v30 = v42 == v29;
    uint64_t v17 = v37;
    int v11 = v38;
    if (!v30)
    {
      outlined destroy of IndexingIterator<IndexPath>((uint64_t)v38);
      uint64_t v31 = 0;
      uint64_t v32 = (uint64_t)v41;
      goto LABEL_10;
    }
  }
  outlined destroy of IndexingIterator<IndexPath>((uint64_t)v11);
  uint64_t v32 = (uint64_t)v41;
  uint64_t v33 = *(void *)&v41[*(int *)(v40 + 36)];
  dispatch thunk of Collection.endIndex.getter();
  if (v33 == v45[0])
  {
    uint64_t v31 = 1;
  }
  else
  {
    uint64_t v34 = v44;
    uint64_t v35 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    v35(v45, 0);
    ((void (*)(char *, uint64_t, uint64_t))v16)(v7, v32, v34);
    dispatch thunk of Collection.formIndex(after:)();
    (*v18)(v7, v34);
    uint64_t v31 = 0;
  }
LABEL_10:
  outlined destroy of IndexingIterator<IndexPath>(v32);
  return v31;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t IndexPath.isChild(of:)()
{
  return IndexPath.isParent(of:)(v0) & 1;
}

uint64_t IndexPath.isAncestor(of:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v26 = (char *)&v26 - v8;
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v26 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = IndexPath.count.getter();
  uint64_t v16 = IndexPath.count.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v17(v14, v2, v4);
  v17(v11, a1, v4);
  if (v16 >= v15)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v11, v4);
    v22(v14, v4);
    char v23 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v19 = v28;
    uint64_t v18 = v29;
    uint64_t v20 = v26;
    v17(v26, (uint64_t)v11, v4);
    uint64_t v21 = (uint64_t)v27;
    v17(v27, (uint64_t)v14, v4);
    if (v18 == v19) {
      char v23 = 1;
    }
    else {
      char v23 = specialized Sequence<>.starts<A>(with:)(v21);
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v24(v21, v4);
    v24((uint64_t)v20, v4);
    v24((uint64_t)v11, v4);
    v24((uint64_t)v14, v4);
  }
  return v23 & 1;
}

uint64_t IndexPath.isDescendant(of:)()
{
  return IndexPath.isAncestor(of:)(v0) & 1;
}

uint64_t IndexPath.isSiblingOf(of:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v28 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  BOOL v30 = (char *)&v27 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v29 = (char *)&v27 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v27 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v27 - v15;
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v18 = v31;
  uint64_t v17 = v32;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v16, v2, v4);
  v19(v13, a1, v4);
  if (v17 == v18)
  {
    int v20 = 0;
  }
  else
  {
    uint64_t v21 = IndexPath.count.getter();
    int v20 = v21 == IndexPath.count.getter();
  }
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v13, v4);
  v22(v16, v4);
  char v23 = v29;
  v19(v29, v2, v4);
  uint64_t v24 = v30;
  v19(v30, a1, v4);
  if (v20)
  {
    uint64_t v25 = (uint64_t)v28;
    IndexPath.dropLast()();
    LOBYTE(v20) = specialized Sequence<>.starts<A>(with:)(v25);
    v22((char *)v25, v4);
  }
  v22(v24, v4);
  v22(v23, v4);
  return v20 & 1;
}

uint64_t IndexPath.sibling(atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v14[0] == v14[4]) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v2, v5);
  }
  IndexPath.dropLast()();
  uint64_t result = dispatch thunk of Collection.isEmpty.getter();
  if (result)
  {
    __break(1u);
    goto LABEL_8;
  }
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  dispatch thunk of BidirectionalCollection.index(before:)();
  uint64_t v10 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v12 = *v11;
  v10(v14, 0);
  uint64_t result = v12 + a1;
  if (__OFADD__(v12, a1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  IndexPath.appending(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexPath();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AutomaticDisclosureGroupStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 17) = 1;
  *(unsigned char *)(a2 + 24) = 2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = KeyPath;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 2;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = 0;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance AutomaticDisclosureGroupStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomaticDisclosureGroupStyle.makeBody(configuration:)(a1, a2);
}

uint64_t sub_18789C8C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.shouldBuildExpandedContentLazily.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18789C904()
{
  return EnvironmentValues.shouldBuildExpandedContentLazily.setter();
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in AutomaticDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AutomaticDisclosureGroupStyle()
{
  return &type metadata for AutomaticDisclosureGroupStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for DisclosureGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle);
  }
  return result;
}

void type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for DisclosureGroupStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>;
  if (!lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>)
  {
    type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t LimitedAvailabilityCommandContent.init<A>(erasing:)(uint64_t a1)
{
  return LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for LimitedAvailabilityCommandContentStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 96) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 112), a1);
  return v2;
}

void LimitedAvailabilityCommandContent.body.getter()
{
}

uint64_t static LimitedAvailabilityCommandContent._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesInputs.makeIndirectOutputs()();
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityCommandContent>, (uint64_t)&type metadata for LimitedAvailabilityCommandContent, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  id v1 = (id)AGSubgraphGetCurrent();
  if (!v1) {
    __break(1u);
  }
  uint64_t v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityCommandContent.IndirectOutputs.updateValue()()
{
  if (!*(void *)(v0 + 96))
  {
    id v1 = (id)AGSubgraphGetGraph();
    uint64_t v2 = (void *)AGSubgraphCreate();

    *(void *)(v0 + 96) = v2;
    id v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityCommandContent.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityCommandContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  long long v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  int v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(_DWORD *)(a1 + 24);
  char v23 = *(_DWORD *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v18 = *(_OWORD *)(v2 + 48);
  uint64_t v19 = *(_OWORD *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  char v11 = *(unsigned char *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(void *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(void *)(v13 + 64) = v8;
  *(void *)(v13 + 72) = v9;
  *(unsigned char *)(v13 + 80) = v10;
  *(unsigned char *)(v13 + 81) = v11;
  *(void *)(v13 + 88) = v12;
  swift_retain();
  uint64_t v14 = *(void *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  uint64_t v26 = v20;
  uint64_t v27 = v22;
  uint64_t v28 = v13;
  uint64_t v29 = v4;
  BOOL v30 = v5;
  uint64_t v31 = v21;
  uint64_t v32 = v3;
  uint64_t v33 = v23;
  uint64_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v26 = v14;
  uint64_t v27 = v8;
  uint64_t v24 = v34;
  uint64_t v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for Commands.body.getter in conformance LimitedAvailabilityCommandContent()
{
}

void LimitedAvailabilityCommandContentStorageBase.makeCommands(content:inputs:)()
{
}

uint64_t LimitedAvailabilityCommandContentStorageBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilityCommandContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityCommandContentStorage.makeCommands(content:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 14);
  uint64_t v10 = *(void *)(*v3 + 96);
  LODWORD(v16) = *a1;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityCommandContent>, (uint64_t)&type metadata for LimitedAvailabilityCommandContent, MEMORY[0x1E4F3F590]);
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.value.getter();
  uint64_t v13 = *(void *)(v5 + 104);
  type metadata accessor for LimitedAvailabilityCommandContentStorage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v16 = v6;
  int v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  long long v21 = v15;
  int v22 = v9;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v13 + 32))(v23, &v16, v10, v13);
}

uint64_t LimitedAvailabilityCommandContentStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityCommandContentStorage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 112);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v5, a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LimitedAvailabilityCommandContentStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityCommandContentStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityCommandContentStorage.Child.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t LimitedAvailabilityCommandContentStorage.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 96) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
}

uint64_t LimitedAvailabilityCommandContentStorage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 96) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs()
{
  unint64_t result = lazy protocol witness table cache variable for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs);
  }
  return result;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityCommandContent()
{
  return &type metadata for LimitedAvailabilityCommandContent;
}

uint64_t type metadata accessor for LimitedAvailabilityCommandContentStorageBase()
{
  return self;
}

uint64_t method lookup function for LimitedAvailabilityCommandContentStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityCommandContentStorageBase);
}

uint64_t type metadata completion function for LimitedAvailabilityCommandContentStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 96);
}

uint64_t initializeWithCopy for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v6 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v6;
  id v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  id v7 = *(void **)(a1 + 96);
  id v8 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  return a1;
}

uint64_t getEnumTagSinglePayload for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for LimitedAvailabilityCommandContent.IndirectOutputs()
{
  return &unk_1ED45EB90;
}

uint64_t type metadata accessor for LimitedAvailabilityCommandContentStorage.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityCommandContentStorage<A>.Child()
{
  return swift_getWitnessTable();
}

void TouchBar.init(content:)()
{
}

void TouchBar.init(id:content:)()
{
}

void View.touchBar<A>(_:)()
{
}

void View.touchBar<A>(content:)()
{
}

void static _TouchBarModifier._makeView(modifier:inputs:body:)()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TouchBarModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

_UNKNOWN **base witness table accessor for ViewModifier in _TouchBarModifier<A>()
{
  return &protocol witness table for _TouchBarModifier<A>;
}

uint64_t type metadata completion function for TouchBar()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TouchBar(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      int v16 = v15 - 1;
      if (v16 < 0) {
        int v16 = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for TouchBar(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18789EA24);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = a2 - 0x7FFFFFFF;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TouchBar()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined copy of TouchBarItemPresence(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for TouchBarItemPresence(uint64_t a1)
{
  return outlined consume of TouchBarItemPresence(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of TouchBarItemPresence(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TouchBarItemPresence(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TouchBarItemPresence(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TouchBarItemPresence(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TouchBarItemPresence(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of TouchBarItemPresence(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TouchBarItemPresence(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of TouchBarItemPresence(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TouchBarItemPresence(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchBarItemPresence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TouchBarItemPresence()
{
  return &type metadata for TouchBarItemPresence;
}

uint64_t type metadata completion function for _TouchBarModifier()
{
  uint64_t result = type metadata accessor for TouchBar();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TouchBar(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    int v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for TouchBar(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for TouchBar(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *assignWithCopy for TouchBar(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for TouchBar(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for TouchBar(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _TouchBarModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      int v16 = v15 - 1;
      if (v16 < 0) {
        int v16 = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _TouchBarModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18789F480);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = a2 - 0x7FFFFFFF;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _TouchBarModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18789F4C0()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TouchBarContainer()
{
  return &type metadata for TouchBarContainer;
}

uint64_t static SidebarListStyle._makeView<A>(value:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_18789F8C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchFieldPlacement.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchFieldPlacement : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchFieldPlacement.setter(*a1);
}

uint64_t sub_18789F924(unsigned __int8 *a1)
{
  return EnvironmentValues.searchFieldPlacement.setter(*a1);
}

uint64_t SidebarListStyle.BodyContent.placement.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 16);
  outlined copy of Environment<Bool>.Content(v1, v2);
  uint64_t v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  return v3;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SidebarListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>();
  type metadata accessor for SelectionManagerBox();
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>> and conformance SidebarListStyle.BodyContent<A>, (void (*)(uint64_t))type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>);
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for SidebarListBody();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance SidebarListStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

unsigned __int8 *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance OutlineRootConfiguration.Key(unsigned __int8 *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  int v3 = *result;
  if (v3 == 1)
  {
    unsigned __int8 v4 = result[1];
  }
  else
  {
    uint64_t result = (unsigned __int8 *)a2(&v5);
    LOBYTE(v3) = v5;
    unsigned __int8 v4 = BYTE1(v5);
  }
  *uint64_t v2 = v3;
  v2[1] = v4;
  return result;
}

uint64_t View.outlineRoot(_:isExpanded:)(char a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 17) = a2;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

unsigned char *closure #1 in View.outlineRoot(_:isExpanded:)(unsigned char *result, char a2, char a3)
{
  if (a3 == 2) {
    char v3 = result[1];
  }
  else {
    char v3 = a3;
  }
  *uint64_t result = a2;
  result[1] = v3 & 1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  char v3 = (void *)a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 17) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *char v3 = *(void *)a2;
    char v3 = (void *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    char v13 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v10 + v6 + 17) & ~v6, (v11 + v6 + 17) & ~v6, v4);
  }
  return v3;
}

unint64_t initializeWithTake for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unint64_t assignWithTake for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 16);
  *(void *)(v5 + 8) = v7;
  *(unsigned char *)(v5 + 16) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(unsigned __int8 *)(v11 + 80) + 17 + v5) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 17 + v6) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListStyle.BodyContent(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 17) & ~v6);
      }
      unsigned int v15 = *(unsigned __int8 *)a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SidebarListStyle.BodyContent(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1878A02D8);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 17) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *(unsigned char *)a1 = a2 + 1;
        }
      }
      return;
  }
}

void *type metadata accessor for SidebarListStyle.HasSearchField()
{
  return &unk_1ED41F6F0;
}

void type metadata accessor for External<Bool>()
{
  if (!lazy cache variable for type metadata for External<Bool>)
  {
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>);
    }
  }
}

ValueMetadata *type metadata accessor for OutlineRootConfiguration.Key()
{
  return &type metadata for OutlineRootConfiguration.Key;
}

uint64_t sub_1878A037C()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();

  return swift_getWitnessTable();
}

uint64_t sub_1878A03F0()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in View.outlineRoot(_:isExpanded:)(unsigned char *result)
{
  int v2 = *(unsigned __int8 *)(v1 + 17);
  if (v2 == 2) {
    LOBYTE(v2) = result[1];
  }
  *uint64_t result = *(unsigned char *)(v1 + 16);
  result[1] = v2 & 1;
  return result;
}

uint64_t storeEnumTagSinglePayload for OutlineRootConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878A04F0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>();
  uint64_t v39 = v6;
  MEMORY[0x1F4188790](v6);
  unsigned int v8 = (char **)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v36 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v36 - v12;
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0);
  uint64_t v38 = v14;
  MEMORY[0x1F4188790](v14);
  unint64_t v37 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v36 - v21;
  outlined init with take of BoundInputsView?(a1, (uint64_t)v43);
  outlined init with copy of SearchFieldConfiguration(a2, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with copy of SearchFieldConfiguration((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  unint64_t v23 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v24 = swift_allocObject();
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v22, v24 + v23, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with take of BoundInputsView?((uint64_t)v43, v24 + ((v18 + v23 + 7) & 0xFFFFFFFFFFFFFFF8));
  outlined retain of BoundInputsView?(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined copy of BoundInputsView?);
  outlined retain of BoundInputsView?(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined copy of BoundInputsView?);
  specialized closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(a2, (uint64_t)partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter, v24, a3);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v26 = v25;
  MEMORY[0x18C113DA0]();
  LODWORD(v18) = v13[1];
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v13, type metadata accessor for SearchFieldState);
  if (v18 == 1)
  {
    uint64_t v27 = v36;
    MEMORY[0x18C113DA0](v26);
    char v28 = *v27 & 1;
    _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v27, type metadata accessor for SearchFieldState);
  }
  else
  {
    char v28 = 2;
  }
  type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
  uint64_t v30 = a3 + *(int *)(v29 + 52);
  uint64_t v31 = v39;
  uint64_t v32 = (void *)((char *)v8 + *(int *)(v39 + 48));
  *uint64_t v32 = 0;
  v32[1] = 0;
  v32[2] = 0;
  *unsigned int v8 = 0;
  v8[1] = 0;
  uint64_t v33 = (uint64_t)v8 + *(int *)(v31 + 44);
  outlined init with take of BoundInputsView?((uint64_t)v43, (uint64_t)v42);
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)((uint64_t)v42, (uint64_t)v40, v33);
  uint64_t v34 = v37;
  outlined init with copy of SearchFieldConfiguration((uint64_t)v8, (uint64_t)&v37[*(int *)(v38 + 36)], (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  *uint64_t v34 = v28;
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v34, v30, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>);
  swift_release();
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  return outlined retain of BoundInputsView?(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined consume of BoundInputsView?);
}

uint64_t closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v26 - v12;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  uint64_t v16 = a1[2];
  uint64_t v34 = a1[3];
  uint64_t v33 = a1[4];
  uint64_t v32 = a1[5];
  uint64_t v31 = a1[6];
  uint64_t v30 = a1[7];
  uint64_t v29 = a1[8];
  uint64_t v28 = a1[9];
  uint64_t v27 = a1[10];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v18 = v17;
  MEMORY[0x18C113DA0]();
  int v19 = v13[1];
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v13, type metadata accessor for SearchFieldState);
  if (v19 == 1)
  {
    MEMORY[0x18C113DA0](v18);
    char v20 = *v10 & 1;
    _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v10, type metadata accessor for SearchFieldState);
  }
  else
  {
    char v20 = 2;
  }
  uint64_t v21 = (void *)((char *)v7 + *(int *)(v5 + 48));
  *uint64_t v21 = 0;
  v21[1] = 0;
  v21[2] = 0;
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v22 = (uint64_t)v7 + *(int *)(v5 + 44);
  outlined init with take of BoundInputsView?(v35, (uint64_t)v38);
  v37[0] = v14;
  v37[1] = v15;
  void v37[2] = v16;
  v37[3] = v34;
  v37[4] = v33;
  v37[5] = v32;
  v37[6] = v31;
  v37[7] = v30;
  v37[8] = v29;
  v37[9] = v28;
  v37[10] = v27;
  ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)((uint64_t)v38, (uint64_t)v37, v22);
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0);
  uint64_t v24 = v36;
  outlined init with copy of SearchFieldConfiguration((uint64_t)v7, (uint64_t)&v36[*(int *)(v23 + 36)], (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  *uint64_t v24 = v20;
  return _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
}

uint64_t ToolbarSearchFieldStyle.Implementation.updateCustomAccessoryState()()
{
  uint64_t v1 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SearchFieldConfiguration(v0, (uint64_t)v6, type metadata accessor for SearchFieldConfiguration);
  unsigned __int8 v7 = *(unsigned char *)(v0 + *(int *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() + 36));
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  SearchFieldState.hasCustomAccessory.setter(v7);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v3, type metadata accessor for SearchFieldState);
  return _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v6, type metadata accessor for SearchFieldConfiguration);
}

uint64_t closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter(uint64_t a1)
{
  uint64_t v43 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v42 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  int v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned __int8 v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v35 = (uint64_t)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v34 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (unsigned __int8 *)&v34 - v17;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v36 = a1;
  MEMORY[0x18C113DA0]();
  unint64_t v37 = v18;
  outlined init with copy of SearchFieldConfiguration((uint64_t)v18, (uint64_t)v15, type metadata accessor for SearchFieldState);
  *uint64_t v15 = 2;
  AttributedString.init(stringLiteral:)();
  uint64_t v39 = v11;
  int v19 = &v15[*(int *)(v11 + 36)];
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v19, v4);
  char v20 = *(void (**)(char *, char *, uint64_t))(v5 + 24);
  uint64_t v38 = v10;
  uint64_t v41 = v4;
  v20(v19, v10, v4);
  uint64_t v40 = v7;
  AttributedString.characters.getter();
  uint64_t v21 = AttributedString.CharacterView._count.getter();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v23 = v43;
  v22(v3, v43);
  AttributedString.characters.getter();
  uint64_t v24 = AttributedString.CharacterView._count.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v3, v23);
  uint64_t v26 = v24 - v21;
  if (__OFSUB__(v24, v21))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v26 < 0)
  {
    BOOL v27 = __OFSUB__(0, v26);
    uint64_t v26 = v21 - v24;
    if (v27) {
      goto LABEL_19;
    }
  }
  if (v26 != 1 || v24 < 1 || *v15 == 2) {
    goto LABEL_11;
  }
  int v28 = v15[2];
  uint64_t v29 = v35;
  outlined init with copy of SearchFieldConfiguration((uint64_t)v15, v35, type metadata accessor for SearchFieldState);
  if (v28 == 2)
  {
    int v30 = *(unsigned __int8 *)(v29 + 3);
    _s7SwiftUI16SearchFieldStateVWOhTm_1(v29, type metadata accessor for SearchFieldState);
    if (v30 == 2 || (v30 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    _s7SwiftUI16SearchFieldStateVWOhTm_1(v29, type metadata accessor for SearchFieldState);
    if ((v28 & 1) == 0) {
      goto LABEL_11;
    }
  }
  *uint64_t v15 = 1;
LABEL_11:
  uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v32 = v41;
  v31(v38, v41);
  v31(v40, v32);
  if ((v15[8] & 1) == 0)
  {
    *((_DWORD *)v15 + 1) = 0;
    unsigned char v15[8] = 1;
  }
  v15[*(int *)(v39 + 40)] = 0;
  uint64_t v33 = v37;
  if ((specialized static SearchFieldState.== infix(_:_:)(v37, (unsigned __int8 *)v15) & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v15, type metadata accessor for SearchFieldState);
  return _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v33, type metadata accessor for SearchFieldState);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarSearchFieldStyle.Implementation()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void *initializeBufferWithCopyOfBuffer for ToolbarSearchFieldStyle.Implementation(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unsigned __int8 v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    unsigned __int8 v7 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v44 = &v11[v13];
    uint64_t v45 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v45, v44, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    id v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    int v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
    uint64_t v20 = v19[6];
    uint64_t v21 = (char *)v7 + v20;
    uint64_t v22 = (char *)a2 + v20;
    int v23 = v22[8];
    if (v23 == 255)
    {
      *(void *)uint64_t v21 = *(void *)v22;
      unsigned char v21[8] = v22[8];
    }
    else
    {
      char v24 = v23 & 1;
      uint64_t v25 = *(void *)v22;
      outlined copy of PlatformItemCollection.Storage(*(void *)v22, v23 & 1);
      *(void *)uint64_t v21 = v25;
      unsigned char v21[8] = v24;
    }
    *((unsigned char *)v7 + v19[7]) = *((unsigned char *)a2 + v19[7]);
    uint64_t v26 = v19[8];
    BOOL v27 = (char *)v7 + v26;
    int v28 = (char *)a2 + v26;
    uint64_t v29 = *(void *)((char *)a2 + v26);
    uint64_t v30 = *(void *)((char *)a2 + v26 + 8);
    char v31 = *((unsigned char *)a2 + v26 + 16);
    outlined copy of Text.Storage(v29, v30, v31);
    *(void *)BOOL v27 = v29;
    *((void *)v27 + 1) = v30;
    v27[16] = v31;
    *((void *)v27 + 3) = *((void *)v28 + 3);
    uint64_t v32 = a3[5];
    uint64_t v33 = (char *)v7 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = *(void *)v34;
    LOBYTE(v30) = v34[8];
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v35, v30);
    *(void *)uint64_t v33 = v35;
    v33[8] = v30;
    uint64_t v36 = a3[6];
    unint64_t v37 = (char *)v7 + v36;
    uint64_t v38 = (char *)a2 + v36;
    uint64_t v39 = *(void *)v38;
    LOBYTE(v30) = v38[8];
    outlined copy of Environment<Bool>.Content(*(void *)v38, v30);
    *(void *)unint64_t v37 = v39;
    v37[8] = v30;
    uint64_t v40 = a3[8];
    *((unsigned char *)v7 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v41 = (char *)v7 + v40;
    uint64_t v42 = *(void *)((char *)a2 + v40);
    LOBYTE(v30) = *((unsigned char *)a2 + v40 + 8);
    outlined copy of Environment<Bool>.Content(v42, v30);
    *(void *)uint64_t v41 = v42;
    v41[8] = v30;
    *((unsigned char *)v7 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return v7;
}

void *assignWithCopy for ToolbarSearchFieldStyle.Implementation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  void v8[2] = *((unsigned char *)a2 + v7 + 2);
  v8[3] = *((unsigned char *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  unsigned char v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = *((unsigned __int8 *)a1 + v19 + 8);
  int v23 = *((unsigned __int8 *)a2 + v19 + 8);
  if (v22 == 255)
  {
    if (v23 == 255)
    {
      uint64_t v25 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v21[8];
      *(void *)uint64_t v20 = v25;
    }
    else
    {
      char v30 = v23 & 1;
      uint64_t v31 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(v31, v23 & 1);
      *(void *)uint64_t v20 = v31;
      *(unsigned char *)(v20 + 8) = v30;
    }
  }
  else if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
    char v24 = v21[8];
    *(void *)uint64_t v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = v24;
  }
  else
  {
    char v26 = v23 & 1;
    uint64_t v27 = *(void *)v21;
    outlined copy of PlatformItemCollection.Storage(v27, v23 & 1);
    uint64_t v28 = *(void *)v20;
    char v29 = *(unsigned char *)(v20 + 8);
    *(void *)uint64_t v20 = v27;
    *(unsigned char *)(v20 + 8) = v26;
    outlined consume of PlatformItemCollection.Storage(v28, v29);
  }
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v32 = v18[8];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)((char *)a2 + v32);
  uint64_t v36 = *(void *)((char *)a2 + v32 + 8);
  char v37 = *((unsigned char *)a2 + v32 + 16);
  outlined copy of Text.Storage(v35, v36, v37);
  uint64_t v38 = *(void *)v33;
  uint64_t v39 = *((void *)v33 + 1);
  char v40 = v33[16];
  *(void *)uint64_t v33 = v35;
  *((void *)v33 + 1) = v36;
  v33[16] = v37;
  outlined consume of Text.Storage(v38, v39, v40);
  *((void *)v33 + 3) = *((void *)v34 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[5];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(void *)v43;
  LOBYTE(v36) = v43[8];
  outlined copy of Environment<Bool>.Content(*(void *)v43, v36);
  uint64_t v45 = *(void *)v42;
  uint64_t v46 = v42[8];
  *(void *)uint64_t v42 = v44;
  v42[8] = v36;
  outlined consume of Environment<Bool?>.Content(v45, v46);
  uint64_t v47 = a3[6];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(void *)v49;
  LOBYTE(v36) = v49[8];
  outlined copy of Environment<Bool>.Content(*(void *)v49, v36);
  uint64_t v51 = *(void *)v48;
  uint64_t v52 = v48[8];
  *(void *)uint64_t v48 = v50;
  v48[8] = v36;
  outlined consume of Environment<Bool?>.Content(v51, v52);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v53 = a3[8];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  uint64_t v56 = *(void *)v55;
  LOBYTE(v36) = v55[8];
  outlined copy of Environment<Bool>.Content(*(void *)v55, v36);
  uint64_t v57 = *(void *)v54;
  uint64_t v58 = v54[8];
  *(void *)uint64_t v54 = v56;
  v54[8] = v36;
  outlined consume of Environment<Bool?>.Content(v57, v58);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

void *initializeWithTake for ToolbarSearchFieldStyle.Implementation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *uint64_t v9 = *((unsigned char *)a2 + v8);
  v9[1] = *((unsigned char *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((unsigned char *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  uint64_t v16 = v11[11];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  id v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v20 = v19[6];
  uint64_t v21 = (char *)a1 + v20;
  int v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  unsigned char v21[8] = v22[8];
  *((unsigned char *)a1 + v19[7]) = *((unsigned char *)a2 + v19[7]);
  uint64_t v23 = v19[8];
  char v24 = (_OWORD *)((char *)a1 + v23);
  uint64_t v25 = (_OWORD *)((char *)a2 + v23);
  long long v26 = v25[1];
  *char v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[5];
  uint64_t v28 = a3[6];
  char v29 = (char *)a1 + v27;
  char v30 = (char *)a2 + v27;
  *(void *)char v29 = *(void *)v30;
  v29[8] = v30[8];
  uint64_t v31 = (char *)a1 + v28;
  uint64_t v32 = (char *)a2 + v28;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

void *assignWithTake for ToolbarSearchFieldStyle.Implementation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  unsigned char v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = *((unsigned __int8 *)a1 + v19 + 8);
  if (v22 != 255)
  {
    int v23 = v21[8];
    if (v23 != 255)
    {
      uint64_t v24 = *(void *)v20;
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v23 & 1;
      outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v20);
  }
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v21[8];
LABEL_6:
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v25 = v18[8];
  long long v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  LOBYTE(v25) = *((unsigned char *)a2 + v25 + 16);
  uint64_t v28 = *(void *)v26;
  uint64_t v29 = *((void *)v26 + 1);
  char v30 = v26[16];
  *(_OWORD *)long long v26 = *(_OWORD *)v27;
  v26[16] = v25;
  outlined consume of Text.Storage(v28, v29, v30);
  *((void *)v26 + 3) = *((void *)v27 + 3);
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[5];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = *(void *)v33;
  LOBYTE(v33) = v33[8];
  uint64_t v35 = *(void *)v32;
  uint64_t v36 = v32[8];
  *(void *)uint64_t v32 = v34;
  v32[8] = (char)v33;
  outlined consume of Environment<Bool?>.Content(v35, v36);
  uint64_t v37 = a3[6];
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = *(void *)v39;
  LOBYTE(v39) = v39[8];
  uint64_t v41 = *(void *)v38;
  uint64_t v42 = v38[8];
  *(void *)uint64_t v38 = v40;
  v38[8] = (char)v39;
  outlined consume of Environment<Bool?>.Content(v41, v42);
  uint64_t v43 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = *(void *)v45;
  LOBYTE(v45) = v45[8];
  uint64_t v47 = *(void *)v44;
  uint64_t v48 = v44[8];
  *(void *)uint64_t v44 = v46;
  v44[8] = (char)v45;
  outlined consume of Environment<Bool?>.Content(v47, v48);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarSearchFieldStyle.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878A1E70);
}

uint64_t sub_1878A1E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarSearchFieldStyle.Implementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878A1F44);
}

uint64_t sub_1878A1F44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1878A2004()
{
  return lazy protocol witness table accessor for type ToolbarSearchFieldStyle.Implementation and conformance ToolbarSearchFieldStyle.Implementation(&lazy protocol witness table cache variable for type ToolbarSearchFieldStyle.Implementation and conformance ToolbarSearchFieldStyle.Implementation, (void (*)(uint64_t))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
}

void *partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter(a1, v6, a2);
}

uint64_t specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (*(unsigned char *)(a4 + *(int *)(v6 + 28)) == 1)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v18 = *(unsigned int *)(a1 + 48);
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    uint64_t v20 = a1;
    uint64_t v19 = *(void *)a1;
    uint64_t v8 = *(void *)(v20 + 8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v21 = v11;
    uint64_t v7 = v19;
    uint64_t v16 = v24;
    uint64_t v13 = v18;
  }
  v26[0] = v7;
  v26[1] = v8;
  void v26[2] = v9;
  void v26[3] = v10;
  v26[4] = v11;
  v26[5] = v12;
  v26[6] = v13;
  v26[7] = v14;
  v26[8] = v15;
  v26[9] = v16;
  v26[10] = v17;
  uint64_t v22 = v7;
  a2(v26);
  return outlined consume of BoundInputsView?(v22, v8, v9, v10, v11);
}

uint64_t partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:));
}

uint64_t sub_1878A2238()
{
  return swift_deallocObject();
}

uint64_t specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (*(unsigned char *)(a4 + *(int *)(v6 + 36)) == 1)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v18 = *(unsigned int *)(a1 + 48);
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    uint64_t v20 = a1;
    uint64_t v19 = *(void *)a1;
    uint64_t v8 = *(void *)(v20 + 8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v21 = v11;
    uint64_t v7 = v19;
    uint64_t v16 = v24;
    uint64_t v13 = v18;
  }
  v26[0] = v7;
  v26[1] = v8;
  void v26[2] = v9;
  void v26[3] = v10;
  v26[4] = v11;
  v26[5] = v12;
  v26[6] = v13;
  v26[7] = v14;
  v26[8] = v15;
  v26[9] = v16;
  v26[10] = v17;
  uint64_t v22 = v7;
  a2(v26);
  return outlined consume of BoundInputsView?(v22, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter()
{
  type metadata accessor for ToolbarSearchFieldStyle.Implementation();

  return closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter();
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter()
{
  return closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter(*(void *)(v0 + 16));
}

uint64_t objectdestroy_13Tm()
{
  uint64_t v1 = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + v2;
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  unint64_t v6 = v0 + v2 + v5 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = type metadata accessor for SearchFieldConfiguration(0);
  unint64_t v9 = v0 + v2 + *(int *)(v8 + 24);
  int v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v9, v10 & 1);
  }
  outlined consume of Text.Storage(*(void *)(v3 + *(int *)(v8 + 32)), *(void *)(v3 + *(int *)(v8 + 32) + 8), *(unsigned char *)(v3 + *(int *)(v8 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool?>.Content(*(void *)(v3 + v1[5]), *(unsigned __int8 *)(v3 + v1[5] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v3 + v1[6]), *(unsigned __int8 *)(v3 + v1[6] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v3 + v1[8]), *(unsigned __int8 *)(v3 + v1[8] + 8));

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:));
}

uint64_t partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() - 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5, v6, v7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)()
{
  return ToolbarSearchFieldStyle.Implementation.updateCustomAccessoryState()();
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v1 = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  unint64_t v3 = (*(void *)(*((void *)v1 - 1) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = v4 + v6 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v10 = v4 + *(int *)(v9 + 24);
  int v11 = *(unsigned __int8 *)(v10 + 8);
  if (v11 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v10, v11 & 1);
  }
  outlined consume of Text.Storage(*(void *)(v4 + *(int *)(v9 + 32)), *(void *)(v4 + *(int *)(v9 + 32) + 8), *(unsigned char *)(v4 + *(int *)(v9 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool?>.Content(*(void *)(v4 + v1[5]), *(unsigned __int8 *)(v4 + v1[5] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v4 + v1[6]), *(unsigned __int8 *)(v4 + v1[6] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v4 + v1[8]), *(unsigned __int8 *)(v4 + v1[8] + 8));
  if (*(void *)(v0 + v3))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() - 8);
  uint64_t v6 = v2
     + ((*(void *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8);

  return closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter(a1, v6, a2);
}

uint64_t sub_1878A29AC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBi, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValue, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>);
}

void *closure #1 in UIKitResponderGestureRecognizer.name.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
  uint64_t result = (void *)swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(v3 + 8) + 80))(*result);
    uint64_t v7 = v6;
    uint64_t result = (void *)swift_release();
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
  return result;
}

id UIKitResponderGestureRecognizer.didAttach(to:)(id result)
{
  if (result)
  {
    type metadata accessor for UIKitResponderEventBindingBridge();
    uint64_t result = (id)swift_dynamicCastClass();
    if (result)
    {
      return objc_msgSend(v1, sel_addTarget_action_, result, sel_flushActions);
    }
  }
  return result;
}

uint64_t UIKitResponderGestureRecognizer.isKind(of:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITapGestureRecognizer) == a1)
  {
    if (swift_weakLoadStrong())
    {
      AnyGestureResponder.requiredTapCount.getter();
      char v7 = v6;
      swift_release();
      if ((v7 & 1) == 0) {
        return 1;
      }
    }
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8.receiver = v1;
  v8.super_class = ObjectType;
  return (uint64_t)objc_msgSendSuper2(&v8, sel_isKindOfClass_, ObjCClassFromMetadata);
}

Swift::UInt __swiftcall UIKitResponderGestureRecognizer.numberOfTapsRequired()()
{
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  Swift::UInt v0 = AnyGestureResponder.requiredTapCount.getter();
  char v2 = v1;
  swift_release();
  if (v2) {
    return 0;
  }
  if ((v0 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return 0;
  }
  return v0;
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  void (*v14)(char *__return_ptr, uint64_t, uint64_t);
  char v15;
  unsigned __int8 v16;
  UIView *v17;
  UIView *v18;
  uint64_t v19;
  void *v20;
  UIView *v21;
  UIGestureRecognizer *v22;
  uint64_t v23;
  void (*v24)(char *__return_ptr, uint64_t, uint64_t);
  char v25;
  char v26;
  char v28;
  objc_super v29;
  char v30;
  objc_super v31;

  char v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = &v1[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v31.receiver = v2;
    v31.super_class = ObjectType;
    uint64_t v16 = [(UIGestureRecognizer *)&v31 canPreventGestureRecognizer:a1];
    return v16 & 1;
  }
  char v7 = (uint64_t *)Strong;
  uint64_t v8 = *((void *)v5 + 1);
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9
    || (uint64_t v10 = v9 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder,
        (int v11 = (uint64_t *)swift_weakLoadStrong()) == 0))
  {
    uint64_t v17 = [(UIGestureRecognizer *)a1 view];
    if (v17)
    {
      uint64_t v18 = v17;
      type metadata accessor for HostingScrollView();
      uint64_t v19 = swift_dynamicCastClass();
      if (v19 && (uint64_t v20 = (void *)v19, swift_weakLoadStrong()))
      {
        id v21 = v18;
        uint64_t v22 = (UIGestureRecognizer *)objc_msgSend(v20, sel_panGestureRecognizer);

        if (v22 == a1)
        {
          swift_retain();
          uint64_t v28 = AnyGestureResponder.isCancellable.getter();
          swift_release();

          if (v28) {
            uint64_t v15 = 2;
          }
          else {
            uint64_t v15 = 0;
          }
          goto LABEL_5;
        }

        swift_release();
      }
      else
      {
      }
    }
    int v23 = *v7;
    if (AnyGestureResponder.isCancellable.getter())
    {
      uint64_t v24 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72);
      v24(&v30, v23, v8);
      if (v30 != 1 && UIGestureRecognizer.isCancellingGesture.getter()) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v24 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72);
    }
    v24(&v30, v23, v8);
    if (v30 != 2)
    {
      uint64_t v25 = AnyGestureResponder.isPrioritized(over:)(a1, v23, v8);
      if (v25 != 2)
      {
        long long v26 = v25;
        swift_release();
        uint64_t v16 = v26 & 1;
        return v16 & 1;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextMultiTapRecognizer);
      if (![(UIGestureRecognizer *)a1 isKindOfClass:swift_getObjCClassFromMetadata()])
      {
        v29.receiver = v2;
        v29.super_class = ObjectType;
        uint64_t v16 = [(UIGestureRecognizer *)&v29 canPreventGestureRecognizer:a1];
        goto LABEL_6;
      }
    }
LABEL_22:
    swift_release();
    uint64_t v16 = 0;
    return v16 & 1;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *v11;
  uint64_t v14 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v12 + 72);
  swift_retain();
  v14(&v30, v13, v12);
  swift_release();
  uint64_t v15 = v30;
LABEL_5:
  char v30 = v15;
  uint64_t v16 = AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)();
  swift_release();
LABEL_6:
  swift_release();
  return v16 & 1;
}

BOOL UIGestureRecognizer.isCancellingGesture.getter()
{
  id v1 = objc_msgSend(v0, sel_name);
  if (v1)
  {
    char v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == 0xD00000000000001ELL && v5 == 0x800000018832BD00) {
      goto LABEL_12;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
  }
  id v7 = objc_msgSend(v0, sel_name);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v9 == 0xD00000000000002ALL && v11 == 0x800000018832BCD0) {
      goto LABEL_12;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v12) {
      return 1;
    }
  }
  id v13 = objc_msgSend(v0, sel_name);
  if (!v13) {
    goto LABEL_15;
  }
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == 0xD00000000000002ALL && v17 == 0x800000018832BCA0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 1;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v19) {
    return 1;
  }
LABEL_15:
  self;
  return swift_dynamicCastObjCClass() != 0;
}

uint64_t AnyGestureResponder.isPrioritized(over:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = 2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 72))(&v12, a2, a3);
  if (v12 != 1
    && (getter of isLongPress #1 in AnyGestureResponder.isPrioritized(over:)(v6, a1) & 1) == 0
    || (id v7 = objc_msgSend(a1, sel_view)) == 0)
  {
    swift_release();
    return 2;
  }
  uint64_t v8 = v7;
  if (!dispatch thunk of ViewResponder.gestureContainer.getter())
  {
    swift_release();

    return 2;
  }
  swift_unknownObjectRetain();
  uint64_t v9 = _UIGestureRecognizerContainerCompare();
  char v10 = getter of isLongPress #1 in AnyGestureResponder.isPrioritized(over:)(v6, a1);
  swift_release();
  swift_unknownObjectRelease_n();

  if (v10) {
    return 2 * (v9 != -1);
  }
  if (v9 == -1) {
    return 1;
  }
  return 2;
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.canBePrevented(by:)(UIGestureRecognizer *by)
{
  void (*v10)(char *__return_ptr, uint64_t, uint64_t);
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  char v14;
  objc_super v16;
  char v17;
  objc_super v18;

  char v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = &v1[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v7 = (uint64_t *)Strong;
    uint64_t v8 = *((void *)v5 + 1);
    if (swift_dynamicCastClass() && swift_weakLoadStrong())
    {
      uint64_t v9 = *v7;
      char v10 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72);
      swift_retain();
      v10(&v17, v9, v8);
      uint64_t v11 = AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)();
      swift_release();
      swift_release_n();
    }
    else
    {
      uint64_t v12 = *v7;
      (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72))(&v17, *v7, v8);
      if (v17 == 2)
      {
        swift_release();
        uint64_t v11 = 0;
      }
      else
      {
        id v13 = AnyGestureResponder.isPrioritized(over:)(by, v12, v8);
        if (v13 == 2)
        {
          v16.receiver = v2;
          v16.super_class = ObjectType;
          uint64_t v11 = [(UIGestureRecognizer *)&v16 canBePreventedByGestureRecognizer:by];
          swift_release();
        }
        else
        {
          uint64_t v14 = v13;
          swift_release();
          uint64_t v11 = (v14 & 1) == 0;
        }
      }
    }
  }
  else
  {
    v18.receiver = v2;
    v18.super_class = ObjectType;
    uint64_t v11 = [(UIGestureRecognizer *)&v18 canBePreventedByGestureRecognizer:by];
  }
  return v11 & 1;
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.shouldRequireFailure(of:)(UIGestureRecognizer *of)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (swift_weakLoadStrong())
  {
    if (swift_dynamicCastClass() && swift_weakLoadStrong())
    {
      char v4 = AnyGestureResponder.shouldRequireFailure(of:)();
      swift_release();
      swift_release();
      return v4 & 1;
    }
    if ((AnyGestureResponder.isCancellable.getter() & 1) == 0) {
      goto LABEL_12;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
LABEL_7:
      swift_release();
      return 1;
    }
    uint64_t v6 = [(UIGestureRecognizer *)of name];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      if (v8 == 0xD000000000000012 && v10 == 0x800000018832BD20)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      if (v11) {
        return 1;
      }
    }
    else
    {
LABEL_12:
      swift_release();
    }
  }
  v12.receiver = v1;
  v12.super_class = ObjectType;
  return [(UIGestureRecognizer *)&v12 shouldRequireFailureOfGestureRecognizer:of];
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.shouldBeRequiredToFail(by:)(UIGestureRecognizer *by)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (swift_weakLoadStrong())
  {
    if (swift_dynamicCastClass() && swift_weakLoadStrong())
    {
      char v4 = AnyGestureResponder.shouldRequireFailure(of:)();
      swift_release();
      swift_release();
      return v4 & 1;
    }
    swift_release();
  }
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return [(UIGestureRecognizer *)&v6 shouldBeRequiredToFailByGestureRecognizer:by];
}

uint64_t UIKitResponderGestureRecognizer.__ivar_destroyer()
{
  return outlined destroy of weak AnyGestureResponder?(v0 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder);
}

uint64_t type metadata accessor for UIKitResponderGestureRecognizer()
{
  return self;
}

uint64_t getter of isLongPress #1 in AnyGestureResponder.isPrioritized(over:)(uint64_t a1, id a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 2)
  {
    id v4 = objc_msgSend(a2, sel_name);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      if (v6 == 0xD000000000000012 && v8 == 0x800000018832BD20)
      {
        swift_bridgeObjectRelease();
        char v9 = 1;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v9 = 0;
    }
    swift_beginAccess();
    *uint64_t v3 = v9 & 1;
  }
  else
  {
    char v9 = v2 & 1;
  }
  return v9 & 1;
}

void specialized UIKitResponderGestureRecognizer.responder.didset()
{
  id v1 = v0;
  int v2 = &v0[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t *__return_ptr, void))(*((void *)v2 + 1) + 16))(&v6, *Strong);
    swift_release();
    swift_bridgeObjectRelease();
    _GraphInputs.interfaceIdiom.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if (AnyInterfaceIdiom.accepts<A>(_:)())
    {
      type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_188351940;
      *(NSNumber *)(v4 + 32) = Int._bridgeToObjectiveC()();
      uint64_t v6 = v4;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v1, sel_setAllowedTouchTypes_, isa);
    }
  }
}

BOOL specialized UIKitResponderGestureRecognizer._gestureRecognizer(_:canBeCancelledBy:)(void *a1)
{
  swift_getObjectType();
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v7 = swift_dynamicCastClass();
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = v7 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
    uint64_t v9 = swift_weakLoadStrong();
    if (!v9
      || (uint64_t v10 = (void *)v9,
          uint64_t v11 = *(void *)(v8 + 8),
          (*(void (**)(char *__return_ptr, void, uint64_t))(v6 + 72))((char *)&v15 + 1, *v5, v6),
          int v12 = BYTE1(v15),
          (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(v11 + 72))(&v15, *v10, v11),
          swift_release(),
          v15 != 2)
      && v12 != 2)
    {
LABEL_9:
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITapGestureRecognizer);
      if ((objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata()) & 1) == 0)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UILongPressGestureRecognizer);
        if (!objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata()))
        {
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextMultiTapRecognizer);
          if (!objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata())
            && (AnyGestureResponder.isCancellable.getter() & 1) != 0)
          {
            BOOL v13 = UIGestureRecognizer.isCancellingGesture.getter();
            swift_release();
            return v13;
          }
        }
      }
    }
    swift_release();
  }
  return 0;
}

uint64_t sub_1878A4444()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in UIKitResponderGestureRecognizer.name.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in UIKitResponderGestureRecognizer.name.getter(*(void *)(v1 + 16), a1);
}

void ViewRendererHost.accessibilityFocus(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  uint64_t v6 = (void *)ViewGraph.subscript.getter();
  swift_release();
  if (!v6 || !*v6) {
    return;
  }
  swift_retain();
  unint64_t v7 = specialized AccessibilityRelationshipScope.nodes<A>(for:with:in:)(3u, a1, a2);
  unint64_t v8 = v7;
  if (!(v7 >> 62))
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_5;
    }
LABEL_35:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_35;
  }
LABEL_5:
  unint64_t v10 = v8 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v11 = 4;
  while (1)
  {
    if (v10) {
      int v12 = (char *)MEMORY[0x18C117680](v11 - 4, v8);
    }
    else {
      int v12 = (char *)*(id *)(v8 + 8 * v11);
    }
    BOOL v13 = v12;
    uint64_t v14 = v11 - 3;
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    unsigned __int8 v25 = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v25, &v26);
    if (v26 != 3) {
      break;
    }

    ++v11;
    if (v14 == v9)
    {
      unint64_t v15 = 0;
      while (1)
      {
        if (v10)
        {
          id v16 = (id)MEMORY[0x18C117680](v15, v8);
          BOOL v17 = __OFADD__(v15++, 1);
          if (v17) {
            goto LABEL_38;
          }
        }
        else
        {
          if (v15 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_39;
          }
          id v16 = *(id *)(v8 + 32 + 8 * v15);
          BOOL v17 = __OFADD__(v15++, 1);
          if (v17)
          {
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return;
          }
        }
        uint64_t v18 = (char *)v16;
        unsigned __int8 v22 = 4;
        BOOL v13 = v18;
        AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v22, &v23);
        if (v23 != 3) {
          break;
        }
        while (1)
        {
          char v19 = (void *)MEMORY[0x18C119DF0](&v13[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

          if (!v19) {
            break;
          }
          BOOL v13 = v19;
          unsigned __int8 v22 = 4;
          AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v22, &v23);
          if (v23 != 3) {
            goto LABEL_31;
          }
        }

        if (v15 == v9)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return;
        }
      }
LABEL_31:
      swift_bridgeObjectRelease_n();

      AccessibilityNode.platformElement.getter();
      if (v20) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease_n();
  AccessibilityNode.platformElement.getter();
  if (v20) {
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v20 = v13;
LABEL_27:
  id v21 = v20;
  if (one-time initialization token for focusSupportingTechnologies != -1) {
    swift_once();
  }
  __int16 v24 = static AccessibilityTechnologies.focusSupportingTechnologies;
  specialized static AccessibilityFocus.move(to:for:)(v21, &v24);

  swift_release();
}

uint64_t View.accessibilityFocusable<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityRelationship<A>(_:id:in:)(3, a1, a2, a3, a4, a5);
}

void AccessibilityRequestFocusAction.callAsFunction<A>(id:in:)(uint64_t a1, uint64_t a2)
{
  double v6 = MEMORY[0x1F4188790](a1);
  unint64_t v7 = *v2;
  if (*v2)
  {
    (*(void (**)(unsigned char *, double))(v5 + 16))(&v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v6);
    AnyHashable.init<A>(_:)();
    v7(v9, a2);
    outlined destroy of AnyHashable((uint64_t)v9);
  }
}

uint64_t EnvironmentValues.requestAccessibilityFocus.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>);
    }
  }
}

double key path getter for EnvironmentValues.requestAccessibilityFocus : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.requestAccessibilityFocus : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t sub_1878A4B48()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for AccessibilityRequestFocusKey()
{
  return &type metadata for AccessibilityRequestFocusKey;
}

uint64_t View.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(unsigned char *)(v14 + 48) = a3 & 1;
  *(void *)(v14 + 56) = a4;
  uint64_t v16 = v14;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B78], (uint64_t)&v16, a5, a6, MEMORY[0x1E4F40B78], a7);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityHint(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))View.accessibilityHint(_:isEnabled:));
}

uint64_t View.accessibilityHint<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityHint<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))View.accessibilityHint(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityHint(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(unsigned char *)(v14 + 48) = a3 & 1;
  *(void *)(v14 + 56) = a4;
  uint64_t v16 = v14;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B78], (uint64_t)&v16, a5, a6, a7);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint(_:isEnabled:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  ModifiedContent<>.accessibilityHint(_:isEnabled:)(v6, v7, v9 & 1, v11, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  ModifiedContent<>.accessibilityHint(_:isEnabled:)(v10, v11, v13 & 1, v15, a2, a3, a4);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityHint(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(unsigned char *)(v16 + 48) = a3 & 1;
  *(void *)(v16 + 56) = a4;
  uint64_t v18 = v16;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  lazy protocol witness table accessor for type [Text] and conformance [A]();
  swift_bridgeObjectRetain();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v18, a5, a6, a7, a8);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type [Text] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Text] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Text] and conformance [A])
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Text] and conformance [A]);
  }
  return result;
}

uint64_t TabContent.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityHint(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))TabContent.accessibilityHint(_:isEnabled:));
}

uint64_t View.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  a8(v9, v10);
  outlined consume of Text.Storage(v9, v11, v13);

  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityHint<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityHint<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))TabContent.accessibilityHint(_:isEnabled:));
}

uint64_t View.accessibilityHint<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v10 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  a7();
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityHint(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  View.accessibilityHint(_:)(v8, v9, v11 & 1, v13, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  ModifiedContent<>.accessibilityHint(_:)(v8, v9, v11 & 1, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1878A55D0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>()
{
  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>)
  {
    lazy protocol witness table accessor for type [Text] and conformance [A]();
    unint64_t v0 = type metadata accessor for AccessibilityDetachedPropertyModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>);
    }
  }
}

uint64_t sub_1878A56A0()
{
  return swift_getWitnessTable();
}

uint64_t SubscriptionView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t SubscriptionView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*SubscriptionView.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SubscriptionView.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SubscriptionView.publisher.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*SubscriptionView.publisher.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for SubscriptionView.action : <A, B>SubscriptionView<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 32);
  uint64_t v6 = *(void *)(a3 + a2 - 24);
  uint64_t v7 = *(void *)(a3 + a2 - 16);
  uint64_t v8 = *(void *)(a3 + a2 - 8);
  uint64_t v9 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SubscriptionView() + 56));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  char v12 = (uint64_t (*)())swift_allocObject();
  *((void *)v12 + 2) = v5;
  *((void *)v12 + 3) = v6;
  *((void *)v12 + 4) = v7;
  *((void *)v12 + 5) = v8;
  *((void *)v12 + 6) = v11;
  *((void *)v12 + 7) = v10;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> ();
  a4[1] = v12;
  return swift_retain();
}

uint64_t key path setter for SubscriptionView.action : <A, B>SubscriptionView<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 32);
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = *(void *)(a4 + a3 - 16);
  uint64_t v8 = *(void *)(a4 + a3 - 8);
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = (uint64_t (*)())swift_allocObject();
  *((void *)v11 + 2) = v5;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v7;
  *((void *)v11 + 5) = v8;
  *((void *)v11 + 6) = v10;
  *((void *)v11 + 7) = v9;
  char v12 = (uint64_t (**)())(a2 + *(int *)(type metadata accessor for SubscriptionView() + 56));
  swift_retain();
  uint64_t result = swift_release();
  *char v12 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ());
  v12[1] = v11;
  return result;
}

uint64_t SubscriptionView.action.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  swift_retain();
  return v2;
}

uint64_t SubscriptionView.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 56));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*SubscriptionView.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static SubscriptionView._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *((_DWORD *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 3);
  long long v8 = *a1;
  int v9 = v5;
  uint64_t v10 = v6;
  return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a5 + 40))(&v8, a3, a5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SubscriptionView<A, B>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SubscriptionView._viewListCount(inputs:)(a1, a2, *(void *)(a2 + 24), a4, *(void *)(a2 + 40));
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance ActionDispatcherSubscriber<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

_UNKNOWN **base witness table accessor for View in SubscriptionView<A, B>()
{
  return &protocol witness table for SubscriptionView<A, B>;
}

uint64_t sub_1878A5B40()
{
  return 32;
}

__n128 sub_1878A5B4C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubscriptionView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    char v19 = (void *)((v11 + v18) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = v19[1];
    id v21 = (void *)((v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8);
    *id v21 = *v19;
    v21[1] = v20;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithTake for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(_OWORD *)((*(void *)(v9 + 24) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v9 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

_UNKNOWN **sub_1878A5E04()
{
  return &protocol witness table for SubscriptionView<A, B>;
}

uint64_t assignWithCopy for SubscriptionView.Subscriber(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SubscriptionView.Subscriber(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1878A5EC0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for SubscriptionView() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[15], v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1878A6000()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (int *)(type metadata accessor for SubscriptionView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  unint64_t v5 = v4 + *(void *)(*(void *)v3 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v9, v2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v9 + v3[15], v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_1878A6204()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_1878A6264()
{
  return swift_deallocObject();
}

void *assignWithCopy for ActionDispatcherSubscriber(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for ActionDispatcherSubscriber(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 28);
  unint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ActionDispatcherSubscriber(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1878A6410(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CombineIdentifier();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

void *sub_1878A64C0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CombineIdentifier();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in ActionDispatcherSubscriber<A>()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t sub_1878A6574()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for ActionDispatcherSubscriber() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  unint64_t v5 = (v3 + *(void *)(*(void *)v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + v3;
  swift_release();
  uint64_t v7 = v6 + v2[9];
  uint64_t v8 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t NavigationStackViewPosition.description.getter()
{
  _StringGuts.grow(_:)(104);
  v1._uint64_t countAndFlagsBits = 0xD000000000000028;
  v1._object = (void *)0x800000018832BE40;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x79656B202020200ALL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = NavigationState.StackContent.Key.debugDescription.getter(*(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x800000018832BE70;
  v5._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0xD000000000000018;
  v7._object = (void *)0x800000018832BE90;
  String.append(_:)(v7);
  if (*(unsigned char *)(v0 + 40)) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 40)) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationStackViewPosition()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationStackViewPosition()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt v4 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 40);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationStackViewPosition()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationStackViewPosition(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return specialized static NavigationStackViewPosition.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t specialized static NavigationStackViewPosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      ? (BOOL v2 = *(void *)(a1 + 24) == *(void *)(a2 + 24))
      : (BOOL v2 = 0),
        v2 && *(void *)(a1 + 32) == *(void *)(a2 + 32)))
  {
    return (((*(unsigned char *)(a1 + 40) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 40)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t View.menuStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MenuStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

void protocol witness for View.body.getter in conformance MenuStyleConfiguration.Label()
{
}

void protocol witness for View.body.getter in conformance MenuStyleConfiguration.Content()
{
}

uint64_t key path getter for MenuStyleConfiguration.primaryAction : MenuStyleConfiguration@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    Swift::UInt8 v6 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  }
  else
  {
    Swift::UInt8 v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for MenuStyleConfiguration.primaryAction : MenuStyleConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    Swift::UInt8 v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    Swift::UInt8 v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  outlined copy of AppIntentExecutor?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t MenuStyleConfiguration.primaryAction.getter()
{
  uint64_t v1 = *v0;
  outlined copy of AppIntentExecutor?(*v0);
  return v1;
}

uint64_t MenuStyleConfiguration.primaryAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v2);
  *BOOL v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MenuStyleConfiguration.primaryAction.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for MenuStyleConfiguration.onPresentationChanged : MenuStyleConfiguration@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    Swift::UInt8 v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    Swift::UInt8 v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for MenuStyleConfiguration.onPresentationChanged : MenuStyleConfiguration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    Swift::UInt8 v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    Swift::UInt8 v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  outlined copy of AppIntentExecutor?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t MenuStyleConfiguration.onPresentationChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t MenuStyleConfiguration.onPresentationChanged.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v2 + 16));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MenuStyleConfiguration.onPresentationChanged.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t instantiation function for generic protocol witness table for MenuStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in MenuStyleConfiguration.Label()
{
  return &protocol witness table for MenuStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for MenuStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in MenuStyleConfiguration.Content()
{
  return &protocol witness table for MenuStyleConfiguration.Content;
}

uint64_t dispatch thunk of MenuStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for MenuStyleConfiguration.Label()
{
  return &type metadata for MenuStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for MenuStyleConfiguration.Content()
{
  return &type metadata for MenuStyleConfiguration.Content;
}

uint64_t sub_1878A71C4()
{
  return swift_getWitnessTable();
}

void *assignWithTake for MenuStyleConfiguration(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      uint64_t v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedMenuStyle()
{
  return &type metadata for ResolvedMenuStyle;
}

uint64_t getEnumTagSinglePayload for MenuStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for MenuStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878A7678);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in MenuStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedMenuStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  outlined copy of AppIntentExecutor?(v2);

  return outlined copy of AppIntentExecutor?(v4);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedMenuStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedMenuStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedMenuStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance ResolvedMenuStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v6);
  specialized AccessibilityMenuModifier.body(content:)(v3, v4, v6, v5, v3, v4, (uint64_t)v12);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
  char v7 = v13;
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  double result = *(double *)v12;
  long long v11 = v12[1];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  return result;
}

uint64_t View.menuStyle<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v35 = a2;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v33 = a1;
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MenuStyleModifier();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = v21;
  uint64_t v43 = v17;
  uint64_t v44 = MEMORY[0x1E4F3F740];
  uint64_t v45 = WitnessTable;
  uint64_t v23 = type metadata accessor for StaticIf();
  uint64_t v24 = *(void *)(v23 - 8);
  double v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v31 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v33, a4, v25);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v16, a4);
  uint64_t v28 = v34;
  uint64_t v29 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v32, v35, a5);
  uint64_t v41 = a5;
  uint64_t v42 = (uint64_t)v29;
  uint64_t v40 = v36;
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, a5);
  MEMORY[0x18C113660](v27, v38, v23, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
}

uint64_t MenuStyleModifier.styleBody(configuration:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v15 - v10;
  long long v12 = a1[1];
  v15[0] = *a1;
  v15[1] = v12;
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v3 + 24))(v15, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle;
  if (!lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle;
  if (!lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>)
  {
    type metadata accessor for MenuStyleModifier<DefaultMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultMenuStyle and conformance DefaultMenuStyle;
  if (!lazy protocol witness table cache variable for type DefaultMenuStyle and conformance DefaultMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultMenuStyle and conformance DefaultMenuStyle);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MenuStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance MenuStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized AccessibilityMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for MenuStyleModifier<DefaultMenuStyle>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 8;
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for MutableBox<AccessibilityAttachment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v32;
  *(void *)(v13 + 24) = v33;
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v14 = dword_1ED4660E8;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13 + 16, v14 | (v14 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  if (a5)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a5;
    *(void *)(v15 + 24) = a6;
    uint64_t v16 = v15;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for thunk for @callee_guaranteed () -> ();
    *(void *)(v17 + 24) = v16;
    uint64_t v18 = v17;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
    *(void *)(v19 + 24) = v18;
    uint64_t v29 = a2;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    *(void *)(v20 + 24) = v19;
    type metadata accessor for MutableBox<AccessibilityAttachment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v28 = a1;
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
    LODWORD(v18) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    *(void *)(v21 + 56) = v22;
    *(void *)(v21 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v23 = swift_allocObject();
    *(void *)(v21 + 32) = v23;
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_OWORD *)(v23 + 48) = 0u;
    *(void *)(v23 + 64) = 0;
    *(void *)(v23 + 72) = 2;
    *(_OWORD *)(v23 + 80) = 0u;
    *(_OWORD *)(v23 + 96) = 0u;
    *(void *)(v23 + 112) = 0;
    *(void *)(v23 + 120) = partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:);
    *(void *)(v23 + 128) = v20;
    *(_DWORD *)(v23 + 136) = v18;
    *(unsigned char *)(v21 + 72) = 0;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    outlined copy of AppIntentExecutor?(a5);
    swift_retain();
    outlined copy of AppIntentExecutor?(v28);
    outlined copy of AppIntentExecutor?(a3);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v24 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v24);
    swift_bridgeObjectRelease();
    uint64_t v25 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.setter(v25);
    uint64_t v34 = specialized AccessibilityProperties.subscript.getter(*(void *)(v13 + 16));
    uint64_t v26 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v26);
    specialized AccessibilityProperties.subscript.setter(v34);
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    outlined copy of AppIntentExecutor?(v28);
    outlined copy of AppIntentExecutor?(a3);
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    a2 = v29;
    swift_release();
    a1 = v28;
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
    swift_release();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = outlined copy of AppIntentExecutor?(0);
  }
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(unsigned char *)(a7 + 32) = 1;
  *(void *)(a7 + 40) = v13;
  *(void *)(a7 + 48) = v12;
  return result;
}

uint64_t sub_1878A8654()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return closure #1 in UIHostingController.createTabAction(identifier:select:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = 2;
  return result;
}

uint64_t sub_1878A86C8()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1878A87B8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>);
    }
  }
}

void type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for Menu();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>)
  {
    unint64_t v0 = type metadata accessor for AccessibilityLargeContentViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, (void (*)(void))lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>;
  if (!lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>);
  }
  return result;
}

uint64_t sub_1878A8ABC()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

void static OpenWindowAction.SharingBehavior.required.getter()
{
}

void static OpenWindowAction.Destination.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static OpenWindowAction.Destination.sharingSession.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void OpenWindowAction.callAsFunction<A>(value:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.openWindow<A>(presenting:withBehavior:)(a1, a2, a3, a4, a5);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v5 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

void OpenWindowAction.callAsFunction<A>(presenting:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t OpenWindowAction.callAsFunction<A>(value:sharingBehavior:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

uint64_t OpenWindowAction.callAsFunction<A>(value:destination:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

Swift::Void __swiftcall OpenWindowAction.callAsFunction(id:)(Swift::String id)
{
  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.openWindow(id:withBehavior:)(id._countAndFlagsBits, (uint64_t)id._object);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v1 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t OpenWindowAction.callAsFunction(id:sharingBehavior:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

uint64_t OpenWindowAction.callAsFunction(id:destination:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

void OpenWindowAction.callAsFunction<A>(id:value:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.openWindow<A>(id:presenting:withBehavior:)(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v7 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

void OpenWindowAction.callAsFunction<A>(id:presenting:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t OpenWindowAction.callAsFunction<A>(id:value:sharingBehavior:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

uint64_t OpenWindowAction.callAsFunction<A>(id:value:destination:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

uint64_t EnvironmentValues.openWindow.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.openWindow : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t EnvironmentValues.openWindow.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_1878A9448()
{
  return EnvironmentValues.openWindow.setter();
}

ValueMetadata *type metadata accessor for OpenWindowAction()
{
  return &type metadata for OpenWindowAction;
}

ValueMetadata *type metadata accessor for OpenWindowAction.SharingBehavior()
{
  return &type metadata for OpenWindowAction.SharingBehavior;
}

ValueMetadata *type metadata accessor for OpenWindowAction.Destination()
{
  return &type metadata for OpenWindowAction.Destination;
}

ValueMetadata *type metadata accessor for OpenWindowAction.Destination.Role()
{
  return &type metadata for OpenWindowAction.Destination.Role;
}

unsigned char *storeEnumTagSinglePayload for OpenWindowAction.SharingBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878A9598);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenWindowAction.SharingBehavior.Behavior()
{
  return &type metadata for OpenWindowAction.SharingBehavior.Behavior;
}

void *type metadata accessor for EnvironmentValues.OpenWindowActionKey()
{
  return &unk_1ED421C30;
}

unint64_t lazy protocol witness table accessor for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior;
  if (!lazy protocol witness table cache variable for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role;
  if (!lazy protocol witness table cache variable for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role);
  }
  return result;
}

void static OpenWindowAction.SharingBehavior.requested.getter()
{
}

uint64_t ToolbarItemGroup.init<A, B>(placement:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of ToolbarItemPlacement(a1, (uint64_t)v6);
  uint64_t v4 = type metadata accessor for LabeledToolbarItemGroupContent();
  swift_getWitnessTable();
  ToolbarItemGroup.init(placement:content:)((uint64_t)v6, (void (*)(void))partial apply for closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:), v4, a2);
  return outlined destroy of ToolbarItemPlacement(a1);
}

uint64_t closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:)@<X0>(uint64_t (*a1)(double)@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  v29[1] = a6;
  char v30 = a1;
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a7;
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v14;
  uint64_t v35 = v15;
  uint64_t v36 = v16;
  uint64_t v37 = v17;
  uint64_t v18 = type metadata accessor for LabeledToolbarItemGroupContent();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v29 - v24;
  uint64_t v26 = v30(v23);
  v32(v26);
  LabeledToolbarItemGroupContent.init(content:label:)((uint64_t)v13, (uint64_t)v10, a4, a5, (uint64_t)v21);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v21, v18);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v27)(v25, v18);
}

uint64_t LabeledToolbarItemGroupContent.init(content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for LabeledToolbarItemGroupContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t LabeledToolbarItemGroupContent.body.getter(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v26 = a1[2];
  uint64_t v2 = v26;
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  type metadata accessor for LabeledControlGroupContent();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ControlGroup();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v15[-v11];
  uint64_t v21 = v2;
  uint64_t v22 = v3;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  uint64_t v25 = v1;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  uint64_t v20 = v1;
  ControlGroup.init<A, B>(content:label:)((uint64_t)partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter, (void (*)(uint64_t))partial apply for closure #2 in LabeledToolbarItemGroupContent.body.getter, v2, v3, v4, v5, (uint64_t)v9);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v12, v6);
}

uint64_t closure #1 in LabeledToolbarItemGroupContent.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t closure #2 in LabeledToolbarItemGroupContent.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  void v14[2] = v10;
  v14[3] = v11;
  uint64_t v12 = type metadata accessor for LabeledToolbarItemGroupContent();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t partial apply for closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:)(*(uint64_t (**)(double))(v1 + 48), *(void (**)(uint64_t))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t type metadata accessor for LabeledToolbarItemGroupContent()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter()
{
  return partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in LabeledToolbarItemGroupContent.body.getter);
}

uint64_t partial apply for closure #2 in LabeledToolbarItemGroupContent.body.getter()
{
  return partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in LabeledToolbarItemGroupContent.body.getter);
}

uint64_t partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t associated type witness table accessor for View.Body : View in LabeledToolbarItemGroupContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

_OWORD *initializeBufferWithCopyOfBuffer for ToolbarItemGroup(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 41) & (unint64_t)~v7) + 1 > 0x18)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v7;
    if (*((unsigned char *)a2 + 40) == 1)
    {
      long long v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)((char *)a1 + 24) = v13;
      (**(void (***)(_OWORD *, uint64_t *))(v13 - 8))(a1, a2);
      *((unsigned char *)v4 + 40) = 1;
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v14;
      *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    }
    uint64_t v15 = (uint64_t)a2 + v7;
    uint64_t v16 = ((unint64_t)v4 + v7 + 41) & v12;
    uint64_t v17 = (v15 + 41) & v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v16, v17, v5);
    *(unsigned char *)(v16 + v8) = *(unsigned char *)(v17 + v8);
  }
  return v4;
}

uint64_t assignWithCopy for ToolbarItemGroup(uint64_t a1, long long *a2, uint64_t a3)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1);
    if (*((unsigned char *)a2 + 40) == 1)
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 41 + a1) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 41) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  *(unsigned char *)(*(void *)(v10 + 40) + v12) = *(unsigned char *)(*(void *)(v10 + 40) + v13);
  return a1;
}

_OWORD *initializeWithTake for ToolbarItemGroup(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 41) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 41) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  *(unsigned char *)(*(void *)(v6 + 32) + v8) = *(unsigned char *)(*(void *)(v6 + 32) + v9);
  return a1;
}

_OWORD *assignWithTake for ToolbarItemGroup(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)a1);
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 41) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 41) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  *(unsigned char *)(*(void *)(v8 + 24) + v10) = *(unsigned char *)(*(void *)(v8 + 24) + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItemGroup(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_22;
  }
  uint64_t v10 = v7 + ((v6 + 41) & ~v6) + 1;
  char v11 = 8 * v10;
  if (v10 > 3) {
    goto LABEL_7;
  }
  unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
  if (HIWORD(v13))
  {
    int v12 = *(_DWORD *)((char *)a1 + v10);
    if (v12) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v13 <= 0xFF)
    {
      if (v13 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v12 = *((unsigned __int8 *)a1 + v10);
      if (!*((unsigned char *)a1 + v10)) {
        goto LABEL_22;
      }
LABEL_14:
      int v14 = (v12 - 1) << v11;
      if (v10 > 3) {
        int v14 = 0;
      }
      if (v10)
      {
        if (v10 > 3) {
          LODWORD(v10) = 4;
        }
        switch((int)v10)
        {
          case 2:
            LODWORD(v10) = *a1;
            break;
          case 3:
            LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v10) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v10) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v8 + (v10 | v14) + 1;
    }
    int v12 = *(unsigned __int16 *)((char *)a1 + v10);
    if (*(unsigned __int16 *)((char *)a1 + v10)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  uint64_t v15 = ((unint64_t)a1 + v6 + 41) & ~v6;
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
  }
  unsigned int v17 = *(unsigned __int8 *)(v15 + v7);
  if (v17 < 2) {
    return 0;
  }
  return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for ToolbarItemGroup(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = v10 + ((v9 + 41) & ~v9) + 1;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v10 + ((v9 + 41) & ~v9) != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1878AA6F8);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v19 = (unint64_t)&a1[v9 + 41] & ~v9;
        if (v7 < 0xFE)
        {
          *(unsigned char *)(v19 + v10) = a2 + 1;
        }
        else
        {
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for LabeledToolbarItemGroupContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for LabeledToolbarItemGroupContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1878AABE4);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t sub_1878AAC0C()
{
  return swift_getWitnessTable();
}

void static WorldAlignmentBehavior.gravityAligned.getter()
{
}

void static WorldAlignmentBehavior.== infix(_:_:)()
{
}

void Scene.volumeWorldAlignment(_:)()
{
}

ValueMetadata *type metadata accessor for WorldAlignmentBehavior()
{
  return &type metadata for WorldAlignmentBehavior;
}

unsigned char *storeEnumTagSinglePayload for WorldAlignmentBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878AADACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorldAlignmentBehavior.Storage()
{
  return &type metadata for WorldAlignmentBehavior.Storage;
}

unint64_t lazy protocol witness table accessor for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage;
  if (!lazy protocol witness table cache variable for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage);
  }
  return result;
}

void static WorldAlignmentBehavior.automatic.getter()
{
}

void static WorldAlignmentBehavior.adaptive.getter()
{
}

void static WorldAlignmentBehavior.floor.getter()
{
}

uint64_t _FlipForRTLEffect.isEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _FlipForRTLEffect.isEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_FlipForRTLEffect.isEnabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_FlipForRTLEffect __swiftcall _FlipForRTLEffect.init(isEnabled:)(Swift::Bool isEnabled)
{
  return (SwiftUI::_FlipForRTLEffect)isEnabled;
}

BOOL static _FlipForRTLEffect.== infix(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

void protocol witness for ViewModifier.body(content:) in conformance _FlipForRTLEffect()
{
}

uint64_t View.flipsForRightToLeftLayoutDirection(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _FlipForRTLEffect, a3);
}

unsigned char *protocol witness for Rule.value.getter in conformance Child@<X0>(char *a1@<X8>)
{
  unint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  *a1 = v3;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _FlipForRTLEffect()
{
  return &protocol witness table for _FlipForRTLEffect;
}

unsigned char *storeEnumTagSinglePayload for _FlipForRTLEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878AB01CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1878AB044()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for Child()
{
  return &unk_1ED466668;
}

uint64_t OpenDocumentAction.callAsFunction(at:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

void NewDocumentAction.callAsFunction<A>(_:)()
{
}

{
  NewDocumentAction.callAsFunction<A>(_:)();
}

void NewDocumentAction.callAsFunction(contentType:)()
{
}

void NewDocumentAction.callAsFunction(contentType:prepareNewDocument:)()
{
}

void EnvironmentValues.newDocument.getter()
{
}

void EnvironmentValues.openDocument.getter()
{
}

void sub_1878AB1AC()
{
}

void sub_1878AB1BC()
{
}

void sub_1878AB1D0()
{
}

ValueMetadata *type metadata accessor for OpenDocumentAction()
{
  return &type metadata for OpenDocumentAction;
}

ValueMetadata *type metadata accessor for NewDocumentAction()
{
  return &type metadata for NewDocumentAction;
}

void sub_1878AB210()
{
}

void __swiftcall TitleBarWindowStyle.init()()
{
}

void TitleBarWindowStyle.configureWindow(_:)()
{
}

ValueMetadata *type metadata accessor for TitleBarWindowStyle()
{
  return &type metadata for TitleBarWindowStyle;
}

uint64_t type metadata completion function for FormVStack()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FormVStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 17) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 17) & ~v5, ((unint64_t)a2 + v5 + 17) & ~v5);
  }
  return v3;
}

uint64_t destroy for FormVStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t initializeWithTake for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for FormVStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for FormVStack(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 17) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878AB9C0);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 17] & ~v8;
        unsigned int v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata accessor for FormVStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for _FormVStackLayout(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _FormVStackLayout(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _FormVStackLayout()
{
  return &type metadata for _FormVStackLayout;
}

uint64_t static FormVStack._makeView(view:inputs:)()
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t closure #1 in static FormVStack._makeView(view:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for FormVStack();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FormVStack<A>()
{
  return static FormVStack._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FormVStack<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormVStack<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance FormVStack<A>()
{
}

uint64_t protocol witness for HVStack.spacing.getter in conformance _FormVStackLayout()
{
  return *(void *)(v0 + 8);
}

void protocol witness for static Layout.layoutProperties.getter in conformance _FormVStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 1;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();

  return MEMORY[0x1F4101170](a1, a2, v4);
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();

  return MEMORY[0x1F4101150](a1, a2, a3, v6);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();

  return MEMORY[0x1F4101168](a1, a2, a3, v6);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _FormVStackLayout(uint64_t a1)
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();

  return MEMORY[0x1F4101158](a1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _FormVStackLayout(uint64_t a1, double a2, double a3, double a4, double a5)
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  v10.n128_f64[0] = a2;
  v11.n128_f64[0] = a3;
  v12.n128_f64[0] = a4;
  v13.n128_f64[0] = a5;

  return MEMORY[0x1F4101160](a1, v10, v11, v12, v13);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E4F416C0]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E4F416C8]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, double, double, double, double))
{
  return a14(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _FormVStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v23 = *a1;
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  unint64_t v13 = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 88))(&v23, &v15, a3, a4, a5, v13);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for _FormVStackLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _FormVStackLayout()
{
}

unint64_t instantiation function for generic protocol witness table for _FormVStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _VariadicView_UnaryViewRoot in _FormVStackLayout()
{
  return &protocol witness table for _FormVStackLayout;
}

_UNKNOWN **base witness table accessor for View in FormVStack<A>()
{
  return &protocol witness table for FormVStack<A>;
}

uint64_t protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _FormVStackLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static HorizontalAlignment.center.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();

  return MEMORY[0x1F4100360](a1, a4, a2, v8, a3);
}

_UNKNOWN **base witness table accessor for _VariadicView_ViewRoot in _FormVStackLayout()
{
  return &protocol witness table for _FormVStackLayout;
}

uint64_t partial apply for closure #1 in static FormVStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static FormVStack._makeView(view:inputs:)(a1);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTextEditorStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResolvedTextEditorStyle(v1, a1, type metadata accessor for TextEditorStyleConfiguration);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTextEditorStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextEditorStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTextEditorStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextEditorStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTextEditorStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTextEditorStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResolvedTextEditorStyle(v1, a1, type metadata accessor for ResolvedTextEditorStyle);
}

uint64_t TextEditorStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  unint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextEditorStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextEditorStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextEditorStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t EnvironmentValues.textEditorStyle.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for RangeSet<String.Index>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1ED421BD0, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for RangeSet<String.Index>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1ED421BD0, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.textEditorStyle.setter()
{
  type metadata accessor for RangeSet<String.Index>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1ED421BD0, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textEditorStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  double v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TextEditorStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for TextEditorStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of TextEditorStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TextEditorStyleConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unsigned int v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    unsigned int v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    double v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v9, 1, v11))
    {
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
      memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v15;
      uint64_t v16 = *(int *)(v11 + 32);
      __dst = (char *)v8 + v16;
      uint64_t v28 = v8;
      uint64_t v17 = (char *)v9 + v16;
      uint64_t v18 = type metadata accessor for TextSelection(0);
      uint64_t v19 = *(void *)(v18 - 8);
      long long v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_retain();
      uint64_t v21 = v17;
      swift_retain();
      if (v20(v17, 1, v18))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v17, *(void *)(*(void *)(v22 - 8) + 64));
        int v23 = v28;
      }
      else
      {
        uint64_t v24 = type metadata accessor for TextSelection.Indices(0);
        int v23 = v28;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v25 - 8) + 16))(__dst, v21, v25);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        __dst[*(int *)(v18 + 20)] = *((unsigned char *)v21 + *(int *)(v18 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
    }
  }
  return v5;
}

uint64_t destroy for TextEditorStyleConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v8 = v4 + *(int *)(v6 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
        return v11(v8, v10);
      }
    }
  }
  return result;
}

void *initializeWithCopy for TextEditorStyleConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v14;
    uint64_t v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    uint64_t v27 = v7;
    uint64_t v16 = (char *)v8 + v15;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_retain();
    long long v20 = v16;
    swift_retain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v22 = v27;
    }
    else
    {
      uint64_t v23 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v22 = v27;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, const void *, uint64_t))(*(void *)(v24 - 8) + 16))(__dst, v20, v24);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = *((unsigned char *)v20 + *(int *)(v17 + 20));
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for TextEditorStyleConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1, v9);
  int v14 = v12(v8, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *((void *)v7 + 1) = *((void *)v8 + 1);
      uint64_t v15 = *(int *)(v10 + 32);
      __dst = &v7[v15];
      uint64_t v41 = &v8[v15];
      uint64_t v16 = type metadata accessor for TextSelection(0);
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_retain();
      swift_retain();
      if (v18(v41, 1, v16))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v41, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        uint64_t v34 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(__dst, v41, v35);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v41, *(void *)(*(void *)(v34 - 8) + 64));
        }
        __dst[*(int *)(v16 + 20)] = v41[*(int *)(v16 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      return a1;
    }
    goto LABEL_7;
  }
  if (v14)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
    uint64_t v22 = v7;
    uint64_t v23 = v8;
LABEL_8:
    memcpy(v22, v23, v21);
    return a1;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *((void *)v7 + 1) = *((void *)v8 + 1);
  swift_retain();
  swift_release();
  uint64_t v24 = *(int *)(v10 + 32);
  uint64_t v25 = &v7[v24];
  uint64_t v26 = &v8[v24];
  uint64_t v27 = type metadata accessor for TextSelection(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      uint64_t v32 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v25, v26, v33);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
      }
      v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      return a1;
    }
    goto LABEL_17;
  }
  if (v31)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v25, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v21 = *(void *)(*(void *)(v36 - 8) + 64);
    uint64_t v22 = v25;
    uint64_t v23 = v26;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v25, type metadata accessor for TextSelection.Indices);
    uint64_t v38 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v25, v26, v39);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v25, v26, *(void *)(*(void *)(v38 - 8) + 64));
    }
  }
  v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
  return a1;
}

uint64_t outlined destroy of TextSelection.Indices(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for TextEditorStyleConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v12;
    uint64_t v13 = *(int *)(v9 + 32);
    int v14 = (char *)v6 + v13;
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = type metadata accessor for TextSelection(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for TextEditorStyleConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v8, 1, v10);
  int v15 = v13(v9, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      uint64_t v16 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v16;
      uint64_t v17 = *(int *)(v11 + 32);
      uint64_t v18 = &v8[v17];
      uint64_t v19 = &v9[v17];
      uint64_t v20 = type metadata accessor for TextSelection(0);
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        uint64_t v37 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v18, v19, v38);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v18, v19, *(void *)(*(void *)(v37 - 8) + 64));
        }
        v18[*(int *)(v20 + 20)] = v19[*(int *)(v20 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      return a1;
    }
    goto LABEL_7;
  }
  if (v15)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
    uint64_t v25 = v8;
    uint64_t v26 = v9;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  swift_release();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_release();
  uint64_t v27 = *(int *)(v11 + 32);
  uint64_t v28 = &v8[v27];
  uint64_t v29 = &v9[v27];
  uint64_t v30 = type metadata accessor for TextSelection(0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v28, v29, v36);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
      }
      v28[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      return a1;
    }
    goto LABEL_17;
  }
  if (v34)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v28, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v24 = *(void *)(*(void *)(v39 - 8) + 64);
    uint64_t v25 = v28;
    uint64_t v26 = v29;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v28, type metadata accessor for TextSelection.Indices);
    uint64_t v41 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v28, v29, v42);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v28, v29, *(void *)(*(void *)(v41 - 8) + 64));
    }
  }
  v28[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEditorStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878AE588);
}

uint64_t sub_1878AE588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TextEditorStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878AE67C);
}

uint64_t sub_1878AE67C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TextEditorStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextEditorStyleConfiguration);
}

void type metadata completion function for TextEditorStyleConfiguration()
{
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(319, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1878AE83C()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for TextEditorBorderStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878AE978);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextEditorBorderStyle()
{
  return &type metadata for TextEditorBorderStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedTextEditorStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    uint64_t v8 = *(int *)(v4 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 - 8);
    int v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v10, 1, v12))
    {
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v16;
      uint64_t v17 = *(int *)(v12 + 32);
      __dst = (char *)v9 + v17;
      uint64_t v29 = v9;
      uint64_t v18 = (char *)v10 + v17;
      uint64_t v19 = type metadata accessor for TextSelection(0);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_retain();
      uint64_t v22 = v18;
      swift_retain();
      if (v21(v18, 1, v19))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v18, *(void *)(*(void *)(v23 - 8) + 64));
        size_t v24 = v29;
      }
      else
      {
        uint64_t v25 = type metadata accessor for TextSelection.Indices(0);
        size_t v24 = v29;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(__dst, v22, v26);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        __dst[*(int *)(v19 + 20)] = *((unsigned char *)v22 + *(int *)(v19 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v24, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for ResolvedTextEditorStyle(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v6 = v2 + *(int *)(v4 + 32);
    uint64_t v7 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
        return v9(v6, v8);
      }
    }
  }
  return result;
}

void *initializeWithCopy for ResolvedTextEditorStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v14;
    uint64_t v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    uint64_t v27 = v7;
    uint64_t v16 = (char *)v8 + v15;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_retain();
    uint64_t v20 = v16;
    swift_retain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v22 = v27;
    }
    else
    {
      uint64_t v23 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v22 = v27;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, const void *, uint64_t))(*(void *)(v24 - 8) + 16))(__dst, v20, v24);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = *((unsigned char *)v20 + *(int *)(v17 + 20));
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for ResolvedTextEditorStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v5, 1, v7);
  int v12 = v10(v6, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      *(void *)uint64_t v5 = *(void *)v6;
      *((void *)v5 + 1) = *((void *)v6 + 1);
      uint64_t v13 = *(int *)(v8 + 32);
      __dst = &v5[v13];
      uint64_t v39 = &v6[v13];
      uint64_t v14 = type metadata accessor for TextSelection(0);
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_retain();
      swift_retain();
      if (v16(v39, 1, v14))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v39, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(__dst, v39, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v39, *(void *)(*(void *)(v32 - 8) + 64));
        }
        __dst[*(int *)(v14 + 20)] = v39[*(int *)(v14 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
      return a1;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = v5;
    uint64_t v21 = v6;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  *(void *)uint64_t v5 = *(void *)v6;
  swift_retain();
  swift_release();
  *((void *)v5 + 1) = *((void *)v6 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(v8 + 32);
  uint64_t v23 = &v5[v22];
  uint64_t v24 = &v6[v22];
  uint64_t v25 = type metadata accessor for TextSelection(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      uint64_t v30 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v23, v24, v31);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
      }
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      return a1;
    }
    goto LABEL_17;
  }
  if (v29)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v23, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v19 = *(void *)(*(void *)(v34 - 8) + 64);
    uint64_t v20 = v23;
    uint64_t v21 = v24;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v23, type metadata accessor for TextSelection.Indices);
    uint64_t v36 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v23, v24, v37);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64));
    }
  }
  v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
  return a1;
}

_OWORD *initializeWithTake for ResolvedTextEditorStyle(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v12;
    uint64_t v13 = *(int *)(v9 + 32);
    uint64_t v14 = (char *)v6 + v13;
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = type metadata accessor for TextSelection(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for ResolvedTextEditorStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v6, 1, v8);
  int v13 = v11(v7, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = *((void *)v7 + 1);
      *(void *)uint64_t v6 = *(void *)v7;
      *((void *)v6 + 1) = v14;
      uint64_t v15 = *(int *)(v9 + 32);
      uint64_t v16 = &v6[v15];
      uint64_t v17 = &v7[v15];
      uint64_t v18 = type metadata accessor for TextSelection(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v16, v17, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v16, v17, *(void *)(*(void *)(v35 - 8) + 64));
        }
        v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
      return a1;
    }
    goto LABEL_7;
  }
  if (v13)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    uint64_t v23 = v6;
    uint64_t v24 = v7;
LABEL_8:
    memcpy(v23, v24, v22);
    return a1;
  }
  *(void *)uint64_t v6 = *(void *)v7;
  swift_release();
  *((void *)v6 + 1) = *((void *)v7 + 1);
  swift_release();
  uint64_t v25 = *(int *)(v9 + 32);
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  uint64_t v28 = type metadata accessor for TextSelection(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      uint64_t v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v26, v27, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      return a1;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v26, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v22 = *(void *)(*(void *)(v37 - 8) + 64);
    uint64_t v23 = v26;
    uint64_t v24 = v27;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of TextSelection.Indices((uint64_t)v26, type metadata accessor for TextSelection.Indices);
    uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v26, v27, v40);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64));
    }
  }
  v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextEditorStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878B00A8);
}

uint64_t sub_1878B00A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedTextEditorStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878B0128);
}

uint64_t sub_1878B0128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedTextEditorStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextEditorStyle);
}

uint64_t type metadata completion function for ResolvedTextEditorStyle()
{
  uint64_t result = type metadata accessor for TextEditorStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TextEditorStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TextEditorStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878B05B8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in TextEditorStyleModifier<A>()
{
  return &protocol witness table for TextEditorStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in TextEditorStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in TextEditorStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TextEditorStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for View in ResolvedTextEditorStyle()
{
  return lazy protocol witness table accessor for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextEditorStyle);
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedTextEditorStyle()
{
  return lazy protocol witness table accessor for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle(&lazy protocol witness table cache variable for type TextEditorStyleModifier<AutomaticTextEditorStyle> and conformance TextEditorStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for TextEditorStyleModifier<AutomaticTextEditorStyle>);
}

uint64_t lazy protocol witness table accessor for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TextEditorStyleModifier<AutomaticTextEditorStyle>()
{
  if (!lazy cache variable for type metadata for TextEditorStyleModifier<AutomaticTextEditorStyle>)
  {
    lazy protocol witness table accessor for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle();
    unint64_t v0 = type metadata accessor for TextEditorStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextEditorStyleModifier<AutomaticTextEditorStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle;
  if (!lazy protocol witness table cache variable for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextEditorBorderStyle and conformance TextEditorBorderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TextEditorBorderStyle and conformance TextEditorBorderStyle;
  if (!lazy protocol witness table cache variable for type TextEditorBorderStyle and conformance TextEditorBorderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEditorBorderStyle and conformance TextEditorBorderStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ResolvedTextEditorStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for RangeSet<String.Index>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1ED421BD0, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.TextEditorStyleKey()
{
  return &unk_1ED421BD0;
}

uint64_t TextEditor.init(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = swift_getKeyPath();
  *(_WORD *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 10) = 0;
  uint64_t v10 = a5 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v12 = v11;
  unsigned int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v14)((void *)(v11 - 8), v10, 1, 1, v11);
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  *(void *)(a5 + 32) = a3;
  *(void *)(a5 + 40) = a4;
  outlined destroy of Binding<TextSelection?>?(v10, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);

  return v14(v10, 1, 1, v12);
}

uint64_t TextEditor.init(text:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  *(void *)a6 = swift_getKeyPath();
  *(_WORD *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 10) = 0;
  uint64_t v12 = a6 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v14 = v13;
  uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v16((void *)(v13 - 8), v12, 1, 1, v13);
  *(void *)(a6 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  *(void *)(a6 + 32) = a3;
  *(void *)(a6 + 40) = a4;
  outlined destroy of Binding<TextSelection?>?(v12, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  outlined init with take of Binding<TextSelection?>(a5, v12);

  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v16)(v12, 0, 1, v14);
}

{
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t KeyPath = swift_getKeyPath();
  outlined destroy of Binding<TextSelection?>?(a5, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection>);
  *(void *)a6 = KeyPath;
  *(_WORD *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 10) = 0;
  uint64_t v13 = a6 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  int v15 = v14;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v17)((void *)(v14 - 8), v13, 1, 1, v14);
  *(void *)(a6 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  *(void *)(a6 + 32) = a3;
  *(void *)(a6 + 40) = a4;
  outlined destroy of Binding<TextSelection?>?(v13, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);

  return v17(v13, 1, 1, v15);
}

uint64_t TextEditor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = swift_getKeyPath();
  *(_WORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 10) = 0;
  uint64_t v4 = a2 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)a1;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  uint64_t v8 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);

  return outlined assign with take of Binding<TextSelection?>?(v8, v4);
}

uint64_t TextEditor.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for ResolvedTextEditorStyle(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(0);
  uint64_t v32 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v15 = v1[5];
  uint64_t v16 = (uint64_t)v1 + *(int *)(type metadata accessor for TextEditor() + 24);
  uint64_t v17 = type metadata accessor for TextEditorStyleConfiguration(0);
  outlined init with copy of Binding<TextSelection?>?(v16, (uint64_t)v4 + *(int *)(v17 + 20), (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  *uint64_t v4 = v12;
  v4[1] = v13;
  _OWORD v4[2] = v14;
  v4[3] = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v16) = static Edge.Set.all.getter();
  outlined init with copy of Binding<TextSelection?>?((uint64_t)v4, (uint64_t)v8, type metadata accessor for ResolvedTextEditorStyle);
  uint64_t v18 = &v8[*(int *)(v6 + 44)];
  *(void *)uint64_t v18 = 1;
  v18[8] = v16;
  outlined destroy of Binding<TextSelection?>?((uint64_t)v4, type metadata accessor for ResolvedTextEditorStyle);
  uint64_t v19 = static Alignment.center.getter();
  uint64_t v21 = v20;
  uint64_t v22 = *v1;
  uint64_t v23 = *((unsigned __int16 *)v1 + 4);
  LODWORD(v13) = *((unsigned __int8 *)v1 + 10);
  outlined copy of Environment<HoverEffect?>.Content(*v1, v23);
  uint64_t v24 = specialized Environment.wrappedValue.getter(v22, v23 | (v13 << 16));
  LOBYTE(v15) = v25;
  outlined consume of Environment<Color?>.Content(v22, v23);
  if (v15 == 2)
  {
    uint64_t v34 = static Color.clear.getter();
    uint64_t v26 = AnyShapeStyle.init<A>(_:)();
    swift_release();
    uint64_t v24 = v26;
  }
  else if (!v24)
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    char v29 = 0;
    goto LABEL_6;
  }
  uint64_t v27 = -1;
  uint64_t v28 = 256;
  char v29 = static Edge.Set.all.getter();
LABEL_6:
  outlined init with copy of Binding<TextSelection?>?((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>);
  uint64_t v30 = &v11[*(int *)(v32 + 36)];
  *(void *)uint64_t v30 = v24;
  *((void *)v30 + 1) = v28;
  *((void *)v30 + 2) = v27;
  v30[24] = v29;
  *((void *)v30 + 4) = v19;
  *((void *)v30 + 5) = v21;
  outlined destroy of Binding<TextSelection?>?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>);
  outlined init with copy of Binding<TextSelection?>?((uint64_t)v11, v33, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>);
  return outlined destroy of Binding<TextSelection?>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TextEditor()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseLegacySafeAreaPropagation()
{
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

uint64_t key path getter for EnvironmentValues.scrollContentBackground : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.scrollContentBackground.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t sub_1878B11EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.scrollContentBackground.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.scrollContentBackground : EnvironmentValues()
{
  swift_retain();
  specialized EnvironmentValues.subscript.setter();

  return swift_release();
}

uint64_t type metadata accessor for TextEditor()
{
  uint64_t result = type metadata singleton initialization cache for TextEditor;
  if (!type metadata singleton initialization cache for TextEditor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with take of Binding<TextSelection?>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation()
{
  unint64_t result = lazy protocol witness table cache variable for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation;
  if (!lazy protocol witness table cache variable for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>)
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_2(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for _ShapeView<Rectangle, AnyShapeStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle, AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, AnyShapeStyle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, AnyShapeStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?)
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_2(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>();
    lazy protocol witness table accessor for type _ShapeView<Rectangle, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, AnyShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of Binding<TextSelection?>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Binding<TextSelection?>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Binding<TextSelection>(uint64_t a1)
{
}

uint64_t associated type witness table accessor for View.Body : View in TextEditor()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for TextEditor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    char v8 = *((unsigned char *)a2 + 10);
    unsigned __int16 v9 = *((_WORD *)a2 + 4);
    outlined copy of Environment<HoverEffect?>.Content(*a2, v9);
    *(void *)a1 = v7;
    *(_WORD *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 10) = v8;
    uint64_t v10 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = a2[5];
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v11;
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    uint64_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v18(v14, 1, v16))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v21;
      uint64_t v22 = *(int *)(v16 + 32);
      __dst = (char *)v13 + v22;
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = type metadata accessor for TextSelection(0);
      uint64_t v30 = *(void *)(v24 - 8);
      char v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
      swift_retain();
      swift_retain();
      if (v25(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v27 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(__dst, v23, v28);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v23, *(void *)(*(void *)(v27 - 8) + 64));
        }
        __dst[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v24);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
  }
  return a1;
}

uint64_t destroy for TextEditor(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int16 *)(a1 + 8));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v8 = v4 + *(int *)(v6 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
        return v11(v8, v10);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for TextEditor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 10);
  unsigned __int16 v8 = *((_WORD *)a2 + 4);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v8);
  *(void *)a1 = v6;
  *(_WORD *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 10) = v7;
  uint64_t v9 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v9;
  uint64_t v10 = a2[5];
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v10;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v17(v13, 1, v15))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v19;
    uint64_t v20 = *(int *)(v15 + 32);
    __dst = (char *)v12 + v20;
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = type metadata accessor for TextSelection(0);
    uint64_t v28 = *(void *)(v22 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_retain();
    swift_retain();
    if (v23(v21, 1, v22))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v25 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(__dst, v21, v26);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v21, *(void *)(*(void *)(v25 - 8) + 64));
      }
      __dst[*(int *)(v22 + 20)] = v21[*(int *)(v22 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v22);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  return a1;
}

uint64_t *assignWithCopy for TextEditor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 10);
  unsigned __int16 v8 = *((_WORD *)a2 + 4);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v8);
  uint64_t v9 = *a1;
  *a1 = v6;
  uint64_t v10 = *((unsigned __int16 *)a1 + 4);
  *((_WORD *)a1 + 4) = v8;
  *((unsigned char *)a1 + 10) = v7;
  outlined consume of Environment<Color?>.Content(v9, v10);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      uint64_t v20 = *(int *)(v15 + 32);
      __dst = &v12[v20];
      uint64_t v46 = &v13[v20];
      uint64_t v21 = type metadata accessor for TextSelection(0);
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_retain();
      swift_retain();
      if (v23(v46, 1, v21))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v46, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v46, v40);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v46, *(void *)(*(void *)(v39 - 8) + 64));
        }
        __dst[*(int *)(v21 + 20)] = v46[*(int *)(v21 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      return a1;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of Binding<TextSelection?>?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
    uint64_t v27 = v12;
    uint64_t v28 = v13;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  swift_retain();
  swift_release();
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_retain();
  swift_release();
  uint64_t v29 = *(int *)(v15 + 32);
  uint64_t v30 = &v12[v29];
  int v31 = &v13[v29];
  uint64_t v32 = type metadata accessor for TextSelection(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v30, v31, v38);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
      }
      v30[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      return a1;
    }
    goto LABEL_17;
  }
  if (v36)
  {
    outlined destroy of Binding<TextSelection?>?((uint64_t)v30, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v26 = *(void *)(*(void *)(v41 - 8) + 64);
    uint64_t v27 = v30;
    uint64_t v28 = v31;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of Binding<TextSelection?>?((uint64_t)v30, type metadata accessor for TextSelection.Indices);
    uint64_t v43 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v30, v31, v44);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v30, v31, *(void *)(*(void *)(v43 - 8) + 64));
    }
  }
  v30[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
  return a1;
}

uint64_t initializeWithTake for TextEditor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  char v7 = (void *)(a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v12;
    uint64_t v13 = *(int *)(v9 + 32);
    uint64_t v14 = (char *)v6 + v13;
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = type metadata accessor for TextSelection(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

uint64_t *assignWithTake for TextEditor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int16 v6 = *((_WORD *)a2 + 4);
  char v7 = *((unsigned char *)a2 + 10);
  uint64_t v8 = *a1;
  *a1 = *a2;
  uint64_t v9 = *((unsigned __int16 *)a1 + 4);
  *((_WORD *)a1 + 4) = v6;
  *((unsigned char *)a1 + 10) = v7;
  outlined consume of Environment<Color?>.Content(v8, v9);
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  uint64_t v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v20;
      uint64_t v21 = *(int *)(v15 + 32);
      uint64_t v22 = &v12[v21];
      uint64_t v23 = &v13[v21];
      uint64_t v24 = type metadata accessor for TextSelection(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v41 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v22, v23, v42);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v22, v23, *(void *)(*(void *)(v41 - 8) + 64));
        }
        v22[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      return a1;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of Binding<TextSelection?>?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
    uint64_t v29 = v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  swift_release();
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_release();
  uint64_t v31 = *(int *)(v15 + 32);
  uint64_t v32 = &v12[v31];
  uint64_t v33 = &v13[v31];
  uint64_t v34 = type metadata accessor for TextSelection(0);
  uint64_t v35 = *(void *)(v34 - 8);
  int v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v32, v33, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
      }
      v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      return a1;
    }
    goto LABEL_17;
  }
  if (v38)
  {
    outlined destroy of Binding<TextSelection?>?((uint64_t)v32, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v28 = *(void *)(*(void *)(v43 - 8) + 64);
    uint64_t v29 = v32;
    uint64_t v30 = v33;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of Binding<TextSelection?>?((uint64_t)v32, type metadata accessor for TextSelection.Indices);
    uint64_t v45 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v32, v33, v46);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v32, v33, *(void *)(*(void *)(v45 - 8) + 64));
    }
  }
  v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEditor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878B2DC0);
}

uint64_t sub_1878B2DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TextEditor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878B2E84);
}

uint64_t sub_1878B2E84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for TextEditor()
{
  type metadata accessor for Binding<TextSelection?>?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>>, type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, (void (*)(uint64_t))type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ShapeView<Rectangle, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(255);
    lazy protocol witness table accessor for type _ShapeView<Rectangle, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextEditorStyle);
    lazy protocol witness table accessor for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ShapeView<Rectangle, AnyShapeStyle> and conformance _ShapeView<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for UseLegacySafeAreaPropagation()
{
  return &unk_1ED455050;
}

void (*ToggleStyleConfiguration.isOn.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  v3[3] = *v1;
  v3[4] = v5;
  char v6 = *((unsigned char *)v1 + 16);
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v8 = v7;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v8);
  return ToggleStyleConfiguration.isOn.modify;
}

void ToggleStyleConfiguration.isOn.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  **(unsigned char **)a1 = *(unsigned char *)(*(void *)a1 + 17);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();

  free(v1);
}

uint64_t ToggleStyleConfiguration.isOn.getter()
{
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

void *key path getter for ToggleStyleConfiguration.isOn : ToggleStyleConfiguration@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t result = MEMORY[0x18C113DA0](&v3);
  *a1 = v3;
  return result;
}

void key path setter for ToggleStyleConfiguration.isOn : ToggleStyleConfiguration(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[6];
  uint64_t v3 = a2[7];
  uint64_t v4 = a2[8];
  uint64_t v5 = (void *)a2[9];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release_n();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
}

uint64_t ToggleStyleConfiguration.isOn.setter()
{
  return swift_release();
}

uint64_t ToggleStyleConfiguration.$isOn.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t ToggleStyleConfiguration.isMixed.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t ToggleStyleConfiguration.isMixed.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 41) = result;
  return result;
}

uint64_t (*ToggleStyleConfiguration.isMixed.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

BOOL *protocol witness for Projection.set(base:newValue:) in conformance ToggleStateBool(BOOL *result, unsigned char *a2)
{
  *uint64_t result = (*a2 & 1) == 0;
  return result;
}

void *closure #2 in ResolvedToggleStyle.body.getter(void *a1)
{
  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, MEMORY[0x1E4F3F7A0]);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedToggleStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();

  return MEMORY[0x1F41003C0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody, MEMORY[0x1E4F40FB0]);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a4();
  return a5(a1, a2, v8);
}

void ResolvedToggleStyleBody.ArchiveBody.body.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(v1 + 40);
  unint64_t v6 = *(void **)(v1 + 72);
  if (v6)
  {
    char v7 = *(unsigned char *)(v1 + 104);
    uint64_t v8 = *(void *)(v1 + 96);
    uint64_t v23 = *(void *)(v1 + 88);
    uint64_t v25 = *(void *)(v1 + 56);
    uint64_t v26 = *(void *)(v1 + 48);
    uint64_t v27 = *(void *)(v1 + 80);
    uint64_t v9 = *(void *)(v1 + 64) & 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(v26, v25, *(void *)(v1 + 64) & 1);
    id v10 = v6;
    swift_retain();
    uint64_t v21 = static Alignment.center.getter();
    uint64_t v24 = v11;
    uint64_t v22 = static ToggleState.allCases.getter();
    type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v28);
    uint64_t v12 = v28;
    outlined copy of Environment<Bool>.Content(v8, v7);
    char v13 = specialized Environment.wrappedValue.getter(v8, v7);
    outlined consume of Environment<Bool>.Content(v8, v7);
    uint64_t v4 = v21;
    uint64_t v3 = v22;
    uint64_t v14 = v9;
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    uint64_t v18 = v23;
    uint64_t v5 = v24;
    char v19 = v13 & 1;
    uint64_t v20 = closure #1 in ResolvedToggleStyleBody.ArchiveBody.body.getter;
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    outlined copy of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
    swift_release();
    swift_release();
    outlined consume of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
    uint64_t v20 = 0;
    uint64_t v12 = 0;
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v18;
  *(unsigned char *)(a1 + 104) = v19;
  *(unsigned char *)(a1 + 105) = v6 != 0;
}

double closure #1 in ResolvedToggleStyleBody.ArchiveBody.body.getter@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v10 = *a1;
  uint64_t v3 = MEMORY[0x1E4F3F540];
  static Binding.constant(_:)();
  uint64_t v4 = v11;
  uint64_t v5 = v12;
  char v6 = v13;
  lazy protocol witness table accessor for type ToggleStateBool and conformance ToggleStateBool();
  swift_retain_n();
  swift_retain_n();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, v3, MEMORY[0x1E4F41638]);
  uint64_t v8 = v7;
  swift_retain();
  MEMORY[0x18C113DA0](&v10, v8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  outlined consume of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyleBody.ArchiveBody()
{
  type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(0, &lazy cache variable for type metadata for StaticSourceWriter<ToggleStyleConfiguration.Label, ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t (*)(uint64_t, void *))type metadata accessor for StaticSourceWriter);
  lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    BOOL v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t protocol witness for ConditionallyArchivableView.archivedBody.getter in conformance ResolvedToggleStyleBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v17 = *((unsigned char *)v1 + 40);
  char v18 = *((unsigned char *)v1 + 16);
  char v16 = *((unsigned char *)v1 + 41);
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  char v10 = (void *)v1[9];
  uint64_t v11 = v1[10];
  uint64_t v12 = v1[11];
  uint64_t v15 = v11;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 41) = v16;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = KeyPath;
  *(unsigned char *)(a1 + 104) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return outlined copy of ToggleStyleConfiguration.Effect(v7, v8, v9, v10);
}

uint64_t closure #1 in ArchivableToggleAppIntentModifier.body(content:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  outlined retain of ArchivableToggleAppIntentModifier(a1);
  if (static Update.threadIsUpdating.getter())
  {
    if (v2)
    {
      dispatch thunk of AnyLocation.wasRead.setter();
LABEL_6:
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      return outlined release of ArchivableToggleAppIntentModifier(a1);
    }
  }
  else if (v2)
  {
    dispatch thunk of AnyLocation.get()();
    goto LABEL_6;
  }
  static Log.internalError(_:)();

  return outlined release of ArchivableToggleAppIntentModifier(a1);
}

uint64_t closure #2 in ArchivableToggleAppIntentModifier.body(content:)@<X0>(char a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  long long v7 = a2[3];
  v11[2] = a2[2];
  v11[3] = v7;
  char v8 = v11[0];
  outlined init with take of AnyLocation<ToggleState>?((uint64_t)v11 + 8, (uint64_t)v12);
  outlined retain of ArchivableToggleAppIntentModifier((uint64_t)a2);
  if (static Update.threadIsUpdating.getter())
  {
    outlined init with take of AnyLocation<ToggleState>?((uint64_t)v12, (uint64_t)&v13);
    if (v13) {
      dispatch thunk of AnyLocation.wasRead.setter();
    }
    goto LABEL_6;
  }
  outlined init with take of AnyLocation<ToggleState>?((uint64_t)v12, (uint64_t)&v13);
  if (!v13)
  {
LABEL_6:
    outlined release of ArchivableToggleAppIntentModifier((uint64_t)a2);
    goto LABEL_7;
  }
  dispatch thunk of AnyLocation.get()();
  outlined release of ArchivableToggleAppIntentModifier((uint64_t)a2);
  char v8 = v10;
LABEL_7:
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a3 = v8;
  *(unsigned char *)(a3 + 8) = a1 & 1;
  *(void *)(a3 + 16) = result;
  *(_WORD *)(a3 + 24) = 0;
  return result;
}

uint64_t ArchivableToggleAppIntentModifier.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableToggleAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys, (uint64_t)&unk_1ED45E380, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v16 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v14 - v6;
  char v8 = *(unsigned char *)v2;
  long long v14 = *(_OWORD *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 24);
  char v10 = *(unsigned char *)(v2 + 32);
  uint64_t v15 = *(void *)(v2 + 56);
  int v24 = *(unsigned __int8 *)(v2 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = v8;
  long long v19 = v14;
  uint64_t v20 = v9;
  char v21 = v10;
  long long v22 = *(_OWORD *)(v2 + 40);
  uint64_t v23 = v15;
  char v25 = 0;
  lazy protocol witness table accessor for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle();
  uint64_t v11 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  }
  uint64_t v13 = v16;
  char v18 = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v7, v5);
}

void ArchivableToggleAppIntentModifier.init(from:)(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v26 = a2;
  type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableToggleAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys, (uint64_t)&unk_1ED45E380, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v9 = v6;
    char v35 = 0;
    lazy protocol witness table accessor for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v20 = v27;
    uint64_t v11 = v28;
    uint64_t v10 = v29;
    uint64_t v12 = v30;
    char v13 = v31;
    long long v25 = v32;
    uint64_t v14 = v33;
    char v34 = v31;
    unsigned __int8 v27 = 1;
    swift_retain();
    uint64_t v22 = v12;
    uint64_t v23 = v10;
    outlined copy of Environment<AppIntentExecutor?>.Content(v10, v12, v13);
    id v21 = (id)v25;
    uint64_t v24 = v14;
    swift_retain();
    LOBYTE(v14) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    uint64_t v15 = v26;
    *uint64_t v26 = v20;
    uint64_t v17 = v22;
    uint64_t v16 = v23;
    *((void *)v15 + 1) = v11;
    *((void *)v15 + 2) = v16;
    *((void *)v15 + 3) = v17;
    v15[32] = v13;
    *(_OWORD *)(v15 + 40) = v25;
    *((void *)v15 + 7) = v24;
    v15[64] = v14 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    char v18 = v34;
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v16, v17, v18);
    swift_release();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableToggleAppIntentModifier.CodingKeys()
{
  if (*v0) {
    return 0x656C62616E457369;
  }
  else {
    return 0x7453656C67676F74;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableToggleAppIntentModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivableToggleAppIntentModifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableToggleAppIntentModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableToggleAppIntentModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableToggleAppIntentModifier@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  void v14[2] = *(_OWORD *)(v1 + 32);
  v14[3] = v3;
  char v15 = *(unsigned char *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v4;
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(unsigned char *)(v5 + 80) = *(unsigned char *)(v1 + 64);
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v9;
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v1 + 64);
  long long v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 32) = v10;
  uint64_t KeyPath = swift_getKeyPath();
  char v12 = v15;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = partial apply for closure #1 in ArchivableToggleAppIntentModifier.body(content:);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = partial apply for closure #2 in ArchivableToggleAppIntentModifier.body(content:);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 2;
  *(unsigned char *)(a1 + 82) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = KeyPath;
  *(unsigned char *)(a1 + 104) = v12;
  outlined retain of ArchivableToggleAppIntentModifier((uint64_t)v14);
  return outlined retain of ArchivableToggleAppIntentModifier((uint64_t)v14);
}

void protocol witness for Decodable.init(from:) in conformance ArchivableToggleAppIntentModifier(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableToggleAppIntentModifier(void *a1)
{
  return ArchivableToggleAppIntentModifier.encode(to:)(a1);
}

unint64_t implicit closure #1 in ArchivableAppIntentToggle.wrappedValue.setter()
{
  return 0xD00000000000005ALL;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance ArchivableAppIntentToggle()
{
  return specialized static ArchivableAppIntentToggle._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t ArchivableAppIntentToggle.Box.update(property:phase:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v22 = v3;
  if (!v3)
  {
    type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for StoredLocation<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F3FA18]);
    type metadata accessor for GraphHost();
    MEMORY[0x18C114840]();
    StoredLocation.__allocating_init(initialValue:host:signal:)();
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    char v6 = *(unsigned char *)(a1 + 32);
    long long v24 = *(_OWORD *)(a1 + 40);
    type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(0, &lazy cache variable for type metadata for LocationBox<ArchivableAppIntentToggle.AppIntentLocation>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation, (uint64_t)&unk_1ED445828, MEMORY[0x1E4F3F500]);
    swift_allocObject();
    swift_retain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
    id v7 = (id)v24;
    swift_retain();
    uint64_t v3 = LocationBox.init(_:)();
    *(void *)(v1 + 16) = v3;
  }
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AppIntentExecutor?, (uint64_t)&type metadata for AppIntentExecutor, MEMORY[0x1E4FBB718]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v21 = v9;
  uint64_t v10 = *Value;
  uint64_t v11 = Value[1];
  uint64_t v25 = a1;
  uint64_t v12 = *(void *)(v1 + 24);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v12 + 16);
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  outlined copy of AppIntentExecutor?(v10);
  uint64_t v23 = v10;
  outlined copy of AppIntentExecutor?(v10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v3 + 32);
  uint64_t v15 = *(void *)(v3 + 40);
  LOBYTE(v10) = *(unsigned char *)(v3 + 48);
  uint64_t v16 = *(void **)(v3 + 56);
  swift_retain();
  swift_retain();
  id v17 = v16;
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v14, v15, v10);
  LOBYTE(v16) = StoredLocation.update()();
  swift_release();
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(v14, v15, v10);
  swift_release();

  *(unsigned char *)uint64_t v25 = v26;
  swift_retain();
  swift_release();
  *(void *)(v25 + 8) = v3;
  if ((v16 & 1) == 0)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
    goto LABEL_7;
  }
  swift_beginAccess();
  char v18 = StoredLocationBase.wasRead.getter();
  swift_endAccess();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  if ((v18 & 1) == 0)
  {
LABEL_7:
    char v19 = (v22 == 0) | v21;
    return v19 & 1;
  }
  char v19 = 1;
  return v19 & 1;
}

uint64_t protocol witness for DynamicPropertyBox.getState<A>(type:) in conformance ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40FF4E0](a1, a3, a2);
}

uint64_t ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v29 = *a1;
  LOBYTE(v33) = v29;
  StoredLocationBase.set(_:transaction:)();
  type metadata accessor for MainActor();
  static Semantics.v7.getter();
  uint64_t v30 = v2;
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBB718]);
  static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
  static Log.archivedToggle.getter();
  uint64_t v8 = *(void **)(v2 + 40);
  long long v33 = *(_OWORD *)(v2 + 16);
  char v34 = *(unsigned char *)(v2 + 32);
  swift_retain();
  swift_retain();
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v33);
  id v9 = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v33);
  id v10 = v9;
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  int v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    int v25 = v12;
    char v26 = v7;
    uint64_t v27 = v5;
    uint64_t v28 = v4;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v32[0] = v24;
    *(_DWORD *)uint64_t v13 = 136315394;
    id v14 = objc_msgSend(v10, sel_debugDescription);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v33);
    swift_release();
    swift_release();
    swift_release();

    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v33);
    swift_release();
    *(_WORD *)(v13 + 12) = 2080;
    if (v29)
    {
      if (v29 == 1)
      {
        unint64_t v18 = 0xE300000000000000;
        uint64_t v19 = 6710895;
      }
      else
      {
        unint64_t v18 = 0xE500000000000000;
        uint64_t v19 = 0x646578696DLL;
      }
    }
    else
    {
      unint64_t v18 = 0xE200000000000000;
      uint64_t v19 = 28271;
    }
    uint64_t v22 = v26;
    uint64_t v21 = v27;
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1872C6000, v11, (os_log_type_t)v25, "Executed LNAction %s when setting value %s.", (uint8_t *)v13, 0x16u);
    uint64_t v23 = v24;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v23, -1, -1);
    MEMORY[0x18C119C60](v13, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v22, v28);
  }
  else
  {
    swift_release();
    swift_release();
    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v33);
    swift_release();
    swift_release();
    swift_release();

    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v33);
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t closure #1 in ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void (**)(uint64_t))(v4 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    swift_retain();
    v6(v7);
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
  }
  *a2 = v6 == 0;
  return result;
}

uint64_t protocol witness for Location.wasRead.getter in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.wasRead.setter();
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = StoredLocationBase.wasRead.getter() & 1;
  return protocol witness for Location.wasRead.modify in conformance ArchivableAppIntentToggle.AppIntentLocation;
}

uint64_t protocol witness for Location.wasRead.modify in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.wasRead.setter();
}

uint64_t protocol witness for Location.get() in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.get()();
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance ArchivableAppIntentToggle.AppIntentLocation(unsigned __int8 *a1)
{
  return ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)(a1);
}

uint64_t protocol witness for Location.update() in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocation.update()() & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ArchivableAppIntentToggle.AppIntentLocation(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[5] == a2[5];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableAppIntentToggle.CodingKeys()
{
  if (*v0) {
    return 0x6E65746E49707061;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableAppIntentToggle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivableAppIntentToggle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAppIntentToggle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAppIntentToggle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ArchivableAppIntentToggle.encode(to:)(void *a1)
{
  type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAppIntentToggle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys, (uint64_t)&type metadata for ArchivableAppIntentToggle.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v12 - v6;
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t v14 = *((void *)v1 + 3);
  uint64_t v15 = v9;
  int v23 = v1[32];
  long long v16 = *(_OWORD *)(v1 + 40);
  uint64_t v13 = *((void *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = v8;
  char v24 = 0;
  lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
  uint64_t v10 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    uint64_t v18 = v15;
    uint64_t v19 = v14;
    char v20 = v23;
    long long v21 = v16;
    uint64_t v22 = v13;
    char v24 = 1;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void ArchivableAppIntentToggle.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAppIntentToggle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys, (uint64_t)&type metadata for ArchivableAppIntentToggle.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v9 = v6;
    uint64_t v10 = v19;
    char v25 = 0;
    lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v11 = v20;
    char v25 = 1;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    char v14 = v22;
    uint64_t v15 = v24;
    long long v16 = v23;
    long long v18 = v23;
    *(unsigned char *)uint64_t v10 = v11;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = v12;
    *(void *)(v10 + 24) = v13;
    *(unsigned char *)(v10 + 32) = v14;
    *(_OWORD *)(v10 + 40) = v16;
    *(void *)(v10 + 56) = v15;
    outlined copy of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
    id v17 = (id)v18;
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
    swift_release();
  }
}

void protocol witness for Decodable.init(from:) in conformance ArchivableAppIntentToggle(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAppIntentToggle(void *a1)
{
  return ArchivableAppIntentToggle.encode(to:)(a1);
}

uint64_t View.toggleStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToggleStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t dispatch thunk of ToggleStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t outlined destroy of AppIntentAction(uint64_t a1)
{
  return a1;
}

uint64_t sub_1878B5900()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ToggleStyleConfiguration.Effect(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if ((unint64_t)v1 >= 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ToggleStyleConfiguration.Effect(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)a2[3];
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {
    long long v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    char v7 = *((unsigned char *)a2 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    id v10 = v4;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for ToggleStyleConfiguration.Effect(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = *((void *)a2 + 1);
      char v17 = *((unsigned char *)a2 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v16, v17);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(unsigned char *)(a1 + 16) = v17;
      long long v18 = (void *)*((void *)a2 + 3);
      *(void *)(a1 + 24) = v18;
      uint64_t v19 = *((void *)a2 + 4);
      uint64_t v20 = *((void *)a2 + 5);
      *(void *)(a1 + 32) = v19;
      *(void *)(a1 + 40) = v20;
      id v21 = v18;
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v22 = *a2;
    long long v23 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v23;
    *(_OWORD *)a1 = v22;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  char v7 = *((unsigned char *)a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  outlined consume of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
  long long v11 = (void *)*((void *)a2 + 3);
  uint64_t v12 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v11;
  id v13 = v11;

  uint64_t v14 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ToggleStyleConfiguration.Effect(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 24);
  if ((unint64_t)v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 24);
  if (v5 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

    swift_release();
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 24) = v5;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleStyleConfiguration.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ToggleStyleConfiguration.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

double destructiveInjectEnumTag for ToggleStyleConfiguration.Effect(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToggleStyleConfiguration.Effect()
{
  return &type metadata for ToggleStyleConfiguration.Effect;
}

ValueMetadata *type metadata accessor for ToggleStateBool()
{
  return &type metadata for ToggleStateBool;
}

uint64_t getEnumTagSinglePayload for ToggleStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ToggleStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878B60B4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToggleStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ToggleStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1878B61E4()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in View.platformItemToggleState(_:)(void *a1)
{
  return closure #1 in View.platformItemToggleState(_:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1878B61FC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }

  return swift_deallocObject();
}

void *partial apply for closure #2 in ResolvedToggleStyle.body.getter()
{
  return closure #2 in ResolvedToggleStyle.body.getter((void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleState and conformance ToggleState()
{
  unint64_t result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

uint64_t initializeWithCopy for ArchivableToggleAppIntentModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  id v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableToggleAppIntentModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  unsigned int v10 = *(void **)(a2 + 40);
  int v11 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  id v12 = v10;

  uint64_t v13 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v13;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ArchivableToggleAppIntentModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableToggleAppIntentModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableToggleAppIntentModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableToggleAppIntentModifier()
{
  return &type metadata for ArchivableToggleAppIntentModifier;
}

ValueMetadata *type metadata accessor for ArchivableAppIntentToggle.CodingKeys()
{
  return &type metadata for ArchivableAppIntentToggle.CodingKeys;
}

uint64_t assignWithCopy for ToggleStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  char v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      char v9 = *(unsigned char *)(a2 + 64);
      outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      char v12 = *(unsigned char *)(a1 + 64);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      *(unsigned char *)(a1 + 64) = v9;
      outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
      uint64_t v13 = *(void **)(a2 + 72);
      unsigned int v14 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v13;
      id v15 = v13;

      uint64_t v16 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 48);
      long long v25 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_OWORD *)(a2 + 80);
      *char v4 = *v5;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 80) = v24;
    }
  }
  else if (v6)
  {
    uint64_t v17 = *(void *)(a2 + 48);
    uint64_t v18 = *(void *)(a2 + 56);
    char v19 = *(unsigned char *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v18;
    *(unsigned char *)(a1 + 64) = v19;
    uint64_t v20 = *(void **)(a2 + 72);
    *(void *)(a1 + 72) = v20;
    uint64_t v21 = *(void *)(a2 + 80);
    uint64_t v22 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v21;
    *(void *)(a1 + 88) = v22;
    id v23 = v20;
    swift_retain();
  }
  else
  {
    long long v26 = *v5;
    long long v27 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v27;
    *char v4 = v26;
  }
  return a1;
}

uint64_t assignWithTake for ToggleStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  char v4 = *(void **)(a1 + 72);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 72);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 48);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    return a1;
  }
  char v6 = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  char v9 = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 72) = v5;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleStyleConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToggleStyleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));

    swift_release();
  }
  uint64_t v3 = *(void *)(a1 + 96);
  char v4 = *(unsigned char *)(a1 + 104);

  return outlined consume of Environment<Bool>.Content(v3, v4);
}

uint64_t initializeWithCopy for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  char v6 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    char v9 = *(unsigned char *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = v9;
    uint64_t v10 = *(void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v11;
    id v12 = v6;
    swift_retain();
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v14 = *(void *)(a2 + 96);
  char v15 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v14, v15);
  *(void *)(a1 + 96) = v14;
  *(unsigned char *)(a1 + 104) = v15;
  return a1;
}

uint64_t assignWithCopy for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      char v9 = *(unsigned char *)(a2 + 64);
      outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      char v12 = *(unsigned char *)(a1 + 64);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      *(unsigned char *)(a1 + 64) = v9;
      outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
      long long v13 = *(void **)(a2 + 72);
      uint64_t v14 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v13;
      id v15 = v13;

      uint64_t v16 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 48);
      long long v24 = *(_OWORD *)(a2 + 64);
      long long v23 = *(_OWORD *)(a2 + 80);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 80) = v23;
    }
  }
  else if (v6)
  {
    uint64_t v17 = *(void *)(a2 + 48);
    uint64_t v18 = *(void *)(a2 + 56);
    char v19 = *(unsigned char *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v18;
    *(unsigned char *)(a1 + 64) = v19;
    uint64_t v20 = *(void **)(a2 + 72);
    *(void *)(a1 + 72) = v20;
    uint64_t v21 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v21;
    id v22 = v20;
    swift_retain();
  }
  else
  {
    long long v25 = *v5;
    long long v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v26;
    *uint64_t v4 = v25;
  }
  uint64_t v27 = *(void *)(a2 + 96);
  char v28 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v27, v28);
  uint64_t v29 = *(void *)(a1 + 96);
  char v30 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = v27;
  *(unsigned char *)(a1 + 104) = v28;
  outlined consume of Environment<Bool>.Content(v29, v30);
  return a1;
}

uint64_t assignWithTake for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v4 = *(void **)(a1 + 72);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 72);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 48);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_6;
  }
  char v6 = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  char v9 = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 72) = v5;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
LABEL_6:
  char v11 = *(unsigned char *)(a2 + 104);
  uint64_t v12 = *(void *)(a1 + 96);
  char v13 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedToggleStyleBody.ArchiveBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for ArchivableToggleAppIntentModifier(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableAppIntentToggle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = v7;
  id v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAppIntentToggle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  long long v10 = *(void **)(a2 + 40);
  char v11 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  id v12 = v10;

  uint64_t v13 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivableAppIntentToggle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ArchivableAppIntentToggle()
{
  return &type metadata for ArchivableAppIntentToggle;
}

uint64_t sub_1878B7038()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedToggleStyleBody.ArchiveBody()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ArchivableToggleAppIntentModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
  unint64_t result = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableToggleAppIntentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized ArchivableToggleAppIntentModifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7453656C67676F74 && a2 == 0xEB00000000657461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized static ArchivableAppIntentToggle._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  AGCreateWeakAttribute();
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for MutableBox<AppIntentExecutor?>();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  return swift_release();
}

uint64_t specialized ArchivableAppIntentToggle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65746E49707061 && a2 == 0xEF6E6F6974634174)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle);
  }
  return result;
}

uint64_t partial apply for closure #1 in ArchivableToggleAppIntentModifier.body(content:)()
{
  return closure #1 in ArchivableToggleAppIntentModifier.body(content:)(v0 + 16);
}

uint64_t objectdestroy_26Tm_0()
{
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ArchivableToggleAppIntentModifier.body(content:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return closure #2 in ArchivableToggleAppIntentModifier.body(content:)(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t outlined retain of ArchivableToggleAppIntentModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  id v6 = v5;
  swift_retain();
  return a1;
}

uint64_t outlined init with take of AnyLocation<ToggleState>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyLocation<ToggleState>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyLocation<ToggleState>?()
{
  if (!lazy cache variable for type metadata for AnyLocation<ToggleState>?)
  {
    type metadata accessor for Binding<Bool>(255, &lazy cache variable for type metadata for AnyLocation<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F3F458]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<ToggleState>?);
    }
  }
}

uint64_t outlined release of ArchivableToggleAppIntentModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  swift_release();

  return a1;
}

void type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>)
  {
    type metadata accessor for Binding<Bool>(255, &lazy cache variable for type metadata for [ToggleState], MEMORY[0x1E4F3F540], MEMORY[0x1E4FBB320]);
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    lazy protocol witness table accessor for type [ToggleState] and conformance [A]();
    lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
    unint64_t v0 = type metadata accessor for TemporalStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [ToggleState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToggleState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToggleState] and conformance [A])
  {
    type metadata accessor for Binding<Bool>(255, &lazy cache variable for type metadata for [ToggleState], MEMORY[0x1E4F3F540], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToggleState] and conformance [A]);
  }
  return result;
}

void type metadata accessor for MutableBox<AppIntentExecutor?>()
{
  if (!lazy cache variable for type metadata for MutableBox<AppIntentExecutor?>)
  {
    type metadata accessor for Binding<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AppIntentExecutor?, (uint64_t)&type metadata for AppIntentExecutor, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for MutableBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AppIntentExecutor?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box);
  }
  return result;
}

uint64_t initializeWithCopy for ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableAppIntentToggle.Box(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableAppIntentToggle.Box(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ArchivableAppIntentToggle.Box()
{
  return &unk_1ED445940;
}

unsigned char *storeEnumTagSinglePayload for ArchivableAppIntentToggle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878B7F44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ArchivableToggleAppIntentModifier.CodingKeys()
{
  return &unk_1ED45E380;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>();
    lazy protocol witness table accessor for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>();
    type metadata accessor for Binding<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

void type metadata accessor for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>()
{
  if (!lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for ButtonBehavior();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>);
    type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>)
  {
    type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableToggleAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier, (uint64_t)&type metadata for ArchivableToggleAppIntentModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for TemporalStateViewModifier<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F3F538], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TemporalStateViewModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>);
    lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableToggleAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier, (uint64_t)&type metadata for ArchivableToggleAppIntentModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>;
  if (!lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>();
    lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    lazy protocol witness table accessor for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>, (void (*)(uint64_t))type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>, (void (*)(uint64_t))type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>);
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in ArchivableAppIntentToggle.Box()
{
  return &protocol witness table for ArchivableAppIntentToggle;
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation);
  }
  return result;
}

uint64_t destroy for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v9;
  *(void *)(a1 + 56) = v8;
  id v10 = (id)v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  id v10 = *(void **)(a2 + 40);
  char v11 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  id v12 = v10;

  uint64_t v13 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

void *type metadata accessor for ArchivableAppIntentToggle.AppIntentLocation()
{
  return &unk_1ED445828;
}

uint64_t partial apply for closure #1 in ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)(*(void *)(v1 + 16), a1);
}

uint64_t outlined retain of Environment<AppIntentExecutor?>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Environment<AppIntentExecutor?>(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for StepperStyle.makeBody(configuration:) in conformance SegmentedButtonStepperStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a1[6];
  *(void *)a2 = *a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = v7;
  *(_WORD *)(a2 + 56) = 257;
  *(unsigned char *)(a2 + 58) = 2;
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of AppIntentExecutor?(v4);

  return swift_retain();
}

uint64_t UIKitStepper.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[6];
  uint64_t v16 = v2[4];
  uint64_t v17 = v2[5];
  objc_msgSend(a1, sel_setValue_, 0.0);
  double v10 = -2.0;
  if (!v8) {
    double v10 = 0.0;
  }
  objc_msgSend(a1, sel_setMinimumValue_, v10);
  double v11 = 2.0;
  if (!v5) {
    double v11 = 0.0;
  }
  objc_msgSend(a1, sel_setMaximumValue_, v11);
  objc_msgSend(a1, sel_setStepValue_, 1.0);
  id v12 = (void *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24);
  *id v12 = v6;
  v12[1] = v5;
  _OWORD v12[2] = v7;
  void v12[3] = v8;
  v12[4] = v16;
  v12[5] = v17;
  v12[6] = v9;
  swift_retain();
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v8);
  swift_retain();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);

  return swift_release();
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitStepper(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1CA8]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_valueChanged_, 4096);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingBegan_, 1);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingEnded_, 448);
  return v2;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitStepper@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  double v10 = (objc_class *)type metadata accessor for Coordinator();
  double v11 = (char *)objc_allocWithZone(v10);
  id v12 = &v11[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
  *(void *)id v12 = v3;
  *((void *)v12 + 1) = v4;
  *((void *)v12 + 2) = v5;
  *((void *)v12 + 3) = v6;
  *((void *)v12 + 4) = v7;
  *((void *)v12 + 5) = v8;
  *((void *)v12 + 6) = v9;
  swift_retain();
  outlined copy of AppIntentExecutor?(v4);
  outlined copy of AppIntentExecutor?(v6);
  v14.receiver = v11;
  v14.super_class = v10;
  swift_retain();
  id result = objc_msgSendSuper2(&v14, sel_init);
  *a1 = result;
  return result;
}

id Coordinator.valueChanged(_:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_value);
  if (v4 > 0.0)
  {
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8);
    if (v5)
    {
      MEMORY[0x1F4188790](v3);
      swift_retain();
      static Update.dispatchImmediately<A>(_:)();
      uint64_t v6 = v5;
LABEL_7:
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
      return objc_msgSend(a1, sel_setValue_, 0.0);
    }
  }
  id v7 = objc_msgSend(a1, sel_value);
  if (v8 < 0.0)
  {
    uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24);
    if (v9)
    {
      MEMORY[0x1F4188790](v7);
      swift_retain();
      static Update.dispatchImmediately<A>(_:)();
      uint64_t v6 = v9;
      goto LABEL_7;
    }
  }
  return objc_msgSend(a1, sel_setValue_, 0.0);
}

uint64_t partial apply for closure #1 in Coordinator.editingEnded(_:)()
{
  return partial apply for closure #1 in Coordinator.editingEnded(_:)(0);
}

{
  return partial apply for closure #1 in Coordinator.valueChanged(_:)(0);
}

uint64_t partial apply for closure #1 in Coordinator.editingBegan(_:)()
{
  return partial apply for closure #1 in Coordinator.editingEnded(_:)(1);
}

uint64_t partial apply for closure #1 in Coordinator.editingEnded(_:)(uint64_t a1)
{
  id v3 = *(void (**)(uint64_t))(*(void *)(v1 + 16)
                                      + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration
                                      + 40);
  swift_retain();
  v3(a1);

  return swift_release();
}

ValueMetadata *type metadata accessor for SegmentedButtonStepperStyle()
{
  return &type metadata for SegmentedButtonStepperStyle;
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in SegmentedButtonStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for UIKitStepper(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 24)) {
    swift_release();
  }

  return swift_release();
}

void *initializeWithCopy for UIKitStepper(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v4 = a2[1];
  swift_retain();
  if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    uint64_t v8 = a2[4];
    a1[3] = v7;
    a1[4] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  uint64_t v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_retain();
  return a1;
}

void *assignWithCopy for UIKitStepper(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      uint64_t v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  uint64_t v7 = a2[3];
  if (!a1[3])
  {
    if (v7)
    {
      uint64_t v9 = a2[4];
      a1[3] = v7;
      a1[4] = v9;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[4];
  a1[3] = v7;
  a1[4] = v8;
  swift_retain();
  swift_release();
LABEL_15:
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIKitStepper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v9;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  swift_release();
LABEL_15:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitStepper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitStepper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitStepper()
{
  return &type metadata for UIKitStepper;
}

uint64_t sub_1878B96F8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>();
    type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>)
  {
    type metadata accessor for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>();
    type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>, (void (*)(void))lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>);
    }
  }
}

void type metadata accessor for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>()
{
  if (!lazy cache variable for type metadata for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>)
  {
    type metadata accessor for ModifiedContent<UIKitStepper, _FixedSizeLayout>();
    unint64_t v0 = type metadata accessor for LabeledContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<UIKitStepper, _FixedSizeLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<UIKitStepper, _FixedSizeLayout>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitStepper, _FixedSizeLayout>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, (void (*)(void))lazy protocol witness table accessor for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>();
    lazy protocol witness table accessor for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitStepper, _FixedSizeLayout>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t protocol witness for _ScrollableContentProvider.root(scrollView:) in conformance _ScrollableLayoutView<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _ScrollableContentProvider.root(scrollView:)(a1, a2);
}

uint64_t _ScrollableContentProvider.root(scrollView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _ScrollView.Main();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v10 - v7, a1, v4, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
}

uint64_t one-time initialization function for indicatorColor()
{
  uint64_t result = Color.init(_:white:opacity:)();
  indicatorColor = result;
  return result;
}

uint64_t _ScrollViewRoot.body.getter()
{
  return View.overlayPreferenceValue<A, B>(_:alignment:_:)();
}

uint64_t closure #1 in _ScrollViewRoot.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    int v4 = *(_DWORD *)(a1 + 8);
    *(void *)a2 = result;
    *(_DWORD *)(a2 + 8) = v4;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ScrollOverlayView and conformance _ScrollOverlayView()
{
  unint64_t result = lazy protocol witness table cache variable for type _ScrollOverlayView and conformance _ScrollOverlayView;
  if (!lazy protocol witness table cache variable for type _ScrollOverlayView and conformance _ScrollOverlayView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollOverlayView and conformance _ScrollOverlayView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in _ScrollViewRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for _ScrollViewRoot()
{
  uint64_t result = type metadata accessor for _ScrollView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ScrollViewRoot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 168 > 0x18)
  {
    uint64_t v9 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    char v16 = *(unsigned char *)(v11 + 32);
    outlined copy of _ScrollViewConfig.ContentOffset(*(void *)v11, v13, v14, v15, v16);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(void *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = v15;
    *(unsigned char *)(v10 + 32) = v16;
    long long v17 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_OWORD *)(v10 + 40) = v17;
    *(void *)(v10 + 72) = *(void *)(v11 + 72);
    *(unsigned char *)(v10 + 80) = *(unsigned char *)(v11 + 80);
    *(unsigned char *)(v10 + 81) = *(unsigned char *)(v11 + 81);
    uint64_t v18 = *(void *)(v11 + 112);
    *(void *)(v10 + 112) = v18;
    *(void *)(v10 + 120) = *(void *)(v11 + 120);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(v10 + 88, v11 + 88);
    *(unsigned char *)(v10 + 128) = *(unsigned char *)(v11 + 128);
    *(unsigned char *)(v10 + 129) = *(unsigned char *)(v11 + 129);
    *(unsigned char *)(v10 + 130) = *(unsigned char *)(v11 + 130);
    *(unsigned char *)(v10 + 131) = *(unsigned char *)(v11 + 131);
    long long v19 = *(_OWORD *)(v11 + 136);
    *(_OWORD *)(v10 + 152) = *(_OWORD *)(v11 + 152);
    *(_OWORD *)(v10 + 136) = v19;
  }
  return v4;
}

uint64_t outlined copy of _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t destroy for _ScrollViewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of _ScrollViewConfig.ContentOffset(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned char *)(v4 + 32));

  return __swift_destroy_boxed_opaque_existential_1(v4 + 88);
}

uint64_t outlined consume of _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  char v13 = *(unsigned char *)(v8 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)v8, v10, v11, v12, v13);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(unsigned char *)(v7 + 32) = v13;
  long long v14 = *(_OWORD *)(v8 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(_OWORD *)(v7 + 40) = v14;
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  *(unsigned char *)(v7 + 80) = *(unsigned char *)(v8 + 80);
  *(unsigned char *)(v7 + 81) = *(unsigned char *)(v8 + 81);
  uint64_t v15 = *(void *)(v8 + 112);
  *(void *)(v7 + 112) = v15;
  *(void *)(v7 + 120) = *(void *)(v8 + 120);
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v7 + 88, v8 + 88);
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(v8 + 128);
  *(unsigned char *)(v7 + 129) = *(unsigned char *)(v8 + 129);
  *(unsigned char *)(v7 + 130) = *(unsigned char *)(v8 + 130);
  *(unsigned char *)(v7 + 131) = *(unsigned char *)(v8 + 131);
  long long v16 = *(_OWORD *)(v8 + 136);
  *(_OWORD *)(v7 + 152) = *(_OWORD *)(v8 + 152);
  *(_OWORD *)(v7 + 136) = v16;
  return a1;
}

uint64_t assignWithCopy for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  char v13 = *(unsigned char *)(v8 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)v8, v10, v11, v12, v13);
  uint64_t v14 = *(void *)v7;
  uint64_t v15 = *(void *)(v7 + 8);
  uint64_t v16 = *(void *)(v7 + 16);
  uint64_t v17 = *(void *)(v7 + 24);
  char v18 = *(unsigned char *)(v7 + 32);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(unsigned char *)(v7 + 32) = v13;
  outlined consume of _ScrollViewConfig.ContentOffset(v14, v15, v16, v17, v18);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  *(void *)(v7 + 48) = *(void *)(v8 + 48);
  *(void *)(v7 + 56) = *(void *)(v8 + 56);
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  *(unsigned char *)(v7 + 80) = *(unsigned char *)(v8 + 80);
  *(unsigned char *)(v7 + 81) = *(unsigned char *)(v8 + 81);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v7 + 88), (uint64_t *)(v8 + 88));
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(v8 + 128);
  *(unsigned char *)(v7 + 129) = *(unsigned char *)(v8 + 129);
  *(unsigned char *)(v7 + 130) = *(unsigned char *)(v8 + 130);
  *(unsigned char *)(v7 + 131) = *(unsigned char *)(v8 + 131);
  *(void *)(v7 + 136) = *(void *)(v8 + 136);
  *(void *)(v7 + 144) = *(void *)(v8 + 144);
  *(void *)(v7 + 152) = *(void *)(v8 + 152);
  *(void *)(v7 + 160) = *(void *)(v8 + 160);
  return a1;
}

uint64_t initializeWithTake for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  long long v11 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  long long v15 = *(_OWORD *)(v8 + 128);
  long long v14 = *(_OWORD *)(v8 + 144);
  long long v16 = *(_OWORD *)(v8 + 112);
  *(void *)(v7 + 160) = *(void *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithTake for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v8 = *(unsigned char *)(v7 + 32);
  unint64_t v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  long long v15 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v15;
  *(unsigned char *)(v9 + 32) = v8;
  outlined consume of _ScrollViewConfig.ContentOffset(v10, v11, v12, v13, v14);
  *(void *)(v9 + 40) = *(void *)(v7 + 40);
  *(void *)(v9 + 48) = *(void *)(v7 + 48);
  *(void *)(v9 + 56) = *(void *)(v7 + 56);
  *(void *)(v9 + 64) = *(void *)(v7 + 64);
  *(void *)(v9 + 72) = *(void *)(v7 + 72);
  *(unsigned char *)(v9 + 80) = *(unsigned char *)(v7 + 80);
  *(unsigned char *)(v9 + 81) = *(unsigned char *)(v7 + 81);
  __swift_destroy_boxed_opaque_existential_1(v9 + 88);
  long long v16 = *(_OWORD *)(v7 + 88);
  long long v17 = *(_OWORD *)(v7 + 104);
  *(void *)(v9 + 120) = *(void *)(v7 + 120);
  *(_OWORD *)(v9 + 104) = v17;
  *(_OWORD *)(v9 + 88) = v16;
  *(unsigned char *)(v9 + 128) = *(unsigned char *)(v7 + 128);
  *(unsigned char *)(v9 + 129) = *(unsigned char *)(v7 + 129);
  *(unsigned char *)(v9 + 130) = *(unsigned char *)(v7 + 130);
  *(unsigned char *)(v9 + 131) = *(unsigned char *)(v7 + 131);
  *(void *)(v9 + 136) = *(void *)(v7 + 136);
  *(void *)(v9 + 144) = *(void *)(v7 + 144);
  *(void *)(v9 + 152) = *(void *)(v7 + 152);
  *(void *)(v9 + 160) = *(void *)(v7 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollViewRoot(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 168;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878BA6A4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 112);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for _ScrollViewRoot(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 168;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF58) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF58) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF58)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 168);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1878BA8C4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 136) = 0u;
            *(_OWORD *)(v19 + 152) = 0u;
            *(_OWORD *)(v19 + 120) = 0u;
            *(_OWORD *)(v19 + 104) = 0u;
            *(_OWORD *)(v19 + 88) = 0u;
            *(_OWORD *)(v19 + 72) = 0u;
            *(_OWORD *)(v19 + 56) = 0u;
            *(_OWORD *)(v19 + 40) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 112) = a2 - 1;
          }
        }
        else
        {
          char v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t type metadata accessor for _ScrollViewRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1878BA904()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>()
{
  if (!lazy cache variable for type metadata for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>)
  {
    lazy protocol witness table accessor for type _ScrollOverlayView and conformance _ScrollOverlayView();
    unint64_t v0 = type metadata accessor for _OverlayPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>);
    }
  }
}

void *type metadata accessor for _ScrollOverlayView()
{
  return &unk_1ED42ABD0;
}

uint64_t associated type witness table accessor for View.Body : View in _ScrollOverlayView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  uint64_t v5 = *(void *)v1 + 168;
  swift_beginAccess();
  outlined init with copy of _ScrollViewConfig(v5, (uint64_t)v29);
  double v6 = *(double *)(v3 + 336);
  double v7 = *(double *)(v3 + 344);
  CGSize.inset(by:)();
  double v9 = v8;
  double v11 = v10;
  swift_retain();
  closure #1 in _ScrollOverlayView.body.getter((uint64_t)v29, v3, (uint64_t)&v21, v6, v7, v9, v11);
  char v12 = v22;
  char v13 = v26;
  long long v14 = v21;
  long long v15 = v23;
  long long v16 = v24;
  long long v17 = v25;
  long long v18 = v27;
  long long v19 = v28;
  LOBYTE(v21) = v22;
  v29[168] = v26;
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = v14;
  *(unsigned char *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 56) = v16;
  *(_OWORD *)(a1 + 72) = v17;
  *(unsigned char *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v19;
  return outlined destroy of _ScrollViewConfig((uint64_t)v29);
}

uint64_t closure #1 in _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v24 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in _ScrollOverlayView.body.getter(a1, a2, (uint64_t)&v25, a4, a6);
  uint64_t v14 = v25;
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  uint64_t v18 = static HorizontalAlignment.center.getter();
  closure #2 in closure #1 in _ScrollOverlayView.body.getter(a1, a2, (uint64_t)&v25, a5, a7);
  uint64_t v19 = v25;
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  *(void *)a3 = v24;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = v15;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v17;
  *(void *)(a3 + 56) = v18;
  *(void *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)(a3 + 80) = v19;
  *(void *)(a3 + 88) = v20;
  *(void *)(a3 + 96) = v21;
  *(void *)(a3 + 104) = v22;
  outlined copy of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v14, v15);
  outlined copy of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v19, v20);
  outlined consume of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v19, v20);

  return outlined consume of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v14, v15);
}

uint64_t closure #1 in closure #1 in _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D2>)
{
  int64x2_t v7 = 0uLL;
  if (*(unsigned char *)(a1 + 130) != 1)
  {
LABEL_11:
    uint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_17;
  }
  swift_beginAccess();
  unsigned __int16 v10 = *(unsigned __int8 *)(a2 + 146);
  if (v10 >> 6)
  {
    if (v10 >> 6 != 1)
    {
      uint64_t v14 = 0;
      uint64_t result = 0;
      int64x2_t v7 = 0uLL;
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(a2 + 136);
    if (*(void *)(v11 + 16) < 2uLL)
    {
      __break(1u);
LABEL_19:
      swift_once();
      goto LABEL_14;
    }
    unsigned int v12 = fabs(*(double *)(v11 + 48)) > 2.5;
  }
  else
  {
    unsigned int v12 = ((*(unsigned __int16 *)(a2 + 144) | (*(unsigned __int8 *)(a2 + 146) << 16)) >> 8) & 1;
  }
  if (v12) {
    BOOL v13 = a5 < a4;
  }
  else {
    BOOL v13 = 0;
  }
  int64x2_t v7 = 0uLL;
  if (!v13) {
    goto LABEL_11;
  }
  if (one-time initialization token for indicatorColor != -1) {
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v16 = indicatorColor;
  uint64_t v17 = one-time initialization token for visibleIndicatorTransition;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t result = swift_retain();
  int64x2_t v7 = vdupq_n_s64(0x100uLL);
  v7.i64[0] = v16;
  uint64_t v14 = 1;
LABEL_17:
  *(void *)a3 = v14;
  *(int64x2_t *)(a3 + 8) = v7;
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t closure #2 in closure #1 in _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D1>, double a5@<D3>)
{
  int64x2_t v6 = 0uLL;
  if (*(unsigned char *)(a1 + 131) != 1)
  {
LABEL_11:
    uint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_17;
  }
  swift_beginAccess();
  unsigned __int16 v10 = *(unsigned __int8 *)(a2 + 146);
  if (v10 >> 6)
  {
    if (v10 >> 6 != 1)
    {
      uint64_t v14 = 0;
      uint64_t result = 0;
      int64x2_t v6 = 0uLL;
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(a2 + 136);
    if (*(void *)(v11 + 16) < 2uLL)
    {
      __break(1u);
LABEL_19:
      swift_once();
      goto LABEL_14;
    }
    int v12 = fabs(*(double *)(v11 + 136)) > 2.5;
  }
  else
  {
    int v12 = *(_WORD *)(a2 + 144) & 1;
  }
  if (v12) {
    BOOL v13 = a5 < a4;
  }
  else {
    BOOL v13 = 0;
  }
  int64x2_t v6 = 0uLL;
  if (!v13) {
    goto LABEL_11;
  }
  if (one-time initialization token for indicatorColor != -1) {
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v16 = indicatorColor;
  uint64_t v17 = one-time initialization token for visibleIndicatorTransition;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t result = swift_retain();
  int64x2_t v6 = vdupq_n_s64(0x100uLL);
  v6.i64[0] = v16;
  uint64_t v14 = 1;
LABEL_17:
  *(void *)a3 = v14;
  *(int64x2_t *)(a3 + 8) = v6;
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ScrollOverlayView()
{
  return static _VariadicView.Tree<>._viewListCount(inputs:)();
}

uint64_t outlined init with copy of _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of _ScrollViewConfig(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

double indicatorLayout(x0:x1:contentOffset:contentSize:pageSize:)(double a1, double a2, double a3, double a4)
{
  double v4 = 0.0;
  if (a4 > 0.0)
  {
    if (a3 / a4 <= 1.0) {
      double v5 = a3 / a4;
    }
    else {
      double v5 = 1.0;
    }
    if (a3 / a4 < 0.0) {
      double v5 = 0.0;
    }
    return (a2 - a1) * v5 + a1;
  }
  return v4;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance ScrollOverlayLayout()
{
  return MEMORY[0x1F4100F28]();
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ScrollOverlayLayout(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 10.0;
  }
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ScrollOverlayLayout(double a1, double a2, double a3, double a4)
{
  return specialized ScrollOverlayLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4);
}

uint64_t one-time initialization function for visibleIndicatorTransition()
{
  static AnyTransition.opacity.getter();
  uint64_t v0 = AnyTransition.transaction(_:)();
  uint64_t result = swift_release();
  visibleIndicatorTransition = v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of visibleIndicatorTransition(uint64_t a1, char a2)
{
  if (a2 == 2) {
    static Animation.easeInOut(duration:)();
  }
  return Transaction.animation.setter();
}

void type metadata accessor for _LayoutRoot<ScrollOverlayLayout>()
{
  if (!lazy cache variable for type metadata for _LayoutRoot<ScrollOverlayLayout>)
  {
    lazy protocol witness table accessor for type ScrollOverlayLayout and conformance ScrollOverlayLayout();
    unint64_t v0 = type metadata accessor for _LayoutRoot();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<ScrollOverlayLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollOverlayLayout and conformance ScrollOverlayLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout;
  if (!lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout;
  if (!lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout);
  }
  return result;
}

void type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)()
{
  if (!lazy cache variable for type metadata for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>))
  {
    type metadata accessor for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>));
    }
  }
}

void type metadata accessor for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>()
{
  if (!lazy cache variable for type metadata for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)
  {
    type metadata accessor for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>);
    }
  }
}

void type metadata accessor for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for _ShapeView<Capsule, Color>();
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for _ShapeView<Capsule, Color>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Capsule, Color>)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<TransitionTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView> and conformance _OverlayPreferenceModifier<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, Color>);
    lazy protocol witness table accessor for type _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView> and conformance _OverlayPreferenceModifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TransitionTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView> and conformance _OverlayPreferenceModifier<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>(255, &lazy cache variable for type metadata for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>);
  }
  return result;
}

void *type metadata accessor for ScrollOverlayLayout()
{
  return &unk_1ED42DDA0;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>();
    lazy protocol witness table accessor for type _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView> and conformance _OverlayPreferenceModifier<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScrollOverlayLayout> and conformance _LayoutRoot<A>, (void (*)(uint64_t))type metadata accessor for _LayoutRoot<ScrollOverlayLayout>);
    lazy protocol witness table accessor for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>)
  {
    type metadata accessor for _LayoutRoot<ScrollOverlayLayout>();
    type metadata accessor for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>(255, &lazy cache variable for type metadata for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView> and conformance _OverlayPreferenceModifier<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScrollOverlayLayout> and conformance _LayoutRoot<A>, (void (*)(uint64_t))type metadata accessor for _LayoutRoot<ScrollOverlayLayout>);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for ScrollOverlayLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ScrollOverlayLayout and conformance ScrollOverlayLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized ScrollOverlayLayout.placeSubviews(in:proposal:subviews:cache:)(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = *v4;
  swift_beginAccess();
  double v6 = *(double *)(v5 + 72);
  double v23 = *(double *)(v5 + 336);
  double v24 = *(double *)(v5 + 64);
  double v26 = *(double *)(v5 + 344);
  swift_beginAccess();
  CGSize.inset(by:)();
  double v7 = *(double *)(v5 + 304);
  double v8 = *(double *)(v5 + 312);
  double v10 = *(double *)(v5 + 320);
  double v9 = *(double *)(v5 + 328);
  EdgeInsets.init(_all:)();
  double v12 = v7 + v11;
  double v14 = v8 + v13;
  double v16 = v10 + v15;
  double v18 = v9 + v17;
  double v19 = 0.0;
  if ((*(unsigned char *)(v5 + 392) & (v6 < 0.0)) != 0) {
    double v19 = v6;
  }
  double v20 = v12 - v19;
  indicatorLayout(x0:x1:contentOffset:contentSize:pageSize:)(v14, a3 - v18, v24, v23);
  indicatorLayout(x0:x1:contentOffset:contentSize:pageSize:)(v20, a4 - v16, v6, v26);
  LayoutSubviews.subscript.getter();
  static UnitPoint.topLeading.getter();
  LayoutSubview.place(at:anchor:proposal:)();
  LayoutSubviews.subscript.getter();
  static UnitPoint.topLeading.getter();
  return LayoutSubview.place(at:anchor:proposal:)();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance _BorderedButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v10;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v8;
  *(unsigned char *)(a2 + 64) = v4;
  outlined copy of AppIntentExecutor?(v5);

  return outlined copy of AppIntentExecutor?(v7);
}

uint64_t BorderedButtonMenuStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v9 = *(unsigned char *)(v1 + 64);
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  char v10 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool?>.Content(v3, v4);
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v8);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = v10;
  *(unsigned char *)(a1 + 19) = 2;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = KeyPath;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v12;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v13;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = result;
  *(unsigned char *)(a1 + 112) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BorderedButtonMenuStyleBody()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

SwiftUI::BorderedButtonMenuStyle __swiftcall BorderedButtonMenuStyle.init()()
{
  result.isProminent = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void BorderedButtonMenuStyle.makeBody(configuration:)()
{
}

void static MenuStyle<>._servicesButton.getter()
{
}

void _ServicesButtonMenuStyle.init(tintOpacity:)()
{
}

void _ServicesButtonMenuStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in BorderedButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in _ServicesButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for BorderedButtonMenuStyle()
{
  return &type metadata for BorderedButtonMenuStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for _ServicesButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t *assignWithCopy for _ServicesButtonMenuStyle(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t *assignWithTake for _ServicesButtonMenuStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for _ServicesButtonMenuStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ServicesButtonMenuStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)SwiftUI::BorderedButtonMenuStyle result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ServicesButtonMenuStyle()
{
  return &type metadata for _ServicesButtonMenuStyle;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody;
  if (!lazy protocol witness table cache variable for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BorderedButtonMenuStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878BC2ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _BorderedButtonMenuStyle()
{
  return &type metadata for _BorderedButtonMenuStyle;
}

uint64_t destroy for BorderedButtonMenuStyleBody(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  uint64_t result = outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  if (*(void *)(a1 + 32)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 48))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BorderedButtonMenuStyleBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  uint64_t v10 = *(void *)(a2 + 48);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t *assignWithCopy for BorderedButtonMenuStyleBody(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = a1[2];
  uint64_t v11 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  if (a1[4])
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 40);
      a1[4] = v12;
      a1[5] = v13;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 40);
    a1[4] = v12;
    a1[5] = v14;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
LABEL_8:
  uint64_t v15 = *(void *)(a2 + 48);
  if (!a1[6])
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(a2 + 56);
      a1[6] = v15;
      a1[7] = v17;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
    goto LABEL_15;
  }
  if (!v15)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)(a2 + 56);
  a1[6] = v15;
  a1[7] = v16;
  swift_retain();
  swift_release();
LABEL_15:
  *((unsigned char *)a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t *assignWithTake for BorderedButtonMenuStyleBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  uint64_t v11 = a2[4];
  if (a1[4])
  {
    if (v11)
    {
      uint64_t v12 = a2[5];
      a1[4] = v11;
      a1[5] = v12;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = a2[5];
    a1[4] = v11;
    a1[5] = v13;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_8:
  uint64_t v14 = a2[6];
  if (!a1[6])
  {
    if (v14)
    {
      uint64_t v16 = a2[7];
      a1[6] = v14;
      a1[7] = v16;
      goto LABEL_15;
    }
LABEL_14:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_15;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v15 = a2[7];
  a1[6] = v14;
  a1[7] = v15;
  swift_release();
LABEL_15:
  *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButtonMenuStyleBody(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderedButtonMenuStyleBody(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

void *type metadata accessor for BorderedButtonMenuStyleBody()
{
  return &unk_1ED44E628;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in _BorderedButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in BorderedButtonMenuStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>()
{
  if (!lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>)
  {
    lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone();
    unint64_t v0 = type metadata accessor for UIKitButtonStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>)
  {
    type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>);
    }
  }
}

uint64_t UIKitEventBindingBridge.__allocating_init(eventBindingManager:)()
{
  return UIKitEventBindingBridge.init(eventBindingManager:)();
}

uint64_t UIKitEventBindingBridge.eventSources.getter()
{
  if (MEMORY[0x18C111F70]())
  {
    uint64_t v1 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<EventBindingSource>();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_18834BB80;
    unint64_t v3 = *(void **)(v0 + 48);
    if (!v3)
    {
      __break(1u);
      return result;
    }
    uint64_t v1 = (void *)result;
    uint64_t v4 = lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer((unint64_t *)&lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer, (void (*)(uint64_t))type metadata accessor for UIKitGestureRecognizer);
    v1[4] = v3;
    v1[5] = v4;
    id v5 = v3;
  }
  id v6 = *(id *)(v0 + 56);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  }
  unint64_t v8 = v1[2];
  unint64_t v7 = v1[3];
  if (v8 >= v7 >> 1) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v1);
  }
  uint64_t v9 = lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer((unint64_t *)&lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer, (void (*)(uint64_t))type metadata accessor for UIKitHoverGestureRecognizer);
  v1[2] = v8 + 1;
  uint64_t v10 = &v1[2 * v8];
  v10[4] = v6;
  v10[5] = v9;
  return (uint64_t)v1;
}

uint64_t UIKitEventBindingBridge.source(for:)(unsigned char *a1)
{
  if (*a1 == 2)
  {
    unint64_t v2 = *(void **)(v1 + 56);
    unint64_t v3 = &lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer;
    uint64_t v4 = type metadata accessor for UIKitHoverGestureRecognizer;
    goto LABEL_6;
  }
  if (!*a1)
  {
    unint64_t v2 = *(void **)(v1 + 48);
    if (!v2) {
      return (uint64_t)v2;
    }
    unint64_t v3 = &lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer;
    uint64_t v4 = type metadata accessor for UIKitGestureRecognizer;
LABEL_6:
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer((unint64_t *)v3, (void (*)(uint64_t))v4);
    id v5 = v2;
    return (uint64_t)v2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void UIKitEventBindingBridge.__allocating_init()()
{
}

void UIKitEventBindingBridge.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + 64);
}

uint64_t ObjC metadata update function for UIKitEventBindingBridge()
{
  return type metadata accessor for UIKitEventBindingBridge();
}

uint64_t lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t FetchController.refreshResults()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *(void *)v0;
  uint64_t v3 = *(void *)(v2 + 0x60);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - v11;
  (*(void (**)(char *, char *, double))(v13 + 16))((char *)&v16 - v11, &v0[*(void *)(v2 + 136)], v10);
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v8);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *))&v0[*(void *)((*v1 & *(void *)v0) + 0x68)])(v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 0, 1, v3);
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v12, v8);
  }
  return result;
}

void FetchController.controllerDidChangeContent(_:)(void *a1)
{
  uint64_t v2 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80));
  if (v2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v4 = v2;
    id v5 = a1;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if (a1)
    {
      FetchController.refreshResults()();
    }
  }
}

void @objc FetchController.controllerDidChangeContent(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  FetchController.controllerDidChangeContent(_:)(v4);
}

void @objc FetchController.init()()
{
}

uint64_t @objc FetchController.__ivar_destroyer(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  swift_release();
  swift_release();
  swift_release();

  uint64_t v3 = (char *)a1 + *(void *)((*v2 & *a1) + 0x88);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v4 = type metadata accessor for Optional();
  id v5 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

void specialized FetchController.init()()
{
}

uint64_t sub_1878BD208()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FetchController.update(in:)()
{
  uint64_t result = (uint64_t)FetchController.fetchIfNeeded()();
  if (result) {
    return FetchController.refreshResults()();
  }
  return result;
}

void Scene.windowShouldClose(_:)()
{
}

uint64_t AnyWindowToolbarStyle.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v5);
  if (swift_dynamicCast())
  {
    uint64_t v7 = v9[1];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for AnyWindowToolbarStyleStorage();
    return LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(a1);
  }
  return v7;
}

uint64_t protocol witness for WindowToolbarStyle.configureWindowToolbar(_:) in conformance AnyWindowToolbarStyle()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

void AnyWindowToolbarStyleStorageBase.configureWindowToolbar(_:)()
{
}

uint64_t type metadata accessor for AnyWindowToolbarStyleStorageBase()
{
  return self;
}

uint64_t AnyWindowToolbarStyleStorage.configureWindowToolbar(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 104) + 32))(a1, *(void *)(*(void *)v1 + 96));
}

uint64_t type metadata accessor for AnyWindowToolbarStyleStorage()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AnyWindowToolbarStyle()
{
  return &type metadata for AnyWindowToolbarStyle;
}

uint64_t assignWithTake for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 96);
  uint64_t v8 = *(void **)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  uint64_t v10 = *(void *)(a2 + 152);
  uint64_t v11 = *(void **)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;

  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  swift_weakTakeAssign();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  if (*(void *)(a1 + 288)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  }
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  long long v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitCore(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 304)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitCore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 304) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 304) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitCore()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t sub_1878BD7F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isNavigationSplitViewTransparent.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1878BD834(unsigned __int8 *a1)
{
  return EnvironmentValues.isNavigationSplitViewTransparent.setter(*a1);
}

uint64_t OutlineGroup.$expandedElements.getter()
{
  type metadata accessor for Set();
  type metadata accessor for StateOrBinding();
  StateOrBinding.projectedValue.getter();
  return v1;
}

uint64_t OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  uint64_t v19 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18C115CC0](v19, v18)) {
    specialized Set.init(_nonEmptyArrayLiteral:)(v19, v18, a17);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Set();
  StateOrBinding.init(wrappedValue:)();
  *(_OWORD *)a9 = v36;
  *(void *)(a9 + 16) = v37;
  *(unsigned char *)(a9 + 24) = v38;
  double v20 = (int *)type metadata accessor for OutlineGroup();
  uint64_t v21 = a9 + v20[19];
  uint64_t v22 = type metadata accessor for OutlinePrimitive.Base();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a1, v22);
  *(void *)(a9 + v20[20]) = a2;
  double v24 = (void *)(a9 + v20[21]);
  *double v24 = a3;
  v24[1] = a4;
  uint64_t v25 = (void *)(a9 + v20[22]);
  *uint64_t v25 = a5;
  v25[1] = a6;
  double v26 = (void *)(a9 + v20[23]);
  *double v26 = a7;
  v26[1] = a8;
  uint64_t v27 = (void *)(a9 + v20[24]);
  *uint64_t v27 = a10;
  v27[1] = a11;
  return result;
}

uint64_t OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  uint64_t v22 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18C115CC0](v22, v21)) {
    specialized Set.init(_nonEmptyArrayLiteral:)(v22, v21, a20);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Set();
  StateOrBinding.init(wrappedValue:)();
  double v23 = (int *)type metadata accessor for OutlineGroup();
  uint64_t v24 = a9 + v23[19];
  uint64_t v25 = type metadata accessor for OutlinePrimitive.Base();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a1, v25);
  uint64_t result = outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(v39, v40, v41, v42);
  *(void *)(a9 + v23[20]) = a2;
  uint64_t v27 = (void *)(a9 + v23[21]);
  *uint64_t v27 = a3;
  v27[1] = a4;
  uint64_t v28 = (void *)(a9 + v23[22]);
  *uint64_t v28 = a5;
  v28[1] = a6;
  uint64_t v29 = (void *)(a9 + v23[23]);
  *uint64_t v29 = a7;
  v29[1] = a8;
  char v30 = (void *)(a9 + v23[24]);
  *char v30 = a10;
  v30[1] = a11;
  *(void *)a9 = a12;
  *(void *)(a9 + 8) = a13;
  *(void *)(a9 + 16) = a14;
  *(unsigned char *)(a9 + 24) = 1;
  return result;
}

uint64_t (*static OutlineGroup.ChildPath.state(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a2;
  v14[3] = a3;
  _OWORD v14[4] = a4;
  void v14[5] = a5;
  v14[6] = a6;
  v14[7] = a7;
  v14[8] = a1;
  swift_retain();
  return partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter;
}

uint64_t (*static OutlineGroup.ChildPath.binding<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a7;
  v16[8] = a8;
  v16[9] = a1;
  type metadata accessor for Binding();
  swift_getWitnessTable();
  swift_retain();
  return partial apply for closure #1 in static OutlineGroup.ChildPath.binding<A>(_:);
}

uint64_t closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v60 = a6;
  uint64_t v61 = a8;
  uint64_t v54 = a7;
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v57 = a3;
  uint64_t v62 = a9;
  long long v12 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBBC10]);
  uint64_t v13 = *v12;
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v53 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v53 + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v52 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v55 = (char *)v49 - v17;
  uint64_t v18 = v12[1];
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v49 - v21;
  uint64_t v23 = *(void *)(v13 - 8);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)v49 - v26;
  uint64_t v56 = a1;
  MEMORY[0x18C113DA0](v25);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v13);
  uint64_t v28 = *(void *)(v18 + 16);
  LODWORD(v27) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v22, 1, v28);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if (v27 == 1)
  {
    uint64_t v29 = type metadata accessor for Binding();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v62, 1, 1, v29);
  }
  else
  {
    uint64_t v31 = v53;
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
    uint64_t v51 = a10;
    v50(v55, v56, v14);
    uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
    uint64_t v33 = (v32 + 96) & ~v32;
    unint64_t v34 = (v15 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49[1] = v34 + 8;
    v49[2] = v32 | 7;
    v49[0] = v34;
    char v35 = (char *)swift_allocObject();
    *((void *)v35 + 2) = 0;
    *((void *)v35 + 3) = 0;
    uint64_t v36 = v58;
    *((void *)v35 + 4) = v57;
    *((void *)v35 + 5) = v36;
    uint64_t v37 = v60;
    *((void *)v35 + 6) = v59;
    *((void *)v35 + 7) = v37;
    uint64_t v39 = v54;
    char v38 = v55;
    *((void *)v35 + 8) = v28;
    *((void *)v35 + 9) = v39;
    uint64_t v40 = v51;
    *((void *)v35 + 10) = v61;
    *((void *)v35 + 11) = v40;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v41(&v35[v33], v38, v14);
    *(void *)&v35[v34] = a2;
    char v42 = v52;
    v50(v52, v56, v14);
    uint64_t v43 = (char *)swift_allocObject();
    *((void *)v43 + 2) = 0;
    *((void *)v43 + 3) = 0;
    uint64_t v44 = v58;
    *((void *)v43 + 4) = v57;
    *((void *)v43 + 5) = v44;
    uint64_t v45 = v60;
    *((void *)v43 + 6) = v59;
    *((void *)v43 + 7) = v45;
    *((void *)v43 + 8) = v28;
    *((void *)v43 + 9) = v39;
    uint64_t v46 = v51;
    *((void *)v43 + 10) = v61;
    *((void *)v43 + 11) = v46;
    v41(&v43[v33], v42, v14);
    *(void *)&v43[v49[0]] = a2;
    swift_retain_n();
    uint64_t v47 = v62;
    Binding.init(get:set:)();
    uint64_t v48 = type metadata accessor for Binding();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 0, 1, v48);
  }
}

uint64_t closure #1 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*a2 + *MEMORY[0x1E4FBBC10] + 8) - 8;
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(*v7 - 8);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v17 - v11;
  uint64_t v13 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v13);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v14 = *(void *)(v4 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v6, v14);
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = (uint64_t *)(*a5 + *MEMORY[0x1E4FBBC10]);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - v8;
  v11.n128_f64[0] = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, __n128))(v16 + 16))((char *)&v18 - v12, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  swift_setAtWritableKeyPath();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static OutlineGroup.ChildPath.closure(_:)(uint64_t a1)
{
  return a1;
}

uint64_t OutlineGroup<>.init<A>(_:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void *a10)
{
  uint64_t v33 = a8;
  uint64_t v39 = a4;
  uint64_t v40 = a9;
  uint64_t v41 = a3;
  uint64_t v36 = a1;
  uint64_t KeyPath = a10;
  char v38 = a2;
  uint64_t v14 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v15 = *(void *)(v14[1] + 16);
  uint64_t v49 = a6;
  uint64_t v50 = &type metadata for OutlineSubgroupChildren;
  uint64_t v51 = a8;
  uint64_t v52 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v16 = type metadata accessor for DisclosureGroup();
  uint64_t v17 = *v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v49 = v15;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v52 = (_UNKNOWN **)a6;
  uint64_t v53 = v16;
  uint64_t v54 = a7;
  uint64_t v55 = AssociatedConformanceWitness;
  uint64_t v18 = type metadata accessor for OutlinePrimitive.Base();
  v19.n128_f64[0] = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&KeyPath - v20;
  uint64_t v37 = *(void *)(v17 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v37 + 16);
  uint64_t v35 = v17;
  v22((char *)&KeyPath - v20, a1, v17, v19);
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = v15;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = v17;
  uint64_t v23 = a7;
  uint64_t v24 = v33;
  uint64_t v46 = a7;
  uint64_t v47 = v33;
  uint64_t v48 = KeyPath;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v25 = swift_checkMetadataState();
  uint64_t v26 = (void *)swift_allocObject();
  void v26[2] = a5;
  void v26[3] = a6;
  v26[4] = a6;
  v26[5] = v25;
  v26[6] = a7;
  uint64_t v27 = AssociatedConformanceWitness;
  uint64_t v28 = v38;
  v26[7] = AssociatedConformanceWitness;
  v26[8] = v28;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = a6;
  *(void *)(v29 + 24) = v24;
  uint64_t v30 = v39;
  swift_retain();
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v21, KeyPath, (uint64_t)partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter, (uint64_t)v26, v41, v30, v41, v30, v40, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v29, v15, a6, a6, v25, v23, v27);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v35);
}

{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *KeyPath;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ValueMetadata *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  ValueMetadata *v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v40 = a4;
  uint64_t v41 = a9;
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t KeyPath = a10;
  uint64_t v39 = a2;
  uint64_t v13 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v14 = *(void *)(v13[1] + 16);
  uint64_t v51 = a6;
  uint64_t v52 = &type metadata for OutlineSubgroupChildren;
  uint64_t v53 = a8;
  uint64_t v54 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v35 = a8;
  uint64_t v16 = type metadata accessor for DisclosureGroup();
  uint64_t v17 = *v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v14;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = (_UNKNOWN **)a6;
  uint64_t v55 = v16;
  uint64_t v56 = a7;
  uint64_t v57 = AssociatedConformanceWitness;
  uint64_t v18 = type metadata accessor for OutlinePrimitive.Base();
  v19.n128_f64[0] = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = *(void *)(v14 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  uint64_t v37 = v14;
  v23((char *)&v34 - v20, v43, v14, v19);
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = v14;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v47 = v17;
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v50 = KeyPath;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = a5;
  v25[3] = a6;
  v25[4] = a6;
  v25[5] = v24;
  uint64_t v26 = a7;
  uint64_t v27 = AssociatedConformanceWitness;
  v25[6] = a7;
  v25[7] = v27;
  v25[8] = v39;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v35;
  *(void *)(v28 + 16) = a6;
  *(void *)(v28 + 24) = v29;
  uint64_t v30 = v40;
  swift_retain();
  swift_retain();
  uint64_t v33 = v27;
  uint64_t v31 = v37;
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v21, KeyPath, (uint64_t)partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter, (uint64_t)v25, v42, v30, v42, v30, v41, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v28, v37, a6, a6, v24, v26, v33);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v43, v31);
}

uint64_t sub_1878BEA6C()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_1878BEAA0()
{
  return 56;
}

__n128 sub_1878BEAAC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t defaultGrouping<A>(isExpanded:parent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v22 = a3;
  uint64_t v23 = a7;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v15 = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  uint64_t v24 = a5;
  uint64_t v25 = &type metadata for OutlineSubgroupChildren;
  uint64_t v26 = a6;
  unint64_t v27 = v15;
  uint64_t v16 = type metadata accessor for DisclosureGroupConfiguration();
  double v17 = MEMORY[0x1F4188790](v16 - 8);
  __n128 v19 = &v21[-v18];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a4, a5, v17);
  swift_retain();
  swift_retain();
  DisclosureGroupConfiguration.init(isExpanded:label:)(a1, a2, v22, (uint64_t)v14, a5, (uint64_t)&type metadata for OutlineSubgroupChildren, v15, (uint64_t)v19);
  return DisclosureGroup<>.init(configuration:)((uint64_t)v19, a5, (uint64_t)&type metadata for OutlineSubgroupChildren, a6, v15, v23);
}

uint64_t sub_1878BEC60()
{
  return swift_deallocObject();
}

uint64_t partial apply for defaultGrouping<A>(isExpanded:parent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return defaultGrouping<A>(isExpanded:parent:)(a1, a2, a3, a4, *(void *)(v5 + 16), *(void *)(v5 + 24), a5);
}

uint64_t sub_1878BEF74()
{
  return swift_deallocObject();
}

uint64_t OutlineGroup<>.init<A>(_:children:expandedElements:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *a2;
  uint64_t v15 = static Array._allocateUninitialized(_:)();
  uint64_t v16 = MEMORY[0x18C115CC0](v15, a8);
  double v17 = (void *)MEMORY[0x1E4FBC5F0];
  if (v16)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    specialized Set.init(_nonEmptyArrayLiteral:)(v15, a8, AssociatedConformanceWitness);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(*(void *)(v14 + *v17 + 8) + 16);
  *(void *)&long long v42 = a10;
  *((void *)&v42 + 1) = &type metadata for OutlineSubgroupChildren;
  uint64_t v20 = type metadata accessor for DisclosureGroup();
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  StateOrBinding.init(wrappedValue:)();
  *(_OWORD *)a9 = v42;
  *(void *)(a9 + 16) = a12;
  *(unsigned char *)(a9 + 24) = &protocol witness table for OutlineSubgroupChildren;
  int v22 = (int *)type metadata accessor for OutlineGroup();
  uint64_t v23 = *(void *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(a9 + v22[19], a1, v19);
  type metadata accessor for OutlinePrimitive.Base();
  uint64_t v24 = swift_storeEnumTagMultiPayload();
  MEMORY[0x1F4188790](v24);
  *(void *)(a9 + v22[20]) = swift_getKeyPath();
  uint64_t v25 = (uint64_t (*)())swift_allocObject();
  *((void *)v25 + 2) = a8;
  *((void *)v25 + 3) = a10;
  *((void *)v25 + 4) = a10;
  *((void *)v25 + 5) = v20;
  *((void *)v25 + 6) = a11;
  *((void *)v25 + 7) = v21;
  *((void *)v25 + 8) = a2;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, v19);
  uint64_t v26 = (uint64_t (**)())(a9 + v22[21]);
  *uint64_t v26 = partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter;
  v26[1] = v25;
  unint64_t v27 = (void *)(a9 + v22[22]);
  *unint64_t v27 = a6;
  v27[1] = a7;
  uint64_t v28 = (void *)(a9 + v22[23]);
  *uint64_t v28 = a6;
  v28[1] = a7;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = a10;
  *(void *)(v29 + 24) = a12;
  uint64_t v30 = (void *)(a9 + v22[24]);
  *uint64_t v30 = defaultGrouping<A>(isExpanded:parent:)partial apply;
  v30[1] = v29;
  uint64_t v31 = *(void *)a9;
  uint64_t v32 = *(void *)(a9 + 8);
  uint64_t v33 = *(void *)(a9 + 16);
  LOBYTE(v25) = *(unsigned char *)(a9 + 24);
  swift_retain();
  uint64_t result = outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(v31, v32, v33, (char)v25);
  *(void *)a9 = a3;
  *(void *)(a9 + 8) = a4;
  *(void *)(a9 + 16) = a5;
  *(unsigned char *)(a9 + 24) = 1;
  return result;
}

uint64_t OutlineGroup<>.init<A>(_:id:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v33 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a9;
  uint64_t v41 = a4;
  uint64_t v35 = a1;
  uint64_t v15 = *a2;
  uint64_t v16 = *MEMORY[0x1E4FBC5F0];
  uint64_t v17 = *MEMORY[0x1E4FBC5F0] + 8;
  uint64_t v18 = *(void *)(*(void *)(*a3 + v17) + 16);
  uint64_t v36 = a10;
  uint64_t v37 = v18;
  uint64_t v19 = *(void *)(v15 + v17);
  uint64_t v42 = v18;
  uint64_t v43 = v19;
  uint64_t v44 = a6;
  uint64_t v45 = a6;
  uint64_t v46 = type metadata accessor for DisclosureGroup();
  uint64_t v47 = a7;
  uint64_t v20 = a7;
  uint64_t v48 = a8;
  uint64_t v21 = type metadata accessor for OutlinePrimitive.Base();
  v22.n128_f64[0] = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v33 - v23;
  uint64_t v34 = *(void *)(v15 + v16);
  uint64_t v25 = *(void *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v33 - v23, a1, v34, v22);
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = swift_checkMetadataState();
  unint64_t v27 = (void *)swift_allocObject();
  v27[2] = v19;
  void v27[3] = a6;
  v27[4] = a6;
  v27[5] = v26;
  uint64_t v28 = v33;
  v27[6] = v20;
  v27[7] = v28;
  v27[8] = a3;
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v36;
  *(void *)(v29 + 16) = a6;
  *(void *)(v29 + 24) = v30;
  uint64_t v31 = v38;
  swift_retain();
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v24, v39, (uint64_t)partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter, (uint64_t)v27, v41, v31, v41, v31, v40, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v29, v37, a6, a6, v26, v20, v28);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v34);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v35 = a8;
  uint64_t v36 = a1;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a9;
  uint64_t v41 = a4;
  uint64_t v15 = *a2;
  uint64_t v16 = *MEMORY[0x1E4FBC5F0] + 8;
  uint64_t v17 = *(void *)(*a3 + v16);
  uint64_t v37 = a10;
  uint64_t v18 = *(void *)(v15 + v16);
  uint64_t v42 = *(void *)(v17 + 16);
  uint64_t v43 = v18;
  uint64_t v44 = a6;
  uint64_t v45 = a6;
  uint64_t v46 = type metadata accessor for DisclosureGroup();
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v19 = type metadata accessor for OutlinePrimitive.Base();
  v20.n128_f64[0] = MEMORY[0x1F4188790](v19);
  __n128 v22 = (char *)&v33 - v21;
  uint64_t v34 = v42;
  uint64_t v23 = *(void *)(v42 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))((char *)&v33 - v21, a1, v42, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v18;
  v25[3] = a6;
  v25[4] = a6;
  v25[5] = v24;
  uint64_t v26 = v35;
  v25[6] = a7;
  v25[7] = v26;
  v25[8] = a3;
  unint64_t v27 = swift_allocObject();
  uint64_t v28 = v37;
  uint64_t v29 = v38;
  *(void *)(v27 + 16) = a6;
  *(void *)(v27 + 24) = v28;
  swift_retain();
  swift_retain();
  uint64_t v32 = v24;
  uint64_t v30 = v34;
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v22, v39, (uint64_t)partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter, (uint64_t)v25, v41, v29, v41, v29, v40, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v27, v34, a6, a6, v32, a7, v26);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v36, v30);
}

uint64_t OutlineGroup<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v53 = a2;
  uint64_t v56 = a5;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v61 = *(void *)(a1 + 16);
  uint64_t v62 = v7;
  uint64_t v50 = v8;
  uint64_t v51 = v61;
  uint64_t v63 = v8;
  uint64_t v64 = v9;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  uint64_t v48 = v10;
  uint64_t v49 = v9;
  uint64_t v65 = v10;
  uint64_t v66 = v11;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
  uint64_t v47 = v11;
  uint64_t v67 = v12;
  uint64_t v46 = v12;
  uint64_t v45 = type metadata accessor for OutlinePrimitive.Base();
  uint64_t v17 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v57 = (uint64_t)&v41 - v18;
  uint64_t v62 = v7;
  uint64_t v63 = v13;
  uint64_t v64 = v14;
  uint64_t v65 = v15;
  uint64_t v66 = v16;
  uint64_t v67 = v12;
  uint64_t v19 = type metadata accessor for OutlinePrimitive();
  uint64_t v52 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v41 - v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v17 + 16))(v57, v5 + *(int *)(a1 + 76), v45, v23);
  uint64_t v26 = *(void *)(v5 + *(int *)(a1 + 80));
  unint64_t v27 = (uint64_t *)(v5 + *(int *)(a1 + 84));
  uint64_t v28 = v27[1];
  uint64_t v45 = *v27;
  swift_retain();
  swift_retain();
  uint64_t v44 = OutlineGroup.$expandedElements.getter();
  uint64_t v43 = v29;
  uint64_t v42 = v30;
  uint64_t v31 = *(int *)(a1 + 92);
  uint64_t v32 = (uint64_t *)(v5 + *(int *)(a1 + 88));
  uint64_t v33 = v32[1];
  uint64_t v41 = *v32;
  uint64_t v34 = *(void *)(v5 + v31);
  uint64_t v35 = *(void *)(v5 + v31 + 8);
  uint64_t v36 = (uint64_t *)(v5 + *(int *)(a1 + 96));
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  swift_retain();
  swift_retain();
  swift_retain();
  OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)(v57, v26, v45, v28, v44, v43, v42, v41, (uint64_t)v21, v33, v34, v35, v38, v37);
  uint64_t v58 = v53;
  uint64_t v59 = v54;
  uint64_t v60 = v55;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v52 + 8);
  v39(v21, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v39)(v25, v19);
}

uint64_t protocol witness for View.body.getter in conformance <> OutlineGroup<A, B, C, D, E>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OutlineGroup<>.body.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), *(void *)(a2 - 24), a3);
}

uint64_t OutlineGroup<>.init<A, B>(_:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a8;
  uint64_t v34 = a7;
  uint64_t v40 = a4;
  uint64_t v41 = a9;
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v39 = a2;
  uint64_t v15 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBBC10]);
  uint64_t KeyPath = *(void **)(v15[1] + 16);
  uint64_t v37 = type metadata accessor for Binding();
  uint64_t v52 = a6;
  uint64_t v53 = &type metadata for OutlineSubgroupChildren;
  uint64_t v54 = a7;
  uint64_t v55 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v16 = type metadata accessor for DisclosureGroup();
  uint64_t v59 = a8;
  uint64_t v60 = a10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = *v15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v52 = v37;
  uint64_t v53 = (ValueMetadata *)a5;
  uint64_t v54 = a6;
  uint64_t v55 = (_UNKNOWN **)a6;
  uint64_t v56 = v16;
  uint64_t v57 = WitnessTable;
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v18 = type metadata accessor for OutlinePrimitive.Base();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&AssociatedConformanceWitness - v19;
  uint64_t v36 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v36 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v43, v36);
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v46 = KeyPath;
  uint64_t v47 = v17;
  uint64_t v22 = v34;
  double v23 = v33;
  uint64_t v48 = v34;
  uint64_t v49 = v33;
  uint64_t v50 = a10;
  uint64_t v51 = a11;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v25 = AssociatedConformanceWitness;
  uint64_t v33 = static OutlineGroup.ChildPath.binding<A>(_:)((uint64_t)v39, a5, a6, a6, v24, AssociatedConformanceWitness, (uint64_t)v23, a10);
  uint64_t v27 = v26;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a6;
  *(void *)(v28 + 24) = v22;
  uint64_t v29 = v40;
  swift_retain();
  uint64_t v30 = swift_checkMetadataState();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v20, KeyPath, (uint64_t)v33, v27, v42, v29, v42, v29, v41, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v28, v30, a6, a6, v24, WitnessTable, v25);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v43, v36);
}

{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v37)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  void *KeyPath;
  uint64_t WitnessTable;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  _UNKNOWN **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v61;

  uint64_t v37 = a8;
  uint64_t v41 = a4;
  uint64_t v42 = a9;
  uint64_t v43 = a3;
  uint64_t v44 = a1;
  uint64_t v35 = a11;
  uint64_t v40 = a2;
  uint64_t v15 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBBC10]);
  uint64_t KeyPath = *(void **)(v15[1] + 16);
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v53 = a6;
  uint64_t v54 = &type metadata for OutlineSubgroupChildren;
  uint64_t v55 = a7;
  uint64_t v56 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v34 = a7;
  uint64_t v17 = type metadata accessor for DisclosureGroup();
  uint64_t v60 = a8;
  uint64_t v61 = a10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = *v15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v53 = v16;
  uint64_t v54 = (ValueMetadata *)a5;
  uint64_t v55 = a6;
  uint64_t v56 = (_UNKNOWN **)a6;
  uint64_t v57 = v17;
  uint64_t v58 = WitnessTable;
  uint64_t v59 = AssociatedConformanceWitness;
  uint64_t v19 = type metadata accessor for OutlinePrimitive.Base();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v33 - v20;
  uint64_t v22 = swift_checkMetadataState();
  double v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, v44, v22);
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v47 = KeyPath;
  uint64_t v48 = v18;
  uint64_t v24 = v37;
  uint64_t v49 = a7;
  uint64_t v50 = v37;
  uint64_t v51 = a10;
  uint64_t v52 = v35;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v25 = swift_checkMetadataState();
  uint64_t v26 = AssociatedConformanceWitness;
  uint64_t v37 = static OutlineGroup.ChildPath.binding<A>(_:)((uint64_t)v40, a5, a6, a6, v25, AssociatedConformanceWitness, (uint64_t)v24, a10);
  uint64_t v28 = v27;
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v34;
  *(void *)(v29 + 16) = a6;
  *(void *)(v29 + 24) = v30;
  uint64_t v31 = v41;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v21, KeyPath, (uint64_t)v37, v28, v43, v31, v43, v31, v42, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v29, v22, a6, a6, v25, WitnessTable, v26);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v44, v22);
}

uint64_t key path getter for Binding<A>.id : <A, B, C, D, E><A1, B1>Binding<B1>()
{
  return Binding<A>.id.getter();
}

uint64_t OutlineGroup<>.init<A, B>(_:id:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v39 = a7;
  uint64_t v36 = a5;
  uint64_t v38 = a4;
  uint64_t v40 = a1;
  uint64_t v37 = a9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + *a3 + 8) + 16);
  uint64_t v34 = type metadata accessor for Binding();
  uint64_t v15 = (uint64_t *)(v13 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v16 = v15[1];
  uint64_t v32 = type metadata accessor for DisclosureGroup();
  uint64_t v31 = a10;
  uint64_t v58 = a10;
  uint64_t v59 = a11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v51 = v34;
  uint64_t v52 = v16;
  uint64_t v53 = a6;
  uint64_t v54 = a6;
  uint64_t v55 = v32;
  uint64_t v56 = WitnessTable;
  uint64_t v57 = v39;
  uint64_t v17 = type metadata accessor for OutlinePrimitive.Base();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v43 = v16;
  uint64_t v44 = a6;
  uint64_t v45 = v14;
  uint64_t v46 = *v15;
  uint64_t v47 = v39;
  uint64_t v48 = a8;
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  swift_getKeyPath();
  uint64_t v33 = (void *)_AppendKeyPath.appending<A, B, C>(path:)();
  swift_release();
  uint64_t v20 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, v40, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = swift_checkMetadataState();
  uint64_t v23 = v39;
  uint64_t v24 = static OutlineGroup.ChildPath.binding<A>(_:)((uint64_t)v42, v16, a6, a6, v22, v39, v31, a11);
  uint64_t v26 = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a6;
  *(void *)(v27 + 24) = a8;
  uint64_t v28 = v36;
  swift_retain();
  uint64_t v29 = swift_checkMetadataState();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v19, v33, (uint64_t)v24, v26, v38, v28, v38, v28, v37, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v27, v29, a6, a6, v22, WitnessTable, v23);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v40, v20);
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t WitnessTable;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  uint64_t v32 = a7;
  uint64_t v37 = a5;
  uint64_t v39 = a4;
  uint64_t v40 = a1;
  uint64_t v38 = a9;
  uint64_t v31 = a11;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + *a3 + 8) + 16);
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = (uint64_t *)(v13 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v17 = v16[1];
  uint64_t v35 = type metadata accessor for DisclosureGroup();
  uint64_t v58 = a10;
  uint64_t v59 = a11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v51 = v15;
  uint64_t v52 = v17;
  uint64_t v53 = a6;
  uint64_t v54 = a6;
  uint64_t v55 = v35;
  uint64_t v56 = WitnessTable;
  uint64_t v57 = v32;
  uint64_t v33 = type metadata accessor for OutlinePrimitive.Base();
  MEMORY[0x1F4188790](v33);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = v17;
  uint64_t v43 = v17;
  uint64_t v44 = a6;
  uint64_t v45 = v14;
  uint64_t v46 = *v16;
  uint64_t v47 = v32;
  uint64_t v21 = v32;
  uint64_t v48 = a8;
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  swift_getKeyPath();
  uint64_t v34 = (void *)_AppendKeyPath.appending<A, B, C>(path:)();
  swift_release();
  uint64_t v22 = swift_checkMetadataState();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v19, v40, v22);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v25 = static OutlineGroup.ChildPath.binding<A>(_:)((uint64_t)v42, v20, a6, a6, v24, v21, a10, a11);
  uint64_t v27 = v26;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a6;
  *(void *)(v28 + 24) = a8;
  uint64_t v29 = v37;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v19, v34, (uint64_t)v25, v27, v39, v29, v39, v29, v38, (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v28, v22, a6, a6, v24, WitnessTable, v21);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v40, v22);
}

uint64_t key path getter for Binding.wrappedValue : <A, B, C, D, E><A1, B1>Binding<B1>()
{
  uint64_t v0 = type metadata accessor for Binding();
  return MEMORY[0x18C113DA0](v0);
}

uint64_t key path setter for Binding.wrappedValue : <A, B, C, D, E><A1, B1>Binding<B1>()
{
  return specialized Binding.wrappedValue.setter();
}

void protocol witness for View.body.getter in conformance OutlineSubgroupChildren()
{
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v51 = (char *)&v39 - v10;
  uint64_t v40 = v11;
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v39 - v14;
  if (MEMORY[0x18C115C50](v13))
  {
    type metadata accessor for _SetStorage();
    uint64_t v16 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC870];
  }
  uint64_t v44 = MEMORY[0x18C115CC0](v5, a2);
  if (!v44) {
    return v16;
  }
  uint64_t v17 = 0;
  uint64_t v49 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v50 = v16 + 56;
  uint64_t v46 = v6 + 32;
  uint64_t v48 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v41 = v6;
  uint64_t v42 = v5;
  uint64_t v43 = v15;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      uint64_t v19 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v19(v15, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v17), a2);
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v40 != 8) {
        goto LABEL_23;
      }
      uint64_t v52 = result;
      uint64_t v19 = *v49;
      (*v49)(v15, &v52, a2);
      swift_unknownObjectRelease();
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20)
      {
LABEL_20:
        __break(1u);
        return v16;
      }
    }
    uint64_t v47 = v21;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v45(v51, v15, a2);
    uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = v16;
    uint64_t v24 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v25 = v22 & ~v24;
    unint64_t v26 = v25 >> 6;
    uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
    uint64_t v28 = 1 << v25;
    uint64_t v29 = *(void *)(v6 + 72);
    if (((1 << v25) & v27) != 0)
    {
      uint64_t v30 = ~v24;
      do
      {
        v19(v8, (uint64_t *)(*(void *)(v23 + 48) + v29 * v25), a2);
        uint64_t v31 = a3;
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *v48;
        (*v48)(v8, a2);
        if (v32)
        {
          v33(v51, a2);
          a3 = v31;
          uint64_t v6 = v41;
          uint64_t v5 = v42;
          uint64_t v16 = v23;
          goto LABEL_7;
        }
        unint64_t v25 = (v25 + 1) & v30;
        unint64_t v26 = v25 >> 6;
        uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
        uint64_t v28 = 1 << v25;
        a3 = v31;
      }
      while ((v27 & (1 << v25)) != 0);
      uint64_t v6 = v41;
      uint64_t v5 = v42;
    }
    uint64_t v34 = v51;
    *(void *)(v50 + 8 * v26) = v28 | v27;
    unint64_t v35 = *(void *)(v23 + 48) + v29 * v25;
    uint64_t v16 = v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v35, v34, a2);
    uint64_t v37 = *(void *)(v23 + 16);
    BOOL v20 = __OFADD__(v37, 1);
    uint64_t v38 = v37 + 1;
    if (v20) {
      break;
    }
    *(void *)(v23 + 16) = v38;
LABEL_7:
    uint64_t v15 = v43;
    uint64_t v17 = v47;
    if (v47 == v44) {
      return v16;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OutlineGroup()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1878C0F60()
{
  return swift_deallocObject();
}

uint64_t sub_1878C0F70()
{
  return swift_deallocObject();
}

uint64_t sub_1878C0F80()
{
  return swift_deallocObject();
}

uint64_t sub_1878C0F90(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1878C0F98()
{
  return Binding<A>.id.getter();
}

uint64_t sub_1878C0FE4()
{
  return 64;
}

__n128 sub_1878C0FF0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1878C1004()
{
  return swift_deallocObject();
}

uint64_t sub_1878C1014()
{
  return 64;
}

__n128 sub_1878C1020(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1878C1034()
{
  return swift_deallocObject();
}

uint64_t sub_1878C1044()
{
  uint64_t v0 = type metadata accessor for Binding();
  return MEMORY[0x18C113DA0](v0);
}

uint64_t sub_1878C1080()
{
  return specialized Binding.wrappedValue.setter();
}

uint64_t sub_1878C10C0()
{
  return 64;
}

__n128 sub_1878C10CC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1878C10E0()
{
  return swift_deallocObject();
}

uint64_t sub_1878C10F0()
{
  return 64;
}

__n128 sub_1878C10FC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1878C1110()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in <> OutlineGroup<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for OutlineSubgroupChildren(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren()
{
  unint64_t result = lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren;
  if (!lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren;
  if (!lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in OutlineSubgroupChildren()
{
  return &protocol witness table for OutlineSubgroupChildren;
}

uint64_t type metadata completion function for OutlineGroup()
{
  uint64_t result = type metadata accessor for OutlinePrimitive.Base();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for OutlineGroup(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80);
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v7 + 80));
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  BOOL v12 = v10 <= 7 && (v9 & 0x100000) == 0;
  if (v12
    && ((((((((((v11 + 8 + ((v10 + 25) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    uint64_t v13 = AssociatedTypeWitness;
    unsigned int v14 = *((unsigned __int8 *)a2 + 24);
    if (v14 >= 2) {
      unsigned int v14 = *(_DWORD *)a2 + 2;
    }
    uint64_t v46 = v11 + 8;
    uint64_t v15 = ~v10;
    *(void *)a1 = *a2;
    if (v14 == 1)
    {
      uint64_t v45 = AssociatedTypeWitness;
      uint64_t v16 = a2[2];
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = v16;
      swift_retain();
      swift_retain();
      uint64_t v13 = v45;
      swift_bridgeObjectRetain();
      char v17 = 1;
    }
    else
    {
      *(void *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_retain();
      char v17 = 0;
    }
    *(unsigned char *)(a1 + 24) = v17;
    uint64_t v19 = (uint64_t)a2 + v10;
    uint64_t v20 = (a1 + v10 + 25) & v15;
    uint64_t v21 = (unsigned __int8 *)((v19 + 25) & v15);
    unsigned int v22 = v21[v11];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v24 = v11;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v21;
          goto LABEL_25;
        case 2:
          int v25 = *(unsigned __int16 *)v21;
          goto LABEL_25;
        case 3:
          int v25 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          goto LABEL_25;
        case 4:
          int v25 = *(_DWORD *)v21;
LABEL_25:
          int v26 = (v25 | (v23 << (8 * v11))) + 2;
          unsigned int v22 = v25 + 2;
          if (v11 < 4) {
            unsigned int v22 = v26;
          }
          break;
        default:
          break;
      }
    }
    BOOL v27 = v22 == 1;
    if (v22 == 1) {
      uint64_t v28 = v8;
    }
    else {
      uint64_t v28 = v7;
    }
    if (v22 == 1) {
      uint64_t v29 = v5;
    }
    else {
      uint64_t v29 = v13;
    }
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v28 + 16))(v20, v21, v29);
    *(unsigned char *)(v20 + v11) = v27;
    uint64_t v30 = (void *)((v46 + v20) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)((unint64_t)&v21[v46] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    char v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = v33[1];
    *char v32 = *v33;
    v32[1] = v34;
    unint64_t v35 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = v36[1];
    *unint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v39 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v42 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = v18 + ((v9 & 0xF8 ^ 0x1F8u) & (unint64_t)(v10 + 16));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for OutlineGroup(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80) | *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = a1 + v8 + 25;
  uint64_t v10 = (unsigned __int8 *)(v9 & ~v8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v7 + 64)) {
    uint64_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v12 = v10[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v10;
        goto LABEL_18;
      case 2:
        int v15 = *(unsigned __int16 *)v10;
        goto LABEL_18;
      case 3:
        int v15 = *(unsigned __int16 *)v10 | (*(unsigned __int8 *)((v9 & ~v8) + 2) << 16);
        goto LABEL_18;
      case 4:
        int v15 = *(_DWORD *)v10;
LABEL_18:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v17 = v5;
  }
  else
  {
    uint64_t v17 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 & ~v8, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 24);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  *(void *)a1 = *(void *)a2;
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v7;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    char v8 = 1;
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 24) = v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80) | *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v12 + 25;
  uint64_t v14 = ~v12;
  int v15 = (unsigned __int8 *)((v12 + 25 + a2) & ~v12);
  if (*(void *)(*(void *)(v9 - 8) + 64) <= *(void *)(v11 + 64)) {
    uint64_t v16 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unsigned int v17 = v15[v16];
  unsigned int v18 = v17 - 2;
  if (v17 >= 2)
  {
    if (v16 <= 3) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *v15;
        goto LABEL_18;
      case 2:
        int v20 = *(unsigned __int16 *)v15;
        goto LABEL_18;
      case 3:
        int v20 = *(unsigned __int16 *)v15 | (v15[2] << 16);
        goto LABEL_18;
      case 4:
        int v20 = *(_DWORD *)v15;
LABEL_18:
        int v21 = (v20 | (v18 << (8 * v16))) + 2;
        unsigned int v17 = v20 + 2;
        if (v16 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v22 = (v13 + a1) & v14;
  BOOL v23 = v17 == 1;
  if (v17 == 1)
  {
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v24 = v9;
  }
  else
  {
    uint64_t v24 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v11 + 16))((v13 + a1) & v14, v15, v24);
  *(unsigned char *)(v22 + v16) = v23;
  int v25 = (void *)((v16 + 8 + v22) & 0xFFFFFFFFFFFFFFF8);
  int v26 = (void *)((unint64_t)&v15[v16 + 8] & 0xFFFFFFFFFFFFFFF8);
  *int v25 = *v26;
  BOOL v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v28[1];
  *BOOL v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 24);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 24);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    if (v7 == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = 1;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(unsigned char *)(a1 + 24) = 0;
      swift_bridgeObjectRetain();
      swift_retain();
    }
  }
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80) | *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v12 + 25 + a1;
  uint64_t v14 = (unsigned __int8 *)(v13 & ~v12);
  int v15 = (unsigned __int8 *)((v12 + 25 + a2) & ~v12);
  if (*(void *)(v11 + 64) <= *(void *)(v10 + 64)) {
    uint64_t v16 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  if (v14 != v15)
  {
    uint64_t v17 = AssociatedTypeWitness;
    unsigned int v18 = v14[v16];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *v14;
          goto LABEL_25;
        case 2:
          int v21 = *(unsigned __int16 *)v14;
          goto LABEL_25;
        case 3:
          int v21 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)((v13 & ~v12) + 2) << 16);
          goto LABEL_25;
        case 4:
          int v21 = *(_DWORD *)v14;
LABEL_25:
          int v22 = (v21 | (v19 << (8 * v16))) + 2;
          unsigned int v18 = v21 + 2;
          if (v16 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 1) {
      uint64_t v23 = *(void *)(v8 - 8);
    }
    else {
      uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
    }
    if (v18 == 1) {
      uint64_t v24 = v8;
    }
    else {
      uint64_t v24 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v13 & ~v12, v24);
    unsigned int v25 = v15[v16];
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v27 = v16;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v15;
          goto LABEL_42;
        case 2:
          int v28 = *(unsigned __int16 *)v15;
          goto LABEL_42;
        case 3:
          int v28 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_42;
        case 4:
          int v28 = *(_DWORD *)v15;
LABEL_42:
          int v29 = (v28 | (v26 << (8 * v16))) + 2;
          unsigned int v25 = v28 + 2;
          if (v16 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    BOOL v30 = v25 == 1;
    if (v25 == 1) {
      uint64_t v31 = v11;
    }
    else {
      uint64_t v31 = v10;
    }
    if (v25 == 1) {
      uint64_t v32 = v8;
    }
    else {
      uint64_t v32 = v17;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(v14, v15, v32);
    v14[v16] = v30;
  }
  uint64_t v33 = (uint64_t)&v14[v16 + 8];
  uint64_t v34 = (uint64_t)&v15[v16 + 8];
  unint64_t v35 = (v34 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v34 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v36 &= 0xFFFFFFFFFFFFFFF8;
  v35 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = *(void *)(v35 + 8);
  *(void *)unint64_t v36 = *(void *)v35;
  *(void *)(v36 + 8) = v37;
  swift_retain();
  swift_release();
  uint64_t v38 = (void *)((v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)((v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v40;
  swift_retain();
  swift_release();
  uint64_t v41 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  swift_retain();
  swift_release();
  uint64_t v44 = (void *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = (void *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v46 = v45[1];
  *uint64_t v44 = *v45;
  v44[1] = v46;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)a2 + 2;
  }
  if (v5 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80) | *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v10 + 25;
  uint64_t v12 = ~v10;
  uint64_t v13 = (unsigned __int8 *)((v10 + 25 + a2) & ~v10);
  if (*(void *)(*(void *)(v7 - 8) + 64) <= *(void *)(v9 + 64)) {
    uint64_t v14 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v15 = v13[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v13;
        goto LABEL_18;
      case 2:
        int v18 = *(unsigned __int16 *)v13;
        goto LABEL_18;
      case 3:
        int v18 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_18;
      case 4:
        int v18 = *(_DWORD *)v13;
LABEL_18:
        int v19 = (v18 | (v16 << (8 * v14))) + 2;
        unsigned int v15 = v18 + 2;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v20 = (v11 + a1) & v12;
  BOOL v21 = v15 == 1;
  if (v15 == 1)
  {
    uint64_t v9 = *(void *)(v7 - 8);
    uint64_t v22 = v7;
  }
  else
  {
    uint64_t v22 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32))((v11 + a1) & v12, v13, v22);
  *(unsigned char *)(v20 + v14) = v21;
  uint64_t v23 = (void *)((v14 + 8 + v20) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((unint64_t)&v13[v14 + 8] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  unsigned int v25 = (_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v26 = (_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v25 = *v26;
  uint64_t v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  int v29 = (_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  BOOL v30 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v29 = *v30;
  *(_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 24);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 24);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 24) = v8;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80) | *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v13 + 25 + a1;
  unsigned int v15 = (unsigned __int8 *)(v14 & ~v13);
  unsigned int v16 = (unsigned __int8 *)((v13 + 25 + a2) & ~v13);
  if (*(void *)(v12 + 64) <= *(void *)(v11 + 64)) {
    uint64_t v17 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v17 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  if (v15 != v16)
  {
    uint64_t v18 = AssociatedTypeWitness;
    unsigned int v19 = v15[v17];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *v15;
          goto LABEL_26;
        case 2:
          int v22 = *(unsigned __int16 *)v15;
          goto LABEL_26;
        case 3:
          int v22 = *(unsigned __int16 *)v15 | (*(unsigned __int8 *)((v14 & ~v13) + 2) << 16);
          goto LABEL_26;
        case 4:
          int v22 = *(_DWORD *)v15;
LABEL_26:
          int v23 = (v22 | (v20 << (8 * v17))) + 2;
          unsigned int v19 = v22 + 2;
          if (v17 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    if (v19 == 1) {
      uint64_t v24 = *(void *)(v9 - 8);
    }
    else {
      uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
    }
    if (v19 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v14 & ~v13, v25);
    unsigned int v26 = v16[v17];
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v28 = v17;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *v16;
          goto LABEL_43;
        case 2:
          int v29 = *(unsigned __int16 *)v16;
          goto LABEL_43;
        case 3:
          int v29 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_43;
        case 4:
          int v29 = *(_DWORD *)v16;
LABEL_43:
          int v30 = (v29 | (v27 << (8 * v17))) + 2;
          unsigned int v26 = v29 + 2;
          if (v17 < 4) {
            unsigned int v26 = v30;
          }
          break;
        default:
          break;
      }
    }
    BOOL v31 = v26 == 1;
    if (v26 == 1) {
      uint64_t v32 = v12;
    }
    else {
      uint64_t v32 = v11;
    }
    if (v26 == 1) {
      uint64_t v33 = v9;
    }
    else {
      uint64_t v33 = v18;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(v15, v16, v33);
    v15[v17] = v31;
  }
  uint64_t v34 = (uint64_t)&v15[v17 + 8];
  unint64_t v35 = (void *)((unint64_t)&v16[v17 + 8] & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v34 & 0xFFFFFFFFFFFFFFF8) = *v35;
  unint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v36 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = (_OWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(_OWORD *)unint64_t v36 = *v37;
  swift_release();
  uint64_t v38 = (_OWORD *)((v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (_OWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  swift_release();
  uint64_t v40 = (_OWORD *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = (_OWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v40 = *v41;
  swift_release();
  *(_OWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlineGroup(int *a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  if (v8 <= *(void *)(v6 + 64)) {
    unint64_t v8 = *(void *)(v6 + 64);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  unint64_t v10 = v8 + 8;
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v13 = ((((((((((v10 + ((v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v14 = v13 & 0xFFFFFFF8;
  unsigned int v15 = a2 - 2147483646;
  if ((v13 & 0xFFFFFFF8) != 0) {
    unsigned int v15 = 2;
  }
  if (v15 >= 0x10000) {
    int v16 = 4;
  }
  else {
    int v16 = 2;
  }
  if (v15 < 0x100) {
    int v17 = 1;
  }
  else {
    int v17 = v16;
  }
  if (v17 == 4)
  {
    int v18 = *(int *)((char *)a1 + v13);
    if (!v18) {
      goto LABEL_5;
    }
  }
  else if (v17 == 2)
  {
    int v18 = *(unsigned __int16 *)((char *)a1 + v13);
    if (!v18) {
      goto LABEL_5;
    }
  }
  else
  {
    int v18 = *((unsigned __int8 *)a1 + v13);
    if (!v18)
    {
LABEL_5:
      unint64_t v11 = *(void *)((v10 + (((unint64_t)a1 + v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
      if (v11 >= 0xFFFFFFFF) {
        LODWORD(v11) = -1;
      }
      return (v11 + 1);
    }
  }
  int v19 = v18 - 1;
  if (v14)
  {
    int v19 = 0;
    int v20 = *a1;
  }
  else
  {
    int v20 = 0;
  }
  return (v20 | v19) ^ 0x80000000;
}

void storeEnumTagSinglePayload for OutlineGroup(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(void *)(v7 - 8);
  if (*(void *)(v10 + 64) > v9) {
    unint64_t v9 = *(void *)(v10 + 64);
  }
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80) | *(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = v9 + 8;
  size_t v13 = ((((((((((v9 + 8 + ((v11 + 25) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (a3 < 0)
  {
    unsigned int v15 = a3 - 2147483646;
    if (((((((((((v9 + 8 + ((v11 + 25) & ~v11)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
      unsigned int v15 = 2;
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v14 = 1;
    }
    else {
      int v14 = v16;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v14 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v13) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)((char *)a1 + v13) = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(unsigned int *)((char *)a1 + v13) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)((v12 + (((unint64_t)a1 + v11 + 25) & ~v11)) & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if (v13) {
    int v17 = 1;
  }
  else {
    int v17 = a2 - 0x7FFFFFFF;
  }
  if (v13)
  {
    bzero(a1, v13);
    *a1 = a2 ^ 0x80000000;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v13) = v17;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v13) = v17;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x1878C29ECLL);
    case 4:
      *(unsigned int *)((char *)a1 + v13) = v17;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for OutlineSubgroupChildren()
{
  return &type metadata for OutlineSubgroupChildren;
}

uint64_t sub_1878C2A24()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for OutlineGroup.ChildPath()
{
  return swift_getGenericMetadata();
}

uint64_t outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1878C2B10()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(a1, *(void **)(v2 + 72), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), a2, *(void *)(v2 + 64));
}

uint64_t partial apply for closure #1 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(type metadata accessor for Binding() - 8);
  return closure #1 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(*(void *)(v1 + 16), *(void **)(v1+ ((*(void *)(v3 + 64)+ ((*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

uint64_t objectdestroy_53Tm()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0 + v3 + v2[10], AssociatedTypeWitness);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #2 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1878C2F28()
{
  swift_release();

  return swift_deallocObject();
}

void _CrownHapticsConfiguration.Notch.Strength.hashValue.getter()
{
}

void static _CrownHapticsConfiguration.Notch.RestingPosition.== infix(_:_:)()
{
}

void _CrownHapticsConfiguration.Notch.RestingPosition.hash(into:)()
{
}

void _CrownHapticsConfiguration.Notch.RestingPosition.hashValue.getter()
{
}

void _CrownHapticsConfiguration.Notch.init(from:to:strength:)()
{
}

void _CrownHapticsConfiguration.Notch.init(from:to:restingPosition:strength:)()
{
}

void _CrownHapticsConfigurationProvider.notchRadius(forHeight:)()
{
}

unint64_t lazy protocol witness table accessor for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength()
{
  unint64_t result = lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength;
  if (!lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition;
  if (!lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition);
  }
  return result;
}

uint64_t destroy for _CrownHapticsConfiguration(uint64_t a1)
{
  return outlined consume of _CrownHapticsConfiguration(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for _CrownHapticsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of _CrownHapticsConfiguration(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _CrownHapticsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of _CrownHapticsConfiguration(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of _CrownHapticsConfiguration(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _CrownHapticsConfiguration(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of _CrownHapticsConfiguration(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CrownHapticsConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _CrownHapticsConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _CrownHapticsConfiguration(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for _CrownHapticsConfiguration(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)unint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration()
{
  return &type metadata for _CrownHapticsConfiguration;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _CrownHapticsConfiguration.Notch(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _CrownHapticsConfiguration.Notch(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration.Notch()
{
  return &type metadata for _CrownHapticsConfiguration.Notch;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration.Notch.Strength()
{
  return &type metadata for _CrownHapticsConfiguration.Notch.Strength;
}

unsigned char *storeEnumTagSinglePayload for _CrownHapticsConfiguration.Notch.Strength(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878C33F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration.Notch.RestingPosition()
{
  return &type metadata for _CrownHapticsConfiguration.Notch.RestingPosition;
}

uint64_t dispatch thunk of _CrownHapticsConfigurationProvider.makeConfiguration()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void static _CrownHapticsConfiguration.Notch.Strength.== infix(_:_:)()
{
  static _CrownHapticsConfiguration.Notch.RestingPosition.== infix(_:_:)();
}

void _CrownHapticsConfiguration.Notch.Strength.hash(into:)()
{
}

uint64_t getEnumTagSinglePayload for VariadicViewForest(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for VariadicViewForest(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  size_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = v10 + v11;
  size_t v15 = ((v10 + v11) & ~v11) + v12;
  BOOL v16 = a3 >= v13;
  unsigned int v17 = a3 - v13;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v19 = ~v13 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x1878C39BCLL);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v9)
        {
          unsigned int v27 = *(void (**)(void))(v6 + 56);
          v27();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v14] & ~v11;
          if (v9 >= a2)
          {
            uint64_t v28 = *(void (**)(unint64_t))(v8 + 56);
            unint64_t v29 = (unint64_t)&a1[v14] & ~v11;
            v28(v29);
          }
          else
          {
            if (v12 <= 3) {
              int v24 = ~(-1 << (8 * v12));
            }
            else {
              int v24 = -1;
            }
            if (v12)
            {
              int v25 = v24 & (~v9 + a2);
              if (v12 <= 3) {
                int v26 = v12;
              }
              else {
                int v26 = 4;
              }
              bzero((void *)((unint64_t)&a1[v14] & ~v11), v12);
              switch(v26)
              {
                case 2:
                  *(_WORD *)unint64_t v23 = v25;
                  break;
                case 3:
                  *(_WORD *)unint64_t v23 = v25;
                  *(unsigned char *)(v23 + 2) = BYTE2(v25);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v23 = v25;
                  break;
                default:
                  *(unsigned char *)unint64_t v23 = v25;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in VariadicViewForest<A, B>()
{
  return &protocol witness table for VariadicViewForest<A, B>;
}

uint64_t static VariadicViewForest._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int v20;
  uint64_t v21;
  long long v22;
  uint64_t v23;
  long long v24;
  int v25;
  uint64_t v26;
  char v27;
  unsigned char v28[4];
  uint64_t v29;
  int v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  long long v34;
  int v35;
  uint64_t v36;
  char v37;

  int v8 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[5];
  int v12 = *((_DWORD *)a2 + 16);
  uint64_t v13 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  unint64_t v29 = *a2;
  int v30 = v9;
  uint64_t v32 = *(_OWORD *)(a2 + 3);
  BOOL v31 = v10;
  uint64_t v33 = v11;
  uint64_t v34 = *((_OWORD *)a2 + 3);
  unint64_t v35 = v12;
  unint64_t v36 = v13;
  uint64_t v37 = v14;
  size_t v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15(&v19, a3, a5);
  PropertyList.subscript.setter();
  LODWORD(v19) = v8;
  type metadata accessor for VariadicViewForest();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  unsigned int v19 = v29;
  int v20 = v30;
  unsigned int v21 = v31;
  int v22 = v32;
  unint64_t v23 = v33;
  int v24 = v34;
  int v25 = v35;
  int v26 = v36;
  unsigned int v27 = v37;
  BOOL v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(void *)(v16 + 32) = a5;
  *(_DWORD *)(v16 + 40) = v8;
  unsigned int v17 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17(v28, &v19, partial apply for closure #2 in static VariadicViewForest._makeViewList(view:inputs:), v16, a3, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in static VariadicViewForest._makeViewList(view:inputs:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  int v13 = *(_DWORD *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  char v19 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  uint64_t v15 = v23 | v12;
  int v34 = a2;
  uint64_t v23 = v7;
  int v24 = v8;
  uint64_t v25 = v9;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v27 = v16;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v15;
  int v31 = v13;
  uint64_t v32 = v14;
  char v33 = v19;
  uint64_t v17 = static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(&v34, &v23, a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v17;
}

uint64_t static VariadicViewForest._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v11)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v12)(long long *, uint64_t (*)(), void *, uint64_t, uint64_t);
  uint64_t v13;
  void v15[7];
  int v16;
  uint64_t v17;
  long long v18;
  int v19;
  uint64_t v20;
  long long v21;
  int v22;
  uint64_t v23;

  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)&unsigned int v21 = *(void *)a1;
  uint64_t v7 = v21;
  *((void *)&v21 + 1) = v8;
  int v22 = v9;
  uint64_t v23 = v10;
  uint64_t v11 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v11(&v18, a2, a4);
  PropertyList.subscript.setter();
  int v18 = v21;
  char v19 = v22;
  int v20 = v23;
  _OWORD v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = v7;
  void v15[6] = v8;
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  uint64_t v12 = *(uint64_t (**)(long long *, uint64_t (*)(), void *, uint64_t, uint64_t))(a4 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  int v13 = v12(&v18, partial apply for closure #1 in static VariadicViewForest._viewListCount(inputs:), v15, a2, a4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t closure #1 in static VariadicViewForest._viewListCount(inputs:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v0 = *(void *)(v8 + 16);
  if (v0)
  {
    uint64_t v1 = type metadata accessor for VariadicViewForest.CountsTreeVisitor();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v2 = (uint64_t *)(v8 + 48);
    do
    {
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      uint64_t WitnessTable = swift_getWitnessTable();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(WitnessTable + 8))(v3, v3, v4, v1, WitnessTable);
      v2 += 3;
      --v0;
    }
    while (v0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v6 = v9;
  }
  else
  {
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

uint64_t VariadicViewForest.CountsTreeVisitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v6 = *((_DWORD *)v4 + 4);
  uint64_t v7 = *((void *)v4 + 3);
  long long v16 = *v4;
  int v17 = v6;
  uint64_t v18 = v7;
  uint64_t v8 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a4 + 40))(&v16, a3, a4);
  char v10 = v9;
  uint64_t v11 = *((void *)v5 + 4);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
    uint64_t v11 = result;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v11);
    uint64_t v11 = result;
  }
  *(void *)(v11 + 16) = v14 + 1;
  unint64_t v15 = v11 + 16 * v14;
  *(void *)(v15 + 32) = v8;
  *(unsigned char *)(v15 + 40) = v10 & 1;
  *((void *)v5 + 4) = v11;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance VariadicViewForest<A, B>.CountsTreeVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return VariadicViewForest.CountsTreeVisitor.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance VariadicViewForest<A, B>(int *a1, uint64_t *a2, uint64_t *a3)
{
  return static VariadicViewForest._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance VariadicViewForest<A, B>(uint64_t a1, uint64_t *a2)
{
  return static VariadicViewForest._viewListCount(inputs:)(a1, a2[2], a2[3], a2[4]);
}

void protocol witness for View.body.getter in conformance VariadicViewForest<A, B>()
{
}

uint64_t specialized static VariadicViewForestRoot._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void *))
{
  v13[0] = a1;
  v13[1] = a2;
  int v14 = a3;
  uint64_t v15 = a4;
  uint64_t result = a5(v13);
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (unsigned __int8 *)(result + 40);
    uint64_t v9 = 1;
    while (1)
    {
      int v10 = *v8;
      if (v10)
      {
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v11 = *((void *)v8 - 1);
        BOOL v12 = __OFADD__(v7, v11);
        v7 += v11;
        if (v12)
        {
          __break(1u);
          return result;
        }
      }
      if (v6 == v9) {
        goto LABEL_12;
      }
      ++v9;
      v8 += 16;
      if (v10)
      {
        while (v9 != v6)
          --v6;
        uint64_t v7 = 0;
LABEL_12:
        swift_bridgeObjectRelease();
        return v7;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static VariadicViewForestRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(long long *))
{
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v16 = *(_OWORD *)(a2 + 48);
  long long v17 = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)a2;
  char v18 = *(unsigned char *)(a2 + 80);
  long long v14 = v6;
  long long v15 = v4;
  uint64_t v7 = a3(&v13);
  outlined retain of _ViewListInputs(a2);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI16_ViewListOutputsVG_14AttributeGraph0I0VyAF0fG0_pGs5NeverOTg503_s7d12UI22Variadicf52ForestRootPAAE05_makeD4List4root6inputs4bodyAA01_dH7h6VAA11_j10ValueVyxG_u25_dH6InputsVSayAIGANctFZ09I23M00P0VyAA0dH0_pGAIXEfU_AF01_fG6InputsVTf1cn_nTf4ng_n(v7, (_OWORD *)a2);
  outlined release of _ViewListInputs(a2);
  swift_bridgeObjectRelease();
  static DynamicPropertyCache.fields(of:)();
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 64);
  long long v16 = *(_OWORD *)(a2 + 48);
  long long v17 = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)a2;
  char v18 = *(unsigned char *)(a2 + 80);
  long long v14 = v10;
  long long v15 = v8;
  outlined retain of _ViewListInputs(a2);
  specialized static VariadicViewForestRoot.makeBody(root:lists:inputs:fields:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NavigationSplitCore and conformance NavigationSplitCore();
  static View.makeDebuggableViewList(view:inputs:)();
  if ((v12 & 1) == 0) {
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t protocol witness for static VariadicViewForestRoot._makeViewList(root:inputs:body:) in conformance _NavigationSplitReader.ForestRoot(unsigned int *a1, uint64_t a2, uint64_t (*a3)(long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static VariadicViewForestRoot._makeViewList(root:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static VariadicViewForestRoot._viewListCount(inputs:body:) in conformance _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t (*a2)(void *))
{
  return specialized static VariadicViewForestRoot._viewListCount(inputs:body:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t outlined release of _ViewListInputs(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in static VariadicViewForest._viewListCount(inputs:)()
{
  return closure #1 in static VariadicViewForest._viewListCount(inputs:)();
}

uint64_t type metadata accessor for VariadicViewForest.CountsTreeVisitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1878C46B4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static VariadicViewForest._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #2 in static VariadicViewForest._makeViewList(view:inputs:)(a1, *(_DWORD *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t destroy for VariadicViewForest.ListOutputsTreeVisitor()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VariadicViewForest.ListOutputsTreeVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for VariadicViewForest.CountsTreeVisitor()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithCopy for ForestRootBodyAccessor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[1];
  long long v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for ForestRootBodyAccessor(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

void TableCollectionViewCell.updateConfiguration(using:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v88 = type metadata accessor for UICellConfigurationState();
  uint64_t v4 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v79 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  Swift::String v81 = (char *)v75 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v80 = (char *)v75 - v9;
  Swift::String v85 = (void *)type metadata accessor for UIBackgroundConfiguration();
  uint64_t v89 = *(v85 - 1);
  MEMORY[0x1F4188790](v85);
  uint64_t v78 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  Swift::String v82 = (char *)v75 - v12;
  MEMORY[0x1F4188790](v13);
  Swift::String v86 = (char *)v75 - v14;
  type metadata accessor for UIBackgroundConfiguration?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v15 - 8);
  long long v17 = (char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  int v20 = (char *)v75 - v19;
  uint64_t v21 = type metadata accessor for UIListContentConfiguration();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  int v24 = (char *)v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIBackgroundConfiguration?(0, &lazy cache variable for type metadata for UIListContentConfiguration?, MEMORY[0x1E4FB0F90]);
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v27 = (char *)v75 - v26;
  uint64_t v28 = (void *)UICellConfigurationState.traitCollection.getter();
  id v29 = objc_msgSend(v28, sel_horizontalSizeClass);
  Swift::String v83 = v17;
  uint64_t v87 = v4;
  if (v29 == (id)1)
  {

    BOOL v30 = 1;
  }
  else
  {
    id v31 = objc_msgSend(v28, sel_userInterfaceIdiom);

    BOOL v30 = v31 == 0;
  }
  uint64_t v32 = (objc_class *)ObjectType;
  uint64_t ObjectType = a1;
  Class isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v93.receiver = v2;
  v93.super_class = v32;
  objc_msgSendSuper2(&v93, sel__bridgedUpdateConfigurationUsingState_, isa);

  uint64_t v35 = direct field offset for TableCollectionViewCell.isHeader;
  if (*((unsigned char *)v2 + direct field offset for TableCollectionViewCell.isHeader) == 1 && v30)
  {
    static UIListContentConfiguration.prominentInsetGroupedHeader()();
    uint64_t v36 = v88;
    uint64_t v91 = v88;
    uint64_t v92 = MEMORY[0x1E4FB0EF8];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v90);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16))(boxed_opaque_existential_1, ObjectType, v36);
    UIListContentConfiguration.updated(for:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v27, 0, 1, v21);
    uint64_t v38 = (uint64_t)v2 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v27, v38);
    uint64_t v34 = swift_endAccess();
  }
  MEMORY[0x18C116980](v34);
  uint64_t v39 = v89;
  uint64_t v40 = v85;
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v89 + 48))(v20, 1, v85))
  {
    uint64_t v41 = outlined destroy of UIBackgroundConfiguration?((uint64_t)v20);
    goto LABEL_9;
  }
  uint64_t v57 = (void *)UIBackgroundConfiguration.customView.getter();
  uint64_t v41 = outlined destroy of UIBackgroundConfiguration?((uint64_t)v20);
  if (!v57
    || (type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(),
        uint64_t v58 = swift_dynamicCastClass(),
        v57,
        !v58))
  {
LABEL_9:
    if (!v30 && (*((unsigned char *)v2 + v35) & 1) != 0)
    {
      uint64_t v56 = v83;
      static UIBackgroundConfiguration.clear()();
      (*(void (**)(char *, void, uint64_t, void *))(v39 + 56))(v56, 0, 1, v40);
      MEMORY[0x18C116990](v56);
      return;
    }
    uint64_t v42 = v82;
    MEMORY[0x18C1169A0](v41);
    uint64_t v43 = v88;
    uint64_t v91 = v88;
    uint64_t v92 = MEMORY[0x1E4FB0EF8];
    uint64_t v44 = __swift_allocate_boxed_opaque_existential_1(v90);
    uint64_t v45 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v87 + 16);
    uint64_t v46 = ObjectType;
    v45(v44, ObjectType, v43);
    UIBackgroundConfiguration.updated(for:)();
    uint64_t v48 = v39 + 8;
    uint64_t v47 = *(void (**)(char *, void *))(v39 + 8);
    v47(v42, v40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    char v49 = UICellConfigurationState.isHighlighted.getter();
    uint64_t v50 = v80;
    if ((v49 & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v51 = (void *)UIBackgroundConfiguration.backgroundColor.getter();
    id v52 = objc_msgSend(self, sel_clearColor);
    uint64_t v53 = v52;
    if (v51)
    {
      if (!v52)
      {

        goto LABEL_23;
      }
      v75[0] = type metadata accessor for UIColor();
      id v54 = v51;
      char v55 = static NSObject.== infix(_:_:)();

      uint64_t v40 = v85;
      if ((v55 & 1) == 0)
      {
LABEL_23:
        char v59 = UICellConfigurationState.isSelected.getter();
        uint64_t v60 = v88;
        v45((uint64_t *)v50, v46, v88);
        Swift::String v85 = v45;
        uint64_t v76 = v47;
        uint64_t v77 = v48;
        v75[1] = v2;
        if (v59) {
          char v61 = 1;
        }
        else {
          char v61 = UICellConfigurationState.isHighlighted.getter();
        }
        uint64_t v62 = *(void (**)(char *, uint64_t))(v87 + 8);
        v62(v50, v60);
        uint64_t v63 = v81;
        uint64_t v64 = (void (*)(char *, char *, uint64_t))v85;
        ((void (*)(char *, uint64_t, uint64_t))v85)(v81, v46, v60);
        if (v61)
        {
          char v65 = UICellConfigurationState.isFocused.getter();
          uint64_t v66 = v79;
          v64(v79, v63, v60);
          if (v65)
          {
            char v67 = UICellConfigurationState.isEditing.getter();
            v62(v66, v60);
            v62(v63, v60);
            int v68 = v76;
            if ((v67 & 1) == 0) {
              goto LABEL_33;
            }
          }
          else
          {
            v62(v66, v60);
            v62(v63, v60);
            int v68 = v76;
          }
          uint64_t v69 = v78;
          static UIBackgroundConfiguration.listCell()();
          uint64_t v91 = v60;
          uint64_t v92 = MEMORY[0x1E4FB0EF8];
          uint64_t v70 = __swift_allocate_boxed_opaque_existential_1(v90);
          ((void (*)(uint64_t *, uint64_t, uint64_t))v85)(v70, v46, v60);
          uint64_t v71 = v82;
          UIBackgroundConfiguration.updated(for:)();
          v68(v69, v40);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
          UIBackgroundConfiguration.backgroundColor.getter();
          v68(v71, v40);
          UIBackgroundConfiguration.backgroundColor.setter();
        }
        else
        {
          v62(v63, v60);
          int v68 = v76;
        }
LABEL_33:
        uint64_t v72 = v89;
        char v73 = v83;
        uint64_t v74 = v86;
        (*(void (**)(char *, char *, void *))(v89 + 16))(v83, v86, v40);
        (*(void (**)(char *, void, uint64_t, void *))(v72 + 56))(v73, 0, 1, v40);
        MEMORY[0x18C116990](v73);
        v68(v74, v40);
        return;
      }
    }
    else if (v52)
    {

      goto LABEL_23;
    }
    UIBackgroundConfiguration.backgroundColor.setter();
    goto LABEL_23;
  }
}

uint64_t @objc TableCollectionViewCell.updateConfiguration(using:)(void *a1)
{
  uint64_t v2 = type metadata accessor for UICellConfigurationState();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a1;
  TableCollectionViewCell.updateConfiguration(using:)((uint64_t)v5);

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void __swiftcall TableCollectionViewCell.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  uint64_t v4 = v3;
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v9 = objc_msgSend(v3, sel_traitCollection);
  if (objc_msgSend(v9, sel_horizontalSizeClass) == (id)1) {
    goto LABEL_10;
  }
  id v10 = objc_msgSend(v9, sel_userInterfaceIdiom);
  BOOL v11 = v4[direct field offset for TableCollectionViewCell.isHeader] != 1 || v10 == 0;
  if (v11
    || *(double *)&v4[direct field offset for TableCollectionViewCell.headerLeadingMargin] <= 0.0
    && objc_msgSend(v9, sel_userInterfaceIdiom) != (id)6)
  {
    goto LABEL_10;
  }
  id v12 = objc_msgSend(v4, sel_window);
  if (v12)
  {
    uint64_t v13 = v12;
    objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v12, x, y);

    MEMORY[0x1F4188790](v14);
    static Update.ensure<A>(_:)();
    if (v15)
    {
LABEL_10:
      v16.receiver = v4;
      v16.super_class = ObjectType;
      -[UIView_optional hitTest:withEvent:](&v16, sel_hitTest_withEvent_, isa, x, y);

      return;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in TableCollectionViewCell.hitTest(_:with:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  if (!*(void *)(result + direct field offset for ListCollectionViewCellBase.host)) {
    goto LABEL_6;
  }
  swift_retain();
  uint64_t v3 = ViewGraph.responderNode.getter();
  __n128 result = swift_release();
  if (!v3) {
    goto LABEL_6;
  }
  type metadata accessor for ViewResponder();
  uint64_t v4 = swift_dynamicCastClass();
  BOOL v5 = v4 != 0;
  if (!v4 || (uint64_t v6 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(), result = swift_release(), v6)) {
    __n128 result = swift_release();
  }
  else {
LABEL_6:
  }
    BOOL v5 = 0;
  *a2 = v5;
  return result;
}

id @objc TableCollectionViewCell.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  TableCollectionViewCell.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  uint64_t v13 = v12;

  return v13;
}

uint64_t TableCollectionViewCell.hostingView<A>(_:willUpdate:)(uint64_t a1, uint64_t a2)
{
  specialized ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(a2);
  uint64_t v4 = v2 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for UIListContentConfiguration();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5)) {
    UIListContentConfiguration.directionalLayoutMargins.getter();
  }
  swift_endAccess();
  _s7SwiftUI22EnvironmentPropertyKeyVyAA024TableHeaderLeadingMarginE0VGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

id @objc TableCollectionViewCell.init(frame:)(unsigned char *a1, double a2, double a3, double a4, double a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  a1[direct field offset for TableCollectionViewCell.isHeader] = 0;
  *(void *)&a1[direct field offset for TableCollectionViewCell.headerLeadingMargin] = 0;
  v12.receiver = a1;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a2, a3, a4, a5);
}

id @objc TableCollectionViewCell.init(coder:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  a1[direct field offset for TableCollectionViewCell.isHeader] = 0;
  *(void *)&a1[direct field offset for TableCollectionViewCell.headerLeadingMargin] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_initWithCoder_, a3);
}

uint64_t type metadata accessor for TableCollectionViewCell()
{
  uint64_t result = type metadata singleton initialization cache for TableCollectionViewCell;
  if (!type metadata singleton initialization cache for TableCollectionViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TableCollectionViewCell()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for TableCollectionViewCell()
{
  return type metadata accessor for TableCollectionViewCell();
}

uint64_t partial apply for closure #1 in TableCollectionViewCell.hitTest(_:with:)@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in TableCollectionViewCell.hitTest(_:with:)(*(void *)(v1 + 16), a1);
}

uint64_t outlined destroy of UIBackgroundConfiguration?(uint64_t a1)
{
  type metadata accessor for UIBackgroundConfiguration?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TableColumn.init(comparator:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v40 = a5;
  uint64_t v41 = a4;
  uint64_t v39 = a3;
  uint64_t v38 = a2;
  uint64_t v37 = a1;
  uint64_t v42 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v36 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[0] = v19;
  v52[1] = v20;
  v52[2] = v21;
  v52[3] = a10;
  v52[4] = a11;
  v52[5] = a12;
  v52[6] = a13;
  v52[7] = a14;
  uint64_t v22 = (int *)type metadata accessor for TableColumn();
  uint64_t v23 = v22[22];
  uint64_t v35 = a9;
  uint64_t v24 = a9 + v23;
  *(_OWORD *)uint64_t v24 = xmmword_18834BB90;
  *(_OWORD *)(v24 + 16) = xmmword_188362990;
  *(unsigned char *)(v24 + 32) = 0;
  uint64_t v25 = a9 + v22[23];
  *(void *)(v25 + 112) = 0;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)uint64_t v25 = 0u;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v47 = a10;
  uint64_t v48 = a11;
  uint64_t v49 = a12;
  uint64_t v50 = a13;
  uint64_t v51 = a14;
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v27 = v37;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableColumn.init(comparator:content:label:), (uint64_t)v43, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for SwiftUIAnySortComparator, v28, (uint64_t)v52);
  outlined assign with take of SwiftUIAnySortComparator?((uint64_t)v52, v25);
  uint64_t v29 = v35;
  BOOL v30 = (void *)(v35 + v22[21]);
  uint64_t v31 = v39;
  *BOOL v30 = v38;
  v30[1] = v31;
  uint64_t v32 = swift_retain();
  char v33 = v36;
  v41(v32);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v27, v26);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v29, v33, a10);
}

uint64_t closure #1 in TableColumn.init(comparator:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  return SwiftUIAnySortComparator.init<A>(_:)((uint64_t)v9, a2, a3, a4);
}

uint64_t static TableColumn._makeContent(content:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v4 = HIDWORD(a3);
  int v5 = *a1;
  long long v6 = a2[3];
  long long v30 = a2[2];
  long long v31 = v6;
  long long v32 = a2[4];
  int v33 = *((_DWORD *)a2 + 20);
  long long v7 = a2[1];
  long long v28 = *a2;
  long long v29 = v7;
  PreferencesOutputs.init()();
  long long v36 = v30;
  long long v37 = v31;
  long long v38 = v32;
  int v39 = v33;
  long long v34 = v28;
  long long v35 = v29;
  *(_OWORD *)&v23[16] = v30;
  *(_OWORD *)uint64_t v24 = v31;
  *(_OWORD *)&v24[16] = v32;
  int v25 = v33;
  long long v22 = v28;
  *(_OWORD *)uint64_t v23 = v29;
  outlined retain of _ViewInputs((uint64_t)&v34);
  PreferencesInputs.remove<A>(_:)();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  LODWORD(v20) = v5;
  type metadata accessor for TableColumn();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  *(void *)uint64_t v14 = v29;
  *(_OWORD *)&v14[8] = *(_OWORD *)&v23[8];
  *(void *)&v14[24] = *((void *)&v30 + 1);
  uint64_t v15 = v31;
  long long v16 = *(_OWORD *)&v24[8];
  uint64_t v17 = *((void *)&v32 + 1);
  int v18 = v33;
  static View.makeDebuggableView(view:inputs:)();
  *(void *)&long long v13 = v20;
  *((void *)&v13 + 1) = __PAIR64__(v4, v21);
  uint64_t v8 = PreferencesOutputs.subscript.getter();
  uint64_t v9 = swift_bridgeObjectRelease();
  if ((v8 & 0x100000000) != 0)
  {
    long long v13 = v34;
    *(_OWORD *)uint64_t v14 = v35;
    *(_OWORD *)&v14[16] = v36;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    char v19 = 0;
    uint64_t v9 = _GraphInputs.intern<A>(_:id:)();
  }
  *(void *)&long long v13 = v37;
  DWORD2(v13) = DWORD2(v37);
  uint64_t v20 = v37;
  unsigned int v21 = DWORD2(v37);
  MEMORY[0x1F4188790](v9);
  outlined retain of [Text.Modifier]((uint64_t)&v13);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  int v11 = v27;
  *(void *)a4 = v26;
  *(_DWORD *)(a4 + 8) = v11;
  return result;
}

uint64_t closure #1 in static TableColumn._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  uint64_t v22 = a9;
  void v14[2] = type metadata accessor for TableColumn();
  v14[3] = a5;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v14, a5, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v15;
}

uint64_t partial apply for closure #1 in static TableColumn._makeContent(content:inputs:)(uint64_t a1)
{
  return closure #1 in static TableColumn._makeContent(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t type metadata accessor for TableColumn()
{
  return swift_getGenericMetadata();
}

uint64_t implicit closure #2 in static TableColumn._makeContent(content:inputs:)(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10)
{
  LODWORD(v43) = a2;
  int v38 = a1;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v45 = &v37[-v17];
  *(void *)&long long v55 = a4;
  *((void *)&v55 + 1) = a5;
  *(void *)&long long v56 = a6;
  *((void *)&v56 + 1) = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  *(void *)&long long v57 = a8;
  *((void *)&v57 + 1) = a9;
  uint64_t v20 = a8;
  long long v58 = a10;
  uint64_t List = type metadata accessor for TableColumn.MakeList();
  uint64_t v47 = *(void *)(List - 8);
  MEMORY[0x1F4188790](List);
  uint64_t v44 = &v37[-v21];
  int v48 = v38;
  *(void *)&long long v55 = a4;
  *((void *)&v55 + 1) = a5;
  uint64_t v22 = a4;
  *(void *)&long long v56 = v18;
  *((void *)&v56 + 1) = v19;
  uint64_t v40 = v19;
  *(void *)&long long v57 = v20;
  *((void *)&v57 + 1) = a9;
  uint64_t v41 = v20;
  long long v58 = a10;
  uint64_t v39 = *((void *)&a10 + 1);
  uint64_t v42 = a10;
  type metadata accessor for TableColumn();
  type metadata accessor for _GraphValue();
  int v38 = _GraphValue.value.getter();
  int v48 = (int)v43;
  *(void *)&long long v55 = a4;
  *((void *)&v55 + 1) = a5;
  *(void *)&long long v56 = v18;
  *((void *)&v56 + 1) = v19;
  *(void *)&long long v57 = v20;
  *((void *)&v57 + 1) = a9;
  long long v58 = a10;
  uint64_t Label = type metadata accessor for TableColumn.MakeLabel();
  uint64_t v53 = Label;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F4E740];
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for Attribute<NSAttributedString>, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedString, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v48, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v52, Label, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
  int v26 = v55;
  long long v27 = *(_OWORD *)(a3 + 48);
  long long v57 = *(_OWORD *)(a3 + 32);
  long long v58 = v27;
  long long v59 = *(_OWORD *)(a3 + 64);
  int v60 = *(_DWORD *)(a3 + 80);
  long long v28 = *(_OWORD *)(a3 + 16);
  long long v55 = *(_OWORD *)a3;
  long long v56 = v28;
  swift_getKeyPath();
  outlined retain of _ViewInputs(a3);
  LODWORD(Label) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = (uint64_t)v45;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v45, 1, 1, v29);
  uint64_t v31 = (uint64_t)v44;
  *uint64_t v44 = v38;
  *(_DWORD *)(v31 + 4) = v26;
  *(_DWORD *)(v31 + 8) = Label;
  *(void *)&long long v55 = v22;
  *((void *)&v55 + 1) = a5;
  *(void *)&long long v56 = v18;
  *((void *)&v56 + 1) = v40;
  *(void *)&long long v57 = v41;
  *((void *)&v57 + 1) = a9;
  *(void *)&long long v58 = v42;
  *((void *)&v58 + 1) = v39;
  uint64_t v32 = type metadata accessor for TableColumn.MakeList();
  outlined init with take of UUID?(v30, v31 + *(int *)(v32 + 92));
  uint64_t v33 = List;
  uint64_t v50 = List;
  uint64_t v51 = swift_getWitnessTable();
  type metadata accessor for UUID?(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableColumnList>, (uint64_t (*)(uint64_t))type metadata accessor for TableColumnList, v43);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v49, v33, MEMORY[0x1E4FBC248], v34, MEMORY[0x1E4FBC278], v35);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v31, v33);
  return v55;
}

uint64_t partial apply for implicit closure #2 in static TableColumn._makeContent(content:inputs:)()
{
  *(void *)&v2[16] = *(void *)(v0 + 72);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 56);
  return implicit closure #2 in static TableColumn._makeContent(content:inputs:)(*(_DWORD *)(v0 + 80), *(_DWORD *)(v0 + 84), *(void *)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(long long *)&v2[8]);
}

double key path getter for EnvironmentValues.tableColumnConfiguration : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key();
  EnvironmentValues.subscript.getter();
  *(unsigned char *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  return result;
}

uint64_t static TableColumn._tableColumnCount(inputs:)()
{
  return 1;
}

id TableColumn.MakeLabel.value.getter()
{
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (id *)((char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  AGGraphGetValue();
  uint64_t v3 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v3, (uint64_t)v2);
  swift_bridgeObjectRelease();
  id v4 = *v2;
  id v5 = *v2;
  outlined destroy of PlatformItemList.Item((uint64_t)v2);
  if (!v4) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_init);
  }
  return v5;
}

uint64_t TableColumn.MakeList.column.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TableColumn();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t TableColumn.MakeList.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v5 = *(void *)(Value + 24);
  uint64_t v6 = *(void *)(Value + 32);
  uint64_t v7 = *(void *)(Value + 48);
  __int16 v8 = *(_WORD *)(Value + 56);
  *(unsigned char *)a1 = *(unsigned char *)Value;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  unsigned __int8 v9 = *(unsigned char *)(Value + 40);
  *(unsigned char *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;

  return outlined copy of TableColumnCustomizationID?(v4, v3, v5, v6, v9);
}

id protocol witness for Rule.value.getter in conformance TableColumn<A, B, C, D>.MakeLabel@<X0>(void *a1@<X8>)
{
  id result = TableColumn.MakeLabel.value.getter();
  *a1 = result;
  return result;
}

uint64_t TableColumn.MakeList.updateValue()(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(_UNKNOWN ***)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v37 = *(void *)(a1 + 16);
  uint64_t v52 = v37;
  uint64_t v53 = v3;
  uint64_t v36 = v3;
  uint64_t v35 = v4;
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  uint64_t v34 = v5;
  uint64_t v33 = v6;
  long long v56 = v6;
  uint64_t v57 = v7;
  uint64_t v32 = v7;
  uint64_t v31 = v8;
  uint64_t v58 = v8;
  uint64_t v59 = v9;
  uint64_t v30 = v9;
  uint64_t v10 = type metadata accessor for TableColumn();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v39 = (uint64_t)&v30 - v11;
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v38 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v30 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = v1 + *(int *)(a1 + 92);
  outlined init with copy of UUID?(v20, (uint64_t)&v30 - v18);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  outlined destroy of UUID?((uint64_t)v19);
  if (v24 == 1)
  {
    UUID.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
    outlined assign with take of UUID?((uint64_t)v16, v20);
  }
  TableColumn.MakeList.column.getter(v39);
  uint64_t v25 = v38;
  outlined init with copy of UUID?(v20, v38);
  if (v23((char *)v25, 1, v21) == 1) {
    __break(1u);
  }
  type metadata accessor for NSAttributedString();
  int v26 = *(void **)AGGraphGetValue();
  TableColumn.MakeList.configuration.getter((uint64_t)v46);
  v40[0] = v46[0];
  long long v41 = v47;
  long long v42 = v48;
  char v43 = v49;
  uint64_t v44 = v50;
  __int16 v45 = v51;
  uint64_t v52 = v37;
  uint64_t v53 = v36;
  uint64_t v54 = v35;
  uint64_t v55 = v34;
  long long v56 = v33;
  uint64_t v57 = v32;
  uint64_t v58 = v31;
  uint64_t v59 = v30;
  uint64_t v55 = type metadata accessor for TableColumn.UnaryTableColumnList();
  long long v56 = &protocol witness table for TableColumn<A, B, C, D>.UnaryTableColumnList;
  long long v27 = __swift_allocate_boxed_opaque_existential_1(&v52);
  TableColumn.UnaryTableColumnList.init(column:id:label:configuration:)(v39, v25, (uint64_t)v26, v40, (uint64_t)v27);
  type metadata accessor for TableColumnList();
  id v28 = v26;
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
}

__n128 TableColumn.UnaryTableColumnList.init(column:id:label:configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v20 = *a4;
  __n128 v19 = *(__n128 *)(a4 + 8);
  uint64_t v17 = *((void *)a4 + 4);
  uint64_t v18 = *((void *)a4 + 3);
  char v16 = a4[40];
  uint64_t v15 = *((void *)a4 + 6);
  __int16 v14 = *((_WORD *)a4 + 28);
  uint64_t v7 = type metadata accessor for TableColumn();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a5, a1, v7);
  uint64_t v8 = (int *)type metadata accessor for TableColumn.UnaryTableColumnList();
  uint64_t v9 = a5 + v8[21];
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a2, v10);
  *(void *)(a5 + v8[22]) = a3;
  uint64_t v11 = a5 + v8[23];
  *(unsigned char *)uint64_t v11 = v20;
  __n128 result = v19;
  *(__n128 *)(v11 + 8) = v19;
  *(void *)(v11 + 24) = v18;
  *(void *)(v11 + 32) = v17;
  *(unsigned char *)(v11 + 40) = v16;
  *(void *)(v11 + 48) = v15;
  *(_WORD *)(v11 + 56) = v14;
  return result;
}

uint64_t TableColumn.UnaryTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = v5 + *(int *)(a3 + 84);
  uint64_t v20 = *(void *)(v5 + *(int *)(a3 + 88));
  uint64_t v8 = v5 + *(int *)(a3 + 92);
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 48);
  __int16 v14 = *(_WORD *)(v8 + 56);
  unsigned __int8 v15 = *(unsigned char *)(v8 + 40);
  v22[0] = *(unsigned char *)v8;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  uint64_t v25 = v12;
  uint64_t v26 = v11;
  unsigned __int8 v27 = v15;
  uint64_t v28 = v13;
  __int16 v29 = v14;
  char v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, void, void, void, void, void, void, uint64_t, uint64_t))(a5 + 8);
  outlined copy of TableColumnCustomizationID?(v9, v10, v12, v11, v15);
  char v17 = v16(v5, v21, v20, v22, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 40), *(void *)(a3 + 32), *(void *)(a3 + 48), *(void *)(a3 + 56), *(void *)(a3 + 72), *(void *)(a3 + 64), a4, a5);
  outlined consume of TableColumnCustomizationID?(v9, v10, v12, v11, v15);
  return v17 & 1;
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance TableColumn<A, B, C, D>.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TableColumn.UnaryTableColumnList.visitColumns<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance TableColumn<A, B, C, D>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TableColumn._makeContent(content:inputs:)(a1, a2, *(void *)(a3 + 24), a4);
}

uint64_t TableColumn<>.init(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v35 = a7;
  uint64_t v36 = a4;
  uint64_t v32 = a2;
  uint64_t v33 = a5;
  int v34 = a3;
  uint64_t v31 = a1;
  uint64_t v37 = a9;
  uint64_t v29 = a8;
  uint64_t v30 = a14;
  uint64_t v28 = a11;
  uint64_t v17 = type metadata accessor for Optional();
  v18.n128_f64[0] = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v21 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v28 - v19, a5, a10, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, a10);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a8;
  v22[3] = a10;
  v22[4] = a11;
  v22[5] = a12;
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  v22[6] = a13;
  v22[7] = v24;
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  unsigned char v22[8] = a6;
  v22[9] = v25;
  uint64_t v39 = v23;
  uint64_t v40 = v32;
  char v41 = v34;
  uint64_t v42 = v26;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v22, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v38, v29, a10, v28, v37, MEMORY[0x1E4F41420], a12, a13, v24, MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v33, a10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  uint64_t v36 = a7;
  uint64_t v37 = a2;
  uint64_t v33 = a5;
  int v34 = a4;
  uint64_t v32 = a3;
  uint64_t v35 = a9;
  uint64_t v30 = a13;
  uint64_t v31 = a6;
  uint64_t v28 = a11;
  uint64_t v29 = a1;
  uint64_t v17 = type metadata accessor for Optional();
  v18.n128_f64[0] = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v21 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v28 - v19, a5, a10, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, a10);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a8;
  v22[3] = a10;
  v22[4] = a11;
  v22[5] = a12;
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  v22[6] = v30;
  v22[7] = a14;
  unsigned char v22[8] = v23;
  uint64_t v25 = v37;
  v22[9] = v36;
  uint64_t v39 = a1;
  uint64_t v40 = v25;
  uint64_t v26 = v32 & 1;
  char v41 = v32 & 1;
  uint64_t v42 = v34;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v22, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v38, a8, a10, v28, v35, MEMORY[0x1E4F41420], a12, v24, a14, MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v33, a10);
  outlined consume of Text.Storage(v29, v37, v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1878C7A1C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v30 = a8;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a9;
  uint64_t v17 = type metadata accessor for Optional();
  v18.n128_f64[0] = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v21 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v28 - v19, a2, a6, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, a6);
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = a5;
  uint64_t v28 = a7;
  uint64_t v29 = a5;
  v22[2] = a5;
  v22[3] = a6;
  uint64_t v25 = v30;
  uint64_t v24 = v31;
  v22[4] = a7;
  v22[5] = v25;
  v22[6] = a10;
  v22[7] = a11;
  unsigned char v22[8] = a12;
  v22[9] = a13;
  v22[10] = v24;
  v22[11] = v32;
  uint64_t v37 = v23;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = v25;
  uint64_t v41 = a10;
  uint64_t v42 = a11;
  uint64_t v43 = a12;
  uint64_t v44 = a13;
  uint64_t v26 = v33;
  uint64_t v45 = v33;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:sortUsing:content:), (uint64_t)v22, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:sortUsing:content:), (uint64_t)v36, v29, a6, v28, v35, MEMORY[0x1E4F41420], a10, a11, a12, MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v34, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v26, v25);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v17 - v12;
  v14(v11);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  unsigned __int8 v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a6);
}

uint64_t sub_1878C7DC0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)(a1, v1[10], v1[11], v1[2], v1[3], v1[4]);
}

uint64_t closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)(*(void *)(v1 + 80), a1);
}

uint64_t closure #1 in TableColumn<>.init(_:sortUsing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v17 - v12;
  v14(v11);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  unsigned __int8 v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a6);
}

uint64_t partial apply for closure #1 in TableColumn<>.init(_:sortUsing:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init(_:sortUsing:content:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4]);
}

uint64_t TableColumn<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  char v27 = 1;
  __n128 v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a7;
  v18[3] = a8;
  v18[4] = a10;
  v18[5] = a11;
  v18[6] = a5;
  v18[7] = a6;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  char v25 = a3;
  uint64_t v26 = a4;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v27, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:content:), (uint64_t)v18, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v22, a7, MEMORY[0x1E4FBC248], a8, a9, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F28138], a11, MEMORY[0x1E4F41418]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  void *v18;
  unsigned char v22[16];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;

  char v27 = 1;
  __n128 v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a7;
  v18[3] = a8;
  v18[4] = a10;
  v18[5] = a11;
  v18[6] = a5;
  v18[7] = a6;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  char v25 = a3 & 1;
  uint64_t v26 = a4;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v27, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:content:), (uint64_t)v18, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v22, a7, MEMORY[0x1E4FBC248], a8, a9, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F28138], a11, MEMORY[0x1E4F41418]);
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  char v29 = 1;
  __n128 v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  v18[6] = a8;
  v18[7] = a10;
  v18[8] = a2;
  v18[9] = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a10;
  uint64_t v28 = a1;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v29, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:content:), (uint64_t)v18, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:content:), (uint64_t)v21, a4, MEMORY[0x1E4FBC248], a5, a9, MEMORY[0x1E4F41420], a7, MEMORY[0x1E4F28138], a8, MEMORY[0x1E4F41418]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  __int16 v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init<A>(_:content:)(a1, v1[8], v1[9], v1[2], v1[3]);
}

uint64_t closure #2 in TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A>(_:content:)(*(void *)(v1 + 64), a1);
}

uint64_t closure #1 in TableColumn<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  __int16 v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t sub_1878C8A3C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init(_:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init(_:content:)(a1, v1[6], v1[7], v1[2], v1[3]);
}

uint64_t TableColumn<>.init<>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *a5;
  char v23 = 1;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a6;
  *(void *)(v15 + 24) = a5;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  char v21 = a3;
  uint64_t v22 = a4;
  uint64_t v16 = *(void *)(v14 + *MEMORY[0x1E4FBC5F0]);
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v23, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v15, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v18, v16, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], a7, MEMORY[0x1E4F41420], a6, MEMORY[0x1E4F28138], MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[16];
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  uint64_t v14 = *a5;
  char v23 = 1;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a6;
  *(void *)(v15 + 24) = a5;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  a3 &= 1u;
  char v21 = a3;
  uint64_t v22 = a4;
  uint64_t v16 = *(void *)(v14 + *MEMORY[0x1E4FBC5F0]);
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v23, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v15, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v18, v16, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], a7, MEMORY[0x1E4F41420], a6, MEMORY[0x1E4F28138], MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1878C8BEC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TableColumn<>.init<A>(_:value:)(a1);
}

uint64_t TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *a2;
  char v21 = 1;
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a2;
  uint64_t v16 = *(void *)(v12 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a1;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v21, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:), (uint64_t)v13, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:), (uint64_t)v15, v16, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], a6, MEMORY[0x1E4F41420], a4, MEMORY[0x1E4F28138], MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  swift_getAtKeyPath();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1878C8E0C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TableColumn<>.init<A>(_:value:)(a1);
}

uint64_t closure #2 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A>(_:value:)(*(void *)(v1 + 48), a1);
}

uint64_t partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  char v4 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  outlined copy of Text.Storage(v2, v3, v4);

  return swift_bridgeObjectRetain();
}

uint64_t TableColumn.width(_:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v5);
  uint64_t v11 = a4 + *(int *)(a3 + 88);
  if (*(unsigned char *)(v11 + 32))
  {
    unsigned int v12 = a2 & 1;
    double v13 = a1;
    double v14 = INFINITY;
    if (a2) {
      double v13 = 10.0;
    }
    else {
      double v14 = a1;
    }
  }
  else
  {
    double v13 = *(double *)(v11 + 16);
    double v14 = *(double *)(v11 + 24);
    double v15 = a1;
    if (a2)
    {
      a1 = *(double *)v11;
      unsigned int v12 = *(unsigned char *)(v11 + 8) & 1;
    }
    else
    {
      unsigned int v12 = 0;
    }
    if ((a2 & 1) == 0)
    {
      double v13 = v15;
      double v14 = v15;
    }
  }
  *(double *)uint64_t v11 = a1;
  *(void *)(v11 + 8) = v12;
  *(double *)(v11 + 16) = v13;
  *(double *)(v11 + 24) = v14;
  *(unsigned char *)(v11 + 32) = 0;
  return result;
}

uint64_t TableColumn.width(min:ideal:max:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(a8, v9, a7);
  uint64_t v19 = a8 + *(int *)(a7 + 88);
  if (*(unsigned char *)(v19 + 32))
  {
    char v20 = a4 & 1;
    if (a4) {
      uint64_t v21 = 0x4024000000000000;
    }
    else {
      uint64_t v21 = a3;
    }
    uint64_t v22 = 0x7FF0000000000000;
    if ((a4 & 1) == 0) {
      uint64_t v22 = a3;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(v19 + 16);
    uint64_t v22 = *(void *)(v19 + 24);
    if (a4) {
      a3 = *(void *)v19;
    }
    char v20 = a4 & *(unsigned char *)(v19 + 8);
  }
  if ((a2 & 1) == 0) {
    uint64_t v21 = a1;
  }
  if ((a6 & 1) == 0) {
    uint64_t v22 = a5;
  }
  *(void *)uint64_t v19 = a3;
  *(void *)(v19 + 8) = v20 & 1;
  *(void *)(v19 + 16) = v21;
  *(void *)(v19 + 24) = v22;
  *(unsigned char *)(v19 + 32) = 0;
  return result;
}

double TableColumn.fixedToHeaderWidth()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v3, a1);
  uint64_t v6 = a2 + *(int *)(a1 + 88);
  double result = 0.0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(unsigned char *)(v6 + 32) = 1;
  return result;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in TableColumn<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 56);
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in TableColumn<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 48);
}

uint64_t instantiation function for generic protocol witness table for TableColumn<A, B, C, D>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TableColumn()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v15 = *(unsigned char *)(v14 + 32);
    long long v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v16;
    *(unsigned char *)(v13 + 32) = v15;
    unint64_t v17 = ((unint64_t)v10 + 63) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v11 + 63) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = *(void *)(v18 + 24);
    swift_retain();
    if (v19 < 0xFFFFFFFF)
    {
      long long v25 = *(_OWORD *)v18;
      long long v26 = *(_OWORD *)(v18 + 16);
      long long v27 = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
      *(_OWORD *)(v17 + 48) = v27;
      *(_OWORD *)unint64_t v17 = v25;
      *(_OWORD *)(v17 + 16) = v26;
      long long v28 = *(_OWORD *)(v18 + 64);
      long long v29 = *(_OWORD *)(v18 + 80);
      long long v30 = *(_OWORD *)(v18 + 96);
      *(void *)(v17 + 112) = *(void *)(v18 + 112);
      *(_OWORD *)(v17 + 80) = v29;
      *(_OWORD *)(v17 + 96) = v30;
      *(_OWORD *)(v17 + 64) = v28;
      return v4;
    }
    *(void *)(v17 + 24) = v19;
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v19 - 8))(v17, v18, v19);
    uint64_t v20 = *(void *)(v18 + 56);
    *(void *)(v17 + 56) = v20;
    *(void *)(v17 + 64) = *(void *)(v18 + 64);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v17 + 32, v18 + 32);
    uint64_t v21 = *(void *)(v18 + 80);
    *(void *)(v17 + 72) = *(void *)(v18 + 72);
    *(void *)(v17 + 80) = v21;
    uint64_t v22 = *(void *)(v18 + 96);
    *(void *)(v17 + 88) = *(void *)(v18 + 88);
    *(void *)(v17 + 96) = v22;
    uint64_t v23 = *(void *)(v18 + 104);
    uint64_t v24 = *(void *)(v18 + 112);
    *(void *)(v17 + 104) = v23;
    *(void *)(v17 + 112) = v24;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TableColumn(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 40) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = swift_release();
  unint64_t v6 = (v4 + 63) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(v6);
    __swift_destroy_boxed_opaque_existential_1(v6 + 32);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 32);
  long long v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v13;
  *(unsigned char *)(v10 + 32) = v12;
  unint64_t v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)(v15 + 24);
  swift_retain();
  if (v16 < 0xFFFFFFFF)
  {
    long long v22 = *(_OWORD *)v15;
    long long v23 = *(_OWORD *)(v15 + 16);
    long long v24 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v24;
    *(_OWORD *)unint64_t v14 = v22;
    *(_OWORD *)(v14 + 16) = v23;
    long long v25 = *(_OWORD *)(v15 + 64);
    long long v26 = *(_OWORD *)(v15 + 80);
    long long v27 = *(_OWORD *)(v15 + 96);
    *(void *)(v14 + 112) = *(void *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v26;
    *(_OWORD *)(v14 + 96) = v27;
    *(_OWORD *)(v14 + 64) = v25;
  }
  else
  {
    *(void *)(v14 + 24) = v16;
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v16 - 8))(v14, v15, v16);
    uint64_t v17 = *(void *)(v15 + 56);
    *(void *)(v14 + 56) = v17;
    *(void *)(v14 + 64) = *(void *)(v15 + 64);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(v14 + 32, v15 + 32);
    uint64_t v18 = *(void *)(v15 + 80);
    *(void *)(v14 + 72) = *(void *)(v15 + 72);
    *(void *)(v14 + 80) = v18;
    uint64_t v19 = *(void *)(v15 + 96);
    *(void *)(v14 + 88) = *(void *)(v15 + 88);
    *(void *)(v14 + 96) = v19;
    uint64_t v20 = *(void *)(v15 + 104);
    uint64_t v21 = *(void *)(v15 + 112);
    *(void *)(v14 + 104) = v20;
    *(void *)(v14 + 112) = v21;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  long long v13 = *(_OWORD *)(v11 + 16);
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
  *(_OWORD *)unint64_t v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  unint64_t v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)(v15 + 24);
  if (*(void *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *(void *)(v14 + 24) = v16;
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v20 = *(void *)(v15 + 56);
      *(void *)(v14 + 56) = v20;
      *(void *)(v14 + 64) = *(void *)(v15 + 64);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v14 + 32, v15 + 32);
      uint64_t v21 = *(void *)(v15 + 80);
      *(void *)(v14 + 72) = *(void *)(v15 + 72);
      *(void *)(v14 + 80) = v21;
      uint64_t v22 = *(void *)(v15 + 96);
      *(void *)(v14 + 88) = *(void *)(v15 + 88);
      *(void *)(v14 + 96) = v22;
      uint64_t v23 = *(void *)(v15 + 104);
      uint64_t v24 = *(void *)(v15 + 112);
      *(void *)(v14 + 104) = v23;
      *(void *)(v14 + 112) = v24;
      swift_retain();
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v25 = *(_OWORD *)v15;
    long long v26 = *(_OWORD *)(v15 + 16);
    long long v27 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v27;
    *(_OWORD *)unint64_t v14 = v25;
    *(_OWORD *)(v14 + 16) = v26;
    long long v28 = *(_OWORD *)(v15 + 64);
    long long v29 = *(_OWORD *)(v15 + 80);
    long long v30 = *(_OWORD *)(v15 + 96);
    *(void *)(v14 + 112) = *(void *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v29;
    *(_OWORD *)(v14 + 96) = v30;
    *(_OWORD *)(v14 + 64) = v28;
    return a1;
  }
  if (v16 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v14);
    __swift_destroy_boxed_opaque_existential_1(v14 + 32);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v14, (uint64_t *)v15);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + 32), (uint64_t *)(v15 + 32));
  uint64_t v17 = *(void *)(v15 + 80);
  *(void *)(v14 + 72) = *(void *)(v15 + 72);
  *(void *)(v14 + 80) = v17;
  swift_retain();
  swift_release();
  uint64_t v18 = *(void *)(v15 + 96);
  *(void *)(v14 + 88) = *(void *)(v15 + 88);
  *(void *)(v14 + 96) = v18;
  swift_retain();
  swift_release();
  uint64_t v19 = *(void *)(v15 + 112);
  *(void *)(v14 + 104) = *(void *)(v15 + 104);
  *(void *)(v14 + 112) = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v10;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  unint64_t v13 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  long long v16 = *(_OWORD *)(v14 + 80);
  long long v15 = *(_OWORD *)(v14 + 96);
  long long v17 = *(_OWORD *)(v14 + 64);
  *(void *)(v13 + 112) = *(void *)(v14 + 112);
  *(_OWORD *)(v13 + 80) = v16;
  *(_OWORD *)(v13 + 96) = v15;
  *(_OWORD *)(v13 + 64) = v17;
  long long v18 = *(_OWORD *)(v14 + 16);
  long long v19 = *(_OWORD *)(v14 + 32);
  long long v20 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v20;
  return a1;
}

uint64_t assignWithTake for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = (unint64_t)v8 + 63;
  *int v7 = *v8;
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  long long v13 = *(_OWORD *)(v11 + 16);
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
  *(_OWORD *)unint64_t v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  unint64_t v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v14 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v16 = *(void *)(v15 + 24);
  __swift_destroy_boxed_opaque_existential_1(v14);
  if (v16 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v14 + 32);
    swift_release();
    swift_release();
    swift_release();
LABEL_5:
    long long v20 = *(_OWORD *)v15;
    long long v21 = *(_OWORD *)(v15 + 16);
    long long v22 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v22;
    *(_OWORD *)unint64_t v14 = v20;
    *(_OWORD *)(v14 + 16) = v21;
    long long v23 = *(_OWORD *)(v15 + 64);
    long long v24 = *(_OWORD *)(v15 + 80);
    long long v25 = *(_OWORD *)(v15 + 96);
    *(void *)(v14 + 112) = *(void *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v24;
    *(_OWORD *)(v14 + 96) = v25;
    *(_OWORD *)(v14 + 64) = v23;
    return a1;
  }
  long long v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  __swift_destroy_boxed_opaque_existential_1(v14 + 32);
  long long v18 = *(_OWORD *)(v15 + 32);
  long long v19 = *(_OWORD *)(v15 + 48);
  *(void *)(v14 + 64) = *(void *)(v15 + 64);
  *(_OWORD *)(v14 + 32) = v18;
  *(_OWORD *)(v14 + 48) = v19;
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v15 + 72);
  swift_release();
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(v15 + 88);
  swift_release();
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(v15 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumn(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 40) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878C9E8CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TableColumn(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 40) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 40) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              long long v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *long long v19 = v20;
            }
            else
            {
              long long v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) == 0xFFFFFF88) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) == 0xFFFFFF88) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) != 0xFFFFFF88)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1878CA094);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for TableColumnSizingBehavior(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TableColumnSizingBehavior(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for TableColumnSizingBehavior(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for TableColumnSizingBehavior(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 32) = 1;
  }
  else
  {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnSizingBehavior()
{
  return &type metadata for TableColumnSizingBehavior;
}

uint64_t partial apply for closure #1 in TableColumn.init(comparator:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in TableColumn.init(comparator:content:label:)(a1, *(void *)(v2 + 24), *(void *)(v2 + 56), a2);
}

uint64_t outlined assign with take of SwiftUIAnySortComparator?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SwiftUIAnySortComparator?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SwiftUIAnySortComparator?()
{
  if (!lazy cache variable for type metadata for SwiftUIAnySortComparator?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?);
    }
  }
}

uint64_t type metadata accessor for TableColumn.MakeList()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableColumn.MakeLabel()
{
  return swift_getGenericMetadata();
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key;
  if (!lazy protocol witness table cache variable for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key);
  }
  return result;
}

void type metadata completion function for TableColumn.MakeList()
{
  type metadata accessor for UUID?(319, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for TableColumn.MakeList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 92);
    uint64_t v6 = (void *)(a1 + v5);
    unsigned int v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for TableColumn.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 92);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

uint64_t initializeWithCopy for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 92);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_DWORD *assignWithCopy for TableColumn.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 92);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t initializeWithTake for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 92);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 92);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878CACF0);
}

uint64_t sub_1878CACF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 92);
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878CADA4);
}

uint64_t sub_1878CADA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 92);
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

ValueMetadata *type metadata accessor for TableColumnSizingBehavior.SizeConstraints()
{
  return &type metadata for TableColumnSizingBehavior.SizeConstraints;
}

uint64_t base witness table accessor for _AttributeBody in TableColumn<A, B, C, D>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableColumn<A, B, C, D>.MakeLabel()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID?(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TableColumn.UnaryTableColumnList()
{
  return swift_getGenericMetadata();
}

uint64_t outlined copy of TableColumnCustomizationID?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return outlined copy of TableColumnCustomizationID.Base(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t type metadata completion function for TableColumn.UnaryTableColumnList()
{
  uint64_t result = type metadata accessor for TableColumn();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumn.UnaryTableColumnList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v10 + 120;
  uint64_t v12 = *(void *)(v9 + 64) + 7;
  unsigned int v13 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 58 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = v8;
    uint64_t v18 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    long long v19 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = v20[1];
    *long long v19 = *v20;
    v19[1] = v21;
    unint64_t v22 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v24 = *(unsigned char *)(v23 + 32);
    long long v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v25;
    *(unsigned char *)(v22 + 32) = v24;
    unint64_t v26 = ((unint64_t)v19 + 63) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = ((unint64_t)v20 + 63) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = *(void *)(v27 + 24);
    swift_retain();
    if (v28 < 0xFFFFFFFF)
    {
      long long v34 = *(_OWORD *)v27;
      long long v35 = *(_OWORD *)(v27 + 16);
      long long v36 = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
      *(_OWORD *)(v26 + 48) = v36;
      *(_OWORD *)unint64_t v26 = v34;
      *(_OWORD *)(v26 + 16) = v35;
      long long v37 = *(_OWORD *)(v27 + 64);
      long long v38 = *(_OWORD *)(v27 + 80);
      long long v39 = *(_OWORD *)(v27 + 96);
      *(void *)(v26 + 112) = *(void *)(v27 + 112);
      *(_OWORD *)(v26 + 80) = v38;
      *(_OWORD *)(v26 + 96) = v39;
      *(_OWORD *)(v26 + 64) = v37;
    }
    else
    {
      *(void *)(v26 + 24) = v28;
      (**(void (***)(unint64_t, unint64_t, unint64_t))(v28 - 8))(v26, v27, v28);
      uint64_t v29 = *(void *)(v27 + 56);
      *(void *)(v26 + 56) = v29;
      *(void *)(v26 + 64) = *(void *)(v27 + 64);
      (**(void (***)(uint64_t, uint64_t))(v29 - 8))(v26 + 32, v27 + 32);
      uint64_t v30 = *(void *)(v27 + 80);
      *(void *)(v26 + 72) = *(void *)(v27 + 72);
      *(void *)(v26 + 80) = v30;
      uint64_t v31 = *(void *)(v27 + 96);
      *(void *)(v26 + 88) = *(void *)(v27 + 88);
      *(void *)(v26 + 96) = v31;
      uint64_t v32 = *(void *)(v27 + 104);
      uint64_t v33 = *(void *)(v27 + 112);
      *(void *)(v26 + 104) = v32;
      *(void *)(v26 + 112) = v33;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    unint64_t v40 = ((unint64_t)a2 + v11) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v18, v40, v17);
    uint64_t v41 = (void *)((v12 + (((unint64_t)a1 + v11) & v18)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v42 = (void **)((v12 + v40) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v43 = *v42;
    *uint64_t v41 = *v42;
    unint64_t v44 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v45 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v44 = *(unsigned char *)v45;
    int v46 = *(unsigned __int8 *)(v45 + 40);
    id v47 = v43;
    if (v46 == 255)
    {
      long long v48 = *(_OWORD *)(v45 + 8);
      long long v49 = *(_OWORD *)(v45 + 24);
      *(unsigned char *)(v44 + 40) = *(unsigned char *)(v45 + 40);
      *(_OWORD *)(v44 + 8) = v48;
      *(_OWORD *)(v44 + 24) = v49;
    }
    else
    {
      char v50 = v46 & 1;
      uint64_t v51 = *(void *)(v45 + 8);
      uint64_t v52 = *(void *)(v45 + 16);
      uint64_t v53 = *(void *)(v45 + 24);
      uint64_t v54 = *(void *)(v45 + 32);
      outlined copy of TableColumnCustomizationID.Base(v51, v52, v53, v54, v50);
      *(void *)(v44 + 8) = v51;
      *(void *)(v44 + 16) = v52;
      *(void *)(v44 + 24) = v53;
      *(void *)(v44 + 32) = v54;
      *(unsigned char *)(v44 + 40) = v50;
    }
    *(void *)(v44 + 48) = *(void *)(v45 + 48);
    *(unsigned char *)(v44 + 56) = *(unsigned char *)(v45 + 56);
    *(unsigned char *)(v44 + 57) = *(unsigned char *)(v45 + 57);
  }
  return a1;
}

void destroy for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 40) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + 7;
  swift_release();
  unint64_t v5 = (((v4 + a1) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(v5);
    __swift_destroy_boxed_opaque_existential_1(v5 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  unint64_t v6 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (a1 + *(unsigned __int8 *)(v8 + 80) + v6 + 120) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, v7);
  unint64_t v11 = (id *)((*(void *)(v9 + 56) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);

  unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  int v13 = *(unsigned __int8 *)(v12 + 40);
  if (v13 != 255)
  {
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    uint64_t v16 = *(void *)(v12 + 24);
    uint64_t v17 = *(void *)(v12 + 32);
    outlined consume of TableColumnCustomizationID.Base(v14, v15, v16, v17, v13 & 1);
  }
}

uint64_t initializeWithCopy for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 32);
  long long v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v13;
  *(unsigned char *)(v10 + 32) = v12;
  unint64_t v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)(v15 + 24);
  swift_retain();
  if (v16 < 0xFFFFFFFF)
  {
    long long v22 = *(_OWORD *)v15;
    long long v23 = *(_OWORD *)(v15 + 16);
    long long v24 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v24;
    *(_OWORD *)unint64_t v14 = v22;
    *(_OWORD *)(v14 + 16) = v23;
    long long v25 = *(_OWORD *)(v15 + 64);
    long long v26 = *(_OWORD *)(v15 + 80);
    long long v27 = *(_OWORD *)(v15 + 96);
    *(void *)(v14 + 112) = *(void *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v26;
    *(_OWORD *)(v14 + 96) = v27;
    *(_OWORD *)(v14 + 64) = v25;
  }
  else
  {
    *(void *)(v14 + 24) = v16;
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v16 - 8))(v14, v15, v16);
    uint64_t v17 = *(void *)(v15 + 56);
    *(void *)(v14 + 56) = v17;
    *(void *)(v14 + 64) = *(void *)(v15 + 64);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(v14 + 32, v15 + 32);
    uint64_t v18 = *(void *)(v15 + 80);
    *(void *)(v14 + 72) = *(void *)(v15 + 72);
    *(void *)(v14 + 80) = v18;
    uint64_t v19 = *(void *)(v15 + 96);
    *(void *)(v14 + 88) = *(void *)(v15 + 88);
    *(void *)(v14 + 96) = v19;
    uint64_t v20 = *(void *)(v15 + 104);
    uint64_t v21 = *(void *)(v15 + 112);
    *(void *)(v14 + 104) = v20;
    *(void *)(v14 + 112) = v21;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v29 + 16;
  uint64_t v31 = *(unsigned __int8 *)(v29 + 80);
  unint64_t v32 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v31 + 120;
  unint64_t v33 = (v32 + a1) & ~v31;
  unint64_t v34 = (v32 + a2) & ~v31;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(v33, v34, v28);
  uint64_t v35 = *(void *)(v30 + 48) + 7;
  long long v36 = (void *)((v35 + v33) & 0xFFFFFFFFFFFFFFF8);
  long long v37 = (void **)((v35 + v34) & 0xFFFFFFFFFFFFFFF8);
  long long v38 = *v37;
  *long long v36 = *v37;
  unint64_t v39 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v39 = *(unsigned char *)v40;
  int v41 = *(unsigned __int8 *)(v40 + 40);
  id v42 = v38;
  if (v41 == 255)
  {
    long long v43 = *(_OWORD *)(v40 + 8);
    long long v44 = *(_OWORD *)(v40 + 24);
    *(unsigned char *)(v39 + 40) = *(unsigned char *)(v40 + 40);
    *(_OWORD *)(v39 + 8) = v43;
    *(_OWORD *)(v39 + 24) = v44;
  }
  else
  {
    char v45 = v41 & 1;
    uint64_t v46 = *(void *)(v40 + 8);
    uint64_t v47 = *(void *)(v40 + 16);
    uint64_t v48 = *(void *)(v40 + 24);
    uint64_t v49 = *(void *)(v40 + 32);
    outlined copy of TableColumnCustomizationID.Base(v46, v47, v48, v49, v45);
    *(void *)(v39 + 8) = v46;
    *(void *)(v39 + 16) = v47;
    *(void *)(v39 + 24) = v48;
    *(void *)(v39 + 32) = v49;
    *(unsigned char *)(v39 + 40) = v45;
  }
  *(void *)(v39 + 48) = *(void *)(v40 + 48);
  *(unsigned char *)(v39 + 56) = *(unsigned char *)(v40 + 56);
  *(unsigned char *)(v39 + 57) = *(unsigned char *)(v40 + 57);
  return a1;
}

uint64_t assignWithCopy for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  long long v13 = *(_OWORD *)(v11 + 16);
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
  *(_OWORD *)unint64_t v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  unint64_t v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)(v15 + 24);
  if (*(void *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *(void *)(v14 + 24) = v16;
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v20 = *(void *)(v15 + 56);
      *(void *)(v14 + 56) = v20;
      *(void *)(v14 + 64) = *(void *)(v15 + 64);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v14 + 32, v15 + 32);
      uint64_t v21 = *(void *)(v15 + 80);
      *(void *)(v14 + 72) = *(void *)(v15 + 72);
      *(void *)(v14 + 80) = v21;
      uint64_t v22 = *(void *)(v15 + 96);
      *(void *)(v14 + 88) = *(void *)(v15 + 88);
      *(void *)(v14 + 96) = v22;
      uint64_t v23 = *(void *)(v15 + 104);
      uint64_t v24 = *(void *)(v15 + 112);
      *(void *)(v14 + 104) = v23;
      *(void *)(v14 + 112) = v24;
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v16 >= 0xFFFFFFFF)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v14, (uint64_t *)v15);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + 32), (uint64_t *)(v15 + 32));
      uint64_t v17 = *(void *)(v15 + 80);
      *(void *)(v14 + 72) = *(void *)(v15 + 72);
      *(void *)(v14 + 80) = v17;
      swift_retain();
      swift_release();
      uint64_t v18 = *(void *)(v15 + 96);
      *(void *)(v14 + 88) = *(void *)(v15 + 88);
      *(void *)(v14 + 96) = v18;
      swift_retain();
      swift_release();
      uint64_t v19 = *(void *)(v15 + 112);
      *(void *)(v14 + 104) = *(void *)(v15 + 104);
      *(void *)(v14 + 112) = v19;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(v14);
    __swift_destroy_boxed_opaque_existential_1(v14 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  long long v25 = *(_OWORD *)v15;
  long long v26 = *(_OWORD *)(v15 + 16);
  long long v27 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v27;
  *(_OWORD *)unint64_t v14 = v25;
  *(_OWORD *)(v14 + 16) = v26;
  long long v28 = *(_OWORD *)(v15 + 64);
  long long v29 = *(_OWORD *)(v15 + 80);
  long long v30 = *(_OWORD *)(v15 + 96);
  *(void *)(v14 + 112) = *(void *)(v15 + 112);
  *(_OWORD *)(v14 + 80) = v29;
  *(_OWORD *)(v14 + 96) = v30;
  *(_OWORD *)(v14 + 64) = v28;
LABEL_8:
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = v32 + 24;
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  unint64_t v35 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v34 + 120;
  unint64_t v36 = (v35 + a1) & ~v34;
  unint64_t v37 = (v35 + a2) & ~v34;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 24))(v36, v37, v31);
  uint64_t v38 = *(void *)(v33 + 40) + 7;
  unint64_t v39 = (void **)((v38 + v36) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v40 = (void **)((v38 + v37) & 0xFFFFFFFFFFFFFFF8);
  int v41 = *v40;
  id v42 = *v39;
  *unint64_t v39 = *v40;
  id v43 = v41;

  unint64_t v44 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v44 = *(unsigned char *)v45;
  uint64_t v46 = (long long *)(v44 + 8);
  uint64_t v47 = (long long *)(v45 + 8);
  int v48 = *(unsigned __int8 *)(v45 + 40);
  if (*(unsigned __int8 *)(v44 + 40) == 255)
  {
    if (v48 == 255)
    {
      long long v51 = *v47;
      long long v52 = *(_OWORD *)(v45 + 24);
      *(unsigned char *)(v44 + 40) = *(unsigned char *)(v45 + 40);
      *uint64_t v46 = v51;
      *(_OWORD *)(v44 + 24) = v52;
    }
    else
    {
      char v63 = v48 & 1;
      uint64_t v64 = *(void *)(v45 + 8);
      uint64_t v65 = *(void *)(v45 + 16);
      uint64_t v66 = *(void *)(v45 + 24);
      uint64_t v67 = *(void *)(v45 + 32);
      outlined copy of TableColumnCustomizationID.Base(v64, v65, v66, v67, v48 & 1);
      *(void *)(v44 + 8) = v64;
      *(void *)(v44 + 16) = v65;
      *(void *)(v44 + 24) = v66;
      *(void *)(v44 + 32) = v67;
      *(unsigned char *)(v44 + 40) = v63;
    }
  }
  else if (v48 == 255)
  {
    outlined destroy of TableColumnCustomizationID((uint64_t)v46);
    char v49 = *(unsigned char *)(v45 + 40);
    long long v50 = *(_OWORD *)(v45 + 24);
    *uint64_t v46 = *v47;
    *(_OWORD *)(v44 + 24) = v50;
    *(unsigned char *)(v44 + 40) = v49;
  }
  else
  {
    char v53 = v48 & 1;
    uint64_t v54 = *(void *)(v45 + 8);
    uint64_t v55 = *(void *)(v45 + 16);
    uint64_t v56 = *(void *)(v45 + 24);
    uint64_t v57 = *(void *)(v45 + 32);
    outlined copy of TableColumnCustomizationID.Base(v54, v55, v56, v57, v48 & 1);
    uint64_t v58 = *(void *)(v44 + 8);
    uint64_t v59 = *(void *)(v44 + 16);
    uint64_t v60 = *(void *)(v44 + 24);
    uint64_t v61 = *(void *)(v44 + 32);
    char v62 = *(unsigned char *)(v44 + 40);
    *(void *)(v44 + 8) = v54;
    *(void *)(v44 + 16) = v55;
    *(void *)(v44 + 24) = v56;
    *(void *)(v44 + 32) = v57;
    *(unsigned char *)(v44 + 40) = v53;
    outlined consume of TableColumnCustomizationID.Base(v58, v59, v60, v61, v62);
  }
  *(void *)(v44 + 48) = *(void *)(v45 + 48);
  *(unsigned char *)(v44 + 56) = *(unsigned char *)(v45 + 56);
  *(unsigned char *)(v44 + 57) = *(unsigned char *)(v45 + 57);
  return a1;
}

uint64_t outlined destroy of TableColumnCustomizationID(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v10;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  unint64_t v13 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  long long v16 = *(_OWORD *)(v14 + 80);
  long long v15 = *(_OWORD *)(v14 + 96);
  long long v17 = *(_OWORD *)(v14 + 64);
  *(void *)(v13 + 112) = *(void *)(v14 + 112);
  *(_OWORD *)(v13 + 80) = v16;
  *(_OWORD *)(v13 + 96) = v15;
  *(_OWORD *)(v13 + 64) = v17;
  long long v18 = *(_OWORD *)(v14 + 16);
  long long v19 = *(_OWORD *)(v14 + 32);
  long long v20 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v20;
  unint64_t v21 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = v23 + 32;
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = v21 + v25 + 120;
  uint64_t v27 = (v26 + a1) & ~v25;
  uint64_t v28 = (v26 + a2) & ~v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v27, v28, v22);
  uint64_t v29 = *(void *)(v24 + 32) + 7;
  long long v30 = (void *)((v29 + v27) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)((v29 + v28) & 0xFFFFFFFFFFFFFFF8);
  *long long v30 = *v31;
  uint64_t v32 = (_OWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (_OWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v34 = *(_OWORD *)((char *)v33 + 42);
  long long v36 = v33[1];
  long long v35 = v33[2];
  *uint64_t v32 = *v33;
  v32[1] = v36;
  uint64_t v32[2] = v35;
  *(_OWORD *)((char *)v32 + 42) = v34;
  return a1;
}

uint64_t assignWithTake for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)v10;
  long long v12 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  unint64_t v13 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 24) >= 0xFFFFFFFFuLL)
  {
    unint64_t v15 = *(void *)(v14 + 24);
    __swift_destroy_boxed_opaque_existential_1(v13);
    if (v15 >= 0xFFFFFFFF)
    {
      long long v16 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v16;
      __swift_destroy_boxed_opaque_existential_1(v13 + 32);
      long long v17 = *(_OWORD *)(v14 + 32);
      long long v18 = *(_OWORD *)(v14 + 48);
      *(void *)(v13 + 64) = *(void *)(v14 + 64);
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)(v13 + 48) = v18;
      *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
      swift_release();
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
      swift_release();
      *(_OWORD *)(v13 + 104) = *(_OWORD *)(v14 + 104);
      swift_release();
      goto LABEL_6;
    }
    __swift_destroy_boxed_opaque_existential_1(v13 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  long long v19 = *(_OWORD *)v14;
  long long v20 = *(_OWORD *)(v14 + 16);
  long long v21 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v21;
  *(_OWORD *)unint64_t v13 = v19;
  *(_OWORD *)(v13 + 16) = v20;
  long long v22 = *(_OWORD *)(v14 + 64);
  long long v23 = *(_OWORD *)(v14 + 80);
  long long v24 = *(_OWORD *)(v14 + 96);
  *(void *)(v13 + 112) = *(void *)(v14 + 112);
  *(_OWORD *)(v13 + 80) = v23;
  *(_OWORD *)(v13 + 96) = v24;
  *(_OWORD *)(v13 + 64) = v22;
LABEL_6:
  unint64_t v25 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = v27 + 40;
  uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v30 = v25 + v29 + 120;
  uint64_t v31 = (v30 + a1) & ~v29;
  uint64_t v32 = (v30 + a2) & ~v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40))(v31, v32, v26);
  uint64_t v33 = *(void *)(v28 + 24) + 7;
  long long v34 = (void **)((v33 + v31) & 0xFFFFFFFFFFFFFFF8);
  long long v35 = (void **)((v33 + v32) & 0xFFFFFFFFFFFFFFF8);
  long long v36 = *v34;
  *long long v34 = *v35;

  unint64_t v37 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v37 = *(unsigned char *)v38;
  unint64_t v39 = (long long *)(v37 + 8);
  unint64_t v40 = (long long *)(v38 + 8);
  int v41 = *(unsigned __int8 *)(v37 + 40);
  if (v41 == 255)
  {
    long long v42 = *v40;
    long long v43 = *(_OWORD *)(v38 + 24);
    *(unsigned char *)(v37 + 40) = *(unsigned char *)(v38 + 40);
    *unint64_t v39 = v42;
    *(_OWORD *)(v37 + 24) = v43;
  }
  else
  {
    int v44 = *(unsigned __int8 *)(v38 + 40);
    if (v44 == 255)
    {
      outlined destroy of TableColumnCustomizationID(v37 + 8);
      char v45 = *(unsigned char *)(v38 + 40);
      long long v46 = *(_OWORD *)(v38 + 24);
      *unint64_t v39 = *v40;
      *(_OWORD *)(v37 + 24) = v46;
      *(unsigned char *)(v37 + 40) = v45;
    }
    else
    {
      uint64_t v47 = *(void *)(v37 + 8);
      uint64_t v48 = *(void *)(v37 + 16);
      uint64_t v49 = *(void *)(v37 + 24);
      uint64_t v50 = *(void *)(v37 + 32);
      long long v51 = *(_OWORD *)(v38 + 24);
      *(_OWORD *)(v37 + 8) = *(_OWORD *)(v38 + 8);
      *(_OWORD *)(v37 + 24) = v51;
      *(unsigned char *)(v37 + 40) = v44 & 1;
      outlined consume of TableColumnCustomizationID.Base(v47, v48, v49, v50, v41 & 1);
    }
  }
  *(void *)(v37 + 48) = *(void *)(v38 + 48);
  *(unsigned char *)(v37 + 56) = *(unsigned char *)(v38 + 56);
  *(unsigned char *)(v37 + 57) = *(unsigned char *)(v38 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumn.UnaryTableColumnList(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (!a2) {
    return 0;
  }
  unint64_t v15 = ((((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v14 + 120;
  if (v12 < a2)
  {
    unint64_t v16 = ((((*(void *)(*(void *)(v9 - 8) + 64) + (v15 & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 58;
    if (v16 <= 3) {
      unsigned int v17 = ((a2 - v12 + 0xFFFF) >> (8 * v16)) + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v16);
        if (!*((unsigned char *)a1 + v16)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v16);
        if (*(unsigned __int16 *)((char *)a1 + v16)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878CC414);
      case 4:
        int v20 = *(_DWORD *)((char *)a1 + v16);
        if (!v20) {
          break;
        }
LABEL_25:
        int v22 = (v20 - 1) << (8 * v16);
        if (v16 <= 3)
        {
          int v23 = *a1;
        }
        else
        {
          int v22 = 0;
          int v23 = *(_DWORD *)a1;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v8 >= v11)
  {
    if (v7 < 0x7FFFFFFF)
    {
      unint64_t v26 = *(void *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v26 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      return (v26 + 1);
    }
    else
    {
      unint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
      return v25(a1, v7, v5);
    }
  }
  else
  {
    long long v24 = *(uint64_t (**)(unint64_t))(v10 + 48);
    return v24(((unint64_t)a1 + v15) & ~v14);
  }
}

void storeEnumTagSinglePayload for TableColumn.UnaryTableColumnList(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 40);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v27 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= v10) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(void *)(v8 + 64);
  size_t v15 = ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120;
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  size_t v17 = ((((*(void *)(v11 + 64) + ((v15 + v16) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 58;
  if (v13 >= a3)
  {
    int v20 = 0;
    if (v13 >= a2)
    {
LABEL_20:
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_54;
        case 4:
          *(unsigned int *)((char *)a1 + v17) = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v10 >= v12)
            {
              if (v10 >= a2)
              {
                if (v9 < 0x7FFFFFFF)
                {
                  unint64_t v25 = (void *)(((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
                  if ((a2 & 0x80000000) != 0)
                  {
                    uint64_t v26 = a2 ^ 0x80000000;
                    v25[1] = 0;
                  }
                  else
                  {
                    uint64_t v26 = (a2 - 1);
                  }
                  *unint64_t v25 = v26;
                }
                else
                {
                  long long v24 = *(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(v27 + 56);
                  v24(a1, a2, v9, v7);
                }
              }
              else if (((((v14 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) != 0xFFFFFF88)
              {
                bzero(a1, v15);
                *a1 = ~v10 + a2;
              }
            }
            else
            {
              int v23 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
              v23(((unint64_t)a1 + v15 + v16) & ~v16, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v17 <= 3) {
      unsigned int v18 = ((a3 - v13 + 0xFFFF) >> (8 * v17)) + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v13 >= a2) {
      goto LABEL_20;
    }
  }
  unsigned int v21 = ~v13 + a2;
  bzero(a1, v17);
  if (v17 <= 3) {
    int v22 = (v21 >> (8 * v17)) + 1;
  }
  else {
    int v22 = 1;
  }
  if (v17 > 3) {
    *a1 = v21;
  }
  else {
    *(_WORD *)a1 = v21;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v22;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v22;
      break;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x1878CC75CLL);
    case 4:
      *(unsigned int *)((char *)a1 + v17) = v22;
      break;
    default:
      return;
  }
}

uint64_t outlined consume of TableColumnCustomizationID?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return outlined consume of TableColumnCustomizationID.Base(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

void CustomHoverEffect.hoverEffect<A>(_:in:isEnabled:)()
{
}

uint64_t sub_1878CC7C4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1878CC7CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.textSizing.getter();
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1878CC818()
{
  return EnvironmentValues.textSizing.setter();
}

uint64_t sub_1878CC85C()
{
  return swift_getWitnessTable();
}

uint64_t static PlaybackButtonStyle<>.pill(dateStyle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  char v3 = *(unsigned char *)(result + 16);
  *(unsigned char *)a2 = *(unsigned char *)result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

void PillPlaybackButtonStyle._storage.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 1);
  unsigned __int8 v3 = v1[16];
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
}

void protocol witness for PlaybackButtonStyle._storage.getter in conformance PillPlaybackButtonStyle(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 1);
  unsigned __int8 v3 = v1[16];
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
}

uint64_t getEnumTagSinglePayload for PillPlaybackButtonStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 16) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PillPlaybackButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PillPlaybackButtonStyle()
{
  return &type metadata for PillPlaybackButtonStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for PillPlaybackButtonStyleBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    int v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v8);
    *int v4 = v7;
    *((unsigned char *)v4 + 8) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    unsigned int v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)(a2 + v9);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for Date();
      unsigned int v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      v18(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    int v19 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v20 = v19[5];
    unsigned int v21 = &v10[v20];
    int v22 = &v11[v20];
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 2, v23))
    {
      uint64_t v25 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 2, v23);
    }
    uint64_t v26 = v19[6];
    uint64_t v27 = &v10[v26];
    uint64_t v28 = &v11[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    v10[v19[7]] = v11[v19[7]];
    v10[v19[8]] = v11[v19[8]];
    *(_OWORD *)&v10[v19[9]] = *(_OWORD *)&v11[v19[9]];
    uint64_t v30 = v19[10];
    uint64_t v31 = &v10[v30];
    uint64_t v32 = &v11[v30];
    uint64_t v33 = *(void *)&v11[v30];
    uint64_t v34 = *(void *)&v11[v30 + 8];
    char v35 = v32[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
    *(void *)uint64_t v31 = v33;
    *((void *)v31 + 1) = v34;
    unsigned char v31[16] = v35;
    uint64_t v36 = *((void *)v32 + 5);
    long long v37 = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 24) = v37;
    *((void *)v31 + 5) = v36;
    uint64_t v38 = *(int *)(a3 + 24);
    unint64_t v39 = (char *)v4 + v38;
    uint64_t v40 = a2 + v38;
    v39[16] = *(unsigned char *)(v40 + 16);
    *(_OWORD *)unint64_t v39 = *(_OWORD *)v40;
    id v41 = (id)v37;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for Date();
    char v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  uint64_t v9 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v10 = v4 + *(int *)(v9 + 20);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v9, v10, v15);
    v16(&v9[*(int *)(v12 + 36)], &v10[*(int *)(v12 + 36)], v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  uint64_t v17 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v18 = v17[5];
  int v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 2, v21))
  {
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 2, v21);
  }
  uint64_t v24 = v17[6];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  v9[v17[7]] = v10[v17[7]];
  v9[v17[8]] = v10[v17[8]];
  *(_OWORD *)&v9[v17[9]] = *(_OWORD *)&v10[v17[9]];
  uint64_t v28 = v17[10];
  uint64_t v29 = &v9[v28];
  uint64_t v30 = &v10[v28];
  uint64_t v31 = *(void *)&v10[v28];
  uint64_t v32 = *(void *)&v10[v28 + 8];
  char v33 = v30[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v31, v32, v33);
  *(void *)uint64_t v29 = v31;
  *((void *)v29 + 1) = v32;
  unsigned char v29[16] = v33;
  uint64_t v34 = *((void *)v30 + 5);
  long long v35 = *(_OWORD *)(v30 + 24);
  *(_OWORD *)(v29 + 24) = v35;
  *((void *)v29 + 5) = v34;
  uint64_t v36 = *(int *)(a3 + 24);
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  *(unsigned char *)(v37 + 16) = *(unsigned char *)(v38 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  id v39 = (id)v35;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for PillPlaybackButtonStyleBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v60 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)(a2 + v10);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v11, 1, v13);
  int v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v56 = type metadata accessor for Date();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 24);
  v57(v11, v12, v56);
  v57(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v56);
LABEL_7:
  uint64_t v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = &v11[v23];
  uint64_t v25 = &v12[v23];
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 2, v26);
  int v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  uint64_t v32 = v22[6];
  char v33 = &v11[v32];
  uint64_t v34 = &v12[v32];
  *(void *)char v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  uint64_t v35 = v22[9];
  uint64_t v36 = &v11[v35];
  uint64_t v37 = &v12[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  uint64_t v38 = v22[10];
  id v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  uint64_t v41 = *(void *)&v12[v38];
  uint64_t v42 = *(void *)&v12[v38 + 8];
  char v43 = v40[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v41, v42, v43);
  uint64_t v44 = *(void *)v39;
  uint64_t v45 = *((void *)v39 + 1);
  char v46 = v39[16];
  *(void *)id v39 = v41;
  *((void *)v39 + 1) = v42;
  v39[16] = v43;
  outlined consume of Environment<AppIntentExecutor?>.Content(v44, v45, v46);
  uint64_t v47 = (void *)*((void *)v40 + 3);
  uint64_t v48 = (void *)*((void *)v39 + 3);
  *((void *)v39 + 3) = v47;
  id v49 = v47;

  uint64_t v50 = *((void *)v40 + 5);
  *((void *)v39 + 4) = *((void *)v40 + 4);
  *((void *)v39 + 5) = v50;
  swift_retain();
  swift_release();
  uint64_t v51 = *(int *)(v58 + 24);
  uint64_t result = v60;
  uint64_t v53 = (uint64_t)v60 + v51;
  uint64_t v54 = v59 + v51;
  *(unsigned char *)uint64_t v53 = *(unsigned char *)v54;
  uint64_t v55 = *(void *)(v54 + 8);
  *(unsigned char *)(v53 + 16) = *(unsigned char *)(v54 + 16);
  *(void *)(v53 + 8) = v55;
  return result;
}

uint64_t initializeWithTake for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  char v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v7, v8, v13);
    v14(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  uint64_t v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v16 = v15[5];
  int v17 = &v7[v16];
  int v18 = &v8[v16];
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
  {
    uint64_t v21 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
  }
  *(_OWORD *)&v7[v15[6]] = *(_OWORD *)&v8[v15[6]];
  v7[v15[7]] = v8[v15[7]];
  v7[v15[8]] = v8[v15[8]];
  *(_OWORD *)&v7[v15[9]] = *(_OWORD *)&v8[v15[9]];
  uint64_t v22 = v15[10];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  return a1;
}

uint64_t *assignWithTake for PillPlaybackButtonStyleBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v10 = *(int *)(a3 + 20);
  long long v52 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v11, 1, v13);
  int v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v48 = type metadata accessor for Date();
  id v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40);
  v49(v11, v12, v48);
  v49(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v48);
LABEL_7:
  uint64_t v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = &v11[v23];
  long long v25 = &v12[v23];
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 2, v26);
  int v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  uint64_t v32 = v22[6];
  char v33 = &v11[v32];
  uint64_t v34 = &v12[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)char v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  *(_OWORD *)&v11[v22[9]] = *(_OWORD *)&v12[v22[9]];
  uint64_t v37 = v22[10];
  uint64_t v38 = &v11[v37];
  id v39 = &v12[v37];
  LOBYTE(v37) = v12[v37 + 16];
  uint64_t v40 = *(void *)v38;
  uint64_t v41 = *((void *)v38 + 1);
  char v42 = v38[16];
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  char v38[16] = v37;
  outlined consume of Environment<AppIntentExecutor?>.Content(v40, v41, v42);
  char v43 = (void *)*((void *)v38 + 3);
  *((void *)v38 + 3) = *((void *)v39 + 3);

  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  swift_release();
  uint64_t v44 = *(int *)(v50 + 24);
  uint64_t result = v52;
  uint64_t v46 = (uint64_t)v52 + v44;
  uint64_t v47 = (uint64_t)v51 + v44;
  *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
  *(void *)(v46 + 8) = *(void *)(v47 + 8);
  *(unsigned char *)(v46 + 16) = *(unsigned char *)(v47 + 16);
  return result;
}

uint64_t getEnumTagSinglePayload for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878CDCE0);
}

uint64_t sub_1878CDCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878CDD9C);
}

uint64_t sub_1878CDD9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PillPlaybackButtonStyleBody()
{
  uint64_t result = type metadata singleton initialization cache for PillPlaybackButtonStyleBody;
  if (!type metadata singleton initialization cache for PillPlaybackButtonStyleBody) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PillPlaybackButtonStyleBody()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PillPlaybackButtonStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PillPlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v68 = a1;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v66 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for PlaybackButton.Configuration(0) - 8;
  MEMORY[0x1F4188790](v64);
  uint64_t v65 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedCon(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v63 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _Bl(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Caps(0);
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent(0);
  uint64_t v22 = v21 - 8;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v62 = (uint64_t)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = static VerticalAlignment.center.getter();
  *((void *)v12 + 1) = 0;
  v12[16] = 0;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, ();
  closure #1 in PillPlaybackButtonStyleBody.body.getter((uint64_t)&v12[*(int *)(v27 + 44)]);
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>,);
  uint64_t v36 = &v16[*(int *)(v14 + 44)];
  *uint64_t v36 = 8;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>,);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _Bl);
  uint64_t v37 = &v20[*(int *)(v18 + 44)];
  long long v38 = v72;
  *(_OWORD *)uint64_t v37 = v71;
  *((_OWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 2) = v73;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _Bl);
  PillPlaybackButtonStyleBody.platter.getter((uint64_t)v69);
  long long v80 = v69[6];
  long long v81 = v69[7];
  uint64_t v82 = v70;
  long long v76 = v69[2];
  long long v77 = v69[3];
  long long v78 = v69[4];
  long long v79 = v69[5];
  long long v74 = v69[0];
  long long v75 = v69[1];
  uint64_t v39 = static Alignment.center.getter();
  uint64_t v41 = v40;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v20, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Caps);
  char v42 = &v24[*(int *)(v22 + 44)];
  long long v43 = v81;
  *((_OWORD *)v42 + 6) = v80;
  *((_OWORD *)v42 + 7) = v43;
  uint64_t v44 = v82;
  long long v45 = v77;
  *((_OWORD *)v42 + 2) = v76;
  *((_OWORD *)v42 + 3) = v45;
  long long v46 = v79;
  *((_OWORD *)v42 + 4) = v78;
  *((_OWORD *)v42 + 5) = v46;
  long long v47 = v75;
  *(_OWORD *)char v42 = v74;
  *((_OWORD *)v42 + 1) = v47;
  *((void *)v42 + 16) = v44;
  *((void *)v42 + 17) = v39;
  *((void *)v42 + 18) = v41;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Caps);
  uint64_t v48 = type metadata accessor for PillPlaybackButtonStyleBody();
  uint64_t v49 = v2 + *(int *)(v48 + 20);
  uint64_t v50 = v64;
  uint64_t v51 = v62;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v62, 0.0, 1, 0.0, 1, *(void *)(v49 + *(int *)(v64 + 44)), *(void *)(v49 + *(int *)(v64 + 44) + 8));
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent);
  long long v52 = (unsigned __int8 *)(v2 + *(int *)(v48 + 24));
  uint64_t v53 = *v52;
  uint64_t v54 = *((void *)v52 + 1);
  LOBYTE(v48) = v52[16];
  uint64_t v55 = v65;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v49, v65, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v56 = v66;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v55 + *(int *)(v50 + 28), v66, type metadata accessor for PlaybackButton.State);
  uint64_t v57 = v67;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v55, v67, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  _sSNy10Foundation4DateVGWOhTm_0(v55, type metadata accessor for PlaybackButton.Configuration);
  uint64_t v58 = v63;
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v56, v63, type metadata accessor for PlaybackButton.State);
  type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedCon(0);
  uint64_t v60 = v58 + *(int *)(v59 + 36);
  *(void *)uint64_t v60 = v53;
  *(void *)(v60 + 8) = v54;
  *(unsigned char *)(v60 + 16) = v48;
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v57, v58 + *(int *)(v59 + 40), (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  specialized AccessibilityPlaybackButtonModifier.body(content:)(v51, v68);
  _sSNy10Foundation4DateVGWOhTm_0(v58, (uint64_t (*)(void))type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedCon);
  return _sSNy10Foundation4DateVGWOhTm_0(v51, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent);
}

uint64_t closure #1 in PillPlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v83 = a1;
  type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = &v75[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v75[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v75[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>(0);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v88 = &v75[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v89 = &v75[-v16];
  PillPlaybackButtonStyleBody.playbackStateImage.getter(&v120);
  unsigned long long v102 = v126;
  unsigned long long v103 = v127;
  unsigned long long v104 = v128;
  uint64_t v105 = v129;
  unsigned long long v100 = v124;
  unsigned long long v101 = v125;
  unsigned long long v95 = v120;
  unsigned long long v96 = v121;
  unsigned long long v98 = v123[0];
  unsigned long long v99 = v123[1];
  unsigned long long v97 = v122;
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  unsigned __int8 v93 = 0;
  PillPlaybackButtonStyleBody.resolvedProgressView.getter((uint64_t)v3);
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v3, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?);
  uint64_t v33 = &v7[*(int *)(v5 + 44)];
  *uint64_t v33 = 2;
  *((void *)v33 + 1) = v26;
  *((void *)v33 + 2) = v28;
  *((void *)v33 + 3) = v30;
  *((void *)v33 + 4) = v32;
  v33[40] = 0;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?);
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>);
  char v42 = &v11[*(int *)(v9 + 44)];
  *char v42 = 8;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  long long v43 = v88;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v11, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>);
  uint64_t v44 = &v43[*(int *)(v13 + 44)];
  long long v45 = v91;
  *uint64_t v44 = v90;
  v44[1] = v45;
  v44[2] = v92;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>);
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_0((uint64_t)v43, (uint64_t)v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  PillPlaybackButtonStyleBody.label.getter((uint64_t *)&v120);
  unsigned long long v48 = v120;
  uint64_t v47 = v48 >> 64;
  unint64_t v46 = v48;
  *(void *)&long long v86 = v120;
  long long v49 = v121;
  char v50 = BYTE2(v122);
  LODWORD(v87) = BYTE2(v122);
  uint64_t v51 = (unsigned __int16)v122;
  uint64_t v52 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  unsigned long long v106 = __PAIR128__(v47, v46);
  unsigned long long v107 = v49;
  LOWORD(v108) = v51;
  BYTE2(v108) = v50;
  *((void *)&v108 + 1) = KeyPath;
  *(void *)&unsigned long long v109 = v52;
  static Font.Weight.semibold.getter();
  type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(v86, v47, v49, *((uint64_t *)&v49 + 1), v51, v87);
  swift_release();
  swift_release();
  unsigned long long v54 = v120;
  long long v55 = v121;
  int v80 = BYTE2(v122);
  uint64_t v84 = *(void *)&v123[0];
  uint64_t v85 = *((void *)&v122 + 1);
  uint64_t v81 = *((void *)&v123[1] + 1);
  long long v86 = *(_OWORD *)((char *)v123 + 8);
  uint64_t v56 = (unsigned __int16)v122;
  uint64_t v79 = static Color.white.getter();
  uint64_t v87 = swift_getKeyPath();
  int v57 = v93;
  uint64_t v58 = v88;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v89, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  unsigned long long v114 = v103;
  unsigned long long v115 = v104;
  unsigned long long v110 = v99;
  unsigned long long v111 = v100;
  *(void *)&unsigned long long v116 = v105;
  unsigned long long v112 = v101;
  unsigned long long v113 = v102;
  unsigned long long v106 = v95;
  unsigned long long v107 = v96;
  unsigned long long v108 = v97;
  unsigned long long v109 = v98;
  BYTE8(v116) = 2;
  *(_DWORD *)((char *)&v116 + 9) = *(_DWORD *)v94;
  HIDWORD(v116) = *(_DWORD *)&v94[3];
  *(void *)&unsigned long long v117 = v18;
  *((void *)&v117 + 1) = v20;
  *(void *)&unsigned long long v118 = v22;
  *((void *)&v118 + 1) = v24;
  int v82 = v57;
  char v119 = v57;
  uint64_t v59 = (unsigned long long *)v83;
  *(unsigned char *)(v83 + 208) = v57;
  unsigned long long v60 = v113;
  v59[6] = v112;
  v59[7] = v60;
  unsigned long long v61 = v115;
  v59[8] = v114;
  v59[9] = v61;
  unsigned long long v62 = v109;
  v59[2] = v108;
  v59[3] = v62;
  unsigned long long v63 = v111;
  v59[4] = v110;
  v59[5] = v63;
  unsigned long long v64 = v107;
  *uint64_t v59 = v106;
  v59[1] = v64;
  unsigned long long v65 = v118;
  unsigned long long v66 = v116;
  v59[11] = v117;
  v59[12] = v65;
  v59[10] = v66;
  uint64_t v67 = v59;
  type metadata accessor for (ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifie(0, &lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _A, type metadata accessor for ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>);
  uint64_t v69 = v68;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v58, (uint64_t)v67 + *(int *)(v68 + 48), (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  uint64_t v70 = (char *)v67 + *(int *)(v69 + 64);
  uint64_t v77 = *((void *)&v54 + 1);
  uint64_t v78 = v54;
  *(_OWORD *)uint64_t v70 = v54;
  *((_OWORD *)v70 + 1) = v55;
  uint64_t v71 = v56;
  unsigned int v76 = v56;
  *((_WORD *)v70 + 16) = v56;
  LOBYTE(v69) = v80;
  v70[34] = v80;
  uint64_t v72 = v84;
  *((void *)v70 + 5) = v85;
  *((void *)v70 + 6) = v72;
  *(_OWORD *)(v70 + 56) = v86;
  uint64_t v73 = v79;
  *((void *)v70 + 9) = v81;
  *((void *)v70 + 10) = v73;
  *((void *)v70 + 11) = v87;
  *((void *)v70 + 12) = 1;
  v70[104] = 0;
  outlined retain of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>((uint64_t)&v106);
  outlined copy of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v71, v69);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(v78, v77, v55, *((uint64_t *)&v55 + 1), v76, v69);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v88, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  unsigned long long v127 = v103;
  unsigned long long v128 = v104;
  v123[1] = v99;
  unsigned long long v124 = v100;
  uint64_t v129 = v105;
  unsigned long long v125 = v101;
  unsigned long long v126 = v102;
  unsigned long long v120 = v95;
  long long v121 = v96;
  unsigned long long v122 = v97;
  v123[0] = v98;
  char v130 = 2;
  *(_DWORD *)uint64_t v131 = *(_DWORD *)v94;
  *(_DWORD *)&v131[3] = *(_DWORD *)&v94[3];
  uint64_t v132 = v18;
  uint64_t v133 = v20;
  uint64_t v134 = v22;
  uint64_t v135 = v24;
  char v136 = v82;
  return outlined release of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>((uint64_t)&v120);
}

double PillPlaybackButtonStyleBody.playbackStateImage.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v52 = a1;
  type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0();
  *(void *)&long long v56 = v2;
  *(void *)&long long v55 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>();
  *(void *)&long long v57 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v53 = (uint64_t)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unsigned long long v54 = (char *)&KeyPath - v8;
  uint64_t v9 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v9);
  uint64_t v59 = (uint64_t)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&KeyPath - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&KeyPath - v15;
  uint64_t v61 = v1 + *(int *)(type metadata accessor for PillPlaybackButtonStyleBody() + 20);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v61, (uint64_t)v16, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v16[v9[5]] = 0x4000000000000000;
  *(void *)&v16[v9[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v16[v9[7]] = 0x3FA999999999999ALL;
  uint64_t v58 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  unsigned int v17 = v16[v58[7]];
  uint64_t v18 = (uint64_t *)&v16[v58[6]];
  if (v17 >= 2) {
    uint64_t v19 = 0x69662E6573756170;
  }
  else {
    uint64_t v19 = 0x6C69662E79616C70;
  }
  if (v17 >= 2) {
    uint64_t v20 = 0xEA00000000006C6CLL;
  }
  else {
    uint64_t v20 = 0xE90000000000006CLL;
  }
  if (v18[1])
  {
    uint64_t v19 = *v18;
    uint64_t v20 = swift_bridgeObjectRetain();
  }
  unsigned long long v60 = type metadata accessor for PlaybackButton.Specs;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  type metadata accessor for _AnimationModifier<PlaybackButton.Phase>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  *(_DWORD *)(v21 + 32) = 0;
  *(unsigned char *)(v21 + 36) = 1;
  *(_OWORD *)(v21 + 40) = xmmword_18834C6B0;
  *(void *)(v21 + 56) = v19;
  *(void *)(v21 + 64) = v20;
  *(_OWORD *)(v21 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v21 + 88) = 0;
  swift_bridgeObjectRetain();
  uint64_t v50 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  static UnitPoint.center.getter();
  *(void *)&long long v69 = 0x3EE4F8B588E368F1;
  *((void *)&v69 + 1) = v22;
  *(void *)&long long v70 = v23;
  unint64_t v24 = lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
  unint64_t v25 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
  uint64_t v26 = MEMORY[0x1E4F3FC00];
  uint64_t v27 = MEMORY[0x1E4F40168];
  Transition.combined<A>(with:)();
  uint64_t v51 = type metadata accessor for PlaybackButton.Configuration;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v61, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v13[v9[5]] = 0x4000000000000000;
  *(void *)&v13[v9[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v13[v9[7]] = 0x3FA999999999999ALL;
  static Animation.spring(response:dampingFraction:blendDuration:)();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v13, (uint64_t (*)(void))v60);
  *(void *)&long long v69 = v26;
  *((void *)&v69 + 1) = v27;
  *(void *)&long long v70 = v24;
  *((void *)&v70 + 1) = v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v28 = (uint64_t)v54;
  uint64_t v29 = v56;
  Transition.animation(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v4, v29);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v28, v53, (uint64_t (*)(void))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0> and conformance FilteredTransition<A>, (void (*)(uint64_t))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  uint64_t v30 = AnyTransition.init<A>(_:)();
  _sSNy10Foundation4DateVGWOhTm_0(v28, (uint64_t (*)(void))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  uint64_t v31 = static Font.footnote.getter();
  uint64_t v32 = swift_getKeyPath();
  uint64_t v62 = v21;
  uint64_t v63 = KeyPath;
  uint64_t v64 = v50;
  char v65 = 20;
  uint64_t v66 = v30;
  uint64_t v67 = v32;
  uint64_t v68 = v31;
  static Font.Weight.bold.getter();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = v70;
  char v34 = BYTE8(v70);
  uint64_t v35 = v72;
  uint64_t v36 = v74;
  long long v55 = v69;
  long long v56 = v71;
  long long v57 = v73;
  uint64_t v37 = v61;
  uint64_t v38 = v59;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v61, v59, v51);
  *(void *)(v38 + v9[5]) = 0x4000000000000000;
  *(void *)(v38 + v9[6]) = 0x3FB47AE147AE147BLL;
  *(void *)(v38 + v9[7]) = 0x3FA999999999999ALL;
  uint64_t v39 = v58;
  if (*(unsigned char *)(v38 + v58[8])) {
    double v40 = 0.8;
  }
  else {
    double v40 = 1.0;
  }
  _sSNy10Foundation4DateVGWOhTm_0(v38, (uint64_t (*)(void))v60);
  static UnitPoint.center.getter();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  char v45 = *(unsigned char *)(v37 + v39[7]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  unint64_t v46 = v52;
  *uint64_t v52 = v55;
  *((void *)v46 + 2) = v33;
  *((unsigned char *)v46 + 24) = v34;
  v46[2] = v56;
  *((void *)v46 + 6) = v35;
  *(_OWORD *)((char *)v46 + 56) = v57;
  *((void *)v46 + 9) = v36;
  *((double *)v46 + 10) = v40;
  *((double *)v46 + 11) = v40;
  *((void *)v46 + 12) = v42;
  *((void *)v46 + 13) = v44;
  *((unsigned char *)v46 + 112) = v45;
  long long v47 = v70;
  *(_OWORD *)((char *)v46 + 120) = v69;
  *(_OWORD *)((char *)v46 + 136) = v47;
  double result = *(double *)&v71;
  *(_OWORD *)((char *)v46 + 152) = v71;
  return result;
}

uint64_t PillPlaybackButtonStyleBody.resolvedProgressView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v109 = a1;
  uint64_t v106 = type metadata accessor for Date();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v96 = (uint64_t)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v94);
  uint64_t v93 = (uint64_t)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(0);
  uint64_t v99 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v98 = (uint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v100 = (uint64_t)&v85 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v102 = (uint64_t)&v85 - v9;
  uint64_t v92 = type metadata accessor for ProgressViewSchedule(0);
  MEMORY[0x1F4188790](v92);
  uint64_t v95 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v97 = (uint64_t)&v85 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v101 = (uint64_t)&v85 - v14;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, MEMORY[0x1E4F40578]);
  uint64_t v108 = v15;
  uint64_t v107 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unsigned long long v103 = (uint64_t *)((char *)&v85 - v16);
  uint64_t v17 = type metadata accessor for PillPlaybackButtonStyleBody();
  uint64_t v18 = v17 - 8;
  uint64_t v90 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v91 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v85 - v21;
  uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v23 - 8);
  unint64_t v25 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v85 - v27;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v31 = (char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(void *)(v34 + 64);
  MEMORY[0x1F4188790](v32);
  uint64_t v88 = (uint64_t)&v85 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v85 - v37;
  uint64_t v39 = *(int *)(v18 + 28);
  uint64_t v104 = v1;
  uint64_t v40 = v1 + v39;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v1 + v39, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  uint64_t v87 = v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) == 1)
  {
    uint64_t v41 = (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?;
    uint64_t v42 = (uint64_t)v31;
LABEL_7:
    _sSNy10Foundation4DateVGWOhTm_0(v42, v41);
    uint64_t v49 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v109, v49, 1, v108);
  }
  long long v86 = v38;
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_0((uint64_t)v31, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v43 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v40 + *(int *)(v43 + 20), (uint64_t)v28, type metadata accessor for PlaybackButton.State);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v25, 1, 2, v106);
  char v44 = specialized static PlaybackButton.State.== infix(_:_:)((uint64_t)v28, (uint64_t)v25);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v25, type metadata accessor for PlaybackButton.State);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v28, type metadata accessor for PlaybackButton.State);
  uint64_t v45 = v104;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v104, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
  if (v44)
  {
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
LABEL_6:
    uint64_t v41 = (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>;
    uint64_t v42 = (uint64_t)v86;
    goto LABEL_7;
  }
  uint64_t v46 = *(void *)v22;
  uint64_t v47 = v22[8];
  outlined copy of Environment<Bool>.Content(*(void *)v22, v22[8]);
  int v48 = specialized Environment.wrappedValue.getter(v46, v47);
  outlined consume of Environment<Bool?>.Content(v46, v47);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
  if (v48 == 2) {
    goto LABEL_6;
  }
  BOOL v51 = *(unsigned char *)(v40 + *(int *)(v43 + 28)) == 2;
  uint64_t v52 = (uint64_t)v86;
  if (v51)
  {
    uint64_t v53 = v101;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v86, v101, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    *(unsigned char *)(v53 + *(int *)(v92 + 20)) = 0;
    uint64_t v54 = v97;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v53, v97, type metadata accessor for ProgressViewSchedule);
    uint64_t v55 = v45;
    uint64_t v56 = v91;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v55, v91, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
    uint64_t v57 = v88;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v52, v88, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    unint64_t v58 = (*(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
    unint64_t v59 = (v89 + *(unsigned __int8 *)(v87 + 80) + v58) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    uint64_t v60 = swift_allocObject();
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v56, v60 + v58, (uint64_t (*)(void))type metadata accessor for PillPlaybackButtonStyleBody);
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v57, v60 + v59, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v61 = v95;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v54, v95, type metadata accessor for ProgressViewSchedule);
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = partial apply for closure #1 in PillPlaybackButtonStyleBody.resolvedProgressView.getter;
    *(void *)(v62 + 24) = v60;
    uint64_t v63 = v61;
    uint64_t v64 = v98;
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v63, v98, type metadata accessor for ProgressViewSchedule);
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
    *(void *)(v65 + 24) = v62;
    uint64_t v66 = (uint64_t (**)(uint64_t))(v64 + *(int *)(v99 + 44));
    *uint64_t v66 = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
    v66[1] = (uint64_t (*)(uint64_t))v65;
    uint64_t v67 = v64;
    uint64_t v68 = v100;
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v67, v100, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    _sSNy10Foundation4DateVGWOhTm_0(v54, type metadata accessor for ProgressViewSchedule);
    uint64_t v69 = v68;
    uint64_t v70 = v102;
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(v69, v102, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    uint64_t v79 = v103;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v70, (uint64_t)v103, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    _sSNy10Foundation4DateVGWOhTm_0(v70, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    _sSNy10Foundation4DateVGWOhTm_0(v53, type metadata accessor for ProgressViewSchedule);
  }
  else
  {
    uint64_t v71 = v93;
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v40, v93, type metadata accessor for PlaybackButton.Configuration);
    uint64_t v72 = v94;
    *(void *)(v71 + *(int *)(v94 + 20)) = 0x4000000000000000;
    *(void *)(v71 + *(int *)(v72 + 24)) = 0x3FB47AE147AE147BLL;
    *(void *)(v71 + *(int *)(v72 + 28)) = 0x3FA999999999999ALL;
    uint64_t v73 = v96;
    PlaybackButton.Specs.resolvedPauseDate.getter(v96);
    _sSNy10Foundation4DateVGWOhTm_0(v71, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v74 = static Alignment.leading.getter();
    uint64_t v76 = v75;
    double v77 = closure #1 in PillPlaybackButtonStyleBody.progressView(interval:referenceDate:)(v45, (uint64_t)v110);
    (*(void (**)(uint64_t, uint64_t, double))(v105 + 8))(v73, v106, v77);
    uint64_t v78 = v103;
    *unsigned long long v103 = v74;
    v78[1] = v76;
    uint64_t v79 = v78;
    long long v80 = v110[9];
    *((_OWORD *)v78 + 9) = v110[8];
    *((_OWORD *)v78 + 10) = v80;
    *((_OWORD *)v78 + 11) = v110[10];
    long long v81 = v110[5];
    *((_OWORD *)v78 + 5) = v110[4];
    *((_OWORD *)v78 + 6) = v81;
    long long v82 = v110[7];
    *((_OWORD *)v78 + 7) = v110[6];
    *((_OWORD *)v78 + 8) = v82;
    long long v83 = v110[1];
    *((_OWORD *)v78 + 1) = v110[0];
    *((_OWORD *)v78 + 2) = v83;
    long long v84 = v110[3];
    *((_OWORD *)v78 + 3) = v110[2];
    *((_OWORD *)v78 + 4) = v84;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
  }
  _sSNy10Foundation4DateVGWOhTm_0(v52, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>((uint64_t)v79, v109);
  uint64_t v49 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v109, v49, 1, v108);
}

uint64_t PillPlaybackButtonStyleBody.label.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v71 = a1;
  uint64_t v69 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v67 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v65 - v8;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PillPlaybackButtonStyleBody();
  uint64_t v19 = *(int *)(v18 + 20);
  uint64_t v68 = v1;
  uint64_t v20 = v1 + v19;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v1 + v19, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  uint64_t v66 = v2;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  int v70 = v21;
  if (v21 == 1)
  {
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    uint64_t v23 = type metadata accessor for PlaybackButton.Configuration(0);
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v20 + *(int *)(v23 + 20), (uint64_t)v6, type metadata accessor for PlaybackButton.State);
    if ((*v22)(v6, 2, v69))
    {
      LocalizedStringKey.init(stringLiteral:)();
    }
    else
    {
      LocalizedStringKey.init(stringLiteral:)();
      _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v6, type metadata accessor for PlaybackButton.State);
    }
    type metadata accessor for SwiftUIClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v41 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v42 = objc_msgSend(v41, sel_bundleForClass_, ObjCClassFromMetadata);
    uint64_t v31 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v33 = v43;
    char v35 = v44;
    uint64_t v37 = v45;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __int16 v47 = 0;
  }
  else
  {
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v24 = type metadata accessor for PlaybackButton.Configuration(0);
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v20 + *(int *)(v24 + 20), (uint64_t)v9, type metadata accessor for PlaybackButton.State);
    uint64_t v25 = v69;
    unsigned int v26 = (*v22)(v9, 2, v69);
    if (v26)
    {
      if (v26 == 1)
      {
        uint64_t v27 = (char *)(v68 + *(int *)(v18 + 24));
        char v28 = *v27;
        uint64_t v29 = *((void *)v27 + 1);
        LOBYTE(v27) = v27[16];
        LOBYTE(v72) = v28;
        uint64_t v73 = v29;
        char v74 = (char)v27;
        uint64_t v72 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)((uint64_t)v17, (uint64_t)&v17[*(int *)(v14 + 36)]);
        uint64_t v73 = v30;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v31 = Text.init<A>(_:)();
        uint64_t v33 = v32;
        char v35 = v34;
        uint64_t v37 = v36;
        __int16 v38 = 0;
        __int16 v39 = 0;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v67, &v17[*(int *)(v14 + 36)], v25);
        uint64_t v57 = (char *)(v68 + *(int *)(v18 + 24));
        char v58 = *v57;
        uint64_t v59 = *((void *)v57 + 1);
        LOBYTE(v57) = v57[16];
        LOBYTE(v72) = v58;
        uint64_t v73 = v59;
        char v74 = (char)v57;
        uint64_t v31 = Text.init(_:style:)();
        uint64_t v33 = v60;
        char v35 = v61;
        uint64_t v37 = v62;
        __int16 v39 = 0;
        __int16 v38 = 1;
      }
    }
    else
    {
      uint64_t v49 = v66;
      uint64_t v48 = (uint64_t)v67;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v67, v9, v25);
      uint64_t v50 = (char *)(v68 + *(int *)(v18 + 24));
      char v51 = *v50;
      uint64_t v52 = *((void *)v50 + 1);
      LOBYTE(v50) = v50[16];
      LOBYTE(v72) = v51;
      uint64_t v73 = v52;
      char v74 = (char)v50;
      uint64_t v72 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(v48, (uint64_t)&v17[*(int *)(v14 + 36)]);
      uint64_t v73 = v53;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v31 = Text.init<A>(_:)();
      uint64_t v33 = v54;
      char v35 = v55;
      uint64_t v37 = v56;
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v25);
      __int16 v38 = 0;
      __int16 v39 = 256;
    }
    __int16 v47 = v39 | v38;
    uint64_t result = _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  BOOL v63 = v70 == 1;
  uint64_t v64 = v71;
  *uint64_t v71 = v31;
  v64[1] = v33;
  v64[2] = v35 & 1;
  v64[3] = v37;
  *((_WORD *)v64 + 16) = v47;
  *((unsigned char *)v64 + 34) = v63;
  return result;
}

uint64_t PillPlaybackButtonStyleBody.platter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v23[-v7];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v23[-v10];
  static Color.white.getter();
  uint64_t v12 = v1 + *(int *)(type metadata accessor for PillPlaybackButtonStyleBody() + 20);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v12, (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v11[v3[5]] = 0x4000000000000000;
  *(void *)&v11[v3[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v11[v3[7]] = 0x3FA999999999999ALL;
  uint64_t v13 = type metadata accessor for PlaybackButton.Configuration(0);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  uint64_t v25 = Color.opacity(_:)();
  swift_release();
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v12, (uint64_t)v8, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v8[v3[5]] = 0x4000000000000000;
  *(void *)&v8[v3[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v8[v3[7]] = 0x3FA999999999999ALL;
  uint64_t v14 = *(int *)(v13 + 32);
  uint64_t v15 = static Animation.spring(response:dampingFraction:blendDuration:)();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  char v16 = *(unsigned char *)(v12 + v14);
  if ((*(unsigned __int8 *)(v12 + *(int *)(v13 + 28)) | 2) == 3)
  {
    int v24 = *(unsigned __int8 *)(v12 + v14);
    static Color.white.getter();
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v12, (uint64_t)v5, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v5[v3[5]] = 0x4000000000000000;
    *(void *)&v5[v3[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v5[v3[7]] = 0x3FA999999999999ALL;
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v17 = Color.opacity(_:)();
    swift_release();
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v12, (uint64_t)v5, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v5[v3[5]] = 0x4000000000000000;
    *(void *)&v5[v3[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v5[v3[7]] = 0x3FA999999999999ALL;
    static Animation.timingCurve(_:_:_:_:duration:)();
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v18 = 1;
    uint64_t v19 = Animation.repeatForever(autoreverses:)();
    swift_retain_n();
    swift_release();
    char v16 = v24;
    uint64_t v20 = 0x3FF0000000000000;
    uint64_t v21 = 1310976;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = v25;
  *(_WORD *)(a1 + 16) = 256;
  *(void *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 32) = v16;
  *(unsigned char *)(a1 + 33) = 20;
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = v18;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v21;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v21;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v19;
  swift_retain();
  swift_retain();
  outlined copy of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(v18, v17);
  outlined consume of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(v18, v17);
  swift_release();
  return swift_release();
}

uint64_t Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  MEMORY[0x1F4188790](v3);
  char v44 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v35 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v36 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v33 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  MEMORY[0x1F4188790](v9);
  char v34 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *v2;
  uint64_t v20 = *((void *)v2 + 1);
  int v21 = v2[16];
  Date.timeIntervalSinceNow.getter();
  Date.timeIntervalSinceNow.getter();
  LOBYTE(v55) = v19;
  uint64_t v56 = v20;
  char v57 = v21;
  static Text.DateStyle.timer.getter();
  v49[0] = v52;
  uint64_t v50 = v53;
  char v51 = v54;
  if (MEMORY[0x18C113050](&v55, v49))
  {
    static Duration.seconds(_:)();
    static Duration.TimeFormatStyle.Pattern.minuteSecond.getter();
    static FormatStyle<>.time(pattern:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, MEMORY[0x1E4F28198]);
    Duration.formatted<A>(_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    if (v21 != 3)
    {
      uint64_t v55 = v20;
      LOBYTE(v56) = v21;
      Text.DateStyle.UnitsConfiguration.units.getter();
    }
    static Duration.seconds(_:)();
    Set<>.init(_:)();
    uint64_t v22 = v33;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    uint64_t v23 = v35;
    int v24 = v32;
    uint64_t v25 = v38;
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v32, *MEMORY[0x1E4FBBEB0], v38);
    unsigned int v26 = v37;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
    uint64_t v27 = v44;
    static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter();
    char v28 = v34;
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v43);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v39);
    _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, MEMORY[0x1E4F281D0]);
    uint64_t v29 = v41;
    Duration.formatted<A>(_:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v29);
  }
  return v55;
}

double closure #1 in PillPlaybackButtonStyleBody.progressView(interval:referenceDate:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PlaybackButton.Specs();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v27 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = a1 + *(int *)(type metadata accessor for PillPlaybackButtonStyleBody() + 20);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v14, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v13[v5[7]] = 0x4000000000000000;
  *(void *)&v13[v5[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v13[v5[9]] = 0x3FA999999999999ALL;
  ClosedRange<>.progress(at:countdown:)();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  static Color.white.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v14, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v13[v5[7]] = 0x4000000000000000;
  *(void *)&v13[v5[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v13[v5[9]] = 0x3FA999999999999ALL;
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  uint64_t v36 = Color.opacity(_:)();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v35 = v37;
  int v31 = v38;
  uint64_t v34 = v39;
  int v30 = v40;
  uint64_t v33 = v41;
  uint64_t v32 = v42;
  static Color.white.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v14, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v10[v5[7]] = 0x4000000000000000;
  *(void *)&v10[v5[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v10[v5[9]] = 0x3FA999999999999ALL;
  uint64_t v15 = type metadata accessor for PlaybackButton.Configuration(0);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  uint64_t v29 = Color.opacity(_:)();
  swift_release();
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v14, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v13[v5[7]] = 0x4000000000000000;
  *(void *)&v13[v5[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v13[v5[9]] = 0x3FA999999999999ALL;
  uint64_t v28 = static Animation.spring(response:dampingFraction:blendDuration:)();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  LOBYTE(v13) = *(unsigned char *)(v14 + *(int *)(v15 + 28));
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v14, (uint64_t)v7, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v7[v5[7]] = 0x4000000000000000;
  *(void *)&v7[v5[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v7[v5[9]] = 0x3FA999999999999ALL;
  uint64_t v16 = *(int *)(v15 + 32);
  uint64_t v17 = static Animation.spring(response:dampingFraction:blendDuration:)();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  LOBYTE(v7) = *(unsigned char *)(v14 + v16);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v18 = v43;
  char v19 = v44;
  uint64_t v20 = v45;
  char v21 = v46;
  char v22 = v31;
  char v23 = v30;
  *(unsigned char *)a2 = 1;
  uint64_t v24 = v35;
  *(void *)(a2 + 8) = v36;
  *(_WORD *)(a2 + 16) = 256;
  *(void *)(a2 + 24) = v24;
  *(unsigned char *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v34;
  *(unsigned char *)(a2 + 48) = v23;
  uint64_t v25 = v32;
  *(void *)(a2 + 56) = v33;
  *(void *)(a2 + 64) = v25;
  *(unsigned char *)(a2 + 72) = 1;
  *(void *)(a2 + 80) = v29;
  *(_WORD *)(a2 + 88) = 256;
  *(unsigned char *)(a2 + 90) = 20;
  *(void *)(a2 + 96) = v28;
  *(unsigned char *)(a2 + 104) = (_BYTE)v13;
  *(void *)(a2 + 112) = v17;
  *(unsigned char *)(a2 + 120) = (_BYTE)v7;
  *(void *)(a2 + 128) = v18;
  *(unsigned char *)(a2 + 136) = v19;
  *(void *)(a2 + 144) = v20;
  *(unsigned char *)(a2 + 152) = v21;
  double result = v47[0];
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v47;
  return result;
}

void type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t _sSNy10Foundation4DateVGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI14PlaybackButtonV5StateOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized AccessibilityPlaybackButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v35 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v35 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v36 = (uint64_t)&v35 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v37 = (uint64_t)&v35 - v16;
  type metadata accessor for _AnimationModifier<PlaybackButton.Phase>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  uint64_t v43 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  long long v18 = v40;
  type metadata accessor for Color?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v18;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent);
  swift_release();
  uint64_t v20 = (uint64_t *)&v6[*(int *)(v4 + 44)];
  *uint64_t v20 = v19;
  v20[1] = v17;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v19 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_0((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  uint64_t v21 = dword_1ED466188;
  uint64_t v22 = *(void *)&v9[*(int *)(v4 + 44)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v22, v21 | (v21 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  *(void *)&long long v40 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v22);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v35 = type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  *(void *)&long long v40 = 1024;
  AccessibilityNullableOptionSet<>.init(removing:)();
  uint64_t v23 = *(void *)&v12[*(int *)(v4 + 44)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v23);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v24 = v36;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v12, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  uint64_t v25 = specialized static Text.Accessibility.playback(for:)(v39);
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  LOBYTE(v17) = v30 & 1;
  type metadata accessor for Color?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
  *(void *)(v31 + 32) = v25;
  *(void *)(v31 + 40) = v27;
  *(unsigned char *)(v31 + 48) = v17;
  *(void *)(v31 + 56) = v29;
  swift_beginAccess();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4F41090]);
  uint64_t v41 = v32;
  unint64_t v42 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
  *(void *)&long long v40 = v31;
  BYTE8(v40) = 2;
  outlined copy of Text.Storage(v25, v27, v17);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v40, MEMORY[0x1E4F40B88]);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v33 = v37;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v24, v37, (uint64_t (*)(void))v35);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v25, v27, v17);
  swift_bridgeObjectRelease();
  _sSNy10Foundation4DateVGWOhTm_0(v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  specialized AccessibilityPlaybackButtonModifier.resolvedValue.getter((uint64_t (*)(void, double))type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedCon, (void (*)(_OWORD *__return_ptr, void, void, uint64_t, unsigned char *))specialized AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:), (void (*)(_OWORD *__return_ptr, unsigned char *))specialized AccessibilityPlaybackButtonModifier.percentageValue(interval:), &v40);
  specialized ModifiedContent<>.accessibilityValue(_:)((uint64_t)&v40, v38);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v40);
  return _sSNy10Foundation4DateVGWOhTm_0(v33, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  uint64_t v38 = a2;
  type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v35 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v35 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v36 = (uint64_t)&v35 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v37 = (uint64_t)&v35 - v16;
  type metadata accessor for _AnimationModifier<PlaybackButton.Phase>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  uint64_t v43 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  long long v18 = v40;
  type metadata accessor for Color?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v18;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo);
  swift_release();
  uint64_t v20 = (uint64_t *)&v6[*(int *)(v4 + 44)];
  *uint64_t v20 = v19;
  v20[1] = v17;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v19 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_0((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  uint64_t v21 = dword_1ED466110;
  uint64_t v22 = *(void *)&v9[*(int *)(v4 + 44)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v22, v21 | (v21 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  *(void *)&long long v40 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v22);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v35 = type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  *(void *)&long long v40 = 1024;
  AccessibilityNullableOptionSet<>.init(removing:)();
  uint64_t v23 = *(void *)&v12[*(int *)(v4 + 44)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v23);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v24 = v36;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ((uint64_t)v12, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  uint64_t v25 = specialized static Text.Accessibility.playback(for:)(v39);
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  LOBYTE(v17) = v30 & 1;
  type metadata accessor for Color?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
  *(void *)(v31 + 32) = v25;
  *(void *)(v31 + 40) = v27;
  *(unsigned char *)(v31 + 48) = v17;
  *(void *)(v31 + 56) = v29;
  swift_beginAccess();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4F41090]);
  uint64_t v41 = v32;
  unint64_t v42 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
  *(void *)&long long v40 = v31;
  BYTE8(v40) = 2;
  outlined copy of Text.Storage(v25, v27, v17);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v40, MEMORY[0x1E4F40B88]);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v33 = v37;
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v24, v37, (uint64_t (*)(void))v35);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v25, v27, v17);
  swift_bridgeObjectRelease();
  _sSNy10Foundation4DateVGWOhTm_0(v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  specialized AccessibilityPlaybackButtonModifier.resolvedValue.getter((uint64_t (*)(void, double))type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, (void (*)(_OWORD *__return_ptr, void, void, uint64_t, unsigned char *))specialized AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:), (void (*)(_OWORD *__return_ptr, unsigned char *))specialized AccessibilityPlaybackButtonModifier.percentageValue(interval:), &v40);
  specialized ModifiedContent<>.accessibilityValue(_:)((uint64_t)&v40, v38);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v40);
  return _sSNy10Foundation4DateVGWOhTm_0(v33, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
}

double specialized AccessibilityPlaybackButtonModifier.resolvedValue.getter@<D0>(uint64_t (*a1)(void, double)@<X0>, void (*a2)(_OWORD *__return_ptr, void, void, uint64_t, unsigned char *)@<X1>, void (*a3)(_OWORD *__return_ptr, unsigned char *)@<X2>, _OWORD *a4@<X8>)
{
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = &v23[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1(0, v15);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v4 + *(int *)(v18 + 40), (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
  {
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    LOBYTE(v24[0]) = 0;
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    AccessibilityValueStorage.init<A>(_:description:)();
  }
  else
  {
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_0((uint64_t)v11, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v20 = (unsigned __int8 *)(v4 + *(int *)(v18 + 36));
    uint64_t v21 = v20[16];
    if (v21 == 4)
    {
      v23[15] = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      AccessibilityValueStorage.init<A>(_:description:)();
    }
    else if (v21 == 5)
    {
      a3(v24, v17);
    }
    else
    {
      a2(v24, *v20, *((void *)v20 + 1), v21, v17);
    }
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    long long v22 = v24[1];
    *a4 = v24[0];
    a4[1] = v22;
    double result = *(double *)&v25;
    a4[2] = v25;
  }
  return result;
}

uint64_t specialized AccessibilityPlaybackButtonModifier.percentageValue(interval:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v5 - 8);
  type metadata accessor for _AnimationModifier<PlaybackButton.Phase>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F27630]);
  uint64_t v7 = v6;
  uint64_t v30 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v20 - 8);
  long long v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v2, (uint64_t)v22, type metadata accessor for PlaybackButton.State);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 2, v13);
  if (v23)
  {
    if (v23 == 1)
    {
      LOBYTE(v38) = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      return AccessibilityValueStorage.init<A>(_:description:)();
    }
    else
    {
      outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v34, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      Text.init(progressInterval:countsDown:)();
      return AccessibilityValueStorage.init(description:)();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v22, v13);
    ClosedRange<>.progress(at:countdown:)();
    uint64_t v36 = v25;
    static Locale.autoupdatingCurrent.getter();
    unint64_t v34 = lazy protocol witness table accessor for type Double and conformance Double();
    FloatingPointFormatStyle.Percent.init(locale:)();
    uint64_t v26 = v31;
    uint64_t v27 = v32;
    uint64_t v28 = v33;
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v31, *MEMORY[0x1E4FBBEA0], v33);
    MEMORY[0x18C10A330](v26, 0x3FF0000000000000, 0, v7);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v30 + 8);
    v29(v9, v7);
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent();
    BinaryFloatingPoint.formatted<A>(_:)();
    v29(v12, v7);
    uint64_t v36 = v38;
    uint64_t v37 = v39;
    lazy protocol witness table accessor for type String and conformance String();
    Text.init<A>(_:)();
    AccessibilityValueStorage.init(description:)();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t specialized AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  v34[1] = a5;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (v6, (uint64_t)v17, type metadata accessor for PlaybackButton.State);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 2, v11);
  if (v18)
  {
    if (v18 == 1)
    {
      LOBYTE(v41) = a1;
      uint64_t v42 = a2;
      char v43 = a3;
      type metadata accessor for ClosedRange<Date>();
      uint64_t v41 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(a4, a4 + *(int *)(v19 + 36));
      uint64_t v42 = v20;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v21 = Text.init<A>(_:)();
    }
    else
    {
      type metadata accessor for ClosedRange<Date>();
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4 + *(int *)(v31 + 36), v11);
      LOBYTE(v41) = a1;
      uint64_t v42 = a2;
      char v43 = a3;
      uint64_t v21 = Text.init(_:style:)();
    }
    uint64_t v26 = v21;
    uint64_t v28 = v22;
    char v30 = v23;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    LOBYTE(v41) = a1;
    uint64_t v42 = a2;
    char v43 = a3;
    type metadata accessor for ClosedRange<Date>();
    uint64_t v41 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)((uint64_t)v14, a4 + *(int *)(v24 + 36));
    uint64_t v42 = v25;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v26 = Text.init<A>(_:)();
    uint64_t v28 = v27;
    char v30 = v29;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  LOBYTE(v41) = a1;
  uint64_t v42 = a2;
  char v43 = a3;
  outlined copy of Text.Storage(v26, v28, v30 & 1);
  swift_bridgeObjectRetain();
  static Text.DateStyle.timer.getter();
  v35[0] = v38;
  uint64_t v36 = v39;
  char v37 = v40;
  if (MEMORY[0x18C113050](&v41, v35))
  {
    type metadata accessor for AccessibilityTextModifier();
    uint64_t v32 = swift_allocObject();
    *(_WORD *)(v32 + 16) = 1800;
    *(unsigned char *)(v32 + 18) = 1;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    Text.modified(with:)();
    outlined consume of Text.Storage(v26, v28, v30 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v26, v28, v30 & 1);
    swift_release();
  }
  else
  {
    outlined consume of Text.Storage(v26, v28, v30 & 1);
  }
  swift_bridgeObjectRelease();
  return AccessibilityValueStorage.init(description:)();
}

uint64_t specialized closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, char *)@<X1>, _OWORD *a3@<X8>)
{
  type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context();
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x1F4188790](v6 - 8);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context(0);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t result = v8 - 8;
  if (*(void *)(v10 + 64) == v7)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (a1, (uint64_t)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    a2(v17, (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t result = _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    long long v11 = v17[9];
    a3[8] = v17[8];
    a3[9] = v11;
    long long v12 = v17[11];
    a3[10] = v17[10];
    a3[11] = v12;
    long long v13 = v17[5];
    a3[4] = v17[4];
    a3[5] = v13;
    long long v14 = v17[7];
    a3[6] = v17[6];
    a3[7] = v14;
    long long v15 = v17[1];
    *a3 = v17[0];
    a3[1] = v15;
    long long v16 = v17[3];
    a3[2] = v17[2];
    a3[3] = v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *specialized closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *__return_ptr, char *)@<X1>, void *a3@<X8>)
{
  type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context();
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x1F4188790](v6 - 8);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context(0);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t result = (void *)(v8 - 8);
  if (*(void *)(v10 + 64) == v7)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (a1, (uint64_t)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    a2(v12, (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    return memcpy(a3, v12, 0x151uLL);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1, void (*a2)(char *))
{
  long long v16 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  long long v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
  LOBYTE(a1) = v10[*(int *)(v8 + 52)];
  outlined init with copy of TimelineInvalidationAction((uint64_t)&v10[*(int *)(v8 + 56)], (uint64_t)v17);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v14, v6, v3);
  v14[*(int *)(v12 + 52)] = a1;
  outlined init with take of TimelineInvalidationAction((uint64_t)v17, (uint64_t)&v14[*(int *)(v12 + 56)]);
  v16(v14);
  return _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v16)(char *);
  unsigned char v17[8];

  long long v16 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  long long v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, (a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
  LOBYTE(a1) = v10[*(int *)(v8 + 52)];
  outlined init with copy of TimelineInvalidationAction((uint64_t)&v10[*(int *)(v8 + 56)], (uint64_t)v17);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v14, v6, v3);
  v14[*(int *)(v12 + 52)] = a1;
  outlined init with take of TimelineInvalidationAction((uint64_t)v17, (uint64_t)&v14[*(int *)(v12 + 56)]);
  v16(v14);
  return _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context);
}

unint64_t lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent()
{
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent;
  if (!lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent)
  {
    type metadata accessor for _AnimationModifier<PlaybackButton.Phase>(255, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F27630]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent);
  }
  return result;
}

uint64_t outlined copy of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>();
    lazy protocol witness table accessor for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Text, Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41420], MEMORY[0x1E4F40578]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return outlined consume of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(a1, a2, a3, a4, a5, BYTE1(a5) & 1);
  }
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return outlined consume of _ConditionalContent<Text, Text>.Storage(a1, a2, a3);
  }
}

uint64_t outlined consume of _ConditionalContent<Text, Text>.Storage(uint64_t a1, uint64_t a2, char a3)
{
  outlined consume of Text.Storage(a1, a2, a3 & 1);

  return swift_bridgeObjectRelease();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  else
  {
    return outlined copy of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(a1, a2, a3, a4, a5, BYTE1(a5) & 1);
  }
}

uint64_t outlined copy of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  else
  {
    return outlined copy of _ConditionalContent<Text, Text>.Storage(a1, a2, a3);
  }
}

uint64_t outlined copy of _ConditionalContent<Text, Text>.Storage(uint64_t a1, uint64_t a2, char a3)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t outlined release of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1878D42C8()
{
  uint64_t v1 = (int *)(type metadata accessor for PillPlaybackButtonStyleBody() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + v2), *(unsigned __int8 *)(v0 + v2 + 8));
  unint64_t v7 = v0 + v2 + v1[7];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v7 + *(int *)(v4 + 36), v8);
  }
  uint64_t v10 = type metadata accessor for PlaybackButton.Configuration(0);
  unint64_t v11 = v7 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 2, v12)) {
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  unint64_t v14 = (v2 + v18 + v6) & ~v6;
  swift_bridgeObjectRelease();
  unint64_t v15 = v7 + *(int *)(v10 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));

  swift_release();
  long long v16 = *(void (**)(unint64_t, uint64_t))(v13 + 8);
  v16(v0 + v14, v12);
  v16(v0 + v14 + *(int *)(v4 + 36), v12);

  return swift_deallocObject();
}

__n128 partial apply for closure #1 in PillPlaybackButtonStyleBody.resolvedProgressView.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for PillPlaybackButtonStyleBody() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v5 = static Alignment.leading.getter();
  uint64_t v7 = v6;
  closure #1 in PillPlaybackButtonStyleBody.progressView(interval:referenceDate:)(v1 + v4, (uint64_t)v13);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  long long v8 = v13[9];
  *(_OWORD *)(a1 + 144) = v13[8];
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 176) = v13[10];
  long long v9 = v13[5];
  *(_OWORD *)(a1 + 80) = v13[4];
  *(_OWORD *)(a1 + 96) = v9;
  long long v10 = v13[7];
  *(_OWORD *)(a1 + 112) = v13[6];
  *(_OWORD *)(a1 + 128) = v10;
  long long v11 = v13[1];
  *(_OWORD *)(a1 + 16) = v13[0];
  *(_OWORD *)(a1 + 32) = v11;
  __n128 result = (__n128)v13[3];
  *(_OWORD *)(a1 + 48) = v13[2];
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t sub_1878D46A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(_OWORD *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t partial apply for specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1)
{
  return specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(char *))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(char *))(v1 + 16));
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context(uint64_t a1)
{
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ProgressViewSchedule(255);
    uint64_t v9 = a3(255);
    uint64_t v10 = _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, (void (*)(uint64_t))type metadata accessor for ProgressViewSchedule);
    unint64_t v11 = a4(a1, v8, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context()
{
  if (!lazy cache variable for type metadata for TimelineView<EveryMinuteTimelineSchedule, Never>.Context)
  {
    lazy protocol witness table accessor for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule();
    unint64_t v0 = type metadata accessor for TimelineView.Context();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule()
{
  unint64_t result = lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule;
  if (!lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule);
  }
  return result;
}

void type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of Transition.combined<A>(with:)>>.0)
  {
    lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
    lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Transition.combined<A>(with:)>>.0);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition;
  if (!lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition;
  if (!lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition);
  }
  return result;
}

void type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>()
{
  if (!lazy cache variable for type metadata for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0();
    lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
    lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for FilteredTransition();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
    }
  }
}

void type metadata accessor for _AnimationModifier<PlaybackButton.Phase>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context(uint64_t a1)
{
}

uint64_t View.gaugeIndicatorDotTint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getKeyPath();
  v11[2] = a2;
  v11[3] = a3;
  _OWORD v11[4] = a4;
  v11[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:), (uint64_t)v11, MEMORY[0x1E4FBC248], MEMORY[0x1E4F3F700], v9, (uint64_t)&v12);
  v11[7] = v12;
  View.environment<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.gaugeIndicatorDotTint.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.gaugeIndicatorDotTint : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.gaugeIndicatorDotTint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1878D4FA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.gaugeIndicatorDotTint.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.gaugeIndicatorDotTint : EnvironmentValues()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t sub_1878D5028()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t partial apply for implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:)(a1, a2);
}

uint64_t sub_1878D516C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>)
  {
    type metadata accessor for AnyShapeStyle?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
    }
  }
}

void type metadata accessor for AnyShapeStyle?()
{
  if (!lazy cache variable for type metadata for AnyShapeStyle?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GaugeIndicatorDotTintEnvironmentKey()
{
  return &type metadata for GaugeIndicatorDotTintEnvironmentKey;
}

void PencilEventsBridge.startObservingPreferredActions()()
{
  type metadata accessor for UIPencilInteraction();
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v2 = (void *)MEMORY[0x18C115780](0xD000000000000012, 0x800000018832C500);
  objc_msgSend(ObjCClassFromMetadata, sel_addObserver_forKeyPath_options_context_, v0, v2, 3, v0 + direct field offset for PencilEventsBridge.preferredTapActionContext);

  id v3 = (id)MEMORY[0x18C115780](0xD000000000000016, 0x800000018832C520);
  objc_msgSend(ObjCClassFromMetadata, sel_addObserver_forKeyPath_options_context_, v0, v3, 3, v0 + direct field offset for PencilEventsBridge.preferredSqueezeActionContext);
}

void PencilEventsBridge.stopObservingPreferredActions()()
{
  type metadata accessor for UIPencilInteraction();
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v2 = (void *)MEMORY[0x18C115780](0xD000000000000012, 0x800000018832C500);
  objc_msgSend(ObjCClassFromMetadata, sel_removeObserver_forKeyPath_context_, v0, v2, v0 + direct field offset for PencilEventsBridge.preferredTapActionContext);

  id v3 = (id)MEMORY[0x18C115780](0xD000000000000016, 0x800000018832C520);
  objc_msgSend(ObjCClassFromMetadata, sel_removeObserver_forKeyPath_context_, v0, v3, v0 + direct field offset for PencilEventsBridge.preferredSqueezeActionContext);
}

void PencilEventsBridge.observeValue(forKeyPath:of:change:context:)(uint64_t a1, void *a2, uint64_t a3, Class isa, char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (!a5
    || (&v5[direct field offset for PencilEventsBridge.preferredTapActionContext] != a5
      ? (BOOL v12 = &v5[direct field offset for PencilEventsBridge.preferredSqueezeActionContext] == a5)
      : (BOOL v12 = 1),
        !v12))
  {
    if (a2) {
      a2 = (void *)MEMORY[0x18C115780](a1, a2);
    }
    outlined init with copy of Any?(a3, (uint64_t)v23);
    uint64_t v15 = v24;
    if (v24)
    {
      long long v16 = __swift_project_boxed_opaque_existential_1(v23, v24);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x1F4188790](v16);
      uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      if (!isa)
      {
LABEL_14:
        v22.receiver = v5;
        v22.super_class = ObjectType;
        objc_msgSendSuper2(&v22, sel_observeValueForKeyPath_ofObject_change_context_, a2, v21, isa, a5);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v21 = 0;
      if (!isa) {
        goto LABEL_14;
      }
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_14;
  }
  uint64_t v13 = MEMORY[0x18C119DF0](&v5[direct field offset for PencilEventsBridge.host]);
  if (v13)
  {
    unint64_t v14 = (void *)v13;
    LOWORD(v23[0]) = 2;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
}

uint64_t @objc PencilEventsBridge.observeValue(forKeyPath:of:change:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char *a6)
{
  if (a3)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    BOOL v12 = v11;
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v19, 0, sizeof(v19));
    id v16 = a5;
    id v17 = a1;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  uint64_t v10 = 0;
  BOOL v12 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v13 = a5;
  id v14 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  uint64_t v15 = (objc_class *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_8:
  PencilEventsBridge.observeValue(forKeyPath:of:change:context:)(v10, v12, (uint64_t)v19, v15, a6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)v19);
}

void PencilHoverPose.init(_:in:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a1)
  {
    id v6 = a1;
    objc_msgSend(v6, sel_location);
    objc_msgSend(a2, sel_convertPoint_toView_, 0);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    objc_msgSend(a2, sel_bounds);
    objc_msgSend(a2, sel_convertRect_toView_, 0);
    objc_msgSend(v6, sel_zOffset);
    uint64_t v22 = v11;
    objc_msgSend(v6, sel_altitudeAngle);
    uint64_t v13 = v12;
    objc_msgSend(v6, sel_azimuthAngle);
    uint64_t v15 = v14;
    objc_msgSend(v6, sel_rollAngle);
    uint64_t v17 = v16;
    UnitPoint.init(_:in:)();
    uint64_t v19 = v18;
    uint64_t v21 = v20;

    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v19;
    *(void *)(a3 + 24) = v21;
    *(void *)(a3 + 32) = v22;
  }
  else
  {

    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  *(void *)(a3 + 40) = v13;
  *(void *)(a3 + 48) = v15;
  *(void *)(a3 + 56) = v17;
  *(unsigned char *)(a3 + 64) = a1 == 0;
}

void @objc PencilEventsBridge.pencilInteraction(_:didReceiveTap:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized PencilEventsBridge.pencilInteraction(_:didReceiveTap:)(v7);
}

void @objc PencilEventsBridge.pencilInteraction(_:didReceiveSqueeze:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized PencilEventsBridge.pencilInteraction(_:didReceiveSqueeze:)(v7);
}

void specialized PencilEventsBridge.pencilInteraction(_:didReceiveTap:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + direct field offset for PencilEventsBridge.host);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = objc_msgSend(a1, sel_hoverPose);
    id v7 = v5;
    PencilHoverPose.init(_:in:)(v6, v7, (uint64_t)&v16);
    long long v14 = v17;
    long long v15 = v16;
    long long v13 = v18;
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    char v10 = v21;
    CFTimeInterval v11 = CACurrentMediaTime();
    _UIHostingView.eventBindingManager.getter();
    long long v16 = v15;
    long long v17 = v14;
    long long v18 = v13;
    uint64_t v19 = v8;
    uint64_t v20 = v9;
    char v21 = v10;
    CFTimeInterval v22 = v11;
    char v23 = 2;
    uint64_t v24 = 0;
    uint64_t v12 = direct field offset for PencilEventsBridge.pencilDoubleTapSerial;
    lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
    EventBindingManager.send<A>(_:id:)();
    swift_release();

    ++*(void *)(v2 + v12);
  }
}

void specialized PencilEventsBridge.pencilInteraction(_:didReceiveSqueeze:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + direct field offset for PencilEventsBridge.host);
  if (v4)
  {
    char v21 = (void *)v4;
    unint64_t v5 = (unint64_t)objc_msgSend(a1, sel_phase);
    if (v5 >= 4)
    {
    }
    else
    {
      unsigned int v6 = 0x3020101u >> (8 * v5);
      objc_msgSend(a1, sel__normalizedForceVelocity);
      BOOL v8 = (v7 & 0xFFFFFFFFFFFFFLL) != 0 && (~v7 & 0x7FF0000000000000) == 0;
      uint64_t v9 = 0;
      if (!v8)
      {
        objc_msgSend(a1, sel__normalizedForceVelocity);
        uint64_t v9 = v10;
      }
      id v11 = objc_msgSend(a1, sel_hoverPose);
      id v12 = v21;
      PencilHoverPose.init(_:in:)(v11, v12, (uint64_t)v23);
      long long v20 = *(_OWORD *)&v23[16];
      *(_OWORD *)CFTimeInterval v22 = *(_OWORD *)v23;
      long long v19 = *(_OWORD *)&v23[32];
      uint64_t v13 = *(void *)&v23[48];
      uint64_t v14 = v24;
      char v15 = v25;
      CFTimeInterval v16 = CACurrentMediaTime();
      _UIHostingView.eventBindingManager.getter();
      v23[0] = v6;
      *(_OWORD *)&v23[8] = *(_OWORD *)v22;
      *(_OWORD *)&v23[24] = v20;
      *(_OWORD *)&v23[40] = v19;
      uint64_t v24 = v13;
      uint64_t v25 = v14;
      char v26 = v15;
      uint64_t v27 = v9;
      BOOL v28 = v8;
      CFTimeInterval v29 = v16;
      uint64_t v30 = 0;
      uint64_t v17 = direct field offset for PencilEventsBridge.pencilSqueezeSerial;
      lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
      EventBindingManager.send<A>(_:id:)();
      swift_release();
      if (objc_msgSend(a1, sel_phase) == (id)2)
      {
      }
      else
      {
        id v18 = objc_msgSend(a1, sel_phase);

        if (v18 != (id)3) {
          return;
        }
      }
      ++*(void *)(v2 + v17);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
  }
  return result;
}

unint64_t type metadata accessor for UIPencilInteraction()
{
  unint64_t result = lazy cache variable for type metadata for UIPencilInteraction;
  if (!lazy cache variable for type metadata for UIPencilInteraction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPencilInteraction);
  }
  return result;
}

uint64_t View.selectable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SelectableModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for SelectableModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1878D610C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectableModifier<A>()
{
  return &protocol witness table for SelectableModifier<A>;
}

uint64_t static SelectableModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v33 = a5;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v10 = *a1;
  unint64_t v11 = *(void *)a2;
  unsigned int v36 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  long long v37 = *(_OWORD *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 40);
  unint64_t v14 = *(void *)(a2 + 48);
  unsigned int v15 = *(_DWORD *)(a2 + 56);
  unsigned int v38 = *(_DWORD *)(a2 + 60);
  uint64_t v39 = *(void *)(a2 + 64);
  uint64_t v40 = *(void *)(a2 + 72);
  int v41 = *(_DWORD *)(a2 + 80);
  unint64_t v52 = v14;
  unsigned int v53 = v15;
  uint64_t v16 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v16 & 1) == 0) {
    return a3();
  }
  v30[1] = a4;
  uint64_t v31 = a3;
  uint64_t v32 = a7;
  v30[0] = v30;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = v35;
  void v29[2] = v33;
  uint64_t v17 = v33;
  v29[3] = v35;
  LODWORD(v52) = v10;
  type metadata accessor for SelectableModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  unsigned int v34 = _GraphValue.value.getter();
  unint64_t v52 = v11;
  unsigned int v53 = v36;
  uint64_t v54 = v12;
  long long v55 = v37;
  uint64_t v56 = v13;
  unint64_t v57 = v14;
  *(void *)&long long v58 = __PAIR64__(v38, v15);
  *((void *)&v58 + 1) = v39;
  uint64_t v59 = v40;
  int v60 = v41;
  unint64_t v43 = v11;
  LODWORD(v44) = v36;
  uint64_t v45 = v12;
  long long v46 = v37;
  uint64_t v47 = v13;
  unint64_t v48 = v14;
  HIDWORD(v37) = v15;
  *(void *)&long long v49 = __PAIR64__(v38, v15);
  *((void *)&v49 + 1) = v39;
  uint64_t v50 = v40;
  int v51 = v41;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unsigned int v19 = _ViewInputs.environment.getter();
  lazy protocol witness table accessor for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v20 = 0;
  if (v43 != *MEMORY[0x1E4F4E7A0]) {
    uint64_t v20 = AGCreateWeakAttribute();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v21 = swift_release();
  unint64_t v43 = __PAIR64__(v34, v19);
  uint64_t v44 = v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = type metadata accessor for SelectableModifier.ChildEnvironment();
  v29[-2] = v22;
  v29[-1] = swift_getWitnessTable();
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v29[-4], v22, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
  _ViewInputs.environment.setter();
  unint64_t v43 = v52;
  LODWORD(v44) = v53;
  uint64_t v45 = v54;
  long long v46 = v55;
  uint64_t v47 = v56;
  unint64_t v48 = v57;
  long long v49 = v58;
  uint64_t v50 = v59;
  int v51 = v60;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_bridgeObjectRetain();
  ((void (*)(void *__return_ptr, uint64_t, unint64_t *))v31)(v42, v25, &v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v26 = swift_release();
  unint64_t v43 = v14;
  LODWORD(v44) = HIDWORD(v37);
  MEMORY[0x1F4188790](v26);
  v29[-4] = v17;
  v29[-3] = v18;
  LODWORD(v29[-2]) = v34;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v28 = v32;
  *uint64_t v32 = v42[0];
  v28[1] = v42[1];
  return result;
}

uint64_t closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for SelectableModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t implicit closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t SelectableContent = type metadata accessor for SelectableModifier.MakeSelectableContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for [Selectable](0, &lazy cache variable for type metadata for Attribute<[Selectable]>, (uint64_t (*)(uint64_t))type metadata accessor for [Selectable], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, SelectableContent, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t SelectableModifier.ChildEnvironment.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v30 = a4;
    uint64_t v12 = *WeakValue;
    uint64_t v13 = WeakValue[1];
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v16 = *Value;
    uint64_t v15 = Value[1];
    uint64_t v32 = v16;
    uint64_t v33 = v15;
    swift_retain();
    swift_retain();
    unint64_t v26 = HIDWORD(a1);
    uint64_t v17 = AGGraphGetValue();
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v25(v10, v17, a2);
    uint64_t v27 = v13;
    uint64_t v28 = v12;
    uint64_t v29 = a3;
    LOBYTE(v12) = SelectionContext.canSelect<A>(_:)((uint64_t)v10, v12, v13, a2, a3);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v10, a2);
    char v31 = v12 & 1;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (v33)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v19 = AGGraphGetValue();
    v25(v10, v19, a2);
    char v20 = SelectionContext.isSelected<A>(_:)((uint64_t)v10, v28, v27, a2, v29);
    v18(v10, a2);
    char v31 = v20 & 1;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (v33)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v22 = v33;
    }
    else
    {
      uint64_t result = swift_release();
      uint64_t v22 = 0;
    }
    uint64_t v23 = v30;
    *uint64_t v30 = v32;
    v23[1] = v22;
  }
  else
  {
    return ScrollBehaviorModifier.ChildEnvironment.environment.getter(a4);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SelectableModifier<A>.ChildEnvironment@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return SelectableModifier.ChildEnvironment.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t SelectableModifier.MakeSelectableContent.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [Selectable](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Selectable>, (uint64_t (*)(uint64_t))type metadata accessor for Selectable, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, a2);
  *(void *)(v6 + 56) = type metadata accessor for SelectableModifier.SelectableContent();
  *(void *)(v6 + 64) = &protocol witness table for SelectableModifier<A>.SelectableContent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v5, a2);
  return v6;
}

uint64_t protocol witness for Rule.value.getter in conformance SelectableModifier<A>.MakeSelectableContent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SelectableModifier.MakeSelectableContent.value.getter(*v2, *(void *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectableModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static SelectableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectableModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SelectableKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t partial apply for closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for SelectableModifier.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32));
}

uint64_t type metadata accessor for SelectableModifier.MakeSelectableContent()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for [Selectable](uint64_t a1)
{
}

unint64_t type metadata accessor for Selectable()
{
  unint64_t result = lazy cache variable for type metadata for Selectable;
  if (!lazy cache variable for type metadata for Selectable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Selectable);
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectableKey()
{
  return &type metadata for SelectableKey;
}

uint64_t base witness table accessor for _AttributeBody in SelectableModifier<A>.MakeSelectableContent()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SelectableModifier<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

void type metadata accessor for [Selectable](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for SelectableModifier.SelectableContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for SelectableModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SelectableModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878D75E4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for _SceneOutputs()
{
  return &type metadata for _SceneOutputs;
}

void static PathToken.== infix(_:_:)()
{
}

void PathToken.encode(to:)()
{
}

void PathToken.init(from:)()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PathToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of PathToken(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t outlined copy of PathToken(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return swift_bridgeObjectRetain();
  }
  else {
    return outlined copy of Data._Representation(a1, a2);
  }
}

uint64_t destroy for PathToken(uint64_t a1)
{
  return outlined consume of PathToken(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t outlined consume of PathToken(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return swift_bridgeObjectRelease();
  }
  else {
    return outlined consume of Data._Representation(a1, a2);
  }
}

uint64_t *assignWithCopy for PathToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of PathToken(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of PathToken(v5, v6);
  return a1;
}

uint64_t *assignWithTake for PathToken(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of PathToken(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PathToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PathToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for PathToken(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t destructiveProjectEnumData for PathToken(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t destructiveInjectEnumTag for PathToken(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for PathToken()
{
  return &type metadata for PathToken;
}

uint64_t DismissStageAction.callAsFunction()()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](DismissStageAction.callAsFunction(), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EnvironmentValues.dismissStage.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.dismissStage : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_1878D7B64()
{
  return EnvironmentValues.dismissStage.setter();
}

ValueMetadata *type metadata accessor for DismissStageAction()
{
  return &type metadata for DismissStageAction;
}

void *type metadata accessor for EnvironmentValues.DismissStageActionKey()
{
  return &unk_1ED421D80;
}

uint64_t EnvironmentValues.dismissStage.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t getEnumTagSinglePayload for FeedbackRequestContextWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for FeedbackRequestContextWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878D7FD4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for FeedbackRequestContextWriter()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in FeedbackRequestContextWriter<A>()
{
  return &protocol witness table for FeedbackRequestContextWriter<A>;
}

uint64_t View.platformSensoryFeedback<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FeedbackRequestContextWriter();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t FeedbackRequestContext.implementation(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_6;
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)result + 80))(&v10, a1, a2);
  if (!v11)
  {
    swift_release();
    uint64_t result = outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v10);
    goto LABEL_6;
  }
  outlined init with take of OptionalBinaryInteger(&v10, (uint64_t)v12);
  int Attribute = AGWeakAttributeGetAttribute();
  int v8 = *MEMORY[0x1E4F4E7A0];
  swift_release();
  if (Attribute == v8)
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
LABEL_6:
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  *(void *)(a3 + 24) = &type metadata for LocationBasedFeedbackAdaptor;
  *(void *)(a3 + 32) = &protocol witness table for LocationBasedFeedbackAdaptor;
  uint64_t v9 = swift_allocObject();
  *(void *)a3 = v9;
  uint64_t result = outlined init with take of OptionalBinaryInteger(v12, v9 + 24);
  *(_DWORD *)(v9 + 16) = Attribute;
  return result;
}

uint64_t closure #1 in LocationBasedFeedbackAdaptor.generate()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)AGGraphGetValue();
  return AGGraphSetUpdate();
}

uint64_t protocol witness for PlatformSensoryFeedback.setUp() in conformance LocationBasedFeedbackAdaptor()
{
  uint64_t v1 = v0 + 8;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v2);
}

uint64_t protocol witness for PlatformSensoryFeedback.tearDown() in conformance LocationBasedFeedbackAdaptor()
{
  uint64_t v1 = v0 + 8;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 16))(v2);
}

uint64_t protocol witness for PlatformSensoryFeedback.generate() in conformance LocationBasedFeedbackAdaptor()
{
  uint64_t v1 = static Update.ensure<A>(_:)();
  double v2 = MEMORY[0x18C10C240](v1);
  double v4 = v3;
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  __swift_mutable_project_boxed_opaque_existential_1(v0 + 8, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v5 + 16))(v6, v5, v2, v4);
}

uint64_t static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v19 = *(_OWORD *)(a2 + 32);
  long long v20 = v10;
  long long v21 = *(_OWORD *)(a2 + 64);
  int v22 = *(_DWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v17 = *(_OWORD *)a2;
  long long v18 = v11;
  type metadata accessor for FeedbackRequestContextWriter();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  uint64_t v12 = _GraphValue.value.getter();
  closure #2 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(&v17, v12, a5);
  _GraphValue.init(_:)();
  void v14[2] = v19;
  v14[3] = v20;
  _OWORD v14[4] = v21;
  int v15 = v22;
  v14[0] = v17;
  v14[1] = v18;
  return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 8) + 24))(v16, v14, a3, a4, a5);
}

uint64_t closure #1 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for FeedbackRequestContextWriter();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #2 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a1 + 9);
  if ((v4 & 0x20) != 0)
  {
    uint64_t v7 = *((void *)a1 + 5);
    long long v8 = a1[1];
    long long v29 = *a1;
    long long v30 = v8;
    LODWORD(v31) = *((_DWORD *)a1 + 8);
    DWORD1(v31) = v4;
    *((void *)&v31 + 1) = v7;
    _GraphInputs.interfaceIdiom.getter();
    long long v29 = v28;
    if (AnyInterfaceIdiom.accepts<A>(_:)())
    {
      long long v9 = a1[3];
      long long v31 = a1[2];
      long long v32 = v9;
      long long v33 = a1[4];
      int v34 = *((_DWORD *)a1 + 20);
      long long v10 = a1[1];
      long long v29 = *a1;
      long long v30 = v10;
      unsigned int v11 = _ViewInputs.position.getter();
      long long v12 = a1[3];
      long long v31 = a1[2];
      long long v32 = v12;
      long long v33 = a1[4];
      int v34 = *((_DWORD *)a1 + 20);
      long long v13 = a1[1];
      long long v29 = *a1;
      long long v30 = v13;
      unsigned int v14 = _ViewInputs.size.getter();
      long long v15 = a1[3];
      long long v31 = a1[2];
      long long v32 = v15;
      long long v33 = a1[4];
      int v34 = *((_DWORD *)a1 + 20);
      long long v16 = a1[1];
      long long v29 = *a1;
      long long v30 = v16;
      *(void *)&long long v29 = __PAIR64__(v14, v11);
      DWORD2(v29) = _ViewInputs.transform.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type FeedbackLocation and conformance FeedbackLocation();
      unsigned int v17 = Attribute.init<A>(body:value:flags:update:)();
    }
    else
    {
      type metadata accessor for ViewGraph();
      MEMORY[0x18C114EE0]();
      unsigned int v17 = ViewGraph.$zeroPoint.getter();
      swift_release();
    }
    long long v18 = a1[3];
    long long v31 = a1[2];
    long long v32 = v18;
    long long v33 = a1[4];
    int v34 = *((_DWORD *)a1 + 20);
    long long v19 = a1[1];
    long long v29 = *a1;
    long long v30 = v19;
    swift_getKeyPath();
    int v20 = _ViewInputs.mapEnvironment<A>(_:)();
    uint64_t v21 = swift_release();
    *(void *)&long long v29 = __PAIR64__(v17, a2);
    DWORD2(v29) = v20;
    MEMORY[0x1F4188790](v21);
    v25[2] = a3;
    uint64_t v26 = type metadata accessor for FeedbackRequestContextWriter.ChildModifier();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v22 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v25, v26, MEMORY[0x1E4FBC248], v22, MEMORY[0x1E4FBC278], v23);
    return v28;
  }
  return a2;
}

uint64_t FeedbackRequestContextWriter.ChildModifier.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a3, Value, a1);
  uint64_t v7 = AGCreateWeakAttribute();
  type metadata accessor for LocationBasedSensoryFeedback?(0, &lazy cache variable for type metadata for AnyUIKitSensoryFeedbackCache?, (void (*)(uint64_t))type metadata accessor for AnyUIKitSensoryFeedbackCache);
  AGGraphGetValue();
  uint64_t v9 = v7;
  swift_weakInit();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a2 + 24))(&v9, a1, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance FeedbackRequestContextWriter<A>.ChildModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FeedbackRequestContextWriter.ChildModifier.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FeedbackRequestContextWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FeedbackRequestContextWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t FeedbackLocation.value.getter()
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v18 = *(void *)Value;
  long long v19 = *(_OWORD *)(Value + 8);
  long long v20 = *(_OWORD *)(Value + 24);
  v15[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v1 = swift_retain();
  *(double *)&unint64_t v2 = MEMORY[0x18C10C240](v1);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v3, v2));
  v15[0] = *(_OWORD *)AGGraphGetValue();
  CGFloat v4 = MEMORY[0x18C10C240]();
  CGFloat v6 = v5;
  uint64_t v7 = (_OWORD *)AGGraphGetValue();
  long long v8 = v7[1];
  v15[0] = *v7;
  v15[1] = v8;
  v17.origin.CGFloat x = v4;
  v17.origin.CGFloat y = v6;
  v17.size.CGFloat width = MEMORY[0x18C114450]();
  v17.size.CGFloat height = v9;
  hostingViewCoordinateSpace.getter();
  char v16 = 1;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v15);
  CGFloat x = v17.origin.x;
  CGFloat y = v17.origin.y;
  CGFloat width = v17.size.width;
  CGFloat height = v17.size.height;
  CGRectGetWidth(v17);
  v21.origin.CGFloat x = x;
  v21.origin.CGFloat y = y;
  v21.size.CGFloat width = width;
  v21.size.CGFloat height = height;
  CGRectGetHeight(v21);
  ViewOrigin.init(_:)();
  return swift_release();
}

void protocol witness for static Rule.initialValue.getter in conformance FeedbackLocation(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t protocol witness for Rule.value.getter in conformance FeedbackLocation()
{
  return FeedbackLocation.value.getter();
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance NotificationFeedbackImplementation()
{
  return objc_msgSend(*(id *)v0, sel_notificationOccurred_atLocation_, *(void *)(v0 + 8));
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance SelectionFeedbackImplementation()
{
  return objc_msgSend(*v0, sel_selectionChangedAtLocation_);
}

id protocol witness for PlatformSensoryFeedback.setUp() in conformance SelectionFeedbackImplementation()
{
  return objc_msgSend(*v0, sel_prepare);
}

void protocol witness for PlatformSensoryFeedback.generate() in conformance SelectionFeedbackImplementation()
{
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance CanvasFeedbackImplementation()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >> 62 != 2) {
    return result;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == 1 && v1 == 0x8000000000000002)
  {
    double v5 = &selRef_alignmentOccurredAtLocation_;
    return [*(id *)v0 *v5];
  }
  if (v2 == 2 && v1 == 0x8000000000000002)
  {
    double v5 = &selRef_pathCompletedAtLocation_;
    return [*(id *)v0 *v5];
  }
  return result;
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance ImpactFeedbackImplementation(double a1, double a2)
{
  return objc_msgSend(*(id *)v2, sel_impactOccurredWithIntensity_atLocation_, *(double *)(v2 + 8), a1, a2);
}

uint64_t partial apply for closure #1 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1878D8DCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.feedbackCache.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1878D8E08()
{
  swift_retain();
  specialized EnvironmentValues.feedbackCache.setter();

  return swift_release();
}

uint64_t type metadata accessor for FeedbackRequestContextWriter.ChildModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type FeedbackLocation and conformance FeedbackLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type FeedbackLocation and conformance FeedbackLocation;
  if (!lazy protocol witness table cache variable for type FeedbackLocation and conformance FeedbackLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeedbackLocation and conformance FeedbackLocation);
  }
  return result;
}

uint64_t outlined destroy of LocationBasedSensoryFeedback?(uint64_t a1)
{
  type metadata accessor for LocationBasedSensoryFeedback?(0, &lazy cache variable for type metadata for LocationBasedSensoryFeedback?, (void (*)(uint64_t))type metadata accessor for LocationBasedSensoryFeedback);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for LocationBasedSensoryFeedback()
{
  unint64_t result = lazy cache variable for type metadata for LocationBasedSensoryFeedback;
  if (!lazy cache variable for type metadata for LocationBasedSensoryFeedback)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LocationBasedSensoryFeedback);
  }
  return result;
}

uint64_t sub_1878D8F88()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocObject();
}

uint64_t assignWithCopy for NotificationFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  CGFloat v4 = *(void **)a2;
  double v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for NotificationFeedbackImplementation(uint64_t a1, void *a2)
{
  CGFloat v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NotificationFeedbackImplementation()
{
  return &type metadata for NotificationFeedbackImplementation;
}

ValueMetadata *type metadata accessor for SelectionFeedbackImplementation()
{
  return &type metadata for SelectionFeedbackImplementation;
}

uint64_t initializeBufferWithCopyOfBuffer for CanvasFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for CanvasFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  double v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for CanvasFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CanvasFeedbackImplementation()
{
  return &type metadata for CanvasFeedbackImplementation;
}

void *initializeBufferWithCopyOfBuffer for ImpactFeedbackImplementation(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ImpactFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ImpactFeedbackImplementation(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ImpactFeedbackImplementation()
{
  return &type metadata for ImpactFeedbackImplementation;
}

uint64_t initializeWithCopy for LocationBasedFeedbackAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

uint64_t assignWithCopy for LocationBasedFeedbackAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for LocationBasedFeedbackAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for LocationBasedFeedbackAdaptor()
{
  return &type metadata for LocationBasedFeedbackAdaptor;
}

void *type metadata accessor for FeedbackLocation()
{
  return &unk_1ED41D578;
}

void *initializeWithCopy for FeedbackRequestContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

_DWORD *assignWithCopy for FeedbackRequestContext(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_weakCopyAssign();
  return a1;
}

void *initializeWithTake for FeedbackRequestContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

void *assignWithTake for FeedbackRequestContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for FeedbackRequestContext()
{
  return &type metadata for FeedbackRequestContext;
}

uint64_t base witness table accessor for _AttributeBody in FeedbackRequestContextWriter<A>.ChildModifier()
{
  return swift_getWitnessTable();
}

void type metadata accessor for LocationBasedSensoryFeedback?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t partial apply for closure #1 in LocationBasedFeedbackAdaptor.generate()@<X0>(_OWORD *a1@<X8>)
{
  return closure #1 in LocationBasedFeedbackAdaptor.generate()(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StatusBarKey.StatusBar(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

_WORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance StatusBarKey(_WORD *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  __int16 v3 = *result;
  if (*result == 2)
  {
    unint64_t result = a2(&v4);
    __int16 v3 = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t View.statusBar(hidden:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v5 = a1;
  return View.transactionalPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for StatusBarKey, (uint64_t)&v5, (uint64_t)closure #1 in View._statusBar(hidden:), 0, a2, MEMORY[0x1E4FBB390], (uint64_t)&type metadata for StatusBarKey, a3, a4, MEMORY[0x1E4FBB3A8], (uint64_t)&protocol witness table for StatusBarKey);
}

uint64_t View._statusBar(hidden:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v5 = a1;
  return View.transactionalPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for StatusBarKey, (uint64_t)&v5, (uint64_t)closure #1 in View._statusBar(hidden:), 0, a2, MEMORY[0x1E4FBB390], (uint64_t)&type metadata for StatusBarKey, a3, a4, MEMORY[0x1E4FBB3A8], (uint64_t)&protocol witness table for StatusBarKey);
}

uint64_t closure #1 in View._statusBar(hidden:)@<X0>(unsigned __int8 *a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3 = *a1;
  uint64_t result = Transaction.animation.getter();
  if (result)
  {
    uint64_t result = swift_release();
    __int16 v5 = 256;
  }
  else
  {
    __int16 v5 = 0;
  }
  *a2 = v5 | v3;
  return result;
}

uint64_t sub_1878D9638()
{
  return swift_getWitnessTable();
}

uint64_t TableRowContent.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  v14[0] = partial apply for closure #1 in TableRowContent.draggable<A>(_:);
  v14[1] = v12;
  lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier();
  swift_retain();
  TableRowContent.modifier<A>(_:)((uint64_t)v14, a3, (uint64_t)&type metadata for ItemProviderTableRowModifier);
  return swift_release();
}

uint64_t closure #1 in TableRowContent.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
  long long v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  return NSItemProvider.init<A>(transferable:)();
}

uint64_t sub_1878D9858()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableRowContent.draggable<A>(_:)()
{
  return closure #1 in TableRowContent.draggable<A>(_:)(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

unint64_t lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier;
  if (!lazy protocol witness table cache variable for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier);
  }
  return result;
}

uint64_t TableRowContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = static Transferable.readableContentTypes.getter();
  unsigned int v14 = (void *)swift_allocObject();
  void v14[2] = a4;
  v14[3] = a5;
  _OWORD v14[4] = a6;
  _OWORD v14[5] = a7;
  void v14[6] = a2;
  v14[7] = a3;
  uint64_t v15 = TransferableDropAction.init(action:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  v24[4] = type metadata accessor for TransferableDropAction();
  v24[5] = &protocol witness table for TransferableDropAction<A>;
  uint64_t v22 = (void *)swift_allocObject();
  id v22[2] = v15;
  v22[3] = v17;
  v22[4] = v19;
  v22[5] = v21;
  v24[0] = v13;
  v24[1] = v22;
  lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier();
  swift_retain();
  TableRowContent.modifier<A>(_:)((uint64_t)v24, a4, (uint64_t)&type metadata for DropOntoTableRowModifier);
  return outlined destroy of DropOntoConfiguration((uint64_t)v24);
}

uint64_t partial apply for closure #1 in TableRowContent.dropDestination<A>(for:action:)()
{
  (*(void (**)(void))(v0 + 48))();
  return 1;
}

uint64_t sub_1878D9A58()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier;
  if (!lazy protocol witness table cache variable for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier);
  }
  return result;
}

uint64_t DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_retain();
  v15[0] = static Transferable.readableContentTypes.getter();
  v15[1] = partial apply for closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:);
  _OWORD v15[2] = v13;
  lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier();
  TableRowContent.modifier<A>(_:)((uint64_t)v15, a4, (uint64_t)&type metadata for OnInsertTableRowModifier);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a5;
  uint64_t v51 = a7;
  uint64_t v43 = a3;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v47 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v45 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v17 = dispatch_group_create();
  uint64_t v55 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  uint64_t v18 = aBlock[0];
  unint64_t v53 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    a2 = v53;
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t result = v19;
  }
  uint64_t v48 = v15;
  uint64_t v44 = a1;
  if (!result)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v34 = v49;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v35 = (void *)static OS_dispatch_queue.main.getter();
    unsigned int v36 = (void *)swift_allocObject();
    v36[2] = v50;
    uint64_t v36[3] = a6;
    v36[4] = v51;
    v36[5] = a8;
    v36[6] = v43;
    v36[7] = a4;
    v36[8] = v44;
    v36[9] = v18;
    aBlock[4] = partial apply for closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:);
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_12;
    long long v37 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    unsigned int v38 = v45;
    static DispatchQoS.unspecified.getter();
    uint64_t v55 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
    uint64_t v39 = v47;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v37);
    swift_release();

    (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v13);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v48);
    return swift_release();
  }
  if (result >= 1)
  {
    uint64_t v41 = a4;
    uint64_t v42 = v13;
    uint64_t v52 = result;
    uint64_t v21 = 0;
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v23 = v50;
      uint64_t v22 = v51;
      do
      {
        MEMORY[0x18C117680](v21++, a2);
        dispatch_group_enter(v17);
        uint64_t v24 = (void *)swift_allocObject();
        _OWORD v24[2] = v23;
        void v24[3] = a6;
        v24[4] = v22;
        v24[5] = a8;
        void v24[6] = v17;
        v24[7] = v18;
        swift_retain();
        uint64_t v25 = v17;
        uint64_t v26 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();
        a2 = v53;
        swift_unknownObjectRelease();

        swift_release();
      }
      while (v52 != v21);
    }
    else
    {
      uint64_t v28 = v50;
      uint64_t v27 = v51;
      do
      {
        long long v29 = *(void **)(a2 + 8 * v21++ + 32);
        id v30 = v29;
        dispatch_group_enter(v17);
        long long v31 = (void *)swift_allocObject();
        void v31[2] = v28;
        v31[3] = a6;
        v31[4] = v27;
        uint64_t v31[5] = a8;
        v31[6] = v17;
        v31[7] = v18;
        swift_retain();
        long long v32 = v17;
        long long v33 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();

        a2 = v53;
        swift_release();
      }
      while (v52 != v21);
    }
    swift_bridgeObjectRelease();
    a4 = v41;
    uint64_t v13 = v42;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2)
{
  return closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(a1, a2, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

unint64_t lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier;
  if (!lazy protocol witness table cache variable for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier);
  }
  return result;
}

void closure #1 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)&v33[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33[-1] - v13;
  type metadata accessor for Error();
  uint64_t v15 = type metadata accessor for Result();
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void **)((char *)&v33[-1] - v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v33[-1] - v17, a1, v15, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v18;
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    uint64_t v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      id v23 = v20;
      id v24 = v20;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v33[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v27 = _typeName(_:qualified:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1872C6000, v22, v21, "Error loading %s: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v26, -1, -1);
      MEMORY[0x18C119C60](v25, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v9 + 32))(v14, v18, a5);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, a5);
    uint64_t v34 = a3;
    swift_retain();
    type metadata accessor for Array();
    type metadata accessor for AtomicBox();
    long long v31 = (void (*)(uint64_t *, void))AtomicBox.wrappedValue.modify();
    Array.append(_:)();
    v31(v33, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a5);
  }
  dispatch_group_leave(a2);
}

uint64_t closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease();
}

void DynamicTableRowContent.dropDestination<A>(for:action:isTargeted:)()
{
}

uint64_t TableRowContent.itemProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier();
  return TableRowContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for ItemProviderTableRowModifier);
}

uint64_t DynamicTableRowContent.onInsert(of:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  _OWORD v6[2] = a3;
  lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier();
  return TableRowContent.modifier<A>(_:)((uint64_t)v6, a4, (uint64_t)&type metadata for OnInsertTableRowModifier);
}

uint64_t ItemProviderTableRowModifier.body.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (*v1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    id v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?);
  }
  else
  {
    id v6 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1878DA79C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance ItemProviderTableRowModifier@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (*v1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    id v6 = thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)partial apply;
  }
  else
  {
    id v6 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t OnInsertTableRowModifier.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in ItemProviderTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in OnInsertTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance OnInsertTableRowModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();

  return swift_retain();
}

ValueMetadata *type metadata accessor for ItemProviderTableRowModifier()
{
  return &type metadata for ItemProviderTableRowModifier;
}

uint64_t destroy for OnInsertTableRowModifier()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for OnInsertTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OnInsertTableRowModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnInsertTableRowModifier(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OnInsertTableRowModifier()
{
  return &type metadata for OnInsertTableRowModifier;
}

uint64_t sub_1878DAA68(uint64_t a1)
{
  return get_witness_table_7SwiftUI15TableRowContentRz16CoreTransferable0G0Rd__r__lAA08ModifiedE0VyxAA012ItemProvidercD8ModifierVGAaBHpxAaBHD1__AhA01_cdeK0HPyHCHCTm(a1, (uint64_t)&type metadata for ItemProviderTableRowModifier, (void (*)(void))lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier);
}

uint64_t sub_1878DAA88(uint64_t a1)
{
  return get_witness_table_7SwiftUI15TableRowContentRz16CoreTransferable0G0Rd__r__lAA08ModifiedE0VyxAA012ItemProvidercD8ModifierVGAaBHpxAaBHD1__AhA01_cdeK0HPyHCHCTm(a1, (uint64_t)&type metadata for DropOntoTableRowModifier, (void (*)(void))lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier);
}

uint64_t get_witness_table_7SwiftUI15TableRowContentRz16CoreTransferable0G0Rd__r__lAA08ModifiedE0VyxAA012ItemProvidercD8ModifierVGAaBHpxAaBHD1__AhA01_cdeK0HPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

uint64_t sub_1878DAB1C()
{
  return MEMORY[0x1E4F417F0];
}

_UNKNOWN **sub_1878DAB28()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

_UNKNOWN **sub_1878DAB34()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

ValueMetadata *type metadata accessor for DropOntoTraitKey()
{
  return &type metadata for DropOntoTraitKey;
}

ValueMetadata *type metadata accessor for DropOntoTableRowModifier()
{
  return &type metadata for DropOntoTableRowModifier;
}

uint64_t DropOntoConfiguration.performDrop(info:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (MEMORY[0x18C119DF0](v5))
  {
    swift_getObjectType();
    uint64_t v6 = UIDropSession.itemProviders(for:)(v4);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = swift_allocObject();
  outlined init with copy of TableColumnList((uint64_t)(v2 + 1), v7 + 16);
  outlined init with copy of DropInfo((uint64_t)a1, (uint64_t)&v15);
  uint64_t v8 = swift_allocObject();
  long long v9 = v16;
  *(_OWORD *)(v8 + 16) = v15;
  *(_OWORD *)(v8 + 32) = v9;
  *(void *)(v8 + 48) = v17;
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = *(void *)(v7 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v7 + 16, v10);
  (*(void (**)(uint64_t (*)(void, void, void, void), uint64_t, uint64_t, uint64_t))(v11 + 16))(destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, v8, v10, v11);
  outlined init with copy of DropInfo((uint64_t)a1, (uint64_t)&v15);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v6;
  long long v13 = v16;
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)(v12 + 48) = v13;
  *(void *)(v12 + 64) = v17;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in DropOntoConfiguration.performDrop(info:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v5, (uint64_t)v10);
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v8 = (double *)__swift_project_boxed_opaque_existential_1(a3, a3[3]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v7 + 32))(a2, v6, v7, v8[2], v8[3]);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

BOOL DropConfigurationDelegate.validateDrop(info:)(void *a1)
{
  uint64_t v2 = v1;
  outlined init with copy of DropOntoConfiguration?(v2, (uint64_t)v9);
  if (*(void *)&v9[0])
  {
    v8[0] = v9[0];
    v8[1] = v9[1];
    _OWORD v8[2] = v9[2];
    v4._rawuint64_t Value = *(void **)&v9[0];
    uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18C119DF0](v5))
    {
      swift_getObjectType();
      Swift::Bool v6 = UIDropSession.hasItemsConforming(to:)(v4);
      swift_unknownObjectRelease();
    }
    else
    {
      Swift::Bool v6 = 0;
    }
    outlined destroy of DropOntoConfiguration((uint64_t)v8);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL protocol witness for DropDelegate.performDrop(info:) in conformance DropConfigurationDelegate(void *a1)
{
  outlined init with copy of DropOntoConfiguration?(v1, (uint64_t)v5);
  if (v5[0])
  {
    DropOntoConfiguration.performDrop(info:)(a1);
    outlined destroy of DropOntoConfiguration((uint64_t)v5);
  }
  else
  {
    outlined destroy of DropOntoConfiguration?((uint64_t)v5);
  }
  outlined init with copy of DropOntoConfiguration?(v1, (uint64_t)v5);
  BOOL v3 = v5[0] != 0;
  outlined destroy of DropOntoConfiguration?((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance DropOntoTraitKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of DropOntoConfiguration?((uint64_t)&static DropOntoTraitKey.defaultValue, a1);
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in DropOntoTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance DropOntoTableRowModifier@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DropOntoConfiguration(v1, a1);
}

uint64_t outlined init with copy of DropOntoConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  uint64_t v3 = a2 + 8;
  uint64_t v4 = a1 + 8;
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(v3, v4, v6);
  return a2;
}

uint64_t outlined init with copy of DropOntoConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DropOntoConfiguration?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for DropOntoConfiguration?()
{
  if (!lazy cache variable for type metadata for DropOntoConfiguration?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?);
    }
  }
}

uint64_t sub_1878DB0F4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)()
{
  return closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(*(void (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

void partial apply for closure #1 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1)
{
  closure #1 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(a1, *(NSObject **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t type metadata accessor for Error()
{
  unint64_t result = lazy cache variable for type metadata for Error;
  if (!lazy cache variable for type metadata for Error)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Error);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in TableRowContent.draggable<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t destroy for DropConfigurationDelegate(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  }
  return result;
}

uint64_t initializeWithCopy for DropConfigurationDelegate(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v3 = a2 + 8;
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    uint64_t v5 = v4;
    uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
    swift_bridgeObjectRetain();
    v6(a1 + 8, v3, v5);
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for DropConfigurationDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), a2 + 1);
    }
    else
    {
      outlined destroy of DropOntoConfiguration(a1);
      long long v10 = *((_OWORD *)a2 + 1);
      long long v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v9;
    }
  }
  else if (v5)
  {
    *(void *)a1 = v5;
    uint64_t v6 = a2 + 1;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v7 - 8);
    swift_bridgeObjectRetain();
    v8(a1 + 8, v6, v7);
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    long long v12 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)a1 = v11;
  }
  return a1;
}

uint64_t outlined destroy of DropOntoConfiguration(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return a1;
}

uint64_t assignWithTake for DropConfigurationDelegate(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    goto LABEL_5;
  }
  if (!*(void *)a2)
  {
    outlined destroy of DropOntoConfiguration(a1);
LABEL_5:
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DropConfigurationDelegate(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DropConfigurationDelegate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DropConfigurationDelegate()
{
  return &type metadata for DropConfigurationDelegate;
}

uint64_t destroy for DropOntoConfiguration(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for DropOntoTableRowModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for DropOntoTableRowModifier(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for DropOntoTableRowModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DropOntoTableRowModifier(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DropOntoTableRowModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DropOntoConfiguration()
{
  return &type metadata for DropOntoConfiguration;
}

_UNKNOWN **sub_1878DB754()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t outlined destroy of DropOntoConfiguration?(uint64_t a1)
{
  type metadata accessor for DropOntoConfiguration?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1878DB7BC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_1878DB7F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DropOntoConfiguration.performDrop(info:)()
{
  return closure #2 in DropOntoConfiguration.performDrop(info:)(v0[2], v0[3], v0 + 4);
}

uint64_t View.keyboardType(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.keyboardType.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.keyboardType : EnvironmentValues@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.keyboardType : EnvironmentValues()
{
  return EnvironmentValues.keyboardType.setter();
}

uint64_t sub_1878DBBB8()
{
  return EnvironmentValues.keyboardType.setter();
}

uint64_t EnvironmentValues.keyboardType.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static KeyboardType.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static KeyboardType.asciiCapable.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static KeyboardType.numbersAndPunctuation.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static KeyboardType.url.getter(void *a1@<X8>)
{
  *a1 = 3;
}

void static KeyboardType.numberPad.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static KeyboardType.phonePad.getter(void *a1@<X8>)
{
  *a1 = 5;
}

void static KeyboardType.namePhonePad.getter(void *a1@<X8>)
{
  *a1 = 6;
}

void static KeyboardType.emailAddress.getter(void *a1@<X8>)
{
  *a1 = 7;
}

void static KeyboardType.decimalPad.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static KeyboardType.webSearch.getter(void *a1@<X8>)
{
  *a1 = 10;
}

void static KeyboardType.asciiCapableNumberPad.getter(void *a1@<X8>)
{
  *a1 = 11;
}

uint64_t (*EnvironmentValues.keyboardType.modify(uint64_t a1))(void *a1)
{
  *(void *)(a1 + 16) = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.keyboardType.modify;
}

uint64_t EnvironmentValues.keyboardType.modify(void *a1)
{
  uint64_t v1 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

void static TextInputDictation.disabled.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
}

uint64_t static TextInputDictation.enabled(forceSpelling:preferOnline:)@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  *a3 = 1;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

BOOL static TextInputDictation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextInputDictation.Key(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t EnvironmentValues.textInputDictation.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.textInputDictation.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textInputDictation(_:)(__int16 *a1)
{
  __int16 v1 = *a1;
  char v2 = *((unsigned char *)a1 + 2);
  swift_getKeyPath();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 18) = v2;
  *(_WORD *)(v3 + 16) = v1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textInputDictation : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(unsigned char *)(a2 + 2) = v5;
  *(_WORD *)a2 = v4;
  return result;
}

uint64_t sub_1878DC4D0()
{
  return EnvironmentValues.textInputDictation.setter();
}

uint64_t sub_1878DC510()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.textInputDictation(_:)(uint64_t result)
{
  int v2 = *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16);
  if (*(_WORD *)(v1 + 16) != 2)
  {
    *(_WORD *)uint64_t result = *(_WORD *)(v1 + 16);
    *(unsigned char *)(result + 2) = BYTE2(v2);
  }
  return result;
}

uint64_t View.autocapitalization(_:)(unint64_t a1)
{
  char v1 = 4;
  if (a1 < 4) {
    char v1 = a1;
  }
  char v3 = v1;
  return View.textInputAutocapitalization(_:)(&v3);
}

SwiftUI::TextInputAutocapitalization_optional __swiftcall TextInputAutocapitalization.init(_:)(UITextAutocapitalizationType a1)
{
  char v2 = 4;
  if ((unint64_t)a1 < 4) {
    char v2 = a1;
  }
  *char v1 = v2;
  return (SwiftUI::TextInputAutocapitalization_optional)a1;
}

uint64_t View.textInputAutocapitalization(_:)(char *a1)
{
  char v1 = *a1;
  swift_getKeyPath();
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

void static TextInputAutocapitalization.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static TextInputAutocapitalization.words.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static TextInputAutocapitalization.sentences.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static TextInputAutocapitalization.characters.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t EnvironmentValues.textInputAutocapitalization.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.textInputAutocapitalization : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1878DC91C()
{
  return EnvironmentValues.textInputAutocapitalization.setter();
}

uint64_t EnvironmentValues.textInputAutocapitalization.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1878DCA4C()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in View.textInputAutocapitalization(_:)(unsigned char *result)
{
  int v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 != 4) {
    *uint64_t result = v2;
  }
  return result;
}

void View.textFieldScrollingDisabled(_:)()
{
}

uint64_t View.submitsOnReturn(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.submitsOnReturn.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_1878DCC40@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.submitsOnReturn.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1878DCC80()
{
  return EnvironmentValues.submitsOnReturn.setter();
}

uint64_t sub_1878DCCAC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardType>, (uint64_t)&type metadata for KeyboardType, MEMORY[0x1E4F411E8], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardType>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardType>, (uint64_t)&type metadata for KeyboardType, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1878DCD64()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<TextInputDictation?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputDictation?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardType>(255, &lazy cache variable for type metadata for TextInputDictation?, (uint64_t)&type metadata for TextInputDictation, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputDictation?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<TextInputDictation?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1878DCEA4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputAutocapitalization>, (uint64_t)&type metadata for TextInputAutocapitalization, MEMORY[0x1E4F41280], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t), void (*a5)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardType>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputAutocapitalization>, (uint64_t)&type metadata for TextInputAutocapitalization, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1878DCFD8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardType>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TextInputAutocapitalization(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878DD12CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextInputAutocapitalization.Behavior()
{
  return &type metadata for TextInputAutocapitalization.Behavior;
}

ValueMetadata *type metadata accessor for KeyboardTypeKey()
{
  return &type metadata for KeyboardTypeKey;
}

unint64_t lazy protocol witness table accessor for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior()
{
  unint64_t result = lazy protocol witness table cache variable for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior;
  if (!lazy protocol witness table cache variable for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior);
  }
  return result;
}

uint64_t EnvironmentValues.submitsOnReturn.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

ValueMetadata *type metadata accessor for SubmitsOnReturnKey()
{
  return &type metadata for SubmitsOnReturnKey;
}

ValueMetadata *type metadata accessor for TextInputAutocapitalizationKey()
{
  return &type metadata for TextInputAutocapitalizationKey;
}

ValueMetadata *type metadata accessor for TextInputDictation.Key()
{
  return &type metadata for TextInputDictation.Key;
}

uint64_t static LegacyBaseModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for _GraphValue<LegacyBaseModifier>, (uint64_t)&unk_1ED428270, MEMORY[0x1E4F3F590]);
  uint64_t v1 = MEMORY[0x1E4FBB390];
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v1, v0);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier();
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

unsigned char *protocol witness for Rule.value.getter in conformance LegacyBaseModifier.Child@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (unsigned char *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance LegacyBaseModifier()
{
}

uint64_t protocol witness for Rule.value.getter in conformance BaseModifier.Child@<X0>(char *a1@<X8>)
{
  return BaseModifier.Child.value.getter(a1);
}

uint64_t BaseModifier.SelectionStateBox.__deallocating_deinit()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t assignWithTake for BaseModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t sub_1878DD654()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in BaseModifier()
{
  return &protocol witness table for BaseModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in LegacyBaseModifier()
{
  return &protocol witness table for LegacyBaseModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance BaseModifier()
{
}

uint64_t sub_1878DD838()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1878DD870()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v0[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v1 = v0[15];
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_10;
    }
    swift_release();
    swift_release();
  }
  if (v0[17]) {
    swift_release();
  }
  if (v0[20])
  {
    swift_release();
    swift_release();
  }
LABEL_10:
  swift_release();
  if (v0[32]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 29));
  }

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child;
  if (!lazy protocol witness table cache variable for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child);
  }
  return result;
}

void *type metadata accessor for LegacyBaseModifier.Child()
{
  return &unk_1ED428248;
}

void *type metadata accessor for BaseModifier.SelectionStateBox.Mutation()
{
  return &unk_1ED410CD8;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Child(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

{
  if (a2 && *(unsigned char *)(a1 + 52)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BaseModifier.Child(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

{
  char v3;

  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 52) = v3;
  return result;
}

void *type metadata accessor for BaseModifier.Child()
{
  return &unk_1ED410D58;
}

unsigned char *storeEnumTagSinglePayload for PlatformItemNavigationSelectionStyleModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1878DDAE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t assignWithCopy for BaseModifier.SelectionObserver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for BaseModifier.SelectionObserver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void *type metadata accessor for BaseModifier.SelectionObserver()
{
  return &unk_1ED410C48;
}

void *type metadata accessor for NavigationSelectionTag()
{
  return &unk_1ED43A190;
}

uint64_t sub_1878DDC68()
{
  return swift_deallocObject();
}

uint64_t sub_1878DDC78()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in ToolbarItemLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1878DDCD4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>();
    type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(255, &lazy cache variable for type metadata for AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>, (uint64_t)&protocol witness table for LabelStyleConfiguration.Title, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for AccessibilityRepresentationModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>)
  {
    type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(255, &lazy cache variable for type metadata for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for LabeledContent);
    type metadata accessor for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>);
    }
  }
}

void type metadata accessor for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>()
{
  if (!lazy cache variable for type metadata for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>)
  {
    lazy protocol witness table accessor for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle();
    unint64_t v0 = type metadata accessor for _LabeledContentStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle);
  }
  return result;
}

void type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, &type metadata for LabelStyleConfiguration.Title);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, (void (*)(void))lazy protocol witness table accessor for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(255, &lazy cache variable for type metadata for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for LabeledContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

uint64_t DragGesture.init(minimumDistance:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  *(unsigned char *)(a2 + 49) = static _EventDirections.all;
  *(double *)a2 = a3;

  return outlined init with take of CoordinateSpace(a1, a2 + 8);
}

uint64_t DragGesture.Value.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t DragGesture.Value.time.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*DragGesture.Value.time.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DragGesture.Value.location.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for DragGesture.Value(0) + 20));
}

uint64_t DragGesture.Value.location.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for DragGesture.Value(0);
  uint64_t v6 = (double *)(v2 + *(int *)(result + 20));
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*DragGesture.Value.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DragGesture.Value.startLocation.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for DragGesture.Value(0) + 24));
}

uint64_t DragGesture.Value.startLocation.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for DragGesture.Value(0);
  uint64_t v6 = (double *)(v2 + *(int *)(result + 24));
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*DragGesture.Value.startLocation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DragGesture.Value.translation.getter()
{
  uint64_t v1 = type metadata accessor for DragGesture.Value(0);
  return *(double *)(v0 + *(int *)(v1 + 20)) - *(double *)(v0 + *(int *)(v1 + 24));
}

double DragGesture.Value.predictedEndLocation.getter()
{
  uint64_t v1 = type metadata accessor for DragGesture.Value(0);
  __asm { FMOV            V2.2D, #0.25 }
  *(void *)&double result = *(_OWORD *)&vaddq_f64(*(float64x2_t *)(v0 + *(int *)(v1 + 20)), vmulq_f64(*(float64x2_t *)(v0 + *(int *)(v1 + 28)), _Q2));
  return result;
}

double DragGesture.Value.predictedEndTranslation.getter()
{
  uint64_t v1 = (int *)type metadata accessor for DragGesture.Value(0);
  __asm { FMOV            V2.2D, #0.25 }
  *(void *)&double result = *(_OWORD *)&vaddq_f64(vsubq_f64(*(float64x2_t *)(v0 + v1[5]), *(float64x2_t *)(v0 + v1[6])), vmulq_f64(*(float64x2_t *)(v0 + v1[7]), _Q2));
  return result;
}

double DragGesture.minimumDistance.getter()
{
  return *(double *)v0;
}

void DragGesture.minimumDistance.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*DragGesture.minimumDistance.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t DragGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace(v1 + 8, a1);
}

uint64_t DragGesture.coordinateSpace.setter(uint64_t a1)
{
  return outlined assign with take of CoordinateSpace(a1, v1 + 8);
}

uint64_t (*DragGesture.coordinateSpace.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static DragGesture._makeGesture(gesture:inputs:)()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

uint64_t DragGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 1), (uint64_t)v7);
  char v4 = *((unsigned char *)v1 + 49);
  uint64_t v6 = v3;
  v7[41] = v4;
  outlined init with copy of SpatialDragGesture((uint64_t)&v6, a1);
  *(void *)(a1 + 56) = 4;
  *(unsigned char *)(a1 + 64) = 0;
  return outlined destroy of SpatialDragGesture((uint64_t)&v6);
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance DragGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 1), (uint64_t)v7);
  char v4 = *((unsigned char *)v1 + 49);
  uint64_t v6 = v3;
  v7[41] = v4;
  outlined init with copy of SpatialDragGesture((uint64_t)&v6, a1);
  *(void *)(a1 + 56) = 4;
  *(unsigned char *)(a1 + 64) = 0;
  return outlined destroy of SpatialDragGesture((uint64_t)&v6);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DragGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance DragGesture()
{
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:allowedDirections:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v11 = *a2;
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  *(unsigned char *)(a5 + 49) = static _EventDirections.all;
  *(double *)a5 = a6;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v13, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  uint64_t result = outlined init with take of CoordinateSpace((uint64_t)v13, a5 + 8);
  *(unsigned char *)(a5 + 49) = v11;
  return result;
}

uint64_t SpatialDragGesture.body.getter()
{
  LOBYTE(v10[0]) = 0;
  type metadata accessor for EventListener<TouchEvent>();
  lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>);
  Gesture.eventFilter<A>(forType:_:)();
  outlined init with copy of CoordinateSpace(v0 + 8, (uint64_t)v10);
  uint64_t v1 = MEMORY[0x1E4F40910];
  outlined init with copy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v10, (uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, MEMORY[0x1E4F40910], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CoordinateSpaceGesture<TouchEvent>);
  v7[0] = v5;
  long long v8 = v6;
  outlined destroy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, v1, (uint64_t (*)(void))type metadata accessor for CoordinateSpaceGesture<TouchEvent>);
  outlined init with copy of SpatialDragGesture(v0, (uint64_t)v10);
  uint64_t v2 = swift_allocObject();
  long long v3 = v10[1];
  *(_OWORD *)(v2 + 16) = v10[0];
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v10[2];
  *(_WORD *)(v2 + 64) = v11;
  outlined init with copy of DragGesture.Value((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
  long long v12 = partial apply for closure #2 in SpatialDragGesture.body.getter;
  uint64_t v13 = v2;
  outlined destroy of DragGesture.Value((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
  v7[0] = 2;
  type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>();
  lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>);
  Gesture.dependency(_:)();
  return outlined destroy of DragGesture.Value((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>);
}

BOOL closure #1 in SpatialDragGesture.body.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 1;
}

uint64_t closure #2 in SpatialDragGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a2 + 96);
  __int16 v4 = *(_WORD *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  void v9[2] = *(_OWORD *)(a2 + 32);
  _OWORD v9[3] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  void v9[4] = *(_OWORD *)(a2 + 64);
  v9[5] = v7;
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return SpatialDragGesture.phase(state:event:)(a1, (uint64_t)v9, a3);
}

uint64_t SpatialDragGesture.phase(state:event:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v102 = (char *)&v90 - v8;
  uint64_t v9 = type metadata accessor for DragGesture.Value(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v101 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = *(unsigned __int8 *)(a2 + 105);
  if ((v13 - 1) < 2)
  {
    uint64_t v93 = v3;
    uint64_t v94 = a3;
    uint64_t v15 = *(uint64_t *)a2;
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v17 = *(uint64_t *)(a2 + 24);
    uint64_t v19 = *(uint64_t *)(a2 + 32);
    uint64_t v18 = *(void *)(a2 + 40);
    uint64_t v20 = *(void *)(a2 + 48);
    uint64_t v21 = *(void *)(a2 + 56);
    uint64_t v23 = *(void *)(a2 + 64);
    uint64_t v22 = *(void *)(a2 + 72);
    uint64_t v24 = *(void *)(a2 + 80);
    uint64_t v25 = *(void *)(a2 + 88);
    uint64_t v26 = v20;
    uint64_t v27 = *(void *)(a2 + 96);
    uint64_t v28 = v18;
    double v29 = *(double *)&v19;
    int v30 = *(unsigned __int8 *)(a2 + 104);
    double v31 = *(double *)&v17;
    double v32 = *(double *)&v15;
    long long v33 = *(char **)(a1 + 16);
    uint64_t v95 = v11;
    uint64_t v97 = v10;
    uint64_t v110 = v17;
    uint64_t v109 = v16;
    uint64_t v108 = v14;
    uint64_t v107 = v15;
    uint64_t v106 = v23;
    uint64_t v105 = v22;
    uint64_t v111 = v24;
    uint64_t v104 = v25;
    uint64_t v103 = v27;
    int v96 = v30;
    uint64_t v92 = v20;
    uint64_t v100 = v20;
    uint64_t v99 = v21;
    if (v33 == (char *)1)
    {
      char v86 = v30;
      uint64_t v34 = v17;
      uint64_t v35 = v19;
      uint64_t v90 = v18;
      uint64_t v36 = v18;
      long long v33 = (char *)v16;
      uint64_t v37 = v19;
      unsigned __int8 v38 = v14;
      uint64_t v39 = v15;
      uint64_t v40 = v22;
      uint64_t v91 = v37;
      uint64_t v41 = v27;
      outlined copy of GesturePhase<TouchEvent>(v15, v14, v16, v34, v35, v36, v20, v21, v23, v22, v24, v25, v27, v86, v13);
      uint64_t v42 = v39;
      unsigned __int8 v43 = v38;
      double v44 = v31;
      double v45 = v29;
      uint64_t v46 = v28;
      uint64_t v47 = v21;
      uint64_t v48 = v40;
      uint64_t v19 = v91;
      uint64_t v49 = v111;
      uint64_t v50 = v25;
      uint64_t v51 = v41;
      char v52 = v96;
      char v53 = v96;
      uint64_t v18 = v90;
      int v54 = v13;
    }
    else
    {
      char v53 = *(unsigned char *)(a1 + 104);
      uint64_t v50 = *(void *)(a1 + 88);
      uint64_t v51 = *(void *)(a1 + 96);
      uint64_t v48 = *(void *)(a1 + 72);
      uint64_t v49 = *(void *)(a1 + 80);
      uint64_t v47 = *(void *)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      uint64_t v46 = *(void *)(a1 + 40);
      uint64_t v26 = *(void *)(a1 + 48);
      double v44 = *(double *)(a1 + 24);
      double v45 = *(double *)(a1 + 32);
      unsigned __int8 v43 = *(unsigned char *)(a1 + 8);
      uint64_t v42 = *(void *)a1;
      int v54 = v13;
      char v52 = v30;
    }
    uint64_t v57 = (uint64_t)v101;
    uint64_t v58 = (uint64_t)v102;
    *(void *)a1 = v42;
    *(void *)(a1 + 8) = v43;
    *(void *)(a1 + 16) = v33;
    *(double *)(a1 + 24) = v44;
    *(double *)(a1 + 32) = v45;
    *(void *)(a1 + 40) = v46;
    *(void *)(a1 + 48) = v26;
    *(void *)(a1 + 56) = v47;
    *(void *)(a1 + 64) = v23;
    *(void *)(a1 + 72) = v48;
    *(void *)(a1 + 80) = v49;
    *(void *)(a1 + 88) = v50;
    *(void *)(a1 + 96) = v51;
    *(unsigned char *)(a1 + 104) = v53;
    uint64_t v59 = type metadata accessor for SpatialDragGesture.StateType(0);
    int v60 = (long long *)(a1 + *(int *)(v59 + 24));
    int v98 = v54;
    char v87 = v54;
    uint64_t v61 = v110;
    outlined copy of GesturePhase<TouchEvent>(v107, v108, v109, v110, v19, v18, v100, v99, v106, v105, v111, v104, v103, v52, v87);
    uint64_t v102 = v33;
    swift_retain();
    specialized VelocitySampler.addSample(_:time:)(v31, v29, v32);
    Date.init(timeIntervalSinceReferenceDate:)();
    long long v62 = v60[5];
    long long v119 = v60[4];
    long long v120 = v62;
    long long v121 = v60[6];
    uint64_t v122 = *((void *)v60 + 14);
    long long v63 = v60[1];
    long long v115 = *v60;
    long long v64 = v60[2];
    long long v65 = v60[3];
    long long v116 = v63;
    long long v117 = v64;
    long long v118 = v65;
    double v66 = specialized VelocitySampler.velocity.getter();
    uint64_t v67 = v19;
    uint64_t v68 = v97;
    uint64_t v69 = (uint64_t *)(v57 + *(int *)(v97 + 20));
    *uint64_t v69 = v61;
    v69[1] = v67;
    int v70 = (double *)(v57 + *(int *)(v68 + 24));
    *int v70 = v44;
    v70[1] = v45;
    uint64_t v71 = v57 + *(int *)(v68 + 28);
    *(double *)uint64_t v71 = v66;
    *(void *)(v71 + 8) = v72;
    uint64_t v73 = a1 + *(int *)(v59 + 20);
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v73, v58, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CategoryGesture<DragGesture.Value>);
    uint64_t v74 = v95;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v58, 1, v68) == 1)
    {
      char v75 = v96;
      uint64_t v76 = v67;
      char v77 = v98;
      uint64_t v78 = v100;
      uint64_t v79 = v99;
      outlined destroy of CoordinateSpaceGesture<TouchEvent>(v58, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<DragGesture.Value>);
      double v80 = *(double *)v93;
      if (*(double *)v93 <= 0.0)
      {
        char v88 = v77;
        char v83 = v75;
        outlined consume of GesturePhase<TouchEvent>(v107, v108, v109, v110, v76, v18, v78, v79, v106, v105, v111, v104, v103, v75, v88);
      }
      else
      {
        CGSize.magnitude.getter();
        if (v80 > v81)
        {
          outlined consume of GesturePhase<TouchEvent>(v107, v108, v109, v110, v76, v18, v78, v79, v106, v105, v111, v104, v103, v75, v77);
LABEL_20:
          swift_release();
          outlined destroy of DragGesture.Value(v57, type metadata accessor for DragGesture.Value);
          if (v98 != 2) {
            outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v73, v94, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CategoryGesture<DragGesture.Value>);
          }
          type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<DragGesture.Value>, MEMORY[0x1E4F3F5F8]);
          return swift_storeEnumTagMultiPayload();
        }
        LOBYTE(v112[0]) = *(unsigned char *)(v93 + 49);
        char v85 = CGSize.withinRange(axes:rangeCosine:)((unsigned __int8 *)v112, 0.5);
        char v89 = v77;
        char v83 = v75;
        outlined consume of GesturePhase<TouchEvent>(v107, v108, v109, v110, v76, v18, v78, v79, v106, v105, v111, v104, v103, v75, v89);
        if ((v85 & 1) == 0) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      char v82 = v96;
      uint64_t v78 = v100;
      uint64_t v79 = v99;
      outlined consume of GesturePhase<TouchEvent>(v107, v108, v109, v110, v67, v18, v100, v99, v106, v105, v111, v104, v103, v96, v98);
      outlined destroy of CoordinateSpaceGesture<TouchEvent>(v58, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<DragGesture.Value>);
      uint64_t v76 = v67;
      char v83 = v82;
    }
    outlined destroy of CoordinateSpaceGesture<TouchEvent>(v73, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<DragGesture.Value>);
    outlined init with copy of DragGesture.Value(v57, v73, type metadata accessor for DragGesture.Value);
    uint64_t v84 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v73, 0, 1, v97);
    v112[0] = v107;
    v112[1] = v108;
    v112[2] = v109;
    v112[3] = v110;
    v112[4] = v76;
    v112[5] = v18;
    v112[6] = v78;
    v112[7] = v79;
    v112[8] = v106;
    v112[9] = v105;
    v112[10] = v111;
    v112[11] = v104;
    v112[12] = v103;
    char v113 = v83;
    char v114 = v98;
    MEMORY[0x1F4188790](v84);
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(0, &lazy cache variable for type metadata for GesturePhase<TouchEvent>, MEMORY[0x1E4F3F5F8]);
    GesturePhase.withValue<A>(_:)();
    swift_release();
    return outlined destroy of DragGesture.Value(v57, type metadata accessor for DragGesture.Value);
  }
  if (*(unsigned char *)(a2 + 105) || !*(unsigned char *)(v3 + 49))
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<DragGesture.Value>, MEMORY[0x1E4F3F5F8]);
  }
  else
  {
    uint64_t v55 = type metadata accessor for SpatialDragGesture.StateType(0);
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>(a1 + *(int *)(v55 + 20), a3, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CategoryGesture<DragGesture.Value>);
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<DragGesture.Value>, MEMORY[0x1E4F3F5F8]);
  }

  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance SpatialDragGesture.StateType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(unsigned char *)(a2 + 104) = 0;
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for DragGesture.Value(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a2 + *(int *)(a1 + 24);
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 24) = 1;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 56) = 1;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 80) = 0;
  *(void *)(v7 + 64) = 0;
  *(unsigned char *)(v7 + 88) = 1;
  *(void *)(v7 + 96) = 0;
  *(unsigned char *)(v7 + 104) = 1;
  *(void *)(v7 + 112) = 0x3FE8000000000000;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SpatialDragGesture()
{
  return MEMORY[0x1F41010D8]();
}

BOOL specialized static DragGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for DragGesture.Value(0);
  uint64_t v5 = v4[5];
  double v6 = *(double *)(a1 + v5);
  double v7 = *(double *)(a1 + v5 + 8);
  uint64_t v8 = (double *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1]) {
    return 0;
  }
  uint64_t v10 = v4[6];
  double v11 = *(double *)(a1 + v10);
  double v12 = *(double *)(a1 + v10 + 8);
  int v13 = (double *)(a2 + v10);
  if (v11 != *v13 || v12 != v13[1]) {
    return 0;
  }
  uint64_t v16 = v4[7];
  double v17 = *(double *)(a1 + v16);
  double v18 = *(double *)(a1 + v16 + 8);
  uint64_t v19 = (double *)(a2 + v16);
  double v20 = v19[1];
  BOOL v21 = v17 == *v19;
  return v18 == v20 && v21;
}

uint64_t outlined assign with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type DragGesture and conformance DragGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type DragGesture and conformance DragGesture;
  if (!lazy protocol witness table cache variable for type DragGesture and conformance DragGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragGesture and conformance DragGesture;
  if (!lazy protocol witness table cache variable for type DragGesture and conformance DragGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture);
  }
  return result;
}

uint64_t outlined init with copy of SpatialDragGesture(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SpatialDragGesture(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return a1;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in DragGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in DragGesture()
{
  return &protocol witness table for DragGesture;
}

uint64_t *initializeBufferWithCopyOfBuffer for DragGesture.Value(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for DragGesture.Value(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  uint64_t v10 = a3[6];
  double v11 = (void *)(a1 + v10);
  double v12 = (void *)(a2 + v10);
  *double v11 = *v12;
  v11[1] = v12[1];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  return a1;
}

uint64_t initializeWithTake for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878DFD68);
}

uint64_t sub_1878DFD68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DragGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878DFDE8);
}

uint64_t sub_1878DFDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1878DFE58()
{
  return lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>);
}

void type metadata accessor for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>)
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<DragGesture.Value>, MEMORY[0x1E4F3FAC8]);
    lazy protocol witness table accessor for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>();
    lazy protocol witness table accessor for type SpatialDragGesture and conformance SpatialDragGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<DragGesture.Value>, MEMORY[0x1E4F3FAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialDragGesture and conformance SpatialDragGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialDragGesture and conformance SpatialDragGesture;
  if (!lazy protocol witness table cache variable for type SpatialDragGesture and conformance SpatialDragGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialDragGesture and conformance SpatialDragGesture);
  }
  return result;
}

ValueMetadata *type metadata accessor for DragGesture.Value.Platform()
{
  return &type metadata for DragGesture.Value.Platform;
}

uint64_t assignWithTake for DragGesture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragGesture(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DragGesture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 50) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for SpatialDragGesture()
{
  return &unk_1ED4298F8;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SpatialDragGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for EventListener<TouchEvent>()
{
  if (!lazy cache variable for type metadata for EventListener<TouchEvent>)
  {
    lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
    unint64_t v0 = type metadata accessor for EventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<TouchEvent>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1878E01E8()
{
  if (!*(unsigned char *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SpatialDragGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in SpatialDragGesture.body.getter(a1, a2, a3);
}

uint64_t outlined init with copy of DragGesture.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>)
  {
    uint64_t v0 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4F40910];
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, MEMORY[0x1E4F40910]);
    type metadata accessor for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>, &lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, v0);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>);
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>)
  {
    uint64_t v0 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4F3F4E8];
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(255, &lazy cache variable for type metadata for EventFilter<TouchEvent>, MEMORY[0x1E4F3F4E8]);
    type metadata accessor for EventListener<TouchEvent>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type EventFilter<TouchEvent> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<TouchEvent>, v0);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>);
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>)
  {
    type metadata accessor for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>();
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>)
  {
    type metadata accessor for SpatialDragGesture.StateType(255);
    type metadata accessor for DragGesture.Value(255);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type SpatialDragGesture.StateType and conformance SpatialDragGesture.StateType, (void (*)(uint64_t))type metadata accessor for SpatialDragGesture.StateType);
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>);
    }
  }
}

uint64_t type metadata accessor for SpatialDragGesture.StateType(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SpatialDragGesture.StateType);
}

void type metadata accessor for CategoryGesture<DragGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for DragGesture.Value(255);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined copy of GesturePhase<TouchEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15)
{
  if (a15 == 2 || a15 == 1) {
    return swift_retain();
  }
  if (!a15) {
    return outlined copy of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<TouchEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<TouchEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined consume of GesturePhase<TouchEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15)
{
  if (a15 == 2 || a15 == 1) {
    return swift_release();
  }
  if (!a15) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in SpatialDragGesture.phase(state:event:)@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DragGesture.Value(*(void *)(v1 + 16), a1, type metadata accessor for DragGesture.Value);
}

void type metadata accessor for CoordinateSpaceGesture<TouchEvent>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for TouchEvent);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SpatialDragGesture.StateType(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    if (v7 == 1)
    {
      long long v8 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)a2 + 89);
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      long long v10 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v10;
    }
    else
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      swift_retain();
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = (int *)type metadata accessor for DragGesture.Value(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v14, v18);
      *(_OWORD *)&v13[v15[5]] = *(_OWORD *)&v14[v15[5]];
      *(_OWORD *)&v13[v15[6]] = *(_OWORD *)&v14[v15[6]];
      *(_OWORD *)&v13[v15[7]] = *(_OWORD *)&v14[v15[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v19 = *(int *)(a3 + 24);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    long long v22 = *(_OWORD *)(v21 + 80);
    *(_OWORD *)(v20 + 64) = *(_OWORD *)(v21 + 64);
    *(_OWORD *)(v20 + 80) = v22;
    *(_OWORD *)(v20 + 96) = *(_OWORD *)(v21 + 96);
    *(void *)(v20 + 112) = *(void *)(v21 + 112);
    long long v23 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v23;
    long long v24 = *(_OWORD *)(v21 + 48);
    *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
    *(_OWORD *)(v20 + 48) = v24;
  }
  return a1;
}

uint64_t destroy for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != 1) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DragGesture.Value(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for Date();
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v4, v7);
  }
  return result;
}

uint64_t initializeWithCopy for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    swift_retain();
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for DragGesture.Value(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
    *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
    *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
    *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80) = v20;
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(v19 + 96);
  *(void *)(v18 + 112) = *(void *)(v19 + 112);
  long long v21 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v21;
  long long v22 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48) = v22;
  return a1;
}

uint64_t assignWithCopy for SpatialDragGesture.StateType(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 2);
  if (*(void *)(a1 + 16) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *a2;
      long long v8 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      long long v9 = a2[3];
      long long v10 = a2[4];
      long long v11 = a2[5];
      *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of TouchEvent(a1);
    long long v13 = a2[1];
    long long v12 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v12;
    long long v15 = a2[4];
    long long v14 = a2[5];
    long long v16 = a2[3];
    *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 48) = v16;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_retain();
    swift_release();
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)a2 + v17;
  long long v20 = (int *)type metadata accessor for DragGesture.Value(0);
  uint64_t v21 = *((void *)v20 - 1);
  long long v22 = *(uint64_t (**)(char *, uint64_t, int *))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      uint64_t v35 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24))(v18, v19, v35);
      uint64_t v36 = v20[5];
      uint64_t v37 = &v18[v36];
      unsigned __int8 v38 = &v19[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = *((void *)v38 + 1);
      uint64_t v39 = v20[6];
      uint64_t v40 = &v18[v39];
      uint64_t v41 = &v19[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = *((void *)v41 + 1);
      uint64_t v42 = v20[7];
      unsigned __int8 v43 = &v18[v42];
      double v44 = &v19[v42];
      *(void *)unsigned __int8 v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      goto LABEL_14;
    }
    outlined destroy of DragGesture.Value((uint64_t)v18, type metadata accessor for DragGesture.Value);
    goto LABEL_13;
  }
  if (v24)
  {
LABEL_13:
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v25 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v18, v19, v25);
  *(_OWORD *)&v18[v20[5]] = *(_OWORD *)&v19[v20[5]];
  *(_OWORD *)&v18[v20[6]] = *(_OWORD *)&v19[v20[6]];
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  (*(void (**)(char *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
LABEL_14:
  uint64_t v27 = *(int *)(a3 + 24);
  uint64_t v28 = a1 + v27;
  double v29 = (long long *)((char *)a2 + v27);
  long long v30 = *v29;
  *(_OWORD *)(v28 + 9) = *(long long *)((char *)v29 + 9);
  *(_OWORD *)uint64_t v28 = v30;
  long long v31 = v29[2];
  *(_OWORD *)(v28 + 41) = *(long long *)((char *)v29 + 41);
  *(_OWORD *)(v28 + 32) = v31;
  long long v32 = v29[4];
  *(_OWORD *)(v28 + 73) = *(long long *)((char *)v29 + 73);
  *(_OWORD *)(v28 + 64) = v32;
  uint64_t v33 = *((void *)v29 + 12);
  *(unsigned char *)(v28 + 104) = *((unsigned char *)v29 + 104);
  *(void *)(v28 + 96) = v33;
  *(void *)(v28 + 112) = *((void *)v29 + 14);
  return a1;
}

uint64_t outlined destroy of TouchEvent(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for SpatialDragGesture.StateType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)a2 + 89);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  long long v8 = a2[3];
  uint64_t v9 = *(int *)(a3 + 20);
  long long v10 = (char *)a1 + v9;
  long long v11 = (char *)a2 + v9;
  a1[2] = a2[2];
  a1[3] = v8;
  long long v12 = (int *)type metadata accessor for DragGesture.Value(0);
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[v12[5]] = *(_OWORD *)&v11[v12[5]];
    *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
    *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  long long v19 = *((_OWORD *)v18 + 5);
  *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
  *((_OWORD *)v17 + 5) = v19;
  *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
  *((void *)v17 + 14) = *((void *)v18 + 14);
  long long v20 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v20;
  long long v21 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v21;
  return a1;
}

uint64_t assignWithTake for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) == 1) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 == 1)
  {
    outlined destroy of TouchEvent(a1);
LABEL_4:
    long long v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
LABEL_6:
  uint64_t v10 = *(int *)(a3 + 20);
  long long v11 = (char *)(a1 + v10);
  long long v12 = (char *)(a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for DragGesture.Value(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v24 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v11, v12, v24);
      *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
      *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
      *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
      goto LABEL_12;
    }
    outlined destroy of DragGesture.Value((uint64_t)v11, type metadata accessor for DragGesture.Value);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
  *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
  *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
  *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
  (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_12:
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 9) = *(_OWORD *)(v22 + 9);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
  *(_OWORD *)(v21 + 41) = *(_OWORD *)(v22 + 41);
  *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
  *(_OWORD *)(v21 + 73) = *(_OWORD *)(v22 + 73);
  *(unsigned char *)(v21 + 104) = *(unsigned char *)(v22 + 104);
  *(void *)(v21 + 96) = *(void *)(v22 + 96);
  *(void *)(v21 + 112) = *(void *)(v22 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878E17EC);
}

uint64_t sub_1878E17EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483645)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878E18D4);
}

uint64_t sub_1878E18D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483645)
  {
    *(void *)(result + 16) = (a2 + 1);
  }
  else
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for SpatialDragGesture.StateType()
{
  type metadata accessor for CategoryGesture<DragGesture.Value>(319, &lazy cache variable for type metadata for DragGesture.Value?, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1878E1A58()
{
  return swift_getOpaqueTypeConformance2();
}

Swift::Void __swiftcall ListTableViewHeaderFooter.prepareForReuse()()
{
  uint64_t v1 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v1 - 8);
  unsigned int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v12.receiver = v0;
  v12.super_class = v4;
  objc_msgSendSuper2(&v12, sel_prepareForReuse);
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v3, (uint64_t *)v13);
  long long v10 = v13[1];
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = &v0[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
  swift_beginAccess();
  *(_WORD *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((_WORD *)v7 + 8) = 0;
  *(_OWORD *)(v7 + 24) = v13[0];
  *(_OWORD *)(v7 + 40) = v10;
  *((void *)v7 + 7) = v5;
  *((void *)v7 + 8) = v6;
  swift_release();
  swift_release();
  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host];
  if (v8)
  {
    __int16 v11 = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>();
    id v9 = v8;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
}

void ListTableViewHeaderFooter.updateConfiguration(using:)()
{
  uint64_t v1 = v0;
  type metadata accessor for UIBackgroundConfiguration?();
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v16 - v6;
  Class isa = UIViewConfigurationState._bridgeToObjectiveC()().super.isa;
  id v9 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v17.receiver = v1;
  v17.super_class = v9;
  objc_msgSendSuper2(&v17, sel__bridgedUpdateConfigurationUsingState_, isa);

  id v10 = objc_msgSend(v1, sel_backgroundView);
  if (!v10)
  {
    MEMORY[0x18C116500]();
    uint64_t v11 = type metadata accessor for UIBackgroundConfiguration();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11))
    {
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v7);
    }
    else
    {
      uint64_t v14 = (void *)UIBackgroundConfiguration.customView.getter();
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v7);
      if (v14)
      {
        type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
        uint64_t v15 = swift_dynamicCastClass();

        if (v15) {
          return;
        }
      }
    }
    if (static SemanticFeature.isEnabled.getter())
    {
      uint64_t v13 = &v1[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
      swift_beginAccess();
      if (*v13) {
        static UIBackgroundConfiguration.listFooter()();
      }
      else {
        static UIBackgroundConfiguration.listHeader()();
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
      MEMORY[0x18C116510](v4);
    }
  }
}

id ListTableViewHeaderFooter.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &v2[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  id v9 = &v2[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
  id v10 = v2;
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v7, (uint64_t *)v17);
  long long v11 = v17[1];
  *(_OWORD *)(v9 + 24) = v17[0];
  *(_WORD *)id v9 = 0;
  *((void *)v9 + 1) = 0;
  *((_WORD *)v9 + 8) = 0;
  *(_OWORD *)(v9 + 40) = v11;
  *(_OWORD *)(v9 + 56) = v17[2];
  *(void *)&v10[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host] = 0;
  *(_DWORD *)&v10[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed] = 0;

  if (a2)
  {
    uint64_t v12 = (void *)MEMORY[0x18C115780](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v16.receiver = v10;
  v16.super_class = v13;
  id v14 = objc_msgSendSuper2(&v16, sel_initWithReuseIdentifier_, v12);

  return v14;
}

id ListTableViewHeaderFooter.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = &v1[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = &v1[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
  uint64_t v8 = v1;
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v5, (uint64_t *)v14);
  long long v9 = v14[1];
  *(_OWORD *)(v7 + 24) = v14[0];
  *(_WORD *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((_WORD *)v7 + 8) = 0;
  *(_OWORD *)(v7 + 40) = v9;
  *(_OWORD *)(v7 + 56) = v14[2];
  *(void *)&v8[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host] = 0;
  *(_DWORD *)&v8[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed] = 0;

  id v10 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v13.receiver = v8;
  v13.super_class = v10;
  id v11 = objc_msgSendSuper2(&v13, sel_initWithCoder_, a1);

  return v11;
}

id ListTableViewHeaderFooter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ListTableViewHeaderFooter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ListTableViewHeaderFooter()
{
  return self;
}

uint64_t associated type witness table accessor for PlatformListViewBase.BackgroundModifier : ViewModifier in ListTableViewHeaderFooter()
{
  return MEMORY[0x1E4F3F738];
}

_UNKNOWN **associated type witness table accessor for PlatformListViewBase.BaseContent : ListCellContent in ListTableViewHeaderFooter()
{
  return &protocol witness table for TableViewListHeaderFooterContent;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance ListTableViewHeaderFooter(uint64_t a1, uint64_t a2)
{
  return specialized ListTableViewHeaderFooter.hostingView<A>(_:willUpdate:)(a2);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance ListTableViewHeaderFooter()
{
  return specialized ListTableViewHeaderFooter.hostingView<A>(_:didChangePreferences:)();
}

void *protocol witness for PlatformListViewBase.host.getter in conformance ListTableViewHeaderFooter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  id v2 = v1;
  return v1;
}

uint64_t specialized ListTableViewHeaderFooter.hostingView<A>(_:didChangePreferences:)()
{
  uint64_t result = PreferenceValues.subscript.getter();
  if (v4 == -1
    || ((int v2 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed), v2 != -1)
      ? (BOOL v3 = v4 == v2)
      : (BOOL v3 = 0),
        !v3))
  {
    *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed) = v4;
  }
  return result;
}

uint64_t specialized ListTableViewHeaderFooter.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>(255, a2, a3, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of ListItemTint(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy352_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t getEnumTagSinglePayload for CollectionViewCellModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 352)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 256);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionViewCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 352) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 352) = 0;
    }
    if (a2) {
      *(void *)(result + 256) = a2 + 1;
    }
  }
  return result;
}

uint64_t CollectionViewHeaderFooterVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  uint64_t v6 = *(unsigned int *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned __int8 v19 = *(unsigned char *)v2;
  unsigned int v8 = v19;
  uint64_t v18 = v4;
  double v9 = *(double *)(v2 + 24);
  v20[0] = v5;
  v20[1] = v6;
  uint64_t v21 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  long long v16 = v17;
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)(&v19, (uint64_t *)&v16, 0, *(unsigned char *)(*(void *)(v2 + 8) + direct field offset for ListCollectionViewCellBase.shouldHugContent), (uint64_t)&v22, v9);
  outlined init with copy of _ViewList_View(a1, (uint64_t)v20);
  unint64_t v10 = *(void *)(v2 + 16);
  specialized ListCollectionViewCellBase.configureContent(_:transaction:)((uint64_t)v20, v10);
  if (v8)
  {
    uint64_t v18 = v4;
    long long v16 = xmmword_18834BB90;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v11 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1) != 1)
    {
      uint64_t v13 = v17;
      if (v8 > 0x3F || (((unint64_t)v17 >> v8) & 1) != 0)
      {
        outlined copy of Text.LineStyle?(v17, *((uint64_t *)&v17 + 1));
        specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v11, v10);
        outlined consume of Text.LineStyle?(v13, v11);
        outlined consume of Text.LineStyle?(v13, v11);
        goto LABEL_8;
      }
      outlined consume of Text.LineStyle?(v17, *((uint64_t *)&v17 + 1));
    }
    specialized ListCollectionViewCellBase.backgroundHost.setter(0);
  }
  else
  {
    *(void *)&long long v16 = v4;
    uint64_t v18 = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v12 = swift_retain();
    specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v12, v10);
    swift_release_n();
  }
LABEL_8:
  outlined destroy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v20);
  id v14 = (uint64_t *)(*(void *)(v2 + 8) + direct field offset for ListCollectionViewCellBase.viewListID);
  *id v14 = v5 | (v6 << 32);
  v14[1] = v7;
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t key path getter for EnvironmentValues.textCase : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.textCase.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.textCase : EnvironmentValues()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t key path getter for EnvironmentValues.uiKitCellState : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.uiKitCellState.getter();
  *a1 = result & 1;
  a1[1] = BYTE1(result) & 1;
  a1[2] = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.uiKitCellState : EnvironmentValues()
{
  return EnvironmentValues.uiKitCellState.setter();
}

uint64_t key path getter for EnvironmentValues.headerProminence : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.headerProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1878E2D94@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.headerProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.headerProminence : EnvironmentValues()
{
  return EnvironmentValues.headerProminence.setter();
}

uint64_t sub_1878E2E10()
{
  return EnvironmentValues.headerProminence.setter();
}

uint64_t sub_1878E2E48@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.uiKitCellState.getter();
  *a1 = result & 1;
  a1[1] = BYTE1(result) & 1;
  a1[2] = BYTE2(result) & 1;
  return result;
}

uint64_t sub_1878E2E98()
{
  return EnvironmentValues.uiKitCellState.setter();
}

uint64_t sub_1878E2EFC(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 48);
  _OWORD v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v1;
  v4[4] = *(_OWORD *)(a1 + 64);
  char v5 = *(unsigned char *)(a1 + 80);
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  outlined retain of ListContentStyling((uint64_t)v4);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return outlined release of ListContentStyling((uint64_t)v4);
}

uint64_t sub_1878E2F5C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = EnvironmentValues.resolvedTintColor.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t outlined retain of ListContentStyling(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v2);
  return a1;
}

uint64_t outlined release of ListContentStyling(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  swift_release();
  swift_release();
  outlined consume of Transaction?(v2);
  return a1;
}

void sub_1878E3050(uint64_t a1@<X8>)
{
  *(double *)a1 = EnvironmentValues.effectiveListRowInsets.getter();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_1878E3090()
{
  return EnvironmentValues.effectiveListRowInsets.setter();
}

uint64_t sub_1878E30BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.textCase.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1878E3100()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_1878E3138()
{
  return swift_deallocObject();
}

id RenderBoxView.init(coder:)(void *a1)
{
  v1[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = 0;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for RenderBoxView();
  id v3 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    id v6 = objc_msgSend(v5, sel_layer);
    objc_msgSend(v6, sel_setDelegate_, v5);
    id v7 = v6;
    objc_msgSend(v7, sel_setOpaque_, objc_msgSend(v5, sel_isOpaque));

    a1 = v7;
  }

  return v4;
}

id RenderBoxView.__deallocating_deinit()
{
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_waitUntilAsyncRenderingCompleted);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for RenderBoxView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t RenderBoxLayer.needsSynchronousUpdate.getter()
{
  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType();
  if (!objc_msgSendSuper2(&v4, sel_needsSynchronousUpdate)) {
    return 0;
  }
  id v1 = objc_msgSend(v0, sel_delegate);
  if (!v1) {
    return 1;
  }
  if (v1[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] == 1) {
    uint64_t v2 = (uint64_t)objc_msgSend(v0, sel_hasBeenCommitted);
  }
  else {
    uint64_t v2 = 1;
  }
  swift_unknownObjectRelease();
  return v2;
}

void WindowStyle.configureWindow(_:)()
{
}

void View.presentedWindowStyle<A>(_:)()
{
}

uint64_t dispatch thunk of WindowStyle.configureWindow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1878E3574(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void Scene.windowStyle<A>(_:)()
{
}

uint64_t static EnvironmentWritingSceneModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for EnvironmentWritingSceneModifier();
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = &v19[-v6];
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ChildEnvironment();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v19[-v10];
  LODWORD(v23) = *a1;
  type metadata accessor for _GraphValue();
  int v12 = _GraphValue.value.getter();
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  uint64_t v15 = a2[5];
  uint64_t v23 = *a2;
  int v24 = v13;
  uint64_t v25 = v14;
  long long v26 = *(_OWORD *)(a2 + 3);
  uint64_t v27 = v15;
  LODWORD(a1) = _GraphInputs.environment.getter();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v7, 1, 1, v4);
  ChildEnvironment.init(modifier:environment:oldModifier:)(v12, (int)a1, (uint64_t)v7, v11);
  uint64_t v21 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v20, v8, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  (*(void (**)(_DWORD *, uint64_t))(v9 + 8))(v11, v8);
  return _GraphInputs.environment.setter();
}

uint64_t ChildEnvironment.init(modifier:environment:oldModifier:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for ChildEnvironment() + 40);
  uint64_t v6 = type metadata accessor for Optional();
  id v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t protocol witness for EnvironmentWritingModifier.value.getter in conformance EnvironmentWritingSceneModifier<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnvironmentWritingSceneModifier<A>(_DWORD *a1, uint64_t *a2)
{
  return static EnvironmentWritingSceneModifier._makeInputs(modifier:inputs:)(a1, a2);
}

uint64_t Scene.environment<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = type metadata accessor for EnvironmentWritingSceneModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a2, AssociatedTypeWitness, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, AssociatedTypeWitness);
  Scene.modifier<A>(_:)(v16, a3, v12, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t type metadata accessor for EnvironmentWritingSceneModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1878E3B40()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for EnvironmentWritingSceneModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentWritingSceneModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for EnvironmentWritingSceneModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  objc_super v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentWritingSceneModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for EnvironmentWritingSceneModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878E4374);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v50 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v56 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1F4188790](v6);
  double v45 = (char *)&OutputValue - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v53 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v52 = (char *)&OutputValue - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unsigned int v12 = (char *)&OutputValue - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&OutputValue - v14;
  uint64_t v17 = *(int *)(v16 + 48);
  uint64_t Value = AGGraphGetValue();
  char v20 = v19;
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v21(v15, Value, v3);
  char v22 = v20 & 1;
  v15[v17] = v20 & 1;
  uint64_t v23 = (uint64_t *)AGGraphGetValue();
  uint64_t v24 = v23[1];
  uint64_t v59 = *v23;
  uint64_t v60 = v24;
  char v61 = v25 & 1;
  uint64_t v54 = TupleTypeMetadata2;
  uint64_t v55 = v15;
  if (v25)
  {
    uint64_t v34 = *(int *)(TupleTypeMetadata2 + 48);
    v21(v12, (uint64_t)v15, v3);
    v12[v34] = v22;
    goto LABEL_6;
  }
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v26 = TupleTypeMetadata2;
  uint64_t v27 = v2;
  uint64_t v28 = *(int *)(v26 + 48);
  v21(v12, (uint64_t)v15, v3);
  v12[v28] = v22;
  uint64_t v2 = v27;
  if (!OutputValue)
  {
LABEL_6:
    uint64_t v35 = *(void (**)(char *, uint64_t))(v53 + 8);
    swift_retain();
    swift_retain();
    v35(v12, v54);
    uint64_t v29 = v56;
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  uint64_t v29 = v56;
  char v30 = getter of modifierNeedsUpdate #1 in ChildEnvironment.updateValue()((uint64_t)v12, v27, v3, v56);
  uint64_t v31 = v54;
  long long v32 = *(void (**)(char *, uint64_t))(v53 + 8);
  v32(v12, v54);
  if ((v30 & 1) == 0)
  {
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v32)(v55, v31);
  }
LABEL_7:
  uint64_t v36 = swift_checkMetadataState();
  uint64_t v37 = v45;
  unsigned __int8 v38 = v55;
  (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v3, v29);
  specialized EnvironmentValues.subscript.setter(v37, v36, v36, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v49);
  uint64_t v57 = v59;
  uint64_t v58 = v60;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  uint64_t v39 = v2 + *(int *)(v50 + 40);
  uint64_t v40 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
  uint64_t v41 = v46;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  unsigned __int8 v43 = v52;
  v42(v52, v38, v3);
  v42((char *)v39, v43, v3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v39, 0, 1, v3);
}

uint64_t getter of modifierNeedsUpdate #1 in ChildEnvironment.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v6 = a1;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned __int8 v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v41 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v37 = (char *)&v37 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  double v17 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8);
  char v19 = (char *)&v37 - v18;
  uint64_t v21 = *(int *)(v20 + 56);
  char v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v22((char *)&v37 - v18, v6, a3, v17);
  uint64_t v42 = v6;
  LODWORD(v6) = *(unsigned __int8 *)(v6 + v21);
  v19[v21] = v6;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v19, a3);
  if (v6 == 1)
  {
    uint64_t v24 = v43 + *(int *)(type metadata accessor for ChildEnvironment() + 40);
    char v25 = 1;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v24, 1, a3))
    {
      uint64_t v26 = v38;
      ((void (*)(char *, uint64_t, uint64_t))v22)(v38, v24, a3);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
      v27(a3, a4);
      v23(v26, a3);
      uint64_t v29 = v40;
      uint64_t v28 = v41;
      uint64_t v30 = (uint64_t)v37;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v13, v41);
      uint64_t v31 = v39;
      uint64_t v32 = ((uint64_t (*)(uint64_t, uint64_t))v27)(a3, a4);
      MEMORY[0x1F4188790](v32);
      *(&v37 - 4) = (char *)v28;
      *(&v37 - 3) = v31;
      *((_DWORD *)&v37 - 4) = 3;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v30, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v37 - 6), v28, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v33);
      char v34 = v44;
      uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
      v35(v31, v28);
      v35((char *)v30, v28);
      char v25 = v34 ^ 1;
    }
  }
  else
  {
    char v25 = 0;
  }
  return v25 & 1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ChildEnvironment<A>()
{
  return specialized ChildEnvironment.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ChildEnvironment<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t type metadata completion function for ChildEnvironment()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChildEnvironment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 8) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v15 = *v16;
    double v17 = (void *)(((unint64_t)v15 + v8 + 4) & ~v8);
    uint64_t v18 = (const void *)(((unint64_t)v16 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v17, v18, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    double v17 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v16 = v7 + 8;
    v17(v9, v6);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

_DWORD *initializeWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    double v17 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v16 = v7 + 8;
    v17(v9, v6);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChildEnvironment(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + 8) & ~v7);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                               + v7
                                                               + 4) & ~v7);
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ChildEnvironment(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 8) & ~v10);
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1878E5A1CLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          unint64_t v19 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10;
          uint64_t v20 = a2 + 1;
          uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v21(v19, v20);
        }
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in ChildEnvironment<A>()
{
  return swift_getWitnessTable();
}

unint64_t specialized ChildEnvironment.description.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

void DragDropDefaultPreviewResponder.contentShapeKind.getter(void *a1@<X8>)
{
  *a1 = 2;
}

double DragDropDefaultPreviewResponder.previewSize.getter()
{
  return *(double *)(v0 + 224);
}

void DragDropDefaultPreviewResponder.makePreview()()
{
}

Swift::Void __swiftcall DragDropDefaultPreviewResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._uint64_t countAndFlagsBits = 0x72756F5367617264;
  v1._object = (void *)0xEA00000000006563;
  String.append(_:)(v1);
}

uint64_t DragDropDefaultPreviewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DragDropDefaultPreviewResponder()
{
  return type metadata accessor for DragDropDefaultPreviewResponder();
}

void CustomPreviewResponder.preview.didset(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = class metadata base offset for CustomPreviewResponder;
  uint64_t v4 = (uint64_t *)(*v1 + class metadata base offset for CustomPreviewResponder);
  uint64_t v5 = *v4;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v9 = (char *)&v18 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  BOOL v13 = (char *)&v18 - v12;
  unsigned int v14 = *(void **)((char *)v1 + v4[3]);
  if (v14)
  {
    unsigned int v15 = (char *)v1 + *(void *)(v3 + v2 + 16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
    unsigned int v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    if (v16((uint64_t)v9, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, v5);
      if (v16(v18, 1, v5) != 1)
      {
        id v17 = v14;
        specialized _UIHostingView.rootView.setter((uint64_t)v13);
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v5);
    }
  }
}

uint64_t CustomPreviewResponder.previewHost.getter()
{
  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = class metadata base offset for CustomPreviewResponder;
  uint64_t v4 = v2 + class metadata base offset for CustomPreviewResponder;
  uint64_t v5 = *(void *)(v2 + class metadata base offset for CustomPreviewResponder);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v9 = (objc_class *)((char *)&v19 - v8);
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void **)((char *)v1 + v10);
  if (v11)
  {
    uint64_t v12 = *(void **)((char *)v1 + v10);
LABEL_5:
    id v18 = v11;
    return (uint64_t)v12;
  }
  BOOL v13 = (char *)v1 + *(void *)(v3 + v2 + 16);
  swift_beginAccess();
  (*(void (**)(objc_class *, char *, uint64_t))(v7 + 16))(v9, v13, v6);
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(objc_class *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v5);
  if (result != 1)
  {
    type metadata accessor for _UIHostingView();
    unsigned int v16 = specialized _UIHostingView.__allocating_init(rootView:)(v9);
    (*(void (**)(objc_class *, uint64_t))(v14 + 8))(v9, v5);
    _UIHostingView.safeAreaRegions.setter(0);
    id v17 = *(void **)((char *)v1 + v10);
    *(void *)((char *)v1 + v10) = v16;
    uint64_t v12 = v16;

    uint64_t v11 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

double CustomPreviewResponder.previewSize.getter()
{
  uint64_t v0 = (void *)CustomPreviewResponder.previewHost.getter();
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  *(void *)&double v1 = *(_OWORD *)&ViewRendererHost.idealSize()();

  return v1;
}

UIDragPreviewParameters __swiftcall CustomPreviewResponder.prepareHostForPreview()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1720]), sel_init);
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = objc_msgSend(v3, sel_clearColor);
  objc_msgSend(v4, sel_setBackgroundColor_, v5);

  objc_msgSend(v4, sel__setPreviewMode_, *(void *)(v1 + 304));
  UIViewSnapshotResponder.contentPath.getter((uint64_t)v14);
  uint64_t v6 = v14[0];
  uint64_t v7 = v14[1];
  uint64_t v8 = v14[2];
  uint64_t v9 = v14[3];
  unsigned __int8 v10 = v15;
  uint64_t v11 = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v14, (uint64_t)v16, &lazy cache variable for type metadata for Path?);
  if (v16[32] != 255)
  {
    v17[0] = v6;
    v17[1] = v7;
    v17[2] = v8;
    _OWORD v17[3] = v9;
    unsigned __int8 v18 = v10;
    type metadata accessor for UIBezierPath();
    outlined copy of Path.Storage(v6, v7, v8, v9, v10);
    id v12 = UIBezierPath.init(_:)((uint64_t)v17);
    objc_msgSend(v4, sel_setVisiblePath_, v12);

    uint64_t v11 = outlined release of Path?((uint64_t)v14, (void (*)(void, void, void, void, void))outlined consume of Path?);
  }
  MEMORY[0x1F4188790](v11);
  static Update.ensure<A>(_:)();
  return (UIDragPreviewParameters)v4;
}

uint64_t closure #1 in CustomPreviewResponder.prepareHostForPreview()(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)CustomPreviewResponder.previewHost.getter();
  double v4 = CustomPreviewResponder.previewSize.getter();
  objc_msgSend(v3, sel_setFrame_, 0.0 - v4 * 0.5, 0.0 - v5 * 0.5, v4);

  uint64_t v6 = (void *)CustomPreviewResponder.previewHost.getter();
  uint64_t v12 = 0;
  LOBYTE(v13) = 1;
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

  uint64_t v7 = (void *)CustomPreviewResponder.previewHost.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();

  uint64_t v8 = ViewGraph.responderNode.getter();
  uint64_t result = swift_release();
  if (v8)
  {
    type metadata accessor for ViewResponder();
    if (!swift_dynamicCastClass()) {
      return swift_release();
    }
    long long v15 = 0u;
    long long v16 = 0u;
    char v17 = 6;
    *(void *)&v18[0] = 2;
    hostingViewCoordinateSpace.getter();
    char v14 = 1;
    dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
    outlined destroy of CoordinateSpace((uint64_t)&v12);
    v18[0] = v15;
    v18[1] = v16;
    char v19 = v17;
    outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)&v12);
    outlined release of Path?((uint64_t)&v12, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    char v10 = Path.isEmpty.getter();
    outlined release of Path?((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v10)
    {
      outlined release of Path?((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      return swift_release();
    }
    type metadata accessor for UIBezierPath();
    outlined release of Path?((uint64_t)&v12, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    id v11 = UIBezierPath.init(_:)((uint64_t)v18);
    objc_msgSend(a2, sel_setVisiblePath_, v11, v12, v13);
    swift_release();

    return outlined release of Path?((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  }
  return result;
}

uint64_t CustomPreviewResponder.makePreview()@<X0>(uint64_t a1@<X8>)
{
  Class isa = CustomPreviewResponder.prepareHostForPreview()().super.super.isa;
  uint64_t result = CustomPreviewResponder.previewHost.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = isa;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

void CustomPreviewResponder.__ivar_destroyer()
{
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + class metadata base offset for CustomPreviewResponder + 16);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void **)((char *)v0 + *(void *)(class metadata base offset for CustomPreviewResponder + *v0 + 24));
}

void *CustomPreviewResponder.deinit()
{
  uint64_t v0 = (void *)DefaultLayoutViewResponder.deinit();
  uint64_t v1 = (char *)v0 + *(void *)(class metadata base offset for CustomPreviewResponder + *v0 + 16);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t CustomPreviewResponder.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((uint64_t (*)(void))CustomPreviewResponder.deinit);
}

uint64_t type metadata completion function for CustomPreviewDropResponder()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall CustomPreviewDropResponder.prepareForPreview(contentTypes:defaultPreview:)(Swift::OpaquePointer contentTypes, SwiftUI::DefaultDragDropPreview_optional defaultPreview)
{
  uint64_t v3 = *(void **)defaultPreview.value.base.super.super.isa;
  *(void *)((char *)v2 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 16)) = contentTypes._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 24);
  id v6 = *(id *)((char *)v2 + v4);
  *(void *)((char *)v2 + v4) = v3;
  id v5 = v3;
}

void CustomPreviewDropResponder.makePreview()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v36 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = class metadata base offset for CustomPreviewDropResponder;
  uint64_t v5 = v3 + class metadata base offset for CustomPreviewDropResponder;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v6 - 8);
  *(void *)&long long v35 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v33 = (uint64_t)&v31 - v7;
  uint64_t v8 = type metadata accessor for DropPreview();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = *(void *)((char *)v2 + *(void *)(v5 + 16));
  long long v17 = 0uLL;
  if (!v16)
  {
    char v29 = 0;
    long long v28 = 0uLL;
LABEL_11:
    uint64_t v30 = v36;
    goto LABEL_12;
  }
  unsigned __int8 v18 = *(void (**)(uint64_t, void *))((char *)v2 + *(void *)(v4 + v3 + 32));
  if (v18)
  {
    uint64_t v32 = (char *)&v31 - v15;
    v41[0] = *(void *)((char *)v2 + *(void *)(v4 + v3 + 24));
    char v19 = (void *)v41[0];
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?((uint64_t)v18);
    id v20 = v19;
    v18(v16, v41);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v18);

    swift_bridgeObjectRelease();
    uint64_t v21 = v13;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) != 1)
    {
      char v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      uint64_t v23 = v32;
      v22(v32, v12, v8);
      uint64_t v24 = *(void *)(class metadata base offset for CustomPreviewResponder + *v2 + 24);
      char v25 = *(void **)((char *)v2 + v24);
      *(void *)((char *)v2 + v24) = 0;

      uint64_t v26 = v33;
      DropPreview.view()(v8, v33);
      specialized CustomPreviewResponder.preview.setter(v26);
      (*(void (**)(uint64_t, void))(v34 + 8))(v26, v35);
      Class isa = CustomPreviewResponder.prepareHostForPreview()().super.super.isa;
      v39[0] = CustomPreviewResponder.previewHost.getter();
      v39[1] = isa;
      v39[2] = 0;
      uint64_t v39[3] = 0;
      char v40 = 1;
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v39, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v39, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?);
      if (v41[0])
      {
        long long v35 = *(_OWORD *)&v23[*(int *)(v8 + 40)];
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v8);
        long long v28 = v35;
        char v38 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v8);
        long long v28 = v37[1];
      }
      long long v17 = v37[0];
      char v29 = v38;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(v12, 1, 1, v8, (__n128)0);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  char v29 = 0;
  long long v28 = 0uLL;
  uint64_t v30 = v36;
  long long v17 = 0uLL;
LABEL_12:
  *(_OWORD *)uint64_t v30 = v17;
  *(_OWORD *)(v30 + 16) = v28;
  *(unsigned char *)(v30 + 32) = v29;
}

uint64_t CustomPreviewDropResponder.init(inputs:space:displayList:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 80);
  uint64_t v7 = *a2;
  *(void *)((char *)v2 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 16)) = 0;
  *(void *)((char *)v2 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 24)) = 0;
  uint64_t v8 = (void *)((char *)v2 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 32));
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v11 = v7;
  uint64_t v12 = v3;
  int v13 = v4;
  uint64_t v14 = v5;
  long long v9 = *(_OWORD *)(a1 + 40);
  long long v15 = *(_OWORD *)(a1 + 24);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 72);
  int v19 = v6;
  return CustomPreviewResponder.init(inputs:space:displayList:)(&v12, &v11);
}

uint64_t CustomPreviewDropResponder.__ivar_destroyer()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = *(void *)((char *)v0 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *v0 + 32));

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

void *CustomPreviewDropResponder.deinit()
{
  uint64_t v0 = CustomPreviewResponder.deinit();
  swift_bridgeObjectRelease();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)v0 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *v0 + 32)));
  return v0;
}

uint64_t CustomPreviewDropResponder.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((uint64_t (*)(void))CustomPreviewDropResponder.deinit);
}

uint64_t CustomPreviewResponder.__deallocating_deinit(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustomPreviewDropResponder()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for CustomDropPreviewProvider.prepareForPreview(contentTypes:defaultPreview:) in conformance CustomPreviewDropResponder<A>(Swift::OpaquePointer a1, SwiftUI::DefaultDragDropPreview_optional a2)
{
}

uint64_t specialized CustomPreviewResponder.preview.setter(uint64_t a1)
{
  uint64_t v3 = *v1 + class metadata base offset for CustomPreviewResponder;
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v10[-v6];
  uint64_t v8 = (char *)v1 + *(void *)(v3 + 16);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 24))(v8, a1, v4);
  swift_endAccess();
  CustomPreviewResponder.preview.didset((uint64_t)v7);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t partial apply for closure #1 in CustomPreviewResponder.prepareHostForPreview()()
{
  return closure #1 in CustomPreviewResponder.prepareHostForPreview()(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t type metadata accessor for UIBezierPath()
{
  unint64_t result = lazy cache variable for type metadata for UIBezierPath;
  if (!lazy cache variable for type metadata for UIBezierPath)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  }
  return result;
}

uint64_t outlined release of Path?(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

void protocol witness for PickerContent.body.getter in conformance _OnHoverPickerContent<A>()
{
  swift_getWitnessTable();

  PrimitivePickerContent.body.getter();
}

void PrimitivePickerContent.body.getter()
{
}

uint64_t sub_1878E7334()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v2, v1, v0);
}

void protocol witness for PickerContent.body.getter in conformance _DisabledPickerContent<A>()
{
  swift_getWitnessTable();

  PrimitivePickerContent.body.getter();
}

uint64_t PickerContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v6, v4);
  return NestedDynamicProperties.init(wrappedValue:)((uint64_t)v6, a1, a2);
}

uint64_t _PickerContentBodyAdaptor.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for NestedDynamicProperties();
  double v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, v2, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v8, v4);
}

uint64_t _PickerContentBodyAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v6 = (char *)&v20 - v5;
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v20 - v16;
  _PickerContentBodyAdaptor.content.getter(a1, (uint64_t)v9);
  (*(void (**)(uint64_t))(v21 + 64))(v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v3);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v18)(v17, v11);
}

uint64_t PickerBuilder.Content.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  double v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v18 - v14;
  PickerBuilder.Content.content.getter(a1, (uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 56))(v3, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, AssociatedTypeWitness);
}

uint64_t PickerBuilder.Content.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for NestedDynamicProperties();
  double v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, v2, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v8, v4);
}

uint64_t PickerBuilder.ContentWithFooter.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v37 = a1[4];
  type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E4F40F48], MEMORY[0x1E4F40F40], MEMORY[0x1E4F408B8]);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  uint64_t v39 = v4;
  MEMORY[0x1F4188790](v3);
  long long v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v36 = (char *)&v31 - v7;
  uint64_t v8 = a1[3];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[6];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = v32;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v41 = (char *)&v31 - v19;
  PickerBuilder.Content.content.getter((uint64_t)a1, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 56))(v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v15 + 8);
  v34(v17, AssociatedTypeWitness);
  uint64_t v20 = a1[7];
  uint64_t v21 = v35;
  View._untagged()();
  unint64_t IsAuxiliaryContentTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>();
  double v47[3] = v20;
  void v47[4] = IsAuxiliaryContentTrait;
  uint64_t v23 = v38;
  uint64_t WitnessTable = swift_getWitnessTable();
  char v25 = v36;
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v26 = v39;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v39 + 8);
  v27(v21, v23);
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v17, v41, AssociatedTypeWitness);
  char v46 = 1;
  v47[0] = v17;
  v47[1] = &v46;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v25, v23);
  v47[2] = v21;
  v45[0] = AssociatedTypeWitness;
  type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
  v45[1] = v28;
  v45[2] = v23;
  uint64_t v42 = AssociatedConformanceWitness;
  unint64_t v43 = lazy protocol witness table accessor for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>();
  uint64_t v44 = WitnessTable;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v47, 3uLL, (uint64_t)v45);
  v27(v25, v23);
  char v29 = (uint64_t (*)(char *, uint64_t))v34;
  v34(v41, AssociatedTypeWitness);
  v27(v21, v23);
  return v29(v17, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E4F40F48], MEMORY[0x1E4F40F40], MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E4F40F48], MEMORY[0x1E4F40F40], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
    lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t PickerBuilder.ContentWithFooter.init(content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  NestedDynamicProperties.init(wrappedValue:)(a1, a3, a5);
  uint64_t v8 = type metadata accessor for PickerBuilder.ContentWithFooter();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 68), a2, a4);
}

uint64_t _ConditionalContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = a3;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v12 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for _ConditionalContent.Storage();
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v26 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v26 - v21, v28, v19, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = v26;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v8, v22, v6);
    (*(void (**)(uint64_t))(v27 + 56))(v6);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v22, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 56))(v10, a2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v10);
  }
  swift_storeEnumTagMultiPayload();
  swift_checkMetadataState();
  swift_checkMetadataState();
  return _ConditionalContent.init(__storage:)((uint64_t)v14, v31);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a4;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = a3;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v12 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for _ConditionalContent.Storage();
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v26 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v26 - v21, v28, v19, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = v26;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v8, v22, v6);
    (*(void (**)(uint64_t))(v27 + 56))(v6);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v22, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 56))(v10, a2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v10);
  }
  swift_storeEnumTagMultiPayload();
  swift_checkMetadataState();
  swift_checkMetadataState();
  return _ConditionalContent.init(__storage:)((uint64_t)v14, v31);
}

void _ConditionalContent<>.body.getter()
{
}

{
  swift_getWitnessTable();
  specialized TabContent.bodyError()();
}

uint64_t sub_1878E8654()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <> _ConditionalContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _ConditionalContent<>._identifiedView.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), a3);
}

void protocol witness for PickerContent.body.getter in conformance <> _ConditionalContent<A, B>()
{
}

uint64_t Optional<A>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v7[4] = *(void *)(a1 + 16);
  _OWORD v7[5] = a2;
  _OWORD v7[2] = a2;
  v7[3] = swift_getKeyPath();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in Optional<A>._identifiedView.getter, (uint64_t)v7, MEMORY[0x1E4FBC248], AssociatedTypeWitness, v5, a3);
  return swift_release();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void v7[6];

  _OWORD v7[2] = *(void *)(a1 + 16);
  v7[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>._identifiedView.getter, (uint64_t)v7, MEMORY[0x1E4FBC248], AssociatedTypeWitness, v5, a3);
}

void Optional<A>.body.getter()
{
}

{
  swift_getWitnessTable();
  specialized PickerContent.bodyError()();
}

{
  Optional<A>.body.getter();
}

{
  swift_getWitnessTable();
  specialized TabContent.bodyError()();
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional<A>._identifiedView.getter(a1, *(void *)(a2 - 8), a3);
}

void protocol witness for PickerContent.body.getter in conformance <A> A?()
{
}

uint64_t ForEach<>.init<A>(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v16[1] = a6;
  _OWORD v16[2] = a8;
  uint64_t v11 = *(void *)(a5 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  void v16[4];

  v16[1] = a6;
  _OWORD v16[2] = a8;
  uint64_t v11 = *(void *)(a5 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

{
  return ForEach<>.init<A>(_:id:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  void v16[4];

  v16[1] = a6;
  _OWORD v16[2] = a8;
  uint64_t v11 = *(void *)(a5 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

uint64_t ForEach<>._identifiedView.getter(void *a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, void *, double))(v6 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a1, v4);
  uint64_t v9 = a1[3];
  v15[0] = a1[2];
  uint64_t v8 = v15[0];
  v15[1] = v9;
  uint64_t v10 = a1[5];
  _OWORD v15[2] = a1[4];
  void v15[3] = v10;
  uint64_t v16 = a1[6];
  uint64_t v11 = v16;
  uint64_t v17 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v8;
  v13[3] = v9;
  v13[4] = v10;
  v13[5] = v11;
  void v13[6] = a2;
  v13[7] = KeyPath;
  swift_getAssociatedTypeWitness();
  return ForEach.init<A>(_:transform:)();
}

{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  void *v13;
  void v15[4];
  uint64_t v16;
  uint64_t v17;

  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, void *, double))(v6 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a1, v4);
  uint64_t v9 = a1[3];
  v15[0] = a1[2];
  uint64_t v8 = v15[0];
  v15[1] = v9;
  uint64_t v10 = a1[5];
  _OWORD v15[2] = a1[4];
  void v15[3] = v10;
  uint64_t v16 = a1[6];
  uint64_t v11 = v16;
  uint64_t v17 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v8;
  v13[3] = v9;
  v13[4] = v10;
  v13[5] = v11;
  void v13[6] = a2;
  v13[7] = KeyPath;
  swift_getAssociatedTypeWitness();
  return ForEach.init<A>(_:transform:)();
}

void ForEach<>.body.getter()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Optional<A>.body.getter();
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <> ForEach<A, B, C>(void *a1, uint64_t a2)
{
  return ForEach<>._identifiedView.getter(a1, *(void *)(a2 - 8));
}

void protocol witness for PickerContent.body.getter in conformance <> ForEach<A, B, C>()
{
}

uint64_t ForEach<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  id v22[2] = a2;
  v22[3] = a3;
  v22[1] = a9;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a7;
  unsigned char v22[8] = a8;
  v22[9] = a10;
  v22[10] = a11;
  v22[11] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

{
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void v22[12];

  id v22[2] = a2;
  v22[3] = a3;
  v22[1] = a9;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a7;
  unsigned char v22[8] = a8;
  v22[9] = a10;
  v22[10] = a11;
  v22[11] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

{
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  void v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v26 = a2;
  uint64_t v27 = a3;
  v25[1] = a9;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v21, v18);
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v33 = a10;
  uint64_t v34 = a11;
  uint64_t KeyPath = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach<>.init<A>(_:id:content:)((uint64_t)v20, KeyPath, v26, v27, a4, a6, v23, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

uint64_t key path getter for Identifiable.id : <A, B, C><A1>A.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

__n128 ForEach<>.init<A>(_:content:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  double v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v15;
  *(_OWORD *)a6 = v14;
  *(__n128 *)(a6 + 16) = v15;
  *(_OWORD *)(a6 + 32) = v16;
  *(void *)(a6 + 48) = v17;
  return result;
}

{
  void *v12;
  __n128 result;
  long long v14;
  __n128 v15;
  long long v16;
  uint64_t v17;

  double v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v15;
  *(_OWORD *)a6 = v14;
  *(__n128 *)(a6 + 16) = v15;
  *(_OWORD *)(a6 + 32) = v16;
  *(void *)(a6 + 48) = v17;
  return result;
}

{
  void *v12;
  __n128 result;
  long long v14;
  __n128 v15;
  long long v16;
  uint64_t v17;

  double v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  _sSnySiGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v15;
  *(_OWORD *)a6 = v14;
  *(__n128 *)(a6 + 16) = v15;
  *(_OWORD *)(a6 + 32) = v16;
  *(void *)(a6 + 48) = v17;
  return result;
}

uint64_t Group<A>.init<A>(content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

uint64_t Group<A>._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))(*(void *)(a1 + 16));
}

{
  return (*(uint64_t (**)(void))(a2 + 56))(*(void *)(a1 + 16));
}

void Group<A>.body.getter()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Optional<A>.body.getter();
}

uint64_t sub_1878E8EEC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  return Group<A>._identifiedView.getter(a1, *(void *)(a2 - 8));
}

void protocol witness for PickerContent.body.getter in conformance <A> Group<A>()
{
}

uint64_t Section<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  swift_getKeyPath();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  mapSection<A, B, C, D>(_:transform:)(v2, (void (*)(uint64_t))partial apply for implicit closure #1 in Section<>._identifiedView.getter, v6, AssociatedTypeWitness, v7, a2);
  return swift_release();
}

uint64_t mapSection<A, B, C, D>(_:transform:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a6;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  double v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  __n128 v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, a1, v21, v17);
  uint64_t v22 = type metadata accessor for Section();
  v24(a1 + *(int *)(v22 + 44));
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1 + *(int *)(v22 + 48), a5);
  return Section.init(header:content:footer:)((uint64_t)v19, (uint64_t)v15, (uint64_t)v12, a3, a4, a5, v25);
}

void Section<>.body.getter()
{
}

uint64_t sub_1878E927C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <> Section<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Section<>._identifiedView.getter(a1, a2);
}

void protocol witness for PickerContent.body.getter in conformance <> Section<A, B, C>()
{
}

uint64_t Section<>.init<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8(v5);
  return Section.init(header:content:footer:)(v9, (uint64_t)v7, v10, MEMORY[0x1E4F417F8], a2, MEMORY[0x1E4F417F8], a3);
}

uint64_t Section<>.init<A>(content:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14(v11);
  a1(v15);
  return Section.init(header:content:footer:)((uint64_t)v13, (uint64_t)v9, v16, a2, a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t Section<>.init<A, B>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  double v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v15);
  v23[0] = Text.init<A>(_:)();
  v23[1] = v18;
  char v24 = v19 & 1;
  uint64_t v25 = v20;
  a2(v23[0], v18, v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return Section.init(header:content:footer:)((uint64_t)v23, (uint64_t)v11, v21, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a5);
}

uint64_t Section<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = Text.init(_:tableName:bundle:comment:)();
  v15[1] = v9;
  char v16 = v10 & 1;
  uint64_t v17 = v11;
  a2();
  return Section.init(header:content:footer:)((uint64_t)v15, (uint64_t)v8, v12, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t _TuplePickerContent._identifiedView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TupleView();
  double v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t _TuplePickerContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TupleView();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v11);
  TupleView.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v13, v9);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance _TuplePickerContent<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TupleView();
  double v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

void protocol witness for PickerContent.body.getter in conformance _TuplePickerContent<A, B>()
{
  swift_getWitnessTable();

  PrimitivePickerContent.body.getter();
}

void protocol witness for PickerContent.body.getter in conformance _KeyboardShortcutPickerContent<A>()
{
  swift_getWitnessTable();

  PrimitivePickerContent.body.getter();
}

void specialized PickerContent.bodyError()()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000018832C960;
  v1._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1878E9B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 56))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_1878E9B40()
{
  return 16;
}

__n128 sub_1878E9B4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for implicit closure #1 in Optional<A>._identifiedView.getter()
{
  return swift_getAtKeyPath();
}

uint64_t sub_1878E9B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 56))(*(void *)(a3 + a2 - 32));
}

uint64_t sub_1878E9BC8()
{
  return 48;
}

__n128 sub_1878E9BD4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1878E9BE8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ForEach<>._identifiedView.getter()
{
  return swift_getAtKeyPath();
}

uint64_t sub_1878E9C2C()
{
  return 56;
}

__n128 sub_1878E9C38(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1878E9C54()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1878E9D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 16) + 56))(*(void *)(a3 + a2 - 40));
}

uint64_t sub_1878E9D4C()
{
  return 48;
}

__n128 sub_1878E9D58(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in _PickerContentBodyAdaptor<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in PickerBuilder<A>.Content<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PickerBuilder<A>.ContentWithFooter<A1, B1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <> _ConditionalContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <> _ConditionalContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <A> A?()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <A> A?()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <> ForEach<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in <> ForEach<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <> ForEach<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <A> Group<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <A> Group<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <> Section<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in <> Section<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <> Section<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _TuplePickerContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in _TuplePickerContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _TuplePickerContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t default associated conformance accessor for PickerContent.PickerContent.SelectionValue: Hashable()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t default associated conformance accessor for PickerContent.PickerContent._IdentifiedView: View()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of PickerContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t getEnumTagSinglePayload for _PickerContentBodyAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _PickerContentBodyAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878EA6D0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for _PickerContentBodyAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PickerBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for PickerBuilder.ContentWithFooter()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PickerBuilder.ContentWithFooter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t destroy for PickerBuilder.ContentWithFooter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t initializeWithCopy for PickerBuilder.ContentWithFooter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for PickerBuilder.ContentWithFooter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for PickerBuilder.ContentWithFooter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for PickerBuilder.ContentWithFooter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerBuilder.ContentWithFooter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PickerBuilder.ContentWithFooter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  size_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  size_t v13 = ((v10 + v11) & ~v11) + *(void *)(v8 + 64);
  BOOL v14 = a3 >= v12;
  unsigned int v15 = a3 - v12;
  if (v15 != 0 && v14)
  {
    if (v13 <= 3)
    {
      unsigned int v19 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v19))
      {
        int v16 = 4;
      }
      else if (v19 >= 0x100)
      {
        int v16 = 2;
      }
      else
      {
        int v16 = v19 > 1;
      }
    }
    else
    {
      int v16 = 1;
    }
  }
  else
  {
    int v16 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v17 = ~v12 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v20 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x1878EB204);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v9)
        {
          if (v7 >= a2)
          {
            uint64_t v26 = *(void (**)(void))(v6 + 56);
            v26();
          }
          else
          {
            if (v10 <= 3) {
              int v23 = ~(-1 << (8 * v10));
            }
            else {
              int v23 = -1;
            }
            if (v10)
            {
              int v24 = v23 & (~v7 + a2);
              if (v10 <= 3) {
                int v25 = v10;
              }
              else {
                int v25 = 4;
              }
              bzero(a1, v10);
              switch(v25)
              {
                case 2:
                  *(_WORD *)a1 = v24;
                  break;
                case 3:
                  *(_WORD *)a1 = v24;
                  a1[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)a1 = v24;
                  break;
                default:
                  *a1 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          unint64_t v21 = (unint64_t)&a1[v10 + v11] & ~v11;
          uint64_t v22 = *(void (**)(unint64_t))(v8 + 56);
          v22(v21);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PickerBuilder.ContentWithFooter()
{
  return swift_getGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for PickerBuilder.Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithTake for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerBuilder.Content(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PickerBuilder.Content(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1878EB6D0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1878EB6F8()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1878EB770()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
  type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E4F40F48], MEMORY[0x1E4F40F40], MEMORY[0x1E4F408B8]);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();

  return swift_getWitnessTable();
}

uint64_t sub_1878EB858()
{
  return swift_getWitnessTable();
}

uint64_t sub_1878EB92C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1878EB964()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>, (uint64_t)&type metadata for ValidTestCasesPreferenceKey, (uint64_t)&protocol witness table for ValidTestCasesPreferenceKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t assignWithTake for OnTestViewModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnTestViewModifier()
{
  return &protocol witness table for OnTestViewModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance OnTestViewModifier()
{
}

uint64_t sub_1878EBB9C(uint64_t a1)
{
  outlined init with copy of PPTTestCase?(a1, (uint64_t)v2);
  return EnvironmentValues.testCase.setter((uint64_t)v2);
}

uint64_t outlined init with take of PPTTestCase(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PPTTestCase(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of PPTTestCase(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1878EBCE4()
{
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnTestEffect.updateValue()()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + 32);
}

void type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void *type metadata accessor for OnTestEffect()
{
  return &unk_1ED411B90;
}

void VisualEffect.colorEffect(_:isEnabled:)(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 8);
  unint64_t v2 = *(void **)(a1 + 16);
  long long v3 = *(void **)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32) | 2;
  v6[0] = *(id *)a1;
  v6[1] = v1;
  _OWORD v6[2] = v2;
  void v6[3] = v3;
  int v7 = v4;
  id v5 = v6[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  VisualEffect.layerEffect(_:maxSampleOffset:isEnabled:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void VisualEffect.layerEffect(_:maxSampleOffset:isEnabled:)(id *a1)
{
  id v1 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ShaderFilterEffect.init(shader:maxSampleOffset:enabled:)();
  lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect();
  VisualEffect.concat<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect;
  if (!lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect;
  if (!lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect);
  }
  return result;
}

void VisualEffect.distortionEffect(_:maxSampleOffset:isEnabled:)(uint64_t a1)
{
  id v1 = *(void **)(a1 + 8);
  unint64_t v2 = *(void **)(a1 + 16);
  long long v3 = *(void **)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32) | 4;
  v6[0] = *(id *)a1;
  v6[1] = v1;
  _OWORD v6[2] = v2;
  void v6[3] = v3;
  int v7 = v4;
  id v5 = v6[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  VisualEffect.layerEffect(_:maxSampleOffset:isEnabled:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t static _ShaderFilterEffect._makeVisualEffect(effect:inputs:body:)()
{
  return static _ShaderFilterEffect._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance _ShaderFilterEffect()
{
  return static _ShaderFilterEffect._makeView(modifier:inputs:body:)();
}

unint64_t instantiation function for generic protocol witness table for _ShaderFilterEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1878EC208()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AnyDynamicItem.makeView<A>(uniqueId:container:inputs:adaptor:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = *((_DWORD *)a3 + 2);
  uint64_t v10 = a3[2];
  int v11 = *((_DWORD *)a3 + 20);
  uint64_t v14 = *a3;
  int v15 = v9;
  uint64_t v16 = v10;
  long long v12 = *(_OWORD *)(a3 + 5);
  long long v17 = *(_OWORD *)(a3 + 3);
  long long v18 = v12;
  long long v19 = *(_OWORD *)(a3 + 7);
  uint64_t v20 = a3[9];
  int v21 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 112))(a1, a2, &v14, a8, a8, a9);
}

uint64_t *makeStorage<A, B>(content:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v32 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v31 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v10;
  uint64_t StorageVisitor1 = type metadata accessor for MakeStorageVisitor1();
  uint64_t v27 = *(void *)(StorageVisitor1 - 8);
  MEMORY[0x1F4188790](StorageVisitor1);
  int v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
  uint64_t v30 = a1;
  v20((char *)&v27 - v21, a1, a3, v19);
  if (!swift_dynamicCast())
  {
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    uint64_t v35 = v28;
    uint64_t v36 = v29;
    type metadata accessor for IdentifiedItemStorage();
    ((void (*)(char *, uint64_t, uint64_t))v20)(v17, v30, a3);
    uint64_t v26 = (uint64_t)v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v31, v32, a4);
    swift_allocObject();
    return IdentifiedItemStorage.init(content:identifier:)((uint64_t)v17, v26);
  }
  uint64_t v22 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v31, v32, a4);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v22, a4);
  *(void *)&v13[*(int *)(StorageVisitor1 + 36)] = 0;
  swift_getWitnessTable();
  unint64_t result = (uint64_t *)AnyView.visitContent<A>(_:)();
  uint64_t v24 = *(void *)&v13[*(int *)(StorageVisitor1 + 36)];
  if (v24)
  {
    int v25 = *(void (**)(char *, uint64_t))(v27 + 8);
    swift_retain();
    v25(v13, StorageVisitor1);
    swift_release();
    return (uint64_t *)v24;
  }
  __break(1u);
  return result;
}

uint64_t AnyDynamicItem.matchesIdentity(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 == a1 || ((*(uint64_t (**)(void))(*(void *)a4 + 104))() & 1) != 0)
  {
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a4 + 80))();
    if (v7 == (*(uint64_t (**)(void))(*(void *)a1 + 80))())
    {
      uint64_t v8 = (*(void *(**)(void *__return_ptr))(*(void *)a4 + 88))(v11);
      (*(void (**)(void *__return_ptr, void *))(*(void *)a1 + 88))(v10, v8);
      char v6 = MEMORY[0x18C1174E0](v11, v10);
      outlined destroy of AnyHashable((uint64_t)v10);
      outlined destroy of AnyHashable((uint64_t)v11);
    }
    else
    {
      char v6 = 0;
    }
  }
  return v6 & 1;
}

uint64_t protocol witness for DynamicContainerItem.needsTransitions.getter in conformance AnyDynamicItem()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))() & 1;
}

double protocol witness for DynamicContainerItem.zIndex.getter in conformance AnyDynamicItem()
{
  return *(double *)(v0 + 24);
}

uint64_t protocol witness for DynamicContainerItem.matchesIdentity(of:) in conformance AnyDynamicItem(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return AnyDynamicItem.matchesIdentity(of:)(*a1, a2, a3, *v3);
}

BOOL protocol witness for DynamicContainerItem.canBeReused(by:) in conformance AnyDynamicItem(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 80))();
  return v3 == (*(uint64_t (**)(void))(*(void *)v2 + 80))();
}

uint64_t protocol witness for DynamicContainerItem.list.getter in conformance AnyDynamicItem()
{
  unint64_t v0 = DynamicContainerItem.list.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

void DynamicStorage.contentType.getter()
{
}

void DynamicStorage.identifier.getter()
{
}

void DynamicStorage.needsTransitions.getter()
{
}

void DynamicStorage.matchesIdentity(of:)()
{
}

void DynamicStorage.makeView<A>(uniqueId:container:inputs:adaptor:)()
{
}

void DynamicStorage.visitContent<A>(_:phase:)()
{
}

uint64_t type metadata accessor for DynamicStorage()
{
  return self;
}

uint64_t type metadata completion function for IdentifiedItemStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *IdentifiedItemStorage.__allocating_init(content:identifier:)(uint64_t a1, uint64_t a2)
{
  return IdentifiedItemStorage.init(content:identifier:)(a1, a2);
}

uint64_t *IdentifiedItemStorage.init(content:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*v2 + 136) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 168), a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 144) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 176), a2);
  return v2;
}

uint64_t IdentifiedItemStorage.contentType.getter()
{
  return *(void *)(*(void *)v0 + 136);
}

uint64_t IdentifiedItemStorage.identifier.getter()
{
  return _convertToAnyHashable<A>(_:)();
}

uint64_t IdentifiedItemStorage.matchesIdentity(of:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t IdentifiedItemStorage.makeView<A>(uniqueId:container:inputs:adaptor:)(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  int v11 = *(_DWORD *)(a3 + 80);
  uint64_t v12 = *(void *)(*(void *)v6 + 136);
  uint64_t v13 = *(void *)(*(void *)v6 + 152);
  unint64_t v26 = __PAIR64__(a1, a2);
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v23 = v12;
  uint64_t v33 = v12;
  uint64_t v34 = a5;
  uint64_t v35 = v13;
  uint64_t v36 = a6;
  uint64_t v24 = type metadata accessor for AnyDynamicChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for Attribute();
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(a3 + 32);
  long long v20 = *(_OWORD *)(a3 + 56);
  long long v21 = *(_OWORD *)(a3 + 40);
  uint64_t v17 = *(void *)(a3 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v22, v24, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v18);
  swift_release();
  _GraphValue.init(_:)();
  unint64_t v26 = v8;
  LODWORD(v27) = v9;
  *((void *)&v27 + 1) = v10;
  *(void *)&long long v28 = v15;
  *((void *)&v28 + 1) = v16;
  long long v29 = v21;
  long long v30 = v20;
  uint64_t v31 = v17;
  int v32 = v11;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t IdentifiedItemStorage.visitContent<A>(_:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(a4 + 8))(v4 + *(void *)(*(void *)v4 + 168), *(void *)(*(void *)v4 + 136), *(void *)(*(void *)v4 + 152), a3);
}

uint64_t IdentifiedItemStorage.__ivar_destroyer()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 168));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 176);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 144) - 8) + 8);

  return v3(v2);
}

uint64_t *IdentifiedItemStorage.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 168));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 176));
  return v0;
}

uint64_t IdentifiedItemStorage.__deallocating_deinit()
{
  return IdentifiedItemStorage.__deallocating_deinit((uint64_t (*)(void))IdentifiedItemStorage.deinit);
}

uint64_t type metadata accessor for IdentifiedItemStorage()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for IdentifiedTransitionStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t *IdentifiedTransitionStorage.__allocating_init(content:identifier:transition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IdentifiedTransitionStorage.init(content:identifier:transition:)(a1, a2, a3);
}

uint64_t *IdentifiedTransitionStorage.init(content:identifier:transition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*v3 + 136) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 184), a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v6 + 144) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 192), a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v6 + 152) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 200), a3);
  return v3;
}

uint64_t IdentifiedTransitionStorage.contentType.getter()
{
  type metadata accessor for ApplyTransitionModifier();

  return type metadata accessor for ModifiedContent();
}

uint64_t IdentifiedTransitionStorage.identifier.getter()
{
  return _convertToAnyHashable<A>(_:)();
}

uint64_t IdentifiedTransitionStorage.matchesIdentity(of:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t IdentifiedTransitionStorage.makeView<A>(uniqueId:container:inputs:adaptor:)(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  unint64_t v13 = *(void *)a3;
  uint64_t v23 = *(void *)(a3 + 16);
  int v24 = *(_DWORD *)(a3 + 8);
  int v25 = *(_DWORD *)(a3 + 80);
  type metadata accessor for ApplyTransitionModifier();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v12 + 160);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v30 = __PAIR64__(a1, a2);
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v27 = v14;
  uint64_t v37 = v14;
  uint64_t v38 = a5;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = a6;
  uint64_t v28 = type metadata accessor for AnyDynamicChild();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(a3 + 32);
  long long v21 = *(_OWORD *)(a3 + 56);
  long long v22 = *(_OWORD *)(a3 + 40);
  uint64_t v18 = *(void *)(a3 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v26, v28, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v19);
  swift_release();
  _GraphValue.init(_:)();
  unint64_t v30 = v13;
  LODWORD(v31) = v24;
  *((void *)&v31 + 1) = v23;
  *(void *)&long long v32 = v16;
  *((void *)&v32 + 1) = v17;
  long long v33 = v22;
  long long v34 = v21;
  uint64_t v35 = v18;
  int v36 = v25;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t IdentifiedTransitionStorage.visitContent<A>(_:phase:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a1;
  uint64_t v18 = a3;
  v16[3] = a2;
  uint64_t v6 = *v4;
  type metadata accessor for ApplyTransitionModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v16 - v9;
  uint64_t v11 = *(void *)(v6 + 160);
  Transition.apply<A>(content:phase:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = v11;
  uint64_t v20 = WitnessTable;
  uint64_t v14 = swift_getWitnessTable();
  v12(v10, v7, v14, v18, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t IdentifiedTransitionStorage.__ivar_destroyer()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 184));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 192));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 200);
  unint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 152) - 8) + 8);

  return v3(v2);
}

uint64_t *IdentifiedTransitionStorage.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 184));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 192));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 152) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 200));
  return v0;
}

uint64_t IdentifiedTransitionStorage.__deallocating_deinit()
{
  return IdentifiedItemStorage.__deallocating_deinit((uint64_t (*)(void))IdentifiedTransitionStorage.deinit);
}

uint64_t IdentifiedItemStorage.__deallocating_deinit(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentifiedTransitionStorage()
{
  return swift_getGenericMetadata();
}

uint64_t MakeStorageVisitor1.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = makeStorage<A, B>(content:identifier:)(a1, v4, a3, *(void *)(a2 + 16), a4);
  uint64_t v7 = *(int *)(a2 + 36);
  uint64_t result = swift_release();
  *(void *)(v4 + v7) = v6;
  return result;
}

uint64_t protocol witness for ViewVisitor.visit<A>(_:) in conformance MakeStorageVisitor1<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MakeStorageVisitor1.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t AnyDynamicChild.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 8);
  uint64_t v4 = *(void *)(Value + 32);
  char v5 = *(unsigned char *)(Value + 40);
  int v6 = *(_DWORD *)(Value + 44);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t AnyDynamicChild.updateValue()(void *a1)
{
  uint64_t v2 = (void *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  v28[0] = *(_OWORD *)v1;
  v28[1] = v4;
  uint64_t v29 = *(void *)(v1 + 32);
  AnyDynamicChild.info.getter((uint64_t)&v24);
  uint64_t v5 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v5 + 16)) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(DWORD1(v28[0]));
  if ((v7 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  AnyDynamicChild.info.getter((uint64_t)&v24);
  uint64_t v9 = v24;
  uint64_t v10 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 0xC000000000000001) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v11 = *(void *)(v9 + 8 * v8 + 32);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = MEMORY[0x18C117680](v8, v9);
LABEL_7:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v10 = *(unsigned __int8 *)(v11 + 84);
  uint64_t result = swift_release();
  if (v10 != 3)
  {
    AnyDynamicChild.info.getter((uint64_t)&v24);
    uint64_t v9 = v24;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v9 & 0xC000000000000001) == 0)
    {
      if ((v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v8 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
        goto LABEL_12;
      }
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
LABEL_19:
    MEMORY[0x18C117680](v8, v9);
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[5];
    FocusStoreLocation.id.getter();
    swift_retain();
    swift_release();
    DynamicContainer._ItemInfo.item.getter();
    swift_release();
    uint64_t v15 = v24;
    uint64_t v16 = v25;
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    swift_retain();
    outlined release of AnyDynamicChild<A, B>((uint64_t)v28);
    v2[1] = v15;
    v2[2] = v16;
    v2[3] = v17;
    v2[4] = v18;
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v19 = a1[2];
      uint64_t v20 = a1[4];
      int v23 = result;
      uint64_t v24 = v19;
      uint64_t v25 = v13;
      uint64_t v26 = v20;
      uint64_t v27 = v14;
      uint64_t updated = type metadata accessor for AnyDynamicChild.UpdateVisitor();
      uint64_t WitnessTable = swift_getWitnessTable();
      (*(void (**)(int *, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 120))(&v23, v10, updated, WitnessTable);
      return swift_release();
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t AnyDynamicChild.UpdateVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a3 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  char v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  uint64_t v12 = a3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)partial apply for closure #1 in RuleContext.value.setter, (uint64_t)v11, a3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a3);
}

uint64_t protocol witness for ViewVisitor.visit<A>(_:) in conformance AnyDynamicChild<A, B>.UpdateVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyDynamicChild.UpdateVisitor.visit<A>(_:)(a1, a4, a2);
}

uint64_t AnyDynamicChild.matchesIdentifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - v11;
  outlined init with take of AnyDynamicItem?(v4 + 8, (uint64_t)v22);
  uint64_t v13 = outlined init with take of AnyDynamicItem?((uint64_t)v22, (uint64_t)v23);
  if (v23[0])
  {
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v23[0] + 88))(v19, v13);
    AnyHashable.base.getter();
    outlined destroy of AnyHashable((uint64_t)v19);
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
  }
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
  int v14 = swift_dynamicCast();
  uint64_t v15 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v12, v14 ^ 1u, 1, a3);
  MEMORY[0x1F4188790](v15);
  long long v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v19[-8] = *(_OWORD *)(a2 + 16);
  v19[-6] = a3;
  *(_OWORD *)&v19[-5] = v16;
  v19[-3] = a4;
  v19[-2] = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnyDynamicChild.matchesIdentifier<A>(_:), (uint64_t)&v19[-10], MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], v17, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v19[0] & 1;
}

uint64_t protocol witness for IdentifierProvider.matchesIdentifier<A>(_:) in conformance AnyDynamicChild<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyDynamicChild.matchesIdentifier<A>(_:)(a1, a4, a2, a3) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyDynamicChild<A, B>()
{
  return specialized AnyDynamicChild.description.getter();
}

uint64_t specialized AnyDynamicChild.description.getter()
{
  return _typeName(_:qualified:)();
}

double specialized AnyDynamicItem.init<A, B>(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return 0.0;
}

uint64_t type metadata accessor for MakeStorageVisitor1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyDynamicChild()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for AnyDynamicChild(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyDynamicChild(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for AnyDynamicChild(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyDynamicChild(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyDynamicChild(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t type metadata completion function for MakeStorageVisitor1()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MakeStorageVisitor1(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878EE8F8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for MakeStorageVisitor1(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1878EEAF8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t initializeWithCopy for AnyDynamicItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyDynamicItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AnyDynamicItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for AnyDynamicItem()
{
  return &type metadata for AnyDynamicItem;
}

uint64_t base witness table accessor for _AttributeBody in AnyDynamicChild<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for AnyDynamicChild.UpdateVisitor()
{
  return swift_getGenericMetadata();
}

uint64_t outlined init with take of AnyDynamicItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AnyDynamicItem?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AnyDynamicChild.matchesIdentifier<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in RuleContext.value.setter()
{
  return AGGraphSetOutputValue();
}

uint64_t protocol witness for SegmentedControlStyle.body(configuration:) in conformance AnySegmentedControlStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 80))();
  *a1 = result;
  return result;
}

void AnyStyleBox.body(configuration:)()
{
}

uint64_t type metadata accessor for AnyStyleBox()
{
  return self;
}

uint64_t StyleBox.body(configuration:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v6);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

uint64_t type metadata accessor for StyleBox()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AnySegmentedControlStyle()
{
  return &type metadata for AnySegmentedControlStyle;
}

uint64_t associated type witness table accessor for SegmentedControlStyle.Body : View in AnySegmentedControlStyle()
{
  return MEMORY[0x1E4F41610];
}

uint64_t FocusedValue.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, a1, a2, a3);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = FocusedValue.init(_:)(KeyPath, &v8);
  char v7 = v9;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 8) = v7;
  return result;
}

uint64_t sub_1878EEFE8@<X0>(void *a1@<X8>)
{
  uint64_t result = FocusedValues.subscript.getter((uint64_t)&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1878EF048(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return specialized FocusedValues.subscript.setter((uint64_t)&v2);
}

uint64_t sub_1878EF088()
{
  return 16;
}

uint64_t sub_1878EF094()
{
  return 1;
}

Swift::Int sub_1878EF09C(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a2 + a1 - 16));
}

__n128 sub_1878EF0A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t View.focusedValue<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a1, a2, a3);
  uint64_t KeyPath = (void *)swift_getKeyPath();
  View.focusedValue<A>(_:_:)(KeyPath, a1, a3, a4);
  return swift_release();
}

uint64_t static Observable.focusedValueKey.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getKeyPath();
}

uint64_t sub_1878EF18C@<X0>(uint64_t a1@<X8>)
{
  return FocusedValues.subscript.getter(a1);
}

uint64_t sub_1878EF1DC(uint64_t a1)
{
  return specialized FocusedValues.subscript.setter(a1);
}

uint64_t sub_1878EF208()
{
  return 16;
}

uint64_t sub_1878EF214()
{
  return 1;
}

__n128 sub_1878EF21C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1878EF228()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for CubicGradientProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CubicGradientProvider(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CubicGradientProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for CubicGradientProvider()
{
  return &unk_1ED434858;
}

void CubicGradientProvider.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v7 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      ++v8;
      swift_retain();
      dispatch thunk of AnyColorBox.hash(into:)();
      swift_release();
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  if (a3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, a3);
    if (!a4) {
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (!a4) {
      return;
    }
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9)
  {
    unint64_t v10 = (Swift::UInt32 *)(a4 + 44);
    do
    {
      Swift::UInt32 v11 = *(v10 - 2);
      Swift::UInt32 v12 = *(v10 - 1);
      Swift::UInt32 v13 = *v10;
      if ((*(v10 - 3) & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v14 = *(v10 - 3);
      }
      else {
        Swift::UInt32 v14 = 0;
      }
      Hasher._combine(_:)(v14);
      if ((v11 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v15 = v11;
      }
      else {
        Swift::UInt32 v15 = 0;
      }
      Hasher._combine(_:)(v15);
      if ((v12 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v16 = v12;
      }
      else {
        Swift::UInt32 v16 = 0;
      }
      Hasher._combine(_:)(v16);
      if ((v13 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v17 = v13;
      }
      else {
        Swift::UInt32 v17 = 0;
      }
      Hasher._combine(_:)(v17);
      v10 += 4;
      --v9;
    }
    while (v9);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CubicGradientProvider()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  CubicGradientProvider.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CubicGradientProvider(uint64_t a1)
{
  CubicGradientProvider.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CubicGradientProvider()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  CubicGradientProvider.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    double v6 = (void *)v5;
    MEMORY[0x1F4188790](v5);
    static Update.dispatchImmediately<A>(_:)();
  }
  else
  {
    a1();
  }
}

id PlatformViewCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformViewCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  Swift::UInt v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  Swift::UInt32 v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_UIUpdateCycleEnabled())
  {
    return specialized static UIKitUpdateCycle.addPreCommitObserver(_:)(a1, a2);
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    Swift::UInt32 v13 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = a1;
    aBlock[5] = a2;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_13;
    Swift::UInt32 v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18C116870](0, v11, v7, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1878EF9B0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t *View.sharingPickerModifier(source:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of SharingPickerSource((uint64_t)a1, (uint64_t)v9);
  outlined init with take of SharingPickerSource((uint64_t)v9, (uint64_t)v10);
  outlined retain of SharingPickerSource(a1);
  uint64_t v6 = static Anchor.Source<A>.bounds.getter();
  outlined init with take of SharingPickerSource((uint64_t)v10, (uint64_t)v11);
  *((void *)&v12 + 1) = v6;
  v8[6] = v11[6];
  v8[7] = v11[7];
  unsigned char v8[8] = v12;
  _OWORD v8[2] = v11[2];
  _OWORD v8[3] = v11[3];
  v8[4] = v11[4];
  v8[5] = v11[5];
  v8[0] = v11[0];
  v8[1] = v11[1];
  MEMORY[0x18C113660](v8, a2, &type metadata for SharingActivityPickerModifier, a3);
  return outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)v11);
}

uint64_t View.sharingPicker<A, B, C, D>(isPresented:link:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14)
{
  swift_retain();
  swift_retain();
  specialized AnyIdentifiableShareConfiguration.init<A, B, C, D>(_:)(a4, a6, a7, a8, a9, a11, a12, a13, (uint64_t)v23, a14);
  *(void *)&long long v31 = a1;
  *((void *)&v31 + 1) = a2;
  v32[0] = a3;
  *(_OWORD *)&v32[8] = v23[0];
  *(_OWORD *)&v32[24] = v23[1];
  *(void *)&v32[40] = v24;
  v33[0] = v25;
  *(_OWORD *)&v33[8] = v26;
  *(_OWORD *)&v33[24] = v27;
  *(_OWORD *)&v33[40] = v28;
  *(_OWORD *)&v33[56] = v29;
  v34[6] = *(_OWORD *)&v33[32];
  v34[7] = *(_OWORD *)&v33[48];
  uint64_t v35 = *((void *)&v29 + 1);
  v34[0] = v31;
  v34[1] = *(_OWORD *)v32;
  v34[2] = *(_OWORD *)&v32[16];
  void v34[3] = *(_OWORD *)&v32[32];
  void v34[4] = *(_OWORD *)v33;
  v34[5] = *(_OWORD *)&v33[16];
  _s7SwiftUI19SharingPickerSourceOWOi0_((uint64_t)v34);
  outlined init with take of SharingPickerSource((uint64_t)v34, (uint64_t)v30);
  View.sharingPickerModifier(source:)(v30, a5, a10);
  return outlined release of (Binding<Bool>, AnyIdentifiableShareConfiguration)((uint64_t)&v31);
}

uint64_t View.sharingPicker<A, B, C>(isPresented:item:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, long long a20)
{
  uint64_t v53 = a9;
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v39 = a4;
  int v50 = a3;
  uint64_t v55 = a2;
  uint64_t v49 = a1;
  uint64_t v44 = a10;
  uint64_t v43 = a11;
  uint64_t v42 = a12;
  uint64_t v54 = a13;
  uint64_t v52 = a15;
  uint64_t v38 = a14;
  uint64_t v41 = a19;
  uint64_t v51 = a18;
  uint64_t v40 = *((void *)&a17 + 1);
  long long v65 = a17;
  long long v66 = a20;
  uint64_t v20 = type metadata accessor for SharePreview();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v23 = (char *)&v37 - v22;
  double v25 = MEMORY[0x1F4188790](v24);
  long long v27 = (char *)&v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16))(v27, v39, a16, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v38, v20);
  uint64_t v29 = (uint64_t)v27;
  uint64_t v31 = v45;
  uint64_t v30 = v46;
  char v33 = v47;
  uint64_t v32 = v48;
  uint64_t v35 = v43;
  uint64_t v34 = v44;
  LOBYTE(v27) = v42;
  AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)(v29, v45, v46, v47, v48, v44, v43, v42, (uint64_t)&v58, v54, (uint64_t)v23, a16, a17, v40, v41, a20, *((uint64_t *)&a20 + 1));
  *(void *)&long long v65 = 0;
  *((void *)&v65 + 1) = v49;
  *(void *)&long long v66 = v55;
  BYTE8(v66) = v50;
  long long v67 = v58;
  long long v68 = v59;
  v69[0] = v60;
  *(_OWORD *)&_OWORD v69[8] = v61;
  *(_OWORD *)&v69[24] = v62;
  *(_OWORD *)&v69[40] = v63;
  *(_OWORD *)&v69[56] = v64;
  v56[6] = *(_OWORD *)&v69[32];
  v56[7] = *(_OWORD *)&v69[48];
  uint64_t v57 = *((void *)&v64 + 1);
  v56[2] = v58;
  v56[3] = v59;
  v56[4] = *(_OWORD *)v69;
  v56[5] = *(_OWORD *)&v69[16];
  v56[0] = v65;
  v56[1] = v66;
  outlined copy of Text?(v31, v30, v33, v32);
  outlined copy of Text?(v34, v35, (char)v27, v54);
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v56, v52, &unk_1ED45F8B8, v51);
  return outlined release of UnidentifiedSharingPickerModifier((uint64_t)&v65);
}

uint64_t outlined release of UnidentifiedSharingPickerModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 128);
  char v9 = *(unsigned char *)(a1 + 64);
  swift_release();
  swift_release();
  outlined consume of AnyShareConfiguration.Storage(v2, v3, v4, v5, v9);
  outlined consume of Text?(v11, v6, v7, v8);
  outlined consume of Text?(v15, v14, v13, v12);
  return a1;
}

uint64_t View.sharingPicker(isPresented:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v32 = a9;
  *((void *)&v28 + 1) = a7;
  uint64_t v29 = a8;
  uint64_t v27 = a5;
  *(void *)&long long v28 = a6;
  int v26 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v30 = a13;
  uint64_t v31 = a14;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a4, v15, v17);
  type metadata accessor for _ContiguousArrayStorage<Any>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
  *(void *)(v20 + 56) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v20 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v19, v15);
  *(void *)&long long v35 = 0;
  *((void *)&v35 + 1) = v24;
  *(void *)&long long v36 = v25;
  BYTE8(v36) = v26;
  uint64_t v37 = v20;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  LOBYTE(v41) = 0;
  *((void *)&v41 + 1) = v27;
  long long v42 = v28;
  *(void *)&long long v43 = v29;
  *((void *)&v43 + 1) = a10;
  long long v44 = a11;
  uint64_t v45 = a12;
  v33[6] = v43;
  v33[7] = a11;
  uint64_t v34 = a12;
  v33[2] = (unint64_t)v20;
  v33[3] = 0u;
  uint64_t v33[4] = v41;
  v33[5] = v28;
  v33[0] = v35;
  v33[1] = v36;
  outlined copy of Text?(v27, v28, SBYTE8(v28), v29);
  outlined copy of Text?(a10, a11, SBYTE8(a11), a12);
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v33, v30, &unk_1ED45F8B8, v31);
  return outlined release of UnidentifiedSharingPickerModifier((uint64_t)&v35);
}

uint64_t sub_1878F0204()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier;
  if (!lazy protocol witness table cache variable for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier);
  }
  return result;
}

uint64_t sub_1878F02C0()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for PresentSharingPickerAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)(a1 + 128);
  uint64_t v5 = (long long *)(a1 + 16);
  uint64_t v7 = (uint64_t *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v8 = (long long *)(a2 + 16);
  if (*(void *)(a1 + 128) != 1)
  {
    if (v6 == 1)
    {
      outlined destroy of SharingPickerHostModifier.Model(a1 + 16);
      long long v15 = *(_OWORD *)(a2 + 64);
      long long v17 = *v8;
      long long v16 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v15;
      *uint64_t v5 = v17;
      *(_OWORD *)(a1 + 32) = v16;
      long long v18 = *(_OWORD *)(a2 + 128);
      long long v20 = *(_OWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 96) = v19;
      return a1;
    }
    uint64_t v26 = *(void *)(a2 + 88);
    if (*(void *)(a1 + 88) == 1)
    {
      if (v26 == 1)
      {
        long long v27 = *v8;
        long long v28 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v28;
        *uint64_t v5 = v27;
        long long v29 = *(_OWORD *)(a2 + 64);
        long long v30 = *(_OWORD *)(a2 + 80);
        long long v31 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v31;
        *(_OWORD *)(a1 + 64) = v29;
        *(_OWORD *)(a1 + 80) = v30;
        goto LABEL_39;
      }
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v48 = *(void *)(a2 + 24);
      uint64_t v49 = *(void *)(a2 + 32);
      uint64_t v50 = *(void *)(a2 + 40);
      uint64_t v51 = *(void *)(a2 + 48);
      char v52 = *(unsigned char *)(a2 + 56);
      outlined copy of AnyShareConfiguration.Storage(v48, v49, v50, v51, v52);
      *(void *)(a1 + 24) = v48;
      *(void *)(a1 + 32) = v49;
      *(void *)(a1 + 40) = v50;
      *(void *)(a1 + 48) = v51;
      *(unsigned char *)(a1 + 56) = v52;
      if (*(void *)(a2 + 88))
      {
        uint64_t v53 = *(void *)(a2 + 64);
        uint64_t v54 = *(void *)(a2 + 72);
        char v55 = *(unsigned char *)(a2 + 80);
        outlined copy of Text.Storage(v53, v54, v55);
        *(void *)(a1 + 64) = v53;
        *(void *)(a1 + 72) = v54;
        *(unsigned char *)(a1 + 80) = v55;
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        swift_bridgeObjectRetain();
        if (!*(void *)(a2 + 120)) {
          goto LABEL_27;
        }
      }
      else
      {
        long long v78 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v78;
        if (!*(void *)(a2 + 120))
        {
LABEL_27:
          long long v79 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v79;
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    if (v26 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1 + 16);
      long long v44 = *(_OWORD *)(a2 + 32);
      long long v43 = *(_OWORD *)(a2 + 48);
      *uint64_t v5 = *v8;
      *(_OWORD *)(a1 + 32) = v44;
      *(_OWORD *)(a1 + 48) = v43;
      long long v45 = *(_OWORD *)(a2 + 112);
      long long v47 = *(_OWORD *)(a2 + 64);
      long long v46 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v45;
      *(_OWORD *)(a1 + 64) = v47;
      *(_OWORD *)(a1 + 80) = v46;
      goto LABEL_39;
    }
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v56 = *(void *)(a2 + 24);
    uint64_t v57 = *(void *)(a2 + 32);
    uint64_t v58 = *(void *)(a2 + 40);
    uint64_t v59 = *(void *)(a2 + 48);
    char v60 = *(unsigned char *)(a2 + 56);
    outlined copy of AnyShareConfiguration.Storage(v56, v57, v58, v59, v60);
    uint64_t v61 = *(void *)(a1 + 24);
    uint64_t v62 = *(void *)(a1 + 32);
    uint64_t v63 = *(void *)(a1 + 40);
    uint64_t v64 = *(void *)(a1 + 48);
    *(void *)(a1 + 24) = v56;
    *(void *)(a1 + 32) = v57;
    *(void *)(a1 + 40) = v58;
    *(void *)(a1 + 48) = v59;
    char v65 = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v60;
    outlined consume of AnyShareConfiguration.Storage(v61, v62, v63, v64, v65);
    long long v66 = (_OWORD *)(a1 + 64);
    long long v67 = (_OWORD *)(a2 + 64);
    uint64_t v68 = *(void *)(a2 + 88);
    if (*(void *)(a1 + 88))
    {
      if (v68)
      {
        uint64_t v69 = *(void *)(a2 + 64);
        uint64_t v70 = *(void *)(a2 + 72);
        char v71 = *(unsigned char *)(a2 + 80);
        outlined copy of Text.Storage(v69, v70, v71);
        uint64_t v72 = *(void *)(a1 + 64);
        uint64_t v73 = *(void *)(a1 + 72);
        char v74 = *(unsigned char *)(a1 + 80);
        *(void *)(a1 + 64) = v69;
        *(void *)(a1 + 72) = v70;
        *(unsigned char *)(a1 + 80) = v71;
        outlined consume of Text.Storage(v72, v73, v74);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 64);
        long long v83 = *(_OWORD *)(a2 + 80);
        *long long v66 = *v67;
        *(_OWORD *)(a1 + 80) = v83;
      }
    }
    else if (v68)
    {
      uint64_t v80 = *(void *)(a2 + 64);
      uint64_t v81 = *(void *)(a2 + 72);
      char v82 = *(unsigned char *)(a2 + 80);
      outlined copy of Text.Storage(v80, v81, v82);
      *(void *)(a1 + 64) = v80;
      *(void *)(a1 + 72) = v81;
      *(unsigned char *)(a1 + 80) = v82;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v84 = *(_OWORD *)(a2 + 80);
      *long long v66 = *v67;
      *(_OWORD *)(a1 + 80) = v84;
    }
    char v85 = (_OWORD *)(a1 + 96);
    char v86 = (_OWORD *)(a2 + 96);
    uint64_t v87 = *(void *)(a2 + 120);
    if (*(void *)(a1 + 120))
    {
      if (v87)
      {
        uint64_t v88 = *(void *)(a2 + 96);
        uint64_t v89 = *(void *)(a2 + 104);
        char v90 = *(unsigned char *)(a2 + 112);
        outlined copy of Text.Storage(v88, v89, v90);
        uint64_t v91 = *(void *)(a1 + 96);
        uint64_t v92 = *(void *)(a1 + 104);
        char v93 = *(unsigned char *)(a1 + 112);
        *(void *)(a1 + 96) = v88;
        *(void *)(a1 + 104) = v89;
        *(unsigned char *)(a1 + 112) = v90;
        outlined consume of Text.Storage(v91, v92, v93);
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 96);
        long long v97 = *(_OWORD *)(a2 + 112);
        *char v85 = *v86;
        *(_OWORD *)(a1 + 112) = v97;
      }
    }
    else
    {
      if (v87)
      {
LABEL_36:
        uint64_t v94 = *(void *)(a2 + 96);
        uint64_t v95 = *(void *)(a2 + 104);
        char v96 = *(unsigned char *)(a2 + 112);
        outlined copy of Text.Storage(v94, v95, v96);
        *(void *)(a1 + 96) = v94;
        *(void *)(a1 + 104) = v95;
        *(unsigned char *)(a1 + 112) = v96;
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      }
      long long v98 = *(_OWORD *)(a2 + 112);
      *char v85 = *v86;
      *(_OWORD *)(a1 + 112) = v98;
    }
LABEL_39:
    uint64_t v77 = *v7;
    if (*v4)
    {
      if (v77)
      {
        uint64_t v99 = *(void *)(a2 + 136);
        *(void *)(a1 + 128) = v77;
        *(void *)(a1 + 136) = v99;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v77)
    {
      goto LABEL_43;
    }
LABEL_45:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
    return a1;
  }
  if (v6 != 1)
  {
    if (*(void *)(a2 + 88) == 1)
    {
      long long v21 = *v8;
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v22;
      *uint64_t v5 = v21;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_OWORD *)(a2 + 80);
      long long v25 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v25;
      *(_OWORD *)(a1 + 64) = v23;
      *(_OWORD *)(a1 + 80) = v24;
      goto LABEL_24;
    }
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v32 = *(void *)(a2 + 24);
    uint64_t v33 = *(void *)(a2 + 32);
    uint64_t v34 = *(void *)(a2 + 40);
    uint64_t v35 = *(void *)(a2 + 48);
    char v36 = *(unsigned char *)(a2 + 56);
    outlined copy of AnyShareConfiguration.Storage(v32, v33, v34, v35, v36);
    *(void *)(a1 + 24) = v32;
    *(void *)(a1 + 32) = v33;
    *(void *)(a1 + 40) = v34;
    *(void *)(a1 + 48) = v35;
    *(unsigned char *)(a1 + 56) = v36;
    if (*(void *)(a2 + 88))
    {
      uint64_t v37 = *(void *)(a2 + 64);
      uint64_t v38 = *(void *)(a2 + 72);
      char v39 = *(unsigned char *)(a2 + 80);
      outlined copy of Text.Storage(v37, v38, v39);
      *(void *)(a1 + 64) = v37;
      *(void *)(a1 + 72) = v38;
      *(unsigned char *)(a1 + 80) = v39;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 120))
      {
LABEL_13:
        uint64_t v40 = *(void *)(a2 + 96);
        uint64_t v41 = *(void *)(a2 + 104);
        char v42 = *(unsigned char *)(a2 + 112);
        outlined copy of Text.Storage(v40, v41, v42);
        *(void *)(a1 + 96) = v40;
        *(void *)(a1 + 104) = v41;
        *(unsigned char *)(a1 + 112) = v42;
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
    }
    else
    {
      long long v75 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v75;
      if (*(void *)(a2 + 120)) {
        goto LABEL_13;
      }
    }
    long long v76 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v76;
LABEL_24:
    uint64_t v77 = *v7;
    if (!*v7) {
      goto LABEL_45;
    }
LABEL_43:
    uint64_t v100 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v77;
    *(void *)(a1 + 136) = v100;
    swift_retain();
    return a1;
  }
  long long v9 = *v8;
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *uint64_t v5 = v9;
  *(_OWORD *)(a1 + 32) = v10;
  long long v12 = *(_OWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  return a1;
}

uint64_t outlined destroy of AnyIdentifiableShareConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of SharingPickerHostModifier.Model(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for PresentSharingPickerAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = (void *)(a1 + 128);
  uint64_t v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = (_OWORD *)(a2 + 16);
  if (*(void *)(a1 + 128) == 1) {
    goto LABEL_4;
  }
  if (v6 != 1)
  {
    if (*(void *)(a1 + 88) == 1)
    {
LABEL_9:
      long long v14 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      long long v15 = *(_OWORD *)(a2 + 32);
      *uint64_t v5 = *v7;
      *(_OWORD *)(a1 + 32) = v15;
      long long v16 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v16;
      goto LABEL_10;
    }
    uint64_t v13 = *(void *)(a2 + 88);
    if (v13 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1 + 16);
      goto LABEL_9;
    }
    uint64_t v19 = *(void *)(a2 + 48);
    char v20 = *(unsigned char *)(a2 + 56);
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 48);
    long long v25 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v25;
    *(void *)(a1 + 48) = v19;
    char v26 = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v20;
    outlined consume of AnyShareConfiguration.Storage(v21, v22, v23, v24, v26);
    if (*(void *)(a1 + 88))
    {
      if (v13)
      {
        char v27 = *(unsigned char *)(a2 + 80);
        uint64_t v28 = *(void *)(a1 + 64);
        uint64_t v29 = *(void *)(a1 + 72);
        char v30 = *(unsigned char *)(a1 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(unsigned char *)(a1 + 80) = v27;
        outlined consume of Text.Storage(v28, v29, v30);
        *(void *)(a1 + 88) = v13;
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      outlined destroy of Text(a1 + 64);
    }
    long long v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
LABEL_22:
    if (*(void *)(a1 + 120))
    {
      uint64_t v32 = *(void *)(a2 + 120);
      if (v32)
      {
        char v33 = *(unsigned char *)(a2 + 112);
        uint64_t v34 = *(void *)(a1 + 96);
        uint64_t v35 = *(void *)(a1 + 104);
        char v36 = *(unsigned char *)(a1 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 112) = v33;
        outlined consume of Text.Storage(v34, v35, v36);
        *(void *)(a1 + 120) = v32;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1 + 96);
    }
    long long v37 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v37;
LABEL_10:
    if (*v4)
    {
      if (v6)
      {
        uint64_t v17 = *(void *)(a2 + 136);
        *(void *)(a1 + 128) = v6;
        *(void *)(a1 + 136) = v17;
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v6)
    {
      uint64_t v18 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v6;
      *(void *)(a1 + 136) = v18;
      return a1;
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 128);
    return a1;
  }
  outlined destroy of SharingPickerHostModifier.Model(a1 + 16);
LABEL_4:
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  long long v10 = *(_OWORD *)(a2 + 32);
  *uint64_t v5 = *v7;
  *(_OWORD *)(a1 + 32) = v10;
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  return a1;
}

void destroy for SharingPickerHostModifier.Model(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != 1)
  {
    outlined consume of AnyShareConfiguration.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
    if (v2)
    {
      outlined consume of Text.Storage(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 104))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
      swift_bridgeObjectRelease();
    }
  }
  if (*(void *)(a1 + 112))
  {
    swift_release();
  }
}

uint64_t initializeWithCopy for SharingPickerHostModifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 72);
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  char v12 = *(unsigned char *)(a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v8, v9, v10, v11, v12);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 40) = v12;
  if (v4)
  {
    uint64_t v13 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    char v15 = *(unsigned char *)(a2 + 64);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v14;
    *(unsigned char *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v4;
    swift_bridgeObjectRetain();
    uint64_t v16 = *(void *)(a2 + 104);
    if (v16)
    {
LABEL_5:
      uint64_t v17 = *(void *)(a2 + 80);
      uint64_t v18 = *(void *)(a2 + 88);
      char v19 = *(unsigned char *)(a2 + 96);
      outlined copy of Text.Storage(v17, v18, v19);
      *(void *)(a1 + 80) = v17;
      *(void *)(a1 + 88) = v18;
      *(unsigned char *)(a1 + 96) = v19;
      *(void *)(a1 + 104) = v16;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v20;
    uint64_t v16 = *(void *)(a2 + 104);
    if (v16) {
      goto LABEL_5;
    }
  }
  long long v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
LABEL_8:
  uint64_t v22 = *(void *)(a2 + 112);
  if (v22)
  {
    uint64_t v23 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v22;
    *(void *)(a1 + 120) = v23;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  return a1;
}

uint64_t assignWithCopy for SharingPickerHostModifier.Model(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 9);
  if (*(void *)(a1 + 72) == 1)
  {
    if (v4 == 1)
    {
      long long v5 = *a2;
      long long v6 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v5;
      long long v7 = a2[3];
      long long v8 = a2[4];
      long long v9 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      goto LABEL_25;
    }
    *(void *)a1 = *(void *)a2;
    uint64_t v15 = *((void *)a2 + 1);
    uint64_t v16 = *((void *)a2 + 2);
    uint64_t v17 = *((void *)a2 + 3);
    uint64_t v18 = *((void *)a2 + 4);
    char v19 = *((unsigned char *)a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v15, v16, v17, v18, v19);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v16;
    *(void *)(a1 + 24) = v17;
    *(void *)(a1 + 32) = v18;
    *(unsigned char *)(a1 + 40) = v19;
    if (*((void *)a2 + 9))
    {
      uint64_t v20 = *((void *)a2 + 6);
      uint64_t v21 = *((void *)a2 + 7);
      char v22 = *((unsigned char *)a2 + 64);
      outlined copy of Text.Storage(v20, v21, v22);
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v21;
      *(unsigned char *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
      if (!*((void *)a2 + 13)) {
        goto LABEL_13;
      }
    }
    else
    {
      long long v42 = a2[4];
      *(_OWORD *)(a1 + 48) = a2[3];
      *(_OWORD *)(a1 + 64) = v42;
      if (!*((void *)a2 + 13))
      {
LABEL_13:
        long long v43 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v43;
        goto LABEL_25;
      }
    }
    goto LABEL_22;
  }
  if (v4 == 1)
  {
    outlined destroy of AnyIdentifiableShareConfiguration(a1);
    long long v11 = a2[1];
    long long v10 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    long long v12 = a2[6];
    long long v14 = a2[3];
    long long v13 = a2[4];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 64) = v13;
    goto LABEL_25;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v23 = *((void *)a2 + 1);
  uint64_t v24 = *((void *)a2 + 2);
  uint64_t v25 = *((void *)a2 + 3);
  uint64_t v26 = *((void *)a2 + 4);
  char v27 = *((unsigned char *)a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v23, v24, v25, v26, v27);
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t v31 = *(void *)(a1 + 32);
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v25;
  *(void *)(a1 + 32) = v26;
  char v32 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v27;
  outlined consume of AnyShareConfiguration.Storage(v28, v29, v30, v31, v32);
  char v33 = (_OWORD *)(a1 + 48);
  uint64_t v34 = a2 + 3;
  uint64_t v35 = *((void *)a2 + 9);
  if (*(void *)(a1 + 72))
  {
    if (v35)
    {
      uint64_t v36 = *((void *)a2 + 6);
      uint64_t v37 = *((void *)a2 + 7);
      char v38 = *((unsigned char *)a2 + 64);
      outlined copy of Text.Storage(v36, v37, v38);
      uint64_t v39 = *(void *)(a1 + 48);
      uint64_t v40 = *(void *)(a1 + 56);
      char v41 = *(unsigned char *)(a1 + 64);
      *(void *)(a1 + 48) = v36;
      *(void *)(a1 + 56) = v37;
      *(unsigned char *)(a1 + 64) = v38;
      outlined consume of Text.Storage(v39, v40, v41);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 48);
      long long v47 = a2[4];
      *char v33 = *v34;
      *(_OWORD *)(a1 + 64) = v47;
    }
  }
  else if (v35)
  {
    uint64_t v44 = *((void *)a2 + 6);
    uint64_t v45 = *((void *)a2 + 7);
    char v46 = *((unsigned char *)a2 + 64);
    outlined copy of Text.Storage(v44, v45, v46);
    *(void *)(a1 + 48) = v44;
    *(void *)(a1 + 56) = v45;
    *(unsigned char *)(a1 + 64) = v46;
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v48 = a2[4];
    *char v33 = *v34;
    *(_OWORD *)(a1 + 64) = v48;
  }
  uint64_t v49 = (_OWORD *)(a1 + 80);
  uint64_t v50 = a2 + 5;
  uint64_t v51 = *((void *)a2 + 13);
  if (*(void *)(a1 + 104))
  {
    if (v51)
    {
      uint64_t v52 = *((void *)a2 + 10);
      uint64_t v53 = *((void *)a2 + 11);
      char v54 = *((unsigned char *)a2 + 96);
      outlined copy of Text.Storage(v52, v53, v54);
      uint64_t v55 = *(void *)(a1 + 80);
      uint64_t v56 = *(void *)(a1 + 88);
      char v57 = *(unsigned char *)(a1 + 96);
      *(void *)(a1 + 80) = v52;
      *(void *)(a1 + 88) = v53;
      *(unsigned char *)(a1 + 96) = v54;
      outlined consume of Text.Storage(v55, v56, v57);
      *(void *)(a1 + 104) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 80);
      long long v61 = a2[6];
      *uint64_t v49 = *v50;
      *(_OWORD *)(a1 + 96) = v61;
    }
  }
  else
  {
    if (v51)
    {
LABEL_22:
      uint64_t v58 = *((void *)a2 + 10);
      uint64_t v59 = *((void *)a2 + 11);
      char v60 = *((unsigned char *)a2 + 96);
      outlined copy of Text.Storage(v58, v59, v60);
      *(void *)(a1 + 80) = v58;
      *(void *)(a1 + 88) = v59;
      *(unsigned char *)(a1 + 96) = v60;
      *(void *)(a1 + 104) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      goto LABEL_25;
    }
    long long v62 = a2[6];
    *uint64_t v49 = *v50;
    *(_OWORD *)(a1 + 96) = v62;
  }
LABEL_25:
  uint64_t v63 = *((void *)a2 + 14);
  if (!*(void *)(a1 + 112))
  {
    if (v63)
    {
      uint64_t v65 = *((void *)a2 + 15);
      *(void *)(a1 + 112) = v63;
      *(void *)(a1 + 120) = v65;
      swift_retain();
      return a1;
    }
LABEL_31:
    *(_OWORD *)(a1 + 112) = a2[7];
    return a1;
  }
  if (!v63)
  {
    swift_release();
    goto LABEL_31;
  }
  uint64_t v64 = *((void *)a2 + 15);
  *(void *)(a1 + 112) = v63;
  *(void *)(a1 + 120) = v64;
  swift_retain();
  swift_release();
  return a1;
}